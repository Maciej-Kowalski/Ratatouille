
ratatouille_transfer_audio_buffered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014888  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080149c8  080149c8  000159c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ec8  08014ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014ed0  08014ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014ed4  08014ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e8  20000008  08014ed8  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021dc  200002f0  080151c0  000162f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200024cc  080151c0  000164cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dcd9  00000000  00000000  00016320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057a2  00000000  00000000  00043ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b50  00000000  00000000  000497a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002167  00000000  00000000  0004c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab71  00000000  00000000  0004e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f34c  00000000  00000000  00078fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100a0e  00000000  00000000  000a8314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a8d22  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca34  00000000  00000000  001a8d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  001b579c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f0 	.word	0x200002f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080149b0 	.word	0x080149b0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f4 	.word	0x200002f4
 800017c:	080149b0 	.word	0x080149b0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	4613      	mov	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <bmi160_get_regs+0x24>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e017      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000e78:	23f4      	movs	r3, #244	@ 0xf4
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e011      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d103      	bne.n	8000e8e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69dc      	ldr	r4, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7858      	ldrb	r0, [r3, #1]
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	47a0      	blx	r4
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}

08000eae <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000eae:	b590      	push	{r4, r7, lr}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <bmi160_set_regs+0x28>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	75fb      	strb	r3, [r7, #23]
 8000eda:	e045      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000ee2:	23f4      	movs	r3, #244	@ 0xf4
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e03f      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	789b      	ldrb	r3, [r3, #2]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d103      	bne.n	8000ef8 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef6:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b11      	cmp	r3, #17
 8000efe:	d003      	beq.n	8000f08 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000f04:	2b15      	cmp	r3, #21
 8000f06:	d124      	bne.n	8000f52 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1c      	ldr	r4, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7858      	ldrb	r0, [r3, #1]
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	7bf9      	ldrb	r1, [r7, #15]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2001      	movs	r0, #1
 8000f22:	4798      	blx	r3
 8000f24:	e01a      	b.n	8000f5c <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1c      	ldr	r4, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7858      	ldrb	r0, [r3, #1]
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	441a      	add	r2, r3
 8000f34:	7bf9      	ldrb	r1, [r7, #15]
 8000f36:	2301      	movs	r3, #1
 8000f38:	47a0      	blx	r4
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	2001      	movs	r0, #1
 8000f4a:	4798      	blx	r3
            for (; count < len; count++)
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8e4      	bhi.n	8000f26 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8000f64:	23fe      	movs	r3, #254	@ 0xfe
 8000f66:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fccd 	bl	8001920 <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <bmi160_init+0x38>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000f9a:	f107 010d 	add.w	r1, r7, #13
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	207f      	movs	r0, #127	@ 0x7f
 8000fa4:	f7ff ff50 	bl	8000e48 <bmi160_get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d127      	bne.n	8001004 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fba:	e007      	b.n	8000fcc <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff40 	bl	8000e48 <bmi160_get_regs>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	73ba      	strb	r2, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <bmi160_init+0x6a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fdc:	d1ee      	bne.n	8000fbc <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <bmi160_init+0x8c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fec:	d108      	bne.n	8001000 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	22ff      	movs	r2, #255	@ 0xff
 8000ff2:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f80b 	bl	8001010 <bmi160_soft_reset>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001000:	23fd      	movs	r3, #253	@ 0xfd
 8001002:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001018:	23b6      	movs	r3, #182	@ 0xb6
 800101a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <bmi160_soft_reset+0x1a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800102a:	23ff      	movs	r3, #255	@ 0xff
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e024      	b.n	800107a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001030:	f107 010e 	add.w	r1, r7, #14
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	207e      	movs	r0, #126	@ 0x7e
 800103a:	f7ff ff38 	bl	8000eae <bmi160_set_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	2001      	movs	r0, #1
 8001048:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <bmi160_soft_reset+0x5c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800105a:	f107 010e 	add.w	r1, r7, #14
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	207f      	movs	r0, #127	@ 0x7f
 8001064:	f7ff fef0 	bl	8000e48 <bmi160_get_regs>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fc73 	bl	8001960 <default_param_settg>
        }
    }

    return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <bmi160_set_sens_conf+0x1a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	@ 0xff
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e01f      	b.n	80010e6 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fc84 	bl	80019b4 <set_accel_conf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d116      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fdbf 	bl	8001c3c <set_gyro_conf>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f811 	bl	80010f2 <bmi160_set_power_mode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd78 	bl	8001bd2 <check_invalid_settg>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <bmi160_set_power_mode+0x1a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00d      	b.n	800112e <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe9b 	bl	8001e4e <set_accel_pwr>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ff29 	bl	8001f7c <set_gyro_pwr>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d879      	bhi.n	8001246 <bmi160_set_int_config+0x10a>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <bmi160_set_int_config+0x1c>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001191 	.word	0x08001191
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011c9 	.word	0x080011c9
 8001164:	080011bb 	.word	0x080011bb
 8001168:	080011bb 	.word	0x080011bb
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011e5 	.word	0x080011e5
 8001174:	08001201 	.word	0x08001201
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011ad 	.word	0x080011ad
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800121d 	.word	0x0800121d
 8001188:	0800122b 	.word	0x0800122b
 800118c:	08001239 	.word	0x08001239
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f95a 	bl	800144c <set_accel_any_motion_int>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
            break;
 800119c:	e054      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ed 	bl	8001580 <set_accel_sig_motion_int>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
            break;
 80011aa:	e04d      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fa14 	bl	80015dc <set_accel_no_motion_int>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
            break;
 80011b8:	e046      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f973 	bl	80014a8 <set_accel_tap_int>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
            break;
 80011c6:	e03f      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa34 	bl	8001638 <set_accel_step_detect_int>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
            break;
 80011d4:	e038      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fa6e 	bl	80016ba <set_accel_orientation_int>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
            break;
 80011e2:	e031      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 faa8 	bl	800173c <set_accel_flat_detect_int>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
            break;
 80011f0:	e02a      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fae2 	bl	80017be <set_accel_low_g_int>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
            break;
 80011fe:	e023      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb26 	bl	8001854 <set_accel_high_g_int>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
            break;
 800120c:	e01c      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f982 	bl	800151a <set_accel_gyro_data_ready_int>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
            break;
 800121a:	e015      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f002 fa00 	bl	8003624 <set_fifo_full_int>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
            break;
 8001228:	e00e      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fa60 	bl	80036f2 <set_fifo_watermark_int>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
            break;
 8001236:	e007      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fb55 	bl	80018ea <set_intr_pin_config>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
            break;
 8001244:	e000      	b.n	8001248 <bmi160_set_int_config+0x10c>
        default:
            break;
 8001246:	bf00      	nop
    }

    return rslt;
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb5d 	bl	8001920 <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e068      	b.n	800134a <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f002 fac0 	bl	8003800 <configure_offset_enable>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8001284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800128c:	f107 0116 	add.w	r1, r7, #22
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	2069      	movs	r0, #105	@ 0x69
 8001296:	f7ff fdd7 	bl	8000e48 <bmi160_get_regs>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f023 030c 	bic.w	r3, r3, #12
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 800131c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d112      	bne.n	800134a <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001324:	f107 0116 	add.w	r1, r7, #22
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	2069      	movs	r0, #105	@ 0x69
 800132e:	f7ff fdbe 	bl	8000eae <bmi160_set_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f002 faa7 	bl	8003894 <trigger_foc>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f000 fadd 	bl	8001920 <null_ptr_check>
 8001366:	4603      	mov	r3, r0
 8001368:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800136a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001372:	23ff      	movs	r3, #255	@ 0xff
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	e063      	b.n	8001440 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	2071      	movs	r0, #113	@ 0x71
 8001382:	f7ff fd61 	bl	8000e48 <bmi160_get_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	b25a      	sxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80013a6:	7cbb      	ldrb	r3, [r7, #18]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013ae:	7f7b      	ldrb	r3, [r7, #29]
 80013b0:	039b      	lsls	r3, r3, #14
 80013b2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013ba:	8b7a      	ldrh	r2, [r7, #26]
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80013c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <bmi160_get_offsets+0x76>
 80013ca:	333f      	adds	r3, #63	@ 0x3f
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	109b      	asrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013e4:	7f7b      	ldrb	r3, [r7, #29]
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013ea:	7fbb      	ldrb	r3, [r7, #30]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013f0:	8b7a      	ldrh	r2, [r7, #26]
 80013f2:	8b3b      	ldrh	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80013f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <bmi160_get_offsets+0xac>
 8001400:	333f      	adds	r3, #63	@ 0x3f
 8001402:	119b      	asrs	r3, r3, #6
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800140a:	7c7b      	ldrb	r3, [r7, #17]
 800140c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800140e:	7cbb      	ldrb	r3, [r7, #18]
 8001410:	111b      	asrs	r3, r3, #4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800141a:	7f7b      	ldrb	r3, [r7, #29]
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001426:	8b7a      	ldrh	r2, [r7, #26]
 8001428:	8b3b      	ldrh	r3, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <bmi160_get_offsets+0xe2>
 8001436:	333f      	adds	r3, #63	@ 0x3f
 8001438:	119b      	asrs	r3, r3, #6
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f000 fa62 	bl	8001920 <null_ptr_check>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <set_accel_any_motion_int+0x22>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800146e:	23ff      	movs	r3, #255	@ 0xff
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e013      	b.n	800149c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f000 fdc1 	bl	8002004 <enable_accel_any_motion_int>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ffef 	bl	8002476 <config_any_motion_int_settg>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f000 fa34 	bl	8001920 <null_ptr_check>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <set_accel_tap_int+0x22>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e01e      	b.n	800150e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3304      	adds	r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fb29 	bl	8002b32 <enable_tap_int>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d110      	bne.n	800150e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f9fb 	bl	80018ea <set_intr_pin_config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 fb67 	bl	8002bd8 <config_tap_int_settg>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f000 f9fb 	bl	8001920 <null_ptr_check>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <set_accel_gyro_data_ready_int+0x22>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e018      	b.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 ffd0 	bl	80024e8 <enable_data_ready_int>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9c7 	bl	80018ea <set_intr_pin_config>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fe84 	bl	8002278 <map_hardware_interrupt>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f000 f9c8 	bl	8001920 <null_ptr_check>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <set_accel_sig_motion_int+0x22>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e013      	b.n	80015d0 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f001 f8ef 	bl	8002794 <enable_sig_motion_int>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f925 	bl	8002816 <config_sig_motion_int_settg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f000 f99a 	bl	8001920 <null_ptr_check>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <set_accel_no_motion_int+0x22>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015fe:	23ff      	movs	r3, #255	@ 0xff
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e013      	b.n	800162c <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 ff98 	bl	8002542 <enable_no_motion_int>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 ffe2 	bl	80025ec <config_no_motion_int_settg>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 f96c 	bl	8001920 <null_ptr_check>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <set_accel_step_detect_int+0x22>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e026      	b.n	80016ae <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f001 f9a9 	bl	80029c0 <enable_step_detect_int>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f934 	bl	80018ea <set_intr_pin_config>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd57 	bl	8002144 <map_feature_interrupt>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 f9c4 	bl	8002a32 <config_step_detect>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f000 f92b 	bl	8001920 <null_ptr_check>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <set_accel_orientation_int+0x22>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e026      	b.n	8001730 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f001 fb78 	bl	8002de0 <enable_orient_int>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d119      	bne.n	8001730 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8f3 	bl	80018ea <set_intr_pin_config>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd16 	bl	8002144 <map_feature_interrupt>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f001 fb93 	bl	8002e52 <config_orient_int_settg>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f8ea 	bl	8001920 <null_ptr_check>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <set_accel_flat_detect_int+0x22>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800175e:	23ff      	movs	r3, #255	@ 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e026      	b.n	80017b2 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f001 fbff 	bl	8002f70 <enable_flat_int>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8b2 	bl	80018ea <set_intr_pin_config>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fcd5 	bl	8002144 <map_feature_interrupt>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f001 fc17 	bl	8002fdc <config_flat_int_settg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 f8a9 	bl	8001920 <null_ptr_check>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <set_accel_low_g_int+0x22>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e030      	b.n	8001848 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f001 fc50 	bl	8003094 <enable_low_g_int>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d123      	bne.n	8001848 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f871 	bl	80018ea <set_intr_pin_config>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc94 	bl	8002144 <map_feature_interrupt>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f001 fc6b 	bl	8003106 <config_low_g_data_src>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f001 fc98 	bl	8003174 <config_low_g_int_settg>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 f85e 	bl	8001920 <null_ptr_check>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <set_accel_high_g_int+0x22>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e030      	b.n	80018de <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f001 fccd 	bl	8003224 <enable_high_g_int>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f826 	bl	80018ea <set_intr_pin_config>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fc49 	bl	8002144 <map_feature_interrupt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fd0a 	bl	80032da <config_high_g_data_src>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f001 fd37 	bl	8003348 <config_high_g_int_settg>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fd6c 	bl	80033d4 <config_int_out_ctrl>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f001 fe27 	bl	800355e <config_int_latch>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <null_ptr_check+0x26>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <null_ptr_check+0x26>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <null_ptr_check+0x26>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2210      	movs	r2, #16
 8001978:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2208      	movs	r2, #8
 800198a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2214      	movs	r2, #20
 8001990:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f833 	bl	8001a32 <check_accel_config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d126      	bne.n	8001a26 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	2040      	movs	r0, #64	@ 0x40
 80019e2:	f7ff fa64 	bl	8000eae <bmi160_set_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	795a      	ldrb	r2, [r3, #5]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79da      	ldrb	r2, [r3, #7]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2041      	movs	r0, #65	@ 0x41
 8001a0e:	f7ff fa4e 	bl	8000eae <bmi160_set_regs>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	799a      	ldrb	r2, [r3, #6]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2040      	movs	r0, #64	@ 0x40
 8001a44:	f7ff fa00 	bl	8000e48 <bmi160_get_regs>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f81e 	bl	8001a98 <process_accel_odr>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f848 	bl	8001b00 <process_accel_bw>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f871 	bl	8001b6a <process_accel_range>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d81a      	bhi.n	8001aec <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	795a      	ldrb	r2, [r3, #5]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7a5b      	ldrb	r3, [r3, #9]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d016      	beq.n	8001af0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	795b      	ldrb	r3, [r3, #5]
 8001ac6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e001      	b.n	8001af0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aec:	23fc      	movs	r3, #252	@ 0xfc
 8001aee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	79db      	ldrb	r3, [r3, #7]
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d81b      	bhi.n	8001b56 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	79da      	ldrb	r2, [r3, #7]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7adb      	ldrb	r3, [r3, #11]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d017      	beq.n	8001b5a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	79db      	ldrb	r3, [r3, #7]
 8001b2e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b38:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e001      	b.n	8001b5a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b56:	23fc      	movs	r3, #252	@ 0xfc
 8001b58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	799b      	ldrb	r3, [r3, #6]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d81a      	bhi.n	8001bbe <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	799a      	ldrb	r2, [r3, #6]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7a9b      	ldrb	r3, [r3, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d016      	beq.n	8001bc2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001ba4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001bbe:	23fc      	movs	r3, #252	@ 0xfc
 8001bc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff f92e 	bl	8000e48 <bmi160_get_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001c08:	23fa      	movs	r3, #250	@ 0xfa
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e010      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d102      	bne.n	8001c1a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001c14:	23f9      	movs	r3, #249	@ 0xf9
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e00a      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d102      	bne.n	8001c26 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001c20:	23f8      	movs	r3, #248	@ 0xf8
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e004      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d101      	bne.n	8001c30 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001c2c:	23f7      	movs	r3, #247	@ 0xf7
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001c44:	2300      	movs	r3, #0
 8001c46:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f833 	bl	8001cba <check_gyro_config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d126      	bne.n	8001cae <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2042      	movs	r0, #66	@ 0x42
 8001c6a:	f7ff f920 	bl	8000eae <bmi160_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b5a      	ldrb	r2, [r3, #13]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7bda      	ldrb	r2, [r3, #15]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	2043      	movs	r0, #67	@ 0x43
 8001c96:	f7ff f90a 	bl	8000eae <bmi160_set_regs>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b9a      	ldrb	r2, [r3, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	2042      	movs	r0, #66	@ 0x42
 8001ccc:	f7ff f8bc 	bl	8000e48 <bmi160_get_regs>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11b      	bne.n	8001d14 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f81e 	bl	8001d20 <process_gyro_odr>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f848 	bl	8001d88 <process_gyro_bw>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f86b 	bl	8001de6 <process_gyro_range>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	d81a      	bhi.n	8001d74 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b5a      	ldrb	r2, [r3, #13]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7c5b      	ldrb	r3, [r3, #17]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d016      	beq.n	8001d78 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001d5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d74:	23fc      	movs	r3, #252	@ 0xfc
 8001d76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7bdb      	ldrb	r3, [r3, #15]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d815      	bhi.n	8001dd2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7bdb      	ldrb	r3, [r3, #15]
 8001daa:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001db4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dd2:	23fc      	movs	r3, #252	@ 0xfc
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d81a      	bhi.n	8001e3a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b9a      	ldrb	r2, [r3, #14]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7c9b      	ldrb	r3, [r3, #18]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d016      	beq.n	8001e3e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001e3a:	23fc      	movs	r3, #252	@ 0xfc
 8001e3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d92b      	bls.n	8001ebe <set_accel_pwr+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d827      	bhi.n	8001ebe <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791a      	ldrb	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d024      	beq.n	8001ec4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001e7a:	f107 030e 	add.w	r3, r7, #14
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f826 	bl	8001ed2 <process_under_sampling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1d19      	adds	r1, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	207e      	movs	r0, #126	@ 0x7e
 8001e9c:	f7ff f807 	bl	8000eae <bmi160_set_regs>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d103      	bne.n	8001eb4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	791a      	ldrb	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ebc:	e002      	b.n	8001ec4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ebe:	23f3      	movs	r3, #243	@ 0xf3
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e000      	b.n	8001ec6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ec4:	bf00      	nop
    }

    return rslt;
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	2040      	movs	r0, #64	@ 0x40
 8001eec:	f7fe ffac 	bl	8000e48 <bmi160_get_regs>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d139      	bne.n	8001f70 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d120      	bne.n	8001f46 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7fe ffc4 	bl	8000eae <bmi160_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11e      	bne.n	8001f70 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	2058      	movs	r0, #88	@ 0x58
 8001f3c:	f7fe ffb7 	bl	8000eae <bmi160_set_regs>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e014      	b.n	8001f70 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0f      	bge.n	8001f70 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f58:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	f7fe ffa1 	bl	8000eae <bmi160_set_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	2b14      	cmp	r3, #20
 8001f8e:	d007      	beq.n	8001fa0 <set_gyro_pwr+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b15      	cmp	r3, #21
 8001f96:	d003      	beq.n	8001fa0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f9c:	2b17      	cmp	r3, #23
 8001f9e:	d129      	bne.n	8001ff4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1a      	ldrb	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7c1b      	ldrb	r3, [r3, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d025      	beq.n	8001ff8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 010c 	add.w	r1, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	207e      	movs	r0, #126	@ 0x7e
 8001fb8:	f7fe ff79 	bl	8000eae <bmi160_set_regs>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7c1b      	ldrb	r3, [r3, #16]
 8001fc4:	2b14      	cmp	r3, #20
 8001fc6:	d104      	bne.n	8001fd2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2050      	movs	r0, #80	@ 0x50
 8001fce:	4798      	blx	r3
 8001fd0:	e00b      	b.n	8001fea <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7c1b      	ldrb	r3, [r3, #16]
 8001fd6:	2b17      	cmp	r3, #23
 8001fd8:	d107      	bne.n	8001fea <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fde:	2b15      	cmp	r3, #21
 8001fe0:	d103      	bne.n	8001fea <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7b1a      	ldrb	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001ff2:	e001      	b.n	8001ff8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ff4:	23f3      	movs	r3, #243	@ 0xf3
 8001ff6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002016:	f107 010d 	add.w	r1, r7, #13
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	2050      	movs	r0, #80	@ 0x50
 8002020:	f7fe ff12 	bl	8000e48 <bmi160_get_regs>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d151      	bne.n	80020d4 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d039      	beq.n	80020b2 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	4313      	orrs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	b25a      	sxtb	r2, r3
 8002076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	b25a      	sxtb	r2, r3
 800209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	70da      	strb	r2, [r3, #3]
 80020b0:	e007      	b.n	80020c2 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f023 0307 	bic.w	r3, r3, #7
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80020c2:	f107 010d 	add.w	r1, r7, #13
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	2050      	movs	r0, #80	@ 0x50
 80020cc:	f7fe feef 	bl	8000eae <bmi160_set_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80020f0:	f107 010d 	add.w	r1, r7, #13
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	2062      	movs	r0, #98	@ 0x62
 80020fa:	f7fe fea5 	bl	8000e48 <bmi160_get_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002124:	f107 010d 	add.w	r1, r7, #13
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	2062      	movs	r0, #98	@ 0x62
 800212e:	f7fe febe 	bl	8000eae <bmi160_set_regs>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800214e:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4611      	mov	r1, r2
 8002158:	8019      	strh	r1, [r3, #0]
 800215a:	3302      	adds	r3, #2
 800215c:	0c12      	lsrs	r2, r2, #16
 800215e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002160:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	8019      	strh	r1, [r3, #0]
 800216c:	3302      	adds	r3, #2
 800216e:	0c12      	lsrs	r2, r2, #16
 8002170:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2203      	movs	r2, #3
 800217a:	2055      	movs	r0, #85	@ 0x55
 800217c:	f7fe fe64 	bl	8000e48 <bmi160_get_regs>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16a      	bne.n	8002262 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	b25a      	sxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	4619      	mov	r1, r3
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <map_feature_interrupt+0x130>)
 8002198:	5c5b      	ldrb	r3, [r3, r1]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <map_feature_interrupt+0x130>)
 80021b4:	5c5b      	ldrb	r3, [r3, r1]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d83b      	bhi.n	8002244 <map_feature_interrupt+0x100>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <map_feature_interrupt+0x90>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ef 	.word	0x080021ef
 80021dc:	08002207 	.word	0x08002207
 80021e0:	0800221f 	.word	0x0800221f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80021e8:	7abb      	ldrb	r3, [r7, #10]
 80021ea:	73bb      	strb	r3, [r7, #14]
                break;
 80021ec:	e02c      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80021ee:	7a3a      	ldrb	r2, [r7, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <map_feature_interrupt+0x130>)
 80021f8:	5c5b      	ldrb	r3, [r3, r1]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	73bb      	strb	r3, [r7, #14]
                break;
 8002204:	e020      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002206:	7aba      	ldrb	r2, [r7, #10]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	4619      	mov	r1, r3
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <map_feature_interrupt+0x130>)
 8002210:	5c5b      	ldrb	r3, [r3, r1]
 8002212:	4313      	orrs	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002218:	7a3b      	ldrb	r3, [r7, #8]
 800221a:	733b      	strb	r3, [r7, #12]
                break;
 800221c:	e014      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800221e:	7a3a      	ldrb	r2, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	4619      	mov	r1, r3
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <map_feature_interrupt+0x130>)
 8002228:	5c5b      	ldrb	r3, [r3, r1]
 800222a:	4313      	orrs	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002230:	7aba      	ldrb	r2, [r7, #10]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	4619      	mov	r1, r3
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <map_feature_interrupt+0x130>)
 800223a:	5c5b      	ldrb	r3, [r3, r1]
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73bb      	strb	r3, [r7, #14]
                break;
 8002242:	e001      	b.n	8002248 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002244:	23fc      	movs	r3, #252	@ 0xfc
 8002246:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	2055      	movs	r0, #85	@ 0x55
 800225a:	f7fe fe28 	bl	8000eae <bmi160_set_regs>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	080149c8 	.word	0x080149c8
 8002274:	08014a78 	.word	0x08014a78

08002278 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 800228a:	f107 010d 	add.w	r1, r7, #13
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	2056      	movs	r0, #86	@ 0x56
 8002294:	f7fe fdd8 	bl	8000e48 <bmi160_get_regs>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d168      	bne.n	8002376 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d839      	bhi.n	8002358 <map_hardware_interrupt+0xe0>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <map_hardware_interrupt+0x74>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	0800232f 	.word	0x0800232f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	737b      	strb	r3, [r7, #13]
                break;
 8002300:	e02c      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	461a      	mov	r2, r3
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <map_hardware_interrupt+0x10c>)
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	4313      	orrs	r3, r2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	737b      	strb	r3, [r7, #13]
                break;
 8002318:	e020      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002322:	5c9a      	ldrb	r2, [r3, r2]
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	737b      	strb	r3, [r7, #13]
                break;
 800232c:	e016      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	461a      	mov	r2, r3
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002336:	5c9a      	ldrb	r2, [r3, r2]
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	461a      	mov	r2, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b2da      	uxtb	r2, r3
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	4313      	orrs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]
                break;
 8002356:	e001      	b.n	800235c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002358:	23fc      	movs	r3, #252	@ 0xfc
 800235a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002364:	f107 010d 	add.w	r1, r7, #13
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	2056      	movs	r0, #86	@ 0x56
 800236e:	f7fe fd9e 	bl	8000eae <bmi160_set_regs>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08014a78 	.word	0x08014a78

08002388 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800239a:	f107 010d 	add.w	r1, r7, #13
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2059      	movs	r0, #89	@ 0x59
 80023a4:	f7fe fd50 	bl	8000e48 <bmi160_get_regs>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d119      	bne.n	80023e8 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80023b4:	7b7b      	ldrb	r3, [r7, #13]
 80023b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ba:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80023d6:	f107 010d 	add.w	r1, r7, #13
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	2059      	movs	r0, #89	@ 0x59
 80023e0:	f7fe fd65 	bl	8000eae <bmi160_set_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002406:	2300      	movs	r3, #0
 8002408:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	205f      	movs	r0, #95	@ 0x5f
 8002414:	f7fe fd18 	bl	8000e48 <bmi160_get_regs>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d122      	bne.n	800246a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002430:	7b3b      	ldrb	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800243c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002440:	b25a      	sxtb	r2, r3
 8002442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002446:	4313      	orrs	r3, r2
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002458:	f107 0108 	add.w	r1, r7, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	205f      	movs	r0, #95	@ 0x5f
 8002462:	f7fe fd24 	bl	8000eae <bmi160_set_regs>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fa30 	bl	80018ea <set_intr_pin_config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800248e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d122      	bne.n	80024dc <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe22 	bl	80020e0 <disable_sig_motion_int>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80024a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe4a 	bl	8002144 <map_feature_interrupt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80024b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff62 	bl	8002388 <config_any_motion_src>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80024c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7ff ff8e 	bl	80023f4 <config_any_dur_threshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80024dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80024f8:	f107 010d 	add.w	r1, r7, #13
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	2051      	movs	r0, #81	@ 0x51
 8002502:	f7fe fca1 	bl	8000e48 <bmi160_get_regs>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	f023 0310 	bic.w	r3, r3, #16
 8002518:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002524:	f107 010d 	add.w	r1, r7, #13
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	2051      	movs	r0, #81	@ 0x51
 800252e:	f7fe fcbe 	bl	8000eae <bmi160_set_regs>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002554:	f107 010d 	add.w	r1, r7, #13
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	2052      	movs	r0, #82	@ 0x52
 800255e:	f7fe fc73 	bl	8000e48 <bmi160_get_regs>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d138      	bne.n	80025e0 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800257c:	7b7b      	ldrb	r3, [r7, #13]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80025ce:	f107 010d 	add.w	r1, r7, #13
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2052      	movs	r0, #82	@ 0x52
 80025d8:	f7fe fc69 	bl	8000eae <bmi160_set_regs>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff f975 	bl	80018ea <set_intr_pin_config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fd98 	bl	8002144 <map_feature_interrupt>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f812 	bl	800264c <config_no_motion_data_src>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800262c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f000 f83e 	bl	80026b8 <config_no_motion_dur_thr>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800265e:	f107 010d 	add.w	r1, r7, #13
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	2059      	movs	r0, #89	@ 0x59
 8002668:	f7fe fbee 	bl	8000e48 <bmi160_get_regs>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d119      	bne.n	80026ac <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800267e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	b25a      	sxtb	r2, r3
 800268e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002692:	4313      	orrs	r3, r2
 8002694:	b25b      	sxtb	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800269a:	f107 010d 	add.w	r1, r7, #13
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	2059      	movs	r0, #89	@ 0x59
 80026a4:	f7fe fc03 	bl	8000eae <bmi160_set_regs>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 80026ce:	2300      	movs	r3, #0
 80026d0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 80026d2:	235f      	movs	r3, #95	@ 0x5f
 80026d4:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80026d6:	f107 010b 	add.w	r1, r7, #11
 80026da:	7b38      	ldrb	r0, [r7, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	f7fe fbb2 	bl	8000e48 <bmi160_get_regs>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14b      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002700:	b2db      	uxtb	r3, r3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002712:	f107 010b 	add.w	r1, r7, #11
 8002716:	7b38      	ldrb	r0, [r7, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	f7fe fbc7 	bl	8000eae <bmi160_set_regs>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12d      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 800272c:	2362      	movs	r3, #98	@ 0x62
 800272e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002730:	f107 010b 	add.w	r1, r7, #11
 8002734:	7b38      	ldrb	r0, [r7, #12]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	f7fe fb85 	bl	8000e48 <bmi160_get_regs>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11e      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	4313      	orrs	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002772:	2361      	movs	r3, #97	@ 0x61
 8002774:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002776:	f107 0108 	add.w	r1, r7, #8
 800277a:	7b38      	ldrb	r0, [r7, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	f7fe fb95 	bl	8000eae <bmi160_set_regs>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027a6:	f107 010d 	add.w	r1, r7, #13
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	2050      	movs	r0, #80	@ 0x50
 80027b0:	f7fe fb4a 	bl	8000e48 <bmi160_get_regs>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d124      	bne.n	800280a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	70da      	strb	r2, [r3, #3]
 80027e6:	e007      	b.n	80027f8 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	22ff      	movs	r2, #255	@ 0xff
 80027f6:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027f8:	f107 010d 	add.w	r1, r7, #13
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2050      	movs	r0, #80	@ 0x50
 8002802:	f7fe fb54 	bl	8000eae <bmi160_set_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff f860 	bl	80018ea <set_intr_pin_config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800282e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fc83 	bl	8002144 <map_feature_interrupt>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f812 	bl	8002876 <config_sig_motion_data_src>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f83e 	bl	80028e2 <config_sig_dur_threshold>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800286a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002888:	f107 010d 	add.w	r1, r7, #13
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	2059      	movs	r0, #89	@ 0x59
 8002892:	f7fe fad9 	bl	8000e48 <bmi160_get_regs>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80028c4:	f107 010d 	add.w	r1, r7, #13
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	2059      	movs	r0, #89	@ 0x59
 80028ce:	f7fe faee 	bl	8000eae <bmi160_set_regs>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80028f6:	f107 010d 	add.w	r1, r7, #13
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	2060      	movs	r0, #96	@ 0x60
 8002900:	f7fe fad5 	bl	8000eae <bmi160_set_regs>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d151      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002910:	f107 010d 	add.w	r1, r7, #13
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	2062      	movs	r0, #98	@ 0x62
 800291a:	f7fe fa95 	bl	8000e48 <bmi160_get_regs>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d144      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	f023 030c 	bic.w	r3, r3, #12
 8002930:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	b25a      	sxtb	r2, r3
 8002946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800294a:	4313      	orrs	r3, r2
 800294c:	b25b      	sxtb	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002958:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b25b      	sxtb	r3, r3
 8002968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800296c:	b25a      	sxtb	r2, r3
 800296e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002972:	4313      	orrs	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	b25a      	sxtb	r2, r3
 8002996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800299a:	4313      	orrs	r3, r2
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a2:	f107 010d 	add.w	r1, r7, #13
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	2062      	movs	r0, #98	@ 0x62
 80029ac:	f7fe fa7f 	bl	8000eae <bmi160_set_regs>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80029d2:	f107 010d 	add.w	r1, r7, #13
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2052      	movs	r0, #82	@ 0x52
 80029dc:	f7fe fa34 	bl	8000e48 <bmi160_get_regs>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11c      	bne.n	8002a26 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002a14:	f107 010d 	add.w	r1, r7, #13
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2052      	movs	r0, #82	@ 0x52
 8002a1e:	f7fe fa46 	bl	8000eae <bmi160_set_regs>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8002a40:	2300      	movs	r3, #0
 8002a42:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8002a52:	2315      	movs	r3, #21
 8002a54:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8002a56:	2303      	movs	r3, #3
 8002a58:	737b      	strb	r3, [r7, #13]
 8002a5a:	e05b      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d104      	bne.n	8002a74 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8002a6a:	232d      	movs	r3, #45	@ 0x2d
 8002a6c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	737b      	strb	r3, [r7, #13]
 8002a72:	e04f      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d104      	bne.n	8002a8c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8002a82:	231d      	movs	r3, #29
 8002a84:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8002a86:	2307      	movs	r3, #7
 8002a88:	737b      	strb	r3, [r7, #13]
 8002a8a:	e043      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a98:	d13c      	bne.n	8002b14 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8002a9a:	f107 010c 	add.w	r1, r7, #12
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	207a      	movs	r0, #122	@ 0x7a
 8002aa4:	f7fe f9d0 	bl	8000e48 <bmi160_get_regs>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12f      	bne.n	8002b14 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	f023 0318 	bic.w	r3, r3, #24
 8002aba:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8002adc:	7b3b      	ldrb	r3, [r7, #12]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8002b14:	f107 010c 	add.w	r1, r7, #12
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	207a      	movs	r0, #122	@ 0x7a
 8002b1e:	f7fe f9c6 	bl	8000eae <bmi160_set_regs>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8002b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002b46:	f107 0115 	add.w	r1, r7, #21
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2050      	movs	r0, #80	@ 0x50
 8002b50:	f7fe f97a 	bl	8000e48 <bmi160_get_regs>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d135      	bne.n	8002bcc <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d114      	bne.n	8002b92 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8002b68:	7d7b      	ldrb	r3, [r7, #21]
 8002b6a:	f023 0320 	bic.w	r3, r3, #32
 8002b6e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	757b      	strb	r3, [r7, #21]
 8002b90:	e013      	b.n	8002bba <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	f023 0310 	bic.w	r3, r3, #16
 8002b98:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002bba:	f107 0115 	add.w	r1, r7, #21
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2050      	movs	r0, #80	@ 0x50
 8002bc4:	f7fe f973 	bl	8000eae <bmi160_set_regs>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7fe fe7f 	bl	80018ea <set_intr_pin_config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11a      	bne.n	8002c2e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff faa2 	bl	8002144 <map_feature_interrupt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 f813 	bl	8002c3a <config_tap_data_src>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f841 	bl	8002cac <config_tap_param>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c4c:	f107 010d 	add.w	r1, r7, #13
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2058      	movs	r0, #88	@ 0x58
 8002c56:	f7fe f8f7 	bl	8000e48 <bmi160_get_regs>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11c      	bne.n	8002ca0 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	f023 0308 	bic.w	r3, r3, #8
 8002c6c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c8e:	f107 010d 	add.w	r1, r7, #13
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	2058      	movs	r0, #88	@ 0x58
 8002c98:	f7fe f909 	bl	8000eae <bmi160_set_regs>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8002cc8:	f107 0114 	add.w	r1, r7, #20
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	2063      	movs	r0, #99	@ 0x63
 8002cd2:	f7fe f8b9 	bl	8000e48 <bmi160_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8002cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d178      	bne.n	8002dd4 <config_tap_param+0x128>
    {
        data = data_array[count];
 8002ce2:	7f3b      	ldrb	r3, [r7, #28]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cec:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d113      	bne.n	8002d1e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8002d02:	7fbb      	ldrb	r3, [r7, #30]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8002d0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8002d32:	7ebb      	ldrb	r3, [r7, #26]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
 8002d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d5a:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8002d5c:	7e7b      	ldrb	r3, [r7, #25]
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	773a      	strb	r2, [r7, #28]
 8002d72:	3320      	adds	r3, #32
 8002d74:	443b      	add	r3, r7
 8002d76:	7fba      	ldrb	r2, [r7, #30]
 8002d78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8002d7c:	7f3b      	ldrb	r3, [r7, #28]
 8002d7e:	3320      	adds	r3, #32
 8002d80:	443b      	add	r3, r7
 8002d82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002d86:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	f023 031f 	bic.w	r3, r3, #31
 8002d9a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8002d9c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b25a      	sxtb	r2, r3
 8002da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002db0:	7f3b      	ldrb	r3, [r7, #28]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	773a      	strb	r2, [r7, #28]
 8002db6:	3320      	adds	r3, #32
 8002db8:	443b      	add	r3, r7
 8002dba:	7fba      	ldrb	r2, [r7, #30]
 8002dbc:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8002dc0:	7f3b      	ldrb	r3, [r7, #28]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	f107 0114 	add.w	r1, r7, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2063      	movs	r0, #99	@ 0x63
 8002dcc:	f7fe f86f 	bl	8000eae <bmi160_set_regs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002df2:	f107 010d 	add.w	r1, r7, #13
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2050      	movs	r0, #80	@ 0x50
 8002dfc:	f7fe f824 	bl	8000e48 <bmi160_get_regs>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11c      	bne.n	8002e46 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8002e0c:	7b7b      	ldrb	r3, [r7, #13]
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e12:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002e34:	f107 010d 	add.w	r1, r7, #13
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2050      	movs	r0, #80	@ 0x50
 8002e3e:	f7fe f836 	bl	8000eae <bmi160_set_regs>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002e64:	2300      	movs	r3, #0
 8002e66:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002e68:	f107 0108 	add.w	r1, r7, #8
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	2065      	movs	r0, #101	@ 0x65
 8002e72:	f7fd ffe9 	bl	8000e48 <bmi160_get_regs>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d170      	bne.n	8002f64 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8002eea:	7a7b      	ldrb	r3, [r7, #9]
 8002eec:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef4:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f0e:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f34:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002f52:	f107 0108 	add.w	r1, r7, #8
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	2065      	movs	r0, #101	@ 0x65
 8002f5c:	f7fd ffa7 	bl	8000eae <bmi160_set_regs>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002f82:	f107 010d 	add.w	r1, r7, #13
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2050      	movs	r0, #80	@ 0x50
 8002f8c:	f7fd ff5c 	bl	8000e48 <bmi160_get_regs>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fbe:	f107 010d 	add.w	r1, r7, #13
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2050      	movs	r0, #80	@ 0x50
 8002fc8:	f7fd ff71 	bl	8000eae <bmi160_set_regs>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002fee:	2300      	movs	r3, #0
 8002ff0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8002ff2:	f107 0108 	add.w	r1, r7, #8
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2067      	movs	r0, #103	@ 0x67
 8002ffc:	f7fd ff24 	bl	8000e48 <bmi160_get_regs>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13d      	bne.n	8003088 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 800300c:	7a3b      	ldrb	r3, [r7, #8]
 800300e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003016:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	4313      	orrs	r3, r2
 8003028:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003038:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800304c:	b25a      	sxtb	r2, r3
 800304e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	7b7b      	ldrb	r3, [r7, #13]
 800306e:	4313      	orrs	r3, r2
 8003070:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003076:	f107 0108 	add.w	r1, r7, #8
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2202      	movs	r2, #2
 800307e:	2067      	movs	r0, #103	@ 0x67
 8003080:	f7fd ff15 	bl	8000eae <bmi160_set_regs>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030a6:	f107 010d 	add.w	r1, r7, #13
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	2051      	movs	r0, #81	@ 0x51
 80030b0:	f7fd feca 	bl	8000e48 <bmi160_get_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11c      	bne.n	80030fa <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80030c0:	7b7b      	ldrb	r3, [r7, #13]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030e8:	f107 010d 	add.w	r1, r7, #13
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	2051      	movs	r0, #81	@ 0x51
 80030f2:	f7fd fedc 	bl	8000eae <bmi160_set_regs>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003118:	f107 010d 	add.w	r1, r7, #13
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	2058      	movs	r0, #88	@ 0x58
 8003122:	f7fd fe91 	bl	8000e48 <bmi160_get_regs>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	b25a      	sxtb	r2, r3
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	4313      	orrs	r3, r2
 800314e:	b25b      	sxtb	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003154:	f107 010d 	add.w	r1, r7, #13
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2058      	movs	r0, #88	@ 0x58
 800315e:	f7fd fea6 	bl	8000eae <bmi160_set_regs>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003182:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <config_low_g_int_settg+0xac>)
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4611      	mov	r1, r2
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	3302      	adds	r3, #2
 8003190:	0c12      	lsrs	r2, r2, #16
 8003192:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	205c      	movs	r0, #92	@ 0x5c
 80031a0:	f7fd fe52 	bl	8000e48 <bmi160_get_regs>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d130      	bne.n	8003212 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	789b      	ldrb	r3, [r3, #2]
 80031bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80031cc:	7abb      	ldrb	r3, [r7, #10]
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	205a      	movs	r0, #90	@ 0x5a
 800320a:	f7fd fe50 	bl	8000eae <bmi160_set_regs>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	080149c8 	.word	0x080149c8

08003224 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003236:	f107 010d 	add.w	r1, r7, #13
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	2051      	movs	r0, #81	@ 0x51
 8003240:	f7fd fe02 	bl	8000e48 <bmi160_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13e      	bne.n	80032ce <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003250:	7b7b      	ldrb	r3, [r7, #13]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	4313      	orrs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	f023 0302 	bic.w	r3, r3, #2
 8003272:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	b25a      	sxtb	r2, r3
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	b25a      	sxtb	r2, r3
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80032bc:	f107 010d 	add.w	r1, r7, #13
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2051      	movs	r0, #81	@ 0x51
 80032c6:	f7fd fdf2 	bl	8000eae <bmi160_set_regs>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80032ec:	f107 010d 	add.w	r1, r7, #13
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	2058      	movs	r0, #88	@ 0x58
 80032f6:	f7fd fda7 	bl	8000e48 <bmi160_get_regs>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800330c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	b25a      	sxtb	r2, r3
 800331c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003320:	4313      	orrs	r3, r2
 8003322:	b25b      	sxtb	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003328:	f107 010d 	add.w	r1, r7, #13
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	2058      	movs	r0, #88	@ 0x58
 8003332:	f7fd fdbc 	bl	8000eae <bmi160_set_regs>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <config_high_g_int_settg+0x88>)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003368:	f107 0108 	add.w	r1, r7, #8
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	205c      	movs	r0, #92	@ 0x5c
 8003372:	f7fd fd69 	bl	8000e48 <bmi160_get_regs>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003382:	7a3b      	ldrb	r3, [r7, #8]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	b25a      	sxtb	r2, r3
 8003398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 80033b0:	f107 0108 	add.w	r1, r7, #8
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	205c      	movs	r0, #92	@ 0x5c
 80033ba:	f7fd fd78 	bl	8000eae <bmi160_set_regs>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080149c8 	.word	0x080149c8

080033d4 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80033e6:	f107 010f 	add.w	r1, r7, #15
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2053      	movs	r0, #83	@ 0x53
 80033f0:	f7fd fd2a 	bl	8000e48 <bmi160_get_regs>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 80a8 	bne.w	8003552 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3302      	adds	r3, #2
 8003406:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d14a      	bne.n	80034a6 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	b25a      	sxtb	r2, r3
 800342c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003430:	4313      	orrs	r3, r2
 8003432:	b25b      	sxtb	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	b25a      	sxtb	r2, r3
 8003454:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003458:	4313      	orrs	r3, r2
 800345a:	b25b      	sxtb	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	f023 0302 	bic.w	r3, r3, #2
 8003466:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	b25a      	sxtb	r2, r3
 800347c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003480:	4313      	orrs	r3, r2
 8003482:	b25b      	sxtb	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e04c      	b.n	8003540 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ac:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	01db      	lsls	r3, r3, #7
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	f023 0320 	bic.w	r3, r3, #32
 80034f6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	b25a      	sxtb	r2, r3
 800350c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	b25a      	sxtb	r2, r3
 8003534:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003538:	4313      	orrs	r3, r2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003540:	f107 010f 	add.w	r1, r7, #15
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	2053      	movs	r0, #83	@ 0x53
 800354a:	f7fd fcb0 	bl	8000eae <bmi160_set_regs>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003570:	f107 010f 	add.w	r1, r7, #15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	2054      	movs	r0, #84	@ 0x54
 800357a:	f7fd fc65 	bl	8000e48 <bmi160_get_regs>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d146      	bne.n	8003618 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3302      	adds	r3, #2
 800358e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d114      	bne.n	80035c2 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e013      	b.n	80035ea <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	f023 0320 	bic.w	r3, r3, #32
 80035c8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	015b      	lsls	r3, r3, #5
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	4313      	orrs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003606:	f107 010f 	add.w	r1, r7, #15
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	2054      	movs	r0, #84	@ 0x54
 8003610:	f7fd fc4d 	bl	8000eae <bmi160_set_regs>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <set_fifo_full_int+0x1c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003640:	23ff      	movs	r3, #255	@ 0xff
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e019      	b.n	800367a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f81c 	bl	8003686 <enable_fifo_full_int>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe f944 	bl	80018ea <set_intr_pin_config>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe fe01 	bl	8002278 <map_hardware_interrupt>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003694:	f107 010e 	add.w	r1, r7, #14
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	2051      	movs	r0, #81	@ 0x51
 800369e:	f7fd fbd3 	bl	8000e48 <bmi160_get_regs>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11b      	bne.n	80036e6 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80036d4:	f107 010e 	add.w	r1, r7, #14
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2051      	movs	r0, #81	@ 0x51
 80036de:	f7fd fbe6 	bl	8000eae <bmi160_set_regs>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <set_fifo_watermark_int+0x1c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800370e:	23ff      	movs	r3, #255	@ 0xff
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e019      	b.n	8003748 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f81c 	bl	8003754 <enable_fifo_wtm_int>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f8dd 	bl	80018ea <set_intr_pin_config>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fd9a 	bl	8002278 <map_hardware_interrupt>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003762:	f107 010e 	add.w	r1, r7, #14
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	2051      	movs	r0, #81	@ 0x51
 800376c:	f7fd fb6c 	bl	8000e48 <bmi160_get_regs>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11b      	bne.n	80037b4 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	b25a      	sxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	b25b      	sxtb	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80037a2:	f107 010e 	add.w	r1, r7, #14
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	2051      	movs	r0, #81	@ 0x51
 80037ac:	f7fd fb7f 	bl	8000eae <bmi160_set_regs>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80037ca:	f107 010e 	add.w	r1, r7, #14
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	201b      	movs	r0, #27
 80037d4:	f7fd fb38 	bl	8000e48 <bmi160_get_regs>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fe f888 	bl	8001920 <null_ptr_check>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800381c:	23ff      	movs	r3, #255	@ 0xff
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e032      	b.n	8003888 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003822:	f107 010e 	add.w	r1, r7, #14
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	2077      	movs	r0, #119	@ 0x77
 800382c:	f7fd fb0c 	bl	8000e48 <bmi160_get_regs>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d125      	bne.n	8003888 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	b25a      	sxtb	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	b25b      	sxtb	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385e:	b25a      	sxtb	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003876:	f107 010e 	add.w	r1, r7, #14
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2077      	movs	r0, #119	@ 0x77
 8003880:	f7fd fb15 	bl	8000eae <bmi160_set_regs>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 800389e:	2301      	movs	r3, #1
 80038a0:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80038a2:	2303      	movs	r3, #3
 80038a4:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80038aa:	f107 011c 	add.w	r1, r7, #28
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	207e      	movs	r0, #126	@ 0x7e
 80038b4:	f7fd fafb 	bl	8000eae <bmi160_set_regs>
 80038b8:	4603      	mov	r3, r0
 80038ba:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80038bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d141      	bne.n	8003948 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80038c4:	f107 031d 	add.w	r3, r7, #29
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff78 	bl	80037c0 <get_foc_status>
 80038d0:	4603      	mov	r3, r0
 80038d2:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80038d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d112      	bne.n	8003902 <trigger_foc+0x6e>
 80038dc:	7f7b      	ldrb	r3, [r7, #29]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d025      	beq.n	800392e <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80038e2:	e00e      	b.n	8003902 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2019      	movs	r0, #25
 80038ea:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80038ec:	f107 031d 	add.w	r3, r7, #29
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff64 	bl	80037c0 <get_foc_status>
 80038f8:	4603      	mov	r3, r0
 80038fa:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
 80038fe:	3301      	adds	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003902:	7f7b      	ldrb	r3, [r7, #29]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <trigger_foc+0x7a>
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	2b1f      	cmp	r3, #31
 800390c:	d9ea      	bls.n	80038e4 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800390e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <trigger_foc+0x96>
 8003916:	7f7b      	ldrb	r3, [r7, #29]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fd19 	bl	8001356 <bmi160_get_offsets>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 800392a:	23f5      	movs	r3, #245	@ 0xf5
 800392c:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800392e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8003936:	f107 0108 	add.w	r1, r7, #8
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2214      	movs	r2, #20
 800393e:	200c      	movs	r0, #12
 8003940:	f7fd fa82 	bl	8000e48 <bmi160_get_regs>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 800395c:	f000 f8ec 	bl	8003b38 <set_bmi160_Ares>
	set_bmi160_Gres();
 8003960:	f000 f916 	bl	8003b90 <set_bmi160_Gres>
	get_bmi160_Ares();
 8003964:	f000 f946 	bl	8003bf4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8003968:	f000 f97a 	bl	8003c60 <get_bmi160_Gres>

    sensor.id = 0;
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <BMI160_init+0x164>)
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <BMI160_init+0x164>)
 8003974:	2200      	movs	r2, #0
 8003976:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8003978:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab8 <BMI160_init+0x164>)
 800397a:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <BMI160_init+0x168>)
 800397c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <BMI160_init+0x164>)
 8003980:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac0 <BMI160_init+0x16c>)
 8003982:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <BMI160_init+0x164>)
 8003986:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <BMI160_init+0x170>)
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <BMI160_init+0x164>)
 800398c:	2220      	movs	r2, #32
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8003990:	4849      	ldr	r0, [pc, #292]	@ (8003ab8 <BMI160_init+0x164>)
 8003992:	f7fd fb3d 	bl	8001010 <bmi160_soft_reset>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <BMI160_init+0x164>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	20c8      	movs	r0, #200	@ 0xc8
 80039a0:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80039a2:	4845      	ldr	r0, [pc, #276]	@ (8003ab8 <BMI160_init+0x164>)
 80039a4:	f7fd fae6 	bl	8000f74 <bmi160_init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80039b8:	89ba      	ldrh	r2, [r7, #12]
 80039ba:	f107 010b 	add.w	r1, r7, #11
 80039be:	7bb8      	ldrb	r0, [r7, #14]
 80039c0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <BMI160_init+0x164>)
 80039c2:	f7fd fa41 	bl	8000e48 <bmi160_get_regs>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <BMI160_init+0x164>)
 80039cc:	220b      	movs	r2, #11
 80039ce:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <BMI160_init+0x164>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80039d8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <BMI160_init+0x174>)
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <BMI160_init+0x164>)
 80039de:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80039e0:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <BMI160_init+0x164>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2064      	movs	r0, #100	@ 0x64
 80039e6:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80039e8:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <BMI160_init+0x164>)
 80039ea:	2211      	movs	r2, #17
 80039ec:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80039ee:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <BMI160_init+0x164>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2064      	movs	r0, #100	@ 0x64
 80039f4:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <BMI160_init+0x164>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <BMI160_init+0x164>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <BMI160_init+0x164>)
 8003a06:	220b      	movs	r2, #11
 8003a08:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <BMI160_init+0x164>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2064      	movs	r0, #100	@ 0x64
 8003a10:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <BMI160_init+0x178>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <BMI160_init+0x164>)
 8003a18:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <BMI160_init+0x164>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2064      	movs	r0, #100	@ 0x64
 8003a20:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <BMI160_init+0x164>)
 8003a24:	2215      	movs	r2, #21
 8003a26:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <BMI160_init+0x164>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2064      	movs	r0, #100	@ 0x64
 8003a2e:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <BMI160_init+0x164>)
 8003a32:	2202      	movs	r2, #2
 8003a34:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <BMI160_init+0x164>)
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	2064      	movs	r0, #100	@ 0x64
 8003a3c:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8003a3e:	481e      	ldr	r0, [pc, #120]	@ (8003ab8 <BMI160_init+0x164>)
 8003a40:	f7fd fb21 	bl	8001086 <bmi160_set_sens_conf>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8003a48:	f000 f844 	bl	8003ad4 <start_foc>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a5e:	7893      	ldrb	r3, [r2, #2]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a68:	7893      	ldrb	r3, [r2, #2]
 8003a6a:	f36f 0341 	bfc	r3, #1, #1
 8003a6e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a72:	7893      	ldrb	r3, [r2, #2]
 8003a74:	f36f 0382 	bfc	r3, #2, #1
 8003a78:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a7c:	7893      	ldrb	r3, [r2, #2]
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a86:	7893      	ldrb	r3, [r2, #2]
 8003a88:	f36f 1304 	bfc	r3, #4, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a90:	8853      	ldrh	r3, [r2, #2]
 8003a92:	f36f 1348 	bfc	r3, #5, #4
 8003a96:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8003a98:	4907      	ldr	r1, [pc, #28]	@ (8003ab8 <BMI160_init+0x164>)
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a9c:	f7fd fb4e 	bl	800113c <bmi160_set_int_config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	761a      	strb	r2, [r3, #24]
    return rslt;
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000030c 	.word	0x2000030c
 8003abc:	08003ce9 	.word	0x08003ce9
 8003ac0:	08003d2d 	.word	0x08003d2d
 8003ac4:	08004e19 	.word	0x08004e19
 8003ac8:	20000356 	.word	0x20000356
 8003acc:	20000357 	.word	0x20000357
 8003ad0:	2000034c 	.word	0x2000034c

08003ad4 <start_foc>:

int8_t start_foc()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <start_foc+0x58>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <start_foc+0x58>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <start_foc+0x58>)
 8003aec:	2203      	movs	r2, #3
 8003aee:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <start_foc+0x58>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <start_foc+0x5c>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2064      	movs	r0, #100	@ 0x64
 8003afc:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <start_foc+0x58>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <start_foc+0x58>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <start_foc+0x5c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	2064      	movs	r0, #100	@ 0x64
 8003b10:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8003b12:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <start_foc+0x5c>)
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <start_foc+0x60>)
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <start_foc+0x58>)
 8003b18:	f7fd fb9c 	bl	8001254 <bmi160_start_foc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000338 	.word	0x20000338
 8003b30:	2000030c 	.word	0x2000030c
 8003b34:	20000340 	.word	0x20000340

08003b38 <set_bmi160_Ares>:

	return rslt;
}

void set_bmi160_Ares()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <set_bmi160_Ares+0x50>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81a      	bhi.n	8003b7c <set_bmi160_Ares+0x44>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <set_bmi160_Ares+0x14>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b75 	.word	0x08003b75
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
			break;
 8003b62:	e00b      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b66:	2205      	movs	r2, #5
 8003b68:	701a      	strb	r2, [r3, #0]
			break;
 8003b6a:	e007      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
			break;
 8003b72:	e003      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	701a      	strb	r2, [r3, #0]
			break;
 8003b7a:	bf00      	nop
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	20000356 	.word	0x20000356

08003b90 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <set_bmi160_Gres+0x5c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d820      	bhi.n	8003be0 <set_bmi160_Gres+0x50>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <set_bmi160_Gres+0x14>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
			break;
 8003bbe:	e00f      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	701a      	strb	r2, [r3, #0]
			break;
 8003bc6:	e00b      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
			break;
 8003bce:	e007      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
			break;
 8003bd6:	e003      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
			break;
 8003bde:	bf00      	nop
	}
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000009 	.word	0x20000009
 8003bf0:	20000357 	.word	0x20000357

08003bf4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <get_bmi160_Ares+0x64>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d826      	bhi.n	8003c4e <get_bmi160_Ares+0x5a>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <get_bmi160_Ares+0x14>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003c27 	.word	0x08003c27
 8003c10:	08003c31 	.word	0x08003c31
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c45 	.word	0x08003c45
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c22:	601a      	str	r2, [r3, #0]
			break;
 8003c24:	e013      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c28:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e00e      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c32:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003c36:	601a      	str	r2, [r3, #0]
			break;
 8003c38:	e009      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c3c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8003c40:	601a      	str	r2, [r3, #0]
			break;
 8003c42:	e004      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c46:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8003c4a:	601a      	str	r2, [r3, #0]
			break;
 8003c4c:	bf00      	nop
	}
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	2000000a 	.word	0x2000000a
 8003c5c:	20000358 	.word	0x20000358

08003c60 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <get_bmi160_Gres+0x68>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d828      	bhi.n	8003cbe <get_bmi160_Gres+0x5e>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <get_bmi160_Gres+0x14>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cb7 	.word	0x08003cb7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <get_bmi160_Gres+0x6c>)
 8003c8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c92:	601a      	str	r2, [r3, #0]
			break;
 8003c94:	e013      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <get_bmi160_Gres+0x74>)
 8003c9a:	601a      	str	r2, [r3, #0]
			break;
 8003c9c:	e00f      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <get_bmi160_Gres+0x78>)
 8003ca2:	601a      	str	r2, [r3, #0]
			break;
 8003ca4:	e00b      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <get_bmi160_Gres+0x7c>)
 8003caa:	601a      	str	r2, [r3, #0]
			break;
 8003cac:	e007      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce0 <get_bmi160_Gres+0x80>)
 8003cb2:	601a      	str	r2, [r3, #0]
			break;
 8003cb4:	e003      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <get_bmi160_Gres+0x84>)
 8003cba:	601a      	str	r2, [r3, #0]
			break;
 8003cbc:	bf00      	nop
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	2000000b 	.word	0x2000000b
 8003ccc:	20000358 	.word	0x20000358
 8003cd0:	2000035c 	.word	0x2000035c
 8003cd4:	43833333 	.word	0x43833333
 8003cd8:	43033333 	.word	0x43033333
 8003cdc:	42833333 	.word	0x42833333
 8003ce0:	42033333 	.word	0x42033333
 8003ce4:	41833333 	.word	0x41833333

08003ce8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	603a      	str	r2, [r7, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	71bb      	strb	r3, [r7, #6]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	2364      	movs	r3, #100	@ 0x64
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	21d2      	movs	r1, #210	@ 0xd2
 8003d08:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d0a:	f003 f997 	bl	800703c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	9200      	str	r2, [sp, #0]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	21d2      	movs	r1, #210	@ 0xd2
 8003d18:	4803      	ldr	r0, [pc, #12]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d1a:	f003 faa7 	bl	800726c <HAL_I2C_Master_Receive>
	return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000650 	.word	0x20000650

08003d2c <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	603a      	str	r2, [r7, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	71bb      	strb	r3, [r7, #6]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	480a      	ldr	r0, [pc, #40]	@ (8003d78 <SensorAPI_I2Cx_Write+0x4c>)
 8003d50:	f00e ff57 	bl	8012c02 <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2264      	movs	r2, #100	@ 0x64
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d60:	21d2      	movs	r1, #210	@ 0xd2
 8003d62:	4806      	ldr	r0, [pc, #24]	@ (8003d7c <SensorAPI_I2Cx_Write+0x50>)
 8003d64:	f003 f96a 	bl	800703c <HAL_I2C_Master_Transmit>
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000360 	.word	0x20000360
 8003d78:	20000361 	.word	0x20000361
 8003d7c:	20000650 	.word	0x20000650

08003d80 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e00a      	b.n	8003e08 <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003df8:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e00:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3301      	adds	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3ef      	bcc.n	8003df2 <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8003e12:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	200006f8 	.word	0x200006f8
 8003e28:	200006f2 	.word	0x200006f2
 8003e2c:	200006f4 	.word	0x200006f4
 8003e30:	2000058c 	.word	0x2000058c
 8003e34:	200006fc 	.word	0x200006fc

08003e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e3e:	f000 ff65 	bl	8004d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e42:	f000 f8b3 	bl	8003fac <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003e46:	f000 f915 	bl	8004074 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e4a:	f000 fa59 	bl	8004300 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e4e:	f000 fa45 	bl	80042dc <MX_DMA_Init>
  MX_ADC1_Init();
 8003e52:	f000 f941 	bl	80040d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003e56:	f000 f9f3 	bl	8004240 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8003e5a:	f00d fb99 	bl	8011590 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003e5e:	f000 f9af 	bl	80041c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8003e62:	2202      	movs	r2, #2
 8003e64:	4947      	ldr	r1, [pc, #284]	@ (8003f84 <main+0x14c>)
 8003e66:	4848      	ldr	r0, [pc, #288]	@ (8003f88 <main+0x150>)
 8003e68:	f001 fb2e 	bl	80054c8 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8003e6c:	4847      	ldr	r0, [pc, #284]	@ (8003f8c <main+0x154>)
 8003e6e:	f007 ff6f 	bl	800bd50 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8003e72:	bf00      	nop
 8003e74:	4b46      	ldr	r3, [pc, #280]	@ (8003f90 <main+0x158>)
 8003e76:	466c      	mov	r4, sp
 8003e78:	f103 0210 	add.w	r2, r3, #16
 8003e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	f7ff fd66 	bl	8003954 <BMI160_init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d0f2      	beq.n	8003e74 <main+0x3c>

  if (imu_t.INIT_OK_i8 == TRUE){
 8003e8e:	4b40      	ldr	r3, [pc, #256]	@ (8003f90 <main+0x158>)
 8003e90:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <main+0x66>
	  BSP_LED_On(LED_RED);
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f000 fde5 	bl	8004a68 <BSP_LED_On>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f000 fda8 	bl	80049f4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f000 fda5 	bl	80049f4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f000 fda2 	bl	80049f4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 fe0c 	bl	8004ad0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f000 fe08 	bl	8004ad0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f000 fe04 	bl	8004ad0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003ec8:	4b32      	ldr	r3, [pc, #200]	@ (8003f94 <main+0x15c>)
 8003eca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ece:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003ed0:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <main+0x15c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <main+0x15c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003edc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <main+0x15c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003ee2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f94 <main+0x15c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003ee8:	492a      	ldr	r1, [pc, #168]	@ (8003f94 <main+0x15c>)
 8003eea:	2000      	movs	r0, #0
 8003eec:	f000 fe60 	bl	8004bb0 <BSP_COM_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <main+0xc2>
  {
    Error_Handler();
 8003ef6:	f000 fa5b 	bl	80043b0 <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8003efa:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <main+0x160>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d1fb      	bne.n	8003efa <main+0xc2>
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_SET);
 8003f02:	2201      	movs	r2, #1
 8003f04:	2101      	movs	r1, #1
 8003f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f0a:	f002 ffa7 	bl	8006e5c <HAL_GPIO_WritePin>
		  if (counter == 32000){
 8003f0e:	4b23      	ldr	r3, [pc, #140]	@ (8003f9c <main+0x164>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003f16:	d103      	bne.n	8003f20 <main+0xe8>
			  counter = 0;
 8003f18:	4b20      	ldr	r3, [pc, #128]	@ (8003f9c <main+0x164>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e005      	b.n	8003f2c <main+0xf4>
		  }
		  else{
			  counter++;
 8003f20:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <main+0x164>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	4b1c      	ldr	r3, [pc, #112]	@ (8003f9c <main+0x164>)
 8003f2a:	801a      	strh	r2, [r3, #0]
		  }
		  update_data_packet_audio_buffered(counter, counter, USB_buffer, &packet_length);
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <main+0x164>)
 8003f2e:	8818      	ldrh	r0, [r3, #0]
 8003f30:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <main+0x164>)
 8003f32:	8819      	ldrh	r1, [r3, #0]
 8003f34:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa0 <main+0x168>)
 8003f36:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa4 <main+0x16c>)
 8003f38:	f000 fa0d 	bl	8004356 <update_data_packet_audio_buffered>
		  //prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	2101      	movs	r1, #1
 8003f40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f44:	f002 ff8a 	bl	8006e5c <HAL_GPIO_WritePin>
		  if (counter % 100 == 0){
 8003f48:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <main+0x164>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	4a16      	ldr	r2, [pc, #88]	@ (8003fa8 <main+0x170>)
 8003f4e:	fba2 1203 	umull	r1, r2, r2, r3
 8003f52:	0952      	lsrs	r2, r2, #5
 8003f54:	2164      	movs	r1, #100	@ 0x64
 8003f56:	fb01 f202 	mul.w	r2, r1, r2
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <main+0x144>
			  CDC_Transmit_FS(USB_buffer, packet_length);
 8003f62:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa0 <main+0x168>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4619      	mov	r1, r3
 8003f6a:	480e      	ldr	r0, [pc, #56]	@ (8003fa4 <main+0x16c>)
 8003f6c:	f00d fbce 	bl	801170c <CDC_Transmit_FS>
			  packet_length = 0;
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <main+0x168>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
			  BSP_LED_Toggle(LED_GREEN);
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 fd90 	bl	8004a9c <BSP_LED_Toggle>

		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <main+0x160>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 8003f82:	e7ba      	b.n	8003efa <main+0xc2>
 8003f84:	200006f8 	.word	0x200006f8
 8003f88:	2000058c 	.word	0x2000058c
 8003f8c:	200006a4 	.word	0x200006a4
 8003f90:	20000560 	.word	0x20000560
 8003f94:	2000057c 	.word	0x2000057c
 8003f98:	200006fc 	.word	0x200006fc
 8003f9c:	200006f0 	.word	0x200006f0
 8003fa0:	20000900 	.word	0x20000900
 8003fa4:	20000700 	.word	0x20000700
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b09a      	sub	sp, #104	@ 0x68
 8003fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fb2:	f107 0320 	add.w	r3, r7, #32
 8003fb6:	2248      	movs	r2, #72	@ 0x48
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f00e fda1 	bl	8012b02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	615a      	str	r2, [r3, #20]
 8003fd0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd2:	4b27      	ldr	r3, [pc, #156]	@ (8004070 <SystemClock_Config+0xc4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fda:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <SystemClock_Config+0xc4>)
 8003fdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b23      	ldr	r3, [pc, #140]	@ (8004070 <SystemClock_Config+0xc4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ffe:	2340      	movs	r3, #64	@ 0x40
 8004000:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004002:	2302      	movs	r3, #2
 8004004:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004006:	2303      	movs	r3, #3
 8004008:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800400a:	2310      	movs	r3, #16
 800400c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800400e:	2308      	movs	r3, #8
 8004010:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004012:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004016:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004018:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800401c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800401e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004022:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004024:	f107 0320 	add.w	r3, r7, #32
 8004028:	4618      	mov	r0, r3
 800402a:	f006 fc01 	bl	800a830 <HAL_RCC_OscConfig>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004034:	f000 f9bc 	bl	80043b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004038:	236f      	movs	r3, #111	@ 0x6f
 800403a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800403c:	2303      	movs	r3, #3
 800403e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800404c:	2380      	movs	r3, #128	@ 0x80
 800404e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004054:	1d3b      	adds	r3, r7, #4
 8004056:	2103      	movs	r1, #3
 8004058:	4618      	mov	r0, r3
 800405a:	f006 ff5d 	bl	800af18 <HAL_RCC_ClockConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004064:	f000 f9a4 	bl	80043b0 <Error_Handler>
  }
}
 8004068:	bf00      	nop
 800406a:	3768      	adds	r7, #104	@ 0x68
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	58000400 	.word	0x58000400

08004074 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b094      	sub	sp, #80	@ 0x50
 8004078:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800407a:	463b      	mov	r3, r7
 800407c:	2250      	movs	r2, #80	@ 0x50
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f00e fd3e 	bl	8012b02 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8004086:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800408a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800408c:	2306      	movs	r3, #6
 800408e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004094:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004096:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800409a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800409c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80040a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80040a2:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80040a6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80040a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80040ac:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80040ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80040b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040bc:	463b      	mov	r3, r7
 80040be:	4618      	mov	r0, r3
 80040c0:	f007 fb67 	bl	800b792 <HAL_RCCEx_PeriphCLKConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80040ca:	f000 f971 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80040ce:	bf00      	nop
 80040d0:	3750      	adds	r7, #80	@ 0x50
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040de:	463b      	mov	r3, r7
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
 80040ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040ee:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 80040f0:	4a30      	ldr	r2, [pc, #192]	@ (80041b4 <MX_ADC1_Init+0xdc>)
 80040f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80040f4:	4b2e      	ldr	r3, [pc, #184]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 80040f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040fc:	4b2c      	ldr	r3, [pc, #176]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004102:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004104:	2200      	movs	r2, #0
 8004106:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004108:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800410a:	2201      	movs	r2, #1
 800410c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800410e:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004110:	2204      	movs	r2, #4
 8004112:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004114:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004116:	2200      	movs	r2, #0
 8004118:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800411a:	4b25      	ldr	r3, [pc, #148]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800411c:	2201      	movs	r2, #1
 800411e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004120:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004122:	2202      	movs	r2, #2
 8004124:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004126:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004130:	2200      	movs	r2, #0
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004134:	4b1e      	ldr	r3, [pc, #120]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004136:	2200      	movs	r2, #0
 8004138:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004144:	2200      	movs	r2, #0
 8004146:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004150:	4817      	ldr	r0, [pc, #92]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 8004152:	f001 f86d 	bl	8005230 <HAL_ADC_Init>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800415c:	f000 f928 	bl	80043b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004160:	4b15      	ldr	r3, [pc, #84]	@ (80041b8 <MX_ADC1_Init+0xe0>)
 8004162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004164:	2306      	movs	r3, #6
 8004166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004168:	2306      	movs	r3, #6
 800416a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800416c:	237f      	movs	r3, #127	@ 0x7f
 800416e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004170:	2304      	movs	r3, #4
 8004172:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004178:	463b      	mov	r3, r7
 800417a:	4619      	mov	r1, r3
 800417c:	480c      	ldr	r0, [pc, #48]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800417e:	f001 fc05 	bl	800598c <HAL_ADC_ConfigChannel>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8004188:	f000 f912 	bl	80043b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800418c:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <MX_ADC1_Init+0xe4>)
 800418e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004190:	230c      	movs	r3, #12
 8004192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004194:	463b      	mov	r3, r7
 8004196:	4619      	mov	r1, r3
 8004198:	4805      	ldr	r0, [pc, #20]	@ (80041b0 <MX_ADC1_Init+0xd8>)
 800419a:	f001 fbf7 	bl	800598c <HAL_ADC_ConfigChannel>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80041a4:	f000 f904 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041a8:	bf00      	nop
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	2000058c 	.word	0x2000058c
 80041b4:	50040000 	.word	0x50040000
 80041b8:	04300002 	.word	0x04300002
 80041bc:	08600004 	.word	0x08600004

080041c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <MX_I2C1_Init+0x78>)
 80041c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80041ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041cc:	4a1b      	ldr	r2, [pc, #108]	@ (800423c <MX_I2C1_Init+0x7c>)
 80041ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041d0:	4b18      	ldr	r3, [pc, #96]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041d6:	4b17      	ldr	r3, [pc, #92]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041d8:	2201      	movs	r2, #1
 80041da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041de:	2200      	movs	r2, #0
 80041e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041e2:	4b14      	ldr	r3, [pc, #80]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041e8:	4b12      	ldr	r3, [pc, #72]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041ee:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041fa:	480e      	ldr	r0, [pc, #56]	@ (8004234 <MX_I2C1_Init+0x74>)
 80041fc:	f002 fe83 	bl	8006f06 <HAL_I2C_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004206:	f000 f8d3 	bl	80043b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800420a:	2100      	movs	r1, #0
 800420c:	4809      	ldr	r0, [pc, #36]	@ (8004234 <MX_I2C1_Init+0x74>)
 800420e:	f004 f9a1 	bl	8008554 <HAL_I2CEx_ConfigAnalogFilter>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004218:	f000 f8ca 	bl	80043b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800421c:	2100      	movs	r1, #0
 800421e:	4805      	ldr	r0, [pc, #20]	@ (8004234 <MX_I2C1_Init+0x74>)
 8004220:	f004 f9e3 	bl	80085ea <HAL_I2CEx_ConfigDigitalFilter>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800422a:	f000 f8c1 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000650 	.word	0x20000650
 8004238:	40005400 	.word	0x40005400
 800423c:	10b17db5 	.word	0x10b17db5

08004240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004246:	f107 0310 	add.w	r3, r7, #16
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	605a      	str	r2, [r3, #4]
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <MX_TIM2_Init+0x98>)
 8004260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8004266:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <MX_TIM2_Init+0x98>)
 8004268:	2201      	movs	r2, #1
 800426a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426c:	4b1a      	ldr	r3, [pc, #104]	@ (80042d8 <MX_TIM2_Init+0x98>)
 800426e:	2200      	movs	r2, #0
 8004270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1600-1;
 8004272:	4b19      	ldr	r3, [pc, #100]	@ (80042d8 <MX_TIM2_Init+0x98>)
 8004274:	f240 623f 	movw	r2, #1599	@ 0x63f
 8004278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427a:	4b17      	ldr	r3, [pc, #92]	@ (80042d8 <MX_TIM2_Init+0x98>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004280:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <MX_TIM2_Init+0x98>)
 8004282:	2280      	movs	r2, #128	@ 0x80
 8004284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004286:	4814      	ldr	r0, [pc, #80]	@ (80042d8 <MX_TIM2_Init+0x98>)
 8004288:	f007 fd0a 	bl	800bca0 <HAL_TIM_Base_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004292:	f000 f88d 	bl	80043b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800429a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800429c:	f107 0310 	add.w	r3, r7, #16
 80042a0:	4619      	mov	r1, r3
 80042a2:	480d      	ldr	r0, [pc, #52]	@ (80042d8 <MX_TIM2_Init+0x98>)
 80042a4:	f007 fea9 	bl	800bffa <HAL_TIM_ConfigClockSource>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80042ae:	f000 f87f 	bl	80043b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80042b2:	2320      	movs	r3, #32
 80042b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042ba:	1d3b      	adds	r3, r7, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4806      	ldr	r0, [pc, #24]	@ (80042d8 <MX_TIM2_Init+0x98>)
 80042c0:	f008 f898 	bl	800c3f4 <HAL_TIMEx_MasterConfigSynchronization>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80042ca:	f000 f871 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	3720      	adds	r7, #32
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200006a4 	.word	0x200006a4

080042dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80042e0:	2004      	movs	r0, #4
 80042e2:	f7ff fd4d 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042e6:	2001      	movs	r0, #1
 80042e8:	f7ff fd4a 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2100      	movs	r1, #0
 80042f0:	200b      	movs	r0, #11
 80042f2:	f002 f92c 	bl	800654e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042f6:	200b      	movs	r0, #11
 80042f8:	f002 f943 	bl	8006582 <HAL_NVIC_EnableIRQ>

}
 80042fc:	bf00      	nop
 80042fe:	bd80      	pop	{r7, pc}

08004300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	609a      	str	r2, [r3, #8]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004314:	2004      	movs	r0, #4
 8004316:	f7ff fd4c 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	2002      	movs	r0, #2
 800431c:	f7ff fd49 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004320:	2001      	movs	r0, #1
 8004322:	f7ff fd46 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin, GPIO_PIN_RESET);
 8004326:	2200      	movs	r2, #0
 8004328:	2101      	movs	r1, #1
 800432a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800432e:	f002 fd95 	bl	8006e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 8004332:	2301      	movs	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004336:	2301      	movs	r3, #1
 8004338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800433e:	2301      	movs	r3, #1
 8004340:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	4619      	mov	r1, r3
 8004346:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800434a:	f002 fc17 	bl	8006b7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <update_data_packet_audio_buffered>:
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
}
void update_data_packet_audio_buffered(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	60ba      	str	r2, [r7, #8]
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	4603      	mov	r3, r0
 8004362:	81fb      	strh	r3, [r7, #14]
 8004364:	460b      	mov	r3, r1
 8004366:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
	if (*length == 0){
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d107      	bne.n	8004380 <update_data_packet_audio_buffered+0x2a>
		buffer[0] = (uint8_t)-128;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2280      	movs	r2, #128	@ 0x80
 8004374:	701a      	strb	r2, [r3, #0]
		(*length)++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	4413      	add	r3, r2
 8004388:	89fa      	ldrh	r2, [r7, #14]
 800438a:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[*length + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3302      	adds	r3, #2
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	89ba      	ldrh	r2, [r7, #12]
 8004398:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += 2*sizeof(uint16_t);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043b4:	b672      	cpsid	i
}
 80043b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043b8:	bf00      	nop
 80043ba:	e7fd      	b.n	80043b8 <Error_Handler+0x8>

080043bc <LL_AHB2_GRP1_EnableClock>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043e0:	68fb      	ldr	r3, [r7, #12]
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4313      	orrs	r3, r2
 8004404:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4013      	ands	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a26      	ldr	r2, [pc, #152]	@ (80044e8 <HAL_ADC_MspInit+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d145      	bne.n	80044de <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004452:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004456:	f7ff ffb1 	bl	80043bc <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800445a:	2004      	movs	r0, #4
 800445c:	f7ff ffae 	bl	80043bc <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004460:	2303      	movs	r3, #3
 8004462:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004464:	2303      	movs	r3, #3
 8004466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446c:	f107 030c 	add.w	r3, r7, #12
 8004470:	4619      	mov	r1, r3
 8004472:	481e      	ldr	r0, [pc, #120]	@ (80044ec <HAL_ADC_MspInit+0xbc>)
 8004474:	f002 fb82 	bl	8006b7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 800447a:	4a1e      	ldr	r2, [pc, #120]	@ (80044f4 <HAL_ADC_MspInit+0xc4>)
 800447c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800447e:	4b1c      	ldr	r3, [pc, #112]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 8004480:	2205      	movs	r2, #5
 8004482:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800448a:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004490:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 8004492:	2280      	movs	r2, #128	@ 0x80
 8004494:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004496:	4b16      	ldr	r3, [pc, #88]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 8004498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800449c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044a6:	4b12      	ldr	r3, [pc, #72]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044a8:	2220      	movs	r2, #32
 80044aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044ac:	4b10      	ldr	r3, [pc, #64]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044b2:	480f      	ldr	r0, [pc, #60]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044b4:	f002 f880 	bl	80065b8 <HAL_DMA_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80044be:	f7ff ff77 	bl	80043b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <HAL_ADC_MspInit+0xc0>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2102      	movs	r1, #2
 80044d2:	2012      	movs	r0, #18
 80044d4:	f002 f83b 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80044d8:	2012      	movs	r0, #18
 80044da:	f002 f852 	bl	8006582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80044de:	bf00      	nop
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	50040000 	.word	0x50040000
 80044ec:	48000800 	.word	0x48000800
 80044f0:	200005f0 	.word	0x200005f0
 80044f4:	40020008 	.word	0x40020008

080044f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b09c      	sub	sp, #112	@ 0x70
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	2250      	movs	r2, #80	@ 0x50
 8004516:	2100      	movs	r1, #0
 8004518:	4618      	mov	r0, r3
 800451a:	f00e faf2 	bl	8012b02 <memset>
  if(hi2c->Instance==I2C1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1f      	ldr	r2, [pc, #124]	@ (80045a0 <HAL_I2C_MspInit+0xa8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d136      	bne.n	8004596 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004528:	2304      	movs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800452c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004532:	f107 030c 	add.w	r3, r7, #12
 8004536:	4618      	mov	r0, r3
 8004538:	f007 f92b 	bl	800b792 <HAL_RCCEx_PeriphCLKConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004542:	f7ff ff35 	bl	80043b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004546:	2002      	movs	r0, #2
 8004548:	f7ff ff38 	bl	80043bc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800454c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004550:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004552:	2312      	movs	r3, #18
 8004554:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455a:	2300      	movs	r3, #0
 800455c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800455e:	2304      	movs	r3, #4
 8004560:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004562:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004566:	4619      	mov	r1, r3
 8004568:	480e      	ldr	r0, [pc, #56]	@ (80045a4 <HAL_I2C_MspInit+0xac>)
 800456a:	f002 fb07 	bl	8006b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800456e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004572:	f7ff ff3c 	bl	80043ee <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	201e      	movs	r0, #30
 800457c:	f001 ffe7 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004580:	201e      	movs	r0, #30
 8004582:	f001 fffe 	bl	8006582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	201f      	movs	r0, #31
 800458c:	f001 ffdf 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004590:	201f      	movs	r0, #31
 8004592:	f001 fff6 	bl	8006582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004596:	bf00      	nop
 8004598:	3770      	adds	r7, #112	@ 0x70
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40005400 	.word	0x40005400
 80045a4:	48000400 	.word	0x48000400

080045a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b8:	d10a      	bne.n	80045d0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045ba:	2001      	movs	r0, #1
 80045bc:	f7ff ff17 	bl	80043ee <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2100      	movs	r1, #0
 80045c4:	201c      	movs	r0, #28
 80045c6:	f001 ffc2 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045ca:	201c      	movs	r0, #28
 80045cc:	f001 ffd9 	bl	8006582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80045d0:	bf00      	nop
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <NMI_Handler+0x4>

080045e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <HardFault_Handler+0x4>

080045e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <MemManage_Handler+0x4>

080045f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <BusFault_Handler+0x4>

080045f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <UsageFault_Handler+0x4>

08004600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800462e:	f000 fbc7 	bl	8004dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}

08004636 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800463a:	2001      	movs	r0, #1
 800463c:	f002 fc40 	bl	8006ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}

08004644 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004648:	2002      	movs	r0, #2
 800464a:	f002 fc39 	bl	8006ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}

08004652 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004656:	2010      	movs	r0, #16
 8004658:	f002 fc32 	bl	8006ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}

08004660 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004664:	4802      	ldr	r0, [pc, #8]	@ (8004670 <DMA1_Channel1_IRQHandler+0x10>)
 8004666:	f002 f929 	bl	80068bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200005f0 	.word	0x200005f0

08004674 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004678:	4802      	ldr	r0, [pc, #8]	@ (8004684 <ADC1_IRQHandler+0x10>)
 800467a:	f000 ffa9 	bl	80055d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	2000058c 	.word	0x2000058c

08004688 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800468c:	4802      	ldr	r0, [pc, #8]	@ (8004698 <USB_HP_IRQHandler+0x10>)
 800468e:	f004 f8e8 	bl	8008862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20001e84 	.word	0x20001e84

0800469c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80046a0:	4802      	ldr	r0, [pc, #8]	@ (80046ac <USB_LP_IRQHandler+0x10>)
 80046a2:	f004 f8de 	bl	8008862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20001e84 	.word	0x20001e84

080046b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <TIM2_IRQHandler+0x10>)
 80046b6:	f007 fb99 	bl	800bdec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	200006a4 	.word	0x200006a4

080046c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <I2C1_EV_IRQHandler+0x10>)
 80046ca:	f002 fec5 	bl	8007458 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000650 	.word	0x20000650

080046d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80046dc:	4802      	ldr	r0, [pc, #8]	@ (80046e8 <I2C1_ER_IRQHandler+0x10>)
 80046de:	f002 fed5 	bl	800748c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000650 	.word	0x20000650

080046ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return 1;
 80046f0:	2301      	movs	r3, #1
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_kill>:

int _kill(int pid, int sig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004706:	f00e fa4f 	bl	8012ba8 <__errno>
 800470a:	4603      	mov	r3, r0
 800470c:	2216      	movs	r2, #22
 800470e:	601a      	str	r2, [r3, #0]
  return -1;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_exit>:

void _exit (int status)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004724:	f04f 31ff 	mov.w	r1, #4294967295
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ffe7 	bl	80046fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <_exit+0x12>

08004732 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b086      	sub	sp, #24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e00a      	b.n	800475a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004744:	f3af 8000 	nop.w
 8004748:	4601      	mov	r1, r0
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	60ba      	str	r2, [r7, #8]
 8004750:	b2ca      	uxtb	r2, r1
 8004752:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	3301      	adds	r3, #1
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	dbf0      	blt.n	8004744 <_read+0x12>
  }

  return len;
 8004762:	687b      	ldr	r3, [r7, #4]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e009      	b.n	8004792 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	60ba      	str	r2, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fa74 	bl	8004c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3301      	adds	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	dbf1      	blt.n	800477e <_write+0x12>
  }
  return len;
 800479a:	687b      	ldr	r3, [r7, #4]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <_close>:

int _close(int file)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047cc:	605a      	str	r2, [r3, #4]
  return 0;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <_isatty>:

int _isatty(int file)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047e4:	2301      	movs	r3, #1
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004814:	4a14      	ldr	r2, [pc, #80]	@ (8004868 <_sbrk+0x5c>)
 8004816:	4b15      	ldr	r3, [pc, #84]	@ (800486c <_sbrk+0x60>)
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004820:	4b13      	ldr	r3, [pc, #76]	@ (8004870 <_sbrk+0x64>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004828:	4b11      	ldr	r3, [pc, #68]	@ (8004870 <_sbrk+0x64>)
 800482a:	4a12      	ldr	r2, [pc, #72]	@ (8004874 <_sbrk+0x68>)
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800482e:	4b10      	ldr	r3, [pc, #64]	@ (8004870 <_sbrk+0x64>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d207      	bcs.n	800484c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800483c:	f00e f9b4 	bl	8012ba8 <__errno>
 8004840:	4603      	mov	r3, r0
 8004842:	220c      	movs	r2, #12
 8004844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e009      	b.n	8004860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800484c:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <_sbrk+0x64>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004852:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <_sbrk+0x64>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	4a05      	ldr	r2, [pc, #20]	@ (8004870 <_sbrk+0x64>)
 800485c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800485e:	68fb      	ldr	r3, [r7, #12]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20030000 	.word	0x20030000
 800486c:	00000400 	.word	0x00000400
 8004870:	20000904 	.word	0x20000904
 8004874:	200024d0 	.word	0x200024d0

08004878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800487c:	4b24      	ldr	r3, [pc, #144]	@ (8004910 <SystemInit+0x98>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	4a23      	ldr	r2, [pc, #140]	@ (8004910 <SystemInit+0x98>)
 8004884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800488c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048a0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80048a4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048b0:	4b18      	ldr	r3, [pc, #96]	@ (8004914 <SystemInit+0x9c>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048c2:	f023 0305 	bic.w	r3, r3, #5
 80048c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80048de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e2:	4a0d      	ldr	r2, [pc, #52]	@ (8004918 <SystemInit+0xa0>)
 80048e4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004918 <SystemInit+0xa0>)
 80048ec:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004902:	2200      	movs	r2, #0
 8004904:	619a      	str	r2, [r3, #24]
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	faf6fefb 	.word	0xfaf6fefb
 8004918:	22041000 	.word	0x22041000

0800491c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800491c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800491e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004920:	3304      	adds	r3, #4

08004922 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004922:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004924:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004926:	d3f9      	bcc.n	800491c <CopyDataInit>
  bx lr
 8004928:	4770      	bx	lr

0800492a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800492a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800492c:	3004      	adds	r0, #4

0800492e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800492e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004930:	d3fb      	bcc.n	800492a <FillZerobss>
  bx lr
 8004932:	4770      	bx	lr

08004934 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004934:	480c      	ldr	r0, [pc, #48]	@ (8004968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004936:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004938:	f7ff ff9e 	bl	8004878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800493c:	480b      	ldr	r0, [pc, #44]	@ (800496c <LoopForever+0x6>)
 800493e:	490c      	ldr	r1, [pc, #48]	@ (8004970 <LoopForever+0xa>)
 8004940:	4a0c      	ldr	r2, [pc, #48]	@ (8004974 <LoopForever+0xe>)
 8004942:	2300      	movs	r3, #0
 8004944:	f7ff ffed 	bl	8004922 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004948:	480b      	ldr	r0, [pc, #44]	@ (8004978 <LoopForever+0x12>)
 800494a:	490c      	ldr	r1, [pc, #48]	@ (800497c <LoopForever+0x16>)
 800494c:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <LoopForever+0x1a>)
 800494e:	2300      	movs	r3, #0
 8004950:	f7ff ffe7 	bl	8004922 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004954:	480b      	ldr	r0, [pc, #44]	@ (8004984 <LoopForever+0x1e>)
 8004956:	490c      	ldr	r1, [pc, #48]	@ (8004988 <LoopForever+0x22>)
 8004958:	2300      	movs	r3, #0
 800495a:	f7ff ffe8 	bl	800492e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800495e:	f00e f929 	bl	8012bb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004962:	f7ff fa69 	bl	8003e38 <main>

08004966 <LoopForever>:

LoopForever:
  b LoopForever
 8004966:	e7fe      	b.n	8004966 <LoopForever>
  ldr   r0, =_estack
 8004968:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800496c:	20000008 	.word	0x20000008
 8004970:	200002f0 	.word	0x200002f0
 8004974:	08014ed8 	.word	0x08014ed8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004978:	20030000 	.word	0x20030000
 800497c:	20030000 	.word	0x20030000
 8004980:	080151c0 	.word	0x080151c0
  INIT_BSS _sbss, _ebss
 8004984:	200002f0 	.word	0x200002f0
 8004988:	200024cc 	.word	0x200024cc

0800498c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800498c:	e7fe      	b.n	800498c <AES1_IRQHandler>

0800498e <LL_AHB2_GRP1_EnableClock>:
{
 800498e:	b480      	push	{r7}
 8004990:	b085      	sub	sp, #20
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800499a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800499c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4013      	ands	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80049fe:	f107 030c 	add.w	r3, r7, #12
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
 8004a08:	609a      	str	r2, [r3, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7ff ffbd 	bl	800498e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	4a12      	ldr	r2, [pc, #72]	@ (8004a60 <BSP_LED_Init+0x6c>)
 8004a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a26:	2302      	movs	r3, #2
 8004a28:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8004a64 <BSP_LED_Init+0x70>)
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	f107 020c 	add.w	r2, r7, #12
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f002 f89f 	bl	8006b7c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <BSP_LED_Init+0x70>)
 8004a42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	4a05      	ldr	r2, [pc, #20]	@ (8004a60 <BSP_LED_Init+0x6c>)
 8004a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4619      	mov	r1, r3
 8004a52:	f002 fa03 	bl	8006e5c <HAL_GPIO_WritePin>
}
 8004a56:	bf00      	nop
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	08014b28 	.word	0x08014b28
 8004a64:	20000010 	.word	0x20000010

08004a68 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	4a07      	ldr	r2, [pc, #28]	@ (8004a94 <BSP_LED_On+0x2c>)
 8004a76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	4a06      	ldr	r2, [pc, #24]	@ (8004a98 <BSP_LED_On+0x30>)
 8004a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4619      	mov	r1, r3
 8004a86:	f002 f9e9 	bl	8006e5c <HAL_GPIO_WritePin>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000010 	.word	0x20000010
 8004a98:	08014b28 	.word	0x08014b28

08004a9c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8004aa6:	79fb      	ldrb	r3, [r7, #7]
 8004aa8:	4a07      	ldr	r2, [pc, #28]	@ (8004ac8 <BSP_LED_Toggle+0x2c>)
 8004aaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	4906      	ldr	r1, [pc, #24]	@ (8004acc <BSP_LED_Toggle+0x30>)
 8004ab2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f002 f9e7 	bl	8006e8c <HAL_GPIO_TogglePin>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000010 	.word	0x20000010
 8004acc:	08014b28 	.word	0x08014b28

08004ad0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460a      	mov	r2, r1
 8004ada:	71fb      	strb	r3, [r7, #7]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	609a      	str	r2, [r3, #8]
 8004aec:	60da      	str	r2, [r3, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <BSP_PB_Init+0x2e>
 8004af6:	2004      	movs	r0, #4
 8004af8:	f7ff ff49 	bl	800498e <LL_AHB2_GRP1_EnableClock>
 8004afc:	e00c      	b.n	8004b18 <BSP_PB_Init+0x48>
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d103      	bne.n	8004b0c <BSP_PB_Init+0x3c>
 8004b04:	2008      	movs	r0, #8
 8004b06:	f7ff ff42 	bl	800498e <LL_AHB2_GRP1_EnableClock>
 8004b0a:	e005      	b.n	8004b18 <BSP_PB_Init+0x48>
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d102      	bne.n	8004b18 <BSP_PB_Init+0x48>
 8004b12:	2008      	movs	r0, #8
 8004b14:	f7ff ff3b 	bl	800498e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004b18:	79bb      	ldrb	r3, [r7, #6]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d117      	bne.n	8004b4e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b1e:	79fb      	ldrb	r3, [r7, #7]
 8004b20:	4a20      	ldr	r2, [pc, #128]	@ (8004ba4 <BSP_PB_Init+0xd4>)
 8004b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b26:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b30:	2302      	movs	r3, #2
 8004b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <BSP_PB_Init+0xd8>)
 8004b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3c:	f107 020c 	add.w	r2, r7, #12
 8004b40:	4611      	mov	r1, r2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 f81a 	bl	8006b7c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004b48:	2001      	movs	r0, #1
 8004b4a:	f000 f965 	bl	8004e18 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004b4e:	79bb      	ldrb	r3, [r7, #6]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d123      	bne.n	8004b9c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4a13      	ldr	r2, [pc, #76]	@ (8004ba4 <BSP_PB_Init+0xd4>)
 8004b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004b62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b66:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba8 <BSP_PB_Init+0xd8>)
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	f107 020c 	add.w	r2, r7, #12
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f002 f800 	bl	8006b7c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004b7c:	79fb      	ldrb	r3, [r7, #7]
 8004b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004bac <BSP_PB_Init+0xdc>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	b25b      	sxtb	r3, r3
 8004b84:	2200      	movs	r2, #0
 8004b86:	210f      	movs	r1, #15
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f001 fce0 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	4a06      	ldr	r2, [pc, #24]	@ (8004bac <BSP_PB_Init+0xdc>)
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fcf3 	bl	8006582 <HAL_NVIC_EnableIRQ>
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	08014b30 	.word	0x08014b30
 8004ba8:	2000001c 	.word	0x2000001c
 8004bac:	08014b38 	.word	0x08014b38

08004bb0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d903      	bls.n	8004bce <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004bc6:	f06f 0301 	mvn.w	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e018      	b.n	8004c00 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	2294      	movs	r2, #148	@ 0x94
 8004bd2:	fb02 f303 	mul.w	r3, r2, r3
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <BSP_COM_Init+0x5c>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f866 	bl	8004cac <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	2294      	movs	r2, #148	@ 0x94
 8004be4:	fb02 f303 	mul.w	r3, r2, r3
 8004be8:	4a08      	ldr	r2, [pc, #32]	@ (8004c0c <BSP_COM_Init+0x5c>)
 8004bea:	4413      	add	r3, r2
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f80e 	bl	8004c10 <MX_LPUART1_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8004bfa:	f06f 0303 	mvn.w	r3, #3
 8004bfe:	e000      	b.n	8004c02 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004c00:	68fb      	ldr	r3, [r7, #12]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000908 	.word	0x20000908

08004c10 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8004c1a:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <MX_LPUART1_Init+0x60>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	220c      	movs	r2, #12
 8004c2e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	895b      	ldrh	r3, [r3, #10]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	891b      	ldrh	r3, [r3, #8]
 8004c46:	461a      	mov	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	899b      	ldrh	r3, [r3, #12]
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c5c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f007 fc66 	bl	800c530 <HAL_UART_Init>
 8004c64:	4603      	mov	r3, r0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000028 	.word	0x20000028

08004c74 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004c7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <__io_putchar+0x30>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	2394      	movs	r3, #148	@ 0x94
 8004c84:	fb02 f303 	mul.w	r3, r2, r3
 8004c88:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <__io_putchar+0x34>)
 8004c8a:	1898      	adds	r0, r3, r2
 8004c8c:	1d39      	adds	r1, r7, #4
 8004c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c92:	2201      	movs	r2, #1
 8004c94:	f007 fca6 	bl	800c5e4 <HAL_UART_Transmit>
  return ch;
 8004c98:	687b      	ldr	r3, [r7, #4]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2000099c 	.word	0x2000099c
 8004ca8:	20000908 	.word	0x20000908

08004cac <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004cb4:	2002      	movs	r0, #2
 8004cb6:	f7ff fe6a 	bl	800498e <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8004cba:	2002      	movs	r0, #2
 8004cbc:	f7ff fe67 	bl	800498e <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004cc0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004cc4:	f7ff fe7c 	bl	80049c0 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004cc8:	2340      	movs	r3, #64	@ 0x40
 8004cca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004cd8:	2307      	movs	r3, #7
 8004cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4809      	ldr	r0, [pc, #36]	@ (8004d08 <COM1_MspInit+0x5c>)
 8004ce4:	f001 ff4a 	bl	8006b7c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004ce8:	2380      	movs	r3, #128	@ 0x80
 8004cea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004cec:	2302      	movs	r3, #2
 8004cee:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004cf0:	2307      	movs	r3, #7
 8004cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4803      	ldr	r0, [pc, #12]	@ (8004d08 <COM1_MspInit+0x5c>)
 8004cfc:	f001 ff3e 	bl	8006b7c <HAL_GPIO_Init>
}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	48000400 	.word	0x48000400

08004d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d16:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <HAL_Init+0x3c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004d48 <HAL_Init+0x3c>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d22:	2003      	movs	r0, #3
 8004d24:	f001 fc08 	bl	8006538 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d28:	2000      	movs	r0, #0
 8004d2a:	f000 f80f 	bl	8004d4c <HAL_InitTick>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	71fb      	strb	r3, [r7, #7]
 8004d38:	e001      	b.n	8004d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d3a:	f7ff fb71 	bl	8004420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	58004000 	.word	0x58004000

08004d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004d58:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <HAL_InitTick+0x6c>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d024      	beq.n	8004daa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d60:	f006 fa86 	bl	800b270 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b14      	ldr	r3, [pc, #80]	@ (8004db8 <HAL_InitTick+0x6c>)
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d70:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 fc10 	bl	800659e <HAL_SYSTICK_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b0f      	cmp	r3, #15
 8004d88:	d809      	bhi.n	8004d9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d92:	f001 fbdc 	bl	800654e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d96:	4a09      	ldr	r2, [pc, #36]	@ (8004dbc <HAL_InitTick+0x70>)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e007      	b.n	8004dae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
 8004da2:	e004      	b.n	8004dae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
 8004da8:	e001      	b.n	8004dae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000030 	.word	0x20000030
 8004dbc:	2000002c 	.word	0x2000002c

08004dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	@ (8004de0 <HAL_IncTick+0x20>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <HAL_IncTick+0x24>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a04      	ldr	r2, [pc, #16]	@ (8004de4 <HAL_IncTick+0x24>)
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000030 	.word	0x20000030
 8004de4:	200009a0 	.word	0x200009a0

08004de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return uwTick;
 8004dec:	4b03      	ldr	r3, [pc, #12]	@ (8004dfc <HAL_GetTick+0x14>)
 8004dee:	681b      	ldr	r3, [r3, #0]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	200009a0 	.word	0x200009a0

08004e00 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004e04:	4b03      	ldr	r3, [pc, #12]	@ (8004e14 <HAL_GetTickPrio+0x14>)
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000002c 	.word	0x2000002c

08004e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e20:	f7ff ffe2 	bl	8004de8 <HAL_GetTick>
 8004e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e30:	d005      	beq.n	8004e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <HAL_Delay+0x44>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e3e:	bf00      	nop
 8004e40:	f7ff ffd2 	bl	8004de8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d8f7      	bhi.n	8004e40 <HAL_Delay+0x28>
  {
  }
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000030 	.word	0x20000030

08004e60 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3360      	adds	r3, #96	@ 0x60
 8004eda:	461a      	mov	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <LL_ADC_SetOffset+0x44>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	03fff000 	.word	0x03fff000

08004f10 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3360      	adds	r3, #96	@ 0x60
 8004f1e:	461a      	mov	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3360      	adds	r3, #96	@ 0x60
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	431a      	orrs	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004f66:	bf00      	nop
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d101      	bne.n	8004f8a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f8a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3330      	adds	r3, #48	@ 0x30
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	4413      	add	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	211f      	movs	r1, #31
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	0e9b      	lsrs	r3, r3, #26
 8004fd0:	f003 011f 	and.w	r1, r3, #31
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	fa01 f303 	lsl.w	r3, r1, r3
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005018:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005032:	b480      	push	{r7}
 8005034:	b087      	sub	sp, #28
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3314      	adds	r3, #20
 8005042:	461a      	mov	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	0e5b      	lsrs	r3, r3, #25
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	4413      	add	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	0d1b      	lsrs	r3, r3, #20
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2107      	movs	r1, #7
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	401a      	ands	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	0d1b      	lsrs	r3, r3, #20
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	fa01 f303 	lsl.w	r3, r1, r3
 8005076:	431a      	orrs	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050a0:	43db      	mvns	r3, r3
 80050a2:	401a      	ands	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f003 0318 	and.w	r3, r3, #24
 80050aa:	4908      	ldr	r1, [pc, #32]	@ (80050cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80050ac:	40d9      	lsrs	r1, r3
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	400b      	ands	r3, r1
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	431a      	orrs	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80050be:	bf00      	nop
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	0007ffff 	.word	0x0007ffff

080050d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80050e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6093      	str	r3, [r2, #8]
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005108:	d101      	bne.n	800510e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800512c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005130:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005158:	d101      	bne.n	800515e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800517c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <LL_ADC_IsEnabled+0x18>
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <LL_ADC_IsEnabled+0x1a>
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051ce:	f043 0204 	orr.w	r2, r3, #4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d101      	bne.n	80051fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d101      	bne.n	8005220 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
	...

08005230 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e12e      	b.n	80054ac <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff f8e7 	bl	8004430 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff3d 	bl	80050f4 <LL_ADC_IsDeepPowerDownEnabled>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f7ff ff23 	bl	80050d0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff ff58 	bl	8005144 <LL_ADC_IsInternalRegulatorEnabled>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d115      	bne.n	80052c6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff ff3c 	bl	800511c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052a4:	4b83      	ldr	r3, [pc, #524]	@ (80054b4 <HAL_ADC_Init+0x284>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	4a83      	ldr	r2, [pc, #524]	@ (80054b8 <HAL_ADC_Init+0x288>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	099b      	lsrs	r3, r3, #6
 80052b2:	3301      	adds	r3, #1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052b8:	e002      	b.n	80052c0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3b01      	subs	r3, #1
 80052be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f9      	bne.n	80052ba <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff3a 	bl	8005144 <LL_ADC_IsInternalRegulatorEnabled>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	f043 0210 	orr.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff ff73 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 80052fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 80c7 	bne.w	800549a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 80c3 	bne.w	800549a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800531c:	f043 0202 	orr.w	r2, r3, #2
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ff33 	bl	8005194 <LL_ADC_IsEnabled>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005334:	4861      	ldr	r0, [pc, #388]	@ (80054bc <HAL_ADC_Init+0x28c>)
 8005336:	f7ff ff2d 	bl	8005194 <LL_ADC_IsEnabled>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4619      	mov	r1, r3
 8005346:	485e      	ldr	r0, [pc, #376]	@ (80054c0 <HAL_ADC_Init+0x290>)
 8005348:	f7ff fd8a 	bl	8004e60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7e5b      	ldrb	r3, [r3, #25]
 8005350:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005356:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800535c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005362:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800536a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800536c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d106      	bne.n	800538c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	3b01      	subs	r3, #1
 8005384:	045b      	lsls	r3, r3, #17
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	4b45      	ldr	r3, [pc, #276]	@ (80054c4 <HAL_ADC_Init+0x294>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	6812      	ldr	r2, [r2, #0]
 80053b6:	69b9      	ldr	r1, [r7, #24]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff0e 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 80053c6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff1b 	bl	8005208 <LL_ADC_INJ_IsConversionOngoing>
 80053d2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d13d      	bne.n	8005456 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d13a      	bne.n	8005456 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80053e4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053ec:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053fc:	f023 0302 	bic.w	r3, r3, #2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	69b9      	ldr	r1, [r7, #24]
 8005406:	430b      	orrs	r3, r1
 8005408:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005410:	2b01      	cmp	r3, #1
 8005412:	d118      	bne.n	8005446 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800541e:	f023 0304 	bic.w	r3, r3, #4
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800542a:	4311      	orrs	r1, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005430:	4311      	orrs	r1, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005436:	430a      	orrs	r2, r1
 8005438:	431a      	orrs	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	611a      	str	r2, [r3, #16]
 8005444:	e007      	b.n	8005456 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0201 	bic.w	r2, r2, #1
 8005454:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d10c      	bne.n	8005478 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005464:	f023 010f 	bic.w	r1, r3, #15
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
 8005476:	e007      	b.n	8005488 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 020f 	bic.w	r2, r2, #15
 8005486:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	f023 0303 	bic.w	r3, r3, #3
 8005490:	f043 0201 	orr.w	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	@ 0x54
 8005498:	e007      	b.n	80054aa <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800549e:	f043 0210 	orr.w	r2, r3, #16
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80054aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000000c 	.word	0x2000000c
 80054b8:	053e2d63 	.word	0x053e2d63
 80054bc:	50040000 	.word	0x50040000
 80054c0:	50040300 	.word	0x50040300
 80054c4:	fff0c007 	.word	0xfff0c007

080054c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff fe82 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d167      	bne.n	80055b4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_ADC_Start_DMA+0x2a>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e063      	b.n	80055ba <HAL_ADC_Start_DMA+0xf2>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fe0c 	bl	8006118 <ADC_Enable>
 8005500:	4603      	mov	r3, r0
 8005502:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005504:	7dfb      	ldrb	r3, [r7, #23]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d14f      	bne.n	80055aa <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552e:	f023 0206 	bic.w	r2, r3, #6
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	659a      	str	r2, [r3, #88]	@ 0x58
 8005536:	e002      	b.n	800553e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005542:	4a20      	ldr	r2, [pc, #128]	@ (80055c4 <HAL_ADC_Start_DMA+0xfc>)
 8005544:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554a:	4a1f      	ldr	r2, [pc, #124]	@ (80055c8 <HAL_ADC_Start_DMA+0x100>)
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005552:	4a1e      	ldr	r2, [pc, #120]	@ (80055cc <HAL_ADC_Start_DMA+0x104>)
 8005554:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	221c      	movs	r2, #28
 800555c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0210 	orr.w	r2, r2, #16
 8005574:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3340      	adds	r3, #64	@ 0x40
 8005590:	4619      	mov	r1, r3
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f001 f8b7 	bl	8006708 <HAL_DMA_Start_IT>
 800559a:	4603      	mov	r3, r0
 800559c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fe09 	bl	80051ba <LL_ADC_REG_StartConversion>
 80055a8:	e006      	b.n	80055b8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80055b2:	e001      	b.n	80055b8 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
 80055b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	0800620d 	.word	0x0800620d
 80055c8:	080062e5 	.word	0x080062e5
 80055cc:	08006301 	.word	0x08006301

080055d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d017      	beq.n	8005626 <HAL_ADC_IRQHandler+0x56>
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d012      	beq.n	8005626 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 feb3 	bl	8006384 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2202      	movs	r2, #2
 8005624:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <HAL_ADC_IRQHandler+0x6a>
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005640:	2b00      	cmp	r3, #0
 8005642:	d05d      	beq.n	8005700 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d058      	beq.n	8005700 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fc81 	bl	8004f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d03d      	beq.n	80056f2 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005684:	d035      	beq.n	80056f2 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b08      	cmp	r3, #8
 8005692:	d12e      	bne.n	80056f2 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fda2 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d11a      	bne.n	80056da <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 020c 	bic.w	r2, r2, #12
 80056b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d112      	bne.n	80056f2 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	f043 0201 	orr.w	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80056d8:	e00b      	b.n	80056f2 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f922 	bl	800593c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	220c      	movs	r2, #12
 80056fe:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <HAL_ADC_IRQHandler+0x144>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800571a:	2b00      	cmp	r3, #0
 800571c:	d074      	beq.n	8005808 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d06f      	beq.n	8005808 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005738:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fc61 	bl	800500c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800574a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fc0e 	bl	8004f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005756:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d049      	beq.n	80057fa <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_ADC_IRQHandler+0x1b0>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d041      	beq.n	80057fa <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800577c:	2b00      	cmp	r3, #0
 800577e:	d13c      	bne.n	80057fa <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578a:	2b40      	cmp	r3, #64	@ 0x40
 800578c:	d135      	bne.n	80057fa <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d12e      	bne.n	80057fa <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fd31 	bl	8005208 <LL_ADC_INJ_IsConversionOngoing>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d11a      	bne.n	80057e2 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d112      	bne.n	80057fa <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d8:	f043 0201 	orr.w	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
 80057e0:	e00b      	b.n	80057fa <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	f043 0201 	orr.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fd9a 	bl	8006334 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2260      	movs	r2, #96	@ 0x60
 8005806:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d011      	beq.n	8005836 <HAL_ADC_IRQHandler+0x266>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00c      	beq.n	8005836 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005820:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f89b 	bl	8005964 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2280      	movs	r2, #128	@ 0x80
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583c:	2b00      	cmp	r3, #0
 800583e:	d012      	beq.n	8005866 <HAL_ADC_IRQHandler+0x296>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00d      	beq.n	8005866 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fd80 	bl	800635c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <HAL_ADC_IRQHandler+0x2c6>
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fd72 	bl	8006370 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005894:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02b      	beq.n	80058f8 <HAL_ADC_IRQHandler+0x328>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 0310 	and.w	r3, r3, #16
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d026      	beq.n	80058f8 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d102      	bne.n	80058b8 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80058b2:	2301      	movs	r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e009      	b.n	80058cc <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fb97 	bl	8004ff0 <LL_ADC_REG_GetDMATransfer>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80058c8:	2301      	movs	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d10e      	bne.n	80058f0 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f844 	bl	8005978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2210      	movs	r2, #16
 80058f6:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <HAL_ADC_IRQHandler+0x364>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005908:	2b00      	cmp	r3, #0
 800590a:	d013      	beq.n	8005934 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005910:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800591c:	f043 0208 	orr.w	r2, r3, #8
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800592c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fd0a 	bl	8006348 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8005934:	bf00      	nop
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b0b6      	sub	sp, #216	@ 0xd8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x22>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e39f      	b.n	80060ee <HAL_ADC_ConfigChannel+0x762>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fc11 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 8384 	bne.w	80060d0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	f7ff fadf 	bl	8004f98 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fbff 	bl	80051e2 <LL_ADC_REG_IsConversionOngoing>
 80059e4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fc0b 	bl	8005208 <LL_ADC_INJ_IsConversionOngoing>
 80059f2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 81a6 	bne.w	8005d4c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 81a1 	bne.w	8005d4c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f7ff fb0b 	bl	8005032 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d00a      	beq.n	8005a54 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6919      	ldr	r1, [r3, #16]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a4e:	f7ff fa3b 	bl	8004ec8 <LL_ADC_SetOffset>
 8005a52:	e17b      	b.n	8005d4c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2100      	movs	r1, #0
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fa58 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0xf4>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fa4d 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005a76:	4603      	mov	r3, r0
 8005a78:	0e9b      	lsrs	r3, r3, #26
 8005a7a:	f003 021f 	and.w	r2, r3, #31
 8005a7e:	e01e      	b.n	8005abe <HAL_ADC_ConfigChannel+0x132>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2100      	movs	r1, #0
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fa42 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005a96:	fa93 f3a3 	rbit	r3, r3
 8005a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005aae:	2320      	movs	r3, #32
 8005ab0:	e004      	b.n	8005abc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005ab2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005ab6:	fab3 f383 	clz	r3, r3
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d105      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x14a>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	0e9b      	lsrs	r3, r3, #26
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	e018      	b.n	8005b08 <HAL_ADC_ConfigChannel+0x17c>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005afa:	2320      	movs	r3, #32
 8005afc:	e004      	b.n	8005b08 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005afe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b02:	fab3 f383 	clz	r3, r3
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d106      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2100      	movs	r1, #0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fa11 	bl	8004f3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff f9f5 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005b26:	4603      	mov	r3, r0
 8005b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_ADC_ConfigChannel+0x1ba>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f9ea 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	0e9b      	lsrs	r3, r3, #26
 8005b40:	f003 021f 	and.w	r2, r3, #31
 8005b44:	e01e      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x1f8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff f9df 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b5c:	fa93 f3a3 	rbit	r3, r3
 8005b60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005b64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005b6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005b74:	2320      	movs	r3, #32
 8005b76:	e004      	b.n	8005b82 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005b78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b7c:	fab3 f383 	clz	r3, r3
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x210>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	0e9b      	lsrs	r3, r3, #26
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	e018      	b.n	8005bce <HAL_ADC_ConfigChannel+0x242>
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ba8:	fa93 f3a3 	rbit	r3, r3
 8005bac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005bb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	e004      	b.n	8005bce <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bc8:	fab3 f383 	clz	r3, r3
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d106      	bne.n	8005be0 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff f9ae 	bl	8004f3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff f992 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10a      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x280>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff f987 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005c02:	4603      	mov	r3, r0
 8005c04:	0e9b      	lsrs	r3, r3, #26
 8005c06:	f003 021f 	and.w	r2, r3, #31
 8005c0a:	e01e      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x2be>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2102      	movs	r1, #2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff f97c 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c22:	fa93 f3a3 	rbit	r3, r3
 8005c26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005c3a:	2320      	movs	r3, #32
 8005c3c:	e004      	b.n	8005c48 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c42:	fab3 f383 	clz	r3, r3
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	461a      	mov	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x2d6>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	0e9b      	lsrs	r3, r3, #26
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	e016      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x304>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c6e:	fa93 f3a3 	rbit	r3, r3
 8005c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005c74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005c82:	2320      	movs	r3, #32
 8005c84:	e004      	b.n	8005c90 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005c86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d106      	bne.n	8005ca2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff f94d 	bl	8004f3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2103      	movs	r1, #3
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff f931 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x342>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2103      	movs	r1, #3
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff f926 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	0e9b      	lsrs	r3, r3, #26
 8005cc8:	f003 021f 	and.w	r2, r3, #31
 8005ccc:	e017      	b.n	8005cfe <HAL_ADC_ConfigChannel+0x372>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2103      	movs	r1, #3
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff f91b 	bl	8004f10 <LL_ADC_GetOffsetChannel>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ce0:	fa93 f3a3 	rbit	r3, r3
 8005ce4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	e003      	b.n	8005cfc <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005cf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cf6:	fab3 f383 	clz	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x38a>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	0e9b      	lsrs	r3, r3, #26
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	e011      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x3ae>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005d24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005d2e:	2320      	movs	r3, #32
 8005d30:	e003      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d34:	fab3 f383 	clz	r3, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d106      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2103      	movs	r1, #3
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff f8f8 	bl	8004f3c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fa1f 	bl	8005194 <LL_ADC_IsEnabled>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 81c2 	bne.w	80060e2 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f7ff f98c 	bl	8005088 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb0 <HAL_ADC_ConfigChannel+0x624>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f040 8130 	bne.w	8005fdc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <HAL_ADC_ConfigChannel+0x418>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	0e9b      	lsrs	r3, r3, #26
 8005d92:	3301      	adds	r3, #1
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2b09      	cmp	r3, #9
 8005d9a:	bf94      	ite	ls
 8005d9c:	2301      	movls	r3, #1
 8005d9e:	2300      	movhi	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	e019      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x44c>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005daa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dac:	fa93 f3a3 	rbit	r3, r3
 8005db0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005db4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005db6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005dbc:	2320      	movs	r3, #32
 8005dbe:	e003      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005dc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc2:	fab3 f383 	clz	r3, r3
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2b09      	cmp	r3, #9
 8005dd0:	bf94      	ite	ls
 8005dd2:	2301      	movls	r3, #1
 8005dd4:	2300      	movhi	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d079      	beq.n	8005ed0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d107      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x46c>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	0e9b      	lsrs	r3, r3, #26
 8005dee:	3301      	adds	r3, #1
 8005df0:	069b      	lsls	r3, r3, #26
 8005df2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005df6:	e015      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x498>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e00:	fa93 f3a3 	rbit	r3, r3
 8005e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005e06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005e10:	2320      	movs	r3, #32
 8005e12:	e003      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e16:	fab3 f383 	clz	r3, r3
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	069b      	lsls	r3, r3, #26
 8005e20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x4b8>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	0e9b      	lsrs	r3, r3, #26
 8005e36:	3301      	adds	r3, #1
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e42:	e017      	b.n	8005e74 <HAL_ADC_ConfigChannel+0x4e8>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e003      	b.n	8005e68 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005e60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e62:	fab3 f383 	clz	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	3301      	adds	r3, #1
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	2101      	movs	r1, #1
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	ea42 0103 	orr.w	r1, r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x50e>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0e9b      	lsrs	r3, r3, #26
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f003 021f 	and.w	r2, r3, #31
 8005e90:	4613      	mov	r3, r2
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	4413      	add	r3, r2
 8005e96:	051b      	lsls	r3, r3, #20
 8005e98:	e018      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x540>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea2:	fa93 f3a3 	rbit	r3, r3
 8005ea6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	e003      	b.n	8005ebe <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb8:	fab3 f383 	clz	r3, r3
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f003 021f 	and.w	r2, r3, #31
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	e080      	b.n	8005fd2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x560>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0e9b      	lsrs	r3, r3, #26
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	069b      	lsls	r3, r3, #26
 8005ee6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005eea:	e015      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x58c>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005f04:	2320      	movs	r3, #32
 8005f06:	e003      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	fab3 f383 	clz	r3, r3
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	069b      	lsls	r3, r3, #26
 8005f14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x5ac>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	0e9b      	lsrs	r3, r3, #26
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f303 	lsl.w	r3, r1, r3
 8005f36:	e017      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x5dc>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	fa93 f3a3 	rbit	r3, r3
 8005f44:	61fb      	str	r3, [r7, #28]
  return result;
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005f50:	2320      	movs	r3, #32
 8005f52:	e003      	b.n	8005f5c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	ea42 0103 	orr.w	r1, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10d      	bne.n	8005f94 <HAL_ADC_ConfigChannel+0x608>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0e9b      	lsrs	r3, r3, #26
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4613      	mov	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	4413      	add	r3, r2
 8005f8a:	3b1e      	subs	r3, #30
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f92:	e01d      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x644>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	fa93 f3a3 	rbit	r3, r3
 8005fa0:	613b      	str	r3, [r7, #16]
  return result;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005fac:	2320      	movs	r3, #32
 8005fae:	e005      	b.n	8005fbc <HAL_ADC_ConfigChannel+0x630>
 8005fb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	f003 021f 	and.w	r2, r3, #31
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	3b1e      	subs	r3, #30
 8005fca:	051b      	lsls	r3, r3, #20
 8005fcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fd0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f7ff f82b 	bl	8005032 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b45      	ldr	r3, [pc, #276]	@ (80060f8 <HAL_ADC_ConfigChannel+0x76c>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d07c      	beq.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fe8:	4844      	ldr	r0, [pc, #272]	@ (80060fc <HAL_ADC_ConfigChannel+0x770>)
 8005fea:	f7fe ff5f 	bl	8004eac <LL_ADC_GetCommonPathInternalCh>
 8005fee:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ff2:	4843      	ldr	r0, [pc, #268]	@ (8006100 <HAL_ADC_ConfigChannel+0x774>)
 8005ff4:	f7ff f8ce 	bl	8005194 <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d15e      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a40      	ldr	r2, [pc, #256]	@ (8006104 <HAL_ADC_ConfigChannel+0x778>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d127      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x6cc>
 8006008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800600c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d121      	bne.n	8006058 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a39      	ldr	r2, [pc, #228]	@ (8006100 <HAL_ADC_ConfigChannel+0x774>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d161      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800601e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006022:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006026:	4619      	mov	r1, r3
 8006028:	4834      	ldr	r0, [pc, #208]	@ (80060fc <HAL_ADC_ConfigChannel+0x770>)
 800602a:	f7fe ff2c 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800602e:	4b36      	ldr	r3, [pc, #216]	@ (8006108 <HAL_ADC_ConfigChannel+0x77c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	099b      	lsrs	r3, r3, #6
 8006034:	4a35      	ldr	r2, [pc, #212]	@ (800610c <HAL_ADC_ConfigChannel+0x780>)
 8006036:	fba2 2303 	umull	r2, r3, r2, r3
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	4613      	mov	r3, r2
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	4413      	add	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006048:	e002      	b.n	8006050 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3b01      	subs	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f9      	bne.n	800604a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006056:	e044      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2c      	ldr	r2, [pc, #176]	@ (8006110 <HAL_ADC_ConfigChannel+0x784>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <HAL_ADC_ConfigChannel+0x6fe>
 8006062:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006066:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10d      	bne.n	800608a <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a23      	ldr	r2, [pc, #140]	@ (8006100 <HAL_ADC_ConfigChannel+0x774>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d134      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800607c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006080:	4619      	mov	r1, r3
 8006082:	481e      	ldr	r0, [pc, #120]	@ (80060fc <HAL_ADC_ConfigChannel+0x770>)
 8006084:	f7fe feff 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006088:	e02b      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	@ (8006114 <HAL_ADC_ConfigChannel+0x788>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d126      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
 8006094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d120      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a16      	ldr	r2, [pc, #88]	@ (8006100 <HAL_ADC_ConfigChannel+0x774>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d11b      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80060aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060b2:	4619      	mov	r1, r3
 80060b4:	4811      	ldr	r0, [pc, #68]	@ (80060fc <HAL_ADC_ConfigChannel+0x770>)
 80060b6:	f7fe fee6 	bl	8004e86 <LL_ADC_SetCommonPathInternalCh>
 80060ba:	e012      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80060ce:	e008      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80060ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	37d8      	adds	r7, #216	@ 0xd8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	80080000 	.word	0x80080000
 80060fc:	50040300 	.word	0x50040300
 8006100:	50040000 	.word	0x50040000
 8006104:	c7520000 	.word	0xc7520000
 8006108:	2000000c 	.word	0x2000000c
 800610c:	053e2d63 	.word	0x053e2d63
 8006110:	cb840000 	.word	0xcb840000
 8006114:	80000001 	.word	0x80000001

08006118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f833 	bl	8005194 <LL_ADC_IsEnabled>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d15e      	bne.n	80061f2 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b30      	ldr	r3, [pc, #192]	@ (80061fc <ADC_Enable+0xe4>)
 800613c:	4013      	ands	r3, r2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006146:	f043 0210 	orr.w	r2, r3, #16
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006152:	f043 0201 	orr.w	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e04a      	b.n	80061f4 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff f802 	bl	800516c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006168:	4825      	ldr	r0, [pc, #148]	@ (8006200 <ADC_Enable+0xe8>)
 800616a:	f7fe fe9f 	bl	8004eac <LL_ADC_GetCommonPathInternalCh>
 800616e:	4603      	mov	r3, r0
 8006170:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00f      	beq.n	8006198 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006178:	4b22      	ldr	r3, [pc, #136]	@ (8006204 <ADC_Enable+0xec>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	099b      	lsrs	r3, r3, #6
 800617e:	4a22      	ldr	r2, [pc, #136]	@ (8006208 <ADC_Enable+0xf0>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	099b      	lsrs	r3, r3, #6
 8006186:	3301      	adds	r3, #1
 8006188:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800618a:	e002      	b.n	8006192 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1f9      	bne.n	800618c <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006198:	f7fe fe26 	bl	8004de8 <HAL_GetTick>
 800619c:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800619e:	e021      	b.n	80061e4 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f7fe fff5 	bl	8005194 <LL_ADC_IsEnabled>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe ffd9 	bl	800516c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80061ba:	f7fe fe15 	bl	8004de8 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d90d      	bls.n	80061e4 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061cc:	f043 0210 	orr.w	r2, r3, #16
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e007      	b.n	80061f4 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d1d6      	bne.n	80061a0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	8000003f 	.word	0x8000003f
 8006200:	50040300 	.word	0x50040300
 8006204:	2000000c 	.word	0x2000000c
 8006208:	053e2d63 	.word	0x053e2d63

0800620c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006222:	2b00      	cmp	r3, #0
 8006224:	d14b      	bne.n	80062be <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d021      	beq.n	8006284 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fe94 	bl	8004f72 <LL_ADC_REG_IsTriggerSourceSWStart>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d032      	beq.n	80062b6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d12b      	bne.n	80062b6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006262:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d11f      	bne.n	80062b6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f043 0201 	orr.w	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	655a      	str	r2, [r3, #84]	@ 0x54
 8006282:	e018      	b.n	80062b6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d111      	bne.n	80062b6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006296:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	f043 0201 	orr.w	r2, r3, #1
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fb40 	bl	800593c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80062bc:	e00e      	b.n	80062dc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	f003 0310 	and.w	r3, r3, #16
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fb54 	bl	8005978 <HAL_ADC_ErrorCallback>
}
 80062d0:	e004      	b.n	80062dc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f7ff fb2c 	bl	8005950 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062f8:	bf00      	nop
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800631e:	f043 0204 	orr.w	r2, r3, #4
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fb26 	bl	8005978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ca:	4a04      	ldr	r2, [pc, #16]	@ (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	60d3      	str	r3, [r2, #12]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <__NVIC_GetPriorityGrouping+0x18>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f003 0307 	and.w	r3, r3, #7
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db0b      	blt.n	8006426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	f003 021f 	and.w	r2, r3, #31
 8006414:	4907      	ldr	r1, [pc, #28]	@ (8006434 <__NVIC_EnableIRQ+0x38>)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2001      	movs	r0, #1
 800641e:	fa00 f202 	lsl.w	r2, r0, r2
 8006422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000e100 	.word	0xe000e100

08006438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006448:	2b00      	cmp	r3, #0
 800644a:	db0a      	blt.n	8006462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	490c      	ldr	r1, [pc, #48]	@ (8006484 <__NVIC_SetPriority+0x4c>)
 8006452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006456:	0112      	lsls	r2, r2, #4
 8006458:	b2d2      	uxtb	r2, r2
 800645a:	440b      	add	r3, r1
 800645c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006460:	e00a      	b.n	8006478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4908      	ldr	r1, [pc, #32]	@ (8006488 <__NVIC_SetPriority+0x50>)
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	3b04      	subs	r3, #4
 8006470:	0112      	lsls	r2, r2, #4
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	440b      	add	r3, r1
 8006476:	761a      	strb	r2, [r3, #24]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000e100 	.word	0xe000e100
 8006488:	e000ed00 	.word	0xe000ed00

0800648c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800648c:	b480      	push	{r7}
 800648e:	b089      	sub	sp, #36	@ 0x24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	f1c3 0307 	rsb	r3, r3, #7
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	bf28      	it	cs
 80064aa:	2304      	movcs	r3, #4
 80064ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d902      	bls.n	80064bc <NVIC_EncodePriority+0x30>
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3b03      	subs	r3, #3
 80064ba:	e000      	b.n	80064be <NVIC_EncodePriority+0x32>
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	401a      	ands	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d4:	f04f 31ff 	mov.w	r1, #4294967295
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	fa01 f303 	lsl.w	r3, r1, r3
 80064de:	43d9      	mvns	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e4:	4313      	orrs	r3, r2
         );
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3724      	adds	r7, #36	@ 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3b01      	subs	r3, #1
 8006500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006504:	d301      	bcc.n	800650a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006506:	2301      	movs	r3, #1
 8006508:	e00f      	b.n	800652a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800650a:	4a0a      	ldr	r2, [pc, #40]	@ (8006534 <SysTick_Config+0x40>)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3b01      	subs	r3, #1
 8006510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006512:	210f      	movs	r1, #15
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	f7ff ff8e 	bl	8006438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800651c:	4b05      	ldr	r3, [pc, #20]	@ (8006534 <SysTick_Config+0x40>)
 800651e:	2200      	movs	r2, #0
 8006520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006522:	4b04      	ldr	r3, [pc, #16]	@ (8006534 <SysTick_Config+0x40>)
 8006524:	2207      	movs	r2, #7
 8006526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	e000e010 	.word	0xe000e010

08006538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff29 	bl	8006398 <__NVIC_SetPriorityGrouping>
}
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af00      	add	r7, sp, #0
 8006554:	4603      	mov	r3, r0
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800655c:	f7ff ff40 	bl	80063e0 <__NVIC_GetPriorityGrouping>
 8006560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	6978      	ldr	r0, [r7, #20]
 8006568:	f7ff ff90 	bl	800648c <NVIC_EncodePriority>
 800656c:	4602      	mov	r2, r0
 800656e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006572:	4611      	mov	r1, r2
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff ff5f 	bl	8006438 <__NVIC_SetPriority>
}
 800657a:	bf00      	nop
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800658c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff33 	bl	80063fc <__NVIC_EnableIRQ>
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b082      	sub	sp, #8
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff ffa4 	bl	80064f4 <SysTick_Config>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e08e      	b.n	80066e8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b47      	ldr	r3, [pc, #284]	@ (80066f0 <HAL_DMA_Init+0x138>)
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d80f      	bhi.n	80065f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	4b45      	ldr	r3, [pc, #276]	@ (80066f4 <HAL_DMA_Init+0x13c>)
 80065de:	4413      	add	r3, r2
 80065e0:	4a45      	ldr	r2, [pc, #276]	@ (80066f8 <HAL_DMA_Init+0x140>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	091b      	lsrs	r3, r3, #4
 80065e8:	009a      	lsls	r2, r3, #2
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a42      	ldr	r2, [pc, #264]	@ (80066fc <HAL_DMA_Init+0x144>)
 80065f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80065f4:	e00e      	b.n	8006614 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	4b40      	ldr	r3, [pc, #256]	@ (8006700 <HAL_DMA_Init+0x148>)
 80065fe:	4413      	add	r3, r2
 8006600:	4a3d      	ldr	r2, [pc, #244]	@ (80066f8 <HAL_DMA_Init+0x140>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	009a      	lsls	r2, r3, #2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a3c      	ldr	r2, [pc, #240]	@ (8006704 <HAL_DMA_Init+0x14c>)
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa24 	bl	8006ab4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006674:	d102      	bne.n	800667c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006684:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006688:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006692:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_DMA_Init+0x106>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	2b04      	cmp	r3, #4
 80066a2:	d80c      	bhi.n	80066be <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa43 	bl	8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	e008      	b.n	80066d0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40020407 	.word	0x40020407
 80066f4:	bffdfff8 	.word	0xbffdfff8
 80066f8:	cccccccd 	.word	0xcccccccd
 80066fc:	40020000 	.word	0x40020000
 8006700:	bffdfbf8 	.word	0xbffdfbf8
 8006704:	40020400 	.word	0x40020400

08006708 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_DMA_Start_IT+0x20>
 8006724:	2302      	movs	r3, #2
 8006726:	e066      	b.n	80067f6 <HAL_DMA_Start_IT+0xee>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d155      	bne.n	80067e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0201 	bic.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f968 	bl	8006a36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 020e 	orr.w	r2, r2, #14
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e00f      	b.n	80067a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0204 	bic.w	r2, r2, #4
 800678e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 020a 	orr.w	r2, r2, #10
 800679e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	e005      	b.n	80067f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067f0:	2302      	movs	r3, #2
 80067f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d005      	beq.n	8006822 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2204      	movs	r2, #4
 800681a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e047      	b.n	80068b2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 020e 	bic.w	r2, r2, #14
 8006830:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	f003 021c 	and.w	r2, r3, #28
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	2101      	movs	r1, #1
 8006860:	fa01 f202 	lsl.w	r2, r1, r2
 8006864:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800686e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006886:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006890:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	4798      	blx	r3
    }
  }
  return status;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d8:	f003 031c 	and.w	r3, r3, #28
 80068dc:	2204      	movs	r2, #4
 80068de:	409a      	lsls	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d026      	beq.n	8006936 <HAL_DMA_IRQHandler+0x7a>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d021      	beq.n	8006936 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0204 	bic.w	r2, r2, #4
 800690e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006914:	f003 021c 	and.w	r2, r3, #28
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691c:	2104      	movs	r1, #4
 800691e:	fa01 f202 	lsl.w	r2, r1, r2
 8006922:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d071      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006934:	e06c      	b.n	8006a10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800693a:	f003 031c 	and.w	r3, r3, #28
 800693e:	2202      	movs	r2, #2
 8006940:	409a      	lsls	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4013      	ands	r3, r2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02e      	beq.n	80069a8 <HAL_DMA_IRQHandler+0xec>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d029      	beq.n	80069a8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0320 	and.w	r3, r3, #32
 800695e:	2b00      	cmp	r3, #0
 8006960:	d10b      	bne.n	800697a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f022 020a 	bic.w	r2, r2, #10
 8006970:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	f003 021c 	and.w	r2, r3, #28
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	2102      	movs	r1, #2
 8006988:	fa01 f202 	lsl.w	r2, r1, r2
 800698c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d038      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80069a6:	e033      	b.n	8006a10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ac:	f003 031c 	and.w	r3, r3, #28
 80069b0:	2208      	movs	r2, #8
 80069b2:	409a      	lsls	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d02a      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x156>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d025      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 020e 	bic.w	r2, r2, #14
 80069d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069da:	f003 021c 	and.w	r2, r3, #28
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	2101      	movs	r1, #1
 80069e4:	fa01 f202 	lsl.w	r2, r1, r2
 80069e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop
}
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a28:	b2db      	uxtb	r3, r3
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a4c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a64:	f003 021c 	and.w	r2, r3, #28
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6c:	2101      	movs	r1, #1
 8006a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8006a72:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b10      	cmp	r3, #16
 8006a82:	d108      	bne.n	8006a96 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a94:	e007      	b.n	8006aa6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	60da      	str	r2, [r3, #12]
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4b17      	ldr	r3, [pc, #92]	@ (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d80a      	bhi.n	8006ade <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006acc:	089b      	lsrs	r3, r3, #2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ad4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6493      	str	r3, [r2, #72]	@ 0x48
 8006adc:	e007      	b.n	8006aee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ae8:	4413      	add	r3, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	3b08      	subs	r3, #8
 8006af6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006af8:	fba2 2303 	umull	r2, r3, r2, r3
 8006afc:	091b      	lsrs	r3, r3, #4
 8006afe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006b04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40020407 	.word	0x40020407
 8006b24:	4002081c 	.word	0x4002081c
 8006b28:	cccccccd 	.word	0xcccccccd
 8006b2c:	40020880 	.word	0x40020880

08006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a09      	ldr	r2, [pc, #36]	@ (8006b78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006b54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	1000823f 	.word	0x1000823f
 8006b78:	40020940 	.word	0x40020940

08006b7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b8a:	e14c      	b.n	8006e26 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	2101      	movs	r1, #1
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f000 813e 	beq.w	8006e20 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d005      	beq.n	8006bbc <HAL_GPIO_Init+0x40>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 0303 	and.w	r3, r3, #3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d130      	bne.n	8006c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	005b      	lsls	r3, r3, #1
 8006bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfa:	43db      	mvns	r3, r3
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	f003 0201 	and.w	r2, r3, #1
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d017      	beq.n	8006c5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	005b      	lsls	r3, r3, #1
 8006c34:	2203      	movs	r2, #3
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689a      	ldr	r2, [r3, #8]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	005b      	lsls	r3, r3, #1
 8006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d123      	bne.n	8006cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	08da      	lsrs	r2, r3, #3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3208      	adds	r2, #8
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	220f      	movs	r2, #15
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	08da      	lsrs	r2, r3, #3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3208      	adds	r2, #8
 8006ca8:	6939      	ldr	r1, [r7, #16]
 8006caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	2203      	movs	r2, #3
 8006cba:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f003 0203 	and.w	r2, r3, #3
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8098 	beq.w	8006e20 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006cf0:	4a54      	ldr	r2, [pc, #336]	@ (8006e44 <HAL_GPIO_Init+0x2c8>)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	089b      	lsrs	r3, r3, #2
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	220f      	movs	r2, #15
 8006d08:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4013      	ands	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006d1a:	d019      	beq.n	8006d50 <HAL_GPIO_Init+0x1d4>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006e48 <HAL_GPIO_Init+0x2cc>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <HAL_GPIO_Init+0x1d0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a49      	ldr	r2, [pc, #292]	@ (8006e4c <HAL_GPIO_Init+0x2d0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00d      	beq.n	8006d48 <HAL_GPIO_Init+0x1cc>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a48      	ldr	r2, [pc, #288]	@ (8006e50 <HAL_GPIO_Init+0x2d4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <HAL_GPIO_Init+0x1c8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a47      	ldr	r2, [pc, #284]	@ (8006e54 <HAL_GPIO_Init+0x2d8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d101      	bne.n	8006d40 <HAL_GPIO_Init+0x1c4>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	e008      	b.n	8006d52 <HAL_GPIO_Init+0x1d6>
 8006d40:	2307      	movs	r3, #7
 8006d42:	e006      	b.n	8006d52 <HAL_GPIO_Init+0x1d6>
 8006d44:	2303      	movs	r3, #3
 8006d46:	e004      	b.n	8006d52 <HAL_GPIO_Init+0x1d6>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e002      	b.n	8006d52 <HAL_GPIO_Init+0x1d6>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <HAL_GPIO_Init+0x1d6>
 8006d50:	2300      	movs	r3, #0
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	f002 0203 	and.w	r2, r2, #3
 8006d58:	0092      	lsls	r2, r2, #2
 8006d5a:	4093      	lsls	r3, r2
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d62:	4938      	ldr	r1, [pc, #224]	@ (8006e44 <HAL_GPIO_Init+0x2c8>)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	089b      	lsrs	r3, r3, #2
 8006d68:	3302      	adds	r3, #2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d70:	4b39      	ldr	r3, [pc, #228]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d94:	4a30      	ldr	r2, [pc, #192]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4013      	ands	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dbe:	4a26      	ldr	r2, [pc, #152]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006dc4:	4b24      	ldr	r3, [pc, #144]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dea:	4a1b      	ldr	r2, [pc, #108]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006df2:	4b19      	ldr	r3, [pc, #100]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4013      	ands	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d003      	beq.n	8006e18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e18:	4a0f      	ldr	r2, [pc, #60]	@ (8006e58 <HAL_GPIO_Init+0x2dc>)
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	3301      	adds	r3, #1
 8006e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f47f aeab 	bne.w	8006b8c <HAL_GPIO_Init+0x10>
  }
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40010000 	.word	0x40010000
 8006e48:	48000400 	.word	0x48000400
 8006e4c:	48000800 	.word	0x48000800
 8006e50:	48000c00 	.word	0x48000c00
 8006e54:	48001000 	.word	0x48001000
 8006e58:	58000800 	.word	0x58000800

08006e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e6c:	787b      	ldrb	r3, [r7, #1]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e78:	e002      	b.n	8006e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	041a      	lsls	r2, r3, #16
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	43d9      	mvns	r1, r3
 8006eaa:	887b      	ldrh	r3, [r7, #2]
 8006eac:	400b      	ands	r3, r1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	619a      	str	r2, [r3, #24]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006eca:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	88fb      	ldrh	r3, [r7, #6]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d006      	beq.n	8006ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ed6:	4a05      	ldr	r2, [pc, #20]	@ (8006eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006edc:	88fb      	ldrh	r3, [r7, #6]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f806 	bl	8006ef0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	58000800 	.word	0x58000800

08006ef0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e08d      	b.n	8007034 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fd fae3 	bl	80044f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2224      	movs	r2, #36	@ 0x24
 8006f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0201 	bic.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d107      	bne.n	8006f80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f7c:	609a      	str	r2, [r3, #8]
 8006f7e:	e006      	b.n	8006f8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d108      	bne.n	8006fa8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	e007      	b.n	8006fb8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6812      	ldr	r2, [r2, #0]
 8006fc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691a      	ldr	r2, [r3, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	69d9      	ldr	r1, [r3, #28]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1a      	ldr	r2, [r3, #32]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0201 	orr.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	461a      	mov	r2, r3
 8007048:	460b      	mov	r3, r1
 800704a:	817b      	strh	r3, [r7, #10]
 800704c:	4613      	mov	r3, r2
 800704e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b20      	cmp	r3, #32
 800705a:	f040 80fd 	bne.w	8007258 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_I2C_Master_Transmit+0x30>
 8007068:	2302      	movs	r3, #2
 800706a:	e0f6      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007074:	f7fd feb8 	bl	8004de8 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2319      	movs	r3, #25
 8007080:	2201      	movs	r2, #1
 8007082:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 ff85 	bl	8007f96 <I2C_WaitOnFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e0e1      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2221      	movs	r2, #33	@ 0x21
 800709a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2210      	movs	r2, #16
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	893a      	ldrh	r2, [r7, #8]
 80070b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2bff      	cmp	r3, #255	@ 0xff
 80070c6:	d906      	bls.n	80070d6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	22ff      	movs	r2, #255	@ 0xff
 80070cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80070ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e007      	b.n	80070e6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d024      	beq.n	8007138 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3301      	adds	r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	8979      	ldrh	r1, [r7, #10]
 800712a:	4b4e      	ldr	r3, [pc, #312]	@ (8007264 <HAL_I2C_Master_Transmit+0x228>)
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f001 f97f 	bl	8008434 <I2C_TransferConfig>
 8007136:	e066      	b.n	8007206 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800713c:	b2da      	uxtb	r2, r3
 800713e:	8979      	ldrh	r1, [r7, #10]
 8007140:	4b48      	ldr	r3, [pc, #288]	@ (8007264 <HAL_I2C_Master_Transmit+0x228>)
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 f974 	bl	8008434 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800714c:	e05b      	b.n	8007206 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	6a39      	ldr	r1, [r7, #32]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 ff78 	bl	8008048 <I2C_WaitOnTXISFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e07b      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	781a      	ldrb	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d034      	beq.n	8007206 <HAL_I2C_Master_Transmit+0x1ca>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d130      	bne.n	8007206 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	2200      	movs	r2, #0
 80071ac:	2180      	movs	r1, #128	@ 0x80
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 fef1 	bl	8007f96 <I2C_WaitOnFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e04d      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2bff      	cmp	r3, #255	@ 0xff
 80071c6:	d90e      	bls.n	80071e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	22ff      	movs	r2, #255	@ 0xff
 80071cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	8979      	ldrh	r1, [r7, #10]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 f928 	bl	8008434 <I2C_TransferConfig>
 80071e4:	e00f      	b.n	8007206 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	8979      	ldrh	r1, [r7, #10]
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f001 f917 	bl	8008434 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d19e      	bne.n	800714e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	6a39      	ldr	r1, [r7, #32]
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 ff5e 	bl	80080d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e01a      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2220      	movs	r2, #32
 800722a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6859      	ldr	r1, [r3, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <HAL_I2C_Master_Transmit+0x22c>)
 8007238:	400b      	ands	r3, r1
 800723a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	80002000 	.word	0x80002000
 8007268:	fe00e800 	.word	0xfe00e800

0800726c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af02      	add	r7, sp, #8
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	461a      	mov	r2, r3
 8007278:	460b      	mov	r3, r1
 800727a:	817b      	strh	r3, [r7, #10]
 800727c:	4613      	mov	r3, r2
 800727e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b20      	cmp	r3, #32
 800728a:	f040 80db 	bne.w	8007444 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_I2C_Master_Receive+0x30>
 8007298:	2302      	movs	r3, #2
 800729a:	e0d4      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072a4:	f7fd fda0 	bl	8004de8 <HAL_GetTick>
 80072a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	2319      	movs	r3, #25
 80072b0:	2201      	movs	r2, #1
 80072b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 fe6d 	bl	8007f96 <I2C_WaitOnFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e0bf      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2222      	movs	r2, #34	@ 0x22
 80072ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2210      	movs	r2, #16
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	893a      	ldrh	r2, [r7, #8]
 80072e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2bff      	cmp	r3, #255	@ 0xff
 80072f6:	d90e      	bls.n	8007316 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	22ff      	movs	r2, #255	@ 0xff
 80072fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007302:	b2da      	uxtb	r2, r3
 8007304:	8979      	ldrh	r1, [r7, #10]
 8007306:	4b52      	ldr	r3, [pc, #328]	@ (8007450 <HAL_I2C_Master_Receive+0x1e4>)
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f890 	bl	8008434 <I2C_TransferConfig>
 8007314:	e06d      	b.n	80073f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007324:	b2da      	uxtb	r2, r3
 8007326:	8979      	ldrh	r1, [r7, #10]
 8007328:	4b49      	ldr	r3, [pc, #292]	@ (8007450 <HAL_I2C_Master_Receive+0x1e4>)
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f001 f87f 	bl	8008434 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007336:	e05c      	b.n	80073f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	6a39      	ldr	r1, [r7, #32]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 ff0d 	bl	800815c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e07c      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d034      	beq.n	80073f2 <HAL_I2C_Master_Receive+0x186>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738c:	2b00      	cmp	r3, #0
 800738e:	d130      	bne.n	80073f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2200      	movs	r2, #0
 8007398:	2180      	movs	r1, #128	@ 0x80
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 fdfb 	bl	8007f96 <I2C_WaitOnFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e04d      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2bff      	cmp	r3, #255	@ 0xff
 80073b2:	d90e      	bls.n	80073d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	@ 0xff
 80073b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	8979      	ldrh	r1, [r7, #10]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f832 	bl	8008434 <I2C_TransferConfig>
 80073d0:	e00f      	b.n	80073f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	8979      	ldrh	r1, [r7, #10]
 80073e4:	2300      	movs	r3, #0
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f001 f821 	bl	8008434 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d19d      	bne.n	8007338 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	6a39      	ldr	r1, [r7, #32]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fe68 	bl	80080d6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e01a      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2220      	movs	r2, #32
 8007416:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6859      	ldr	r1, [r3, #4]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b0c      	ldr	r3, [pc, #48]	@ (8007454 <HAL_I2C_Master_Receive+0x1e8>)
 8007424:	400b      	ands	r3, r1
 8007426:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2220      	movs	r2, #32
 800742c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	80002400 	.word	0x80002400
 8007454:	fe00e800 	.word	0xfe00e800

08007458 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	68f9      	ldr	r1, [r7, #12]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
  }
}
 8007484:	bf00      	nop
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00f      	beq.n	80074ce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074bc:	f043 0201 	orr.w	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00f      	beq.n	80074f8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e6:	f043 0208 	orr.w	r2, r3, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00f      	beq.n	8007522 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00a      	beq.n	8007522 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007510:	f043 0202 	orr.w	r2, r3, #2
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007520:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007526:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 030b 	and.w	r3, r3, #11
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fbd5 	bl	8007ce4 <I2C_ITError>
  }
}
 800753a:	bf00      	nop
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800754a:	bf00      	nop
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800755e:	bf00      	nop
 8007560:	370c      	adds	r7, #12
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
 8007576:	4613      	mov	r3, r2
 8007578:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80075a2:	bf00      	nop
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <I2C_Slave_ISR_IT+0x24>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e0e2      	b.n	80077ac <I2C_Slave_ISR_IT+0x1ea>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007602:	6939      	ldr	r1, [r7, #16]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f9b5 	bl	8007974 <I2C_ITSlaveCplt>
 800760a:	e0ca      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	d04b      	beq.n	80076ae <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800761c:	2b00      	cmp	r3, #0
 800761e:	d046      	beq.n	80076ae <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d128      	bne.n	800767c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b28      	cmp	r3, #40	@ 0x28
 8007634:	d108      	bne.n	8007648 <I2C_Slave_ISR_IT+0x86>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800763c:	d104      	bne.n	8007648 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800763e:	6939      	ldr	r1, [r7, #16]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fafb 	bl	8007c3c <I2C_ITListenCplt>
 8007646:	e031      	b.n	80076ac <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b29      	cmp	r3, #41	@ 0x29
 8007652:	d10e      	bne.n	8007672 <I2C_Slave_ISR_IT+0xb0>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800765a:	d00a      	beq.n	8007672 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2210      	movs	r2, #16
 8007662:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fc54 	bl	8007f12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 f926 	bl	80078bc <I2C_ITSlaveSeqCplt>
 8007670:	e01c      	b.n	80076ac <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2210      	movs	r2, #16
 8007678:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800767a:	e08f      	b.n	800779c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2210      	movs	r2, #16
 8007682:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007688:	f043 0204 	orr.w	r2, r3, #4
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <I2C_Slave_ISR_IT+0xdc>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800769c:	d17e      	bne.n	800779c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fb1d 	bl	8007ce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076aa:	e077      	b.n	800779c <I2C_Slave_ISR_IT+0x1da>
 80076ac:	e076      	b.n	800779c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d02f      	beq.n	8007718 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d02a      	beq.n	8007718 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d018      	beq.n	80076fe <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e8:	3b01      	subs	r3, #1
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d14b      	bne.n	80077a0 <I2C_Slave_ISR_IT+0x1de>
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800770e:	d047      	beq.n	80077a0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f8d3 	bl	80078bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007716:	e043      	b.n	80077a0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007728:	2b00      	cmp	r3, #0
 800772a:	d004      	beq.n	8007736 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800772c:	6939      	ldr	r1, [r7, #16]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f000 f840 	bl	80077b4 <I2C_ITAddrCplt>
 8007734:	e035      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d030      	beq.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007746:	2b00      	cmp	r3, #0
 8007748:	d02b      	beq.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d018      	beq.n	8007786 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	781a      	ldrb	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007784:	e00d      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800778c:	d002      	beq.n	8007794 <I2C_Slave_ISR_IT+0x1d2>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 f891 	bl	80078bc <I2C_ITSlaveSeqCplt>
 800779a:	e002      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80077a0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077ca:	2b28      	cmp	r3, #40	@ 0x28
 80077cc:	d16a      	bne.n	80078a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699b      	ldr	r3, [r3, #24]
 80077d4:	0c1b      	lsrs	r3, r3, #16
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80077ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	b29b      	uxth	r3, r3
 8007804:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007808:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d138      	bne.n	8007884 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007812:	897b      	ldrh	r3, [r7, #10]
 8007814:	09db      	lsrs	r3, r3, #7
 8007816:	b29a      	uxth	r2, r3
 8007818:	89bb      	ldrh	r3, [r7, #12]
 800781a:	4053      	eors	r3, r2
 800781c:	b29b      	uxth	r3, r3
 800781e:	f003 0306 	and.w	r3, r3, #6
 8007822:	2b00      	cmp	r3, #0
 8007824:	d11c      	bne.n	8007860 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	2b02      	cmp	r3, #2
 800783a:	d13b      	bne.n	80078b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2208      	movs	r2, #8
 8007848:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007852:	89ba      	ldrh	r2, [r7, #12]
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fe86 	bl	800756a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800785e:	e029      	b.n	80078b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007860:	893b      	ldrh	r3, [r7, #8]
 8007862:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fe15 	bl	8008498 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007876:	89ba      	ldrh	r2, [r7, #12]
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fe74 	bl	800756a <HAL_I2C_AddrCallback>
}
 8007882:	e017      	b.n	80078b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007884:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fe05 	bl	8008498 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007896:	89ba      	ldrh	r2, [r7, #12]
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fe64 	bl	800756a <HAL_I2C_AddrCallback>
}
 80078a2:	e007      	b.n	80078b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2208      	movs	r2, #8
 80078aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80078b4:	bf00      	nop
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	e00c      	b.n	800790a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007908:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b29      	cmp	r3, #41	@ 0x29
 8007914:	d112      	bne.n	800793c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2228      	movs	r2, #40	@ 0x28
 800791a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2221      	movs	r2, #33	@ 0x21
 8007922:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007924:	2101      	movs	r1, #1
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fdb6 	bl	8008498 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff fe04 	bl	8007542 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800793a:	e017      	b.n	800796c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b2a      	cmp	r3, #42	@ 0x2a
 8007946:	d111      	bne.n	800796c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2228      	movs	r2, #40	@ 0x28
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2222      	movs	r2, #34	@ 0x22
 8007954:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007956:	2102      	movs	r1, #2
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fd9d 	bl	8008498 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fdf5 	bl	8007556 <HAL_I2C_SlaveRxCpltCallback>
}
 800796c:	bf00      	nop
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007996:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2220      	movs	r2, #32
 800799e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	2b21      	cmp	r3, #33	@ 0x21
 80079a4:	d002      	beq.n	80079ac <I2C_ITSlaveCplt+0x38>
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b29      	cmp	r3, #41	@ 0x29
 80079aa:	d108      	bne.n	80079be <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80079ac:	f248 0101 	movw	r1, #32769	@ 0x8001
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fd71 	bl	8008498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2221      	movs	r2, #33	@ 0x21
 80079ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80079bc:	e019      	b.n	80079f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	2b22      	cmp	r3, #34	@ 0x22
 80079c2:	d002      	beq.n	80079ca <I2C_ITSlaveCplt+0x56>
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079c8:	d108      	bne.n	80079dc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80079ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fd62 	bl	8008498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2222      	movs	r2, #34	@ 0x22
 80079d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80079da:	e00a      	b.n	80079f2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	2b28      	cmp	r3, #40	@ 0x28
 80079e0:	d107      	bne.n	80079f2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80079e2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd56 	bl	8008498 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a00:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6859      	ldr	r1, [r3, #4]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4b89      	ldr	r3, [pc, #548]	@ (8007c34 <I2C_ITSlaveCplt+0x2c0>)
 8007a0e:	400b      	ands	r3, r1
 8007a10:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa7d 	bl	8007f12 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d013      	beq.n	8007a4a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d01f      	beq.n	8007a7a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a48:	e017      	b.n	8007a7a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d012      	beq.n	8007a7a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d006      	beq.n	8007a7a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d020      	beq.n	8007ac6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f023 0304 	bic.w	r3, r3, #4
 8007a8a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00c      	beq.n	8007ac6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d005      	beq.n	8007adc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad4:	f043 0204 	orr.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f003 0310 	and.w	r3, r3, #16
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d049      	beq.n	8007b7a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d044      	beq.n	8007b7a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d128      	bne.n	8007b4c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b28      	cmp	r3, #40	@ 0x28
 8007b04:	d108      	bne.n	8007b18 <I2C_ITSlaveCplt+0x1a4>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007b0c:	d104      	bne.n	8007b18 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b0e:	6979      	ldr	r1, [r7, #20]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f893 	bl	8007c3c <I2C_ITListenCplt>
 8007b16:	e030      	b.n	8007b7a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b29      	cmp	r3, #41	@ 0x29
 8007b22:	d10e      	bne.n	8007b42 <I2C_ITSlaveCplt+0x1ce>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b2a:	d00a      	beq.n	8007b42 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2210      	movs	r2, #16
 8007b32:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9ec 	bl	8007f12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff febe 	bl	80078bc <I2C_ITSlaveSeqCplt>
 8007b40:	e01b      	b.n	8007b7a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2210      	movs	r2, #16
 8007b48:	61da      	str	r2, [r3, #28]
 8007b4a:	e016      	b.n	8007b7a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2210      	movs	r2, #16
 8007b52:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b58:	f043 0204 	orr.w	r2, r3, #4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <I2C_ITSlaveCplt+0x1fa>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6c:	d105      	bne.n	8007b7a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b72:	4619      	mov	r1, r3
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 f8b5 	bl	8007ce4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d010      	beq.n	8007bb2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b94:	4619      	mov	r1, r3
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8a4 	bl	8007ce4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b28      	cmp	r3, #40	@ 0x28
 8007ba6:	d141      	bne.n	8007c2c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ba8:	6979      	ldr	r1, [r7, #20]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f846 	bl	8007c3c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007bb0:	e03c      	b.n	8007c2c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bba:	d014      	beq.n	8007be6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fe7d 	bl	80078bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c38 <I2C_ITSlaveCplt+0x2c4>)
 8007bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2220      	movs	r2, #32
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff fcd1 	bl	8007586 <HAL_I2C_ListenCpltCallback>
}
 8007be4:	e022      	b.n	8007c2c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b22      	cmp	r3, #34	@ 0x22
 8007bf0:	d10e      	bne.n	8007c10 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7ff fca4 	bl	8007556 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c0e:	e00d      	b.n	8007c2c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fc8b 	bl	8007542 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c2c:	bf00      	nop
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	fe00e800 	.word	0xfe00e800
 8007c38:	ffff0000 	.word	0xffff0000

08007c3c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a25      	ldr	r2, [pc, #148]	@ (8007ce0 <I2C_ITListenCplt+0xa4>)
 8007c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2220      	movs	r2, #32
 8007c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d022      	beq.n	8007cb8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d012      	beq.n	8007cb8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb0:	f043 0204 	orr.w	r2, r3, #4
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007cb8:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fbeb 	bl	8008498 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fc57 	bl	8007586 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	ffff0000 	.word	0xffff0000

08007ce4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cf4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a6d      	ldr	r2, [pc, #436]	@ (8007eb8 <I2C_ITError+0x1d4>)
 8007d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b28      	cmp	r3, #40	@ 0x28
 8007d1a:	d005      	beq.n	8007d28 <I2C_ITError+0x44>
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b29      	cmp	r3, #41	@ 0x29
 8007d20:	d002      	beq.n	8007d28 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d26:	d10b      	bne.n	8007d40 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d28:	2103      	movs	r1, #3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fbb4 	bl	8008498 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2228      	movs	r2, #40	@ 0x28
 8007d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a60      	ldr	r2, [pc, #384]	@ (8007ebc <I2C_ITError+0x1d8>)
 8007d3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d3e:	e030      	b.n	8007da2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d40:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fba7 	bl	8008498 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f8e1 	bl	8007f12 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b60      	cmp	r3, #96	@ 0x60
 8007d5a:	d01f      	beq.n	8007d9c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d114      	bne.n	8007d9c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d109      	bne.n	8007d94 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2210      	movs	r2, #16
 8007d86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d8c:	f043 0204 	orr.w	r2, r3, #4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d039      	beq.n	8007e24 <I2C_ITError+0x140>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b11      	cmp	r3, #17
 8007db4:	d002      	beq.n	8007dbc <I2C_ITError+0xd8>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b21      	cmp	r3, #33	@ 0x21
 8007dba:	d133      	bne.n	8007e24 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007dca:	d107      	bne.n	8007ddc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007dda:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fe1a 	bl	8006a1a <HAL_DMA_GetState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d017      	beq.n	8007e1c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	4a33      	ldr	r2, [pc, #204]	@ (8007ec0 <I2C_ITError+0x1dc>)
 8007df2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fe fcfc 	bl	80067fe <HAL_DMA_Abort_IT>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d04d      	beq.n	8007ea8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007e16:	4610      	mov	r0, r2
 8007e18:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e1a:	e045      	b.n	8007ea8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f851 	bl	8007ec4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e22:	e041      	b.n	8007ea8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d039      	beq.n	8007ea0 <I2C_ITError+0x1bc>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b12      	cmp	r3, #18
 8007e30:	d002      	beq.n	8007e38 <I2C_ITError+0x154>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b22      	cmp	r3, #34	@ 0x22
 8007e36:	d133      	bne.n	8007ea0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e46:	d107      	bne.n	8007e58 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fddc 	bl	8006a1a <HAL_DMA_GetState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d017      	beq.n	8007e98 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e6c:	4a14      	ldr	r2, [pc, #80]	@ (8007ec0 <I2C_ITError+0x1dc>)
 8007e6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe fcbe 	bl	80067fe <HAL_DMA_Abort_IT>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d011      	beq.n	8007eac <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e92:	4610      	mov	r0, r2
 8007e94:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e96:	e009      	b.n	8007eac <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f813 	bl	8007ec4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e9e:	e005      	b.n	8007eac <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f000 f80f 	bl	8007ec4 <I2C_TreatErrorCallback>
  }
}
 8007ea6:	e002      	b.n	8007eae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007eac:	bf00      	nop
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	ffff0000 	.word	0xffff0000
 8007ebc:	080075c3 	.word	0x080075c3
 8007ec0:	08007f5b 	.word	0x08007f5b

08007ec4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b60      	cmp	r3, #96	@ 0x60
 8007ed6:	d10e      	bne.n	8007ef6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fb5d 	bl	80075ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ef4:	e009      	b.n	8007f0a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fb48 	bl	800759a <HAL_I2C_ErrorCallback>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d103      	bne.n	8007f30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d007      	beq.n	8007f4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699a      	ldr	r2, [r3, #24]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f042 0201 	orr.w	r2, r2, #1
 8007f4c:	619a      	str	r2, [r3, #24]
  }
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	2200      	movs	r2, #0
 8007f76:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f84:	2200      	movs	r2, #0
 8007f86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f7ff ff9b 	bl	8007ec4 <I2C_TreatErrorCallback>
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fa6:	e03b      	b.n	8008020 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 f961 	bl	8008274 <I2C_IsErrorOccurred>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e041      	b.n	8008040 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d02d      	beq.n	8008020 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fc4:	f7fc ff10 	bl	8004de8 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d302      	bcc.n	8007fda <I2C_WaitOnFlagUntilTimeout+0x44>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d122      	bne.n	8008020 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d113      	bne.n	8008020 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ffc:	f043 0220 	orr.w	r2, r3, #32
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2220      	movs	r2, #32
 8008008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e00f      	b.n	8008040 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4013      	ands	r3, r2
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	429a      	cmp	r2, r3
 800802e:	bf0c      	ite	eq
 8008030:	2301      	moveq	r3, #1
 8008032:	2300      	movne	r3, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	429a      	cmp	r2, r3
 800803c:	d0b4      	beq.n	8007fa8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008054:	e033      	b.n	80080be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f90a 	bl	8008274 <I2C_IsErrorOccurred>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e031      	b.n	80080ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008070:	d025      	beq.n	80080be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008072:	f7fc feb9 	bl	8004de8 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	429a      	cmp	r2, r3
 8008080:	d302      	bcc.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d11a      	bne.n	80080be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d013      	beq.n	80080be <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809a:	f043 0220 	orr.w	r2, r3, #32
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e007      	b.n	80080ce <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d1c4      	bne.n	8008056 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080e2:	e02f      	b.n	8008144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f8c3 	bl	8008274 <I2C_IsErrorOccurred>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e02d      	b.n	8008154 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f8:	f7fc fe76 	bl	8004de8 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	429a      	cmp	r2, r3
 8008106:	d302      	bcc.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11a      	bne.n	8008144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b20      	cmp	r3, #32
 800811a:	d013      	beq.n	8008144 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008120:	f043 0220 	orr.w	r2, r3, #32
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2220      	movs	r2, #32
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e007      	b.n	8008154 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b20      	cmp	r3, #32
 8008150:	d1c8      	bne.n	80080e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800816c:	e071      	b.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	68b9      	ldr	r1, [r7, #8]
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f87e 	bl	8008274 <I2C_IsErrorOccurred>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f003 0320 	and.w	r3, r3, #32
 800818c:	2b20      	cmp	r3, #32
 800818e:	d13b      	bne.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d138      	bne.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d105      	bne.n	80081b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f003 0310 	and.w	r3, r3, #16
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d121      	bne.n	8008202 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2210      	movs	r2, #16
 80081c4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2204      	movs	r2, #4
 80081ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2220      	movs	r2, #32
 80081d2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6859      	ldr	r1, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b24      	ldr	r3, [pc, #144]	@ (8008270 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80081e0:	400b      	ands	r3, r1
 80081e2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
 8008200:	e002      	b.n	8008208 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008208:	f7fc fdee 	bl	8004de8 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	429a      	cmp	r2, r3
 8008216:	d302      	bcc.n	800821e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d119      	bne.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d116      	bne.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b04      	cmp	r3, #4
 8008230:	d00f      	beq.n	8008252 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008236:	f043 0220 	orr.w	r2, r3, #32
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2220      	movs	r2, #32
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b04      	cmp	r3, #4
 800825e:	d002      	beq.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d083      	beq.n	800816e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008266:	7dfb      	ldrb	r3, [r7, #23]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	fe00e800 	.word	0xfe00e800

08008274 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b08a      	sub	sp, #40	@ 0x28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	d068      	beq.n	8008372 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2210      	movs	r2, #16
 80082a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082a8:	e049      	b.n	800833e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d045      	beq.n	800833e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80082b2:	f7fc fd99 	bl	8004de8 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <I2C_IsErrorOccurred+0x54>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d13a      	bne.n	800833e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ea:	d121      	bne.n	8008330 <I2C_IsErrorOccurred+0xbc>
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082f2:	d01d      	beq.n	8008330 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80082f4:	7cfb      	ldrb	r3, [r7, #19]
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d01a      	beq.n	8008330 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008308:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800830a:	f7fc fd6d 	bl	8004de8 <HAL_GetTick>
 800830e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008310:	e00e      	b.n	8008330 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008312:	f7fc fd69 	bl	8004de8 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b19      	cmp	r3, #25
 800831e:	d907      	bls.n	8008330 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	f043 0320 	orr.w	r3, r3, #32
 8008326:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800832e:	e006      	b.n	800833e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d1e9      	bne.n	8008312 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b20      	cmp	r3, #32
 800834a:	d003      	beq.n	8008354 <I2C_IsErrorOccurred+0xe0>
 800834c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0aa      	beq.n	80082aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008358:	2b00      	cmp	r3, #0
 800835a:	d103      	bne.n	8008364 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2220      	movs	r2, #32
 8008362:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	f043 0304 	orr.w	r3, r3, #4
 800836a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80083a6:	6a3b      	ldr	r3, [r7, #32]
 80083a8:	f043 0308 	orr.w	r3, r3, #8
 80083ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80083b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	f043 0302 	orr.w	r3, r3, #2
 80083ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01c      	beq.n	8008422 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f7ff fd92 	bl	8007f12 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6859      	ldr	r1, [r3, #4]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008430 <I2C_IsErrorOccurred+0x1bc>)
 80083fa:	400b      	ands	r3, r1
 80083fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2220      	movs	r2, #32
 800840e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008426:	4618      	mov	r0, r3
 8008428:	3728      	adds	r7, #40	@ 0x28
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	fe00e800 	.word	0xfe00e800

08008434 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	817b      	strh	r3, [r7, #10]
 8008442:	4613      	mov	r3, r2
 8008444:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008446:	897b      	ldrh	r3, [r7, #10]
 8008448:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800844c:	7a7b      	ldrb	r3, [r7, #9]
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008454:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	4313      	orrs	r3, r2
 800845e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008462:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	0d5b      	lsrs	r3, r3, #21
 800846e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008472:	4b08      	ldr	r3, [pc, #32]	@ (8008494 <I2C_TransferConfig+0x60>)
 8008474:	430b      	orrs	r3, r1
 8008476:	43db      	mvns	r3, r3
 8008478:	ea02 0103 	and.w	r1, r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	430a      	orrs	r2, r1
 8008484:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	03ff63ff 	.word	0x03ff63ff

08008498 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80084a8:	887b      	ldrh	r3, [r7, #2]
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00f      	beq.n	80084d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80084b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084c6:	2b28      	cmp	r3, #40	@ 0x28
 80084c8:	d003      	beq.n	80084d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80084d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80084d2:	887b      	ldrh	r3, [r7, #2]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80084e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084f0:	2b28      	cmp	r3, #40	@ 0x28
 80084f2:	d003      	beq.n	80084fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80084fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80084fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	da03      	bge.n	800850c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800850a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800850c:	887b      	ldrh	r3, [r7, #2]
 800850e:	2b10      	cmp	r3, #16
 8008510:	d103      	bne.n	800851a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008518:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	2b20      	cmp	r3, #32
 800851e:	d103      	bne.n	8008528 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f043 0320 	orr.w	r3, r3, #32
 8008526:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008528:	887b      	ldrh	r3, [r7, #2]
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d103      	bne.n	8008536 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008534:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	43da      	mvns	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	400a      	ands	r2, r1
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b20      	cmp	r3, #32
 8008568:	d138      	bne.n	80085dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008574:	2302      	movs	r3, #2
 8008576:	e032      	b.n	80085de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2224      	movs	r2, #36	@ 0x24
 8008584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0201 	bic.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80085a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	e000      	b.n	80085de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085dc:	2302      	movs	r3, #2
  }
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b20      	cmp	r3, #32
 80085fe:	d139      	bne.n	8008674 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008606:	2b01      	cmp	r3, #1
 8008608:	d101      	bne.n	800860e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800860a:	2302      	movs	r3, #2
 800860c:	e033      	b.n	8008676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2224      	movs	r2, #36	@ 0x24
 800861a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800863c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0c0      	b.n	8008816 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d106      	bne.n	80086ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f009 f9a9 	bl	8011a00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2203      	movs	r2, #3
 80086b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f004 fc7e 	bl	800cfbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
 80086c4:	e03e      	b.n	8008744 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80086c6:	7bfa      	ldrb	r2, [r7, #15]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	440b      	add	r3, r1
 80086d4:	3311      	adds	r3, #17
 80086d6:	2201      	movs	r2, #1
 80086d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086da:	7bfa      	ldrb	r2, [r7, #15]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	3310      	adds	r3, #16
 80086ea:	7bfa      	ldrb	r2, [r7, #15]
 80086ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80086ee:	7bfa      	ldrb	r2, [r7, #15]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	440b      	add	r3, r1
 80086fc:	3313      	adds	r3, #19
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008702:	7bfa      	ldrb	r2, [r7, #15]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	440b      	add	r3, r1
 8008710:	3320      	adds	r3, #32
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008716:	7bfa      	ldrb	r2, [r7, #15]
 8008718:	6879      	ldr	r1, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	00db      	lsls	r3, r3, #3
 8008722:	440b      	add	r3, r1
 8008724:	3324      	adds	r3, #36	@ 0x24
 8008726:	2200      	movs	r2, #0
 8008728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	440b      	add	r3, r1
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	3301      	adds	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	7bfa      	ldrb	r2, [r7, #15]
 800874a:	429a      	cmp	r2, r3
 800874c:	d3bb      	bcc.n	80086c6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
 8008752:	e044      	b.n	80087de <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008754:	7bfa      	ldrb	r2, [r7, #15]
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	440b      	add	r3, r1
 8008762:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	440b      	add	r3, r1
 8008778:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800877c:	7bfa      	ldrb	r2, [r7, #15]
 800877e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	440b      	add	r3, r1
 800878e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008796:	7bfa      	ldrb	r2, [r7, #15]
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	00db      	lsls	r3, r3, #3
 80087a2:	440b      	add	r3, r1
 80087a4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	440b      	add	r3, r1
 80087ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087c2:	7bfa      	ldrb	r2, [r7, #15]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	00db      	lsls	r3, r3, #3
 80087ce:	440b      	add	r3, r1
 80087d0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	3301      	adds	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	791b      	ldrb	r3, [r3, #4]
 80087e2:	7bfa      	ldrb	r2, [r7, #15]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d3b5      	bcc.n	8008754 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3304      	adds	r3, #4
 80087f0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80087f4:	f004 fbfd 	bl	800cff2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7a9b      	ldrb	r3, [r3, #10]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d102      	bne.n	8008814 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fc40 	bl	800a094 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_PCD_Start+0x16>
 8008830:	2302      	movs	r3, #2
 8008832:	e012      	b.n	800885a <HAL_PCD_Start+0x3c>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f004 fba4 	bl	800cf8e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f006 fe65 	bl	800f51a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f006 fe6a 	bl	800f548 <USB_ReadInterrupts>
 8008874:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fb04 	bl	8008e8e <PCD_EP_ISR_Handler>

    return;
 8008886:	e110      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800888e:	2b00      	cmp	r3, #0
 8008890:	d013      	beq.n	80088ba <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800889a:	b29a      	uxth	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a4:	b292      	uxth	r2, r2
 80088a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f009 f93d 	bl	8011b2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80088b0:	2100      	movs	r1, #0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f8fc 	bl	8008ab0 <HAL_PCD_SetAddress>

    return;
 80088b8:	e0f7      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00c      	beq.n	80088de <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088d6:	b292      	uxth	r2, r2
 80088d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80088dc:	e0e5      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088fa:	b292      	uxth	r2, r2
 80088fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008900:	e0d3      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d034      	beq.n	8008976 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0204 	bic.w	r2, r2, #4
 800891e:	b292      	uxth	r2, r2
 8008920:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0208 	bic.w	r2, r2, #8
 8008936:	b292      	uxth	r2, r2
 8008938:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008942:	2b01      	cmp	r3, #1
 8008944:	d107      	bne.n	8008956 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800894e:	2100      	movs	r1, #0
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f009 fadf 	bl	8011f14 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f009 f920 	bl	8011b9c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800896e:	b292      	uxth	r2, r2
 8008970:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008974:	e099      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800897c:	2b00      	cmp	r3, #0
 800897e:	d027      	beq.n	80089d0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008988:	b29a      	uxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0208 	orr.w	r2, r2, #8
 8008992:	b292      	uxth	r2, r2
 8008994:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089aa:	b292      	uxth	r2, r2
 80089ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0204 	orr.w	r2, r2, #4
 80089c2:	b292      	uxth	r2, r2
 80089c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f009 f8cd 	bl	8011b68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80089ce:	e06c      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d040      	beq.n	8008a5c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089ec:	b292      	uxth	r2, r2
 80089ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d12b      	bne.n	8008a54 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0204 	orr.w	r2, r2, #4
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0208 	orr.w	r2, r2, #8
 8008a26:	b292      	uxth	r2, r2
 8008a28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	089b      	lsrs	r3, r3, #2
 8008a40:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a4a:	2101      	movs	r1, #1
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f009 fa61 	bl	8011f14 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008a52:	e02a      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f009 f887 	bl	8011b68 <HAL_PCD_SuspendCallback>
    return;
 8008a5a:	e026      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a78:	b292      	uxth	r2, r2
 8008a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f009 f845 	bl	8011b0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008a84:	e011      	b.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00c      	beq.n	8008aaa <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008aa8:	bf00      	nop
  }
}
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d101      	bne.n	8008aca <HAL_PCD_SetAddress+0x1a>
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	e012      	b.n	8008af0 <HAL_PCD_SetAddress+0x40>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	78fa      	ldrb	r2, [r7, #3]
 8008ad6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f006 fd06 	bl	800f4f2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	461a      	mov	r2, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	70fb      	strb	r3, [r7, #3]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	803b      	strh	r3, [r7, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da0e      	bge.n	8008b3c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	f003 0207 	and.w	r2, r3, #7
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	3310      	adds	r3, #16
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	705a      	strb	r2, [r3, #1]
 8008b3a:	e00e      	b.n	8008b5a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 0207 	and.w	r2, r3, #7
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b66:	883a      	ldrh	r2, [r7, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	78ba      	ldrb	r2, [r7, #2]
 8008b70:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b72:	78bb      	ldrb	r3, [r7, #2]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d102      	bne.n	8008b7e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_PCD_EP_Open+0x94>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e00e      	b.n	8008baa <HAL_PCD_EP_Open+0xb2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f004 fa48 	bl	800d030 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	da0e      	bge.n	8008be4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bc6:	78fb      	ldrb	r3, [r7, #3]
 8008bc8:	f003 0207 	and.w	r2, r3, #7
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	3310      	adds	r3, #16
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	4413      	add	r3, r2
 8008bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	705a      	strb	r2, [r3, #1]
 8008be2:	e00e      	b.n	8008c02 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 0207 	and.w	r2, r3, #7
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	00db      	lsls	r3, r3, #3
 8008bf2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	f003 0307 	and.w	r3, r3, #7
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_PCD_EP_Close+0x6a>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e00e      	b.n	8008c3a <HAL_PCD_EP_Close+0x88>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68f9      	ldr	r1, [r7, #12]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f004 fdc4 	bl	800d7b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b086      	sub	sp, #24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	f003 0207 	and.w	r2, r3, #7
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	00db      	lsls	r3, r3, #3
 8008c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c82:	7afb      	ldrb	r3, [r7, #11]
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6979      	ldr	r1, [r7, #20]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f004 ff7c 	bl	800db92 <USB_EPStartXfer>

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	f003 0207 	and.w	r2, r3, #7
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	440b      	add	r3, r1
 8008cc2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008cc6:	681b      	ldr	r3, [r3, #0]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ce4:	7afb      	ldrb	r3, [r7, #11]
 8008ce6:	f003 0207 	and.w	r2, r3, #7
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2200      	movs	r2, #0
 8008d18:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d20:	7afb      	ldrb	r3, [r7, #11]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6979      	ldr	r1, [r7, #20]
 8008d32:	4618      	mov	r0, r3
 8008d34:	f004 ff2d 	bl	800db92 <USB_EPStartXfer>

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	f003 0307 	and.w	r3, r3, #7
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	7912      	ldrb	r2, [r2, #4]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d901      	bls.n	8008d60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e03e      	b.n	8008dde <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da0e      	bge.n	8008d86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d68:	78fb      	ldrb	r3, [r7, #3]
 8008d6a:	f003 0207 	and.w	r2, r3, #7
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	00db      	lsls	r3, r3, #3
 8008d76:	3310      	adds	r3, #16
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	705a      	strb	r2, [r3, #1]
 8008d84:	e00c      	b.n	8008da0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d86:	78fa      	ldrb	r2, [r7, #3]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2201      	movs	r2, #1
 8008da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_PCD_EP_SetStall+0x7e>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e00e      	b.n	8008dde <HAL_PCD_EP_SetStall+0x9c>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68f9      	ldr	r1, [r7, #12]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f006 fa90 	bl	800f2f4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b084      	sub	sp, #16
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
 8008dee:	460b      	mov	r3, r1
 8008df0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7912      	ldrb	r2, [r2, #4]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d901      	bls.n	8008e04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e040      	b.n	8008e86 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	da0e      	bge.n	8008e2a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	f003 0207 	and.w	r2, r3, #7
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	705a      	strb	r2, [r3, #1]
 8008e28:	e00e      	b.n	8008e48 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	f003 0207 	and.w	r2, r3, #7
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	f003 0307 	and.w	r3, r3, #7
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_PCD_EP_ClrStall+0x82>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e00e      	b.n	8008e86 <HAL_PCD_EP_ClrStall+0xa0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f006 fa8d 	bl	800f396 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b096      	sub	sp, #88	@ 0x58
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008e96:	e3ad      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008ea0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8008eb2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 816f 	bne.w	800919a <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008ec0:	f003 0310 	and.w	r3, r3, #16
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d14c      	bne.n	8008f62 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed8:	81fb      	strh	r3, [r7, #14]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	89fb      	ldrh	r3, [r7, #14]
 8008ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3310      	adds	r3, #16
 8008ef0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	00db      	lsls	r3, r3, #3
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f1c:	695a      	ldr	r2, [r3, #20]
 8008f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	441a      	add	r2, r3
 8008f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f26:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f008 fdd5 	bl	8011ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	7b1b      	ldrb	r3, [r3, #12]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 835c 	beq.w	80095f4 <PCD_EP_ISR_Handler+0x766>
 8008f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 8357 	bne.w	80095f4 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7b1b      	ldrb	r3, [r3, #12]
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	731a      	strb	r2, [r3, #12]
 8008f60:	e348      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f68:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008f74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d032      	beq.n	8008fe6 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	4413      	add	r3, r2
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8008fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f006 fb16 	bl	800f5ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008fcc:	4013      	ands	r3, r2
 8008fce:	823b      	strh	r3, [r7, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	8a3a      	ldrh	r2, [r7, #16]
 8008fd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fda:	b292      	uxth	r2, r2
 8008fdc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f008 fd4e 	bl	8011a80 <HAL_PCD_SetupStageCallback>
 8008fe4:	e306      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008fe6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f280 8302 	bge.w	80095f4 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	83fb      	strh	r3, [r7, #30]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	8bfa      	ldrh	r2, [r7, #30]
 8009006:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800900a:	b292      	uxth	r2, r2
 800900c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009016:	b29b      	uxth	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	4413      	add	r3, r2
 8009028:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009034:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d019      	beq.n	8009072 <PCD_EP_ISR_Handler+0x1e4>
 800903e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d015      	beq.n	8009072 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800904c:	6959      	ldr	r1, [r3, #20]
 800904e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009050:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009054:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009056:	b29b      	uxth	r3, r3
 8009058:	f006 fac8 	bl	800f5ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800905c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800905e:	695a      	ldr	r2, [r3, #20]
 8009060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	441a      	add	r2, r3
 8009066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009068:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800906a:	2100      	movs	r1, #0
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f008 fd19 	bl	8011aa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800907c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009084:	2b00      	cmp	r3, #0
 8009086:	f040 82b5 	bne.w	80095f4 <PCD_EP_ISR_Handler+0x766>
 800908a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800908e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009092:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009096:	f000 82ad 	beq.w	80095f4 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	61bb      	str	r3, [r7, #24]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	4413      	add	r3, r2
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80090d0:	d91d      	bls.n	800910e <PCD_EP_ISR_Handler+0x280>
 80090d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80090da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <PCD_EP_ISR_Handler+0x25e>
 80090e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e8:	3b01      	subs	r3, #1
 80090ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	029b      	lsls	r3, r3, #10
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	4313      	orrs	r3, r2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009106:	b29a      	uxth	r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e026      	b.n	800915c <PCD_EP_ISR_Handler+0x2ce>
 800910e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <PCD_EP_ISR_Handler+0x29e>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009124:	b29a      	uxth	r2, r3
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	e017      	b.n	800915c <PCD_EP_ISR_Handler+0x2ce>
 800912c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	085b      	lsrs	r3, r3, #1
 8009132:	647b      	str	r3, [r7, #68]	@ 0x44
 8009134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <PCD_EP_ISR_Handler+0x2b8>
 8009140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009142:	3301      	adds	r3, #1
 8009144:	647b      	str	r3, [r7, #68]	@ 0x44
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29a      	uxth	r2, r3
 800914c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800914e:	b29b      	uxth	r3, r3
 8009150:	029b      	lsls	r3, r3, #10
 8009152:	b29b      	uxth	r3, r3
 8009154:	4313      	orrs	r3, r2
 8009156:	b29a      	uxth	r2, r3
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800916c:	827b      	strh	r3, [r7, #18]
 800916e:	8a7b      	ldrh	r3, [r7, #18]
 8009170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009174:	827b      	strh	r3, [r7, #18]
 8009176:	8a7b      	ldrh	r3, [r7, #18]
 8009178:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800917c:	827b      	strh	r3, [r7, #18]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	8a7b      	ldrh	r3, [r7, #18]
 8009184:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009188:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800918c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009190:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009194:	b29b      	uxth	r3, r3
 8009196:	8013      	strh	r3, [r2, #0]
 8009198:	e22c      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80091ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f280 80f6 	bge.w	80093a4 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	461a      	mov	r2, r3
 80091be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80091ce:	4013      	ands	r3, r2
 80091d0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	461a      	mov	r2, r3
 80091da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80091e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80091ea:	b292      	uxth	r2, r2
 80091ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80091ee:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009206:	7b1b      	ldrb	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d123      	bne.n	8009254 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009214:	b29b      	uxth	r3, r3
 8009216:	461a      	mov	r2, r3
 8009218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4413      	add	r3, r2
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6812      	ldr	r2, [r2, #0]
 8009224:	4413      	add	r3, r2
 8009226:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009230:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8009234:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 808e 	beq.w	800935a <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009244:	6959      	ldr	r1, [r3, #20]
 8009246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009248:	88da      	ldrh	r2, [r3, #6]
 800924a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800924e:	f006 f9cd 	bl	800f5ec <USB_ReadPMA>
 8009252:	e082      	b.n	800935a <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d10a      	bne.n	8009272 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800925c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009260:	461a      	mov	r2, r3
 8009262:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f9d3 	bl	8009610 <HAL_PCD_EP_DB_Receive>
 800926a:	4603      	mov	r3, r0
 800926c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009270:	e073      	b.n	800935a <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	b29b      	uxth	r3, r3
 8009284:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	461a      	mov	r2, r3
 8009296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	441a      	add	r2, r3
 800929e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80092a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4413      	add	r3, r2
 80092c4:	881b      	ldrh	r3, [r3, #0]
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d022      	beq.n	8009316 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092d8:	b29b      	uxth	r3, r3
 80092da:	461a      	mov	r2, r3
 80092dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	4413      	add	r3, r2
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	4413      	add	r3, r2
 80092ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80092f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d02c      	beq.n	800935a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6818      	ldr	r0, [r3, #0]
 8009304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009306:	6959      	ldr	r1, [r3, #20]
 8009308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800930a:	891a      	ldrh	r2, [r3, #8]
 800930c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009310:	f006 f96c 	bl	800f5ec <USB_ReadPMA>
 8009314:	e021      	b.n	800935a <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800931e:	b29b      	uxth	r3, r3
 8009320:	461a      	mov	r2, r3
 8009322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6812      	ldr	r2, [r2, #0]
 800932e:	4413      	add	r3, r2
 8009330:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800933a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800933e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009342:	2b00      	cmp	r3, #0
 8009344:	d009      	beq.n	800935a <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800934c:	6959      	ldr	r1, [r3, #20]
 800934e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009350:	895a      	ldrh	r2, [r3, #10]
 8009352:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009356:	f006 f949 	bl	800f5ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800935a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800935c:	69da      	ldr	r2, [r3, #28]
 800935e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009362:	441a      	add	r2, r3
 8009364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009366:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800936a:	695a      	ldr	r2, [r3, #20]
 800936c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009370:	441a      	add	r2, r3
 8009372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009374:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <PCD_EP_ISR_Handler+0x4fc>
 800937e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	429a      	cmp	r2, r3
 8009388:	d206      	bcs.n	8009398 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800938a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f008 fb87 	bl	8011aa4 <HAL_PCD_DataOutStageCallback>
 8009396:	e005      	b.n	80093a4 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800939e:	4618      	mov	r0, r3
 80093a0:	f004 fbf7 	bl	800db92 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80093a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80093a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 8121 	beq.w	80095f4 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80093b2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	3310      	adds	r3, #16
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80093dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	441a      	add	r2, r3
 80093f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009404:	78db      	ldrb	r3, [r3, #3]
 8009406:	2b01      	cmp	r3, #1
 8009408:	f040 80a2 	bne.w	8009550 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800940c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800940e:	2200      	movs	r2, #0
 8009410:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009414:	7b1b      	ldrb	r3, [r3, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 8093 	beq.w	8009542 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800941c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d046      	beq.n	80094b6 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d126      	bne.n	800947e <PCD_EP_ISR_Handler+0x5f0>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	627b      	str	r3, [r7, #36]	@ 0x24
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800943e:	b29b      	uxth	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009444:	4413      	add	r3, r2
 8009446:	627b      	str	r3, [r7, #36]	@ 0x24
 8009448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	00da      	lsls	r2, r3, #3
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	4413      	add	r3, r2
 8009452:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009456:	623b      	str	r3, [r7, #32]
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009462:	b29a      	uxth	r2, r3
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	801a      	strh	r2, [r3, #0]
 8009468:	6a3b      	ldr	r3, [r7, #32]
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009476:	b29a      	uxth	r2, r3
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	801a      	strh	r2, [r3, #0]
 800947c:	e061      	b.n	8009542 <PCD_EP_ISR_Handler+0x6b4>
 800947e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d15d      	bne.n	8009542 <PCD_EP_ISR_Handler+0x6b4>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009494:	b29b      	uxth	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	4413      	add	r3, r2
 800949c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800949e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	00da      	lsls	r2, r3, #3
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	4413      	add	r3, r2
 80094a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	2200      	movs	r2, #0
 80094b2:	801a      	strh	r2, [r3, #0]
 80094b4:	e045      	b.n	8009542 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d126      	bne.n	8009512 <PCD_EP_ISR_Handler+0x684>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	4413      	add	r3, r2
 80094da:	637b      	str	r3, [r7, #52]	@ 0x34
 80094dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	00da      	lsls	r2, r3, #3
 80094e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e4:	4413      	add	r3, r2
 80094e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800950a:	b29a      	uxth	r2, r3
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	801a      	strh	r2, [r3, #0]
 8009510:	e017      	b.n	8009542 <PCD_EP_ISR_Handler+0x6b4>
 8009512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d113      	bne.n	8009542 <PCD_EP_ISR_Handler+0x6b4>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009522:	b29b      	uxth	r3, r3
 8009524:	461a      	mov	r2, r3
 8009526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009528:	4413      	add	r3, r2
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800952c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	00da      	lsls	r2, r3, #3
 8009532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009534:	4413      	add	r3, r2
 8009536:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800953a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	2200      	movs	r2, #0
 8009540:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f008 fac6 	bl	8011ada <HAL_PCD_DataInStageCallback>
 800954e:	e051      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009550:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009558:	2b00      	cmp	r3, #0
 800955a:	d144      	bne.n	80095e6 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009564:	b29b      	uxth	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	4413      	add	r3, r2
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	6812      	ldr	r2, [r2, #0]
 8009574:	4413      	add	r3, r2
 8009576:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009580:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800958c:	429a      	cmp	r2, r3
 800958e:	d907      	bls.n	80095a0 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8009590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800959c:	619a      	str	r2, [r3, #24]
 800959e:	e002      	b.n	80095a6 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80095a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a2:	2200      	movs	r2, #0
 80095a4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80095a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80095ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f008 fa90 	bl	8011ada <HAL_PCD_DataInStageCallback>
 80095ba:	e01b      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80095bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095be:	695a      	ldr	r2, [r3, #20]
 80095c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095c4:	441a      	add	r2, r3
 80095c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80095ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095cc:	69da      	ldr	r2, [r3, #28]
 80095ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095d2:	441a      	add	r2, r3
 80095d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095de:	4618      	mov	r0, r3
 80095e0:	f004 fad7 	bl	800db92 <USB_EPStartXfer>
 80095e4:	e006      	b.n	80095f4 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80095e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80095ea:	461a      	mov	r2, r3
 80095ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f917 	bl	8009822 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b21b      	sxth	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	f6ff ac49 	blt.w	8008e98 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3758      	adds	r7, #88	@ 0x58
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	4613      	mov	r3, r2
 800961c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d07c      	beq.n	8009722 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009630:	b29b      	uxth	r3, r3
 8009632:	461a      	mov	r2, r3
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	4413      	add	r3, r2
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	4413      	add	r3, r2
 8009642:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800964c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	8b7b      	ldrh	r3, [r7, #26]
 8009654:	429a      	cmp	r2, r3
 8009656:	d306      	bcc.n	8009666 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	699a      	ldr	r2, [r3, #24]
 800965c:	8b7b      	ldrh	r3, [r7, #26]
 800965e:	1ad2      	subs	r2, r2, r3
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	619a      	str	r2, [r3, #24]
 8009664:	e002      	b.n	800966c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	2200      	movs	r2, #0
 800966a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d123      	bne.n	80096bc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29b      	uxth	r3, r3
 8009686:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800968a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800968e:	833b      	strh	r3, [r7, #24]
 8009690:	8b3b      	ldrh	r3, [r7, #24]
 8009692:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009696:	833b      	strh	r3, [r7, #24]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	461a      	mov	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	441a      	add	r2, r3
 80096a6:	8b3b      	ldrh	r3, [r7, #24]
 80096a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80096bc:	88fb      	ldrh	r3, [r7, #6]
 80096be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01f      	beq.n	8009706 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e0:	82fb      	strh	r3, [r7, #22]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	441a      	add	r2, r3
 80096f0:	8afb      	ldrh	r3, [r7, #22]
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009706:	8b7b      	ldrh	r3, [r7, #26]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 8085 	beq.w	8009818 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	6959      	ldr	r1, [r3, #20]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	891a      	ldrh	r2, [r3, #8]
 800971a:	8b7b      	ldrh	r3, [r7, #26]
 800971c:	f005 ff66 	bl	800f5ec <USB_ReadPMA>
 8009720:	e07a      	b.n	8009818 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800972a:	b29b      	uxth	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4413      	add	r3, r2
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	6812      	ldr	r2, [r2, #0]
 800973a:	4413      	add	r3, r2
 800973c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009746:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	699a      	ldr	r2, [r3, #24]
 800974c:	8b7b      	ldrh	r3, [r7, #26]
 800974e:	429a      	cmp	r2, r3
 8009750:	d306      	bcc.n	8009760 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	8b7b      	ldrh	r3, [r7, #26]
 8009758:	1ad2      	subs	r2, r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	619a      	str	r2, [r3, #24]
 800975e:	e002      	b.n	8009766 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2200      	movs	r2, #0
 8009764:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d123      	bne.n	80097b6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	b29b      	uxth	r3, r3
 8009780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009788:	83fb      	strh	r3, [r7, #30]
 800978a:	8bfb      	ldrh	r3, [r7, #30]
 800978c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009790:	83fb      	strh	r3, [r7, #30]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	441a      	add	r2, r3
 80097a0:	8bfb      	ldrh	r3, [r7, #30]
 80097a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80097b6:	88fb      	ldrh	r3, [r7, #6]
 80097b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d11f      	bne.n	8009800 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097da:	83bb      	strh	r3, [r7, #28]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	8bbb      	ldrh	r3, [r7, #28]
 80097ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009800:	8b7b      	ldrh	r3, [r7, #26]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d008      	beq.n	8009818 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6959      	ldr	r1, [r3, #20]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	895a      	ldrh	r2, [r3, #10]
 8009812:	8b7b      	ldrh	r3, [r7, #26]
 8009814:	f005 feea 	bl	800f5ec <USB_ReadPMA>
    }
  }

  return count;
 8009818:	8b7b      	ldrh	r3, [r7, #26]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b0a4      	sub	sp, #144	@ 0x90
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	4613      	mov	r3, r2
 800982e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009830:	88fb      	ldrh	r3, [r7, #6]
 8009832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 81db 	beq.w	8009bf2 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009844:	b29b      	uxth	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	4413      	add	r3, r2
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	4413      	add	r3, r2
 8009856:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009860:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	699a      	ldr	r2, [r3, #24]
 8009868:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800986c:	429a      	cmp	r2, r3
 800986e:	d907      	bls.n	8009880 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	699a      	ldr	r2, [r3, #24]
 8009874:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009878:	1ad2      	subs	r2, r2, r3
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	619a      	str	r2, [r3, #24]
 800987e:	e002      	b.n	8009886 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	699b      	ldr	r3, [r3, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f040 80b9 	bne.w	8009a02 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d126      	bne.n	80098e6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ac:	4413      	add	r3, r2
 80098ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	00da      	lsls	r2, r3, #3
 80098b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b8:	4413      	add	r3, r2
 80098ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	e01a      	b.n	800991c <HAL_PCD_EP_DB_Transmit+0xfa>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	785b      	ldrb	r3, [r3, #1]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d116      	bne.n	800991c <HAL_PCD_EP_DB_Transmit+0xfa>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009902:	4413      	add	r3, r2
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	00da      	lsls	r2, r3, #3
 800990c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990e:	4413      	add	r3, r2
 8009910:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009914:	633b      	str	r3, [r7, #48]	@ 0x30
 8009916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009918:	2200      	movs	r2, #0
 800991a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d126      	bne.n	8009978 <HAL_PCD_EP_DB_Transmit+0x156>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	61fb      	str	r3, [r7, #28]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009938:	b29b      	uxth	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	61fb      	str	r3, [r7, #28]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	00da      	lsls	r2, r3, #3
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29b      	uxth	r3, r3
 8009958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800995c:	b29a      	uxth	r2, r3
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	b29b      	uxth	r3, r3
 8009968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009970:	b29a      	uxth	r2, r3
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	801a      	strh	r2, [r3, #0]
 8009976:	e017      	b.n	80099a8 <HAL_PCD_EP_DB_Transmit+0x186>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d113      	bne.n	80099a8 <HAL_PCD_EP_DB_Transmit+0x186>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009988:	b29b      	uxth	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998e:	4413      	add	r3, r2
 8009990:	627b      	str	r3, [r7, #36]	@ 0x24
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	00da      	lsls	r2, r3, #3
 8009998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999a:	4413      	add	r3, r2
 800999c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099a0:	623b      	str	r3, [r7, #32]
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	2200      	movs	r2, #0
 80099a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	4619      	mov	r1, r3
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f008 f893 	bl	8011ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 82fa 	beq.w	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	4413      	add	r3, r2
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099da:	82fb      	strh	r3, [r7, #22]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	461a      	mov	r2, r3
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	8afb      	ldrh	r3, [r7, #22]
 80099ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	8013      	strh	r3, [r2, #0]
 8009a00:	e2d8      	b.n	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009a02:	88fb      	ldrh	r3, [r7, #6]
 8009a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d021      	beq.n	8009a50 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a26:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	441a      	add	r2, r3
 8009a38:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	f040 82ac 	bne.w	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	695a      	ldr	r2, [r3, #20]
 8009a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a64:	441a      	add	r2, r3
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	69da      	ldr	r2, [r3, #28]
 8009a6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a72:	441a      	add	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	6a1a      	ldr	r2, [r3, #32]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d30b      	bcc.n	8009a9c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	6a1a      	ldr	r2, [r3, #32]
 8009a90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a94:	1ad2      	subs	r2, r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	621a      	str	r2, [r3, #32]
 8009a9a:	e017      	b.n	8009acc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d108      	bne.n	8009ab6 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009aa4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009ab4:	e00a      	b.n	8009acc <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	785b      	ldrb	r3, [r3, #1]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d165      	bne.n	8009ba0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae8:	4413      	add	r3, r2
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	00da      	lsls	r2, r3, #3
 8009af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af4:	4413      	add	r3, r2
 8009af6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b10:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b12:	d91d      	bls.n	8009b50 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b18:	095b      	lsrs	r3, r3, #5
 8009b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <HAL_PCD_EP_DB_Transmit+0x30c>
 8009b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	029b      	lsls	r3, r3, #10
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4c:	801a      	strh	r2, [r3, #0]
 8009b4e:	e044      	b.n	8009bda <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <HAL_PCD_EP_DB_Transmit+0x34c>
 8009b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	e035      	b.n	8009bda <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b72:	085b      	lsrs	r3, r3, #1
 8009b74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <HAL_PCD_EP_DB_Transmit+0x366>
 8009b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b84:	3301      	adds	r3, #1
 8009b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	029b      	lsls	r3, r3, #10
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	4313      	orrs	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	801a      	strh	r2, [r3, #0]
 8009b9e:	e01c      	b.n	8009bda <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d118      	bne.n	8009bda <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bbc:	4413      	add	r3, r2
 8009bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	00da      	lsls	r2, r3, #3
 8009bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bc8:	4413      	add	r3, r2
 8009bca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	6959      	ldr	r1, [r3, #20]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	891a      	ldrh	r2, [r3, #8]
 8009be6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f005 fcbc 	bl	800f568 <USB_WritePMA>
 8009bf0:	e1e0      	b.n	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	4413      	add	r3, r2
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	6812      	ldr	r2, [r2, #0]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c16:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d307      	bcc.n	8009c36 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c2e:	1ad2      	subs	r2, r2, r3
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	619a      	str	r2, [r3, #24]
 8009c34:	e002      	b.n	8009c3c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 80c0 	bne.w	8009dc6 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	785b      	ldrb	r3, [r3, #1]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d126      	bne.n	8009c9c <HAL_PCD_EP_DB_Transmit+0x47a>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c62:	4413      	add	r3, r2
 8009c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	00da      	lsls	r2, r3, #3
 8009c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c6e:	4413      	add	r3, r2
 8009c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c84:	801a      	strh	r2, [r3, #0]
 8009c86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e01a      	b.n	8009cd2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d116      	bne.n	8009cd2 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cb8:	4413      	add	r3, r2
 8009cba:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	00da      	lsls	r2, r3, #3
 8009cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc4:	4413      	add	r3, r2
 8009cc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cce:	2200      	movs	r2, #0
 8009cd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d12b      	bne.n	8009d38 <HAL_PCD_EP_DB_Transmit+0x516>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf4:	4413      	add	r3, r2
 8009cf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	00da      	lsls	r2, r3, #3
 8009cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d00:	4413      	add	r3, r2
 8009d02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d0e:	881b      	ldrh	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d1c:	801a      	strh	r2, [r3, #0]
 8009d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d34:	801a      	strh	r2, [r3, #0]
 8009d36:	e017      	b.n	8009d68 <HAL_PCD_EP_DB_Transmit+0x546>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	785b      	ldrb	r3, [r3, #1]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d113      	bne.n	8009d68 <HAL_PCD_EP_DB_Transmit+0x546>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d4e:	4413      	add	r3, r2
 8009d50:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	00da      	lsls	r2, r3, #3
 8009d58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d60:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d64:	2200      	movs	r2, #0
 8009d66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f007 feb3 	bl	8011ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d74:	88fb      	ldrh	r3, [r7, #6]
 8009d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 811a 	bne.w	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d9a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	461a      	mov	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	441a      	add	r2, r3
 8009dac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8009db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009db8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	8013      	strh	r3, [r2, #0]
 8009dc4:	e0f6      	b.n	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009dc6:	88fb      	ldrh	r3, [r7, #6]
 8009dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d121      	bne.n	8009e14 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009e00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f040 80ca 	bne.w	8009fb4 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	695a      	ldr	r2, [r3, #20]
 8009e24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e28:	441a      	add	r2, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	69da      	ldr	r2, [r3, #28]
 8009e32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e36:	441a      	add	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	6a1a      	ldr	r2, [r3, #32]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d30b      	bcc.n	8009e60 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6a1a      	ldr	r2, [r3, #32]
 8009e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e58:	1ad2      	subs	r2, r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	621a      	str	r2, [r3, #32]
 8009e5e:	e017      	b.n	8009e90 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6a1b      	ldr	r3, [r3, #32]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d108      	bne.n	8009e7a <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009e68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009e78:	e00a      	b.n	8009e90 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2200      	movs	r2, #0
 8009e86:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d165      	bne.n	8009f6a <HAL_PCD_EP_DB_Transmit+0x748>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	00da      	lsls	r2, r3, #3
 8009ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ebe:	4413      	add	r3, r2
 8009ec0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ec6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ed4:	801a      	strh	r2, [r3, #0]
 8009ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eda:	2b3e      	cmp	r3, #62	@ 0x3e
 8009edc:	d91d      	bls.n	8009f1a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8009ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eea:	f003 031f 	and.w	r3, r3, #31
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ef8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	e041      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10a      	bne.n	8009f38 <HAL_PCD_EP_DB_Transmit+0x716>
 8009f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	e032      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f3c:	085b      	lsrs	r3, r3, #1
 8009f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <HAL_PCD_EP_DB_Transmit+0x730>
 8009f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f4e:	3301      	adds	r3, #1
 8009f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	029b      	lsls	r3, r3, #10
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	4313      	orrs	r3, r2
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f66:	801a      	strh	r2, [r3, #0]
 8009f68:	e019      	b.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	785b      	ldrb	r3, [r3, #1]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d115      	bne.n	8009f9e <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f80:	4413      	add	r3, r2
 8009f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	00da      	lsls	r2, r3, #3
 8009f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f9c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6818      	ldr	r0, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6959      	ldr	r1, [r3, #20]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	895a      	ldrh	r2, [r3, #10]
 8009faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f005 fada 	bl	800f568 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4413      	add	r3, r2
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fce:	82bb      	strh	r3, [r7, #20]
 8009fd0:	8abb      	ldrh	r3, [r7, #20]
 8009fd2:	f083 0310 	eor.w	r3, r3, #16
 8009fd6:	82bb      	strh	r3, [r7, #20]
 8009fd8:	8abb      	ldrh	r3, [r7, #20]
 8009fda:	f083 0320 	eor.w	r3, r3, #32
 8009fde:	82bb      	strh	r3, [r7, #20]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	441a      	add	r2, r3
 8009fee:	8abb      	ldrh	r3, [r7, #20]
 8009ff0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a000:	b29b      	uxth	r3, r3
 800a002:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3790      	adds	r7, #144	@ 0x90
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a00e:	b480      	push	{r7}
 800a010:	b087      	sub	sp, #28
 800a012:	af00      	add	r7, sp, #0
 800a014:	60f8      	str	r0, [r7, #12]
 800a016:	607b      	str	r3, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	817b      	strh	r3, [r7, #10]
 800a01c:	4613      	mov	r3, r2
 800a01e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a020:	897b      	ldrh	r3, [r7, #10]
 800a022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a026:	b29b      	uxth	r3, r3
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a02c:	897b      	ldrh	r3, [r7, #10]
 800a02e:	f003 0207 	and.w	r2, r3, #7
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	00db      	lsls	r3, r3, #3
 800a03a:	3310      	adds	r3, #16
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	e009      	b.n	800a058 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a044:	897a      	ldrh	r2, [r7, #10]
 800a046:	4613      	mov	r3, r2
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4413      	add	r3, r2
 800a056:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a058:	893b      	ldrh	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d107      	bne.n	800a06e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2200      	movs	r2, #0
 800a062:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	b29a      	uxth	r2, r3
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	80da      	strh	r2, [r3, #6]
 800a06c:	e00b      	b.n	800a086 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2201      	movs	r2, #1
 800a072:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	b29a      	uxth	r2, r3
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	0c1b      	lsrs	r3, r3, #16
 800a080:	b29a      	uxth	r2, r3
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	371c      	adds	r7, #28
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	f043 0301 	orr.w	r3, r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f043 0302 	orr.w	r3, r3, #2
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0ec:	4b05      	ldr	r3, [pc, #20]	@ (800a104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a04      	ldr	r2, [pc, #16]	@ (800a104 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0f6:	6013      	str	r3, [r2, #0]
}
 800a0f8:	bf00      	nop
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	58000400 	.word	0x58000400

0800a108 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a10c:	4b04      	ldr	r3, [pc, #16]	@ (800a120 <HAL_PWREx_GetVoltageRange+0x18>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a114:	4618      	mov	r0, r3
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	58000400 	.word	0x58000400

0800a124 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a128:	4b05      	ldr	r3, [pc, #20]	@ (800a140 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4a04      	ldr	r2, [pc, #16]	@ (800a140 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a12e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a132:	6053      	str	r3, [r2, #4]
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	58000400 	.word	0x58000400

0800a144 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800a144:	b480      	push	{r7}
 800a146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a156:	d101      	bne.n	800a15c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a158:	2301      	movs	r3, #1
 800a15a:	e000      	b.n	800a15e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a168:	b480      	push	{r7}
 800a16a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a16c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a17a:	6013      	str	r3, [r2, #0]
}
 800a17c:	bf00      	nop
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800a186:	b480      	push	{r7}
 800a188:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a18a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a194:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a198:	6013      	str	r3, [r2, #0]
}
 800a19a:	bf00      	nop
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a1a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1b6:	d101      	bne.n	800a1bc <LL_RCC_HSE_IsReady+0x18>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e000      	b.n	800a1be <LL_RCC_HSE_IsReady+0x1a>
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a1cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1da:	6013      	str	r3, [r2, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1f8:	6013      	str	r3, [r2, #0]
}
 800a1fa:	bf00      	nop
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a216:	d101      	bne.n	800a21c <LL_RCC_HSI_IsReady+0x18>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <LL_RCC_HSI_IsReady+0x1a>
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	061b      	lsls	r3, r3, #24
 800a23e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a242:	4313      	orrs	r3, r2
 800a244:	604b      	str	r3, [r1, #4]
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800a252:	b480      	push	{r7}
 800a254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a25a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a25e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a262:	f043 0301 	orr.w	r3, r3, #1
 800a266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a26a:	bf00      	nop
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a27c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a280:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a28c:	bf00      	nop
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800a296:	b480      	push	{r7}
 800a298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a29a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a29e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d101      	bne.n	800a2ae <LL_RCC_HSI48_IsReady+0x18>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <LL_RCC_HSI48_IsReady+0x1a>
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2ca:	f043 0301 	orr.w	r3, r3, #1
 800a2ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2ec:	f023 0301 	bic.w	r3, r3, #1
 800a2f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2f4:	bf00      	nop
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800a2fe:	b480      	push	{r7}
 800a300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a30a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a30e:	f043 0304 	orr.w	r3, r3, #4
 800a312:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800a320:	b480      	push	{r7}
 800a322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a32c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a330:	f023 0304 	bic.w	r3, r3, #4
 800a334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a338:	bf00      	nop
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a342:	b480      	push	{r7}
 800a344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a34e:	f003 0302 	and.w	r3, r3, #2
 800a352:	2b02      	cmp	r3, #2
 800a354:	d101      	bne.n	800a35a <LL_RCC_LSE_IsReady+0x18>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <LL_RCC_LSE_IsReady+0x1a>
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800a366:	b480      	push	{r7}
 800a368:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a36a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a36e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a376:	f043 0301 	orr.w	r3, r3, #1
 800a37a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a37e:	bf00      	nop
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a38c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3a0:	bf00      	nop
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a3ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d101      	bne.n	800a3c2 <LL_RCC_LSI1_IsReady+0x18>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <LL_RCC_LSI1_IsReady+0x1a>
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3de:	f043 0304 	orr.w	r3, r3, #4
 800a3e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3e6:	bf00      	nop
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a400:	f023 0304 	bic.w	r3, r3, #4
 800a404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a408:	bf00      	nop
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800a412:	b480      	push	{r7}
 800a414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a41a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a41e:	f003 0308 	and.w	r3, r3, #8
 800a422:	2b08      	cmp	r3, #8
 800a424:	d101      	bne.n	800a42a <LL_RCC_LSI2_IsReady+0x18>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <LL_RCC_LSI2_IsReady+0x1a>
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a43e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a446:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a472:	f043 0301 	orr.w	r3, r3, #1
 800a476:	6013      	str	r3, [r2, #0]
}
 800a478:	bf00      	nop
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800a482:	b480      	push	{r7}
 800a484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a490:	f023 0301 	bic.w	r3, r3, #1
 800a494:	6013      	str	r3, [r2, #0]
}
 800a496:	bf00      	nop
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a4a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d101      	bne.n	800a4b6 <LL_RCC_MSI_IsReady+0x16>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <LL_RCC_MSI_IsReady+0x18>
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a4ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	600b      	str	r3, [r1, #0]
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a4f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2bb0      	cmp	r3, #176	@ 0xb0
 800a500:	d901      	bls.n	800a506 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800a502:	23b0      	movs	r3, #176	@ 0xb0
 800a504:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800a506:	687b      	ldr	r3, [r7, #4]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a52e:	4313      	orrs	r3, r2
 800a530:	604b      	str	r3, [r1, #4]
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f023 0203 	bic.w	r2, r3, #3
 800a550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4313      	orrs	r3, r2
 800a558:	608b      	str	r3, [r1, #8]
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a566:	b480      	push	{r7}
 800a568:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a56a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 030c 	and.w	r3, r3, #12
}
 800a574:	4618      	mov	r0, r3
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4313      	orrs	r3, r2
 800a598:	608b      	str	r3, [r1, #8]
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a5ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a5ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5c6:	bf00      	nop
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a5da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5e2:	f023 020f 	bic.w	r2, r3, #15
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	091b      	lsrs	r3, r3, #4
 800a5ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4313      	orrs	r3, r2
 800a61a:	608b      	str	r3, [r1, #8]
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a63a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4313      	orrs	r3, r2
 800a642:	608b      	str	r3, [r1, #8]
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a650:	b480      	push	{r7}
 800a652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a66c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a670:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a674:	011b      	lsls	r3, r3, #4
 800a676:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a68c:	689b      	ldr	r3, [r3, #8]
 800a68e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a692:	4618      	mov	r0, r3
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a6a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a6b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6c6:	6013      	str	r3, [r2, #0]
}
 800a6c8:	bf00      	nop
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a6d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6e4:	6013      	str	r3, [r2, #0]
}
 800a6e6:	bf00      	nop
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a6f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a702:	d101      	bne.n	800a708 <LL_RCC_PLL_IsReady+0x18>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <LL_RCC_PLL_IsReady+0x1a>
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	0a1b      	lsrs	r3, r3, #8
 800a720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a724:	4618      	mov	r0, r3
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a72e:	b480      	push	{r7}
 800a730:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a732:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a746:	b480      	push	{r7}
 800a748:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a754:	4618      	mov	r0, r3
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a75e:	b480      	push	{r7}
 800a760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0303 	and.w	r3, r3, #3
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a776:	b480      	push	{r7}
 800a778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a77a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a788:	d101      	bne.n	800a78e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a78a:	2301      	movs	r3, #1
 800a78c:	e000      	b.n	800a790 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a79a:	b480      	push	{r7}
 800a79c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a79e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7ae:	d101      	bne.n	800a7b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a7c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7d4:	d101      	bne.n	800a7da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a7ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7f8:	d101      	bne.n	800a7fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e000      	b.n	800a800 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a80a:	b480      	push	{r7}
 800a80c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a80e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a81c:	d101      	bne.n	800a822 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a81e:	2301      	movs	r3, #1
 800a820:	e000      	b.n	800a824 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
	...

0800a830 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b08d      	sub	sp, #52	@ 0x34
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e363      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0320 	and.w	r3, r3, #32
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f000 808d 	beq.w	800a96a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a850:	f7ff fe89 	bl	800a566 <LL_RCC_GetSysClkSource>
 800a854:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a856:	f7ff ff82 	bl	800a75e <LL_RCC_PLL_GetMainSource>
 800a85a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_RCC_OscConfig+0x3e>
 800a862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a864:	2b0c      	cmp	r3, #12
 800a866:	d147      	bne.n	800a8f8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d144      	bne.n	800a8f8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e347      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a87e:	f7ff fe34 	bl	800a4ea <LL_RCC_MSI_GetRange>
 800a882:	4603      	mov	r3, r0
 800a884:	429c      	cmp	r4, r3
 800a886:	d914      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fd2f 	bl	800b2f0 <RCC_SetFlashLatencyFromMSIRange>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e336      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fe0e 	bl	800a4c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fe32 	bl	800a514 <LL_RCC_MSI_SetCalibTrimming>
 800a8b0:	e013      	b.n	800a8da <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff fe03 	bl	800a4c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fe27 	bl	800a514 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fd10 	bl	800b2f0 <RCC_SetFlashLatencyFromMSIRange>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d001      	beq.n	800a8da <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e317      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a8da:	f000 fcc9 	bl	800b270 <HAL_RCC_GetHCLKFreq>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4aa4      	ldr	r2, [pc, #656]	@ (800ab74 <HAL_RCC_OscConfig+0x344>)
 800a8e2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a8e4:	4ba4      	ldr	r3, [pc, #656]	@ (800ab78 <HAL_RCC_OscConfig+0x348>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fa fa2f 	bl	8004d4c <HAL_InitTick>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d039      	beq.n	800a968 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e308      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01e      	beq.n	800a93e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a900:	f7ff fdb0 	bl	800a464 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a904:	f7fa fa70 	bl	8004de8 <HAL_GetTick>
 800a908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a90c:	f7fa fa6c 	bl	8004de8 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b02      	cmp	r3, #2
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e2f5      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a91e:	f7ff fdbf 	bl	800a4a0 <LL_RCC_MSI_IsReady>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0f1      	beq.n	800a90c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7ff fdc8 	bl	800a4c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fdec 	bl	800a514 <LL_RCC_MSI_SetCalibTrimming>
 800a93c:	e015      	b.n	800a96a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a93e:	f7ff fda0 	bl	800a482 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a942:	f7fa fa51 	bl	8004de8 <HAL_GetTick>
 800a946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a948:	e008      	b.n	800a95c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a94a:	f7fa fa4d 	bl	8004de8 <HAL_GetTick>
 800a94e:	4602      	mov	r2, r0
 800a950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b02      	cmp	r3, #2
 800a956:	d901      	bls.n	800a95c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e2d6      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a95c:	f7ff fda0 	bl	800a4a0 <LL_RCC_MSI_IsReady>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f1      	bne.n	800a94a <HAL_RCC_OscConfig+0x11a>
 800a966:	e000      	b.n	800a96a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a968:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d047      	beq.n	800aa06 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a976:	f7ff fdf6 	bl	800a566 <LL_RCC_GetSysClkSource>
 800a97a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a97c:	f7ff feef 	bl	800a75e <LL_RCC_PLL_GetMainSource>
 800a980:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a982:	6a3b      	ldr	r3, [r7, #32]
 800a984:	2b08      	cmp	r3, #8
 800a986:	d005      	beq.n	800a994 <HAL_RCC_OscConfig+0x164>
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	2b0c      	cmp	r3, #12
 800a98c:	d108      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	2b03      	cmp	r3, #3
 800a992:	d105      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d134      	bne.n	800aa06 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e2b4      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9a8:	d102      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x180>
 800a9aa:	f7ff fbdd 	bl	800a168 <LL_RCC_HSE_Enable>
 800a9ae:	e001      	b.n	800a9b4 <HAL_RCC_OscConfig+0x184>
 800a9b0:	f7ff fbe9 	bl	800a186 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d012      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9bc:	f7fa fa14 	bl	8004de8 <HAL_GetTick>
 800a9c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9c2:	e008      	b.n	800a9d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c4:	f7fa fa10 	bl	8004de8 <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	2b64      	cmp	r3, #100	@ 0x64
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e299      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9d6:	f7ff fbe5 	bl	800a1a4 <LL_RCC_HSE_IsReady>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d0f1      	beq.n	800a9c4 <HAL_RCC_OscConfig+0x194>
 800a9e0:	e011      	b.n	800aa06 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e2:	f7fa fa01 	bl	8004de8 <HAL_GetTick>
 800a9e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9e8:	e008      	b.n	800a9fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9ea:	f7fa f9fd 	bl	8004de8 <HAL_GetTick>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	1ad3      	subs	r3, r2, r3
 800a9f4:	2b64      	cmp	r3, #100	@ 0x64
 800a9f6:	d901      	bls.n	800a9fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e286      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9fc:	f7ff fbd2 	bl	800a1a4 <LL_RCC_HSE_IsReady>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d1f1      	bne.n	800a9ea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04c      	beq.n	800aaac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa12:	f7ff fda8 	bl	800a566 <LL_RCC_GetSysClkSource>
 800aa16:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa18:	f7ff fea1 	bl	800a75e <LL_RCC_PLL_GetMainSource>
 800aa1c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d005      	beq.n	800aa30 <HAL_RCC_OscConfig+0x200>
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b0c      	cmp	r3, #12
 800aa28:	d10e      	bne.n	800aa48 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d10b      	bne.n	800aa48 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e266      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fbf1 	bl	800a228 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa46:	e031      	b.n	800aaac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d019      	beq.n	800aa84 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa50:	f7ff fbba 	bl	800a1c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa54:	f7fa f9c8 	bl	8004de8 <HAL_GetTick>
 800aa58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa5a:	e008      	b.n	800aa6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa5c:	f7fa f9c4 	bl	8004de8 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d901      	bls.n	800aa6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e24d      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa6e:	f7ff fbc9 	bl	800a204 <LL_RCC_HSI_IsReady>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0f1      	beq.n	800aa5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff fbd3 	bl	800a228 <LL_RCC_HSI_SetCalibTrimming>
 800aa82:	e013      	b.n	800aaac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa84:	f7ff fbaf 	bl	800a1e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa88:	f7fa f9ae 	bl	8004de8 <HAL_GetTick>
 800aa8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa90:	f7fa f9aa 	bl	8004de8 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d901      	bls.n	800aaa2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	e233      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800aaa2:	f7ff fbaf 	bl	800a204 <LL_RCC_HSI_IsReady>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d1f1      	bne.n	800aa90 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f003 0308 	and.w	r3, r3, #8
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d106      	bne.n	800aac6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 80a3 	beq.w	800ac0c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d076      	beq.n	800abbc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 0310 	and.w	r3, r3, #16
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d046      	beq.n	800ab68 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aada:	f7ff fc66 	bl	800a3aa <LL_RCC_LSI1_IsReady>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d113      	bne.n	800ab0c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aae4:	f7ff fc3f 	bl	800a366 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aae8:	f7fa f97e 	bl	8004de8 <HAL_GetTick>
 800aaec:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aaee:	e008      	b.n	800ab02 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aaf0:	f7fa f97a 	bl	8004de8 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d901      	bls.n	800ab02 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e203      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ab02:	f7ff fc52 	bl	800a3aa <LL_RCC_LSI1_IsReady>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0f1      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ab0c:	f7ff fc5f 	bl	800a3ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab10:	f7fa f96a 	bl	8004de8 <HAL_GetTick>
 800ab14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab16:	e008      	b.n	800ab2a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab18:	f7fa f966 	bl	8004de8 <HAL_GetTick>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab20:	1ad3      	subs	r3, r2, r3
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d901      	bls.n	800ab2a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ab26:	2303      	movs	r3, #3
 800ab28:	e1ef      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab2a:	f7ff fc72 	bl	800a412 <LL_RCC_LSI2_IsReady>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d0f1      	beq.n	800ab18 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fc7c 	bl	800a436 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ab3e:	f7ff fc23 	bl	800a388 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab42:	f7fa f951 	bl	8004de8 <HAL_GetTick>
 800ab46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab48:	e008      	b.n	800ab5c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab4a:	f7fa f94d 	bl	8004de8 <HAL_GetTick>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	1ad3      	subs	r3, r2, r3
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e1d6      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab5c:	f7ff fc25 	bl	800a3aa <LL_RCC_LSI1_IsReady>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1f1      	bne.n	800ab4a <HAL_RCC_OscConfig+0x31a>
 800ab66:	e051      	b.n	800ac0c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ab68:	f7ff fbfd 	bl	800a366 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6c:	f7fa f93c 	bl	8004de8 <HAL_GetTick>
 800ab70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab72:	e00c      	b.n	800ab8e <HAL_RCC_OscConfig+0x35e>
 800ab74:	2000000c 	.word	0x2000000c
 800ab78:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab7c:	f7fa f934 	bl	8004de8 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d901      	bls.n	800ab8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e1bd      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab8e:	f7ff fc0c 	bl	800a3aa <LL_RCC_LSI1_IsReady>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0f1      	beq.n	800ab7c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ab98:	f7ff fc2a 	bl	800a3f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab9c:	e008      	b.n	800abb0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab9e:	f7fa f923 	bl	8004de8 <HAL_GetTick>
 800aba2:	4602      	mov	r2, r0
 800aba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba6:	1ad3      	subs	r3, r2, r3
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d901      	bls.n	800abb0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800abac:	2303      	movs	r3, #3
 800abae:	e1ac      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800abb0:	f7ff fc2f 	bl	800a412 <LL_RCC_LSI2_IsReady>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1f1      	bne.n	800ab9e <HAL_RCC_OscConfig+0x36e>
 800abba:	e027      	b.n	800ac0c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800abbc:	f7ff fc18 	bl	800a3f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abc0:	f7fa f912 	bl	8004de8 <HAL_GetTick>
 800abc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800abc8:	f7fa f90e 	bl	8004de8 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e197      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abda:	f7ff fc1a 	bl	800a412 <LL_RCC_LSI2_IsReady>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f1      	bne.n	800abc8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800abe4:	f7ff fbd0 	bl	800a388 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe8:	f7fa f8fe 	bl	8004de8 <HAL_GetTick>
 800abec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800abee:	e008      	b.n	800ac02 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800abf0:	f7fa f8fa 	bl	8004de8 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d901      	bls.n	800ac02 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e183      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ac02:	f7ff fbd2 	bl	800a3aa <LL_RCC_LSI1_IsReady>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f1      	bne.n	800abf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d05b      	beq.n	800acd0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac18:	4ba7      	ldr	r3, [pc, #668]	@ (800aeb8 <HAL_RCC_OscConfig+0x688>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d114      	bne.n	800ac4e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ac24:	f7ff fa60 	bl	800a0e8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac28:	f7fa f8de 	bl	8004de8 <HAL_GetTick>
 800ac2c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac2e:	e008      	b.n	800ac42 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac30:	f7fa f8da 	bl	8004de8 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d901      	bls.n	800ac42 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e163      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac42:	4b9d      	ldr	r3, [pc, #628]	@ (800aeb8 <HAL_RCC_OscConfig+0x688>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d0f0      	beq.n	800ac30 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d102      	bne.n	800ac5c <HAL_RCC_OscConfig+0x42c>
 800ac56:	f7ff fb30 	bl	800a2ba <LL_RCC_LSE_Enable>
 800ac5a:	e00c      	b.n	800ac76 <HAL_RCC_OscConfig+0x446>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	2b05      	cmp	r3, #5
 800ac62:	d104      	bne.n	800ac6e <HAL_RCC_OscConfig+0x43e>
 800ac64:	f7ff fb4b 	bl	800a2fe <LL_RCC_LSE_EnableBypass>
 800ac68:	f7ff fb27 	bl	800a2ba <LL_RCC_LSE_Enable>
 800ac6c:	e003      	b.n	800ac76 <HAL_RCC_OscConfig+0x446>
 800ac6e:	f7ff fb35 	bl	800a2dc <LL_RCC_LSE_Disable>
 800ac72:	f7ff fb55 	bl	800a320 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d014      	beq.n	800aca8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac7e:	f7fa f8b3 	bl	8004de8 <HAL_GetTick>
 800ac82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac84:	e00a      	b.n	800ac9c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac86:	f7fa f8af 	bl	8004de8 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e136      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac9c:	f7ff fb51 	bl	800a342 <LL_RCC_LSE_IsReady>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0ef      	beq.n	800ac86 <HAL_RCC_OscConfig+0x456>
 800aca6:	e013      	b.n	800acd0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aca8:	f7fa f89e 	bl	8004de8 <HAL_GetTick>
 800acac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800acae:	e00a      	b.n	800acc6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb0:	f7fa f89a 	bl	8004de8 <HAL_GetTick>
 800acb4:	4602      	mov	r2, r0
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d901      	bls.n	800acc6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e121      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800acc6:	f7ff fb3c 	bl	800a342 <LL_RCC_LSE_IsReady>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1ef      	bne.n	800acb0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d02c      	beq.n	800ad36 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d014      	beq.n	800ad0e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ace4:	f7ff fab5 	bl	800a252 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ace8:	f7fa f87e 	bl	8004de8 <HAL_GetTick>
 800acec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800acee:	e008      	b.n	800ad02 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acf0:	f7fa f87a 	bl	8004de8 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d901      	bls.n	800ad02 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e103      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ad02:	f7ff fac8 	bl	800a296 <LL_RCC_HSI48_IsReady>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0f1      	beq.n	800acf0 <HAL_RCC_OscConfig+0x4c0>
 800ad0c:	e013      	b.n	800ad36 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad0e:	f7ff fab1 	bl	800a274 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad12:	f7fa f869 	bl	8004de8 <HAL_GetTick>
 800ad16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad18:	e008      	b.n	800ad2c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad1a:	f7fa f865 	bl	8004de8 <HAL_GetTick>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	1ad3      	subs	r3, r2, r3
 800ad24:	2b02      	cmp	r3, #2
 800ad26:	d901      	bls.n	800ad2c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e0ee      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad2c:	f7ff fab3 	bl	800a296 <LL_RCC_HSI48_IsReady>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1f1      	bne.n	800ad1a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80e4 	beq.w	800af08 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad40:	f7ff fc11 	bl	800a566 <LL_RCC_GetSysClkSource>
 800ad44:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ad46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad52:	2b02      	cmp	r3, #2
 800ad54:	f040 80b4 	bne.w	800aec0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f003 0203 	and.w	r2, r3, #3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d123      	bne.n	800adae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d11c      	bne.n	800adae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	0a1b      	lsrs	r3, r3, #8
 800ad78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d114      	bne.n	800adae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d10d      	bne.n	800adae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d106      	bne.n	800adae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800adaa:	429a      	cmp	r2, r3
 800adac:	d05d      	beq.n	800ae6a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2b0c      	cmp	r3, #12
 800adb2:	d058      	beq.n	800ae66 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800adb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d001      	beq.n	800adc6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e0a1      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800adc6:	f7ff fc84 	bl	800a6d2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800adca:	f7fa f80d 	bl	8004de8 <HAL_GetTick>
 800adce:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800add0:	e008      	b.n	800ade4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800add2:	f7fa f809 	bl	8004de8 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b02      	cmp	r3, #2
 800adde:	d901      	bls.n	800ade4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e092      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ade4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1ef      	bne.n	800add2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf6:	68da      	ldr	r2, [r3, #12]
 800adf8:	4b30      	ldr	r3, [pc, #192]	@ (800aebc <HAL_RCC_OscConfig+0x68c>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ae04:	4311      	orrs	r1, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ae0a:	0212      	lsls	r2, r2, #8
 800ae0c:	4311      	orrs	r1, r2
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae12:	4311      	orrs	r1, r2
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ae18:	4311      	orrs	r1, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ae1e:	430a      	orrs	r2, r1
 800ae20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ae28:	f7ff fc44 	bl	800a6b4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae3c:	f7f9 ffd4 	bl	8004de8 <HAL_GetTick>
 800ae40:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae42:	e008      	b.n	800ae56 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae44:	f7f9 ffd0 	bl	8004de8 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d901      	bls.n	800ae56 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e059      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0ef      	beq.n	800ae44 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae64:	e050      	b.n	800af08 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	e04f      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d147      	bne.n	800af08 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ae78:	f7ff fc1c 	bl	800a6b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae8c:	f7f9 ffac 	bl	8004de8 <HAL_GetTick>
 800ae90:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae92:	e008      	b.n	800aea6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae94:	f7f9 ffa8 	bl	8004de8 <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d901      	bls.n	800aea6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e031      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0ef      	beq.n	800ae94 <HAL_RCC_OscConfig+0x664>
 800aeb4:	e028      	b.n	800af08 <HAL_RCC_OscConfig+0x6d8>
 800aeb6:	bf00      	nop
 800aeb8:	58000400 	.word	0x58000400
 800aebc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b0c      	cmp	r3, #12
 800aec4:	d01e      	beq.n	800af04 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aec6:	f7ff fc04 	bl	800a6d2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeca:	f7f9 ff8d 	bl	8004de8 <HAL_GetTick>
 800aece:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aed0:	e008      	b.n	800aee4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aed2:	f7f9 ff89 	bl	8004de8 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e012      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1ef      	bne.n	800aed2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800aef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aef6:	68da      	ldr	r2, [r3, #12]
 800aef8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <HAL_RCC_OscConfig+0x6e4>)
 800aefe:	4013      	ands	r3, r2
 800af00:	60cb      	str	r3, [r1, #12]
 800af02:	e001      	b.n	800af08 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e000      	b.n	800af0a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3734      	adds	r7, #52	@ 0x34
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd90      	pop	{r4, r7, pc}
 800af12:	bf00      	nop
 800af14:	eefefffc 	.word	0xeefefffc

0800af18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e12d      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af2c:	4b98      	ldr	r3, [pc, #608]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 0307 	and.w	r3, r3, #7
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d91b      	bls.n	800af72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af3a:	4b95      	ldr	r3, [pc, #596]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f023 0207 	bic.w	r2, r3, #7
 800af42:	4993      	ldr	r1, [pc, #588]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	4313      	orrs	r3, r2
 800af48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af4a:	f7f9 ff4d 	bl	8004de8 <HAL_GetTick>
 800af4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af50:	e008      	b.n	800af64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af52:	f7f9 ff49 	bl	8004de8 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d901      	bls.n	800af64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e111      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af64:	4b8a      	ldr	r3, [pc, #552]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 0307 	and.w	r3, r3, #7
 800af6c:	683a      	ldr	r2, [r7, #0]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d1ef      	bne.n	800af52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0302 	and.w	r3, r3, #2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d016      	beq.n	800afac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fafb 	bl	800a57e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af88:	f7f9 ff2e 	bl	8004de8 <HAL_GetTick>
 800af8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af8e:	e008      	b.n	800afa2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af90:	f7f9 ff2a 	bl	8004de8 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	2b02      	cmp	r3, #2
 800af9c:	d901      	bls.n	800afa2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800af9e:	2303      	movs	r3, #3
 800afa0:	e0f2      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800afa2:	f7ff fbe8 	bl	800a776 <LL_RCC_IsActiveFlag_HPRE>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0f1      	beq.n	800af90 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 0320 	and.w	r3, r3, #32
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d016      	beq.n	800afe6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff faf2 	bl	800a5a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afc2:	f7f9 ff11 	bl	8004de8 <HAL_GetTick>
 800afc6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afc8:	e008      	b.n	800afdc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afca:	f7f9 ff0d 	bl	8004de8 <HAL_GetTick>
 800afce:	4602      	mov	r2, r0
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d901      	bls.n	800afdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e0d5      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afdc:	f7ff fbdd 	bl	800a79a <LL_RCC_IsActiveFlag_C2HPRE>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d0f1      	beq.n	800afca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d016      	beq.n	800b020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff faeb 	bl	800a5d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800affc:	f7f9 fef4 	bl	8004de8 <HAL_GetTick>
 800b000:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b002:	e008      	b.n	800b016 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b004:	f7f9 fef0 	bl	8004de8 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d901      	bls.n	800b016 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b012:	2303      	movs	r3, #3
 800b014:	e0b8      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b016:	f7ff fbd3 	bl	800a7c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0f1      	beq.n	800b004 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d016      	beq.n	800b05a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff fae5 	bl	800a600 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b036:	f7f9 fed7 	bl	8004de8 <HAL_GetTick>
 800b03a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b03c:	e008      	b.n	800b050 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b03e:	f7f9 fed3 	bl	8004de8 <HAL_GetTick>
 800b042:	4602      	mov	r2, r0
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	1ad3      	subs	r3, r2, r3
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d901      	bls.n	800b050 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b04c:	2303      	movs	r3, #3
 800b04e:	e09b      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b050:	f7ff fbc9 	bl	800a7e6 <LL_RCC_IsActiveFlag_PPRE1>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0f1      	beq.n	800b03e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d017      	beq.n	800b096 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fadb 	bl	800a628 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b072:	f7f9 feb9 	bl	8004de8 <HAL_GetTick>
 800b076:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b078:	e008      	b.n	800b08c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b07a:	f7f9 feb5 	bl	8004de8 <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	2b02      	cmp	r3, #2
 800b086:	d901      	bls.n	800b08c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e07d      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b08c:	f7ff fbbd 	bl	800a80a <LL_RCC_IsActiveFlag_PPRE2>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d0f1      	beq.n	800b07a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d043      	beq.n	800b12a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d106      	bne.n	800b0b8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b0aa:	f7ff f87b 	bl	800a1a4 <LL_RCC_HSE_IsReady>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d11e      	bne.n	800b0f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e067      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d106      	bne.n	800b0ce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b0c0:	f7ff fb16 	bl	800a6f0 <LL_RCC_PLL_IsReady>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d113      	bne.n	800b0f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e05c      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b0d6:	f7ff f9e3 	bl	800a4a0 <LL_RCC_MSI_IsReady>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d108      	bne.n	800b0f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e051      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b0e4:	f7ff f88e 	bl	800a204 <LL_RCC_HSI_IsReady>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e04a      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff fa21 	bl	800a53e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0fc:	f7f9 fe74 	bl	8004de8 <HAL_GetTick>
 800b100:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b102:	e00a      	b.n	800b11a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b104:	f7f9 fe70 	bl	8004de8 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b112:	4293      	cmp	r3, r2
 800b114:	d901      	bls.n	800b11a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b116:	2303      	movs	r3, #3
 800b118:	e036      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11a:	f7ff fa24 	bl	800a566 <LL_RCC_GetSysClkSource>
 800b11e:	4602      	mov	r2, r0
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	429a      	cmp	r2, r3
 800b128:	d1ec      	bne.n	800b104 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b12a:	4b19      	ldr	r3, [pc, #100]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d21b      	bcs.n	800b170 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b138:	4b15      	ldr	r3, [pc, #84]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f023 0207 	bic.w	r2, r3, #7
 800b140:	4913      	ldr	r1, [pc, #76]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	4313      	orrs	r3, r2
 800b146:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b148:	f7f9 fe4e 	bl	8004de8 <HAL_GetTick>
 800b14c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b14e:	e008      	b.n	800b162 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b150:	f7f9 fe4a 	bl	8004de8 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	d901      	bls.n	800b162 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b15e:	2303      	movs	r3, #3
 800b160:	e012      	b.n	800b188 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b162:	4b0b      	ldr	r3, [pc, #44]	@ (800b190 <HAL_RCC_ClockConfig+0x278>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d1ef      	bne.n	800b150 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b170:	f000 f87e 	bl	800b270 <HAL_RCC_GetHCLKFreq>
 800b174:	4603      	mov	r3, r0
 800b176:	4a07      	ldr	r2, [pc, #28]	@ (800b194 <HAL_RCC_ClockConfig+0x27c>)
 800b178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b17a:	f7f9 fe41 	bl	8004e00 <HAL_GetTickPrio>
 800b17e:	4603      	mov	r3, r0
 800b180:	4618      	mov	r0, r3
 800b182:	f7f9 fde3 	bl	8004d4c <HAL_InitTick>
 800b186:	4603      	mov	r3, r0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	58004000 	.word	0x58004000
 800b194:	2000000c 	.word	0x2000000c

0800b198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b198:	b590      	push	{r4, r7, lr}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b19e:	f7ff f9e2 	bl	800a566 <LL_RCC_GetSysClkSource>
 800b1a2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10a      	bne.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b1aa:	f7ff f99e 	bl	800a4ea <LL_RCC_MSI_GetRange>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	091b      	lsrs	r3, r3, #4
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	4a2b      	ldr	r2, [pc, #172]	@ (800b264 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b1b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e04b      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b04      	cmp	r3, #4
 800b1c4:	d102      	bne.n	800b1cc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1c6:	4b28      	ldr	r3, [pc, #160]	@ (800b268 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	e045      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b08      	cmp	r3, #8
 800b1d0:	d10a      	bne.n	800b1e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1d2:	f7fe ffb7 	bl	800a144 <LL_RCC_HSE_IsEnabledDiv2>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d102      	bne.n	800b1e2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b1dc:	4b22      	ldr	r3, [pc, #136]	@ (800b268 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e03a      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b1e2:	4b22      	ldr	r3, [pc, #136]	@ (800b26c <HAL_RCC_GetSysClockFreq+0xd4>)
 800b1e4:	60fb      	str	r3, [r7, #12]
 800b1e6:	e037      	b.n	800b258 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b1e8:	f7ff fab9 	bl	800a75e <LL_RCC_PLL_GetMainSource>
 800b1ec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d003      	beq.n	800b1fc <HAL_RCC_GetSysClockFreq+0x64>
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d003      	beq.n	800b202 <HAL_RCC_GetSysClockFreq+0x6a>
 800b1fa:	e00d      	b.n	800b218 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b268 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1fe:	60bb      	str	r3, [r7, #8]
        break;
 800b200:	e015      	b.n	800b22e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b202:	f7fe ff9f 	bl	800a144 <LL_RCC_HSE_IsEnabledDiv2>
 800b206:	4603      	mov	r3, r0
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d102      	bne.n	800b212 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b20c:	4b16      	ldr	r3, [pc, #88]	@ (800b268 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b20e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b210:	e00d      	b.n	800b22e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b212:	4b16      	ldr	r3, [pc, #88]	@ (800b26c <HAL_RCC_GetSysClockFreq+0xd4>)
 800b214:	60bb      	str	r3, [r7, #8]
        break;
 800b216:	e00a      	b.n	800b22e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b218:	f7ff f967 	bl	800a4ea <LL_RCC_MSI_GetRange>
 800b21c:	4603      	mov	r3, r0
 800b21e:	091b      	lsrs	r3, r3, #4
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	4a0f      	ldr	r2, [pc, #60]	@ (800b264 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b22a:	60bb      	str	r3, [r7, #8]
        break;
 800b22c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b22e:	f7ff fa71 	bl	800a714 <LL_RCC_PLL_GetN>
 800b232:	4602      	mov	r2, r0
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	fb03 f402 	mul.w	r4, r3, r2
 800b23a:	f7ff fa84 	bl	800a746 <LL_RCC_PLL_GetDivider>
 800b23e:	4603      	mov	r3, r0
 800b240:	091b      	lsrs	r3, r3, #4
 800b242:	3301      	adds	r3, #1
 800b244:	fbb4 f4f3 	udiv	r4, r4, r3
 800b248:	f7ff fa71 	bl	800a72e <LL_RCC_PLL_GetR>
 800b24c:	4603      	mov	r3, r0
 800b24e:	0f5b      	lsrs	r3, r3, #29
 800b250:	3301      	adds	r3, #1
 800b252:	fbb4 f3f3 	udiv	r3, r4, r3
 800b256:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b258:	68fb      	ldr	r3, [r7, #12]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd90      	pop	{r4, r7, pc}
 800b262:	bf00      	nop
 800b264:	08014ae8 	.word	0x08014ae8
 800b268:	00f42400 	.word	0x00f42400
 800b26c:	01e84800 	.word	0x01e84800

0800b270 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b270:	b598      	push	{r3, r4, r7, lr}
 800b272:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b274:	f7ff ff90 	bl	800b198 <HAL_RCC_GetSysClockFreq>
 800b278:	4604      	mov	r4, r0
 800b27a:	f7ff f9e9 	bl	800a650 <LL_RCC_GetAHBPrescaler>
 800b27e:	4603      	mov	r3, r0
 800b280:	091b      	lsrs	r3, r3, #4
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	4a03      	ldr	r2, [pc, #12]	@ (800b294 <HAL_RCC_GetHCLKFreq+0x24>)
 800b288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b290:	4618      	mov	r0, r3
 800b292:	bd98      	pop	{r3, r4, r7, pc}
 800b294:	08014a88 	.word	0x08014a88

0800b298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b298:	b598      	push	{r3, r4, r7, lr}
 800b29a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b29c:	f7ff ffe8 	bl	800b270 <HAL_RCC_GetHCLKFreq>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	f7ff f9ef 	bl	800a684 <LL_RCC_GetAPB1Prescaler>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	0a1b      	lsrs	r3, r3, #8
 800b2aa:	f003 0307 	and.w	r3, r3, #7
 800b2ae:	4a04      	ldr	r2, [pc, #16]	@ (800b2c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b4:	f003 031f 	and.w	r3, r3, #31
 800b2b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	bd98      	pop	{r3, r4, r7, pc}
 800b2c0:	08014ac8 	.word	0x08014ac8

0800b2c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2c4:	b598      	push	{r3, r4, r7, lr}
 800b2c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b2c8:	f7ff ffd2 	bl	800b270 <HAL_RCC_GetHCLKFreq>
 800b2cc:	4604      	mov	r4, r0
 800b2ce:	f7ff f9e5 	bl	800a69c <LL_RCC_GetAPB2Prescaler>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	0adb      	lsrs	r3, r3, #11
 800b2d6:	f003 0307 	and.w	r3, r3, #7
 800b2da:	4a04      	ldr	r2, [pc, #16]	@ (800b2ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2e0:	f003 031f 	and.w	r3, r3, #31
 800b2e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	bd98      	pop	{r3, r4, r7, pc}
 800b2ec:	08014ac8 	.word	0x08014ac8

0800b2f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2bb0      	cmp	r3, #176	@ 0xb0
 800b2fc:	d903      	bls.n	800b306 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b2fe:	4b15      	ldr	r3, [pc, #84]	@ (800b354 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e007      	b.n	800b316 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	091b      	lsrs	r3, r3, #4
 800b30a:	f003 030f 	and.w	r3, r3, #15
 800b30e:	4a11      	ldr	r2, [pc, #68]	@ (800b354 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b314:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b316:	f7ff f9a7 	bl	800a668 <LL_RCC_GetAHB4Prescaler>
 800b31a:	4603      	mov	r3, r0
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	f003 030f 	and.w	r3, r3, #15
 800b322:	4a0d      	ldr	r2, [pc, #52]	@ (800b358 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b328:	68fa      	ldr	r2, [r7, #12]
 800b32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4a0a      	ldr	r2, [pc, #40]	@ (800b35c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b334:	fba2 2303 	umull	r2, r3, r2, r3
 800b338:	0c9c      	lsrs	r4, r3, #18
 800b33a:	f7fe fee5 	bl	800a108 <HAL_PWREx_GetVoltageRange>
 800b33e:	4603      	mov	r3, r0
 800b340:	4619      	mov	r1, r3
 800b342:	4620      	mov	r0, r4
 800b344:	f000 f80c 	bl	800b360 <RCC_SetFlashLatency>
 800b348:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd90      	pop	{r4, r7, pc}
 800b352:	bf00      	nop
 800b354:	08014ae8 	.word	0x08014ae8
 800b358:	08014a88 	.word	0x08014a88
 800b35c:	431bde83 	.word	0x431bde83

0800b360 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b093      	sub	sp, #76	@ 0x4c
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b36a:	4b37      	ldr	r3, [pc, #220]	@ (800b448 <RCC_SetFlashLatency+0xe8>)
 800b36c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b372:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b376:	4a35      	ldr	r2, [pc, #212]	@ (800b44c <RCC_SetFlashLatency+0xec>)
 800b378:	f107 031c 	add.w	r3, r7, #28
 800b37c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b37e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b382:	4b33      	ldr	r3, [pc, #204]	@ (800b450 <RCC_SetFlashLatency+0xf0>)
 800b384:	f107 040c 	add.w	r4, r7, #12
 800b388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b38a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b38e:	2300      	movs	r3, #0
 800b390:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b398:	d11a      	bne.n	800b3d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b39a:	2300      	movs	r3, #0
 800b39c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b39e:	e013      	b.n	800b3c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	3348      	adds	r3, #72	@ 0x48
 800b3a6:	443b      	add	r3, r7
 800b3a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d807      	bhi.n	800b3c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	3348      	adds	r3, #72	@ 0x48
 800b3b8:	443b      	add	r3, r7
 800b3ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3be:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3c0:	e020      	b.n	800b404 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d9e8      	bls.n	800b3a0 <RCC_SetFlashLatency+0x40>
 800b3ce:	e019      	b.n	800b404 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3d4:	e013      	b.n	800b3fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	3348      	adds	r3, #72	@ 0x48
 800b3dc:	443b      	add	r3, r7
 800b3de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d807      	bhi.n	800b3f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	3348      	adds	r3, #72	@ 0x48
 800b3ee:	443b      	add	r3, r7
 800b3f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3f4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3f6:	e005      	b.n	800b404 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b400:	2b02      	cmp	r3, #2
 800b402:	d9e8      	bls.n	800b3d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b404:	4b13      	ldr	r3, [pc, #76]	@ (800b454 <RCC_SetFlashLatency+0xf4>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f023 0207 	bic.w	r2, r3, #7
 800b40c:	4911      	ldr	r1, [pc, #68]	@ (800b454 <RCC_SetFlashLatency+0xf4>)
 800b40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b410:	4313      	orrs	r3, r2
 800b412:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b414:	f7f9 fce8 	bl	8004de8 <HAL_GetTick>
 800b418:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b41a:	e008      	b.n	800b42e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b41c:	f7f9 fce4 	bl	8004de8 <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b02      	cmp	r3, #2
 800b428:	d901      	bls.n	800b42e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e007      	b.n	800b43e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b42e:	4b09      	ldr	r3, [pc, #36]	@ (800b454 <RCC_SetFlashLatency+0xf4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b438:	429a      	cmp	r2, r3
 800b43a:	d1ef      	bne.n	800b41c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b43c:	2300      	movs	r3, #0
}
 800b43e:	4618      	mov	r0, r3
 800b440:	374c      	adds	r7, #76	@ 0x4c
 800b442:	46bd      	mov	sp, r7
 800b444:	bd90      	pop	{r4, r7, pc}
 800b446:	bf00      	nop
 800b448:	080149cc 	.word	0x080149cc
 800b44c:	080149dc 	.word	0x080149dc
 800b450:	080149e8 	.word	0x080149e8
 800b454:	58004000 	.word	0x58004000

0800b458 <LL_RCC_LSE_IsEnabled>:
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b45c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d101      	bne.n	800b470 <LL_RCC_LSE_IsEnabled+0x18>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <LL_RCC_LSE_IsEnabled+0x1a>
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <LL_RCC_LSE_IsReady>:
{
 800b47c:	b480      	push	{r7}
 800b47e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b02      	cmp	r3, #2
 800b48e:	d101      	bne.n	800b494 <LL_RCC_LSE_IsReady+0x18>
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <LL_RCC_LSE_IsReady+0x1a>
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <LL_RCC_SetRFWKPClockSource>:
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b4a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b4b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b4b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <LL_RCC_SetSMPSClockSource>:
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b4d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4da:	f023 0203 	bic.w	r2, r3, #3
 800b4de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <LL_RCC_SetSMPSPrescaler>:
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b4fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b502:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <LL_RCC_SetUSARTClockSource>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b52c:	f023 0203 	bic.w	r2, r3, #3
 800b530:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4313      	orrs	r3, r2
 800b538:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b53c:	bf00      	nop
 800b53e:	370c      	adds	r7, #12
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <LL_RCC_SetLPUARTClockSource>:
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b558:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b55c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4313      	orrs	r3, r2
 800b564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <LL_RCC_SetI2CClockSource>:
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b580:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	091b      	lsrs	r3, r3, #4
 800b588:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b58c:	43db      	mvns	r3, r3
 800b58e:	401a      	ands	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b59c:	4313      	orrs	r3, r2
 800b59e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5a2:	bf00      	nop
 800b5a4:	370c      	adds	r7, #12
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <LL_RCC_SetLPTIMClockSource>:
{
 800b5ae:	b480      	push	{r7}
 800b5b0:	b083      	sub	sp, #12
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	0c1b      	lsrs	r3, r3, #16
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	401a      	ands	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	041b      	lsls	r3, r3, #16
 800b5cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <LL_RCC_SetSAIClockSource>:
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b5ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b5f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b602:	bf00      	nop
 800b604:	370c      	adds	r7, #12
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <LL_RCC_SetRNGClockSource>:
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b61e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4313      	orrs	r3, r2
 800b62a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <LL_RCC_SetCLK48ClockSource>:
{
 800b63a:	b480      	push	{r7}
 800b63c:	b083      	sub	sp, #12
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b64a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b64e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4313      	orrs	r3, r2
 800b656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <LL_RCC_SetUSBClockSource>:
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff ffe3 	bl	800b63a <LL_RCC_SetCLK48ClockSource>
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <LL_RCC_SetADCClockSource>:
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b68c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b690:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4313      	orrs	r3, r2
 800b698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <LL_RCC_SetRTCClockSource>:
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b6b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b6c8:	bf00      	nop
 800b6ca:	370c      	adds	r7, #12
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <LL_RCC_GetRTCClockSource>:
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b6d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LL_RCC_ForceBackupDomainReset>:
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b6f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b702:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b706:	bf00      	nop
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b710:	b480      	push	{r7}
 800b712:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b71c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b728:	bf00      	nop
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <LL_RCC_PLLSAI1_Enable>:
{
 800b732:	b480      	push	{r7}
 800b734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b740:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b744:	6013      	str	r3, [r2, #0]
}
 800b746:	bf00      	nop
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <LL_RCC_PLLSAI1_Disable>:
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b75e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b762:	6013      	str	r3, [r2, #0]
}
 800b764:	bf00      	nop
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <LL_RCC_PLLSAI1_IsReady>:
{
 800b76e:	b480      	push	{r7}
 800b770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b77c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b780:	d101      	bne.n	800b786 <LL_RCC_PLLSAI1_IsReady+0x18>
 800b782:	2301      	movs	r3, #1
 800b784:	e000      	b.n	800b788 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b79a:	2300      	movs	r3, #0
 800b79c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b79e:	2300      	movs	r3, #0
 800b7a0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d034      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7b6:	d021      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b7b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b7bc:	d81b      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7c2:	d01d      	beq.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b7c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7c8:	d815      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00b      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b7ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7d2:	d110      	bne.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b7d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7e2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7e4:	e00d      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f947 	bl	800ba7e <RCCEx_PLLSAI1_ConfigNP>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7f4:	e005      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	77fb      	strb	r3, [r7, #31]
        break;
 800b7fa:	e002      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b7fc:	bf00      	nop
 800b7fe:	e000      	b.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b802:	7ffb      	ldrb	r3, [r7, #31]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d105      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fee8 	bl	800b5e2 <LL_RCC_SetSAIClockSource>
 800b812:	e001      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b814:	7ffb      	ldrb	r3, [r7, #31]
 800b816:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b820:	2b00      	cmp	r3, #0
 800b822:	d046      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b824:	f7ff ff56 	bl	800b6d4 <LL_RCC_GetRTCClockSource>
 800b828:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	429a      	cmp	r2, r3
 800b832:	d03c      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b834:	f7fe fc58 	bl	800a0e8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d105      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b842:	4618      	mov	r0, r3
 800b844:	f7ff ff30 	bl	800b6a8 <LL_RCC_SetRTCClockSource>
 800b848:	e02e      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b84a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b84e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b852:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b854:	f7ff ff4b 	bl	800b6ee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b858:	f7ff ff5a 	bl	800b710 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b866:	4313      	orrs	r3, r2
 800b868:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b86a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b874:	f7ff fdf0 	bl	800b458 <LL_RCC_LSE_IsEnabled>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d114      	bne.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b87e:	f7f9 fab3 	bl	8004de8 <HAL_GetTick>
 800b882:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b884:	e00b      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b886:	f7f9 faaf 	bl	8004de8 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b894:	4293      	cmp	r3, r2
 800b896:	d902      	bls.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b898:	2303      	movs	r3, #3
 800b89a:	77fb      	strb	r3, [r7, #31]
              break;
 800b89c:	e004      	b.n	800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b89e:	f7ff fded 	bl	800b47c <LL_RCC_LSE_IsReady>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d1ee      	bne.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b8a8:	7ffb      	ldrb	r3, [r7, #31]
 800b8aa:	77bb      	strb	r3, [r7, #30]
 800b8ac:	e001      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ae:	7ffb      	ldrb	r3, [r7, #31]
 800b8b0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0301 	and.w	r3, r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fe2a 	bl	800b51c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0302 	and.w	r3, r3, #2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d004      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fe35 	bl	800b548 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f003 0310 	and.w	r3, r3, #16
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d004      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7ff fe5d 	bl	800b5ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff fe52 	bl	800b5ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff fe2a 	bl	800b574 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0308 	and.w	r3, r3, #8
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d004      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fe1f 	bl	800b574 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d022      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fe8d 	bl	800b666 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b954:	d107      	bne.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b964:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b96a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b96e:	d10b      	bne.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f000 f8dd 	bl	800bb34 <RCCEx_PLLSAI1_ConfigNQ>
 800b97a:	4603      	mov	r3, r0
 800b97c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b97e:	7ffb      	ldrb	r3, [r7, #31]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b984:	7ffb      	ldrb	r3, [r7, #31]
 800b986:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b990:	2b00      	cmp	r3, #0
 800b992:	d02b      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b99c:	d008      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9a6:	d003      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d105      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff fe2a 	bl	800b60e <LL_RCC_SetRNGClockSource>
 800b9ba:	e00a      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	f7ff fe21 	bl	800b60e <LL_RCC_SetRNGClockSource>
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff fe34 	bl	800b63a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b9da:	d107      	bne.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b9dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d022      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fe3d 	bl	800b67c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba0a:	d107      	bne.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba1a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba24:	d10b      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f8dd 	bl	800bbea <RCCEx_PLLSAI1_ConfigNR>
 800ba30:	4603      	mov	r3, r0
 800ba32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ba34:	7ffb      	ldrb	r3, [r7, #31]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ba3a:	7ffb      	ldrb	r3, [r7, #31]
 800ba3c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7ff fd26 	bl	800b4a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d009      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fd45 	bl	800b4f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff fd2c 	bl	800b4cc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ba74:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3720      	adds	r7, #32
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba8a:	f7ff fe61 	bl	800b750 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba8e:	f7f9 f9ab 	bl	8004de8 <HAL_GetTick>
 800ba92:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba94:	e009      	b.n	800baaa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba96:	f7f9 f9a7 	bl	8004de8 <HAL_GetTick>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d902      	bls.n	800baaa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	73fb      	strb	r3, [r7, #15]
      break;
 800baa8:	e004      	b.n	800bab4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800baaa:	f7ff fe60 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1f0      	bne.n	800ba96 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d137      	bne.n	800bb2a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800baba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bace:	4313      	orrs	r3, r2
 800bad0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800bad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bae4:	4313      	orrs	r3, r2
 800bae6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bae8:	f7ff fe23 	bl	800b732 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baec:	f7f9 f97c 	bl	8004de8 <HAL_GetTick>
 800baf0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800baf2:	e009      	b.n	800bb08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baf4:	f7f9 f978 	bl	8004de8 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d902      	bls.n	800bb08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	73fb      	strb	r3, [r7, #15]
        break;
 800bb06:	e004      	b.n	800bb12 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb08:	f7ff fe31 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d1f0      	bne.n	800baf4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d108      	bne.n	800bb2a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb1c:	691a      	ldr	r2, [r3, #16]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb26:	4313      	orrs	r3, r2
 800bb28:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb40:	f7ff fe06 	bl	800b750 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb44:	f7f9 f950 	bl	8004de8 <HAL_GetTick>
 800bb48:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb4a:	e009      	b.n	800bb60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb4c:	f7f9 f94c 	bl	8004de8 <HAL_GetTick>
 800bb50:	4602      	mov	r2, r0
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d902      	bls.n	800bb60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e004      	b.n	800bb6a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb60:	f7ff fe05 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1f0      	bne.n	800bb4c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d137      	bne.n	800bbe0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb84:	4313      	orrs	r3, r2
 800bb86:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bb88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bb9e:	f7ff fdc8 	bl	800b732 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bba2:	f7f9 f921 	bl	8004de8 <HAL_GetTick>
 800bba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bba8:	e009      	b.n	800bbbe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbaa:	f7f9 f91d 	bl	8004de8 <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d902      	bls.n	800bbbe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	73fb      	strb	r3, [r7, #15]
        break;
 800bbbc:	e004      	b.n	800bbc8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbbe:	f7ff fdd6 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d1f0      	bne.n	800bbaa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d108      	bne.n	800bbe0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bbce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbd2:	691a      	ldr	r2, [r3, #16]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bbf6:	f7ff fdab 	bl	800b750 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbfa:	f7f9 f8f5 	bl	8004de8 <HAL_GetTick>
 800bbfe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc00:	e009      	b.n	800bc16 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc02:	f7f9 f8f1 	bl	8004de8 <HAL_GetTick>
 800bc06:	4602      	mov	r2, r0
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	1ad3      	subs	r3, r2, r3
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d902      	bls.n	800bc16 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	73fb      	strb	r3, [r7, #15]
      break;
 800bc14:	e004      	b.n	800bc20 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bc16:	f7ff fdaa 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d1f0      	bne.n	800bc02 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bc20:	7bfb      	ldrb	r3, [r7, #15]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d137      	bne.n	800bc96 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bc26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	021b      	lsls	r3, r3, #8
 800bc36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bc3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc50:	4313      	orrs	r3, r2
 800bc52:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bc54:	f7ff fd6d 	bl	800b732 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc58:	f7f9 f8c6 	bl	8004de8 <HAL_GetTick>
 800bc5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc5e:	e009      	b.n	800bc74 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc60:	f7f9 f8c2 	bl	8004de8 <HAL_GetTick>
 800bc64:	4602      	mov	r2, r0
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	1ad3      	subs	r3, r2, r3
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d902      	bls.n	800bc74 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	73fb      	strb	r3, [r7, #15]
        break;
 800bc72:	e004      	b.n	800bc7e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc74:	f7ff fd7b 	bl	800b76e <LL_RCC_PLLSAI1_IsReady>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d1f0      	bne.n	800bc60 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bc7e:	7bfb      	ldrb	r3, [r7, #15]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d108      	bne.n	800bc96 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bc84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc88:	691a      	ldr	r2, [r3, #16]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc92:	4313      	orrs	r3, r2
 800bc94:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d101      	bne.n	800bcb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e049      	b.n	800bd46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7f8 fc6e 	bl	80045a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f000 fa7c 	bl	800c1dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2201      	movs	r2, #1
 800bd28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d001      	beq.n	800bd68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e036      	b.n	800bdd6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2202      	movs	r2, #2
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f042 0201 	orr.w	r2, r2, #1
 800bd7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a17      	ldr	r2, [pc, #92]	@ (800bde4 <HAL_TIM_Base_Start_IT+0x94>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d004      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x44>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd92:	d115      	bne.n	800bdc0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689a      	ldr	r2, [r3, #8]
 800bd9a:	4b13      	ldr	r3, [pc, #76]	@ (800bde8 <HAL_TIM_Base_Start_IT+0x98>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b06      	cmp	r3, #6
 800bda4:	d015      	beq.n	800bdd2 <HAL_TIM_Base_Start_IT+0x82>
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdac:	d011      	beq.n	800bdd2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f042 0201 	orr.w	r2, r2, #1
 800bdbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdbe:	e008      	b.n	800bdd2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f042 0201 	orr.w	r2, r2, #1
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	e000      	b.n	800bdd4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40012c00 	.word	0x40012c00
 800bde8:	00010007 	.word	0x00010007

0800bdec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f003 0302 	and.w	r3, r3, #2
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d020      	beq.n	800be50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f003 0302 	and.w	r3, r3, #2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01b      	beq.n	800be50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f06f 0202 	mvn.w	r2, #2
 800be20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2201      	movs	r2, #1
 800be26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f003 0303 	and.w	r3, r3, #3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d003      	beq.n	800be3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9b2 	bl	800c1a0 <HAL_TIM_IC_CaptureCallback>
 800be3c:	e005      	b.n	800be4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f9a4 	bl	800c18c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 f9b5 	bl	800c1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f003 0304 	and.w	r3, r3, #4
 800be56:	2b00      	cmp	r3, #0
 800be58:	d020      	beq.n	800be9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01b      	beq.n	800be9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0204 	mvn.w	r2, #4
 800be6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2202      	movs	r2, #2
 800be72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f98c 	bl	800c1a0 <HAL_TIM_IC_CaptureCallback>
 800be88:	e005      	b.n	800be96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f97e 	bl	800c18c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f98f 	bl	800c1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f003 0308 	and.w	r3, r3, #8
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d020      	beq.n	800bee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d01b      	beq.n	800bee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f06f 0208 	mvn.w	r2, #8
 800beb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2204      	movs	r2, #4
 800bebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	69db      	ldr	r3, [r3, #28]
 800bec6:	f003 0303 	and.w	r3, r3, #3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d003      	beq.n	800bed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f966 	bl	800c1a0 <HAL_TIM_IC_CaptureCallback>
 800bed4:	e005      	b.n	800bee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f958 	bl	800c18c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f969 	bl	800c1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2200      	movs	r2, #0
 800bee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d020      	beq.n	800bf34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f003 0310 	and.w	r3, r3, #16
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d01b      	beq.n	800bf34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f06f 0210 	mvn.w	r2, #16
 800bf04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2208      	movs	r2, #8
 800bf0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	69db      	ldr	r3, [r3, #28]
 800bf12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f940 	bl	800c1a0 <HAL_TIM_IC_CaptureCallback>
 800bf20:	e005      	b.n	800bf2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f932 	bl	800c18c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f943 	bl	800c1b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00c      	beq.n	800bf58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f003 0301 	and.w	r3, r3, #1
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f06f 0201 	mvn.w	r2, #1
 800bf50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7f7 ff46 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d104      	bne.n	800bf6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00c      	beq.n	800bf86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d007      	beq.n	800bf86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bf7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 faa1 	bl	800c4c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00c      	beq.n	800bfaa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d007      	beq.n	800bfaa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fa99 	bl	800c4dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00c      	beq.n	800bfce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d007      	beq.n	800bfce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bfc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f8fd 	bl	800c1c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	f003 0320 	and.w	r3, r3, #32
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00c      	beq.n	800bff2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f003 0320 	and.w	r3, r3, #32
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d007      	beq.n	800bff2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f06f 0220 	mvn.w	r2, #32
 800bfea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 fa61 	bl	800c4b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bff2:	bf00      	nop
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d101      	bne.n	800c016 <HAL_TIM_ConfigClockSource+0x1c>
 800c012:	2302      	movs	r3, #2
 800c014:	e0b6      	b.n	800c184 <HAL_TIM_ConfigClockSource+0x18a>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2202      	movs	r2, #2
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c034:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c038:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c040:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c052:	d03e      	beq.n	800c0d2 <HAL_TIM_ConfigClockSource+0xd8>
 800c054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c058:	f200 8087 	bhi.w	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c060:	f000 8086 	beq.w	800c170 <HAL_TIM_ConfigClockSource+0x176>
 800c064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c068:	d87f      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c06a:	2b70      	cmp	r3, #112	@ 0x70
 800c06c:	d01a      	beq.n	800c0a4 <HAL_TIM_ConfigClockSource+0xaa>
 800c06e:	2b70      	cmp	r3, #112	@ 0x70
 800c070:	d87b      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c072:	2b60      	cmp	r3, #96	@ 0x60
 800c074:	d050      	beq.n	800c118 <HAL_TIM_ConfigClockSource+0x11e>
 800c076:	2b60      	cmp	r3, #96	@ 0x60
 800c078:	d877      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c07a:	2b50      	cmp	r3, #80	@ 0x50
 800c07c:	d03c      	beq.n	800c0f8 <HAL_TIM_ConfigClockSource+0xfe>
 800c07e:	2b50      	cmp	r3, #80	@ 0x50
 800c080:	d873      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c082:	2b40      	cmp	r3, #64	@ 0x40
 800c084:	d058      	beq.n	800c138 <HAL_TIM_ConfigClockSource+0x13e>
 800c086:	2b40      	cmp	r3, #64	@ 0x40
 800c088:	d86f      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c08a:	2b30      	cmp	r3, #48	@ 0x30
 800c08c:	d064      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x15e>
 800c08e:	2b30      	cmp	r3, #48	@ 0x30
 800c090:	d86b      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c092:	2b20      	cmp	r3, #32
 800c094:	d060      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x15e>
 800c096:	2b20      	cmp	r3, #32
 800c098:	d867      	bhi.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d05c      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x15e>
 800c09e:	2b10      	cmp	r3, #16
 800c0a0:	d05a      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x15e>
 800c0a2:	e062      	b.n	800c16a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0b4:	f000 f97e 	bl	800c3b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c0c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	609a      	str	r2, [r3, #8]
      break;
 800c0d0:	e04f      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0e2:	f000 f967 	bl	800c3b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689a      	ldr	r2, [r3, #8]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0f4:	609a      	str	r2, [r3, #8]
      break;
 800c0f6:	e03c      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c104:	461a      	mov	r2, r3
 800c106:	f000 f8d9 	bl	800c2bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2150      	movs	r1, #80	@ 0x50
 800c110:	4618      	mov	r0, r3
 800c112:	f000 f932 	bl	800c37a <TIM_ITRx_SetConfig>
      break;
 800c116:	e02c      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c124:	461a      	mov	r2, r3
 800c126:	f000 f8f8 	bl	800c31a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2160      	movs	r1, #96	@ 0x60
 800c130:	4618      	mov	r0, r3
 800c132:	f000 f922 	bl	800c37a <TIM_ITRx_SetConfig>
      break;
 800c136:	e01c      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c144:	461a      	mov	r2, r3
 800c146:	f000 f8b9 	bl	800c2bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2140      	movs	r1, #64	@ 0x40
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f912 	bl	800c37a <TIM_ITRx_SetConfig>
      break;
 800c156:	e00c      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	4610      	mov	r0, r2
 800c164:	f000 f909 	bl	800c37a <TIM_ITRx_SetConfig>
      break;
 800c168:	e003      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	73fb      	strb	r3, [r7, #15]
      break;
 800c16e:	e000      	b.n	800c172 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c170:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1bc:	bf00      	nop
 800c1be:	370c      	adds	r7, #12
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1d0:	bf00      	nop
 800c1d2:	370c      	adds	r7, #12
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr

0800c1dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a30      	ldr	r2, [pc, #192]	@ (800c2b0 <TIM_Base_SetConfig+0xd4>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <TIM_Base_SetConfig+0x20>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1fa:	d108      	bne.n	800c20e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a27      	ldr	r2, [pc, #156]	@ (800c2b0 <TIM_Base_SetConfig+0xd4>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d00b      	beq.n	800c22e <TIM_Base_SetConfig+0x52>
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c21c:	d007      	beq.n	800c22e <TIM_Base_SetConfig+0x52>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a24      	ldr	r2, [pc, #144]	@ (800c2b4 <TIM_Base_SetConfig+0xd8>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d003      	beq.n	800c22e <TIM_Base_SetConfig+0x52>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a23      	ldr	r2, [pc, #140]	@ (800c2b8 <TIM_Base_SetConfig+0xdc>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d108      	bne.n	800c240 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68fa      	ldr	r2, [r7, #12]
 800c252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a12      	ldr	r2, [pc, #72]	@ (800c2b0 <TIM_Base_SetConfig+0xd4>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d007      	beq.n	800c27c <TIM_Base_SetConfig+0xa0>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a11      	ldr	r2, [pc, #68]	@ (800c2b4 <TIM_Base_SetConfig+0xd8>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <TIM_Base_SetConfig+0xa0>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a10      	ldr	r2, [pc, #64]	@ (800c2b8 <TIM_Base_SetConfig+0xdc>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d103      	bne.n	800c284 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	691a      	ldr	r2, [r3, #16]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b01      	cmp	r3, #1
 800c294:	d105      	bne.n	800c2a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	f023 0201 	bic.w	r2, r3, #1
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	611a      	str	r2, [r3, #16]
  }
}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	40012c00 	.word	0x40012c00
 800c2b4:	40014400 	.word	0x40014400
 800c2b8:	40014800 	.word	0x40014800

0800c2bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
 800c2cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	f023 0201 	bic.w	r2, r3, #1
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	699b      	ldr	r3, [r3, #24]
 800c2de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c2e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	f023 030a 	bic.w	r3, r3, #10
 800c2f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	697a      	ldr	r2, [r7, #20]
 800c30c:	621a      	str	r2, [r3, #32]
}
 800c30e:	bf00      	nop
 800c310:	371c      	adds	r7, #28
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c31a:	b480      	push	{r7}
 800c31c:	b087      	sub	sp, #28
 800c31e:	af00      	add	r7, sp, #0
 800c320:	60f8      	str	r0, [r7, #12]
 800c322:	60b9      	str	r1, [r7, #8]
 800c324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6a1b      	ldr	r3, [r3, #32]
 800c32a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6a1b      	ldr	r3, [r3, #32]
 800c330:	f023 0210 	bic.w	r2, r3, #16
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	031b      	lsls	r3, r3, #12
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	011b      	lsls	r3, r3, #4
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	4313      	orrs	r3, r2
 800c360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	697a      	ldr	r2, [r7, #20]
 800c36c:	621a      	str	r2, [r3, #32]
}
 800c36e:	bf00      	nop
 800c370:	371c      	adds	r7, #28
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b085      	sub	sp, #20
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	f043 0307 	orr.w	r3, r3, #7
 800c3a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	609a      	str	r2, [r3, #8]
}
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
 800c3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	021a      	lsls	r2, r3, #8
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	609a      	str	r2, [r3, #8]
}
 800c3e8:	bf00      	nop
 800c3ea:	371c      	adds	r7, #28
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c404:	2b01      	cmp	r3, #1
 800c406:	d101      	bne.n	800c40c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c408:	2302      	movs	r3, #2
 800c40a:	e04a      	b.n	800c4a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a1f      	ldr	r2, [pc, #124]	@ (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d108      	bne.n	800c448 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c43c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4313      	orrs	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c44e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a12      	ldr	r2, [pc, #72]	@ (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d004      	beq.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c474:	d10c      	bne.n	800c490 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c47c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	4313      	orrs	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	40012c00 	.word	0x40012c00

0800c4b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <LL_RCC_GetUSARTClockSource>:
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c4f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4013      	ands	r3, r2
}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <LL_RCC_GetLPUARTClockSource>:
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c51c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4013      	ands	r3, r2
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d101      	bne.n	800c542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c53e:	2301      	movs	r3, #1
 800c540:	e042      	b.n	800c5c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f83b 	bl	800c5d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2224      	movs	r2, #36	@ 0x24
 800c55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f022 0201 	bic.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c576:	2b00      	cmp	r3, #0
 800c578:	d002      	beq.n	800c580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fae8 	bl	800cb50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f8bd 	bl	800c700 <UART_SetConfig>
 800c586:	4603      	mov	r3, r0
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d101      	bne.n	800c590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	e01b      	b.n	800c5c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c59e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	689a      	ldr	r2, [r3, #8]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c5ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f042 0201 	orr.w	r2, r2, #1
 800c5be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fb67 	bl	800cc94 <UART_CheckIdleState>
 800c5c6:	4603      	mov	r3, r0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	@ 0x28
 800c5e8:	af02      	add	r7, sp, #8
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5fa:	2b20      	cmp	r3, #32
 800c5fc:	d17b      	bne.n	800c6f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <HAL_UART_Transmit+0x26>
 800c604:	88fb      	ldrh	r3, [r7, #6]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d101      	bne.n	800c60e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e074      	b.n	800c6f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2221      	movs	r2, #33	@ 0x21
 800c61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c61e:	f7f8 fbe3 	bl	8004de8 <HAL_GetTick>
 800c622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	88fa      	ldrh	r2, [r7, #6]
 800c628:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	88fa      	ldrh	r2, [r7, #6]
 800c630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c63c:	d108      	bne.n	800c650 <HAL_UART_Transmit+0x6c>
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d104      	bne.n	800c650 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c646:	2300      	movs	r3, #0
 800c648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	61bb      	str	r3, [r7, #24]
 800c64e:	e003      	b.n	800c658 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c654:	2300      	movs	r3, #0
 800c656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c658:	e030      	b.n	800c6bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2200      	movs	r2, #0
 800c662:	2180      	movs	r1, #128	@ 0x80
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f000 fbbf 	bl	800cde8 <UART_WaitOnFlagUntilTimeout>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d005      	beq.n	800c67c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2220      	movs	r2, #32
 800c674:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	e03d      	b.n	800c6f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10b      	bne.n	800c69a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c690:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	3302      	adds	r3, #2
 800c696:	61bb      	str	r3, [r7, #24]
 800c698:	e007      	b.n	800c6aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	781a      	ldrb	r2, [r3, #0]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1c8      	bne.n	800c65a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2140      	movs	r1, #64	@ 0x40
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	f000 fb88 	bl	800cde8 <UART_WaitOnFlagUntilTimeout>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d005      	beq.n	800c6ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e006      	b.n	800c6f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2220      	movs	r2, #32
 800c6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e000      	b.n	800c6f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c6f6:	2302      	movs	r3, #2
  }
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3720      	adds	r7, #32
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c704:	b08c      	sub	sp, #48	@ 0x30
 800c706:	af00      	add	r7, sp, #0
 800c708:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	689a      	ldr	r2, [r3, #8]
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	431a      	orrs	r2, r3
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	431a      	orrs	r2, r3
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	69db      	ldr	r3, [r3, #28]
 800c724:	4313      	orrs	r3, r2
 800c726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	4baf      	ldr	r3, [pc, #700]	@ (800c9ec <UART_SetConfig+0x2ec>)
 800c730:	4013      	ands	r3, r2
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	6812      	ldr	r2, [r2, #0]
 800c736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c738:	430b      	orrs	r3, r1
 800c73a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	68da      	ldr	r2, [r3, #12]
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4aa4      	ldr	r2, [pc, #656]	@ (800c9f0 <UART_SetConfig+0x2f0>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d004      	beq.n	800c76c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	6a1b      	ldr	r3, [r3, #32]
 800c766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c768:	4313      	orrs	r3, r2
 800c76a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c776:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	6812      	ldr	r2, [r2, #0]
 800c77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c780:	430b      	orrs	r3, r1
 800c782:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c78a:	f023 010f 	bic.w	r1, r3, #15
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	430a      	orrs	r2, r1
 800c798:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a95      	ldr	r2, [pc, #596]	@ (800c9f4 <UART_SetConfig+0x2f4>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d125      	bne.n	800c7f0 <UART_SetConfig+0xf0>
 800c7a4:	2003      	movs	r0, #3
 800c7a6:	f7ff fea3 	bl	800c4f0 <LL_RCC_GetUSARTClockSource>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d81b      	bhi.n	800c7e8 <UART_SetConfig+0xe8>
 800c7b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b8 <UART_SetConfig+0xb8>)
 800c7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b6:	bf00      	nop
 800c7b8:	0800c7c9 	.word	0x0800c7c9
 800c7bc:	0800c7d9 	.word	0x0800c7d9
 800c7c0:	0800c7d1 	.word	0x0800c7d1
 800c7c4:	0800c7e1 	.word	0x0800c7e1
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ce:	e042      	b.n	800c856 <UART_SetConfig+0x156>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7d6:	e03e      	b.n	800c856 <UART_SetConfig+0x156>
 800c7d8:	2304      	movs	r3, #4
 800c7da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7de:	e03a      	b.n	800c856 <UART_SetConfig+0x156>
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7e6:	e036      	b.n	800c856 <UART_SetConfig+0x156>
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ee:	e032      	b.n	800c856 <UART_SetConfig+0x156>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a7e      	ldr	r2, [pc, #504]	@ (800c9f0 <UART_SetConfig+0x2f0>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d12a      	bne.n	800c850 <UART_SetConfig+0x150>
 800c7fa:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c7fe:	f7ff fe87 	bl	800c510 <LL_RCC_GetLPUARTClockSource>
 800c802:	4603      	mov	r3, r0
 800c804:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c808:	d01a      	beq.n	800c840 <UART_SetConfig+0x140>
 800c80a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c80e:	d81b      	bhi.n	800c848 <UART_SetConfig+0x148>
 800c810:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c814:	d00c      	beq.n	800c830 <UART_SetConfig+0x130>
 800c816:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c81a:	d815      	bhi.n	800c848 <UART_SetConfig+0x148>
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <UART_SetConfig+0x128>
 800c820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c824:	d008      	beq.n	800c838 <UART_SetConfig+0x138>
 800c826:	e00f      	b.n	800c848 <UART_SetConfig+0x148>
 800c828:	2300      	movs	r3, #0
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c82e:	e012      	b.n	800c856 <UART_SetConfig+0x156>
 800c830:	2302      	movs	r3, #2
 800c832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c836:	e00e      	b.n	800c856 <UART_SetConfig+0x156>
 800c838:	2304      	movs	r3, #4
 800c83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c83e:	e00a      	b.n	800c856 <UART_SetConfig+0x156>
 800c840:	2308      	movs	r3, #8
 800c842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c846:	e006      	b.n	800c856 <UART_SetConfig+0x156>
 800c848:	2310      	movs	r3, #16
 800c84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c84e:	e002      	b.n	800c856 <UART_SetConfig+0x156>
 800c850:	2310      	movs	r3, #16
 800c852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a65      	ldr	r2, [pc, #404]	@ (800c9f0 <UART_SetConfig+0x2f0>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	f040 8097 	bne.w	800c990 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c862:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c866:	2b08      	cmp	r3, #8
 800c868:	d823      	bhi.n	800c8b2 <UART_SetConfig+0x1b2>
 800c86a:	a201      	add	r2, pc, #4	@ (adr r2, 800c870 <UART_SetConfig+0x170>)
 800c86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c870:	0800c895 	.word	0x0800c895
 800c874:	0800c8b3 	.word	0x0800c8b3
 800c878:	0800c89d 	.word	0x0800c89d
 800c87c:	0800c8b3 	.word	0x0800c8b3
 800c880:	0800c8a3 	.word	0x0800c8a3
 800c884:	0800c8b3 	.word	0x0800c8b3
 800c888:	0800c8b3 	.word	0x0800c8b3
 800c88c:	0800c8b3 	.word	0x0800c8b3
 800c890:	0800c8ab 	.word	0x0800c8ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c894:	f7fe fd00 	bl	800b298 <HAL_RCC_GetPCLK1Freq>
 800c898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c89a:	e010      	b.n	800c8be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c89c:	4b56      	ldr	r3, [pc, #344]	@ (800c9f8 <UART_SetConfig+0x2f8>)
 800c89e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c8a0:	e00d      	b.n	800c8be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8a2:	f7fe fc79 	bl	800b198 <HAL_RCC_GetSysClockFreq>
 800c8a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c8a8:	e009      	b.n	800c8be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c8b0:	e005      	b.n	800c8be <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c8bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f000 812b 	beq.w	800cb1c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ca:	4a4c      	ldr	r2, [pc, #304]	@ (800c9fc <UART_SetConfig+0x2fc>)
 800c8cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	685a      	ldr	r2, [r3, #4]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	4413      	add	r3, r2
 800c8e4:	69ba      	ldr	r2, [r7, #24]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d305      	bcc.n	800c8f6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8f0:	69ba      	ldr	r2, [r7, #24]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d903      	bls.n	800c8fe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c8fc:	e10e      	b.n	800cb1c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c900:	2200      	movs	r2, #0
 800c902:	60bb      	str	r3, [r7, #8]
 800c904:	60fa      	str	r2, [r7, #12]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	4a3c      	ldr	r2, [pc, #240]	@ (800c9fc <UART_SetConfig+0x2fc>)
 800c90c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c910:	b29b      	uxth	r3, r3
 800c912:	2200      	movs	r2, #0
 800c914:	603b      	str	r3, [r7, #0]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c91c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c920:	f7f4 f91a 	bl	8000b58 <__aeabi_uldivmod>
 800c924:	4602      	mov	r2, r0
 800c926:	460b      	mov	r3, r1
 800c928:	4610      	mov	r0, r2
 800c92a:	4619      	mov	r1, r3
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	f04f 0300 	mov.w	r3, #0
 800c934:	020b      	lsls	r3, r1, #8
 800c936:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c93a:	0202      	lsls	r2, r0, #8
 800c93c:	6979      	ldr	r1, [r7, #20]
 800c93e:	6849      	ldr	r1, [r1, #4]
 800c940:	0849      	lsrs	r1, r1, #1
 800c942:	2000      	movs	r0, #0
 800c944:	460c      	mov	r4, r1
 800c946:	4605      	mov	r5, r0
 800c948:	eb12 0804 	adds.w	r8, r2, r4
 800c94c:	eb43 0905 	adc.w	r9, r3, r5
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	469a      	mov	sl, r3
 800c958:	4693      	mov	fp, r2
 800c95a:	4652      	mov	r2, sl
 800c95c:	465b      	mov	r3, fp
 800c95e:	4640      	mov	r0, r8
 800c960:	4649      	mov	r1, r9
 800c962:	f7f4 f8f9 	bl	8000b58 <__aeabi_uldivmod>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4613      	mov	r3, r2
 800c96c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c974:	d308      	bcc.n	800c988 <UART_SetConfig+0x288>
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c97c:	d204      	bcs.n	800c988 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6a3a      	ldr	r2, [r7, #32]
 800c984:	60da      	str	r2, [r3, #12]
 800c986:	e0c9      	b.n	800cb1c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c98e:	e0c5      	b.n	800cb1c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	69db      	ldr	r3, [r3, #28]
 800c994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c998:	d16d      	bne.n	800ca76 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c99a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	2b07      	cmp	r3, #7
 800c9a2:	d82d      	bhi.n	800ca00 <UART_SetConfig+0x300>
 800c9a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ac <UART_SetConfig+0x2ac>)
 800c9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9aa:	bf00      	nop
 800c9ac:	0800c9cd 	.word	0x0800c9cd
 800c9b0:	0800c9d5 	.word	0x0800c9d5
 800c9b4:	0800ca01 	.word	0x0800ca01
 800c9b8:	0800c9db 	.word	0x0800c9db
 800c9bc:	0800ca01 	.word	0x0800ca01
 800c9c0:	0800ca01 	.word	0x0800ca01
 800c9c4:	0800ca01 	.word	0x0800ca01
 800c9c8:	0800c9e3 	.word	0x0800c9e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9cc:	f7fe fc7a 	bl	800b2c4 <HAL_RCC_GetPCLK2Freq>
 800c9d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9d2:	e01b      	b.n	800ca0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9d4:	4b08      	ldr	r3, [pc, #32]	@ (800c9f8 <UART_SetConfig+0x2f8>)
 800c9d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9d8:	e018      	b.n	800ca0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9da:	f7fe fbdd 	bl	800b198 <HAL_RCC_GetSysClockFreq>
 800c9de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9e0:	e014      	b.n	800ca0c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9e8:	e010      	b.n	800ca0c <UART_SetConfig+0x30c>
 800c9ea:	bf00      	nop
 800c9ec:	cfff69f3 	.word	0xcfff69f3
 800c9f0:	40008000 	.word	0x40008000
 800c9f4:	40013800 	.word	0x40013800
 800c9f8:	00f42400 	.word	0x00f42400
 800c9fc:	08014b3c 	.word	0x08014b3c
      default:
        pclk = 0U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ca0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	f000 8084 	beq.w	800cb1c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca18:	4a4b      	ldr	r2, [pc, #300]	@ (800cb48 <UART_SetConfig+0x448>)
 800ca1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca26:	005a      	lsls	r2, r3, #1
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	085b      	lsrs	r3, r3, #1
 800ca2e:	441a      	add	r2, r3
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca38:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	2b0f      	cmp	r3, #15
 800ca3e:	d916      	bls.n	800ca6e <UART_SetConfig+0x36e>
 800ca40:	6a3b      	ldr	r3, [r7, #32]
 800ca42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca46:	d212      	bcs.n	800ca6e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	f023 030f 	bic.w	r3, r3, #15
 800ca50:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	085b      	lsrs	r3, r3, #1
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	8bfb      	ldrh	r3, [r7, #30]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	8bfa      	ldrh	r2, [r7, #30]
 800ca6a:	60da      	str	r2, [r3, #12]
 800ca6c:	e056      	b.n	800cb1c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca74:	e052      	b.n	800cb1c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	2b07      	cmp	r3, #7
 800ca7e:	d822      	bhi.n	800cac6 <UART_SetConfig+0x3c6>
 800ca80:	a201      	add	r2, pc, #4	@ (adr r2, 800ca88 <UART_SetConfig+0x388>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800caa9 	.word	0x0800caa9
 800ca8c:	0800cab1 	.word	0x0800cab1
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cab7 	.word	0x0800cab7
 800ca98:	0800cac7 	.word	0x0800cac7
 800ca9c:	0800cac7 	.word	0x0800cac7
 800caa0:	0800cac7 	.word	0x0800cac7
 800caa4:	0800cabf 	.word	0x0800cabf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800caa8:	f7fe fc0c 	bl	800b2c4 <HAL_RCC_GetPCLK2Freq>
 800caac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800caae:	e010      	b.n	800cad2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cab0:	4b26      	ldr	r3, [pc, #152]	@ (800cb4c <UART_SetConfig+0x44c>)
 800cab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cab4:	e00d      	b.n	800cad2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cab6:	f7fe fb6f 	bl	800b198 <HAL_RCC_GetSysClockFreq>
 800caba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cabc:	e009      	b.n	800cad2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cabe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cac2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cac4:	e005      	b.n	800cad2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800cac6:	2300      	movs	r3, #0
 800cac8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cad0:	bf00      	nop
    }

    if (pclk != 0U)
 800cad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d021      	beq.n	800cb1c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cadc:	4a1a      	ldr	r2, [pc, #104]	@ (800cb48 <UART_SetConfig+0x448>)
 800cade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae2:	461a      	mov	r2, r3
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae6:	fbb3 f2f2 	udiv	r2, r3, r2
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	085b      	lsrs	r3, r3, #1
 800caf0:	441a      	add	r2, r3
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cafa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	2b0f      	cmp	r3, #15
 800cb00:	d909      	bls.n	800cb16 <UART_SetConfig+0x416>
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb08:	d205      	bcs.n	800cb16 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60da      	str	r2, [r3, #12]
 800cb14:	e002      	b.n	800cb1c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb16:	2301      	movs	r3, #1
 800cb18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2200      	movs	r2, #0
 800cb36:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3730      	adds	r7, #48	@ 0x30
 800cb40:	46bd      	mov	sp, r7
 800cb42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb46:	bf00      	nop
 800cb48:	08014b3c 	.word	0x08014b3c
 800cb4c:	00f42400 	.word	0x00f42400

0800cb50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5c:	f003 0308 	and.w	r3, r3, #8
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00a      	beq.n	800cb7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7e:	f003 0301 	and.w	r3, r3, #1
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00a      	beq.n	800cbbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc2:	f003 0304 	and.w	r3, r3, #4
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	430a      	orrs	r2, r1
 800cbde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00a      	beq.n	800cc02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00a      	beq.n	800cc24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	430a      	orrs	r2, r1
 800cc22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01a      	beq.n	800cc66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	430a      	orrs	r2, r1
 800cc44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc4e:	d10a      	bne.n	800cc66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	430a      	orrs	r2, r1
 800cc86:	605a      	str	r2, [r3, #4]
  }
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b098      	sub	sp, #96	@ 0x60
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cca4:	f7f8 f8a0 	bl	8004de8 <HAL_GetTick>
 800cca8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0308 	and.w	r3, r3, #8
 800ccb4:	2b08      	cmp	r3, #8
 800ccb6:	d12f      	bne.n	800cd18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f88e 	bl	800cde8 <UART_WaitOnFlagUntilTimeout>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d022      	beq.n	800cd18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccda:	e853 3f00 	ldrex	r3, [r3]
 800ccde:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cce6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	461a      	mov	r2, r3
 800ccee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccf2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccf8:	e841 2300 	strex	r3, r2, [r1]
 800ccfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1e6      	bne.n	800ccd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2220      	movs	r2, #32
 800cd08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd14:	2303      	movs	r3, #3
 800cd16:	e063      	b.n	800cde0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f003 0304 	and.w	r3, r3, #4
 800cd22:	2b04      	cmp	r3, #4
 800cd24:	d149      	bne.n	800cdba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f857 	bl	800cde8 <UART_WaitOnFlagUntilTimeout>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d03c      	beq.n	800cdba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	623b      	str	r3, [r7, #32]
   return(result);
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e6      	bne.n	800cd40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	3308      	adds	r3, #8
 800cd78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	e853 3f00 	ldrex	r3, [r3]
 800cd80:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f023 0301 	bic.w	r3, r3, #1
 800cd88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3308      	adds	r3, #8
 800cd90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd92:	61fa      	str	r2, [r7, #28]
 800cd94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd96:	69b9      	ldr	r1, [r7, #24]
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	e841 2300 	strex	r3, r2, [r1]
 800cd9e:	617b      	str	r3, [r7, #20]
   return(result);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1e5      	bne.n	800cd72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2220      	movs	r2, #32
 800cdaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e012      	b.n	800cde0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3758      	adds	r7, #88	@ 0x58
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdf8:	e04f      	b.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce00:	d04b      	beq.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce02:	f7f7 fff1 	bl	8004de8 <HAL_GetTick>
 800ce06:	4602      	mov	r2, r0
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d302      	bcc.n	800ce18 <UART_WaitOnFlagUntilTimeout+0x30>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e04e      	b.n	800ceba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 0304 	and.w	r3, r3, #4
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d037      	beq.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b80      	cmp	r3, #128	@ 0x80
 800ce2e:	d034      	beq.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b40      	cmp	r3, #64	@ 0x40
 800ce34:	d031      	beq.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	f003 0308 	and.w	r3, r3, #8
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d110      	bne.n	800ce66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2208      	movs	r2, #8
 800ce4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f838 	bl	800cec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2208      	movs	r2, #8
 800ce56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce62:	2301      	movs	r3, #1
 800ce64:	e029      	b.n	800ceba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce74:	d111      	bne.n	800ce9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 f81e 	bl	800cec2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce96:	2303      	movs	r3, #3
 800ce98:	e00f      	b.n	800ceba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	69da      	ldr	r2, [r3, #28]
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	4013      	ands	r3, r2
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	bf0c      	ite	eq
 800ceaa:	2301      	moveq	r3, #1
 800ceac:	2300      	movne	r3, #0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	79fb      	ldrb	r3, [r7, #7]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d0a0      	beq.n	800cdfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b095      	sub	sp, #84	@ 0x54
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced2:	e853 3f00 	ldrex	r3, [r3]
 800ced6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ced8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cee8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ceee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cef0:	e841 2300 	strex	r3, r2, [r1]
 800cef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d1e6      	bne.n	800ceca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	3308      	adds	r3, #8
 800cf02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	e853 3f00 	ldrex	r3, [r3]
 800cf0a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf12:	f023 0301 	bic.w	r3, r3, #1
 800cf16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	3308      	adds	r3, #8
 800cf1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cf26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf28:	e841 2300 	strex	r3, r2, [r1]
 800cf2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d1e3      	bne.n	800cefc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d118      	bne.n	800cf6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	e853 3f00 	ldrex	r3, [r3]
 800cf48:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	f023 0310 	bic.w	r3, r3, #16
 800cf50:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf5a:	61bb      	str	r3, [r7, #24]
 800cf5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5e:	6979      	ldr	r1, [r7, #20]
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	e841 2300 	strex	r3, r2, [r1]
 800cf66:	613b      	str	r3, [r7, #16]
   return(result);
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1e6      	bne.n	800cf3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2220      	movs	r2, #32
 800cf72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cf82:	bf00      	nop
 800cf84:	3754      	adds	r7, #84	@ 0x54
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr

0800cf8e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	b085      	sub	sp, #20
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf9e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfa2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	b29a      	uxth	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cfae:	2300      	movs	r3, #0
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3714      	adds	r7, #20
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cfc4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	43db      	mvns	r3, r3
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4013      	ands	r3, r2
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b085      	sub	sp, #20
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	1d3b      	adds	r3, r7, #4
 800cffc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2201      	movs	r2, #1
 800d004:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
	...

0800d030 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d030:	b480      	push	{r7}
 800d032:	b09d      	sub	sp, #116	@ 0x74
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	881b      	ldrh	r3, [r3, #0]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d056:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	78db      	ldrb	r3, [r3, #3]
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d81f      	bhi.n	800d0a2 <USB_ActivateEndpoint+0x72>
 800d062:	a201      	add	r2, pc, #4	@ (adr r2, 800d068 <USB_ActivateEndpoint+0x38>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d079 	.word	0x0800d079
 800d06c:	0800d095 	.word	0x0800d095
 800d070:	0800d0ab 	.word	0x0800d0ab
 800d074:	0800d087 	.word	0x0800d087
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d078:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d07c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d080:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d084:	e012      	b.n	800d0ac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d086:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d08a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d08e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d092:	e00b      	b.n	800d0ac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d094:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d098:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d09c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d0a0:	e004      	b.n	800d0ac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d0a8:	e000      	b.n	800d0ac <USB_ActivateEndpoint+0x7c>
      break;
 800d0aa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	441a      	add	r2, r3
 800d0b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d0ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	b21b      	sxth	r3, r3
 800d0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e6:	b21a      	sxth	r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b21b      	sxth	r3, r3
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	b21b      	sxth	r3, r3
 800d0f2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	441a      	add	r2, r3
 800d100:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d114:	b29b      	uxth	r3, r3
 800d116:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	7b1b      	ldrb	r3, [r3, #12]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f040 8178 	bne.w	800d412 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	785b      	ldrb	r3, [r3, #1]
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 8084 	beq.w	800d234 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	61bb      	str	r3, [r7, #24]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d136:	b29b      	uxth	r3, r3
 800d138:	461a      	mov	r2, r3
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	4413      	add	r3, r2
 800d13e:	61bb      	str	r3, [r7, #24]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	00da      	lsls	r2, r3, #3
 800d146:	69bb      	ldr	r3, [r7, #24]
 800d148:	4413      	add	r3, r2
 800d14a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d14e:	617b      	str	r3, [r7, #20]
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	88db      	ldrh	r3, [r3, #6]
 800d154:	085b      	lsrs	r3, r3, #1
 800d156:	b29b      	uxth	r3, r3
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	881b      	ldrh	r3, [r3, #0]
 800d16c:	827b      	strh	r3, [r7, #18]
 800d16e:	8a7b      	ldrh	r3, [r7, #18]
 800d170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01b      	beq.n	800d1b0 <USB_ActivateEndpoint+0x180>
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	b29b      	uxth	r3, r3
 800d186:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d18a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d18e:	823b      	strh	r3, [r7, #16]
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	441a      	add	r2, r3
 800d19a:	8a3b      	ldrh	r3, [r7, #16]
 800d19c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	78db      	ldrb	r3, [r3, #3]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d020      	beq.n	800d1fa <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d1b8:	687a      	ldr	r2, [r7, #4]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4413      	add	r3, r2
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1ce:	81bb      	strh	r3, [r7, #12]
 800d1d0:	89bb      	ldrh	r3, [r7, #12]
 800d1d2:	f083 0320 	eor.w	r3, r3, #32
 800d1d6:	81bb      	strh	r3, [r7, #12]
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	441a      	add	r2, r3
 800d1e2:	89bb      	ldrh	r3, [r7, #12]
 800d1e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	8013      	strh	r3, [r2, #0]
 800d1f8:	e2d5      	b.n	800d7a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	881b      	ldrh	r3, [r3, #0]
 800d206:	b29b      	uxth	r3, r3
 800d208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d20c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d210:	81fb      	strh	r3, [r7, #14]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	009b      	lsls	r3, r3, #2
 800d21a:	441a      	add	r2, r3
 800d21c:	89fb      	ldrh	r3, [r7, #14]
 800d21e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d222:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22e:	b29b      	uxth	r3, r3
 800d230:	8013      	strh	r3, [r2, #0]
 800d232:	e2b8      	b.n	800d7a6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	633b      	str	r3, [r7, #48]	@ 0x30
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d23e:	b29b      	uxth	r3, r3
 800d240:	461a      	mov	r2, r3
 800d242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d244:	4413      	add	r3, r2
 800d246:	633b      	str	r3, [r7, #48]	@ 0x30
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	00da      	lsls	r2, r3, #3
 800d24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d250:	4413      	add	r3, r2
 800d252:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	88db      	ldrh	r3, [r3, #6]
 800d25c:	085b      	lsrs	r3, r3, #1
 800d25e:	b29b      	uxth	r3, r3
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	b29a      	uxth	r2, r3
 800d264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d266:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d272:	b29b      	uxth	r3, r3
 800d274:	461a      	mov	r2, r3
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	4413      	add	r3, r2
 800d27a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	00da      	lsls	r2, r3, #3
 800d282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d284:	4413      	add	r3, r2
 800d286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d296:	b29a      	uxth	r2, r3
 800d298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29a:	801a      	strh	r2, [r3, #0]
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2a2:	d91d      	bls.n	800d2e0 <USB_ActivateEndpoint+0x2b0>
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	095b      	lsrs	r3, r3, #5
 800d2aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	f003 031f 	and.w	r3, r3, #31
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d102      	bne.n	800d2be <USB_ActivateEndpoint+0x28e>
 800d2b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	029b      	lsls	r3, r3, #10
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2dc:	801a      	strh	r2, [r3, #0]
 800d2de:	e026      	b.n	800d32e <USB_ActivateEndpoint+0x2fe>
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10a      	bne.n	800d2fe <USB_ActivateEndpoint+0x2ce>
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	881b      	ldrh	r3, [r3, #0]
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fa:	801a      	strh	r2, [r3, #0]
 800d2fc:	e017      	b.n	800d32e <USB_ActivateEndpoint+0x2fe>
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	691b      	ldr	r3, [r3, #16]
 800d302:	085b      	lsrs	r3, r3, #1
 800d304:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <USB_ActivateEndpoint+0x2e8>
 800d312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d314:	3301      	adds	r3, #1
 800d316:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d320:	b29b      	uxth	r3, r3
 800d322:	029b      	lsls	r3, r3, #10
 800d324:	b29b      	uxth	r3, r3
 800d326:	4313      	orrs	r3, r2
 800d328:	b29a      	uxth	r2, r3
 800d32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d32e:	687a      	ldr	r2, [r7, #4]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d33c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d33e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d342:	2b00      	cmp	r3, #0
 800d344:	d01b      	beq.n	800d37e <USB_ActivateEndpoint+0x34e>
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	b29b      	uxth	r3, r3
 800d354:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d35c:	843b      	strh	r3, [r7, #32]
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	441a      	add	r2, r3
 800d368:	8c3b      	ldrh	r3, [r7, #32]
 800d36a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d36e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d372:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d124      	bne.n	800d3d0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	881b      	ldrh	r3, [r3, #0]
 800d392:	b29b      	uxth	r3, r3
 800d394:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d398:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d39c:	83bb      	strh	r3, [r7, #28]
 800d39e:	8bbb      	ldrh	r3, [r7, #28]
 800d3a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d3a4:	83bb      	strh	r3, [r7, #28]
 800d3a6:	8bbb      	ldrh	r3, [r7, #28]
 800d3a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3ac:	83bb      	strh	r3, [r7, #28]
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	441a      	add	r2, r3
 800d3b8:	8bbb      	ldrh	r3, [r7, #28]
 800d3ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	8013      	strh	r3, [r2, #0]
 800d3ce:	e1ea      	b.n	800d7a6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	881b      	ldrh	r3, [r3, #0]
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3e6:	83fb      	strh	r3, [r7, #30]
 800d3e8:	8bfb      	ldrh	r3, [r7, #30]
 800d3ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3ee:	83fb      	strh	r3, [r7, #30]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	441a      	add	r2, r3
 800d3fa:	8bfb      	ldrh	r3, [r7, #30]
 800d3fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	8013      	strh	r3, [r2, #0]
 800d410:	e1c9      	b.n	800d7a6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	78db      	ldrb	r3, [r3, #3]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d11e      	bne.n	800d458 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d41a:	687a      	ldr	r2, [r7, #4]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4413      	add	r3, r2
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	b29b      	uxth	r3, r3
 800d428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d42c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d430:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	441a      	add	r2, r3
 800d43e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d44a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d452:	b29b      	uxth	r3, r3
 800d454:	8013      	strh	r3, [r2, #0]
 800d456:	e01d      	b.n	800d494 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	881b      	ldrh	r3, [r3, #0]
 800d464:	b29b      	uxth	r3, r3
 800d466:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d46a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d46e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	441a      	add	r2, r3
 800d47c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d48c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d490:	b29b      	uxth	r3, r3
 800d492:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4a4:	4413      	add	r3, r2
 800d4a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	00da      	lsls	r2, r3, #3
 800d4ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d4b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	891b      	ldrh	r3, [r3, #8]
 800d4bc:	085b      	lsrs	r3, r3, #1
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	005b      	lsls	r3, r3, #1
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4c6:	801a      	strh	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4d8:	4413      	add	r3, r2
 800d4da:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	00da      	lsls	r2, r3, #3
 800d4e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d4ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	895b      	ldrh	r3, [r3, #10]
 800d4f0:	085b      	lsrs	r3, r3, #1
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	2b00      	cmp	r3, #0
 800d502:	f040 8093 	bne.w	800d62c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d516:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d51a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d01b      	beq.n	800d55a <USB_ActivateEndpoint+0x52a>
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	881b      	ldrh	r3, [r3, #0]
 800d52e:	b29b      	uxth	r3, r3
 800d530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d538:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	441a      	add	r2, r3
 800d544:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d54a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d54e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d556:	b29b      	uxth	r3, r3
 800d558:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d568:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d01b      	beq.n	800d5aa <USB_ActivateEndpoint+0x57a>
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	b29b      	uxth	r3, r3
 800d580:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d588:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	441a      	add	r2, r3
 800d594:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d596:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d59a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d59e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4413      	add	r3, r2
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5c0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5c8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d5d0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	441a      	add	r2, r3
 800d5dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4413      	add	r3, r2
 800d5fc:	881b      	ldrh	r3, [r3, #0]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d608:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	441a      	add	r2, r3
 800d614:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d61a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d61e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d626:	b29b      	uxth	r3, r3
 800d628:	8013      	strh	r3, [r2, #0]
 800d62a:	e0bc      	b.n	800d7a6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d62c:	687a      	ldr	r2, [r7, #4]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	4413      	add	r3, r2
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d63c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01d      	beq.n	800d684 <USB_ActivateEndpoint+0x654>
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	781b      	ldrb	r3, [r3, #0]
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	4413      	add	r3, r2
 800d652:	881b      	ldrh	r3, [r3, #0]
 800d654:	b29b      	uxth	r3, r3
 800d656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d65a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d65e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	441a      	add	r2, r3
 800d66c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800d670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d680:	b29b      	uxth	r3, r3
 800d682:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	4413      	add	r3, r2
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800d694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01d      	beq.n	800d6dc <USB_ActivateEndpoint+0x6ac>
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	881b      	ldrh	r3, [r3, #0]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	441a      	add	r2, r3
 800d6c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d6c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	78db      	ldrb	r3, [r3, #3]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d024      	beq.n	800d72e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6fa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d6fe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d702:	f083 0320 	eor.w	r3, r3, #32
 800d706:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	441a      	add	r2, r3
 800d714:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d718:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d71c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d728:	b29b      	uxth	r3, r3
 800d72a:	8013      	strh	r3, [r2, #0]
 800d72c:	e01d      	b.n	800d76a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	4413      	add	r3, r2
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d744:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	441a      	add	r2, r3
 800d752:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d75a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d75e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d766:	b29b      	uxth	r3, r3
 800d768:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	009b      	lsls	r3, r3, #2
 800d772:	4413      	add	r3, r2
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	b29b      	uxth	r3, r3
 800d778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d77c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d780:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	441a      	add	r2, r3
 800d78e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d79a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d7a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3774      	adds	r7, #116	@ 0x74
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop

0800d7b8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b08d      	sub	sp, #52	@ 0x34
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	7b1b      	ldrb	r3, [r3, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f040 808e 	bne.w	800d8e8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	785b      	ldrb	r3, [r3, #1]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d044      	beq.n	800d85e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4413      	add	r3, r2
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	81bb      	strh	r3, [r7, #12]
 800d7e2:	89bb      	ldrh	r3, [r7, #12]
 800d7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01b      	beq.n	800d824 <USB_DeactivateEndpoint+0x6c>
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	881b      	ldrh	r3, [r3, #0]
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d802:	817b      	strh	r3, [r7, #10]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	441a      	add	r2, r3
 800d80e:	897b      	ldrh	r3, [r7, #10]
 800d810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d81c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d820:	b29b      	uxth	r3, r3
 800d822:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	b29b      	uxth	r3, r3
 800d832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d83a:	813b      	strh	r3, [r7, #8]
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	009b      	lsls	r3, r3, #2
 800d844:	441a      	add	r2, r3
 800d846:	893b      	ldrh	r3, [r7, #8]
 800d848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d84c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d858:	b29b      	uxth	r3, r3
 800d85a:	8013      	strh	r3, [r2, #0]
 800d85c:	e192      	b.n	800db84 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	4413      	add	r3, r2
 800d868:	881b      	ldrh	r3, [r3, #0]
 800d86a:	827b      	strh	r3, [r7, #18]
 800d86c:	8a7b      	ldrh	r3, [r7, #18]
 800d86e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d01b      	beq.n	800d8ae <USB_DeactivateEndpoint+0xf6>
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	881b      	ldrh	r3, [r3, #0]
 800d882:	b29b      	uxth	r3, r3
 800d884:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d88c:	823b      	strh	r3, [r7, #16]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	441a      	add	r2, r3
 800d898:	8a3b      	ldrh	r3, [r7, #16]
 800d89a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d89e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d8a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c4:	81fb      	strh	r3, [r7, #14]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	441a      	add	r2, r3
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	8013      	strh	r3, [r2, #0]
 800d8e6:	e14d      	b.n	800db84 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 80a5 	bne.w	800da3c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	843b      	strh	r3, [r7, #32]
 800d900:	8c3b      	ldrh	r3, [r7, #32]
 800d902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d906:	2b00      	cmp	r3, #0
 800d908:	d01b      	beq.n	800d942 <USB_DeactivateEndpoint+0x18a>
 800d90a:	687a      	ldr	r2, [r7, #4]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	4413      	add	r3, r2
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d91c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d920:	83fb      	strh	r3, [r7, #30]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	441a      	add	r2, r3
 800d92c:	8bfb      	ldrh	r3, [r7, #30]
 800d92e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d93e:	b29b      	uxth	r3, r3
 800d940:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	4413      	add	r3, r2
 800d94c:	881b      	ldrh	r3, [r3, #0]
 800d94e:	83bb      	strh	r3, [r7, #28]
 800d950:	8bbb      	ldrh	r3, [r7, #28]
 800d952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d956:	2b00      	cmp	r3, #0
 800d958:	d01b      	beq.n	800d992 <USB_DeactivateEndpoint+0x1da>
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4413      	add	r3, r2
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d96c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d970:	837b      	strh	r3, [r7, #26]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	441a      	add	r2, r3
 800d97c:	8b7b      	ldrh	r3, [r7, #26]
 800d97e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d98a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d98e:	b29b      	uxth	r3, r3
 800d990:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9a8:	833b      	strh	r3, [r7, #24]
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	441a      	add	r2, r3
 800d9b4:	8b3b      	ldrh	r3, [r7, #24]
 800d9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	881b      	ldrh	r3, [r3, #0]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9e0:	82fb      	strh	r3, [r7, #22]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	441a      	add	r2, r3
 800d9ec:	8afb      	ldrh	r3, [r7, #22]
 800d9ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4413      	add	r3, r2
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	b29b      	uxth	r3, r3
 800da10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da18:	82bb      	strh	r3, [r7, #20]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	441a      	add	r2, r3
 800da24:	8abb      	ldrh	r3, [r7, #20]
 800da26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da36:	b29b      	uxth	r3, r3
 800da38:	8013      	strh	r3, [r2, #0]
 800da3a:	e0a3      	b.n	800db84 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	881b      	ldrh	r3, [r3, #0]
 800da48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800da4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d01b      	beq.n	800da8c <USB_DeactivateEndpoint+0x2d4>
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	4413      	add	r3, r2
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	b29b      	uxth	r3, r3
 800da62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da6a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	441a      	add	r2, r3
 800da76:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da88:	b29b      	uxth	r3, r3
 800da8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	881b      	ldrh	r3, [r3, #0]
 800da98:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800da9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d01b      	beq.n	800dadc <USB_DeactivateEndpoint+0x324>
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daba:	853b      	strh	r3, [r7, #40]	@ 0x28
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	441a      	add	r2, r3
 800dac6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800dac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dacc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dad8:	b29b      	uxth	r3, r3
 800dada:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800daee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	441a      	add	r2, r3
 800dafe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800db00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800db0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db10:	b29b      	uxth	r3, r3
 800db12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db14:	687a      	ldr	r2, [r7, #4]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4413      	add	r3, r2
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	b29b      	uxth	r3, r3
 800db22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	441a      	add	r2, r3
 800db36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db48:	b29b      	uxth	r3, r3
 800db4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db62:	847b      	strh	r3, [r7, #34]	@ 0x22
 800db64:	687a      	ldr	r2, [r7, #4]
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	441a      	add	r2, r3
 800db6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db80:	b29b      	uxth	r3, r3
 800db82:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3734      	adds	r7, #52	@ 0x34
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr

0800db92 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b0c2      	sub	sp, #264	@ 0x108
 800db96:	af00      	add	r7, sp, #0
 800db98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dba0:	6018      	str	r0, [r3, #0]
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbaa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dbac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	785b      	ldrb	r3, [r3, #1]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	f040 86b7 	bne.w	800e92c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800dbbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	699a      	ldr	r2, [r3, #24]
 800dbca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	429a      	cmp	r2, r3
 800dbd8:	d908      	bls.n	800dbec <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dbda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dbea:	e007      	b.n	800dbfc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	699b      	ldr	r3, [r3, #24]
 800dbf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800dbfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	7b1b      	ldrb	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d13a      	bne.n	800dc82 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800dc0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6959      	ldr	r1, [r3, #20]
 800dc18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	88da      	ldrh	r2, [r3, #6]
 800dc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc32:	6800      	ldr	r0, [r0, #0]
 800dc34:	f001 fc98 	bl	800f568 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	613b      	str	r3, [r7, #16]
 800dc44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	461a      	mov	r2, r3
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	4413      	add	r3, r2
 800dc5a:	613b      	str	r3, [r7, #16]
 800dc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	00da      	lsls	r2, r3, #3
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc72:	60fb      	str	r3, [r7, #12]
 800dc74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	801a      	strh	r2, [r3, #0]
 800dc7e:	f000 be1f 	b.w	800e8c0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	78db      	ldrb	r3, [r3, #3]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	f040 8462 	bne.w	800e558 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6a1a      	ldr	r2, [r3, #32]
 800dca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	f240 83df 	bls.w	800e470 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dcb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	881b      	ldrh	r3, [r3, #0]
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcd8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800dcdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dce0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	441a      	add	r2, r3
 800dcf6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dcfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd02:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dd06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6a1a      	ldr	r2, [r3, #32]
 800dd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd1e:	1ad2      	subs	r2, r2, r3
 800dd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dd2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	881b      	ldrh	r3, [r3, #0]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f000 81c7 	beq.w	800e0e2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	785b      	ldrb	r3, [r3, #1]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d177      	bne.n	800de60 <USB_EPStartXfer+0x2ce>
 800dd70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd90:	4413      	add	r3, r2
 800dd92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	00da      	lsls	r2, r3, #3
 800dda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda4:	4413      	add	r3, r2
 800dda6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ddaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddba:	801a      	strh	r2, [r3, #0]
 800ddbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc0:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddc2:	d921      	bls.n	800de08 <USB_EPStartXfer+0x276>
 800ddc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddc8:	095b      	lsrs	r3, r3, #5
 800ddca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ddce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd2:	f003 031f 	and.w	r3, r3, #31
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d104      	bne.n	800dde4 <USB_EPStartXfer+0x252>
 800ddda:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddde:	3b01      	subs	r3, #1
 800dde0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	029b      	lsls	r3, r3, #10
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de00:	b29a      	uxth	r2, r3
 800de02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de04:	801a      	strh	r2, [r3, #0]
 800de06:	e050      	b.n	800deaa <USB_EPStartXfer+0x318>
 800de08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d10a      	bne.n	800de26 <USB_EPStartXfer+0x294>
 800de10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	b29b      	uxth	r3, r3
 800de16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de1e:	b29a      	uxth	r2, r3
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de22:	801a      	strh	r2, [r3, #0]
 800de24:	e041      	b.n	800deaa <USB_EPStartXfer+0x318>
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de2a:	085b      	lsrs	r3, r3, #1
 800de2c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de34:	f003 0301 	and.w	r3, r3, #1
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d004      	beq.n	800de46 <USB_EPStartXfer+0x2b4>
 800de3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de40:	3301      	adds	r3, #1
 800de42:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de50:	b29b      	uxth	r3, r3
 800de52:	029b      	lsls	r3, r3, #10
 800de54:	b29b      	uxth	r3, r3
 800de56:	4313      	orrs	r3, r2
 800de58:	b29a      	uxth	r2, r3
 800de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5c:	801a      	strh	r2, [r3, #0]
 800de5e:	e024      	b.n	800deaa <USB_EPStartXfer+0x318>
 800de60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	785b      	ldrb	r3, [r3, #1]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d11c      	bne.n	800deaa <USB_EPStartXfer+0x318>
 800de70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de7e:	b29b      	uxth	r3, r3
 800de80:	461a      	mov	r2, r3
 800de82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de84:	4413      	add	r3, r2
 800de86:	633b      	str	r3, [r7, #48]	@ 0x30
 800de88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	00da      	lsls	r2, r3, #3
 800de96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de98:	4413      	add	r3, r2
 800de9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800deaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	895b      	ldrh	r3, [r3, #10]
 800deb6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800deba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800debe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	6959      	ldr	r1, [r3, #20]
 800dec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deca:	b29b      	uxth	r3, r3
 800decc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ded0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ded4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ded8:	6800      	ldr	r0, [r0, #0]
 800deda:	f001 fb45 	bl	800f568 <USB_WritePMA>
            ep->xfer_buff += len;
 800dede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	695a      	ldr	r2, [r3, #20]
 800deea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deee:	441a      	add	r2, r3
 800def0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800defc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6a1a      	ldr	r2, [r3, #32]
 800df08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	429a      	cmp	r2, r3
 800df16:	d90f      	bls.n	800df38 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800df18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6a1a      	ldr	r2, [r3, #32]
 800df24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df28:	1ad2      	subs	r2, r2, r3
 800df2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	621a      	str	r2, [r3, #32]
 800df36:	e00e      	b.n	800df56 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800df38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	6a1b      	ldr	r3, [r3, #32]
 800df44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800df48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2200      	movs	r2, #0
 800df54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800df56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	785b      	ldrb	r3, [r3, #1]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d177      	bne.n	800e056 <USB_EPStartXfer+0x4c4>
 800df66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	61bb      	str	r3, [r7, #24]
 800df72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df80:	b29b      	uxth	r3, r3
 800df82:	461a      	mov	r2, r3
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	4413      	add	r3, r2
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	00da      	lsls	r2, r3, #3
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	4413      	add	r3, r2
 800df9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	881b      	ldrh	r3, [r3, #0]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	801a      	strh	r2, [r3, #0]
 800dfb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb6:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfb8:	d921      	bls.n	800dffe <USB_EPStartXfer+0x46c>
 800dfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfbe:	095b      	lsrs	r3, r3, #5
 800dfc0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfc8:	f003 031f 	and.w	r3, r3, #31
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d104      	bne.n	800dfda <USB_EPStartXfer+0x448>
 800dfd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	029b      	lsls	r3, r3, #10
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	4313      	orrs	r3, r2
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	801a      	strh	r2, [r3, #0]
 800dffc:	e056      	b.n	800e0ac <USB_EPStartXfer+0x51a>
 800dffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e002:	2b00      	cmp	r3, #0
 800e004:	d10a      	bne.n	800e01c <USB_EPStartXfer+0x48a>
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	881b      	ldrh	r3, [r3, #0]
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e010:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e014:	b29a      	uxth	r2, r3
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	801a      	strh	r2, [r3, #0]
 800e01a:	e047      	b.n	800e0ac <USB_EPStartXfer+0x51a>
 800e01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e020:	085b      	lsrs	r3, r3, #1
 800e022:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e02a:	f003 0301 	and.w	r3, r3, #1
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d004      	beq.n	800e03c <USB_EPStartXfer+0x4aa>
 800e032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e036:	3301      	adds	r3, #1
 800e038:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	881b      	ldrh	r3, [r3, #0]
 800e040:	b29a      	uxth	r2, r3
 800e042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e046:	b29b      	uxth	r3, r3
 800e048:	029b      	lsls	r3, r3, #10
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	4313      	orrs	r3, r2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	801a      	strh	r2, [r3, #0]
 800e054:	e02a      	b.n	800e0ac <USB_EPStartXfer+0x51a>
 800e056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	785b      	ldrb	r3, [r3, #1]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d122      	bne.n	800e0ac <USB_EPStartXfer+0x51a>
 800e066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	623b      	str	r3, [r7, #32]
 800e072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e080:	b29b      	uxth	r3, r3
 800e082:	461a      	mov	r2, r3
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	4413      	add	r3, r2
 800e088:	623b      	str	r3, [r7, #32]
 800e08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	00da      	lsls	r2, r3, #3
 800e098:	6a3b      	ldr	r3, [r7, #32]
 800e09a:	4413      	add	r3, r2
 800e09c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e0a0:	61fb      	str	r3, [r7, #28]
 800e0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	891b      	ldrh	r3, [r3, #8]
 800e0b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	6959      	ldr	r1, [r3, #20]
 800e0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e0d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e0d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e0da:	6800      	ldr	r0, [r0, #0]
 800e0dc:	f001 fa44 	bl	800f568 <USB_WritePMA>
 800e0e0:	e3ee      	b.n	800e8c0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	785b      	ldrb	r3, [r3, #1]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d177      	bne.n	800e1e2 <USB_EPStartXfer+0x650>
 800e0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	461a      	mov	r2, r3
 800e110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e112:	4413      	add	r3, r2
 800e114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e11a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	00da      	lsls	r2, r3, #3
 800e124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e126:	4413      	add	r3, r2
 800e128:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e12c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	b29b      	uxth	r3, r3
 800e134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e138:	b29a      	uxth	r2, r3
 800e13a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e13c:	801a      	strh	r2, [r3, #0]
 800e13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e142:	2b3e      	cmp	r3, #62	@ 0x3e
 800e144:	d921      	bls.n	800e18a <USB_EPStartXfer+0x5f8>
 800e146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e14a:	095b      	lsrs	r3, r3, #5
 800e14c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e154:	f003 031f 	and.w	r3, r3, #31
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <USB_EPStartXfer+0x5d4>
 800e15c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e160:	3b01      	subs	r3, #1
 800e162:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e170:	b29b      	uxth	r3, r3
 800e172:	029b      	lsls	r3, r3, #10
 800e174:	b29b      	uxth	r3, r3
 800e176:	4313      	orrs	r3, r2
 800e178:	b29b      	uxth	r3, r3
 800e17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e182:	b29a      	uxth	r2, r3
 800e184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e186:	801a      	strh	r2, [r3, #0]
 800e188:	e056      	b.n	800e238 <USB_EPStartXfer+0x6a6>
 800e18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10a      	bne.n	800e1a8 <USB_EPStartXfer+0x616>
 800e192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	b29b      	uxth	r3, r3
 800e198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a4:	801a      	strh	r2, [r3, #0]
 800e1a6:	e047      	b.n	800e238 <USB_EPStartXfer+0x6a6>
 800e1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1ac:	085b      	lsrs	r3, r3, #1
 800e1ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1b6:	f003 0301 	and.w	r3, r3, #1
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d004      	beq.n	800e1c8 <USB_EPStartXfer+0x636>
 800e1be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	029b      	lsls	r3, r3, #10
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1de:	801a      	strh	r2, [r3, #0]
 800e1e0:	e02a      	b.n	800e238 <USB_EPStartXfer+0x6a6>
 800e1e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	785b      	ldrb	r3, [r3, #1]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d122      	bne.n	800e238 <USB_EPStartXfer+0x6a6>
 800e1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	461a      	mov	r2, r3
 800e210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e212:	4413      	add	r3, r2
 800e214:	653b      	str	r3, [r7, #80]	@ 0x50
 800e216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	00da      	lsls	r2, r3, #3
 800e224:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e226:	4413      	add	r3, r2
 800e228:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e232:	b29a      	uxth	r2, r3
 800e234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e236:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	891b      	ldrh	r3, [r3, #8]
 800e244:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6959      	ldr	r1, [r3, #20]
 800e254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e258:	b29b      	uxth	r3, r3
 800e25a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e25e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e262:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e266:	6800      	ldr	r0, [r0, #0]
 800e268:	f001 f97e 	bl	800f568 <USB_WritePMA>
            ep->xfer_buff += len;
 800e26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	695a      	ldr	r2, [r3, #20]
 800e278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e27c:	441a      	add	r2, r3
 800e27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6a1a      	ldr	r2, [r3, #32]
 800e296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e29a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d90f      	bls.n	800e2c6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6a1a      	ldr	r2, [r3, #32]
 800e2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2b6:	1ad2      	subs	r2, r2, r3
 800e2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	621a      	str	r2, [r3, #32]
 800e2c4:	e00e      	b.n	800e2e4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	6a1b      	ldr	r3, [r3, #32]
 800e2d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	785b      	ldrb	r3, [r3, #1]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d177      	bne.n	800e3f0 <USB_EPStartXfer+0x85e>
 800e300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e304:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e30c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	461a      	mov	r2, r3
 800e31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e320:	4413      	add	r3, r2
 800e322:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	00da      	lsls	r2, r3, #3
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	4413      	add	r3, r2
 800e336:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e33a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e33e:	881b      	ldrh	r3, [r3, #0]
 800e340:	b29b      	uxth	r3, r3
 800e342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e346:	b29a      	uxth	r2, r3
 800e348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34a:	801a      	strh	r2, [r3, #0]
 800e34c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e350:	2b3e      	cmp	r3, #62	@ 0x3e
 800e352:	d921      	bls.n	800e398 <USB_EPStartXfer+0x806>
 800e354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e358:	095b      	lsrs	r3, r3, #5
 800e35a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e362:	f003 031f 	and.w	r3, r3, #31
 800e366:	2b00      	cmp	r3, #0
 800e368:	d104      	bne.n	800e374 <USB_EPStartXfer+0x7e2>
 800e36a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e36e:	3b01      	subs	r3, #1
 800e370:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	b29a      	uxth	r2, r3
 800e37a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e37e:	b29b      	uxth	r3, r3
 800e380:	029b      	lsls	r3, r3, #10
 800e382:	b29b      	uxth	r3, r3
 800e384:	4313      	orrs	r3, r2
 800e386:	b29b      	uxth	r3, r3
 800e388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e38c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e390:	b29a      	uxth	r2, r3
 800e392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e394:	801a      	strh	r2, [r3, #0]
 800e396:	e050      	b.n	800e43a <USB_EPStartXfer+0x8a8>
 800e398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10a      	bne.n	800e3b6 <USB_EPStartXfer+0x824>
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a2:	881b      	ldrh	r3, [r3, #0]
 800e3a4:	b29b      	uxth	r3, r3
 800e3a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b2:	801a      	strh	r2, [r3, #0]
 800e3b4:	e041      	b.n	800e43a <USB_EPStartXfer+0x8a8>
 800e3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ba:	085b      	lsrs	r3, r3, #1
 800e3bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3c4:	f003 0301 	and.w	r3, r3, #1
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d004      	beq.n	800e3d6 <USB_EPStartXfer+0x844>
 800e3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3d8:	881b      	ldrh	r3, [r3, #0]
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	029b      	lsls	r3, r3, #10
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3ec:	801a      	strh	r2, [r3, #0]
 800e3ee:	e024      	b.n	800e43a <USB_EPStartXfer+0x8a8>
 800e3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	785b      	ldrb	r3, [r3, #1]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d11c      	bne.n	800e43a <USB_EPStartXfer+0x8a8>
 800e400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e40e:	b29b      	uxth	r3, r3
 800e410:	461a      	mov	r2, r3
 800e412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e414:	4413      	add	r3, r2
 800e416:	643b      	str	r3, [r7, #64]	@ 0x40
 800e418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e41c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	00da      	lsls	r2, r3, #3
 800e426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e428:	4413      	add	r3, r2
 800e42a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e434:	b29a      	uxth	r2, r3
 800e436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	895b      	ldrh	r3, [r3, #10]
 800e446:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e44e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6959      	ldr	r1, [r3, #20]
 800e456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e460:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e464:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e468:	6800      	ldr	r0, [r0, #0]
 800e46a:	f001 f87d 	bl	800f568 <USB_WritePMA>
 800e46e:	e227      	b.n	800e8c0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6a1b      	ldr	r3, [r3, #32]
 800e47c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	4413      	add	r3, r2
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e4a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4a6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	441a      	add	r2, r3
 800e4c4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e4c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4fc:	4413      	add	r3, r2
 800e4fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	00da      	lsls	r2, r3, #3
 800e50e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e510:	4413      	add	r3, r2
 800e512:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e516:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e51c:	b29a      	uxth	r2, r3
 800e51e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e520:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	891b      	ldrh	r3, [r3, #8]
 800e52e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6959      	ldr	r1, [r3, #20]
 800e53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e542:	b29b      	uxth	r3, r3
 800e544:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e548:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e54c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e550:	6800      	ldr	r0, [r0, #0]
 800e552:	f001 f809 	bl	800f568 <USB_WritePMA>
 800e556:	e1b3      	b.n	800e8c0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e55c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	6a1a      	ldr	r2, [r3, #32]
 800e564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e568:	1ad2      	subs	r2, r2, r3
 800e56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e56e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e57a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	4413      	add	r3, r2
 800e590:	881b      	ldrh	r3, [r3, #0]
 800e592:	b29b      	uxth	r3, r3
 800e594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 80c6 	beq.w	800e72a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800e5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d177      	bne.n	800e6aa <USB_EPStartXfer+0xb18>
 800e5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5da:	4413      	add	r3, r2
 800e5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	00da      	lsls	r2, r3, #3
 800e5ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5f8:	881b      	ldrh	r3, [r3, #0]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e600:	b29a      	uxth	r2, r3
 800e602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e604:	801a      	strh	r2, [r3, #0]
 800e606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e60a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e60c:	d921      	bls.n	800e652 <USB_EPStartXfer+0xac0>
 800e60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e612:	095b      	lsrs	r3, r3, #5
 800e614:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e61c:	f003 031f 	and.w	r3, r3, #31
 800e620:	2b00      	cmp	r3, #0
 800e622:	d104      	bne.n	800e62e <USB_EPStartXfer+0xa9c>
 800e624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e628:	3b01      	subs	r3, #1
 800e62a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e62e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e630:	881b      	ldrh	r3, [r3, #0]
 800e632:	b29a      	uxth	r2, r3
 800e634:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e638:	b29b      	uxth	r3, r3
 800e63a:	029b      	lsls	r3, r3, #10
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	4313      	orrs	r3, r2
 800e640:	b29b      	uxth	r3, r3
 800e642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e64e:	801a      	strh	r2, [r3, #0]
 800e650:	e050      	b.n	800e6f4 <USB_EPStartXfer+0xb62>
 800e652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e656:	2b00      	cmp	r3, #0
 800e658:	d10a      	bne.n	800e670 <USB_EPStartXfer+0xade>
 800e65a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e664:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e668:	b29a      	uxth	r2, r3
 800e66a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e66c:	801a      	strh	r2, [r3, #0]
 800e66e:	e041      	b.n	800e6f4 <USB_EPStartXfer+0xb62>
 800e670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e674:	085b      	lsrs	r3, r3, #1
 800e676:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d004      	beq.n	800e690 <USB_EPStartXfer+0xafe>
 800e686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e68a:	3301      	adds	r3, #1
 800e68c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e690:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	b29a      	uxth	r2, r3
 800e696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	029b      	lsls	r3, r3, #10
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	e024      	b.n	800e6f4 <USB_EPStartXfer+0xb62>
 800e6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	785b      	ldrb	r3, [r3, #1]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d11c      	bne.n	800e6f4 <USB_EPStartXfer+0xb62>
 800e6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6ce:	4413      	add	r3, r2
 800e6d0:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	00da      	lsls	r2, r3, #3
 800e6e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e6f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	895b      	ldrh	r3, [r3, #10]
 800e700:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6959      	ldr	r1, [r3, #20]
 800e710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e714:	b29b      	uxth	r3, r3
 800e716:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e71a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e71e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e722:	6800      	ldr	r0, [r0, #0]
 800e724:	f000 ff20 	bl	800f568 <USB_WritePMA>
 800e728:	e0ca      	b.n	800e8c0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	785b      	ldrb	r3, [r3, #1]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d177      	bne.n	800e82a <USB_EPStartXfer+0xc98>
 800e73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e73e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e74a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e754:	b29b      	uxth	r3, r3
 800e756:	461a      	mov	r2, r3
 800e758:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e75a:	4413      	add	r3, r2
 800e75c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	00da      	lsls	r2, r3, #3
 800e76c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e76e:	4413      	add	r3, r2
 800e770:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e774:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e776:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e780:	b29a      	uxth	r2, r3
 800e782:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e784:	801a      	strh	r2, [r3, #0]
 800e786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e78a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e78c:	d921      	bls.n	800e7d2 <USB_EPStartXfer+0xc40>
 800e78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e792:	095b      	lsrs	r3, r3, #5
 800e794:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79c:	f003 031f 	and.w	r3, r3, #31
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d104      	bne.n	800e7ae <USB_EPStartXfer+0xc1c>
 800e7a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	029b      	lsls	r3, r3, #10
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7ce:	801a      	strh	r2, [r3, #0]
 800e7d0:	e05c      	b.n	800e88c <USB_EPStartXfer+0xcfa>
 800e7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10a      	bne.n	800e7f0 <USB_EPStartXfer+0xc5e>
 800e7da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7dc:	881b      	ldrh	r3, [r3, #0]
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7ec:	801a      	strh	r2, [r3, #0]
 800e7ee:	e04d      	b.n	800e88c <USB_EPStartXfer+0xcfa>
 800e7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f4:	085b      	lsrs	r3, r3, #1
 800e7f6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d004      	beq.n	800e810 <USB_EPStartXfer+0xc7e>
 800e806:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e80a:	3301      	adds	r3, #1
 800e80c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e810:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	b29a      	uxth	r2, r3
 800e816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	029b      	lsls	r3, r3, #10
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4313      	orrs	r3, r2
 800e822:	b29a      	uxth	r2, r3
 800e824:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e826:	801a      	strh	r2, [r3, #0]
 800e828:	e030      	b.n	800e88c <USB_EPStartXfer+0xcfa>
 800e82a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e82e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	785b      	ldrb	r3, [r3, #1]
 800e836:	2b01      	cmp	r3, #1
 800e838:	d128      	bne.n	800e88c <USB_EPStartXfer+0xcfa>
 800e83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e83e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e84c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e856:	b29b      	uxth	r3, r3
 800e858:	461a      	mov	r2, r3
 800e85a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e85e:	4413      	add	r3, r2
 800e860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	00da      	lsls	r2, r3, #3
 800e872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e876:	4413      	add	r3, r2
 800e878:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e87c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e884:	b29a      	uxth	r2, r3
 800e886:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e88a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	891b      	ldrh	r3, [r3, #8]
 800e898:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e89c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6959      	ldr	r1, [r3, #20]
 800e8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e8b2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e8b6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e8ba:	6800      	ldr	r0, [r0, #0]
 800e8bc:	f000 fe54 	bl	800f568 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	881b      	ldrh	r3, [r3, #0]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8e6:	817b      	strh	r3, [r7, #10]
 800e8e8:	897b      	ldrh	r3, [r7, #10]
 800e8ea:	f083 0310 	eor.w	r3, r3, #16
 800e8ee:	817b      	strh	r3, [r7, #10]
 800e8f0:	897b      	ldrh	r3, [r7, #10]
 800e8f2:	f083 0320 	eor.w	r3, r3, #32
 800e8f6:	817b      	strh	r3, [r7, #10]
 800e8f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	441a      	add	r2, r3
 800e912:	897b      	ldrh	r3, [r7, #10]
 800e914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e91c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e924:	b29b      	uxth	r3, r3
 800e926:	8013      	strh	r3, [r2, #0]
 800e928:	f000 bcde 	b.w	800f2e8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e92c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e930:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	7b1b      	ldrb	r3, [r3, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	f040 80bb 	bne.w	800eab4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	699a      	ldr	r2, [r3, #24]
 800e94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	429a      	cmp	r2, r3
 800e958:	d917      	bls.n	800e98a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e95e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800e96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e96e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	699a      	ldr	r2, [r3, #24]
 800e976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e97a:	1ad2      	subs	r2, r2, r3
 800e97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	619a      	str	r2, [r3, #24]
 800e988:	e00e      	b.n	800e9a8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e98a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e98e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699b      	ldr	r3, [r3, #24]
 800e996:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e99e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	00da      	lsls	r2, r3, #3
 800e9e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9e4:	4413      	add	r3, r2
 800e9e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e9ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea00:	801a      	strh	r2, [r3, #0]
 800ea02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea06:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea08:	d924      	bls.n	800ea54 <USB_EPStartXfer+0xec2>
 800ea0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea0e:	095b      	lsrs	r3, r3, #5
 800ea10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea18:	f003 031f 	and.w	r3, r3, #31
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d104      	bne.n	800ea2a <USB_EPStartXfer+0xe98>
 800ea20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea24:	3b01      	subs	r3, #1
 800ea26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea2e:	881b      	ldrh	r3, [r3, #0]
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	029b      	lsls	r3, r3, #10
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea4e:	801a      	strh	r2, [r3, #0]
 800ea50:	f000 bc10 	b.w	800f274 <USB_EPStartXfer+0x16e2>
 800ea54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d10c      	bne.n	800ea76 <USB_EPStartXfer+0xee4>
 800ea5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea60:	881b      	ldrh	r3, [r3, #0]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea72:	801a      	strh	r2, [r3, #0]
 800ea74:	e3fe      	b.n	800f274 <USB_EPStartXfer+0x16e2>
 800ea76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea7a:	085b      	lsrs	r3, r3, #1
 800ea7c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea84:	f003 0301 	and.w	r3, r3, #1
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d004      	beq.n	800ea96 <USB_EPStartXfer+0xf04>
 800ea8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea90:	3301      	adds	r3, #1
 800ea92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	029b      	lsls	r3, r3, #10
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	b29a      	uxth	r2, r3
 800eaac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eab0:	801a      	strh	r2, [r3, #0]
 800eab2:	e3df      	b.n	800f274 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800eab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	78db      	ldrb	r3, [r3, #3]
 800eac0:	2b02      	cmp	r3, #2
 800eac2:	f040 8218 	bne.w	800eef6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800eac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	785b      	ldrb	r3, [r3, #1]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	f040 809d 	bne.w	800ec12 <USB_EPStartXfer+0x1080>
 800ead8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eadc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eafc:	4413      	add	r3, r2
 800eafe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eb02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	781b      	ldrb	r3, [r3, #0]
 800eb0e:	00da      	lsls	r2, r3, #3
 800eb10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb14:	4413      	add	r3, r2
 800eb16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eb1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eb1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb30:	801a      	strh	r2, [r3, #0]
 800eb32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb40:	d92b      	bls.n	800eb9a <USB_EPStartXfer+0x1008>
 800eb42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	095b      	lsrs	r3, r3, #5
 800eb50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	f003 031f 	and.w	r3, r3, #31
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d104      	bne.n	800eb72 <USB_EPStartXfer+0xfe0>
 800eb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb76:	881b      	ldrh	r3, [r3, #0]
 800eb78:	b29a      	uxth	r2, r3
 800eb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	029b      	lsls	r3, r3, #10
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	4313      	orrs	r3, r2
 800eb86:	b29b      	uxth	r3, r3
 800eb88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb96:	801a      	strh	r2, [r3, #0]
 800eb98:	e070      	b.n	800ec7c <USB_EPStartXfer+0x10ea>
 800eb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10c      	bne.n	800ebc4 <USB_EPStartXfer+0x1032>
 800ebaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebae:	881b      	ldrh	r3, [r3, #0]
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebc0:	801a      	strh	r2, [r3, #0]
 800ebc2:	e05b      	b.n	800ec7c <USB_EPStartXfer+0x10ea>
 800ebc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	691b      	ldr	r3, [r3, #16]
 800ebd0:	085b      	lsrs	r3, r3, #1
 800ebd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	691b      	ldr	r3, [r3, #16]
 800ebe2:	f003 0301 	and.w	r3, r3, #1
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d004      	beq.n	800ebf4 <USB_EPStartXfer+0x1062>
 800ebea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebee:	3301      	adds	r3, #1
 800ebf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebf8:	881b      	ldrh	r3, [r3, #0]
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	029b      	lsls	r3, r3, #10
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	4313      	orrs	r3, r2
 800ec08:	b29a      	uxth	r2, r3
 800ec0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec0e:	801a      	strh	r2, [r3, #0]
 800ec10:	e034      	b.n	800ec7c <USB_EPStartXfer+0x10ea>
 800ec12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	785b      	ldrb	r3, [r3, #1]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d12c      	bne.n	800ec7c <USB_EPStartXfer+0x10ea>
 800ec22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	461a      	mov	r2, r3
 800ec42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec46:	4413      	add	r3, r2
 800ec48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	00da      	lsls	r2, r3, #3
 800ec5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec5e:	4413      	add	r3, r2
 800ec60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ec64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	691b      	ldr	r3, [r3, #16]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec7a:	801a      	strh	r2, [r3, #0]
 800ec7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	785b      	ldrb	r3, [r3, #1]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f040 809d 	bne.w	800edd6 <USB_EPStartXfer+0x1244>
 800ec9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	461a      	mov	r2, r3
 800ecbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecc0:	4413      	add	r3, r2
 800ecc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ecc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	00da      	lsls	r2, r3, #3
 800ecd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecd8:	4413      	add	r3, r2
 800ecda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ecde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ece2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecee:	b29a      	uxth	r2, r3
 800ecf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecf4:	801a      	strh	r2, [r3, #0]
 800ecf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	691b      	ldr	r3, [r3, #16]
 800ed02:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed04:	d92b      	bls.n	800ed5e <USB_EPStartXfer+0x11cc>
 800ed06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	691b      	ldr	r3, [r3, #16]
 800ed12:	095b      	lsrs	r3, r3, #5
 800ed14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	f003 031f 	and.w	r3, r3, #31
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d104      	bne.n	800ed36 <USB_EPStartXfer+0x11a4>
 800ed2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed30:	3b01      	subs	r3, #1
 800ed32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed3a:	881b      	ldrh	r3, [r3, #0]
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	029b      	lsls	r3, r3, #10
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	b29b      	uxth	r3, r3
 800ed4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed54:	b29a      	uxth	r2, r3
 800ed56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed5a:	801a      	strh	r2, [r3, #0]
 800ed5c:	e069      	b.n	800ee32 <USB_EPStartXfer+0x12a0>
 800ed5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10c      	bne.n	800ed88 <USB_EPStartXfer+0x11f6>
 800ed6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed72:	881b      	ldrh	r3, [r3, #0]
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed84:	801a      	strh	r2, [r3, #0]
 800ed86:	e054      	b.n	800ee32 <USB_EPStartXfer+0x12a0>
 800ed88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	691b      	ldr	r3, [r3, #16]
 800ed94:	085b      	lsrs	r3, r3, #1
 800ed96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d004      	beq.n	800edb8 <USB_EPStartXfer+0x1226>
 800edae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edb2:	3301      	adds	r3, #1
 800edb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800edb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800edc4:	b29b      	uxth	r3, r3
 800edc6:	029b      	lsls	r3, r3, #10
 800edc8:	b29b      	uxth	r3, r3
 800edca:	4313      	orrs	r3, r2
 800edcc:	b29a      	uxth	r2, r3
 800edce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edd2:	801a      	strh	r2, [r3, #0]
 800edd4:	e02d      	b.n	800ee32 <USB_EPStartXfer+0x12a0>
 800edd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	785b      	ldrb	r3, [r3, #1]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d125      	bne.n	800ee32 <USB_EPStartXfer+0x12a0>
 800ede6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	461a      	mov	r2, r3
 800edf8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800edfc:	4413      	add	r3, r2
 800edfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ee02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	00da      	lsls	r2, r3, #3
 800ee10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee14:	4413      	add	r3, r2
 800ee16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ee1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ee1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee30:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ee32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f000 8218 	beq.w	800f274 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ee44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d005      	beq.n	800ee7c <USB_EPStartXfer+0x12ea>
 800ee70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d10d      	bne.n	800ee98 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f040 81f5 	bne.w	800f274 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee8a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f040 81ee 	bne.w	800f274 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ee98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eeba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eebe:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800eec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	441a      	add	r2, r3
 800eedc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eeec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	8013      	strh	r3, [r2, #0]
 800eef4:	e1be      	b.n	800f274 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800eef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eefa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	78db      	ldrb	r3, [r3, #3]
 800ef02:	2b01      	cmp	r3, #1
 800ef04:	f040 81b4 	bne.w	800f270 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ef08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	699a      	ldr	r2, [r3, #24]
 800ef14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d917      	bls.n	800ef54 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ef24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ef34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	699a      	ldr	r2, [r3, #24]
 800ef40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef44:	1ad2      	subs	r2, r2, r3
 800ef46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	619a      	str	r2, [r3, #24]
 800ef52:	e00e      	b.n	800ef72 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ef54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	699b      	ldr	r3, [r3, #24]
 800ef60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ef64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ef72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	785b      	ldrb	r3, [r3, #1]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f040 8085 	bne.w	800f08e <USB_EPStartXfer+0x14fc>
 800ef84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ef92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800efa0:	b29b      	uxth	r3, r3
 800efa2:	461a      	mov	r2, r3
 800efa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800efa8:	4413      	add	r3, r2
 800efaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800efae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	00da      	lsls	r2, r3, #3
 800efbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800efc0:	4413      	add	r3, r2
 800efc2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800efc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800efca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efdc:	801a      	strh	r2, [r3, #0]
 800efde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efe2:	2b3e      	cmp	r3, #62	@ 0x3e
 800efe4:	d923      	bls.n	800f02e <USB_EPStartXfer+0x149c>
 800efe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efea:	095b      	lsrs	r3, r3, #5
 800efec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800eff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eff4:	f003 031f 	and.w	r3, r3, #31
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d104      	bne.n	800f006 <USB_EPStartXfer+0x1474>
 800effc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f000:	3b01      	subs	r3, #1
 800f002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f00a:	881b      	ldrh	r3, [r3, #0]
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f012:	b29b      	uxth	r3, r3
 800f014:	029b      	lsls	r3, r3, #10
 800f016:	b29b      	uxth	r3, r3
 800f018:	4313      	orrs	r3, r2
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f020:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f024:	b29a      	uxth	r2, r3
 800f026:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f02a:	801a      	strh	r2, [r3, #0]
 800f02c:	e060      	b.n	800f0f0 <USB_EPStartXfer+0x155e>
 800f02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f032:	2b00      	cmp	r3, #0
 800f034:	d10c      	bne.n	800f050 <USB_EPStartXfer+0x14be>
 800f036:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f03a:	881b      	ldrh	r3, [r3, #0]
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f046:	b29a      	uxth	r2, r3
 800f048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f04c:	801a      	strh	r2, [r3, #0]
 800f04e:	e04f      	b.n	800f0f0 <USB_EPStartXfer+0x155e>
 800f050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f054:	085b      	lsrs	r3, r3, #1
 800f056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f05a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f05e:	f003 0301 	and.w	r3, r3, #1
 800f062:	2b00      	cmp	r3, #0
 800f064:	d004      	beq.n	800f070 <USB_EPStartXfer+0x14de>
 800f066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f06a:	3301      	adds	r3, #1
 800f06c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	b29a      	uxth	r2, r3
 800f078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f07c:	b29b      	uxth	r3, r3
 800f07e:	029b      	lsls	r3, r3, #10
 800f080:	b29b      	uxth	r3, r3
 800f082:	4313      	orrs	r3, r2
 800f084:	b29a      	uxth	r2, r3
 800f086:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f08a:	801a      	strh	r2, [r3, #0]
 800f08c:	e030      	b.n	800f0f0 <USB_EPStartXfer+0x155e>
 800f08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	785b      	ldrb	r3, [r3, #1]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d128      	bne.n	800f0f0 <USB_EPStartXfer+0x155e>
 800f09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	461a      	mov	r2, r3
 800f0be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0c2:	4413      	add	r3, r2
 800f0c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	00da      	lsls	r2, r3, #3
 800f0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0da:	4413      	add	r3, r2
 800f0dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f0ee:	801a      	strh	r2, [r3, #0]
 800f0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	785b      	ldrb	r3, [r3, #1]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f040 8085 	bne.w	800f21a <USB_EPStartXfer+0x1688>
 800f110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f11e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f122:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	461a      	mov	r2, r3
 800f130:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f134:	4413      	add	r3, r2
 800f136:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	00da      	lsls	r2, r3, #3
 800f148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f14c:	4413      	add	r3, r2
 800f14e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f162:	b29a      	uxth	r2, r3
 800f164:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f168:	801a      	strh	r2, [r3, #0]
 800f16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f16e:	2b3e      	cmp	r3, #62	@ 0x3e
 800f170:	d923      	bls.n	800f1ba <USB_EPStartXfer+0x1628>
 800f172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f176:	095b      	lsrs	r3, r3, #5
 800f178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f180:	f003 031f 	and.w	r3, r3, #31
 800f184:	2b00      	cmp	r3, #0
 800f186:	d104      	bne.n	800f192 <USB_EPStartXfer+0x1600>
 800f188:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f18c:	3b01      	subs	r3, #1
 800f18e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	b29a      	uxth	r2, r3
 800f19a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	029b      	lsls	r3, r3, #10
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1b0:	b29a      	uxth	r2, r3
 800f1b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1b6:	801a      	strh	r2, [r3, #0]
 800f1b8:	e05c      	b.n	800f274 <USB_EPStartXfer+0x16e2>
 800f1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d10c      	bne.n	800f1dc <USB_EPStartXfer+0x164a>
 800f1c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1c6:	881b      	ldrh	r3, [r3, #0]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1d8:	801a      	strh	r2, [r3, #0]
 800f1da:	e04b      	b.n	800f274 <USB_EPStartXfer+0x16e2>
 800f1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d004      	beq.n	800f1fc <USB_EPStartXfer+0x166a>
 800f1f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f200:	881b      	ldrh	r3, [r3, #0]
 800f202:	b29a      	uxth	r2, r3
 800f204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f208:	b29b      	uxth	r3, r3
 800f20a:	029b      	lsls	r3, r3, #10
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	4313      	orrs	r3, r2
 800f210:	b29a      	uxth	r2, r3
 800f212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f216:	801a      	strh	r2, [r3, #0]
 800f218:	e02c      	b.n	800f274 <USB_EPStartXfer+0x16e2>
 800f21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	785b      	ldrb	r3, [r3, #1]
 800f226:	2b01      	cmp	r3, #1
 800f228:	d124      	bne.n	800f274 <USB_EPStartXfer+0x16e2>
 800f22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f22e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f238:	b29b      	uxth	r3, r3
 800f23a:	461a      	mov	r2, r3
 800f23c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f240:	4413      	add	r3, r2
 800f242:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	00da      	lsls	r2, r3, #3
 800f254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f258:	4413      	add	r3, r2
 800f25a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f25e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f266:	b29a      	uxth	r2, r3
 800f268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f26c:	801a      	strh	r2, [r3, #0]
 800f26e:	e001      	b.n	800f274 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f270:	2301      	movs	r3, #1
 800f272:	e03a      	b.n	800f2ea <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f27c:	681a      	ldr	r2, [r3, #0]
 800f27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	009b      	lsls	r3, r3, #2
 800f28c:	4413      	add	r3, r2
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	b29b      	uxth	r3, r3
 800f292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f29a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f29e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f2a6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f2aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f2b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	441a      	add	r2, r3
 800f2d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f2e8:	2300      	movs	r3, #0
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	785b      	ldrb	r3, [r3, #1]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d020      	beq.n	800f348 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4413      	add	r3, r2
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	b29b      	uxth	r3, r3
 800f314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f31c:	81bb      	strh	r3, [r7, #12]
 800f31e:	89bb      	ldrh	r3, [r7, #12]
 800f320:	f083 0310 	eor.w	r3, r3, #16
 800f324:	81bb      	strh	r3, [r7, #12]
 800f326:	687a      	ldr	r2, [r7, #4]
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	441a      	add	r2, r3
 800f330:	89bb      	ldrh	r3, [r7, #12]
 800f332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f33a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f342:	b29b      	uxth	r3, r3
 800f344:	8013      	strh	r3, [r2, #0]
 800f346:	e01f      	b.n	800f388 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f348:	687a      	ldr	r2, [r7, #4]
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	4413      	add	r3, r2
 800f352:	881b      	ldrh	r3, [r3, #0]
 800f354:	b29b      	uxth	r3, r3
 800f356:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f35a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f35e:	81fb      	strh	r3, [r7, #14]
 800f360:	89fb      	ldrh	r3, [r7, #14]
 800f362:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f366:	81fb      	strh	r3, [r7, #14]
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	441a      	add	r2, r3
 800f372:	89fb      	ldrh	r3, [r7, #14]
 800f374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f384:	b29b      	uxth	r3, r3
 800f386:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f388:	2300      	movs	r3, #0
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3714      	adds	r7, #20
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f396:	b480      	push	{r7}
 800f398:	b087      	sub	sp, #28
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	7b1b      	ldrb	r3, [r3, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f040 809d 	bne.w	800f4e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	785b      	ldrb	r3, [r3, #1]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d04c      	beq.n	800f44c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	4413      	add	r3, r2
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	823b      	strh	r3, [r7, #16]
 800f3c0:	8a3b      	ldrh	r3, [r7, #16]
 800f3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d01b      	beq.n	800f402 <USB_EPClearStall+0x6c>
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4413      	add	r3, r2
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3e0:	81fb      	strh	r3, [r7, #14]
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	441a      	add	r2, r3
 800f3ec:	89fb      	ldrh	r3, [r7, #14]
 800f3ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f3fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	78db      	ldrb	r3, [r3, #3]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d06c      	beq.n	800f4e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f40a:	687a      	ldr	r2, [r7, #4]
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	b29b      	uxth	r3, r3
 800f418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f41c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f420:	81bb      	strh	r3, [r7, #12]
 800f422:	89bb      	ldrh	r3, [r7, #12]
 800f424:	f083 0320 	eor.w	r3, r3, #32
 800f428:	81bb      	strh	r3, [r7, #12]
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	009b      	lsls	r3, r3, #2
 800f432:	441a      	add	r2, r3
 800f434:	89bb      	ldrh	r3, [r7, #12]
 800f436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f43a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f43e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f446:	b29b      	uxth	r3, r3
 800f448:	8013      	strh	r3, [r2, #0]
 800f44a:	e04b      	b.n	800f4e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f44c:	687a      	ldr	r2, [r7, #4]
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	82fb      	strh	r3, [r7, #22]
 800f45a:	8afb      	ldrh	r3, [r7, #22]
 800f45c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f460:	2b00      	cmp	r3, #0
 800f462:	d01b      	beq.n	800f49c <USB_EPClearStall+0x106>
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4413      	add	r3, r2
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	b29b      	uxth	r3, r3
 800f472:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f47a:	82bb      	strh	r3, [r7, #20]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	441a      	add	r2, r3
 800f486:	8abb      	ldrh	r3, [r7, #20]
 800f488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f48c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f490:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f498:	b29b      	uxth	r3, r3
 800f49a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	4413      	add	r3, r2
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4b2:	827b      	strh	r3, [r7, #18]
 800f4b4:	8a7b      	ldrh	r3, [r7, #18]
 800f4b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f4ba:	827b      	strh	r3, [r7, #18]
 800f4bc:	8a7b      	ldrh	r3, [r7, #18]
 800f4be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f4c2:	827b      	strh	r3, [r7, #18]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	441a      	add	r2, r3
 800f4ce:	8a7b      	ldrh	r3, [r7, #18]
 800f4d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	371c      	adds	r7, #28
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b083      	sub	sp, #12
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f4fe:	78fb      	ldrb	r3, [r7, #3]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d103      	bne.n	800f50c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2280      	movs	r2, #128	@ 0x80
 800f508:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	370c      	adds	r7, #12
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr

0800f51a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f51a:	b480      	push	{r7}
 800f51c:	b083      	sub	sp, #12
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f528:	b29b      	uxth	r3, r3
 800f52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f532:	b29a      	uxth	r2, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	370c      	adds	r7, #12
 800f540:	46bd      	mov	sp, r7
 800f542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f546:	4770      	bx	lr

0800f548 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f556:	b29b      	uxth	r3, r3
 800f558:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f55a:	68fb      	ldr	r3, [r7, #12]
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3714      	adds	r7, #20
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f568:	b480      	push	{r7}
 800f56a:	b08b      	sub	sp, #44	@ 0x2c
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	4611      	mov	r1, r2
 800f574:	461a      	mov	r2, r3
 800f576:	460b      	mov	r3, r1
 800f578:	80fb      	strh	r3, [r7, #6]
 800f57a:	4613      	mov	r3, r2
 800f57c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f57e:	88bb      	ldrh	r3, [r7, #4]
 800f580:	3301      	adds	r3, #1
 800f582:	085b      	lsrs	r3, r3, #1
 800f584:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f58e:	88fa      	ldrh	r2, [r7, #6]
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	4413      	add	r3, r2
 800f594:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f598:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f59e:	e01b      	b.n	800f5d8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	021b      	lsls	r3, r3, #8
 800f5ae:	b21a      	sxth	r2, r3
 800f5b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	b21b      	sxth	r3, r3
 800f5b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	8a7a      	ldrh	r2, [r7, #18]
 800f5be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	3302      	adds	r3, #2
 800f5c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e0      	bne.n	800f5a0 <USB_WritePMA+0x38>
  }
}
 800f5de:	bf00      	nop
 800f5e0:	bf00      	nop
 800f5e2:	372c      	adds	r7, #44	@ 0x2c
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b08b      	sub	sp, #44	@ 0x2c
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60f8      	str	r0, [r7, #12]
 800f5f4:	60b9      	str	r1, [r7, #8]
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	80fb      	strh	r3, [r7, #6]
 800f5fe:	4613      	mov	r3, r2
 800f600:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f602:	88bb      	ldrh	r3, [r7, #4]
 800f604:	085b      	lsrs	r3, r3, #1
 800f606:	b29b      	uxth	r3, r3
 800f608:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f612:	88fa      	ldrh	r2, [r7, #6]
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	4413      	add	r3, r2
 800f618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f61c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	627b      	str	r3, [r7, #36]	@ 0x24
 800f622:	e018      	b.n	800f656 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f624:	6a3b      	ldr	r3, [r7, #32]
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	b29b      	uxth	r3, r3
 800f62a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f62c:	6a3b      	ldr	r3, [r7, #32]
 800f62e:	3302      	adds	r3, #2
 800f630:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	b2da      	uxtb	r2, r3
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	3301      	adds	r3, #1
 800f63e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	0a1b      	lsrs	r3, r3, #8
 800f644:	b2da      	uxtb	r2, r3
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	3301      	adds	r3, #1
 800f64e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f652:	3b01      	subs	r3, #1
 800f654:	627b      	str	r3, [r7, #36]	@ 0x24
 800f656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1e3      	bne.n	800f624 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f65c:	88bb      	ldrh	r3, [r7, #4]
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	b29b      	uxth	r3, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	d007      	beq.n	800f678 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	881b      	ldrh	r3, [r3, #0]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	b2da      	uxtb	r2, r3
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	701a      	strb	r2, [r3, #0]
  }
}
 800f678:	bf00      	nop
 800f67a:	372c      	adds	r7, #44	@ 0x2c
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b084      	sub	sp, #16
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	460b      	mov	r3, r1
 800f68e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f690:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f694:	f002 fc74 	bl	8011f80 <USBD_static_malloc>
 800f698:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d109      	bne.n	800f6b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	32b0      	adds	r2, #176	@ 0xb0
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e0d4      	b.n	800f85e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f6b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f003 fa21 	bl	8012b02 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	32b0      	adds	r2, #176	@ 0xb0
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	32b0      	adds	r2, #176	@ 0xb0
 800f6da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	7c1b      	ldrb	r3, [r3, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d138      	bne.n	800f75e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f6ec:	4b5e      	ldr	r3, [pc, #376]	@ (800f868 <USBD_CDC_Init+0x1e4>)
 800f6ee:	7819      	ldrb	r1, [r3, #0]
 800f6f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6f4:	2202      	movs	r2, #2
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f002 fae9 	bl	8011cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f6fc:	4b5a      	ldr	r3, [pc, #360]	@ (800f868 <USBD_CDC_Init+0x1e4>)
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	f003 020f 	and.w	r2, r3, #15
 800f704:	6879      	ldr	r1, [r7, #4]
 800f706:	4613      	mov	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	4413      	add	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	440b      	add	r3, r1
 800f710:	3324      	adds	r3, #36	@ 0x24
 800f712:	2201      	movs	r2, #1
 800f714:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f716:	4b55      	ldr	r3, [pc, #340]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f718:	7819      	ldrb	r1, [r3, #0]
 800f71a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f71e:	2202      	movs	r2, #2
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f002 fad4 	bl	8011cce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f726:	4b51      	ldr	r3, [pc, #324]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	f003 020f 	and.w	r2, r3, #15
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	4613      	mov	r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	4413      	add	r3, r2
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	440b      	add	r3, r1
 800f73a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f73e:	2201      	movs	r2, #1
 800f740:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f742:	4b4b      	ldr	r3, [pc, #300]	@ (800f870 <USBD_CDC_Init+0x1ec>)
 800f744:	781b      	ldrb	r3, [r3, #0]
 800f746:	f003 020f 	and.w	r2, r3, #15
 800f74a:	6879      	ldr	r1, [r7, #4]
 800f74c:	4613      	mov	r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	4413      	add	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	440b      	add	r3, r1
 800f756:	3326      	adds	r3, #38	@ 0x26
 800f758:	2210      	movs	r2, #16
 800f75a:	801a      	strh	r2, [r3, #0]
 800f75c:	e035      	b.n	800f7ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f75e:	4b42      	ldr	r3, [pc, #264]	@ (800f868 <USBD_CDC_Init+0x1e4>)
 800f760:	7819      	ldrb	r1, [r3, #0]
 800f762:	2340      	movs	r3, #64	@ 0x40
 800f764:	2202      	movs	r2, #2
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f002 fab1 	bl	8011cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f76c:	4b3e      	ldr	r3, [pc, #248]	@ (800f868 <USBD_CDC_Init+0x1e4>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f003 020f 	and.w	r2, r3, #15
 800f774:	6879      	ldr	r1, [r7, #4]
 800f776:	4613      	mov	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4413      	add	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	440b      	add	r3, r1
 800f780:	3324      	adds	r3, #36	@ 0x24
 800f782:	2201      	movs	r2, #1
 800f784:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f786:	4b39      	ldr	r3, [pc, #228]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f788:	7819      	ldrb	r1, [r3, #0]
 800f78a:	2340      	movs	r3, #64	@ 0x40
 800f78c:	2202      	movs	r2, #2
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f002 fa9d 	bl	8011cce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f794:	4b35      	ldr	r3, [pc, #212]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	f003 020f 	and.w	r2, r3, #15
 800f79c:	6879      	ldr	r1, [r7, #4]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	4413      	add	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	440b      	add	r3, r1
 800f7a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f7b0:	4b2f      	ldr	r3, [pc, #188]	@ (800f870 <USBD_CDC_Init+0x1ec>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 020f 	and.w	r2, r3, #15
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3326      	adds	r3, #38	@ 0x26
 800f7c6:	2210      	movs	r2, #16
 800f7c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f7ca:	4b29      	ldr	r3, [pc, #164]	@ (800f870 <USBD_CDC_Init+0x1ec>)
 800f7cc:	7819      	ldrb	r1, [r3, #0]
 800f7ce:	2308      	movs	r3, #8
 800f7d0:	2203      	movs	r2, #3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f002 fa7b 	bl	8011cce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f7d8:	4b25      	ldr	r3, [pc, #148]	@ (800f870 <USBD_CDC_Init+0x1ec>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f003 020f 	and.w	r2, r3, #15
 800f7e0:	6879      	ldr	r1, [r7, #4]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	4413      	add	r3, r2
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	440b      	add	r3, r1
 800f7ec:	3324      	adds	r3, #36	@ 0x24
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	33b0      	adds	r3, #176	@ 0xb0
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	4413      	add	r3, r2
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2200      	movs	r2, #0
 800f812:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f828:	2302      	movs	r3, #2
 800f82a:	e018      	b.n	800f85e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	7c1b      	ldrb	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10a      	bne.n	800f84a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f834:	4b0d      	ldr	r3, [pc, #52]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f836:	7819      	ldrb	r1, [r3, #0]
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f83e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f002 fb32 	bl	8011eac <USBD_LL_PrepareReceive>
 800f848:	e008      	b.n	800f85c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f84a:	4b08      	ldr	r3, [pc, #32]	@ (800f86c <USBD_CDC_Init+0x1e8>)
 800f84c:	7819      	ldrb	r1, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f854:	2340      	movs	r3, #64	@ 0x40
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f002 fb28 	bl	8011eac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	200000bb 	.word	0x200000bb
 800f86c:	200000bc 	.word	0x200000bc
 800f870:	200000bd 	.word	0x200000bd

0800f874 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	460b      	mov	r3, r1
 800f87e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f880:	4b3a      	ldr	r3, [pc, #232]	@ (800f96c <USBD_CDC_DeInit+0xf8>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	4619      	mov	r1, r3
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f002 fa47 	bl	8011d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f88c:	4b37      	ldr	r3, [pc, #220]	@ (800f96c <USBD_CDC_DeInit+0xf8>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	f003 020f 	and.w	r2, r3, #15
 800f894:	6879      	ldr	r1, [r7, #4]
 800f896:	4613      	mov	r3, r2
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	4413      	add	r3, r2
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	440b      	add	r3, r1
 800f8a0:	3324      	adds	r3, #36	@ 0x24
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f8a6:	4b32      	ldr	r3, [pc, #200]	@ (800f970 <USBD_CDC_DeInit+0xfc>)
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f002 fa34 	bl	8011d1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f8b2:	4b2f      	ldr	r3, [pc, #188]	@ (800f970 <USBD_CDC_DeInit+0xfc>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 020f 	and.w	r2, r3, #15
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f8ce:	4b29      	ldr	r3, [pc, #164]	@ (800f974 <USBD_CDC_DeInit+0x100>)
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f002 fa20 	bl	8011d1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f8da:	4b26      	ldr	r3, [pc, #152]	@ (800f974 <USBD_CDC_DeInit+0x100>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f003 020f 	and.w	r2, r3, #15
 800f8e2:	6879      	ldr	r1, [r7, #4]
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	4413      	add	r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	440b      	add	r3, r1
 800f8ee:	3324      	adds	r3, #36	@ 0x24
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f8f4:	4b1f      	ldr	r3, [pc, #124]	@ (800f974 <USBD_CDC_DeInit+0x100>)
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	f003 020f 	and.w	r2, r3, #15
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	4613      	mov	r3, r2
 800f900:	009b      	lsls	r3, r3, #2
 800f902:	4413      	add	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	440b      	add	r3, r1
 800f908:	3326      	adds	r3, #38	@ 0x26
 800f90a:	2200      	movs	r2, #0
 800f90c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	32b0      	adds	r2, #176	@ 0xb0
 800f918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d01f      	beq.n	800f960 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	33b0      	adds	r3, #176	@ 0xb0
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	32b0      	adds	r2, #176	@ 0xb0
 800f93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f942:	4618      	mov	r0, r3
 800f944:	f002 fb2a 	bl	8011f9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	32b0      	adds	r2, #176	@ 0xb0
 800f952:	2100      	movs	r1, #0
 800f954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3708      	adds	r7, #8
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	200000bb 	.word	0x200000bb
 800f970:	200000bc 	.word	0x200000bc
 800f974:	200000bd 	.word	0x200000bd

0800f978 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	32b0      	adds	r2, #176	@ 0xb0
 800f98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f990:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f992:	2300      	movs	r3, #0
 800f994:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f996:	2300      	movs	r3, #0
 800f998:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d101      	bne.n	800f9a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f9a4:	2303      	movs	r3, #3
 800f9a6:	e0bf      	b.n	800fb28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d050      	beq.n	800fa56 <USBD_CDC_Setup+0xde>
 800f9b4:	2b20      	cmp	r3, #32
 800f9b6:	f040 80af 	bne.w	800fb18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	88db      	ldrh	r3, [r3, #6]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d03a      	beq.n	800fa38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	b25b      	sxtb	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	da1b      	bge.n	800fa04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	33b0      	adds	r3, #176	@ 0xb0
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	4413      	add	r3, r2
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	689b      	ldr	r3, [r3, #8]
 800f9de:	683a      	ldr	r2, [r7, #0]
 800f9e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f9e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	88d2      	ldrh	r2, [r2, #6]
 800f9e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	88db      	ldrh	r3, [r3, #6]
 800f9ee:	2b07      	cmp	r3, #7
 800f9f0:	bf28      	it	cs
 800f9f2:	2307      	movcs	r3, #7
 800f9f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	89fa      	ldrh	r2, [r7, #14]
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f001 fd47 	bl	8011490 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fa02:	e090      	b.n	800fb26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	785a      	ldrb	r2, [r3, #1]
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	88db      	ldrh	r3, [r3, #6]
 800fa12:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa14:	d803      	bhi.n	800fa1e <USBD_CDC_Setup+0xa6>
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	88db      	ldrh	r3, [r3, #6]
 800fa1a:	b2da      	uxtb	r2, r3
 800fa1c:	e000      	b.n	800fa20 <USBD_CDC_Setup+0xa8>
 800fa1e:	2240      	movs	r2, #64	@ 0x40
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fa26:	6939      	ldr	r1, [r7, #16]
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f001 fd59 	bl	80114e8 <USBD_CtlPrepareRx>
      break;
 800fa36:	e076      	b.n	800fb26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	33b0      	adds	r3, #176	@ 0xb0
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	683a      	ldr	r2, [r7, #0]
 800fa4c:	7850      	ldrb	r0, [r2, #1]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	6839      	ldr	r1, [r7, #0]
 800fa52:	4798      	blx	r3
      break;
 800fa54:	e067      	b.n	800fb26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	785b      	ldrb	r3, [r3, #1]
 800fa5a:	2b0b      	cmp	r3, #11
 800fa5c:	d851      	bhi.n	800fb02 <USBD_CDC_Setup+0x18a>
 800fa5e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa64 <USBD_CDC_Setup+0xec>)
 800fa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa64:	0800fa95 	.word	0x0800fa95
 800fa68:	0800fb11 	.word	0x0800fb11
 800fa6c:	0800fb03 	.word	0x0800fb03
 800fa70:	0800fb03 	.word	0x0800fb03
 800fa74:	0800fb03 	.word	0x0800fb03
 800fa78:	0800fb03 	.word	0x0800fb03
 800fa7c:	0800fb03 	.word	0x0800fb03
 800fa80:	0800fb03 	.word	0x0800fb03
 800fa84:	0800fb03 	.word	0x0800fb03
 800fa88:	0800fb03 	.word	0x0800fb03
 800fa8c:	0800fabf 	.word	0x0800fabf
 800fa90:	0800fae9 	.word	0x0800fae9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	d107      	bne.n	800fab0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800faa0:	f107 030a 	add.w	r3, r7, #10
 800faa4:	2202      	movs	r2, #2
 800faa6:	4619      	mov	r1, r3
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f001 fcf1 	bl	8011490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800faae:	e032      	b.n	800fb16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f001 fc6f 	bl	8011396 <USBD_CtlError>
            ret = USBD_FAIL;
 800fab8:	2303      	movs	r3, #3
 800faba:	75fb      	strb	r3, [r7, #23]
          break;
 800fabc:	e02b      	b.n	800fb16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2b03      	cmp	r3, #3
 800fac8:	d107      	bne.n	800fada <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800faca:	f107 030d 	add.w	r3, r7, #13
 800face:	2201      	movs	r2, #1
 800fad0:	4619      	mov	r1, r3
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f001 fcdc 	bl	8011490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fad8:	e01d      	b.n	800fb16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f001 fc5a 	bl	8011396 <USBD_CtlError>
            ret = USBD_FAIL;
 800fae2:	2303      	movs	r3, #3
 800fae4:	75fb      	strb	r3, [r7, #23]
          break;
 800fae6:	e016      	b.n	800fb16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b03      	cmp	r3, #3
 800faf2:	d00f      	beq.n	800fb14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f001 fc4d 	bl	8011396 <USBD_CtlError>
            ret = USBD_FAIL;
 800fafc:	2303      	movs	r3, #3
 800fafe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fb00:	e008      	b.n	800fb14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f001 fc46 	bl	8011396 <USBD_CtlError>
          ret = USBD_FAIL;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	75fb      	strb	r3, [r7, #23]
          break;
 800fb0e:	e002      	b.n	800fb16 <USBD_CDC_Setup+0x19e>
          break;
 800fb10:	bf00      	nop
 800fb12:	e008      	b.n	800fb26 <USBD_CDC_Setup+0x1ae>
          break;
 800fb14:	bf00      	nop
      }
      break;
 800fb16:	e006      	b.n	800fb26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fb18:	6839      	ldr	r1, [r7, #0]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f001 fc3b 	bl	8011396 <USBD_CtlError>
      ret = USBD_FAIL;
 800fb20:	2303      	movs	r3, #3
 800fb22:	75fb      	strb	r3, [r7, #23]
      break;
 800fb24:	bf00      	nop
  }

  return (uint8_t)ret;
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	32b0      	adds	r2, #176	@ 0xb0
 800fb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d101      	bne.n	800fb5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fb56:	2303      	movs	r3, #3
 800fb58:	e065      	b.n	800fc26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	32b0      	adds	r2, #176	@ 0xb0
 800fb64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fb6a:	78fb      	ldrb	r3, [r7, #3]
 800fb6c:	f003 020f 	and.w	r2, r3, #15
 800fb70:	6879      	ldr	r1, [r7, #4]
 800fb72:	4613      	mov	r3, r2
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4413      	add	r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	440b      	add	r3, r1
 800fb7c:	3318      	adds	r3, #24
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d02f      	beq.n	800fbe4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fb84:	78fb      	ldrb	r3, [r7, #3]
 800fb86:	f003 020f 	and.w	r2, r3, #15
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	440b      	add	r3, r1
 800fb96:	3318      	adds	r3, #24
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	78fb      	ldrb	r3, [r7, #3]
 800fb9c:	f003 010f 	and.w	r1, r3, #15
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	460b      	mov	r3, r1
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	440b      	add	r3, r1
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	4403      	add	r3, r0
 800fbac:	3320      	adds	r3, #32
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800fbb4:	fb01 f303 	mul.w	r3, r1, r3
 800fbb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d112      	bne.n	800fbe4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fbbe:	78fb      	ldrb	r3, [r7, #3]
 800fbc0:	f003 020f 	and.w	r2, r3, #15
 800fbc4:	6879      	ldr	r1, [r7, #4]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	4413      	add	r3, r2
 800fbcc:	009b      	lsls	r3, r3, #2
 800fbce:	440b      	add	r3, r1
 800fbd0:	3318      	adds	r3, #24
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fbd6:	78f9      	ldrb	r1, [r7, #3]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	2200      	movs	r2, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f002 f944 	bl	8011e6a <USBD_LL_Transmit>
 800fbe2:	e01f      	b.n	800fc24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fbe4:	68bb      	ldr	r3, [r7, #8]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	33b0      	adds	r3, #176	@ 0xb0
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	4413      	add	r3, r2
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d010      	beq.n	800fc24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	33b0      	adds	r3, #176	@ 0xb0
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4413      	add	r3, r2
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	68ba      	ldr	r2, [r7, #8]
 800fc16:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fc20:	78fa      	ldrb	r2, [r7, #3]
 800fc22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b084      	sub	sp, #16
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	460b      	mov	r3, r1
 800fc38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	32b0      	adds	r2, #176	@ 0xb0
 800fc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	32b0      	adds	r2, #176	@ 0xb0
 800fc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d101      	bne.n	800fc60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fc5c:	2303      	movs	r3, #3
 800fc5e:	e01a      	b.n	800fc96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fc60:	78fb      	ldrb	r3, [r7, #3]
 800fc62:	4619      	mov	r1, r3
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f002 f942 	bl	8011eee <USBD_LL_GetRxDataSize>
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc78:	687a      	ldr	r2, [r7, #4]
 800fc7a:	33b0      	adds	r3, #176	@ 0xb0
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fc90:	4611      	mov	r1, r2
 800fc92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}

0800fc9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fc9e:	b580      	push	{r7, lr}
 800fca0:	b084      	sub	sp, #16
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	32b0      	adds	r2, #176	@ 0xb0
 800fcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d101      	bne.n	800fcc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e024      	b.n	800fd0a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	33b0      	adds	r3, #176	@ 0xb0
 800fcca:	009b      	lsls	r3, r3, #2
 800fccc:	4413      	add	r3, r2
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d019      	beq.n	800fd08 <USBD_CDC_EP0_RxReady+0x6a>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fcda:	2bff      	cmp	r3, #255	@ 0xff
 800fcdc:	d014      	beq.n	800fd08 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	33b0      	adds	r3, #176	@ 0xb0
 800fce8:	009b      	lsls	r3, r3, #2
 800fcea:	4413      	add	r3, r2
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fcf6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fcfe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	22ff      	movs	r2, #255	@ 0xff
 800fd04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fd08:	2300      	movs	r3, #0
}
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd1c:	2182      	movs	r1, #130	@ 0x82
 800fd1e:	4818      	ldr	r0, [pc, #96]	@ (800fd80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd20:	f000 fcd9 	bl	80106d6 <USBD_GetEpDesc>
 800fd24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd26:	2101      	movs	r1, #1
 800fd28:	4815      	ldr	r0, [pc, #84]	@ (800fd80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd2a:	f000 fcd4 	bl	80106d6 <USBD_GetEpDesc>
 800fd2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd30:	2181      	movs	r1, #129	@ 0x81
 800fd32:	4813      	ldr	r0, [pc, #76]	@ (800fd80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd34:	f000 fccf 	bl	80106d6 <USBD_GetEpDesc>
 800fd38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2210      	movs	r2, #16
 800fd44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d006      	beq.n	800fd5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd54:	711a      	strb	r2, [r3, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d006      	beq.n	800fd6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd68:	711a      	strb	r2, [r3, #4]
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2243      	movs	r2, #67	@ 0x43
 800fd72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd74:	4b02      	ldr	r3, [pc, #8]	@ (800fd80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	20000078 	.word	0x20000078

0800fd84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b086      	sub	sp, #24
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd8c:	2182      	movs	r1, #130	@ 0x82
 800fd8e:	4818      	ldr	r0, [pc, #96]	@ (800fdf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fd90:	f000 fca1 	bl	80106d6 <USBD_GetEpDesc>
 800fd94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd96:	2101      	movs	r1, #1
 800fd98:	4815      	ldr	r0, [pc, #84]	@ (800fdf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fd9a:	f000 fc9c 	bl	80106d6 <USBD_GetEpDesc>
 800fd9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fda0:	2181      	movs	r1, #129	@ 0x81
 800fda2:	4813      	ldr	r0, [pc, #76]	@ (800fdf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fda4:	f000 fc97 	bl	80106d6 <USBD_GetEpDesc>
 800fda8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	2210      	movs	r2, #16
 800fdb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdb6:	693b      	ldr	r3, [r7, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	711a      	strb	r2, [r3, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f042 0202 	orr.w	r2, r2, #2
 800fdc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d006      	beq.n	800fdde <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	711a      	strb	r2, [r3, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f042 0202 	orr.w	r2, r2, #2
 800fddc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2243      	movs	r2, #67	@ 0x43
 800fde2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fde4:	4b02      	ldr	r3, [pc, #8]	@ (800fdf0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3718      	adds	r7, #24
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20000078 	.word	0x20000078

0800fdf4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b086      	sub	sp, #24
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fdfc:	2182      	movs	r1, #130	@ 0x82
 800fdfe:	4818      	ldr	r0, [pc, #96]	@ (800fe60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe00:	f000 fc69 	bl	80106d6 <USBD_GetEpDesc>
 800fe04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fe06:	2101      	movs	r1, #1
 800fe08:	4815      	ldr	r0, [pc, #84]	@ (800fe60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe0a:	f000 fc64 	bl	80106d6 <USBD_GetEpDesc>
 800fe0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fe10:	2181      	movs	r1, #129	@ 0x81
 800fe12:	4813      	ldr	r0, [pc, #76]	@ (800fe60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe14:	f000 fc5f 	bl	80106d6 <USBD_GetEpDesc>
 800fe18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	2210      	movs	r2, #16
 800fe24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fe26:	693b      	ldr	r3, [r7, #16]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d006      	beq.n	800fe3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	2200      	movs	r2, #0
 800fe30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe34:	711a      	strb	r2, [r3, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d006      	beq.n	800fe4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe48:	711a      	strb	r2, [r3, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2243      	movs	r2, #67	@ 0x43
 800fe52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fe54:	4b02      	ldr	r3, [pc, #8]	@ (800fe60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	20000078 	.word	0x20000078

0800fe64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b083      	sub	sp, #12
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	220a      	movs	r2, #10
 800fe70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fe72:	4b03      	ldr	r3, [pc, #12]	@ (800fe80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	20000034 	.word	0x20000034

0800fe84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fe94:	2303      	movs	r3, #3
 800fe96:	e009      	b.n	800feac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	33b0      	adds	r3, #176	@ 0xb0
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	683a      	ldr	r2, [r7, #0]
 800fea8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800feaa:	2300      	movs	r3, #0
}
 800feac:	4618      	mov	r0, r3
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	32b0      	adds	r2, #176	@ 0xb0
 800fece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fed2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800feda:	2303      	movs	r3, #3
 800fedc:	e008      	b.n	800fef0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	68ba      	ldr	r2, [r7, #8]
 800fee2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	371c      	adds	r7, #28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b085      	sub	sp, #20
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
 800ff04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	32b0      	adds	r2, #176	@ 0xb0
 800ff10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff14:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ff1c:	2303      	movs	r3, #3
 800ff1e:	e004      	b.n	800ff2a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	683a      	ldr	r2, [r7, #0]
 800ff24:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3714      	adds	r7, #20
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr
	...

0800ff38 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b084      	sub	sp, #16
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	32b0      	adds	r2, #176	@ 0xb0
 800ff4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ff50:	2301      	movs	r3, #1
 800ff52:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d101      	bne.n	800ff5e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e025      	b.n	800ffaa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d11f      	bne.n	800ffa8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ff70:	4b10      	ldr	r3, [pc, #64]	@ (800ffb4 <USBD_CDC_TransmitPacket+0x7c>)
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	f003 020f 	and.w	r2, r3, #15
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	4613      	mov	r3, r2
 800ff82:	009b      	lsls	r3, r3, #2
 800ff84:	4413      	add	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	4403      	add	r3, r0
 800ff8a:	3318      	adds	r3, #24
 800ff8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ff8e:	4b09      	ldr	r3, [pc, #36]	@ (800ffb4 <USBD_CDC_TransmitPacket+0x7c>)
 800ff90:	7819      	ldrb	r1, [r3, #0]
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f001 ff63 	bl	8011e6a <USBD_LL_Transmit>

    ret = USBD_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ffa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
 800ffb2:	bf00      	nop
 800ffb4:	200000bb 	.word	0x200000bb

0800ffb8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	32b0      	adds	r2, #176	@ 0xb0
 800ffca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	32b0      	adds	r2, #176	@ 0xb0
 800ffda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d101      	bne.n	800ffe6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e018      	b.n	8010018 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7c1b      	ldrb	r3, [r3, #16]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10a      	bne.n	8010004 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ffee:	4b0c      	ldr	r3, [pc, #48]	@ (8010020 <USBD_CDC_ReceivePacket+0x68>)
 800fff0:	7819      	ldrb	r1, [r3, #0]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fffc:	6878      	ldr	r0, [r7, #4]
 800fffe:	f001 ff55 	bl	8011eac <USBD_LL_PrepareReceive>
 8010002:	e008      	b.n	8010016 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010004:	4b06      	ldr	r3, [pc, #24]	@ (8010020 <USBD_CDC_ReceivePacket+0x68>)
 8010006:	7819      	ldrb	r1, [r3, #0]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801000e:	2340      	movs	r3, #64	@ 0x40
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f001 ff4b 	bl	8011eac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010016:	2300      	movs	r3, #0
}
 8010018:	4618      	mov	r0, r3
 801001a:	3710      	adds	r7, #16
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	200000bc 	.word	0x200000bc

08010024 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b086      	sub	sp, #24
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	4613      	mov	r3, r2
 8010030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d10a      	bne.n	801004e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8010038:	4817      	ldr	r0, [pc, #92]	@ (8010098 <USBD_Init+0x74>)
 801003a:	f002 fd05 	bl	8012a48 <iprintf>
 801003e:	4817      	ldr	r0, [pc, #92]	@ (801009c <USBD_Init+0x78>)
 8010040:	f002 fd02 	bl	8012a48 <iprintf>
 8010044:	200a      	movs	r0, #10
 8010046:	f002 fd11 	bl	8012a6c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801004a:	2303      	movs	r3, #3
 801004c:	e01f      	b.n	801008e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d003      	beq.n	8010074 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2201      	movs	r2, #1
 8010078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	79fa      	ldrb	r2, [r7, #7]
 8010080:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f001 fda6 	bl	8011bd4 <USBD_LL_Init>
 8010088:	4603      	mov	r3, r0
 801008a:	75fb      	strb	r3, [r7, #23]

  return ret;
 801008c:	7dfb      	ldrb	r3, [r7, #23]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3718      	adds	r7, #24
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	080149f8 	.word	0x080149f8
 801009c:	08014a00 	.word	0x08014a00

080100a0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100aa:	2300      	movs	r3, #0
 80100ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10a      	bne.n	80100ca <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80100b4:	481a      	ldr	r0, [pc, #104]	@ (8010120 <USBD_RegisterClass+0x80>)
 80100b6:	f002 fcc7 	bl	8012a48 <iprintf>
 80100ba:	481a      	ldr	r0, [pc, #104]	@ (8010124 <USBD_RegisterClass+0x84>)
 80100bc:	f002 fcc4 	bl	8012a48 <iprintf>
 80100c0:	200a      	movs	r0, #10
 80100c2:	f002 fcd3 	bl	8012a6c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80100c6:	2303      	movs	r3, #3
 80100c8:	e025      	b.n	8010116 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	683a      	ldr	r2, [r7, #0]
 80100ce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	32ae      	adds	r2, #174	@ 0xae
 80100dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d00f      	beq.n	8010106 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	32ae      	adds	r2, #174	@ 0xae
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f6:	f107 020e 	add.w	r2, r7, #14
 80100fa:	4610      	mov	r0, r2
 80100fc:	4798      	blx	r3
 80100fe:	4602      	mov	r2, r0
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801010c:	1c5a      	adds	r2, r3, #1
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8010114:	2300      	movs	r3, #0
}
 8010116:	4618      	mov	r0, r3
 8010118:	3710      	adds	r7, #16
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	080149f8 	.word	0x080149f8
 8010124:	08014a18 	.word	0x08014a18

08010128 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f001 fdb1 	bl	8011c98 <USBD_LL_Start>
 8010136:	4603      	mov	r3, r0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010148:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b084      	sub	sp, #16
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
 801015e:	460b      	mov	r3, r1
 8010160:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010162:	2300      	movs	r3, #0
 8010164:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801016c:	2b00      	cmp	r3, #0
 801016e:	d009      	beq.n	8010184 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	78fa      	ldrb	r2, [r7, #3]
 801017a:	4611      	mov	r1, r2
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	4798      	blx	r3
 8010180:	4603      	mov	r3, r0
 8010182:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010184:	7bfb      	ldrb	r3, [r7, #15]
}
 8010186:	4618      	mov	r0, r3
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b084      	sub	sp, #16
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	460b      	mov	r3, r1
 8010198:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	78fa      	ldrb	r2, [r7, #3]
 80101a8:	4611      	mov	r1, r2
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	4798      	blx	r3
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d001      	beq.n	80101b8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80101b4:	2303      	movs	r3, #3
 80101b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80101b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b084      	sub	sp, #16
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
 80101ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f001 f8a4 	bl	8011322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2201      	movs	r2, #1
 80101de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80101e8:	461a      	mov	r2, r3
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80101f6:	f003 031f 	and.w	r3, r3, #31
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	d01a      	beq.n	8010234 <USBD_LL_SetupStage+0x72>
 80101fe:	2b02      	cmp	r3, #2
 8010200:	d822      	bhi.n	8010248 <USBD_LL_SetupStage+0x86>
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <USBD_LL_SetupStage+0x4a>
 8010206:	2b01      	cmp	r3, #1
 8010208:	d00a      	beq.n	8010220 <USBD_LL_SetupStage+0x5e>
 801020a:	e01d      	b.n	8010248 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010212:	4619      	mov	r1, r3
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 fad1 	bl	80107bc <USBD_StdDevReq>
 801021a:	4603      	mov	r3, r0
 801021c:	73fb      	strb	r3, [r7, #15]
      break;
 801021e:	e020      	b.n	8010262 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010226:	4619      	mov	r1, r3
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fb39 	bl	80108a0 <USBD_StdItfReq>
 801022e:	4603      	mov	r3, r0
 8010230:	73fb      	strb	r3, [r7, #15]
      break;
 8010232:	e016      	b.n	8010262 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 fb9b 	bl	8010978 <USBD_StdEPReq>
 8010242:	4603      	mov	r3, r0
 8010244:	73fb      	strb	r3, [r7, #15]
      break;
 8010246:	e00c      	b.n	8010262 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801024e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010252:	b2db      	uxtb	r3, r3
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f001 fd7e 	bl	8011d58 <USBD_LL_StallEP>
 801025c:	4603      	mov	r3, r0
 801025e:	73fb      	strb	r3, [r7, #15]
      break;
 8010260:	bf00      	nop
  }

  return ret;
 8010262:	7bfb      	ldrb	r3, [r7, #15]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b086      	sub	sp, #24
 8010270:	af00      	add	r7, sp, #0
 8010272:	60f8      	str	r0, [r7, #12]
 8010274:	460b      	mov	r3, r1
 8010276:	607a      	str	r2, [r7, #4]
 8010278:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801027a:	2300      	movs	r3, #0
 801027c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801027e:	7afb      	ldrb	r3, [r7, #11]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d16e      	bne.n	8010362 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801028a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010292:	2b03      	cmp	r3, #3
 8010294:	f040 8098 	bne.w	80103c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	689a      	ldr	r2, [r3, #8]
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d913      	bls.n	80102cc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	689a      	ldr	r2, [r3, #8]
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	1ad2      	subs	r2, r2, r3
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	68da      	ldr	r2, [r3, #12]
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	4293      	cmp	r3, r2
 80102bc:	bf28      	it	cs
 80102be:	4613      	movcs	r3, r2
 80102c0:	461a      	mov	r2, r3
 80102c2:	6879      	ldr	r1, [r7, #4]
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f001 f92c 	bl	8011522 <USBD_CtlContinueRx>
 80102ca:	e07d      	b.n	80103c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102d2:	f003 031f 	and.w	r3, r3, #31
 80102d6:	2b02      	cmp	r3, #2
 80102d8:	d014      	beq.n	8010304 <USBD_LL_DataOutStage+0x98>
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d81d      	bhi.n	801031a <USBD_LL_DataOutStage+0xae>
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d002      	beq.n	80102e8 <USBD_LL_DataOutStage+0x7c>
 80102e2:	2b01      	cmp	r3, #1
 80102e4:	d003      	beq.n	80102ee <USBD_LL_DataOutStage+0x82>
 80102e6:	e018      	b.n	801031a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80102e8:	2300      	movs	r3, #0
 80102ea:	75bb      	strb	r3, [r7, #22]
            break;
 80102ec:	e018      	b.n	8010320 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	4619      	mov	r1, r3
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f000 f9d2 	bl	80106a2 <USBD_CoreFindIF>
 80102fe:	4603      	mov	r3, r0
 8010300:	75bb      	strb	r3, [r7, #22]
            break;
 8010302:	e00d      	b.n	8010320 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801030a:	b2db      	uxtb	r3, r3
 801030c:	4619      	mov	r1, r3
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f000 f9d4 	bl	80106bc <USBD_CoreFindEP>
 8010314:	4603      	mov	r3, r0
 8010316:	75bb      	strb	r3, [r7, #22]
            break;
 8010318:	e002      	b.n	8010320 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801031a:	2300      	movs	r3, #0
 801031c:	75bb      	strb	r3, [r7, #22]
            break;
 801031e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010320:	7dbb      	ldrb	r3, [r7, #22]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d119      	bne.n	801035a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b03      	cmp	r3, #3
 8010330:	d113      	bne.n	801035a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010332:	7dba      	ldrb	r2, [r7, #22]
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	32ae      	adds	r2, #174	@ 0xae
 8010338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00b      	beq.n	801035a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010342:	7dba      	ldrb	r2, [r7, #22]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801034a:	7dba      	ldrb	r2, [r7, #22]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	32ae      	adds	r2, #174	@ 0xae
 8010350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010354:	691b      	ldr	r3, [r3, #16]
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f001 f8f2 	bl	8011544 <USBD_CtlSendStatus>
 8010360:	e032      	b.n	80103c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010362:	7afb      	ldrb	r3, [r7, #11]
 8010364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010368:	b2db      	uxtb	r3, r3
 801036a:	4619      	mov	r1, r3
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f000 f9a5 	bl	80106bc <USBD_CoreFindEP>
 8010372:	4603      	mov	r3, r0
 8010374:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010376:	7dbb      	ldrb	r3, [r7, #22]
 8010378:	2bff      	cmp	r3, #255	@ 0xff
 801037a:	d025      	beq.n	80103c8 <USBD_LL_DataOutStage+0x15c>
 801037c:	7dbb      	ldrb	r3, [r7, #22]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d122      	bne.n	80103c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b03      	cmp	r3, #3
 801038c:	d117      	bne.n	80103be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801038e:	7dba      	ldrb	r2, [r7, #22]
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	32ae      	adds	r2, #174	@ 0xae
 8010394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010398:	699b      	ldr	r3, [r3, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00f      	beq.n	80103be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801039e:	7dba      	ldrb	r2, [r7, #22]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80103a6:	7dba      	ldrb	r2, [r7, #22]
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	32ae      	adds	r2, #174	@ 0xae
 80103ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b0:	699b      	ldr	r3, [r3, #24]
 80103b2:	7afa      	ldrb	r2, [r7, #11]
 80103b4:	4611      	mov	r1, r2
 80103b6:	68f8      	ldr	r0, [r7, #12]
 80103b8:	4798      	blx	r3
 80103ba:	4603      	mov	r3, r0
 80103bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80103be:	7dfb      	ldrb	r3, [r7, #23]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d001      	beq.n	80103c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80103c4:	7dfb      	ldrb	r3, [r7, #23]
 80103c6:	e000      	b.n	80103ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3718      	adds	r7, #24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b086      	sub	sp, #24
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	60f8      	str	r0, [r7, #12]
 80103da:	460b      	mov	r3, r1
 80103dc:	607a      	str	r2, [r7, #4]
 80103de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80103e0:	7afb      	ldrb	r3, [r7, #11]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d16f      	bne.n	80104c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	3314      	adds	r3, #20
 80103ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	d15a      	bne.n	80104ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	689a      	ldr	r2, [r3, #8]
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d914      	bls.n	801042c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	689a      	ldr	r2, [r3, #8]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	1ad2      	subs	r2, r2, r3
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	461a      	mov	r2, r3
 8010416:	6879      	ldr	r1, [r7, #4]
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f001 f854 	bl	80114c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801041e:	2300      	movs	r3, #0
 8010420:	2200      	movs	r2, #0
 8010422:	2100      	movs	r1, #0
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f001 fd41 	bl	8011eac <USBD_LL_PrepareReceive>
 801042a:	e03f      	b.n	80104ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	68da      	ldr	r2, [r3, #12]
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	689b      	ldr	r3, [r3, #8]
 8010434:	429a      	cmp	r2, r3
 8010436:	d11c      	bne.n	8010472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010440:	429a      	cmp	r2, r3
 8010442:	d316      	bcc.n	8010472 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	685a      	ldr	r2, [r3, #4]
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801044e:	429a      	cmp	r2, r3
 8010450:	d20f      	bcs.n	8010472 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010452:	2200      	movs	r2, #0
 8010454:	2100      	movs	r1, #0
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f001 f835 	bl	80114c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010464:	2300      	movs	r3, #0
 8010466:	2200      	movs	r2, #0
 8010468:	2100      	movs	r1, #0
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f001 fd1e 	bl	8011eac <USBD_LL_PrepareReceive>
 8010470:	e01c      	b.n	80104ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b03      	cmp	r3, #3
 801047c:	d10f      	bne.n	801049e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d009      	beq.n	801049e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801049e:	2180      	movs	r1, #128	@ 0x80
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f001 fc59 	bl	8011d58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f001 f85f 	bl	801156a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d03a      	beq.n	801052c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	f7ff fe42 	bl	8010140 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2200      	movs	r2, #0
 80104c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80104c4:	e032      	b.n	801052c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80104c6:	7afb      	ldrb	r3, [r7, #11]
 80104c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	4619      	mov	r1, r3
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 f8f3 	bl	80106bc <USBD_CoreFindEP>
 80104d6:	4603      	mov	r3, r0
 80104d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80104da:	7dfb      	ldrb	r3, [r7, #23]
 80104dc:	2bff      	cmp	r3, #255	@ 0xff
 80104de:	d025      	beq.n	801052c <USBD_LL_DataInStage+0x15a>
 80104e0:	7dfb      	ldrb	r3, [r7, #23]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d122      	bne.n	801052c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	2b03      	cmp	r3, #3
 80104f0:	d11c      	bne.n	801052c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80104f2:	7dfa      	ldrb	r2, [r7, #23]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	32ae      	adds	r2, #174	@ 0xae
 80104f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d014      	beq.n	801052c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010502:	7dfa      	ldrb	r2, [r7, #23]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801050a:	7dfa      	ldrb	r2, [r7, #23]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	32ae      	adds	r2, #174	@ 0xae
 8010510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	7afa      	ldrb	r2, [r7, #11]
 8010518:	4611      	mov	r1, r2
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	4798      	blx	r3
 801051e:	4603      	mov	r3, r0
 8010520:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010522:	7dbb      	ldrb	r3, [r7, #22]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d001      	beq.n	801052c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010528:	7dbb      	ldrb	r3, [r7, #22]
 801052a:	e000      	b.n	801052e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801052c:	2300      	movs	r3, #0
}
 801052e:	4618      	mov	r0, r3
 8010530:	3718      	adds	r7, #24
 8010532:	46bd      	mov	sp, r7
 8010534:	bd80      	pop	{r7, pc}

08010536 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010536:	b580      	push	{r7, lr}
 8010538:	b084      	sub	sp, #16
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801053e:	2300      	movs	r3, #0
 8010540:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2201      	movs	r2, #1
 8010546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801056e:	2b00      	cmp	r3, #0
 8010570:	d014      	beq.n	801059c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00e      	beq.n	801059c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	6852      	ldr	r2, [r2, #4]
 801058a:	b2d2      	uxtb	r2, r2
 801058c:	4611      	mov	r1, r2
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	4798      	blx	r3
 8010592:	4603      	mov	r3, r0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d001      	beq.n	801059c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010598:	2303      	movs	r3, #3
 801059a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801059c:	2340      	movs	r3, #64	@ 0x40
 801059e:	2200      	movs	r2, #0
 80105a0:	2100      	movs	r1, #0
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f001 fb93 	bl	8011cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2201      	movs	r2, #1
 80105ac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2240      	movs	r2, #64	@ 0x40
 80105b4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80105b8:	2340      	movs	r3, #64	@ 0x40
 80105ba:	2200      	movs	r2, #0
 80105bc:	2180      	movs	r1, #128	@ 0x80
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f001 fb85 	bl	8011cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2240      	movs	r2, #64	@ 0x40
 80105ce:	621a      	str	r2, [r3, #32]

  return ret;
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80105da:	b480      	push	{r7}
 80105dc:	b083      	sub	sp, #12
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	460b      	mov	r3, r1
 80105e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	78fa      	ldrb	r2, [r7, #3]
 80105ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80105ec:	2300      	movs	r3, #0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b083      	sub	sp, #12
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010608:	b2db      	uxtb	r3, r3
 801060a:	2b04      	cmp	r3, #4
 801060c:	d006      	beq.n	801061c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010614:	b2da      	uxtb	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2204      	movs	r2, #4
 8010620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010624:	2300      	movs	r3, #0
}
 8010626:	4618      	mov	r0, r3
 8010628:	370c      	adds	r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010632:	b480      	push	{r7}
 8010634:	b083      	sub	sp, #12
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010640:	b2db      	uxtb	r3, r3
 8010642:	2b04      	cmp	r3, #4
 8010644:	d106      	bne.n	8010654 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801064c:	b2da      	uxtb	r2, r3
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	370c      	adds	r7, #12
 801065a:	46bd      	mov	sp, r7
 801065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010660:	4770      	bx	lr

08010662 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b082      	sub	sp, #8
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b03      	cmp	r3, #3
 8010674:	d110      	bne.n	8010698 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801067c:	2b00      	cmp	r3, #0
 801067e:	d00b      	beq.n	8010698 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010686:	69db      	ldr	r3, [r3, #28]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d005      	beq.n	8010698 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010692:	69db      	ldr	r3, [r3, #28]
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	460b      	mov	r3, r1
 80106ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80106ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	460b      	mov	r3, r1
 80106c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80106c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	370c      	adds	r7, #12
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b086      	sub	sp, #24
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	460b      	mov	r3, r1
 80106e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80106ea:	2300      	movs	r3, #0
 80106ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	885b      	ldrh	r3, [r3, #2]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	7812      	ldrb	r2, [r2, #0]
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d91f      	bls.n	801073c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010702:	e013      	b.n	801072c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010704:	f107 030a 	add.w	r3, r7, #10
 8010708:	4619      	mov	r1, r3
 801070a:	6978      	ldr	r0, [r7, #20]
 801070c:	f000 f81b 	bl	8010746 <USBD_GetNextDesc>
 8010710:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	785b      	ldrb	r3, [r3, #1]
 8010716:	2b05      	cmp	r3, #5
 8010718:	d108      	bne.n	801072c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	789b      	ldrb	r3, [r3, #2]
 8010722:	78fa      	ldrb	r2, [r7, #3]
 8010724:	429a      	cmp	r2, r3
 8010726:	d008      	beq.n	801073a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010728:	2300      	movs	r3, #0
 801072a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	885b      	ldrh	r3, [r3, #2]
 8010730:	b29a      	uxth	r2, r3
 8010732:	897b      	ldrh	r3, [r7, #10]
 8010734:	429a      	cmp	r2, r3
 8010736:	d8e5      	bhi.n	8010704 <USBD_GetEpDesc+0x2e>
 8010738:	e000      	b.n	801073c <USBD_GetEpDesc+0x66>
          break;
 801073a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801073c:	693b      	ldr	r3, [r7, #16]
}
 801073e:	4618      	mov	r0, r3
 8010740:	3718      	adds	r7, #24
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010746:	b480      	push	{r7}
 8010748:	b085      	sub	sp, #20
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	881b      	ldrh	r3, [r3, #0]
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	7812      	ldrb	r2, [r2, #0]
 801075c:	4413      	add	r3, r2
 801075e:	b29a      	uxth	r2, r3
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	781b      	ldrb	r3, [r3, #0]
 8010768:	461a      	mov	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010770:	68fb      	ldr	r3, [r7, #12]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801077e:	b480      	push	{r7}
 8010780:	b087      	sub	sp, #28
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	3301      	adds	r3, #1
 8010794:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801079c:	8a3b      	ldrh	r3, [r7, #16]
 801079e:	021b      	lsls	r3, r3, #8
 80107a0:	b21a      	sxth	r2, r3
 80107a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107a6:	4313      	orrs	r3, r2
 80107a8:	b21b      	sxth	r3, r3
 80107aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80107ac:	89fb      	ldrh	r3, [r7, #14]
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	371c      	adds	r7, #28
 80107b2:	46bd      	mov	sp, r7
 80107b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b8:	4770      	bx	lr
	...

080107bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107c6:	2300      	movs	r3, #0
 80107c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80107d2:	2b40      	cmp	r3, #64	@ 0x40
 80107d4:	d005      	beq.n	80107e2 <USBD_StdDevReq+0x26>
 80107d6:	2b40      	cmp	r3, #64	@ 0x40
 80107d8:	d857      	bhi.n	801088a <USBD_StdDevReq+0xce>
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00f      	beq.n	80107fe <USBD_StdDevReq+0x42>
 80107de:	2b20      	cmp	r3, #32
 80107e0:	d153      	bne.n	801088a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	32ae      	adds	r2, #174	@ 0xae
 80107ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	6839      	ldr	r1, [r7, #0]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	4798      	blx	r3
 80107f8:	4603      	mov	r3, r0
 80107fa:	73fb      	strb	r3, [r7, #15]
      break;
 80107fc:	e04a      	b.n	8010894 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	785b      	ldrb	r3, [r3, #1]
 8010802:	2b09      	cmp	r3, #9
 8010804:	d83b      	bhi.n	801087e <USBD_StdDevReq+0xc2>
 8010806:	a201      	add	r2, pc, #4	@ (adr r2, 801080c <USBD_StdDevReq+0x50>)
 8010808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080c:	08010861 	.word	0x08010861
 8010810:	08010875 	.word	0x08010875
 8010814:	0801087f 	.word	0x0801087f
 8010818:	0801086b 	.word	0x0801086b
 801081c:	0801087f 	.word	0x0801087f
 8010820:	0801083f 	.word	0x0801083f
 8010824:	08010835 	.word	0x08010835
 8010828:	0801087f 	.word	0x0801087f
 801082c:	08010857 	.word	0x08010857
 8010830:	08010849 	.word	0x08010849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010834:	6839      	ldr	r1, [r7, #0]
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fa3c 	bl	8010cb4 <USBD_GetDescriptor>
          break;
 801083c:	e024      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fbcb 	bl	8010fdc <USBD_SetAddress>
          break;
 8010846:	e01f      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fc0a 	bl	8011064 <USBD_SetConfig>
 8010850:	4603      	mov	r3, r0
 8010852:	73fb      	strb	r3, [r7, #15]
          break;
 8010854:	e018      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f000 fcad 	bl	80111b8 <USBD_GetConfig>
          break;
 801085e:	e013      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 fcde 	bl	8011224 <USBD_GetStatus>
          break;
 8010868:	e00e      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 fd0d 	bl	801128c <USBD_SetFeature>
          break;
 8010872:	e009      	b.n	8010888 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010874:	6839      	ldr	r1, [r7, #0]
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 fd31 	bl	80112de <USBD_ClrFeature>
          break;
 801087c:	e004      	b.n	8010888 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801087e:	6839      	ldr	r1, [r7, #0]
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f000 fd88 	bl	8011396 <USBD_CtlError>
          break;
 8010886:	bf00      	nop
      }
      break;
 8010888:	e004      	b.n	8010894 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801088a:	6839      	ldr	r1, [r7, #0]
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f000 fd82 	bl	8011396 <USBD_CtlError>
      break;
 8010892:	bf00      	nop
  }

  return ret;
 8010894:	7bfb      	ldrb	r3, [r7, #15]
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop

080108a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80108b6:	2b40      	cmp	r3, #64	@ 0x40
 80108b8:	d005      	beq.n	80108c6 <USBD_StdItfReq+0x26>
 80108ba:	2b40      	cmp	r3, #64	@ 0x40
 80108bc:	d852      	bhi.n	8010964 <USBD_StdItfReq+0xc4>
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <USBD_StdItfReq+0x26>
 80108c2:	2b20      	cmp	r3, #32
 80108c4:	d14e      	bne.n	8010964 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	3b01      	subs	r3, #1
 80108d0:	2b02      	cmp	r3, #2
 80108d2:	d840      	bhi.n	8010956 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	889b      	ldrh	r3, [r3, #4]
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	2b01      	cmp	r3, #1
 80108dc:	d836      	bhi.n	801094c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	889b      	ldrh	r3, [r3, #4]
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	4619      	mov	r1, r3
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	f7ff fedb 	bl	80106a2 <USBD_CoreFindIF>
 80108ec:	4603      	mov	r3, r0
 80108ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
 80108f2:	2bff      	cmp	r3, #255	@ 0xff
 80108f4:	d01d      	beq.n	8010932 <USBD_StdItfReq+0x92>
 80108f6:	7bbb      	ldrb	r3, [r7, #14]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d11a      	bne.n	8010932 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80108fc:	7bba      	ldrb	r2, [r7, #14]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	32ae      	adds	r2, #174	@ 0xae
 8010902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00f      	beq.n	801092c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801090c:	7bba      	ldrb	r2, [r7, #14]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010914:	7bba      	ldrb	r2, [r7, #14]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	32ae      	adds	r2, #174	@ 0xae
 801091a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	4798      	blx	r3
 8010926:	4603      	mov	r3, r0
 8010928:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801092a:	e004      	b.n	8010936 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801092c:	2303      	movs	r3, #3
 801092e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010930:	e001      	b.n	8010936 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010932:	2303      	movs	r3, #3
 8010934:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	88db      	ldrh	r3, [r3, #6]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d110      	bne.n	8010960 <USBD_StdItfReq+0xc0>
 801093e:	7bfb      	ldrb	r3, [r7, #15]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10d      	bne.n	8010960 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fdfd 	bl	8011544 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801094a:	e009      	b.n	8010960 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801094c:	6839      	ldr	r1, [r7, #0]
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f000 fd21 	bl	8011396 <USBD_CtlError>
          break;
 8010954:	e004      	b.n	8010960 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010956:	6839      	ldr	r1, [r7, #0]
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fd1c 	bl	8011396 <USBD_CtlError>
          break;
 801095e:	e000      	b.n	8010962 <USBD_StdItfReq+0xc2>
          break;
 8010960:	bf00      	nop
      }
      break;
 8010962:	e004      	b.n	801096e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010964:	6839      	ldr	r1, [r7, #0]
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 fd15 	bl	8011396 <USBD_CtlError>
      break;
 801096c:	bf00      	nop
  }

  return ret;
 801096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010982:	2300      	movs	r3, #0
 8010984:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	889b      	ldrh	r3, [r3, #4]
 801098a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010994:	2b40      	cmp	r3, #64	@ 0x40
 8010996:	d007      	beq.n	80109a8 <USBD_StdEPReq+0x30>
 8010998:	2b40      	cmp	r3, #64	@ 0x40
 801099a:	f200 817f 	bhi.w	8010c9c <USBD_StdEPReq+0x324>
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d02a      	beq.n	80109f8 <USBD_StdEPReq+0x80>
 80109a2:	2b20      	cmp	r3, #32
 80109a4:	f040 817a 	bne.w	8010c9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80109a8:	7bbb      	ldrb	r3, [r7, #14]
 80109aa:	4619      	mov	r1, r3
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7ff fe85 	bl	80106bc <USBD_CoreFindEP>
 80109b2:	4603      	mov	r3, r0
 80109b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80109b6:	7b7b      	ldrb	r3, [r7, #13]
 80109b8:	2bff      	cmp	r3, #255	@ 0xff
 80109ba:	f000 8174 	beq.w	8010ca6 <USBD_StdEPReq+0x32e>
 80109be:	7b7b      	ldrb	r3, [r7, #13]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f040 8170 	bne.w	8010ca6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80109c6:	7b7a      	ldrb	r2, [r7, #13]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80109ce:	7b7a      	ldrb	r2, [r7, #13]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	32ae      	adds	r2, #174	@ 0xae
 80109d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d8:	689b      	ldr	r3, [r3, #8]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 8163 	beq.w	8010ca6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80109e0:	7b7a      	ldrb	r2, [r7, #13]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	32ae      	adds	r2, #174	@ 0xae
 80109e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	4798      	blx	r3
 80109f2:	4603      	mov	r3, r0
 80109f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80109f6:	e156      	b.n	8010ca6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	785b      	ldrb	r3, [r3, #1]
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d008      	beq.n	8010a12 <USBD_StdEPReq+0x9a>
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	f300 8145 	bgt.w	8010c90 <USBD_StdEPReq+0x318>
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	f000 809b 	beq.w	8010b42 <USBD_StdEPReq+0x1ca>
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d03c      	beq.n	8010a8a <USBD_StdEPReq+0x112>
 8010a10:	e13e      	b.n	8010c90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b02      	cmp	r3, #2
 8010a1c:	d002      	beq.n	8010a24 <USBD_StdEPReq+0xac>
 8010a1e:	2b03      	cmp	r3, #3
 8010a20:	d016      	beq.n	8010a50 <USBD_StdEPReq+0xd8>
 8010a22:	e02c      	b.n	8010a7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a24:	7bbb      	ldrb	r3, [r7, #14]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00d      	beq.n	8010a46 <USBD_StdEPReq+0xce>
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	2b80      	cmp	r3, #128	@ 0x80
 8010a2e:	d00a      	beq.n	8010a46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a30:	7bbb      	ldrb	r3, [r7, #14]
 8010a32:	4619      	mov	r1, r3
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f001 f98f 	bl	8011d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a3a:	2180      	movs	r1, #128	@ 0x80
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f001 f98b 	bl	8011d58 <USBD_LL_StallEP>
 8010a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a44:	e020      	b.n	8010a88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fca4 	bl	8011396 <USBD_CtlError>
              break;
 8010a4e:	e01b      	b.n	8010a88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	885b      	ldrh	r3, [r3, #2]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d10e      	bne.n	8010a76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a58:	7bbb      	ldrb	r3, [r7, #14]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00b      	beq.n	8010a76 <USBD_StdEPReq+0xfe>
 8010a5e:	7bbb      	ldrb	r3, [r7, #14]
 8010a60:	2b80      	cmp	r3, #128	@ 0x80
 8010a62:	d008      	beq.n	8010a76 <USBD_StdEPReq+0xfe>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	88db      	ldrh	r3, [r3, #6]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d104      	bne.n	8010a76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a6c:	7bbb      	ldrb	r3, [r7, #14]
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f001 f971 	bl	8011d58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fd64 	bl	8011544 <USBD_CtlSendStatus>

              break;
 8010a7c:	e004      	b.n	8010a88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010a7e:	6839      	ldr	r1, [r7, #0]
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f000 fc88 	bl	8011396 <USBD_CtlError>
              break;
 8010a86:	bf00      	nop
          }
          break;
 8010a88:	e107      	b.n	8010c9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	d002      	beq.n	8010a9c <USBD_StdEPReq+0x124>
 8010a96:	2b03      	cmp	r3, #3
 8010a98:	d016      	beq.n	8010ac8 <USBD_StdEPReq+0x150>
 8010a9a:	e04b      	b.n	8010b34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a9c:	7bbb      	ldrb	r3, [r7, #14]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d00d      	beq.n	8010abe <USBD_StdEPReq+0x146>
 8010aa2:	7bbb      	ldrb	r3, [r7, #14]
 8010aa4:	2b80      	cmp	r3, #128	@ 0x80
 8010aa6:	d00a      	beq.n	8010abe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010aa8:	7bbb      	ldrb	r3, [r7, #14]
 8010aaa:	4619      	mov	r1, r3
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f001 f953 	bl	8011d58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010ab2:	2180      	movs	r1, #128	@ 0x80
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f001 f94f 	bl	8011d58 <USBD_LL_StallEP>
 8010aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010abc:	e040      	b.n	8010b40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010abe:	6839      	ldr	r1, [r7, #0]
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 fc68 	bl	8011396 <USBD_CtlError>
              break;
 8010ac6:	e03b      	b.n	8010b40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	885b      	ldrh	r3, [r3, #2]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d136      	bne.n	8010b3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
 8010ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d004      	beq.n	8010ae4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010ada:	7bbb      	ldrb	r3, [r7, #14]
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f001 f959 	bl	8011d96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 fd2d 	bl	8011544 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010aea:	7bbb      	ldrb	r3, [r7, #14]
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ff fde4 	bl	80106bc <USBD_CoreFindEP>
 8010af4:	4603      	mov	r3, r0
 8010af6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010af8:	7b7b      	ldrb	r3, [r7, #13]
 8010afa:	2bff      	cmp	r3, #255	@ 0xff
 8010afc:	d01f      	beq.n	8010b3e <USBD_StdEPReq+0x1c6>
 8010afe:	7b7b      	ldrb	r3, [r7, #13]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d11c      	bne.n	8010b3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010b04:	7b7a      	ldrb	r2, [r7, #13]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010b0c:	7b7a      	ldrb	r2, [r7, #13]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	32ae      	adds	r2, #174	@ 0xae
 8010b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d010      	beq.n	8010b3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010b1c:	7b7a      	ldrb	r2, [r7, #13]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	32ae      	adds	r2, #174	@ 0xae
 8010b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b26:	689b      	ldr	r3, [r3, #8]
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	4798      	blx	r3
 8010b2e:	4603      	mov	r3, r0
 8010b30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010b32:	e004      	b.n	8010b3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fc2d 	bl	8011396 <USBD_CtlError>
              break;
 8010b3c:	e000      	b.n	8010b40 <USBD_StdEPReq+0x1c8>
              break;
 8010b3e:	bf00      	nop
          }
          break;
 8010b40:	e0ab      	b.n	8010c9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d002      	beq.n	8010b54 <USBD_StdEPReq+0x1dc>
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d032      	beq.n	8010bb8 <USBD_StdEPReq+0x240>
 8010b52:	e097      	b.n	8010c84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b54:	7bbb      	ldrb	r3, [r7, #14]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d007      	beq.n	8010b6a <USBD_StdEPReq+0x1f2>
 8010b5a:	7bbb      	ldrb	r3, [r7, #14]
 8010b5c:	2b80      	cmp	r3, #128	@ 0x80
 8010b5e:	d004      	beq.n	8010b6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010b60:	6839      	ldr	r1, [r7, #0]
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 fc17 	bl	8011396 <USBD_CtlError>
                break;
 8010b68:	e091      	b.n	8010c8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	da0b      	bge.n	8010b8a <USBD_StdEPReq+0x212>
 8010b72:	7bbb      	ldrb	r3, [r7, #14]
 8010b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b78:	4613      	mov	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	4413      	add	r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	3310      	adds	r3, #16
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	4413      	add	r3, r2
 8010b86:	3304      	adds	r3, #4
 8010b88:	e00b      	b.n	8010ba2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b8a:	7bbb      	ldrb	r3, [r7, #14]
 8010b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b90:	4613      	mov	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	3304      	adds	r3, #4
 8010ba2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	2202      	movs	r2, #2
 8010bae:	4619      	mov	r1, r3
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 fc6d 	bl	8011490 <USBD_CtlSendData>
              break;
 8010bb6:	e06a      	b.n	8010c8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	da11      	bge.n	8010be4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010bc0:	7bbb      	ldrb	r3, [r7, #14]
 8010bc2:	f003 020f 	and.w	r2, r3, #15
 8010bc6:	6879      	ldr	r1, [r7, #4]
 8010bc8:	4613      	mov	r3, r2
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4413      	add	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	440b      	add	r3, r1
 8010bd2:	3324      	adds	r3, #36	@ 0x24
 8010bd4:	881b      	ldrh	r3, [r3, #0]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d117      	bne.n	8010c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010bda:	6839      	ldr	r1, [r7, #0]
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fbda 	bl	8011396 <USBD_CtlError>
                  break;
 8010be2:	e054      	b.n	8010c8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010be4:	7bbb      	ldrb	r3, [r7, #14]
 8010be6:	f003 020f 	and.w	r2, r3, #15
 8010bea:	6879      	ldr	r1, [r7, #4]
 8010bec:	4613      	mov	r3, r2
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	4413      	add	r3, r2
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	440b      	add	r3, r1
 8010bf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d104      	bne.n	8010c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 fbc7 	bl	8011396 <USBD_CtlError>
                  break;
 8010c08:	e041      	b.n	8010c8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	da0b      	bge.n	8010c2a <USBD_StdEPReq+0x2b2>
 8010c12:	7bbb      	ldrb	r3, [r7, #14]
 8010c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010c18:	4613      	mov	r3, r2
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	4413      	add	r3, r2
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	3310      	adds	r3, #16
 8010c22:	687a      	ldr	r2, [r7, #4]
 8010c24:	4413      	add	r3, r2
 8010c26:	3304      	adds	r3, #4
 8010c28:	e00b      	b.n	8010c42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010c2a:	7bbb      	ldrb	r3, [r7, #14]
 8010c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c30:	4613      	mov	r3, r2
 8010c32:	009b      	lsls	r3, r3, #2
 8010c34:	4413      	add	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	4413      	add	r3, r2
 8010c40:	3304      	adds	r3, #4
 8010c42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010c44:	7bbb      	ldrb	r3, [r7, #14]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d002      	beq.n	8010c50 <USBD_StdEPReq+0x2d8>
 8010c4a:	7bbb      	ldrb	r3, [r7, #14]
 8010c4c:	2b80      	cmp	r3, #128	@ 0x80
 8010c4e:	d103      	bne.n	8010c58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2200      	movs	r2, #0
 8010c54:	601a      	str	r2, [r3, #0]
 8010c56:	e00e      	b.n	8010c76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010c58:	7bbb      	ldrb	r3, [r7, #14]
 8010c5a:	4619      	mov	r1, r3
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f001 f8b9 	bl	8011dd4 <USBD_LL_IsStallEP>
 8010c62:	4603      	mov	r3, r0
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d003      	beq.n	8010c70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	601a      	str	r2, [r3, #0]
 8010c6e:	e002      	b.n	8010c76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	2200      	movs	r2, #0
 8010c74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	2202      	movs	r2, #2
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 fc07 	bl	8011490 <USBD_CtlSendData>
              break;
 8010c82:	e004      	b.n	8010c8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010c84:	6839      	ldr	r1, [r7, #0]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f000 fb85 	bl	8011396 <USBD_CtlError>
              break;
 8010c8c:	bf00      	nop
          }
          break;
 8010c8e:	e004      	b.n	8010c9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 fb7f 	bl	8011396 <USBD_CtlError>
          break;
 8010c98:	bf00      	nop
      }
      break;
 8010c9a:	e005      	b.n	8010ca8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010c9c:	6839      	ldr	r1, [r7, #0]
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 fb79 	bl	8011396 <USBD_CtlError>
      break;
 8010ca4:	e000      	b.n	8010ca8 <USBD_StdEPReq+0x330>
      break;
 8010ca6:	bf00      	nop
  }

  return ret;
 8010ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
	...

08010cb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	885b      	ldrh	r3, [r3, #2]
 8010cce:	0a1b      	lsrs	r3, r3, #8
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	2b0e      	cmp	r3, #14
 8010cd6:	f200 8152 	bhi.w	8010f7e <USBD_GetDescriptor+0x2ca>
 8010cda:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce0 <USBD_GetDescriptor+0x2c>)
 8010cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce0:	08010d51 	.word	0x08010d51
 8010ce4:	08010d69 	.word	0x08010d69
 8010ce8:	08010da9 	.word	0x08010da9
 8010cec:	08010f7f 	.word	0x08010f7f
 8010cf0:	08010f7f 	.word	0x08010f7f
 8010cf4:	08010f1f 	.word	0x08010f1f
 8010cf8:	08010f4b 	.word	0x08010f4b
 8010cfc:	08010f7f 	.word	0x08010f7f
 8010d00:	08010f7f 	.word	0x08010f7f
 8010d04:	08010f7f 	.word	0x08010f7f
 8010d08:	08010f7f 	.word	0x08010f7f
 8010d0c:	08010f7f 	.word	0x08010f7f
 8010d10:	08010f7f 	.word	0x08010f7f
 8010d14:	08010f7f 	.word	0x08010f7f
 8010d18:	08010d1d 	.word	0x08010d1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d22:	69db      	ldr	r3, [r3, #28]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00b      	beq.n	8010d40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d2e:	69db      	ldr	r3, [r3, #28]
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	7c12      	ldrb	r2, [r2, #16]
 8010d34:	f107 0108 	add.w	r1, r7, #8
 8010d38:	4610      	mov	r0, r2
 8010d3a:	4798      	blx	r3
 8010d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d3e:	e126      	b.n	8010f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 fb27 	bl	8011396 <USBD_CtlError>
        err++;
 8010d48:	7afb      	ldrb	r3, [r7, #11]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8010d4e:	e11e      	b.n	8010f8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	687a      	ldr	r2, [r7, #4]
 8010d5a:	7c12      	ldrb	r2, [r2, #16]
 8010d5c:	f107 0108 	add.w	r1, r7, #8
 8010d60:	4610      	mov	r0, r2
 8010d62:	4798      	blx	r3
 8010d64:	60f8      	str	r0, [r7, #12]
      break;
 8010d66:	e112      	b.n	8010f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	7c1b      	ldrb	r3, [r3, #16]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10d      	bne.n	8010d8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d78:	f107 0208 	add.w	r2, r7, #8
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4798      	blx	r3
 8010d80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	3301      	adds	r3, #1
 8010d86:	2202      	movs	r2, #2
 8010d88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010d8a:	e100      	b.n	8010f8e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d94:	f107 0208 	add.w	r2, r7, #8
 8010d98:	4610      	mov	r0, r2
 8010d9a:	4798      	blx	r3
 8010d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	3301      	adds	r3, #1
 8010da2:	2202      	movs	r2, #2
 8010da4:	701a      	strb	r2, [r3, #0]
      break;
 8010da6:	e0f2      	b.n	8010f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	885b      	ldrh	r3, [r3, #2]
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	2b05      	cmp	r3, #5
 8010db0:	f200 80ac 	bhi.w	8010f0c <USBD_GetDescriptor+0x258>
 8010db4:	a201      	add	r2, pc, #4	@ (adr r2, 8010dbc <USBD_GetDescriptor+0x108>)
 8010db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dba:	bf00      	nop
 8010dbc:	08010dd5 	.word	0x08010dd5
 8010dc0:	08010e09 	.word	0x08010e09
 8010dc4:	08010e3d 	.word	0x08010e3d
 8010dc8:	08010e71 	.word	0x08010e71
 8010dcc:	08010ea5 	.word	0x08010ea5
 8010dd0:	08010ed9 	.word	0x08010ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00b      	beq.n	8010df8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	7c12      	ldrb	r2, [r2, #16]
 8010dec:	f107 0108 	add.w	r1, r7, #8
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
 8010df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010df6:	e091      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010df8:	6839      	ldr	r1, [r7, #0]
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 facb 	bl	8011396 <USBD_CtlError>
            err++;
 8010e00:	7afb      	ldrb	r3, [r7, #11]
 8010e02:	3301      	adds	r3, #1
 8010e04:	72fb      	strb	r3, [r7, #11]
          break;
 8010e06:	e089      	b.n	8010f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e0e:	689b      	ldr	r3, [r3, #8]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00b      	beq.n	8010e2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	7c12      	ldrb	r2, [r2, #16]
 8010e20:	f107 0108 	add.w	r1, r7, #8
 8010e24:	4610      	mov	r0, r2
 8010e26:	4798      	blx	r3
 8010e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e2a:	e077      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f000 fab1 	bl	8011396 <USBD_CtlError>
            err++;
 8010e34:	7afb      	ldrb	r3, [r7, #11]
 8010e36:	3301      	adds	r3, #1
 8010e38:	72fb      	strb	r3, [r7, #11]
          break;
 8010e3a:	e06f      	b.n	8010f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d00b      	beq.n	8010e60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	7c12      	ldrb	r2, [r2, #16]
 8010e54:	f107 0108 	add.w	r1, r7, #8
 8010e58:	4610      	mov	r0, r2
 8010e5a:	4798      	blx	r3
 8010e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e5e:	e05d      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e60:	6839      	ldr	r1, [r7, #0]
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f000 fa97 	bl	8011396 <USBD_CtlError>
            err++;
 8010e68:	7afb      	ldrb	r3, [r7, #11]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e6e:	e055      	b.n	8010f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e76:	691b      	ldr	r3, [r3, #16]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00b      	beq.n	8010e94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	7c12      	ldrb	r2, [r2, #16]
 8010e88:	f107 0108 	add.w	r1, r7, #8
 8010e8c:	4610      	mov	r0, r2
 8010e8e:	4798      	blx	r3
 8010e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e92:	e043      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f000 fa7d 	bl	8011396 <USBD_CtlError>
            err++;
 8010e9c:	7afb      	ldrb	r3, [r7, #11]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8010ea2:	e03b      	b.n	8010f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010eaa:	695b      	ldr	r3, [r3, #20]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00b      	beq.n	8010ec8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	7c12      	ldrb	r2, [r2, #16]
 8010ebc:	f107 0108 	add.w	r1, r7, #8
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	4798      	blx	r3
 8010ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ec6:	e029      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ec8:	6839      	ldr	r1, [r7, #0]
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fa63 	bl	8011396 <USBD_CtlError>
            err++;
 8010ed0:	7afb      	ldrb	r3, [r7, #11]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8010ed6:	e021      	b.n	8010f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ede:	699b      	ldr	r3, [r3, #24]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00b      	beq.n	8010efc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010eea:	699b      	ldr	r3, [r3, #24]
 8010eec:	687a      	ldr	r2, [r7, #4]
 8010eee:	7c12      	ldrb	r2, [r2, #16]
 8010ef0:	f107 0108 	add.w	r1, r7, #8
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	4798      	blx	r3
 8010ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010efa:	e00f      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010efc:	6839      	ldr	r1, [r7, #0]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fa49 	bl	8011396 <USBD_CtlError>
            err++;
 8010f04:	7afb      	ldrb	r3, [r7, #11]
 8010f06:	3301      	adds	r3, #1
 8010f08:	72fb      	strb	r3, [r7, #11]
          break;
 8010f0a:	e007      	b.n	8010f1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010f0c:	6839      	ldr	r1, [r7, #0]
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fa41 	bl	8011396 <USBD_CtlError>
          err++;
 8010f14:	7afb      	ldrb	r3, [r7, #11]
 8010f16:	3301      	adds	r3, #1
 8010f18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010f1a:	bf00      	nop
      }
      break;
 8010f1c:	e037      	b.n	8010f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	7c1b      	ldrb	r3, [r3, #16]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d109      	bne.n	8010f3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f2e:	f107 0208 	add.w	r2, r7, #8
 8010f32:	4610      	mov	r0, r2
 8010f34:	4798      	blx	r3
 8010f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f38:	e029      	b.n	8010f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f3a:	6839      	ldr	r1, [r7, #0]
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 fa2a 	bl	8011396 <USBD_CtlError>
        err++;
 8010f42:	7afb      	ldrb	r3, [r7, #11]
 8010f44:	3301      	adds	r3, #1
 8010f46:	72fb      	strb	r3, [r7, #11]
      break;
 8010f48:	e021      	b.n	8010f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	7c1b      	ldrb	r3, [r3, #16]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d10d      	bne.n	8010f6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f5a:	f107 0208 	add.w	r2, r7, #8
 8010f5e:	4610      	mov	r0, r2
 8010f60:	4798      	blx	r3
 8010f62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	3301      	adds	r3, #1
 8010f68:	2207      	movs	r2, #7
 8010f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f6c:	e00f      	b.n	8010f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 fa10 	bl	8011396 <USBD_CtlError>
        err++;
 8010f76:	7afb      	ldrb	r3, [r7, #11]
 8010f78:	3301      	adds	r3, #1
 8010f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8010f7c:	e007      	b.n	8010f8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f000 fa08 	bl	8011396 <USBD_CtlError>
      err++;
 8010f86:	7afb      	ldrb	r3, [r7, #11]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8010f8c:	bf00      	nop
  }

  if (err != 0U)
 8010f8e:	7afb      	ldrb	r3, [r7, #11]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d11e      	bne.n	8010fd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	88db      	ldrh	r3, [r3, #6]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d016      	beq.n	8010fca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010f9c:	893b      	ldrh	r3, [r7, #8]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00e      	beq.n	8010fc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	88da      	ldrh	r2, [r3, #6]
 8010fa6:	893b      	ldrh	r3, [r7, #8]
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	bf28      	it	cs
 8010fac:	4613      	movcs	r3, r2
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010fb2:	893b      	ldrh	r3, [r7, #8]
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	68f9      	ldr	r1, [r7, #12]
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fa69 	bl	8011490 <USBD_CtlSendData>
 8010fbe:	e009      	b.n	8010fd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010fc0:	6839      	ldr	r1, [r7, #0]
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 f9e7 	bl	8011396 <USBD_CtlError>
 8010fc8:	e004      	b.n	8010fd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 faba 	bl	8011544 <USBD_CtlSendStatus>
 8010fd0:	e000      	b.n	8010fd4 <USBD_GetDescriptor+0x320>
    return;
 8010fd2:	bf00      	nop
  }
}
 8010fd4:	3710      	adds	r7, #16
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop

08010fdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	889b      	ldrh	r3, [r3, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d131      	bne.n	8011052 <USBD_SetAddress+0x76>
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	88db      	ldrh	r3, [r3, #6]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d12d      	bne.n	8011052 <USBD_SetAddress+0x76>
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	885b      	ldrh	r3, [r3, #2]
 8010ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8010ffc:	d829      	bhi.n	8011052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	885b      	ldrh	r3, [r3, #2]
 8011002:	b2db      	uxtb	r3, r3
 8011004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011010:	b2db      	uxtb	r3, r3
 8011012:	2b03      	cmp	r3, #3
 8011014:	d104      	bne.n	8011020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011016:	6839      	ldr	r1, [r7, #0]
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 f9bc 	bl	8011396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801101e:	e01d      	b.n	801105c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	7bfa      	ldrb	r2, [r7, #15]
 8011024:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011028:	7bfb      	ldrb	r3, [r7, #15]
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 fefd 	bl	8011e2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fa86 	bl	8011544 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011038:	7bfb      	ldrb	r3, [r7, #15]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d004      	beq.n	8011048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2202      	movs	r2, #2
 8011042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011046:	e009      	b.n	801105c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2201      	movs	r2, #1
 801104c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011050:	e004      	b.n	801105c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011052:	6839      	ldr	r1, [r7, #0]
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f000 f99e 	bl	8011396 <USBD_CtlError>
  }
}
 801105a:	bf00      	nop
 801105c:	bf00      	nop
 801105e:	3710      	adds	r7, #16
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	885b      	ldrh	r3, [r3, #2]
 8011076:	b2da      	uxtb	r2, r3
 8011078:	4b4e      	ldr	r3, [pc, #312]	@ (80111b4 <USBD_SetConfig+0x150>)
 801107a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801107c:	4b4d      	ldr	r3, [pc, #308]	@ (80111b4 <USBD_SetConfig+0x150>)
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	2b01      	cmp	r3, #1
 8011082:	d905      	bls.n	8011090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011084:	6839      	ldr	r1, [r7, #0]
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 f985 	bl	8011396 <USBD_CtlError>
    return USBD_FAIL;
 801108c:	2303      	movs	r3, #3
 801108e:	e08c      	b.n	80111aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011096:	b2db      	uxtb	r3, r3
 8011098:	2b02      	cmp	r3, #2
 801109a:	d002      	beq.n	80110a2 <USBD_SetConfig+0x3e>
 801109c:	2b03      	cmp	r3, #3
 801109e:	d029      	beq.n	80110f4 <USBD_SetConfig+0x90>
 80110a0:	e075      	b.n	801118e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80110a2:	4b44      	ldr	r3, [pc, #272]	@ (80111b4 <USBD_SetConfig+0x150>)
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d020      	beq.n	80110ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80110aa:	4b42      	ldr	r3, [pc, #264]	@ (80111b4 <USBD_SetConfig+0x150>)
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110b4:	4b3f      	ldr	r3, [pc, #252]	@ (80111b4 <USBD_SetConfig+0x150>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	4619      	mov	r1, r3
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff f84b 	bl	8010156 <USBD_SetClassConfig>
 80110c0:	4603      	mov	r3, r0
 80110c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80110ca:	6839      	ldr	r1, [r7, #0]
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 f962 	bl	8011396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2202      	movs	r2, #2
 80110d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80110da:	e065      	b.n	80111a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f000 fa31 	bl	8011544 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2203      	movs	r2, #3
 80110e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80110ea:	e05d      	b.n	80111a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fa29 	bl	8011544 <USBD_CtlSendStatus>
      break;
 80110f2:	e059      	b.n	80111a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80110f4:	4b2f      	ldr	r3, [pc, #188]	@ (80111b4 <USBD_SetConfig+0x150>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d112      	bne.n	8011122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2202      	movs	r2, #2
 8011100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011104:	4b2b      	ldr	r3, [pc, #172]	@ (80111b4 <USBD_SetConfig+0x150>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	461a      	mov	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801110e:	4b29      	ldr	r3, [pc, #164]	@ (80111b4 <USBD_SetConfig+0x150>)
 8011110:	781b      	ldrb	r3, [r3, #0]
 8011112:	4619      	mov	r1, r3
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f7ff f83a 	bl	801018e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 fa12 	bl	8011544 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011120:	e042      	b.n	80111a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011122:	4b24      	ldr	r3, [pc, #144]	@ (80111b4 <USBD_SetConfig+0x150>)
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	461a      	mov	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	429a      	cmp	r2, r3
 801112e:	d02a      	beq.n	8011186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	b2db      	uxtb	r3, r3
 8011136:	4619      	mov	r1, r3
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	f7ff f828 	bl	801018e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801113e:	4b1d      	ldr	r3, [pc, #116]	@ (80111b4 <USBD_SetConfig+0x150>)
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	461a      	mov	r2, r3
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011148:	4b1a      	ldr	r3, [pc, #104]	@ (80111b4 <USBD_SetConfig+0x150>)
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	4619      	mov	r1, r3
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff f801 	bl	8010156 <USBD_SetClassConfig>
 8011154:	4603      	mov	r3, r0
 8011156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011158:	7bfb      	ldrb	r3, [r7, #15]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00f      	beq.n	801117e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f000 f918 	bl	8011396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	685b      	ldr	r3, [r3, #4]
 801116a:	b2db      	uxtb	r3, r3
 801116c:	4619      	mov	r1, r3
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f7ff f80d 	bl	801018e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2202      	movs	r2, #2
 8011178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801117c:	e014      	b.n	80111a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f000 f9e0 	bl	8011544 <USBD_CtlSendStatus>
      break;
 8011184:	e010      	b.n	80111a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f9dc 	bl	8011544 <USBD_CtlSendStatus>
      break;
 801118c:	e00c      	b.n	80111a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801118e:	6839      	ldr	r1, [r7, #0]
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 f900 	bl	8011396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011196:	4b07      	ldr	r3, [pc, #28]	@ (80111b4 <USBD_SetConfig+0x150>)
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	4619      	mov	r1, r3
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7fe fff6 	bl	801018e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80111a2:	2303      	movs	r3, #3
 80111a4:	73fb      	strb	r3, [r7, #15]
      break;
 80111a6:	bf00      	nop
  }

  return ret;
 80111a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	200009a4 	.word	0x200009a4

080111b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b082      	sub	sp, #8
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	88db      	ldrh	r3, [r3, #6]
 80111c6:	2b01      	cmp	r3, #1
 80111c8:	d004      	beq.n	80111d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 f8e2 	bl	8011396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80111d2:	e023      	b.n	801121c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	2b02      	cmp	r3, #2
 80111de:	dc02      	bgt.n	80111e6 <USBD_GetConfig+0x2e>
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dc03      	bgt.n	80111ec <USBD_GetConfig+0x34>
 80111e4:	e015      	b.n	8011212 <USBD_GetConfig+0x5a>
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d00b      	beq.n	8011202 <USBD_GetConfig+0x4a>
 80111ea:	e012      	b.n	8011212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	3308      	adds	r3, #8
 80111f6:	2201      	movs	r2, #1
 80111f8:	4619      	mov	r1, r3
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f000 f948 	bl	8011490 <USBD_CtlSendData>
        break;
 8011200:	e00c      	b.n	801121c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	3304      	adds	r3, #4
 8011206:	2201      	movs	r2, #1
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f000 f940 	bl	8011490 <USBD_CtlSendData>
        break;
 8011210:	e004      	b.n	801121c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011212:	6839      	ldr	r1, [r7, #0]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 f8be 	bl	8011396 <USBD_CtlError>
        break;
 801121a:	bf00      	nop
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011234:	b2db      	uxtb	r3, r3
 8011236:	3b01      	subs	r3, #1
 8011238:	2b02      	cmp	r3, #2
 801123a:	d81e      	bhi.n	801127a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	88db      	ldrh	r3, [r3, #6]
 8011240:	2b02      	cmp	r3, #2
 8011242:	d004      	beq.n	801124e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011244:	6839      	ldr	r1, [r7, #0]
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 f8a5 	bl	8011396 <USBD_CtlError>
        break;
 801124c:	e01a      	b.n	8011284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2201      	movs	r2, #1
 8011252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801125a:	2b00      	cmp	r3, #0
 801125c:	d005      	beq.n	801126a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	f043 0202 	orr.w	r2, r3, #2
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	330c      	adds	r3, #12
 801126e:	2202      	movs	r2, #2
 8011270:	4619      	mov	r1, r3
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f90c 	bl	8011490 <USBD_CtlSendData>
      break;
 8011278:	e004      	b.n	8011284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801127a:	6839      	ldr	r1, [r7, #0]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 f88a 	bl	8011396 <USBD_CtlError>
      break;
 8011282:	bf00      	nop
  }
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	885b      	ldrh	r3, [r3, #2]
 801129a:	2b01      	cmp	r3, #1
 801129c:	d107      	bne.n	80112ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2201      	movs	r2, #1
 80112a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f94c 	bl	8011544 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80112ac:	e013      	b.n	80112d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	885b      	ldrh	r3, [r3, #2]
 80112b2:	2b02      	cmp	r3, #2
 80112b4:	d10b      	bne.n	80112ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	889b      	ldrh	r3, [r3, #4]
 80112ba:	0a1b      	lsrs	r3, r3, #8
 80112bc:	b29b      	uxth	r3, r3
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f000 f93c 	bl	8011544 <USBD_CtlSendStatus>
}
 80112cc:	e003      	b.n	80112d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80112ce:	6839      	ldr	r1, [r7, #0]
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f000 f860 	bl	8011396 <USBD_CtlError>
}
 80112d6:	bf00      	nop
 80112d8:	3708      	adds	r7, #8
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
 80112e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	3b01      	subs	r3, #1
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d80b      	bhi.n	801130e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	885b      	ldrh	r3, [r3, #2]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d10c      	bne.n	8011318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 f91c 	bl	8011544 <USBD_CtlSendStatus>
      }
      break;
 801130c:	e004      	b.n	8011318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801130e:	6839      	ldr	r1, [r7, #0]
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f000 f840 	bl	8011396 <USBD_CtlError>
      break;
 8011316:	e000      	b.n	801131a <USBD_ClrFeature+0x3c>
      break;
 8011318:	bf00      	nop
  }
}
 801131a:	bf00      	nop
 801131c:	3708      	adds	r7, #8
 801131e:	46bd      	mov	sp, r7
 8011320:	bd80      	pop	{r7, pc}

08011322 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011322:	b580      	push	{r7, lr}
 8011324:	b084      	sub	sp, #16
 8011326:	af00      	add	r7, sp, #0
 8011328:	6078      	str	r0, [r7, #4]
 801132a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	781a      	ldrb	r2, [r3, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	3301      	adds	r3, #1
 801133c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	781a      	ldrb	r2, [r3, #0]
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	3301      	adds	r3, #1
 801134a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801134c:	68f8      	ldr	r0, [r7, #12]
 801134e:	f7ff fa16 	bl	801077e <SWAPBYTE>
 8011352:	4603      	mov	r3, r0
 8011354:	461a      	mov	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	3301      	adds	r3, #1
 801135e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	3301      	adds	r3, #1
 8011364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f7ff fa09 	bl	801077e <SWAPBYTE>
 801136c:	4603      	mov	r3, r0
 801136e:	461a      	mov	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	3301      	adds	r3, #1
 8011378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3301      	adds	r3, #1
 801137e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	f7ff f9fc 	bl	801077e <SWAPBYTE>
 8011386:	4603      	mov	r3, r0
 8011388:	461a      	mov	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	80da      	strh	r2, [r3, #6]
}
 801138e:	bf00      	nop
 8011390:	3710      	adds	r7, #16
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}

08011396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011396:	b580      	push	{r7, lr}
 8011398:	b082      	sub	sp, #8
 801139a:	af00      	add	r7, sp, #0
 801139c:	6078      	str	r0, [r7, #4]
 801139e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80113a0:	2180      	movs	r1, #128	@ 0x80
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 fcd8 	bl	8011d58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80113a8:	2100      	movs	r1, #0
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 fcd4 	bl	8011d58 <USBD_LL_StallEP>
}
 80113b0:	bf00      	nop
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b086      	sub	sp, #24
 80113bc:	af00      	add	r7, sp, #0
 80113be:	60f8      	str	r0, [r7, #12]
 80113c0:	60b9      	str	r1, [r7, #8]
 80113c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d042      	beq.n	8011454 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80113d2:	6938      	ldr	r0, [r7, #16]
 80113d4:	f000 f842 	bl	801145c <USBD_GetLen>
 80113d8:	4603      	mov	r3, r0
 80113da:	3301      	adds	r3, #1
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80113e2:	d808      	bhi.n	80113f6 <USBD_GetString+0x3e>
 80113e4:	6938      	ldr	r0, [r7, #16]
 80113e6:	f000 f839 	bl	801145c <USBD_GetLen>
 80113ea:	4603      	mov	r3, r0
 80113ec:	3301      	adds	r3, #1
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	005b      	lsls	r3, r3, #1
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	e001      	b.n	80113fa <USBD_GetString+0x42>
 80113f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80113fe:	7dfb      	ldrb	r3, [r7, #23]
 8011400:	68ba      	ldr	r2, [r7, #8]
 8011402:	4413      	add	r3, r2
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	7812      	ldrb	r2, [r2, #0]
 8011408:	701a      	strb	r2, [r3, #0]
  idx++;
 801140a:	7dfb      	ldrb	r3, [r7, #23]
 801140c:	3301      	adds	r3, #1
 801140e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011410:	7dfb      	ldrb	r3, [r7, #23]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	4413      	add	r3, r2
 8011416:	2203      	movs	r2, #3
 8011418:	701a      	strb	r2, [r3, #0]
  idx++;
 801141a:	7dfb      	ldrb	r3, [r7, #23]
 801141c:	3301      	adds	r3, #1
 801141e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011420:	e013      	b.n	801144a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011422:	7dfb      	ldrb	r3, [r7, #23]
 8011424:	68ba      	ldr	r2, [r7, #8]
 8011426:	4413      	add	r3, r2
 8011428:	693a      	ldr	r2, [r7, #16]
 801142a:	7812      	ldrb	r2, [r2, #0]
 801142c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	3301      	adds	r3, #1
 8011432:	613b      	str	r3, [r7, #16]
    idx++;
 8011434:	7dfb      	ldrb	r3, [r7, #23]
 8011436:	3301      	adds	r3, #1
 8011438:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801143a:	7dfb      	ldrb	r3, [r7, #23]
 801143c:	68ba      	ldr	r2, [r7, #8]
 801143e:	4413      	add	r3, r2
 8011440:	2200      	movs	r2, #0
 8011442:	701a      	strb	r2, [r3, #0]
    idx++;
 8011444:	7dfb      	ldrb	r3, [r7, #23]
 8011446:	3301      	adds	r3, #1
 8011448:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1e7      	bne.n	8011422 <USBD_GetString+0x6a>
 8011452:	e000      	b.n	8011456 <USBD_GetString+0x9e>
    return;
 8011454:	bf00      	nop
  }
}
 8011456:	3718      	adds	r7, #24
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801145c:	b480      	push	{r7}
 801145e:	b085      	sub	sp, #20
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011464:	2300      	movs	r3, #0
 8011466:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801146c:	e005      	b.n	801147a <USBD_GetLen+0x1e>
  {
    len++;
 801146e:	7bfb      	ldrb	r3, [r7, #15]
 8011470:	3301      	adds	r3, #1
 8011472:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	3301      	adds	r3, #1
 8011478:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f5      	bne.n	801146e <USBD_GetLen+0x12>
  }

  return len;
 8011482:	7bfb      	ldrb	r3, [r7, #15]
}
 8011484:	4618      	mov	r0, r3
 8011486:	3714      	adds	r7, #20
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2202      	movs	r2, #2
 80114a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	2100      	movs	r1, #0
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f000 fcd7 	bl	8011e6a <USBD_LL_Transmit>

  return USBD_OK;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	68ba      	ldr	r2, [r7, #8]
 80114d6:	2100      	movs	r1, #0
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 fcc6 	bl	8011e6a <USBD_LL_Transmit>

  return USBD_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3710      	adds	r7, #16
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2203      	movs	r2, #3
 80114f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	2100      	movs	r1, #0
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f000 fcca 	bl	8011eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011522:	b580      	push	{r7, lr}
 8011524:	b084      	sub	sp, #16
 8011526:	af00      	add	r7, sp, #0
 8011528:	60f8      	str	r0, [r7, #12]
 801152a:	60b9      	str	r1, [r7, #8]
 801152c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	2100      	movs	r1, #0
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f000 fcb9 	bl	8011eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801153a:	2300      	movs	r3, #0
}
 801153c:	4618      	mov	r0, r3
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2204      	movs	r2, #4
 8011550:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011554:	2300      	movs	r3, #0
 8011556:	2200      	movs	r2, #0
 8011558:	2100      	movs	r1, #0
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f000 fc85 	bl	8011e6a <USBD_LL_Transmit>

  return USBD_OK;
 8011560:	2300      	movs	r3, #0
}
 8011562:	4618      	mov	r0, r3
 8011564:	3708      	adds	r7, #8
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2205      	movs	r2, #5
 8011576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801157a:	2300      	movs	r3, #0
 801157c:	2200      	movs	r2, #0
 801157e:	2100      	movs	r1, #0
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 fc93 	bl	8011eac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011586:	2300      	movs	r3, #0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011594:	2200      	movs	r2, #0
 8011596:	4912      	ldr	r1, [pc, #72]	@ (80115e0 <MX_USB_Device_Init+0x50>)
 8011598:	4812      	ldr	r0, [pc, #72]	@ (80115e4 <MX_USB_Device_Init+0x54>)
 801159a:	f7fe fd43 	bl	8010024 <USBD_Init>
 801159e:	4603      	mov	r3, r0
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d001      	beq.n	80115a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80115a4:	f7f2 ff04 	bl	80043b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80115a8:	490f      	ldr	r1, [pc, #60]	@ (80115e8 <MX_USB_Device_Init+0x58>)
 80115aa:	480e      	ldr	r0, [pc, #56]	@ (80115e4 <MX_USB_Device_Init+0x54>)
 80115ac:	f7fe fd78 	bl	80100a0 <USBD_RegisterClass>
 80115b0:	4603      	mov	r3, r0
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d001      	beq.n	80115ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80115b6:	f7f2 fefb 	bl	80043b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80115ba:	490c      	ldr	r1, [pc, #48]	@ (80115ec <MX_USB_Device_Init+0x5c>)
 80115bc:	4809      	ldr	r0, [pc, #36]	@ (80115e4 <MX_USB_Device_Init+0x54>)
 80115be:	f7fe fc61 	bl	800fe84 <USBD_CDC_RegisterInterface>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80115c8:	f7f2 fef2 	bl	80043b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80115cc:	4805      	ldr	r0, [pc, #20]	@ (80115e4 <MX_USB_Device_Init+0x54>)
 80115ce:	f7fe fdab 	bl	8010128 <USBD_Start>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d001      	beq.n	80115dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80115d8:	f7f2 feea 	bl	80043b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80115dc:	bf00      	nop
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	200000d4 	.word	0x200000d4
 80115e4:	200009a8 	.word	0x200009a8
 80115e8:	20000040 	.word	0x20000040
 80115ec:	200000c0 	.word	0x200000c0

080115f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80115f4:	2200      	movs	r2, #0
 80115f6:	4905      	ldr	r1, [pc, #20]	@ (801160c <CDC_Init_FS+0x1c>)
 80115f8:	4805      	ldr	r0, [pc, #20]	@ (8011610 <CDC_Init_FS+0x20>)
 80115fa:	f7fe fc5d 	bl	800feb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80115fe:	4905      	ldr	r1, [pc, #20]	@ (8011614 <CDC_Init_FS+0x24>)
 8011600:	4803      	ldr	r0, [pc, #12]	@ (8011610 <CDC_Init_FS+0x20>)
 8011602:	f7fe fc7b 	bl	800fefc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011606:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011608:	4618      	mov	r0, r3
 801160a:	bd80      	pop	{r7, pc}
 801160c:	20001484 	.word	0x20001484
 8011610:	200009a8 	.word	0x200009a8
 8011614:	20000c84 	.word	0x20000c84

08011618 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011618:	b480      	push	{r7}
 801161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801161c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801161e:	4618      	mov	r0, r3
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr

08011628 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	6039      	str	r1, [r7, #0]
 8011632:	71fb      	strb	r3, [r7, #7]
 8011634:	4613      	mov	r3, r2
 8011636:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011638:	79fb      	ldrb	r3, [r7, #7]
 801163a:	2b23      	cmp	r3, #35	@ 0x23
 801163c:	d84a      	bhi.n	80116d4 <CDC_Control_FS+0xac>
 801163e:	a201      	add	r2, pc, #4	@ (adr r2, 8011644 <CDC_Control_FS+0x1c>)
 8011640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011644:	080116d5 	.word	0x080116d5
 8011648:	080116d5 	.word	0x080116d5
 801164c:	080116d5 	.word	0x080116d5
 8011650:	080116d5 	.word	0x080116d5
 8011654:	080116d5 	.word	0x080116d5
 8011658:	080116d5 	.word	0x080116d5
 801165c:	080116d5 	.word	0x080116d5
 8011660:	080116d5 	.word	0x080116d5
 8011664:	080116d5 	.word	0x080116d5
 8011668:	080116d5 	.word	0x080116d5
 801166c:	080116d5 	.word	0x080116d5
 8011670:	080116d5 	.word	0x080116d5
 8011674:	080116d5 	.word	0x080116d5
 8011678:	080116d5 	.word	0x080116d5
 801167c:	080116d5 	.word	0x080116d5
 8011680:	080116d5 	.word	0x080116d5
 8011684:	080116d5 	.word	0x080116d5
 8011688:	080116d5 	.word	0x080116d5
 801168c:	080116d5 	.word	0x080116d5
 8011690:	080116d5 	.word	0x080116d5
 8011694:	080116d5 	.word	0x080116d5
 8011698:	080116d5 	.word	0x080116d5
 801169c:	080116d5 	.word	0x080116d5
 80116a0:	080116d5 	.word	0x080116d5
 80116a4:	080116d5 	.word	0x080116d5
 80116a8:	080116d5 	.word	0x080116d5
 80116ac:	080116d5 	.word	0x080116d5
 80116b0:	080116d5 	.word	0x080116d5
 80116b4:	080116d5 	.word	0x080116d5
 80116b8:	080116d5 	.word	0x080116d5
 80116bc:	080116d5 	.word	0x080116d5
 80116c0:	080116d5 	.word	0x080116d5
 80116c4:	080116d5 	.word	0x080116d5
 80116c8:	080116d5 	.word	0x080116d5
 80116cc:	080116d5 	.word	0x080116d5
 80116d0:	080116d5 	.word	0x080116d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80116d4:	bf00      	nop
  }

  return (USBD_OK);
 80116d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80116d8:	4618      	mov	r0, r3
 80116da:	370c      	adds	r7, #12
 80116dc:	46bd      	mov	sp, r7
 80116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e2:	4770      	bx	lr

080116e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80116ee:	6879      	ldr	r1, [r7, #4]
 80116f0:	4805      	ldr	r0, [pc, #20]	@ (8011708 <CDC_Receive_FS+0x24>)
 80116f2:	f7fe fc03 	bl	800fefc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80116f6:	4804      	ldr	r0, [pc, #16]	@ (8011708 <CDC_Receive_FS+0x24>)
 80116f8:	f7fe fc5e 	bl	800ffb8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80116fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3708      	adds	r7, #8
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	200009a8 	.word	0x200009a8

0801170c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b084      	sub	sp, #16
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	460b      	mov	r3, r1
 8011716:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801171c:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <CDC_Transmit_FS+0x48>)
 801171e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011722:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801172e:	2301      	movs	r3, #1
 8011730:	e00b      	b.n	801174a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011732:	887b      	ldrh	r3, [r7, #2]
 8011734:	461a      	mov	r2, r3
 8011736:	6879      	ldr	r1, [r7, #4]
 8011738:	4806      	ldr	r0, [pc, #24]	@ (8011754 <CDC_Transmit_FS+0x48>)
 801173a:	f7fe fbbd 	bl	800feb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801173e:	4805      	ldr	r0, [pc, #20]	@ (8011754 <CDC_Transmit_FS+0x48>)
 8011740:	f7fe fbfa 	bl	800ff38 <USBD_CDC_TransmitPacket>
 8011744:	4603      	mov	r3, r0
 8011746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011748:	7bfb      	ldrb	r3, [r7, #15]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3710      	adds	r7, #16
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	200009a8 	.word	0x200009a8

08011758 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011758:	b480      	push	{r7}
 801175a:	b087      	sub	sp, #28
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	4613      	mov	r3, r2
 8011764:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801176a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801176e:	4618      	mov	r0, r3
 8011770:	371c      	adds	r7, #28
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
	...

0801177c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801177c:	b480      	push	{r7}
 801177e:	b083      	sub	sp, #12
 8011780:	af00      	add	r7, sp, #0
 8011782:	4603      	mov	r3, r0
 8011784:	6039      	str	r1, [r7, #0]
 8011786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	2212      	movs	r2, #18
 801178c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801178e:	4b03      	ldr	r3, [pc, #12]	@ (801179c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011790:	4618      	mov	r0, r3
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	200000f4 	.word	0x200000f4

080117a0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	4603      	mov	r3, r0
 80117a8:	6039      	str	r1, [r7, #0]
 80117aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	2204      	movs	r2, #4
 80117b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80117b2:	4b03      	ldr	r3, [pc, #12]	@ (80117c0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr
 80117c0:	20000108 	.word	0x20000108

080117c4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b082      	sub	sp, #8
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	4603      	mov	r3, r0
 80117cc:	6039      	str	r1, [r7, #0]
 80117ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117d0:	79fb      	ldrb	r3, [r7, #7]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d105      	bne.n	80117e2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	4907      	ldr	r1, [pc, #28]	@ (80117f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80117da:	4808      	ldr	r0, [pc, #32]	@ (80117fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80117dc:	f7ff fdec 	bl	80113b8 <USBD_GetString>
 80117e0:	e004      	b.n	80117ec <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80117e2:	683a      	ldr	r2, [r7, #0]
 80117e4:	4904      	ldr	r1, [pc, #16]	@ (80117f8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80117e6:	4805      	ldr	r0, [pc, #20]	@ (80117fc <USBD_CDC_ProductStrDescriptor+0x38>)
 80117e8:	f7ff fde6 	bl	80113b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117ec:	4b02      	ldr	r3, [pc, #8]	@ (80117f8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3708      	adds	r7, #8
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
 80117f6:	bf00      	nop
 80117f8:	20001c84 	.word	0x20001c84
 80117fc:	08014a30 	.word	0x08014a30

08011800 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	4603      	mov	r3, r0
 8011808:	6039      	str	r1, [r7, #0]
 801180a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801180c:	683a      	ldr	r2, [r7, #0]
 801180e:	4904      	ldr	r1, [pc, #16]	@ (8011820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011810:	4804      	ldr	r0, [pc, #16]	@ (8011824 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011812:	f7ff fdd1 	bl	80113b8 <USBD_GetString>
  return USBD_StrDesc;
 8011816:	4b02      	ldr	r3, [pc, #8]	@ (8011820 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011818:	4618      	mov	r0, r3
 801181a:	3708      	adds	r7, #8
 801181c:	46bd      	mov	sp, r7
 801181e:	bd80      	pop	{r7, pc}
 8011820:	20001c84 	.word	0x20001c84
 8011824:	08014a48 	.word	0x08014a48

08011828 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	4603      	mov	r3, r0
 8011830:	6039      	str	r1, [r7, #0]
 8011832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	221a      	movs	r2, #26
 8011838:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801183a:	f000 f843 	bl	80118c4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801183e:	4b02      	ldr	r3, [pc, #8]	@ (8011848 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011840:	4618      	mov	r0, r3
 8011842:	3708      	adds	r7, #8
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	2000010c 	.word	0x2000010c

0801184c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	4603      	mov	r3, r0
 8011854:	6039      	str	r1, [r7, #0]
 8011856:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011858:	79fb      	ldrb	r3, [r7, #7]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d105      	bne.n	801186a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801185e:	683a      	ldr	r2, [r7, #0]
 8011860:	4907      	ldr	r1, [pc, #28]	@ (8011880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011862:	4808      	ldr	r0, [pc, #32]	@ (8011884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011864:	f7ff fda8 	bl	80113b8 <USBD_GetString>
 8011868:	e004      	b.n	8011874 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	4904      	ldr	r1, [pc, #16]	@ (8011880 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801186e:	4805      	ldr	r0, [pc, #20]	@ (8011884 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011870:	f7ff fda2 	bl	80113b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011874:	4b02      	ldr	r3, [pc, #8]	@ (8011880 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011876:	4618      	mov	r0, r3
 8011878:	3708      	adds	r7, #8
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	20001c84 	.word	0x20001c84
 8011884:	08014a5c 	.word	0x08014a5c

08011888 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	6039      	str	r1, [r7, #0]
 8011892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d105      	bne.n	80118a6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	4907      	ldr	r1, [pc, #28]	@ (80118bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801189e:	4808      	ldr	r0, [pc, #32]	@ (80118c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80118a0:	f7ff fd8a 	bl	80113b8 <USBD_GetString>
 80118a4:	e004      	b.n	80118b0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80118a6:	683a      	ldr	r2, [r7, #0]
 80118a8:	4904      	ldr	r1, [pc, #16]	@ (80118bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80118aa:	4805      	ldr	r0, [pc, #20]	@ (80118c0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80118ac:	f7ff fd84 	bl	80113b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118b0:	4b02      	ldr	r3, [pc, #8]	@ (80118bc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3708      	adds	r7, #8
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	20001c84 	.word	0x20001c84
 80118c0:	08014a68 	.word	0x08014a68

080118c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80118ca:	4b0f      	ldr	r3, [pc, #60]	@ (8011908 <Get_SerialNum+0x44>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80118d0:	4b0e      	ldr	r3, [pc, #56]	@ (801190c <Get_SerialNum+0x48>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80118d6:	4b0e      	ldr	r3, [pc, #56]	@ (8011910 <Get_SerialNum+0x4c>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4413      	add	r3, r2
 80118e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d009      	beq.n	80118fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80118ea:	2208      	movs	r2, #8
 80118ec:	4909      	ldr	r1, [pc, #36]	@ (8011914 <Get_SerialNum+0x50>)
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f000 f814 	bl	801191c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80118f4:	2204      	movs	r2, #4
 80118f6:	4908      	ldr	r1, [pc, #32]	@ (8011918 <Get_SerialNum+0x54>)
 80118f8:	68b8      	ldr	r0, [r7, #8]
 80118fa:	f000 f80f 	bl	801191c <IntToUnicode>
  }
}
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop
 8011908:	1fff7590 	.word	0x1fff7590
 801190c:	1fff7594 	.word	0x1fff7594
 8011910:	1fff7598 	.word	0x1fff7598
 8011914:	2000010e 	.word	0x2000010e
 8011918:	2000011e 	.word	0x2000011e

0801191c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801191c:	b480      	push	{r7}
 801191e:	b087      	sub	sp, #28
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	4613      	mov	r3, r2
 8011928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801192e:	2300      	movs	r3, #0
 8011930:	75fb      	strb	r3, [r7, #23]
 8011932:	e027      	b.n	8011984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	0f1b      	lsrs	r3, r3, #28
 8011938:	2b09      	cmp	r3, #9
 801193a:	d80b      	bhi.n	8011954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	0f1b      	lsrs	r3, r3, #28
 8011940:	b2da      	uxtb	r2, r3
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	005b      	lsls	r3, r3, #1
 8011946:	4619      	mov	r1, r3
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	440b      	add	r3, r1
 801194c:	3230      	adds	r2, #48	@ 0x30
 801194e:	b2d2      	uxtb	r2, r2
 8011950:	701a      	strb	r2, [r3, #0]
 8011952:	e00a      	b.n	801196a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	0f1b      	lsrs	r3, r3, #28
 8011958:	b2da      	uxtb	r2, r3
 801195a:	7dfb      	ldrb	r3, [r7, #23]
 801195c:	005b      	lsls	r3, r3, #1
 801195e:	4619      	mov	r1, r3
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	440b      	add	r3, r1
 8011964:	3237      	adds	r2, #55	@ 0x37
 8011966:	b2d2      	uxtb	r2, r2
 8011968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	011b      	lsls	r3, r3, #4
 801196e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011970:	7dfb      	ldrb	r3, [r7, #23]
 8011972:	005b      	lsls	r3, r3, #1
 8011974:	3301      	adds	r3, #1
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	4413      	add	r3, r2
 801197a:	2200      	movs	r2, #0
 801197c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	3301      	adds	r3, #1
 8011982:	75fb      	strb	r3, [r7, #23]
 8011984:	7dfa      	ldrb	r2, [r7, #23]
 8011986:	79fb      	ldrb	r3, [r7, #7]
 8011988:	429a      	cmp	r2, r3
 801198a:	d3d3      	bcc.n	8011934 <IntToUnicode+0x18>
  }
}
 801198c:	bf00      	nop
 801198e:	bf00      	nop
 8011990:	371c      	adds	r7, #28
 8011992:	46bd      	mov	sp, r7
 8011994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011998:	4770      	bx	lr

0801199a <LL_AHB2_GRP1_EnableClock>:
{
 801199a:	b480      	push	{r7}
 801199c:	b085      	sub	sp, #20
 801199e:	af00      	add	r7, sp, #0
 80119a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80119a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	4313      	orrs	r3, r2
 80119b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80119b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	4013      	ands	r3, r2
 80119bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80119be:	68fb      	ldr	r3, [r7, #12]
}
 80119c0:	bf00      	nop
 80119c2:	3714      	adds	r7, #20
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <LL_APB1_GRP1_EnableClock>:
{
 80119cc:	b480      	push	{r7}
 80119ce:	b085      	sub	sp, #20
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80119d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	4313      	orrs	r3, r2
 80119e2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80119e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80119e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4013      	ands	r3, r2
 80119ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80119f0:	68fb      	ldr	r3, [r7, #12]
}
 80119f2:	bf00      	nop
 80119f4:	3714      	adds	r7, #20
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
	...

08011a00 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b088      	sub	sp, #32
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a08:	f107 030c 	add.w	r3, r7, #12
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	601a      	str	r2, [r3, #0]
 8011a10:	605a      	str	r2, [r3, #4]
 8011a12:	609a      	str	r2, [r3, #8]
 8011a14:	60da      	str	r2, [r3, #12]
 8011a16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	4a17      	ldr	r2, [pc, #92]	@ (8011a7c <HAL_PCD_MspInit+0x7c>)
 8011a1e:	4293      	cmp	r3, r2
 8011a20:	d128      	bne.n	8011a74 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a22:	2001      	movs	r0, #1
 8011a24:	f7ff ffb9 	bl	801199a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8011a28:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011a2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a2e:	2302      	movs	r3, #2
 8011a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a32:	2300      	movs	r3, #0
 8011a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a36:	2300      	movs	r3, #0
 8011a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011a3a:	230a      	movs	r3, #10
 8011a3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a3e:	f107 030c 	add.w	r3, r7, #12
 8011a42:	4619      	mov	r1, r3
 8011a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011a48:	f7f5 f898 	bl	8006b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011a4c:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8011a50:	f7ff ffbc 	bl	80119cc <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8011a54:	2200      	movs	r2, #0
 8011a56:	2100      	movs	r1, #0
 8011a58:	2013      	movs	r0, #19
 8011a5a:	f7f4 fd78 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8011a5e:	2013      	movs	r0, #19
 8011a60:	f7f4 fd8f 	bl	8006582 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011a64:	2200      	movs	r2, #0
 8011a66:	2100      	movs	r1, #0
 8011a68:	2014      	movs	r0, #20
 8011a6a:	f7f4 fd70 	bl	800654e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011a6e:	2014      	movs	r0, #20
 8011a70:	f7f4 fd87 	bl	8006582 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011a74:	bf00      	nop
 8011a76:	3720      	adds	r7, #32
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	40006800 	.word	0x40006800

08011a80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011a94:	4619      	mov	r1, r3
 8011a96:	4610      	mov	r0, r2
 8011a98:	f7fe fb93 	bl	80101c2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011ab6:	78fa      	ldrb	r2, [r7, #3]
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	4613      	mov	r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	4413      	add	r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	440b      	add	r3, r1
 8011ac4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	78fb      	ldrb	r3, [r7, #3]
 8011acc:	4619      	mov	r1, r3
 8011ace:	f7fe fbcd 	bl	801026c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011ad2:	bf00      	nop
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011aec:	78fa      	ldrb	r2, [r7, #3]
 8011aee:	6879      	ldr	r1, [r7, #4]
 8011af0:	4613      	mov	r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	4413      	add	r3, r2
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	440b      	add	r3, r1
 8011afa:	3324      	adds	r3, #36	@ 0x24
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	78fb      	ldrb	r3, [r7, #3]
 8011b00:	4619      	mov	r1, r3
 8011b02:	f7fe fc66 	bl	80103d2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011b06:	bf00      	nop
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe fda0 	bl	8010662 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011b22:	bf00      	nop
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b084      	sub	sp, #16
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011b32:	2301      	movs	r3, #1
 8011b34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	795b      	ldrb	r3, [r3, #5]
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d001      	beq.n	8011b42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011b3e:	f7f2 fc37 	bl	80043b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b48:	7bfa      	ldrb	r2, [r7, #15]
 8011b4a:	4611      	mov	r1, r2
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fe fd44 	bl	80105da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fe fcec 	bl	8010536 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011b5e:	bf00      	nop
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
	...

08011b68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b082      	sub	sp, #8
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fe fd3f 	bl	80105fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	7a5b      	ldrb	r3, [r3, #9]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d005      	beq.n	8011b90 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b84:	4b04      	ldr	r3, [pc, #16]	@ (8011b98 <HAL_PCD_SuspendCallback+0x30>)
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	4a03      	ldr	r2, [pc, #12]	@ (8011b98 <HAL_PCD_SuspendCallback+0x30>)
 8011b8a:	f043 0306 	orr.w	r3, r3, #6
 8011b8e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	e000ed00 	.word	0xe000ed00

08011b9c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	7a5b      	ldrb	r3, [r3, #9]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d007      	beq.n	8011bbc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bac:	4b08      	ldr	r3, [pc, #32]	@ (8011bd0 <HAL_PCD_ResumeCallback+0x34>)
 8011bae:	691b      	ldr	r3, [r3, #16]
 8011bb0:	4a07      	ldr	r2, [pc, #28]	@ (8011bd0 <HAL_PCD_ResumeCallback+0x34>)
 8011bb2:	f023 0306 	bic.w	r3, r3, #6
 8011bb6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011bb8:	f000 f9fa 	bl	8011fb0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fe fd35 	bl	8010632 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	e000ed00 	.word	0xe000ed00

08011bd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011bd4:	b580      	push	{r7, lr}
 8011bd6:	b082      	sub	sp, #8
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	4a2a      	ldr	r2, [pc, #168]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011be8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011bec:	f7f8 fa9a 	bl	800a124 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011bf0:	4b27      	ldr	r3, [pc, #156]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011bf2:	4a28      	ldr	r2, [pc, #160]	@ (8011c94 <USBD_LL_Init+0xc0>)
 8011bf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011bf6:	4b26      	ldr	r3, [pc, #152]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011bf8:	2208      	movs	r2, #8
 8011bfa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011bfc:	4b24      	ldr	r3, [pc, #144]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011bfe:	2202      	movs	r2, #2
 8011c00:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011c02:	4b23      	ldr	r3, [pc, #140]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c04:	2202      	movs	r2, #2
 8011c06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011c08:	4b21      	ldr	r3, [pc, #132]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011c0e:	4b20      	ldr	r3, [pc, #128]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c10:	2200      	movs	r2, #0
 8011c12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011c14:	4b1e      	ldr	r3, [pc, #120]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c16:	2200      	movs	r2, #0
 8011c18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011c20:	481b      	ldr	r0, [pc, #108]	@ (8011c90 <USBD_LL_Init+0xbc>)
 8011c22:	f7f6 fd2e 	bl	8008682 <HAL_PCD_Init>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011c2c:	f7f2 fbc0 	bl	80043b0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c36:	2318      	movs	r3, #24
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	f7f8 f9e7 	bl	800a00e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c46:	2358      	movs	r3, #88	@ 0x58
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2180      	movs	r1, #128	@ 0x80
 8011c4c:	f7f8 f9df 	bl	800a00e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c56:	23c0      	movs	r3, #192	@ 0xc0
 8011c58:	2200      	movs	r2, #0
 8011c5a:	2181      	movs	r1, #129	@ 0x81
 8011c5c:	f7f8 f9d7 	bl	800a00e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c66:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	2101      	movs	r1, #1
 8011c6e:	f7f8 f9ce 	bl	800a00e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2182      	movs	r1, #130	@ 0x82
 8011c80:	f7f8 f9c5 	bl	800a00e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011c84:	2300      	movs	r3, #0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3708      	adds	r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	20001e84 	.word	0x20001e84
 8011c94:	40006800 	.word	0x40006800

08011c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7f6 fdb5 	bl	800881e <HAL_PCD_Start>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cb8:	7bfb      	ldrb	r3, [r7, #15]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f000 f97e 	bl	8011fbc <USBD_Get_USB_Status>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011cce:	b580      	push	{r7, lr}
 8011cd0:	b084      	sub	sp, #16
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	4611      	mov	r1, r2
 8011cda:	461a      	mov	r2, r3
 8011cdc:	4603      	mov	r3, r0
 8011cde:	70fb      	strb	r3, [r7, #3]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70bb      	strb	r3, [r7, #2]
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011cf6:	78bb      	ldrb	r3, [r7, #2]
 8011cf8:	883a      	ldrh	r2, [r7, #0]
 8011cfa:	78f9      	ldrb	r1, [r7, #3]
 8011cfc:	f7f6 fefc 	bl	8008af8 <HAL_PCD_EP_Open>
 8011d00:	4603      	mov	r3, r0
 8011d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d04:	7bfb      	ldrb	r3, [r7, #15]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 f958 	bl	8011fbc <USBD_Get_USB_Status>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}

08011d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
 8011d22:	460b      	mov	r3, r1
 8011d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d34:	78fa      	ldrb	r2, [r7, #3]
 8011d36:	4611      	mov	r1, r2
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7f6 ff3a 	bl	8008bb2 <HAL_PCD_EP_Close>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d42:	7bfb      	ldrb	r3, [r7, #15]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f000 f939 	bl	8011fbc <USBD_Get_USB_Status>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	460b      	mov	r3, r1
 8011d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d64:	2300      	movs	r3, #0
 8011d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d72:	78fa      	ldrb	r2, [r7, #3]
 8011d74:	4611      	mov	r1, r2
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7f6 ffe3 	bl	8008d42 <HAL_PCD_EP_SetStall>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d80:	7bfb      	ldrb	r3, [r7, #15]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 f91a 	bl	8011fbc <USBD_Get_USB_Status>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	460b      	mov	r3, r1
 8011da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011da2:	2300      	movs	r3, #0
 8011da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011da6:	2300      	movs	r3, #0
 8011da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011db0:	78fa      	ldrb	r2, [r7, #3]
 8011db2:	4611      	mov	r1, r2
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7f7 f816 	bl	8008de6 <HAL_PCD_EP_ClrStall>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dbe:	7bfb      	ldrb	r3, [r7, #15]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f000 f8fb 	bl	8011fbc <USBD_Get_USB_Status>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dcc:	4618      	mov	r0, r3
 8011dce:	3710      	adds	r7, #16
 8011dd0:	46bd      	mov	sp, r7
 8011dd2:	bd80      	pop	{r7, pc}

08011dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011de6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	da0b      	bge.n	8011e08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011df0:	78fb      	ldrb	r3, [r7, #3]
 8011df2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011df6:	68f9      	ldr	r1, [r7, #12]
 8011df8:	4613      	mov	r3, r2
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	440b      	add	r3, r1
 8011e02:	3312      	adds	r3, #18
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	e00b      	b.n	8011e20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011e08:	78fb      	ldrb	r3, [r7, #3]
 8011e0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e0e:	68f9      	ldr	r1, [r7, #12]
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	440b      	add	r3, r1
 8011e1a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011e1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3714      	adds	r7, #20
 8011e24:	46bd      	mov	sp, r7
 8011e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2a:	4770      	bx	lr

08011e2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b084      	sub	sp, #16
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
 8011e34:	460b      	mov	r3, r1
 8011e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e46:	78fa      	ldrb	r2, [r7, #3]
 8011e48:	4611      	mov	r1, r2
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7f6 fe30 	bl	8008ab0 <HAL_PCD_SetAddress>
 8011e50:	4603      	mov	r3, r0
 8011e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
 8011e56:	4618      	mov	r0, r3
 8011e58:	f000 f8b0 	bl	8011fbc <USBD_Get_USB_Status>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3710      	adds	r7, #16
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}

08011e6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b086      	sub	sp, #24
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	60f8      	str	r0, [r7, #12]
 8011e72:	607a      	str	r2, [r7, #4]
 8011e74:	603b      	str	r3, [r7, #0]
 8011e76:	460b      	mov	r3, r1
 8011e78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011e88:	7af9      	ldrb	r1, [r7, #11]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	f7f6 ff21 	bl	8008cd4 <HAL_PCD_EP_Transmit>
 8011e92:	4603      	mov	r3, r0
 8011e94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e96:	7dfb      	ldrb	r3, [r7, #23]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f000 f88f 	bl	8011fbc <USBD_Get_USB_Status>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ea2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}

08011eac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b086      	sub	sp, #24
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011eca:	7af9      	ldrb	r1, [r7, #11]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	f7f6 feb7 	bl	8008c42 <HAL_PCD_EP_Receive>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ed8:	7dfb      	ldrb	r3, [r7, #23]
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 f86e 	bl	8011fbc <USBD_Get_USB_Status>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ee4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3718      	adds	r7, #24
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	b082      	sub	sp, #8
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f00:	78fa      	ldrb	r2, [r7, #3]
 8011f02:	4611      	mov	r1, r2
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7f6 fecd 	bl	8008ca4 <HAL_PCD_EP_GetRxCount>
 8011f0a:	4603      	mov	r3, r0
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3708      	adds	r7, #8
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011f20:	78fb      	ldrb	r3, [r7, #3]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <HAL_PCDEx_LPM_Callback+0x18>
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d013      	beq.n	8011f52 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011f2a:	e023      	b.n	8011f74 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	7a5b      	ldrb	r3, [r3, #9]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d007      	beq.n	8011f44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011f34:	f000 f83c 	bl	8011fb0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f38:	4b10      	ldr	r3, [pc, #64]	@ (8011f7c <HAL_PCDEx_LPM_Callback+0x68>)
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8011f7c <HAL_PCDEx_LPM_Callback+0x68>)
 8011f3e:	f023 0306 	bic.w	r3, r3, #6
 8011f42:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fe fb71 	bl	8010632 <USBD_LL_Resume>
    break;
 8011f50:	e010      	b.n	8011f74 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f7fe fb4e 	bl	80105fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	7a5b      	ldrb	r3, [r3, #9]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d005      	beq.n	8011f72 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011f66:	4b05      	ldr	r3, [pc, #20]	@ (8011f7c <HAL_PCDEx_LPM_Callback+0x68>)
 8011f68:	691b      	ldr	r3, [r3, #16]
 8011f6a:	4a04      	ldr	r2, [pc, #16]	@ (8011f7c <HAL_PCDEx_LPM_Callback+0x68>)
 8011f6c:	f043 0306 	orr.w	r3, r3, #6
 8011f70:	6113      	str	r3, [r2, #16]
    break;
 8011f72:	bf00      	nop
}
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	e000ed00 	.word	0xe000ed00

08011f80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011f88:	4b03      	ldr	r3, [pc, #12]	@ (8011f98 <USBD_static_malloc+0x18>)
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	370c      	adds	r7, #12
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f94:	4770      	bx	lr
 8011f96:	bf00      	nop
 8011f98:	20002160 	.word	0x20002160

08011f9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011f9c:	b480      	push	{r7}
 8011f9e:	b083      	sub	sp, #12
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011fa4:	bf00      	nop
 8011fa6:	370c      	adds	r7, #12
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011fb4:	f7f1 fffa 	bl	8003fac <SystemClock_Config>
}
 8011fb8:	bf00      	nop
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011fca:	79fb      	ldrb	r3, [r7, #7]
 8011fcc:	2b03      	cmp	r3, #3
 8011fce:	d817      	bhi.n	8012000 <USBD_Get_USB_Status+0x44>
 8011fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8011fd8 <USBD_Get_USB_Status+0x1c>)
 8011fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd6:	bf00      	nop
 8011fd8:	08011fe9 	.word	0x08011fe9
 8011fdc:	08011fef 	.word	0x08011fef
 8011fe0:	08011ff5 	.word	0x08011ff5
 8011fe4:	08011ffb 	.word	0x08011ffb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	73fb      	strb	r3, [r7, #15]
    break;
 8011fec:	e00b      	b.n	8012006 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011fee:	2303      	movs	r3, #3
 8011ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ff2:	e008      	b.n	8012006 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ff8:	e005      	b.n	8012006 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011ffa:	2303      	movs	r3, #3
 8011ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8011ffe:	e002      	b.n	8012006 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012000:	2303      	movs	r3, #3
 8012002:	73fb      	strb	r3, [r7, #15]
    break;
 8012004:	bf00      	nop
  }
  return usb_status;
 8012006:	7bfb      	ldrb	r3, [r7, #15]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3714      	adds	r7, #20
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr

08012014 <__cvt>:
 8012014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012018:	ec57 6b10 	vmov	r6, r7, d0
 801201c:	2f00      	cmp	r7, #0
 801201e:	460c      	mov	r4, r1
 8012020:	4619      	mov	r1, r3
 8012022:	463b      	mov	r3, r7
 8012024:	bfbb      	ittet	lt
 8012026:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801202a:	461f      	movlt	r7, r3
 801202c:	2300      	movge	r3, #0
 801202e:	232d      	movlt	r3, #45	@ 0x2d
 8012030:	700b      	strb	r3, [r1, #0]
 8012032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012034:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012038:	4691      	mov	r9, r2
 801203a:	f023 0820 	bic.w	r8, r3, #32
 801203e:	bfbc      	itt	lt
 8012040:	4632      	movlt	r2, r6
 8012042:	4616      	movlt	r6, r2
 8012044:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012048:	d005      	beq.n	8012056 <__cvt+0x42>
 801204a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801204e:	d100      	bne.n	8012052 <__cvt+0x3e>
 8012050:	3401      	adds	r4, #1
 8012052:	2102      	movs	r1, #2
 8012054:	e000      	b.n	8012058 <__cvt+0x44>
 8012056:	2103      	movs	r1, #3
 8012058:	ab03      	add	r3, sp, #12
 801205a:	9301      	str	r3, [sp, #4]
 801205c:	ab02      	add	r3, sp, #8
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	ec47 6b10 	vmov	d0, r6, r7
 8012064:	4653      	mov	r3, sl
 8012066:	4622      	mov	r2, r4
 8012068:	f000 fe62 	bl	8012d30 <_dtoa_r>
 801206c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012070:	4605      	mov	r5, r0
 8012072:	d119      	bne.n	80120a8 <__cvt+0x94>
 8012074:	f019 0f01 	tst.w	r9, #1
 8012078:	d00e      	beq.n	8012098 <__cvt+0x84>
 801207a:	eb00 0904 	add.w	r9, r0, r4
 801207e:	2200      	movs	r2, #0
 8012080:	2300      	movs	r3, #0
 8012082:	4630      	mov	r0, r6
 8012084:	4639      	mov	r1, r7
 8012086:	f7ee fcf7 	bl	8000a78 <__aeabi_dcmpeq>
 801208a:	b108      	cbz	r0, 8012090 <__cvt+0x7c>
 801208c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012090:	2230      	movs	r2, #48	@ 0x30
 8012092:	9b03      	ldr	r3, [sp, #12]
 8012094:	454b      	cmp	r3, r9
 8012096:	d31e      	bcc.n	80120d6 <__cvt+0xc2>
 8012098:	9b03      	ldr	r3, [sp, #12]
 801209a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801209c:	1b5b      	subs	r3, r3, r5
 801209e:	4628      	mov	r0, r5
 80120a0:	6013      	str	r3, [r2, #0]
 80120a2:	b004      	add	sp, #16
 80120a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80120ac:	eb00 0904 	add.w	r9, r0, r4
 80120b0:	d1e5      	bne.n	801207e <__cvt+0x6a>
 80120b2:	7803      	ldrb	r3, [r0, #0]
 80120b4:	2b30      	cmp	r3, #48	@ 0x30
 80120b6:	d10a      	bne.n	80120ce <__cvt+0xba>
 80120b8:	2200      	movs	r2, #0
 80120ba:	2300      	movs	r3, #0
 80120bc:	4630      	mov	r0, r6
 80120be:	4639      	mov	r1, r7
 80120c0:	f7ee fcda 	bl	8000a78 <__aeabi_dcmpeq>
 80120c4:	b918      	cbnz	r0, 80120ce <__cvt+0xba>
 80120c6:	f1c4 0401 	rsb	r4, r4, #1
 80120ca:	f8ca 4000 	str.w	r4, [sl]
 80120ce:	f8da 3000 	ldr.w	r3, [sl]
 80120d2:	4499      	add	r9, r3
 80120d4:	e7d3      	b.n	801207e <__cvt+0x6a>
 80120d6:	1c59      	adds	r1, r3, #1
 80120d8:	9103      	str	r1, [sp, #12]
 80120da:	701a      	strb	r2, [r3, #0]
 80120dc:	e7d9      	b.n	8012092 <__cvt+0x7e>

080120de <__exponent>:
 80120de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120e0:	2900      	cmp	r1, #0
 80120e2:	bfba      	itte	lt
 80120e4:	4249      	neglt	r1, r1
 80120e6:	232d      	movlt	r3, #45	@ 0x2d
 80120e8:	232b      	movge	r3, #43	@ 0x2b
 80120ea:	2909      	cmp	r1, #9
 80120ec:	7002      	strb	r2, [r0, #0]
 80120ee:	7043      	strb	r3, [r0, #1]
 80120f0:	dd29      	ble.n	8012146 <__exponent+0x68>
 80120f2:	f10d 0307 	add.w	r3, sp, #7
 80120f6:	461d      	mov	r5, r3
 80120f8:	270a      	movs	r7, #10
 80120fa:	461a      	mov	r2, r3
 80120fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8012100:	fb07 1416 	mls	r4, r7, r6, r1
 8012104:	3430      	adds	r4, #48	@ 0x30
 8012106:	f802 4c01 	strb.w	r4, [r2, #-1]
 801210a:	460c      	mov	r4, r1
 801210c:	2c63      	cmp	r4, #99	@ 0x63
 801210e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012112:	4631      	mov	r1, r6
 8012114:	dcf1      	bgt.n	80120fa <__exponent+0x1c>
 8012116:	3130      	adds	r1, #48	@ 0x30
 8012118:	1e94      	subs	r4, r2, #2
 801211a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801211e:	1c41      	adds	r1, r0, #1
 8012120:	4623      	mov	r3, r4
 8012122:	42ab      	cmp	r3, r5
 8012124:	d30a      	bcc.n	801213c <__exponent+0x5e>
 8012126:	f10d 0309 	add.w	r3, sp, #9
 801212a:	1a9b      	subs	r3, r3, r2
 801212c:	42ac      	cmp	r4, r5
 801212e:	bf88      	it	hi
 8012130:	2300      	movhi	r3, #0
 8012132:	3302      	adds	r3, #2
 8012134:	4403      	add	r3, r0
 8012136:	1a18      	subs	r0, r3, r0
 8012138:	b003      	add	sp, #12
 801213a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801213c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012140:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012144:	e7ed      	b.n	8012122 <__exponent+0x44>
 8012146:	2330      	movs	r3, #48	@ 0x30
 8012148:	3130      	adds	r1, #48	@ 0x30
 801214a:	7083      	strb	r3, [r0, #2]
 801214c:	70c1      	strb	r1, [r0, #3]
 801214e:	1d03      	adds	r3, r0, #4
 8012150:	e7f1      	b.n	8012136 <__exponent+0x58>
	...

08012154 <_printf_float>:
 8012154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012158:	b08d      	sub	sp, #52	@ 0x34
 801215a:	460c      	mov	r4, r1
 801215c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012160:	4616      	mov	r6, r2
 8012162:	461f      	mov	r7, r3
 8012164:	4605      	mov	r5, r0
 8012166:	f000 fcd5 	bl	8012b14 <_localeconv_r>
 801216a:	6803      	ldr	r3, [r0, #0]
 801216c:	9304      	str	r3, [sp, #16]
 801216e:	4618      	mov	r0, r3
 8012170:	f7ee f856 	bl	8000220 <strlen>
 8012174:	2300      	movs	r3, #0
 8012176:	930a      	str	r3, [sp, #40]	@ 0x28
 8012178:	f8d8 3000 	ldr.w	r3, [r8]
 801217c:	9005      	str	r0, [sp, #20]
 801217e:	3307      	adds	r3, #7
 8012180:	f023 0307 	bic.w	r3, r3, #7
 8012184:	f103 0208 	add.w	r2, r3, #8
 8012188:	f894 a018 	ldrb.w	sl, [r4, #24]
 801218c:	f8d4 b000 	ldr.w	fp, [r4]
 8012190:	f8c8 2000 	str.w	r2, [r8]
 8012194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012198:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801219c:	9307      	str	r3, [sp, #28]
 801219e:	f8cd 8018 	str.w	r8, [sp, #24]
 80121a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80121a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121aa:	4b9c      	ldr	r3, [pc, #624]	@ (801241c <_printf_float+0x2c8>)
 80121ac:	f04f 32ff 	mov.w	r2, #4294967295
 80121b0:	f7ee fc94 	bl	8000adc <__aeabi_dcmpun>
 80121b4:	bb70      	cbnz	r0, 8012214 <_printf_float+0xc0>
 80121b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121ba:	4b98      	ldr	r3, [pc, #608]	@ (801241c <_printf_float+0x2c8>)
 80121bc:	f04f 32ff 	mov.w	r2, #4294967295
 80121c0:	f7ee fc6e 	bl	8000aa0 <__aeabi_dcmple>
 80121c4:	bb30      	cbnz	r0, 8012214 <_printf_float+0xc0>
 80121c6:	2200      	movs	r2, #0
 80121c8:	2300      	movs	r3, #0
 80121ca:	4640      	mov	r0, r8
 80121cc:	4649      	mov	r1, r9
 80121ce:	f7ee fc5d 	bl	8000a8c <__aeabi_dcmplt>
 80121d2:	b110      	cbz	r0, 80121da <_printf_float+0x86>
 80121d4:	232d      	movs	r3, #45	@ 0x2d
 80121d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121da:	4a91      	ldr	r2, [pc, #580]	@ (8012420 <_printf_float+0x2cc>)
 80121dc:	4b91      	ldr	r3, [pc, #580]	@ (8012424 <_printf_float+0x2d0>)
 80121de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80121e2:	bf94      	ite	ls
 80121e4:	4690      	movls	r8, r2
 80121e6:	4698      	movhi	r8, r3
 80121e8:	2303      	movs	r3, #3
 80121ea:	6123      	str	r3, [r4, #16]
 80121ec:	f02b 0304 	bic.w	r3, fp, #4
 80121f0:	6023      	str	r3, [r4, #0]
 80121f2:	f04f 0900 	mov.w	r9, #0
 80121f6:	9700      	str	r7, [sp, #0]
 80121f8:	4633      	mov	r3, r6
 80121fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80121fc:	4621      	mov	r1, r4
 80121fe:	4628      	mov	r0, r5
 8012200:	f000 f9d2 	bl	80125a8 <_printf_common>
 8012204:	3001      	adds	r0, #1
 8012206:	f040 808d 	bne.w	8012324 <_printf_float+0x1d0>
 801220a:	f04f 30ff 	mov.w	r0, #4294967295
 801220e:	b00d      	add	sp, #52	@ 0x34
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012214:	4642      	mov	r2, r8
 8012216:	464b      	mov	r3, r9
 8012218:	4640      	mov	r0, r8
 801221a:	4649      	mov	r1, r9
 801221c:	f7ee fc5e 	bl	8000adc <__aeabi_dcmpun>
 8012220:	b140      	cbz	r0, 8012234 <_printf_float+0xe0>
 8012222:	464b      	mov	r3, r9
 8012224:	2b00      	cmp	r3, #0
 8012226:	bfbc      	itt	lt
 8012228:	232d      	movlt	r3, #45	@ 0x2d
 801222a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801222e:	4a7e      	ldr	r2, [pc, #504]	@ (8012428 <_printf_float+0x2d4>)
 8012230:	4b7e      	ldr	r3, [pc, #504]	@ (801242c <_printf_float+0x2d8>)
 8012232:	e7d4      	b.n	80121de <_printf_float+0x8a>
 8012234:	6863      	ldr	r3, [r4, #4]
 8012236:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801223a:	9206      	str	r2, [sp, #24]
 801223c:	1c5a      	adds	r2, r3, #1
 801223e:	d13b      	bne.n	80122b8 <_printf_float+0x164>
 8012240:	2306      	movs	r3, #6
 8012242:	6063      	str	r3, [r4, #4]
 8012244:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012248:	2300      	movs	r3, #0
 801224a:	6022      	str	r2, [r4, #0]
 801224c:	9303      	str	r3, [sp, #12]
 801224e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012250:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012254:	ab09      	add	r3, sp, #36	@ 0x24
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	6861      	ldr	r1, [r4, #4]
 801225a:	ec49 8b10 	vmov	d0, r8, r9
 801225e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012262:	4628      	mov	r0, r5
 8012264:	f7ff fed6 	bl	8012014 <__cvt>
 8012268:	9b06      	ldr	r3, [sp, #24]
 801226a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801226c:	2b47      	cmp	r3, #71	@ 0x47
 801226e:	4680      	mov	r8, r0
 8012270:	d129      	bne.n	80122c6 <_printf_float+0x172>
 8012272:	1cc8      	adds	r0, r1, #3
 8012274:	db02      	blt.n	801227c <_printf_float+0x128>
 8012276:	6863      	ldr	r3, [r4, #4]
 8012278:	4299      	cmp	r1, r3
 801227a:	dd41      	ble.n	8012300 <_printf_float+0x1ac>
 801227c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012280:	fa5f fa8a 	uxtb.w	sl, sl
 8012284:	3901      	subs	r1, #1
 8012286:	4652      	mov	r2, sl
 8012288:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801228c:	9109      	str	r1, [sp, #36]	@ 0x24
 801228e:	f7ff ff26 	bl	80120de <__exponent>
 8012292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012294:	1813      	adds	r3, r2, r0
 8012296:	2a01      	cmp	r2, #1
 8012298:	4681      	mov	r9, r0
 801229a:	6123      	str	r3, [r4, #16]
 801229c:	dc02      	bgt.n	80122a4 <_printf_float+0x150>
 801229e:	6822      	ldr	r2, [r4, #0]
 80122a0:	07d2      	lsls	r2, r2, #31
 80122a2:	d501      	bpl.n	80122a8 <_printf_float+0x154>
 80122a4:	3301      	adds	r3, #1
 80122a6:	6123      	str	r3, [r4, #16]
 80122a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d0a2      	beq.n	80121f6 <_printf_float+0xa2>
 80122b0:	232d      	movs	r3, #45	@ 0x2d
 80122b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122b6:	e79e      	b.n	80121f6 <_printf_float+0xa2>
 80122b8:	9a06      	ldr	r2, [sp, #24]
 80122ba:	2a47      	cmp	r2, #71	@ 0x47
 80122bc:	d1c2      	bne.n	8012244 <_printf_float+0xf0>
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d1c0      	bne.n	8012244 <_printf_float+0xf0>
 80122c2:	2301      	movs	r3, #1
 80122c4:	e7bd      	b.n	8012242 <_printf_float+0xee>
 80122c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80122ca:	d9db      	bls.n	8012284 <_printf_float+0x130>
 80122cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80122d0:	d118      	bne.n	8012304 <_printf_float+0x1b0>
 80122d2:	2900      	cmp	r1, #0
 80122d4:	6863      	ldr	r3, [r4, #4]
 80122d6:	dd0b      	ble.n	80122f0 <_printf_float+0x19c>
 80122d8:	6121      	str	r1, [r4, #16]
 80122da:	b913      	cbnz	r3, 80122e2 <_printf_float+0x18e>
 80122dc:	6822      	ldr	r2, [r4, #0]
 80122de:	07d0      	lsls	r0, r2, #31
 80122e0:	d502      	bpl.n	80122e8 <_printf_float+0x194>
 80122e2:	3301      	adds	r3, #1
 80122e4:	440b      	add	r3, r1
 80122e6:	6123      	str	r3, [r4, #16]
 80122e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80122ea:	f04f 0900 	mov.w	r9, #0
 80122ee:	e7db      	b.n	80122a8 <_printf_float+0x154>
 80122f0:	b913      	cbnz	r3, 80122f8 <_printf_float+0x1a4>
 80122f2:	6822      	ldr	r2, [r4, #0]
 80122f4:	07d2      	lsls	r2, r2, #31
 80122f6:	d501      	bpl.n	80122fc <_printf_float+0x1a8>
 80122f8:	3302      	adds	r3, #2
 80122fa:	e7f4      	b.n	80122e6 <_printf_float+0x192>
 80122fc:	2301      	movs	r3, #1
 80122fe:	e7f2      	b.n	80122e6 <_printf_float+0x192>
 8012300:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012306:	4299      	cmp	r1, r3
 8012308:	db05      	blt.n	8012316 <_printf_float+0x1c2>
 801230a:	6823      	ldr	r3, [r4, #0]
 801230c:	6121      	str	r1, [r4, #16]
 801230e:	07d8      	lsls	r0, r3, #31
 8012310:	d5ea      	bpl.n	80122e8 <_printf_float+0x194>
 8012312:	1c4b      	adds	r3, r1, #1
 8012314:	e7e7      	b.n	80122e6 <_printf_float+0x192>
 8012316:	2900      	cmp	r1, #0
 8012318:	bfd4      	ite	le
 801231a:	f1c1 0202 	rsble	r2, r1, #2
 801231e:	2201      	movgt	r2, #1
 8012320:	4413      	add	r3, r2
 8012322:	e7e0      	b.n	80122e6 <_printf_float+0x192>
 8012324:	6823      	ldr	r3, [r4, #0]
 8012326:	055a      	lsls	r2, r3, #21
 8012328:	d407      	bmi.n	801233a <_printf_float+0x1e6>
 801232a:	6923      	ldr	r3, [r4, #16]
 801232c:	4642      	mov	r2, r8
 801232e:	4631      	mov	r1, r6
 8012330:	4628      	mov	r0, r5
 8012332:	47b8      	blx	r7
 8012334:	3001      	adds	r0, #1
 8012336:	d12b      	bne.n	8012390 <_printf_float+0x23c>
 8012338:	e767      	b.n	801220a <_printf_float+0xb6>
 801233a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801233e:	f240 80dd 	bls.w	80124fc <_printf_float+0x3a8>
 8012342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012346:	2200      	movs	r2, #0
 8012348:	2300      	movs	r3, #0
 801234a:	f7ee fb95 	bl	8000a78 <__aeabi_dcmpeq>
 801234e:	2800      	cmp	r0, #0
 8012350:	d033      	beq.n	80123ba <_printf_float+0x266>
 8012352:	4a37      	ldr	r2, [pc, #220]	@ (8012430 <_printf_float+0x2dc>)
 8012354:	2301      	movs	r3, #1
 8012356:	4631      	mov	r1, r6
 8012358:	4628      	mov	r0, r5
 801235a:	47b8      	blx	r7
 801235c:	3001      	adds	r0, #1
 801235e:	f43f af54 	beq.w	801220a <_printf_float+0xb6>
 8012362:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012366:	4543      	cmp	r3, r8
 8012368:	db02      	blt.n	8012370 <_printf_float+0x21c>
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	07d8      	lsls	r0, r3, #31
 801236e:	d50f      	bpl.n	8012390 <_printf_float+0x23c>
 8012370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012374:	4631      	mov	r1, r6
 8012376:	4628      	mov	r0, r5
 8012378:	47b8      	blx	r7
 801237a:	3001      	adds	r0, #1
 801237c:	f43f af45 	beq.w	801220a <_printf_float+0xb6>
 8012380:	f04f 0900 	mov.w	r9, #0
 8012384:	f108 38ff 	add.w	r8, r8, #4294967295
 8012388:	f104 0a1a 	add.w	sl, r4, #26
 801238c:	45c8      	cmp	r8, r9
 801238e:	dc09      	bgt.n	80123a4 <_printf_float+0x250>
 8012390:	6823      	ldr	r3, [r4, #0]
 8012392:	079b      	lsls	r3, r3, #30
 8012394:	f100 8103 	bmi.w	801259e <_printf_float+0x44a>
 8012398:	68e0      	ldr	r0, [r4, #12]
 801239a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801239c:	4298      	cmp	r0, r3
 801239e:	bfb8      	it	lt
 80123a0:	4618      	movlt	r0, r3
 80123a2:	e734      	b.n	801220e <_printf_float+0xba>
 80123a4:	2301      	movs	r3, #1
 80123a6:	4652      	mov	r2, sl
 80123a8:	4631      	mov	r1, r6
 80123aa:	4628      	mov	r0, r5
 80123ac:	47b8      	blx	r7
 80123ae:	3001      	adds	r0, #1
 80123b0:	f43f af2b 	beq.w	801220a <_printf_float+0xb6>
 80123b4:	f109 0901 	add.w	r9, r9, #1
 80123b8:	e7e8      	b.n	801238c <_printf_float+0x238>
 80123ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123bc:	2b00      	cmp	r3, #0
 80123be:	dc39      	bgt.n	8012434 <_printf_float+0x2e0>
 80123c0:	4a1b      	ldr	r2, [pc, #108]	@ (8012430 <_printf_float+0x2dc>)
 80123c2:	2301      	movs	r3, #1
 80123c4:	4631      	mov	r1, r6
 80123c6:	4628      	mov	r0, r5
 80123c8:	47b8      	blx	r7
 80123ca:	3001      	adds	r0, #1
 80123cc:	f43f af1d 	beq.w	801220a <_printf_float+0xb6>
 80123d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80123d4:	ea59 0303 	orrs.w	r3, r9, r3
 80123d8:	d102      	bne.n	80123e0 <_printf_float+0x28c>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	07d9      	lsls	r1, r3, #31
 80123de:	d5d7      	bpl.n	8012390 <_printf_float+0x23c>
 80123e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123e4:	4631      	mov	r1, r6
 80123e6:	4628      	mov	r0, r5
 80123e8:	47b8      	blx	r7
 80123ea:	3001      	adds	r0, #1
 80123ec:	f43f af0d 	beq.w	801220a <_printf_float+0xb6>
 80123f0:	f04f 0a00 	mov.w	sl, #0
 80123f4:	f104 0b1a 	add.w	fp, r4, #26
 80123f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123fa:	425b      	negs	r3, r3
 80123fc:	4553      	cmp	r3, sl
 80123fe:	dc01      	bgt.n	8012404 <_printf_float+0x2b0>
 8012400:	464b      	mov	r3, r9
 8012402:	e793      	b.n	801232c <_printf_float+0x1d8>
 8012404:	2301      	movs	r3, #1
 8012406:	465a      	mov	r2, fp
 8012408:	4631      	mov	r1, r6
 801240a:	4628      	mov	r0, r5
 801240c:	47b8      	blx	r7
 801240e:	3001      	adds	r0, #1
 8012410:	f43f aefb 	beq.w	801220a <_printf_float+0xb6>
 8012414:	f10a 0a01 	add.w	sl, sl, #1
 8012418:	e7ee      	b.n	80123f8 <_printf_float+0x2a4>
 801241a:	bf00      	nop
 801241c:	7fefffff 	.word	0x7fefffff
 8012420:	08014b54 	.word	0x08014b54
 8012424:	08014b58 	.word	0x08014b58
 8012428:	08014b5c 	.word	0x08014b5c
 801242c:	08014b60 	.word	0x08014b60
 8012430:	08014b64 	.word	0x08014b64
 8012434:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012436:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801243a:	4553      	cmp	r3, sl
 801243c:	bfa8      	it	ge
 801243e:	4653      	movge	r3, sl
 8012440:	2b00      	cmp	r3, #0
 8012442:	4699      	mov	r9, r3
 8012444:	dc36      	bgt.n	80124b4 <_printf_float+0x360>
 8012446:	f04f 0b00 	mov.w	fp, #0
 801244a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801244e:	f104 021a 	add.w	r2, r4, #26
 8012452:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012454:	9306      	str	r3, [sp, #24]
 8012456:	eba3 0309 	sub.w	r3, r3, r9
 801245a:	455b      	cmp	r3, fp
 801245c:	dc31      	bgt.n	80124c2 <_printf_float+0x36e>
 801245e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012460:	459a      	cmp	sl, r3
 8012462:	dc3a      	bgt.n	80124da <_printf_float+0x386>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	07da      	lsls	r2, r3, #31
 8012468:	d437      	bmi.n	80124da <_printf_float+0x386>
 801246a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801246c:	ebaa 0903 	sub.w	r9, sl, r3
 8012470:	9b06      	ldr	r3, [sp, #24]
 8012472:	ebaa 0303 	sub.w	r3, sl, r3
 8012476:	4599      	cmp	r9, r3
 8012478:	bfa8      	it	ge
 801247a:	4699      	movge	r9, r3
 801247c:	f1b9 0f00 	cmp.w	r9, #0
 8012480:	dc33      	bgt.n	80124ea <_printf_float+0x396>
 8012482:	f04f 0800 	mov.w	r8, #0
 8012486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801248a:	f104 0b1a 	add.w	fp, r4, #26
 801248e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012490:	ebaa 0303 	sub.w	r3, sl, r3
 8012494:	eba3 0309 	sub.w	r3, r3, r9
 8012498:	4543      	cmp	r3, r8
 801249a:	f77f af79 	ble.w	8012390 <_printf_float+0x23c>
 801249e:	2301      	movs	r3, #1
 80124a0:	465a      	mov	r2, fp
 80124a2:	4631      	mov	r1, r6
 80124a4:	4628      	mov	r0, r5
 80124a6:	47b8      	blx	r7
 80124a8:	3001      	adds	r0, #1
 80124aa:	f43f aeae 	beq.w	801220a <_printf_float+0xb6>
 80124ae:	f108 0801 	add.w	r8, r8, #1
 80124b2:	e7ec      	b.n	801248e <_printf_float+0x33a>
 80124b4:	4642      	mov	r2, r8
 80124b6:	4631      	mov	r1, r6
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b8      	blx	r7
 80124bc:	3001      	adds	r0, #1
 80124be:	d1c2      	bne.n	8012446 <_printf_float+0x2f2>
 80124c0:	e6a3      	b.n	801220a <_printf_float+0xb6>
 80124c2:	2301      	movs	r3, #1
 80124c4:	4631      	mov	r1, r6
 80124c6:	4628      	mov	r0, r5
 80124c8:	9206      	str	r2, [sp, #24]
 80124ca:	47b8      	blx	r7
 80124cc:	3001      	adds	r0, #1
 80124ce:	f43f ae9c 	beq.w	801220a <_printf_float+0xb6>
 80124d2:	9a06      	ldr	r2, [sp, #24]
 80124d4:	f10b 0b01 	add.w	fp, fp, #1
 80124d8:	e7bb      	b.n	8012452 <_printf_float+0x2fe>
 80124da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124de:	4631      	mov	r1, r6
 80124e0:	4628      	mov	r0, r5
 80124e2:	47b8      	blx	r7
 80124e4:	3001      	adds	r0, #1
 80124e6:	d1c0      	bne.n	801246a <_printf_float+0x316>
 80124e8:	e68f      	b.n	801220a <_printf_float+0xb6>
 80124ea:	9a06      	ldr	r2, [sp, #24]
 80124ec:	464b      	mov	r3, r9
 80124ee:	4442      	add	r2, r8
 80124f0:	4631      	mov	r1, r6
 80124f2:	4628      	mov	r0, r5
 80124f4:	47b8      	blx	r7
 80124f6:	3001      	adds	r0, #1
 80124f8:	d1c3      	bne.n	8012482 <_printf_float+0x32e>
 80124fa:	e686      	b.n	801220a <_printf_float+0xb6>
 80124fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012500:	f1ba 0f01 	cmp.w	sl, #1
 8012504:	dc01      	bgt.n	801250a <_printf_float+0x3b6>
 8012506:	07db      	lsls	r3, r3, #31
 8012508:	d536      	bpl.n	8012578 <_printf_float+0x424>
 801250a:	2301      	movs	r3, #1
 801250c:	4642      	mov	r2, r8
 801250e:	4631      	mov	r1, r6
 8012510:	4628      	mov	r0, r5
 8012512:	47b8      	blx	r7
 8012514:	3001      	adds	r0, #1
 8012516:	f43f ae78 	beq.w	801220a <_printf_float+0xb6>
 801251a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801251e:	4631      	mov	r1, r6
 8012520:	4628      	mov	r0, r5
 8012522:	47b8      	blx	r7
 8012524:	3001      	adds	r0, #1
 8012526:	f43f ae70 	beq.w	801220a <_printf_float+0xb6>
 801252a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801252e:	2200      	movs	r2, #0
 8012530:	2300      	movs	r3, #0
 8012532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012536:	f7ee fa9f 	bl	8000a78 <__aeabi_dcmpeq>
 801253a:	b9c0      	cbnz	r0, 801256e <_printf_float+0x41a>
 801253c:	4653      	mov	r3, sl
 801253e:	f108 0201 	add.w	r2, r8, #1
 8012542:	4631      	mov	r1, r6
 8012544:	4628      	mov	r0, r5
 8012546:	47b8      	blx	r7
 8012548:	3001      	adds	r0, #1
 801254a:	d10c      	bne.n	8012566 <_printf_float+0x412>
 801254c:	e65d      	b.n	801220a <_printf_float+0xb6>
 801254e:	2301      	movs	r3, #1
 8012550:	465a      	mov	r2, fp
 8012552:	4631      	mov	r1, r6
 8012554:	4628      	mov	r0, r5
 8012556:	47b8      	blx	r7
 8012558:	3001      	adds	r0, #1
 801255a:	f43f ae56 	beq.w	801220a <_printf_float+0xb6>
 801255e:	f108 0801 	add.w	r8, r8, #1
 8012562:	45d0      	cmp	r8, sl
 8012564:	dbf3      	blt.n	801254e <_printf_float+0x3fa>
 8012566:	464b      	mov	r3, r9
 8012568:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801256c:	e6df      	b.n	801232e <_printf_float+0x1da>
 801256e:	f04f 0800 	mov.w	r8, #0
 8012572:	f104 0b1a 	add.w	fp, r4, #26
 8012576:	e7f4      	b.n	8012562 <_printf_float+0x40e>
 8012578:	2301      	movs	r3, #1
 801257a:	4642      	mov	r2, r8
 801257c:	e7e1      	b.n	8012542 <_printf_float+0x3ee>
 801257e:	2301      	movs	r3, #1
 8012580:	464a      	mov	r2, r9
 8012582:	4631      	mov	r1, r6
 8012584:	4628      	mov	r0, r5
 8012586:	47b8      	blx	r7
 8012588:	3001      	adds	r0, #1
 801258a:	f43f ae3e 	beq.w	801220a <_printf_float+0xb6>
 801258e:	f108 0801 	add.w	r8, r8, #1
 8012592:	68e3      	ldr	r3, [r4, #12]
 8012594:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012596:	1a5b      	subs	r3, r3, r1
 8012598:	4543      	cmp	r3, r8
 801259a:	dcf0      	bgt.n	801257e <_printf_float+0x42a>
 801259c:	e6fc      	b.n	8012398 <_printf_float+0x244>
 801259e:	f04f 0800 	mov.w	r8, #0
 80125a2:	f104 0919 	add.w	r9, r4, #25
 80125a6:	e7f4      	b.n	8012592 <_printf_float+0x43e>

080125a8 <_printf_common>:
 80125a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125ac:	4616      	mov	r6, r2
 80125ae:	4698      	mov	r8, r3
 80125b0:	688a      	ldr	r2, [r1, #8]
 80125b2:	690b      	ldr	r3, [r1, #16]
 80125b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80125b8:	4293      	cmp	r3, r2
 80125ba:	bfb8      	it	lt
 80125bc:	4613      	movlt	r3, r2
 80125be:	6033      	str	r3, [r6, #0]
 80125c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80125c4:	4607      	mov	r7, r0
 80125c6:	460c      	mov	r4, r1
 80125c8:	b10a      	cbz	r2, 80125ce <_printf_common+0x26>
 80125ca:	3301      	adds	r3, #1
 80125cc:	6033      	str	r3, [r6, #0]
 80125ce:	6823      	ldr	r3, [r4, #0]
 80125d0:	0699      	lsls	r1, r3, #26
 80125d2:	bf42      	ittt	mi
 80125d4:	6833      	ldrmi	r3, [r6, #0]
 80125d6:	3302      	addmi	r3, #2
 80125d8:	6033      	strmi	r3, [r6, #0]
 80125da:	6825      	ldr	r5, [r4, #0]
 80125dc:	f015 0506 	ands.w	r5, r5, #6
 80125e0:	d106      	bne.n	80125f0 <_printf_common+0x48>
 80125e2:	f104 0a19 	add.w	sl, r4, #25
 80125e6:	68e3      	ldr	r3, [r4, #12]
 80125e8:	6832      	ldr	r2, [r6, #0]
 80125ea:	1a9b      	subs	r3, r3, r2
 80125ec:	42ab      	cmp	r3, r5
 80125ee:	dc26      	bgt.n	801263e <_printf_common+0x96>
 80125f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80125f4:	6822      	ldr	r2, [r4, #0]
 80125f6:	3b00      	subs	r3, #0
 80125f8:	bf18      	it	ne
 80125fa:	2301      	movne	r3, #1
 80125fc:	0692      	lsls	r2, r2, #26
 80125fe:	d42b      	bmi.n	8012658 <_printf_common+0xb0>
 8012600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012604:	4641      	mov	r1, r8
 8012606:	4638      	mov	r0, r7
 8012608:	47c8      	blx	r9
 801260a:	3001      	adds	r0, #1
 801260c:	d01e      	beq.n	801264c <_printf_common+0xa4>
 801260e:	6823      	ldr	r3, [r4, #0]
 8012610:	6922      	ldr	r2, [r4, #16]
 8012612:	f003 0306 	and.w	r3, r3, #6
 8012616:	2b04      	cmp	r3, #4
 8012618:	bf02      	ittt	eq
 801261a:	68e5      	ldreq	r5, [r4, #12]
 801261c:	6833      	ldreq	r3, [r6, #0]
 801261e:	1aed      	subeq	r5, r5, r3
 8012620:	68a3      	ldr	r3, [r4, #8]
 8012622:	bf0c      	ite	eq
 8012624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012628:	2500      	movne	r5, #0
 801262a:	4293      	cmp	r3, r2
 801262c:	bfc4      	itt	gt
 801262e:	1a9b      	subgt	r3, r3, r2
 8012630:	18ed      	addgt	r5, r5, r3
 8012632:	2600      	movs	r6, #0
 8012634:	341a      	adds	r4, #26
 8012636:	42b5      	cmp	r5, r6
 8012638:	d11a      	bne.n	8012670 <_printf_common+0xc8>
 801263a:	2000      	movs	r0, #0
 801263c:	e008      	b.n	8012650 <_printf_common+0xa8>
 801263e:	2301      	movs	r3, #1
 8012640:	4652      	mov	r2, sl
 8012642:	4641      	mov	r1, r8
 8012644:	4638      	mov	r0, r7
 8012646:	47c8      	blx	r9
 8012648:	3001      	adds	r0, #1
 801264a:	d103      	bne.n	8012654 <_printf_common+0xac>
 801264c:	f04f 30ff 	mov.w	r0, #4294967295
 8012650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012654:	3501      	adds	r5, #1
 8012656:	e7c6      	b.n	80125e6 <_printf_common+0x3e>
 8012658:	18e1      	adds	r1, r4, r3
 801265a:	1c5a      	adds	r2, r3, #1
 801265c:	2030      	movs	r0, #48	@ 0x30
 801265e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012662:	4422      	add	r2, r4
 8012664:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012668:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801266c:	3302      	adds	r3, #2
 801266e:	e7c7      	b.n	8012600 <_printf_common+0x58>
 8012670:	2301      	movs	r3, #1
 8012672:	4622      	mov	r2, r4
 8012674:	4641      	mov	r1, r8
 8012676:	4638      	mov	r0, r7
 8012678:	47c8      	blx	r9
 801267a:	3001      	adds	r0, #1
 801267c:	d0e6      	beq.n	801264c <_printf_common+0xa4>
 801267e:	3601      	adds	r6, #1
 8012680:	e7d9      	b.n	8012636 <_printf_common+0x8e>
	...

08012684 <_printf_i>:
 8012684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012688:	7e0f      	ldrb	r7, [r1, #24]
 801268a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801268c:	2f78      	cmp	r7, #120	@ 0x78
 801268e:	4691      	mov	r9, r2
 8012690:	4680      	mov	r8, r0
 8012692:	460c      	mov	r4, r1
 8012694:	469a      	mov	sl, r3
 8012696:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801269a:	d807      	bhi.n	80126ac <_printf_i+0x28>
 801269c:	2f62      	cmp	r7, #98	@ 0x62
 801269e:	d80a      	bhi.n	80126b6 <_printf_i+0x32>
 80126a0:	2f00      	cmp	r7, #0
 80126a2:	f000 80d2 	beq.w	801284a <_printf_i+0x1c6>
 80126a6:	2f58      	cmp	r7, #88	@ 0x58
 80126a8:	f000 80b9 	beq.w	801281e <_printf_i+0x19a>
 80126ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80126b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80126b4:	e03a      	b.n	801272c <_printf_i+0xa8>
 80126b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80126ba:	2b15      	cmp	r3, #21
 80126bc:	d8f6      	bhi.n	80126ac <_printf_i+0x28>
 80126be:	a101      	add	r1, pc, #4	@ (adr r1, 80126c4 <_printf_i+0x40>)
 80126c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126c4:	0801271d 	.word	0x0801271d
 80126c8:	08012731 	.word	0x08012731
 80126cc:	080126ad 	.word	0x080126ad
 80126d0:	080126ad 	.word	0x080126ad
 80126d4:	080126ad 	.word	0x080126ad
 80126d8:	080126ad 	.word	0x080126ad
 80126dc:	08012731 	.word	0x08012731
 80126e0:	080126ad 	.word	0x080126ad
 80126e4:	080126ad 	.word	0x080126ad
 80126e8:	080126ad 	.word	0x080126ad
 80126ec:	080126ad 	.word	0x080126ad
 80126f0:	08012831 	.word	0x08012831
 80126f4:	0801275b 	.word	0x0801275b
 80126f8:	080127eb 	.word	0x080127eb
 80126fc:	080126ad 	.word	0x080126ad
 8012700:	080126ad 	.word	0x080126ad
 8012704:	08012853 	.word	0x08012853
 8012708:	080126ad 	.word	0x080126ad
 801270c:	0801275b 	.word	0x0801275b
 8012710:	080126ad 	.word	0x080126ad
 8012714:	080126ad 	.word	0x080126ad
 8012718:	080127f3 	.word	0x080127f3
 801271c:	6833      	ldr	r3, [r6, #0]
 801271e:	1d1a      	adds	r2, r3, #4
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	6032      	str	r2, [r6, #0]
 8012724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012728:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801272c:	2301      	movs	r3, #1
 801272e:	e09d      	b.n	801286c <_printf_i+0x1e8>
 8012730:	6833      	ldr	r3, [r6, #0]
 8012732:	6820      	ldr	r0, [r4, #0]
 8012734:	1d19      	adds	r1, r3, #4
 8012736:	6031      	str	r1, [r6, #0]
 8012738:	0606      	lsls	r6, r0, #24
 801273a:	d501      	bpl.n	8012740 <_printf_i+0xbc>
 801273c:	681d      	ldr	r5, [r3, #0]
 801273e:	e003      	b.n	8012748 <_printf_i+0xc4>
 8012740:	0645      	lsls	r5, r0, #25
 8012742:	d5fb      	bpl.n	801273c <_printf_i+0xb8>
 8012744:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012748:	2d00      	cmp	r5, #0
 801274a:	da03      	bge.n	8012754 <_printf_i+0xd0>
 801274c:	232d      	movs	r3, #45	@ 0x2d
 801274e:	426d      	negs	r5, r5
 8012750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012754:	4859      	ldr	r0, [pc, #356]	@ (80128bc <_printf_i+0x238>)
 8012756:	230a      	movs	r3, #10
 8012758:	e011      	b.n	801277e <_printf_i+0xfa>
 801275a:	6821      	ldr	r1, [r4, #0]
 801275c:	6833      	ldr	r3, [r6, #0]
 801275e:	0608      	lsls	r0, r1, #24
 8012760:	f853 5b04 	ldr.w	r5, [r3], #4
 8012764:	d402      	bmi.n	801276c <_printf_i+0xe8>
 8012766:	0649      	lsls	r1, r1, #25
 8012768:	bf48      	it	mi
 801276a:	b2ad      	uxthmi	r5, r5
 801276c:	2f6f      	cmp	r7, #111	@ 0x6f
 801276e:	4853      	ldr	r0, [pc, #332]	@ (80128bc <_printf_i+0x238>)
 8012770:	6033      	str	r3, [r6, #0]
 8012772:	bf14      	ite	ne
 8012774:	230a      	movne	r3, #10
 8012776:	2308      	moveq	r3, #8
 8012778:	2100      	movs	r1, #0
 801277a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801277e:	6866      	ldr	r6, [r4, #4]
 8012780:	60a6      	str	r6, [r4, #8]
 8012782:	2e00      	cmp	r6, #0
 8012784:	bfa2      	ittt	ge
 8012786:	6821      	ldrge	r1, [r4, #0]
 8012788:	f021 0104 	bicge.w	r1, r1, #4
 801278c:	6021      	strge	r1, [r4, #0]
 801278e:	b90d      	cbnz	r5, 8012794 <_printf_i+0x110>
 8012790:	2e00      	cmp	r6, #0
 8012792:	d04b      	beq.n	801282c <_printf_i+0x1a8>
 8012794:	4616      	mov	r6, r2
 8012796:	fbb5 f1f3 	udiv	r1, r5, r3
 801279a:	fb03 5711 	mls	r7, r3, r1, r5
 801279e:	5dc7      	ldrb	r7, [r0, r7]
 80127a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80127a4:	462f      	mov	r7, r5
 80127a6:	42bb      	cmp	r3, r7
 80127a8:	460d      	mov	r5, r1
 80127aa:	d9f4      	bls.n	8012796 <_printf_i+0x112>
 80127ac:	2b08      	cmp	r3, #8
 80127ae:	d10b      	bne.n	80127c8 <_printf_i+0x144>
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	07df      	lsls	r7, r3, #31
 80127b4:	d508      	bpl.n	80127c8 <_printf_i+0x144>
 80127b6:	6923      	ldr	r3, [r4, #16]
 80127b8:	6861      	ldr	r1, [r4, #4]
 80127ba:	4299      	cmp	r1, r3
 80127bc:	bfde      	ittt	le
 80127be:	2330      	movle	r3, #48	@ 0x30
 80127c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80127c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80127c8:	1b92      	subs	r2, r2, r6
 80127ca:	6122      	str	r2, [r4, #16]
 80127cc:	f8cd a000 	str.w	sl, [sp]
 80127d0:	464b      	mov	r3, r9
 80127d2:	aa03      	add	r2, sp, #12
 80127d4:	4621      	mov	r1, r4
 80127d6:	4640      	mov	r0, r8
 80127d8:	f7ff fee6 	bl	80125a8 <_printf_common>
 80127dc:	3001      	adds	r0, #1
 80127de:	d14a      	bne.n	8012876 <_printf_i+0x1f2>
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295
 80127e4:	b004      	add	sp, #16
 80127e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ea:	6823      	ldr	r3, [r4, #0]
 80127ec:	f043 0320 	orr.w	r3, r3, #32
 80127f0:	6023      	str	r3, [r4, #0]
 80127f2:	4833      	ldr	r0, [pc, #204]	@ (80128c0 <_printf_i+0x23c>)
 80127f4:	2778      	movs	r7, #120	@ 0x78
 80127f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	6831      	ldr	r1, [r6, #0]
 80127fe:	061f      	lsls	r7, r3, #24
 8012800:	f851 5b04 	ldr.w	r5, [r1], #4
 8012804:	d402      	bmi.n	801280c <_printf_i+0x188>
 8012806:	065f      	lsls	r7, r3, #25
 8012808:	bf48      	it	mi
 801280a:	b2ad      	uxthmi	r5, r5
 801280c:	6031      	str	r1, [r6, #0]
 801280e:	07d9      	lsls	r1, r3, #31
 8012810:	bf44      	itt	mi
 8012812:	f043 0320 	orrmi.w	r3, r3, #32
 8012816:	6023      	strmi	r3, [r4, #0]
 8012818:	b11d      	cbz	r5, 8012822 <_printf_i+0x19e>
 801281a:	2310      	movs	r3, #16
 801281c:	e7ac      	b.n	8012778 <_printf_i+0xf4>
 801281e:	4827      	ldr	r0, [pc, #156]	@ (80128bc <_printf_i+0x238>)
 8012820:	e7e9      	b.n	80127f6 <_printf_i+0x172>
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	f023 0320 	bic.w	r3, r3, #32
 8012828:	6023      	str	r3, [r4, #0]
 801282a:	e7f6      	b.n	801281a <_printf_i+0x196>
 801282c:	4616      	mov	r6, r2
 801282e:	e7bd      	b.n	80127ac <_printf_i+0x128>
 8012830:	6833      	ldr	r3, [r6, #0]
 8012832:	6825      	ldr	r5, [r4, #0]
 8012834:	6961      	ldr	r1, [r4, #20]
 8012836:	1d18      	adds	r0, r3, #4
 8012838:	6030      	str	r0, [r6, #0]
 801283a:	062e      	lsls	r6, r5, #24
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	d501      	bpl.n	8012844 <_printf_i+0x1c0>
 8012840:	6019      	str	r1, [r3, #0]
 8012842:	e002      	b.n	801284a <_printf_i+0x1c6>
 8012844:	0668      	lsls	r0, r5, #25
 8012846:	d5fb      	bpl.n	8012840 <_printf_i+0x1bc>
 8012848:	8019      	strh	r1, [r3, #0]
 801284a:	2300      	movs	r3, #0
 801284c:	6123      	str	r3, [r4, #16]
 801284e:	4616      	mov	r6, r2
 8012850:	e7bc      	b.n	80127cc <_printf_i+0x148>
 8012852:	6833      	ldr	r3, [r6, #0]
 8012854:	1d1a      	adds	r2, r3, #4
 8012856:	6032      	str	r2, [r6, #0]
 8012858:	681e      	ldr	r6, [r3, #0]
 801285a:	6862      	ldr	r2, [r4, #4]
 801285c:	2100      	movs	r1, #0
 801285e:	4630      	mov	r0, r6
 8012860:	f7ed fc8e 	bl	8000180 <memchr>
 8012864:	b108      	cbz	r0, 801286a <_printf_i+0x1e6>
 8012866:	1b80      	subs	r0, r0, r6
 8012868:	6060      	str	r0, [r4, #4]
 801286a:	6863      	ldr	r3, [r4, #4]
 801286c:	6123      	str	r3, [r4, #16]
 801286e:	2300      	movs	r3, #0
 8012870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012874:	e7aa      	b.n	80127cc <_printf_i+0x148>
 8012876:	6923      	ldr	r3, [r4, #16]
 8012878:	4632      	mov	r2, r6
 801287a:	4649      	mov	r1, r9
 801287c:	4640      	mov	r0, r8
 801287e:	47d0      	blx	sl
 8012880:	3001      	adds	r0, #1
 8012882:	d0ad      	beq.n	80127e0 <_printf_i+0x15c>
 8012884:	6823      	ldr	r3, [r4, #0]
 8012886:	079b      	lsls	r3, r3, #30
 8012888:	d413      	bmi.n	80128b2 <_printf_i+0x22e>
 801288a:	68e0      	ldr	r0, [r4, #12]
 801288c:	9b03      	ldr	r3, [sp, #12]
 801288e:	4298      	cmp	r0, r3
 8012890:	bfb8      	it	lt
 8012892:	4618      	movlt	r0, r3
 8012894:	e7a6      	b.n	80127e4 <_printf_i+0x160>
 8012896:	2301      	movs	r3, #1
 8012898:	4632      	mov	r2, r6
 801289a:	4649      	mov	r1, r9
 801289c:	4640      	mov	r0, r8
 801289e:	47d0      	blx	sl
 80128a0:	3001      	adds	r0, #1
 80128a2:	d09d      	beq.n	80127e0 <_printf_i+0x15c>
 80128a4:	3501      	adds	r5, #1
 80128a6:	68e3      	ldr	r3, [r4, #12]
 80128a8:	9903      	ldr	r1, [sp, #12]
 80128aa:	1a5b      	subs	r3, r3, r1
 80128ac:	42ab      	cmp	r3, r5
 80128ae:	dcf2      	bgt.n	8012896 <_printf_i+0x212>
 80128b0:	e7eb      	b.n	801288a <_printf_i+0x206>
 80128b2:	2500      	movs	r5, #0
 80128b4:	f104 0619 	add.w	r6, r4, #25
 80128b8:	e7f5      	b.n	80128a6 <_printf_i+0x222>
 80128ba:	bf00      	nop
 80128bc:	08014b66 	.word	0x08014b66
 80128c0:	08014b77 	.word	0x08014b77

080128c4 <std>:
 80128c4:	2300      	movs	r3, #0
 80128c6:	b510      	push	{r4, lr}
 80128c8:	4604      	mov	r4, r0
 80128ca:	e9c0 3300 	strd	r3, r3, [r0]
 80128ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80128d2:	6083      	str	r3, [r0, #8]
 80128d4:	8181      	strh	r1, [r0, #12]
 80128d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80128d8:	81c2      	strh	r2, [r0, #14]
 80128da:	6183      	str	r3, [r0, #24]
 80128dc:	4619      	mov	r1, r3
 80128de:	2208      	movs	r2, #8
 80128e0:	305c      	adds	r0, #92	@ 0x5c
 80128e2:	f000 f90e 	bl	8012b02 <memset>
 80128e6:	4b0d      	ldr	r3, [pc, #52]	@ (801291c <std+0x58>)
 80128e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80128ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012920 <std+0x5c>)
 80128ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80128ee:	4b0d      	ldr	r3, [pc, #52]	@ (8012924 <std+0x60>)
 80128f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80128f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012928 <std+0x64>)
 80128f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80128f6:	4b0d      	ldr	r3, [pc, #52]	@ (801292c <std+0x68>)
 80128f8:	6224      	str	r4, [r4, #32]
 80128fa:	429c      	cmp	r4, r3
 80128fc:	d006      	beq.n	801290c <std+0x48>
 80128fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012902:	4294      	cmp	r4, r2
 8012904:	d002      	beq.n	801290c <std+0x48>
 8012906:	33d0      	adds	r3, #208	@ 0xd0
 8012908:	429c      	cmp	r4, r3
 801290a:	d105      	bne.n	8012918 <std+0x54>
 801290c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012914:	f000 b972 	b.w	8012bfc <__retarget_lock_init_recursive>
 8012918:	bd10      	pop	{r4, pc}
 801291a:	bf00      	nop
 801291c:	08012a7d 	.word	0x08012a7d
 8012920:	08012a9f 	.word	0x08012a9f
 8012924:	08012ad7 	.word	0x08012ad7
 8012928:	08012afb 	.word	0x08012afb
 801292c:	20002380 	.word	0x20002380

08012930 <stdio_exit_handler>:
 8012930:	4a02      	ldr	r2, [pc, #8]	@ (801293c <stdio_exit_handler+0xc>)
 8012932:	4903      	ldr	r1, [pc, #12]	@ (8012940 <stdio_exit_handler+0x10>)
 8012934:	4803      	ldr	r0, [pc, #12]	@ (8012944 <stdio_exit_handler+0x14>)
 8012936:	f000 b869 	b.w	8012a0c <_fwalk_sglue>
 801293a:	bf00      	nop
 801293c:	20000128 	.word	0x20000128
 8012940:	08014549 	.word	0x08014549
 8012944:	20000138 	.word	0x20000138

08012948 <cleanup_stdio>:
 8012948:	6841      	ldr	r1, [r0, #4]
 801294a:	4b0c      	ldr	r3, [pc, #48]	@ (801297c <cleanup_stdio+0x34>)
 801294c:	4299      	cmp	r1, r3
 801294e:	b510      	push	{r4, lr}
 8012950:	4604      	mov	r4, r0
 8012952:	d001      	beq.n	8012958 <cleanup_stdio+0x10>
 8012954:	f001 fdf8 	bl	8014548 <_fflush_r>
 8012958:	68a1      	ldr	r1, [r4, #8]
 801295a:	4b09      	ldr	r3, [pc, #36]	@ (8012980 <cleanup_stdio+0x38>)
 801295c:	4299      	cmp	r1, r3
 801295e:	d002      	beq.n	8012966 <cleanup_stdio+0x1e>
 8012960:	4620      	mov	r0, r4
 8012962:	f001 fdf1 	bl	8014548 <_fflush_r>
 8012966:	68e1      	ldr	r1, [r4, #12]
 8012968:	4b06      	ldr	r3, [pc, #24]	@ (8012984 <cleanup_stdio+0x3c>)
 801296a:	4299      	cmp	r1, r3
 801296c:	d004      	beq.n	8012978 <cleanup_stdio+0x30>
 801296e:	4620      	mov	r0, r4
 8012970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012974:	f001 bde8 	b.w	8014548 <_fflush_r>
 8012978:	bd10      	pop	{r4, pc}
 801297a:	bf00      	nop
 801297c:	20002380 	.word	0x20002380
 8012980:	200023e8 	.word	0x200023e8
 8012984:	20002450 	.word	0x20002450

08012988 <global_stdio_init.part.0>:
 8012988:	b510      	push	{r4, lr}
 801298a:	4b0b      	ldr	r3, [pc, #44]	@ (80129b8 <global_stdio_init.part.0+0x30>)
 801298c:	4c0b      	ldr	r4, [pc, #44]	@ (80129bc <global_stdio_init.part.0+0x34>)
 801298e:	4a0c      	ldr	r2, [pc, #48]	@ (80129c0 <global_stdio_init.part.0+0x38>)
 8012990:	601a      	str	r2, [r3, #0]
 8012992:	4620      	mov	r0, r4
 8012994:	2200      	movs	r2, #0
 8012996:	2104      	movs	r1, #4
 8012998:	f7ff ff94 	bl	80128c4 <std>
 801299c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80129a0:	2201      	movs	r2, #1
 80129a2:	2109      	movs	r1, #9
 80129a4:	f7ff ff8e 	bl	80128c4 <std>
 80129a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80129ac:	2202      	movs	r2, #2
 80129ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129b2:	2112      	movs	r1, #18
 80129b4:	f7ff bf86 	b.w	80128c4 <std>
 80129b8:	200024b8 	.word	0x200024b8
 80129bc:	20002380 	.word	0x20002380
 80129c0:	08012931 	.word	0x08012931

080129c4 <__sfp_lock_acquire>:
 80129c4:	4801      	ldr	r0, [pc, #4]	@ (80129cc <__sfp_lock_acquire+0x8>)
 80129c6:	f000 b91a 	b.w	8012bfe <__retarget_lock_acquire_recursive>
 80129ca:	bf00      	nop
 80129cc:	200024c1 	.word	0x200024c1

080129d0 <__sfp_lock_release>:
 80129d0:	4801      	ldr	r0, [pc, #4]	@ (80129d8 <__sfp_lock_release+0x8>)
 80129d2:	f000 b915 	b.w	8012c00 <__retarget_lock_release_recursive>
 80129d6:	bf00      	nop
 80129d8:	200024c1 	.word	0x200024c1

080129dc <__sinit>:
 80129dc:	b510      	push	{r4, lr}
 80129de:	4604      	mov	r4, r0
 80129e0:	f7ff fff0 	bl	80129c4 <__sfp_lock_acquire>
 80129e4:	6a23      	ldr	r3, [r4, #32]
 80129e6:	b11b      	cbz	r3, 80129f0 <__sinit+0x14>
 80129e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ec:	f7ff bff0 	b.w	80129d0 <__sfp_lock_release>
 80129f0:	4b04      	ldr	r3, [pc, #16]	@ (8012a04 <__sinit+0x28>)
 80129f2:	6223      	str	r3, [r4, #32]
 80129f4:	4b04      	ldr	r3, [pc, #16]	@ (8012a08 <__sinit+0x2c>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1f5      	bne.n	80129e8 <__sinit+0xc>
 80129fc:	f7ff ffc4 	bl	8012988 <global_stdio_init.part.0>
 8012a00:	e7f2      	b.n	80129e8 <__sinit+0xc>
 8012a02:	bf00      	nop
 8012a04:	08012949 	.word	0x08012949
 8012a08:	200024b8 	.word	0x200024b8

08012a0c <_fwalk_sglue>:
 8012a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a10:	4607      	mov	r7, r0
 8012a12:	4688      	mov	r8, r1
 8012a14:	4614      	mov	r4, r2
 8012a16:	2600      	movs	r6, #0
 8012a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8012a20:	d505      	bpl.n	8012a2e <_fwalk_sglue+0x22>
 8012a22:	6824      	ldr	r4, [r4, #0]
 8012a24:	2c00      	cmp	r4, #0
 8012a26:	d1f7      	bne.n	8012a18 <_fwalk_sglue+0xc>
 8012a28:	4630      	mov	r0, r6
 8012a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a2e:	89ab      	ldrh	r3, [r5, #12]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d907      	bls.n	8012a44 <_fwalk_sglue+0x38>
 8012a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	d003      	beq.n	8012a44 <_fwalk_sglue+0x38>
 8012a3c:	4629      	mov	r1, r5
 8012a3e:	4638      	mov	r0, r7
 8012a40:	47c0      	blx	r8
 8012a42:	4306      	orrs	r6, r0
 8012a44:	3568      	adds	r5, #104	@ 0x68
 8012a46:	e7e9      	b.n	8012a1c <_fwalk_sglue+0x10>

08012a48 <iprintf>:
 8012a48:	b40f      	push	{r0, r1, r2, r3}
 8012a4a:	b507      	push	{r0, r1, r2, lr}
 8012a4c:	4906      	ldr	r1, [pc, #24]	@ (8012a68 <iprintf+0x20>)
 8012a4e:	ab04      	add	r3, sp, #16
 8012a50:	6808      	ldr	r0, [r1, #0]
 8012a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8012a56:	6881      	ldr	r1, [r0, #8]
 8012a58:	9301      	str	r3, [sp, #4]
 8012a5a:	f001 fbd9 	bl	8014210 <_vfiprintf_r>
 8012a5e:	b003      	add	sp, #12
 8012a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8012a64:	b004      	add	sp, #16
 8012a66:	4770      	bx	lr
 8012a68:	20000134 	.word	0x20000134

08012a6c <putchar>:
 8012a6c:	4b02      	ldr	r3, [pc, #8]	@ (8012a78 <putchar+0xc>)
 8012a6e:	4601      	mov	r1, r0
 8012a70:	6818      	ldr	r0, [r3, #0]
 8012a72:	6882      	ldr	r2, [r0, #8]
 8012a74:	f001 bd90 	b.w	8014598 <_putc_r>
 8012a78:	20000134 	.word	0x20000134

08012a7c <__sread>:
 8012a7c:	b510      	push	{r4, lr}
 8012a7e:	460c      	mov	r4, r1
 8012a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a84:	f000 f86c 	bl	8012b60 <_read_r>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	bfab      	itete	ge
 8012a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8012a90:	181b      	addge	r3, r3, r0
 8012a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012a96:	bfac      	ite	ge
 8012a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012a9a:	81a3      	strhlt	r3, [r4, #12]
 8012a9c:	bd10      	pop	{r4, pc}

08012a9e <__swrite>:
 8012a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa2:	461f      	mov	r7, r3
 8012aa4:	898b      	ldrh	r3, [r1, #12]
 8012aa6:	05db      	lsls	r3, r3, #23
 8012aa8:	4605      	mov	r5, r0
 8012aaa:	460c      	mov	r4, r1
 8012aac:	4616      	mov	r6, r2
 8012aae:	d505      	bpl.n	8012abc <__swrite+0x1e>
 8012ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab4:	2302      	movs	r3, #2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	f000 f840 	bl	8012b3c <_lseek_r>
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012ac6:	81a3      	strh	r3, [r4, #12]
 8012ac8:	4632      	mov	r2, r6
 8012aca:	463b      	mov	r3, r7
 8012acc:	4628      	mov	r0, r5
 8012ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ad2:	f000 b857 	b.w	8012b84 <_write_r>

08012ad6 <__sseek>:
 8012ad6:	b510      	push	{r4, lr}
 8012ad8:	460c      	mov	r4, r1
 8012ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ade:	f000 f82d 	bl	8012b3c <_lseek_r>
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	bf15      	itete	ne
 8012ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012af2:	81a3      	strheq	r3, [r4, #12]
 8012af4:	bf18      	it	ne
 8012af6:	81a3      	strhne	r3, [r4, #12]
 8012af8:	bd10      	pop	{r4, pc}

08012afa <__sclose>:
 8012afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012afe:	f000 b80d 	b.w	8012b1c <_close_r>

08012b02 <memset>:
 8012b02:	4402      	add	r2, r0
 8012b04:	4603      	mov	r3, r0
 8012b06:	4293      	cmp	r3, r2
 8012b08:	d100      	bne.n	8012b0c <memset+0xa>
 8012b0a:	4770      	bx	lr
 8012b0c:	f803 1b01 	strb.w	r1, [r3], #1
 8012b10:	e7f9      	b.n	8012b06 <memset+0x4>
	...

08012b14 <_localeconv_r>:
 8012b14:	4800      	ldr	r0, [pc, #0]	@ (8012b18 <_localeconv_r+0x4>)
 8012b16:	4770      	bx	lr
 8012b18:	20000274 	.word	0x20000274

08012b1c <_close_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d06      	ldr	r5, [pc, #24]	@ (8012b38 <_close_r+0x1c>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	4604      	mov	r4, r0
 8012b24:	4608      	mov	r0, r1
 8012b26:	602b      	str	r3, [r5, #0]
 8012b28:	f7f1 fe3c 	bl	80047a4 <_close>
 8012b2c:	1c43      	adds	r3, r0, #1
 8012b2e:	d102      	bne.n	8012b36 <_close_r+0x1a>
 8012b30:	682b      	ldr	r3, [r5, #0]
 8012b32:	b103      	cbz	r3, 8012b36 <_close_r+0x1a>
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	bd38      	pop	{r3, r4, r5, pc}
 8012b38:	200024bc 	.word	0x200024bc

08012b3c <_lseek_r>:
 8012b3c:	b538      	push	{r3, r4, r5, lr}
 8012b3e:	4d07      	ldr	r5, [pc, #28]	@ (8012b5c <_lseek_r+0x20>)
 8012b40:	4604      	mov	r4, r0
 8012b42:	4608      	mov	r0, r1
 8012b44:	4611      	mov	r1, r2
 8012b46:	2200      	movs	r2, #0
 8012b48:	602a      	str	r2, [r5, #0]
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	f7f1 fe51 	bl	80047f2 <_lseek>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_lseek_r+0x1e>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_lseek_r+0x1e>
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	200024bc 	.word	0x200024bc

08012b60 <_read_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	@ (8012b80 <_read_r+0x20>)
 8012b64:	4604      	mov	r4, r0
 8012b66:	4608      	mov	r0, r1
 8012b68:	4611      	mov	r1, r2
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	602a      	str	r2, [r5, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f7f1 fddf 	bl	8004732 <_read>
 8012b74:	1c43      	adds	r3, r0, #1
 8012b76:	d102      	bne.n	8012b7e <_read_r+0x1e>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	b103      	cbz	r3, 8012b7e <_read_r+0x1e>
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	200024bc 	.word	0x200024bc

08012b84 <_write_r>:
 8012b84:	b538      	push	{r3, r4, r5, lr}
 8012b86:	4d07      	ldr	r5, [pc, #28]	@ (8012ba4 <_write_r+0x20>)
 8012b88:	4604      	mov	r4, r0
 8012b8a:	4608      	mov	r0, r1
 8012b8c:	4611      	mov	r1, r2
 8012b8e:	2200      	movs	r2, #0
 8012b90:	602a      	str	r2, [r5, #0]
 8012b92:	461a      	mov	r2, r3
 8012b94:	f7f1 fdea 	bl	800476c <_write>
 8012b98:	1c43      	adds	r3, r0, #1
 8012b9a:	d102      	bne.n	8012ba2 <_write_r+0x1e>
 8012b9c:	682b      	ldr	r3, [r5, #0]
 8012b9e:	b103      	cbz	r3, 8012ba2 <_write_r+0x1e>
 8012ba0:	6023      	str	r3, [r4, #0]
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	200024bc 	.word	0x200024bc

08012ba8 <__errno>:
 8012ba8:	4b01      	ldr	r3, [pc, #4]	@ (8012bb0 <__errno+0x8>)
 8012baa:	6818      	ldr	r0, [r3, #0]
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	20000134 	.word	0x20000134

08012bb4 <__libc_init_array>:
 8012bb4:	b570      	push	{r4, r5, r6, lr}
 8012bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8012bec <__libc_init_array+0x38>)
 8012bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8012bf0 <__libc_init_array+0x3c>)
 8012bba:	1b64      	subs	r4, r4, r5
 8012bbc:	10a4      	asrs	r4, r4, #2
 8012bbe:	2600      	movs	r6, #0
 8012bc0:	42a6      	cmp	r6, r4
 8012bc2:	d109      	bne.n	8012bd8 <__libc_init_array+0x24>
 8012bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8012bf4 <__libc_init_array+0x40>)
 8012bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8012bf8 <__libc_init_array+0x44>)
 8012bc8:	f001 fef2 	bl	80149b0 <_init>
 8012bcc:	1b64      	subs	r4, r4, r5
 8012bce:	10a4      	asrs	r4, r4, #2
 8012bd0:	2600      	movs	r6, #0
 8012bd2:	42a6      	cmp	r6, r4
 8012bd4:	d105      	bne.n	8012be2 <__libc_init_array+0x2e>
 8012bd6:	bd70      	pop	{r4, r5, r6, pc}
 8012bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bdc:	4798      	blx	r3
 8012bde:	3601      	adds	r6, #1
 8012be0:	e7ee      	b.n	8012bc0 <__libc_init_array+0xc>
 8012be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012be6:	4798      	blx	r3
 8012be8:	3601      	adds	r6, #1
 8012bea:	e7f2      	b.n	8012bd2 <__libc_init_array+0x1e>
 8012bec:	08014ed0 	.word	0x08014ed0
 8012bf0:	08014ed0 	.word	0x08014ed0
 8012bf4:	08014ed0 	.word	0x08014ed0
 8012bf8:	08014ed4 	.word	0x08014ed4

08012bfc <__retarget_lock_init_recursive>:
 8012bfc:	4770      	bx	lr

08012bfe <__retarget_lock_acquire_recursive>:
 8012bfe:	4770      	bx	lr

08012c00 <__retarget_lock_release_recursive>:
 8012c00:	4770      	bx	lr

08012c02 <memcpy>:
 8012c02:	440a      	add	r2, r1
 8012c04:	4291      	cmp	r1, r2
 8012c06:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c0a:	d100      	bne.n	8012c0e <memcpy+0xc>
 8012c0c:	4770      	bx	lr
 8012c0e:	b510      	push	{r4, lr}
 8012c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c18:	4291      	cmp	r1, r2
 8012c1a:	d1f9      	bne.n	8012c10 <memcpy+0xe>
 8012c1c:	bd10      	pop	{r4, pc}

08012c1e <quorem>:
 8012c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c22:	6903      	ldr	r3, [r0, #16]
 8012c24:	690c      	ldr	r4, [r1, #16]
 8012c26:	42a3      	cmp	r3, r4
 8012c28:	4607      	mov	r7, r0
 8012c2a:	db7e      	blt.n	8012d2a <quorem+0x10c>
 8012c2c:	3c01      	subs	r4, #1
 8012c2e:	f101 0814 	add.w	r8, r1, #20
 8012c32:	00a3      	lsls	r3, r4, #2
 8012c34:	f100 0514 	add.w	r5, r0, #20
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c3e:	9301      	str	r3, [sp, #4]
 8012c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c54:	d32e      	bcc.n	8012cb4 <quorem+0x96>
 8012c56:	f04f 0a00 	mov.w	sl, #0
 8012c5a:	46c4      	mov	ip, r8
 8012c5c:	46ae      	mov	lr, r5
 8012c5e:	46d3      	mov	fp, sl
 8012c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012c64:	b298      	uxth	r0, r3
 8012c66:	fb06 a000 	mla	r0, r6, r0, sl
 8012c6a:	0c02      	lsrs	r2, r0, #16
 8012c6c:	0c1b      	lsrs	r3, r3, #16
 8012c6e:	fb06 2303 	mla	r3, r6, r3, r2
 8012c72:	f8de 2000 	ldr.w	r2, [lr]
 8012c76:	b280      	uxth	r0, r0
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	1a12      	subs	r2, r2, r0
 8012c7c:	445a      	add	r2, fp
 8012c7e:	f8de 0000 	ldr.w	r0, [lr]
 8012c82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012c8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012c90:	b292      	uxth	r2, r2
 8012c92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012c96:	45e1      	cmp	r9, ip
 8012c98:	f84e 2b04 	str.w	r2, [lr], #4
 8012c9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012ca0:	d2de      	bcs.n	8012c60 <quorem+0x42>
 8012ca2:	9b00      	ldr	r3, [sp, #0]
 8012ca4:	58eb      	ldr	r3, [r5, r3]
 8012ca6:	b92b      	cbnz	r3, 8012cb4 <quorem+0x96>
 8012ca8:	9b01      	ldr	r3, [sp, #4]
 8012caa:	3b04      	subs	r3, #4
 8012cac:	429d      	cmp	r5, r3
 8012cae:	461a      	mov	r2, r3
 8012cb0:	d32f      	bcc.n	8012d12 <quorem+0xf4>
 8012cb2:	613c      	str	r4, [r7, #16]
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	f001 f979 	bl	8013fac <__mcmp>
 8012cba:	2800      	cmp	r0, #0
 8012cbc:	db25      	blt.n	8012d0a <quorem+0xec>
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8012cc6:	f8d1 c000 	ldr.w	ip, [r1]
 8012cca:	fa1f fe82 	uxth.w	lr, r2
 8012cce:	fa1f f38c 	uxth.w	r3, ip
 8012cd2:	eba3 030e 	sub.w	r3, r3, lr
 8012cd6:	4403      	add	r3, r0
 8012cd8:	0c12      	lsrs	r2, r2, #16
 8012cda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012cde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ce8:	45c1      	cmp	r9, r8
 8012cea:	f841 3b04 	str.w	r3, [r1], #4
 8012cee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012cf2:	d2e6      	bcs.n	8012cc2 <quorem+0xa4>
 8012cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cfc:	b922      	cbnz	r2, 8012d08 <quorem+0xea>
 8012cfe:	3b04      	subs	r3, #4
 8012d00:	429d      	cmp	r5, r3
 8012d02:	461a      	mov	r2, r3
 8012d04:	d30b      	bcc.n	8012d1e <quorem+0x100>
 8012d06:	613c      	str	r4, [r7, #16]
 8012d08:	3601      	adds	r6, #1
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	b003      	add	sp, #12
 8012d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d12:	6812      	ldr	r2, [r2, #0]
 8012d14:	3b04      	subs	r3, #4
 8012d16:	2a00      	cmp	r2, #0
 8012d18:	d1cb      	bne.n	8012cb2 <quorem+0x94>
 8012d1a:	3c01      	subs	r4, #1
 8012d1c:	e7c6      	b.n	8012cac <quorem+0x8e>
 8012d1e:	6812      	ldr	r2, [r2, #0]
 8012d20:	3b04      	subs	r3, #4
 8012d22:	2a00      	cmp	r2, #0
 8012d24:	d1ef      	bne.n	8012d06 <quorem+0xe8>
 8012d26:	3c01      	subs	r4, #1
 8012d28:	e7ea      	b.n	8012d00 <quorem+0xe2>
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	e7ee      	b.n	8012d0c <quorem+0xee>
	...

08012d30 <_dtoa_r>:
 8012d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	69c7      	ldr	r7, [r0, #28]
 8012d36:	b099      	sub	sp, #100	@ 0x64
 8012d38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012d3c:	ec55 4b10 	vmov	r4, r5, d0
 8012d40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d44:	4683      	mov	fp, r0
 8012d46:	920e      	str	r2, [sp, #56]	@ 0x38
 8012d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012d4a:	b97f      	cbnz	r7, 8012d6c <_dtoa_r+0x3c>
 8012d4c:	2010      	movs	r0, #16
 8012d4e:	f000 fdfd 	bl	801394c <malloc>
 8012d52:	4602      	mov	r2, r0
 8012d54:	f8cb 001c 	str.w	r0, [fp, #28]
 8012d58:	b920      	cbnz	r0, 8012d64 <_dtoa_r+0x34>
 8012d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8012ff8 <_dtoa_r+0x2c8>)
 8012d5c:	21ef      	movs	r1, #239	@ 0xef
 8012d5e:	48a7      	ldr	r0, [pc, #668]	@ (8012ffc <_dtoa_r+0x2cc>)
 8012d60:	f001 fcf2 	bl	8014748 <__assert_func>
 8012d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012d68:	6007      	str	r7, [r0, #0]
 8012d6a:	60c7      	str	r7, [r0, #12]
 8012d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d70:	6819      	ldr	r1, [r3, #0]
 8012d72:	b159      	cbz	r1, 8012d8c <_dtoa_r+0x5c>
 8012d74:	685a      	ldr	r2, [r3, #4]
 8012d76:	604a      	str	r2, [r1, #4]
 8012d78:	2301      	movs	r3, #1
 8012d7a:	4093      	lsls	r3, r2
 8012d7c:	608b      	str	r3, [r1, #8]
 8012d7e:	4658      	mov	r0, fp
 8012d80:	f000 feda 	bl	8013b38 <_Bfree>
 8012d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]
 8012d8c:	1e2b      	subs	r3, r5, #0
 8012d8e:	bfb9      	ittee	lt
 8012d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012d94:	9303      	strlt	r3, [sp, #12]
 8012d96:	2300      	movge	r3, #0
 8012d98:	6033      	strge	r3, [r6, #0]
 8012d9a:	9f03      	ldr	r7, [sp, #12]
 8012d9c:	4b98      	ldr	r3, [pc, #608]	@ (8013000 <_dtoa_r+0x2d0>)
 8012d9e:	bfbc      	itt	lt
 8012da0:	2201      	movlt	r2, #1
 8012da2:	6032      	strlt	r2, [r6, #0]
 8012da4:	43bb      	bics	r3, r7
 8012da6:	d112      	bne.n	8012dce <_dtoa_r+0x9e>
 8012da8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012dae:	6013      	str	r3, [r2, #0]
 8012db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012db4:	4323      	orrs	r3, r4
 8012db6:	f000 854d 	beq.w	8013854 <_dtoa_r+0xb24>
 8012dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012dbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013014 <_dtoa_r+0x2e4>
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f000 854f 	beq.w	8013864 <_dtoa_r+0xb34>
 8012dc6:	f10a 0303 	add.w	r3, sl, #3
 8012dca:	f000 bd49 	b.w	8013860 <_dtoa_r+0xb30>
 8012dce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	ec51 0b17 	vmov	r0, r1, d7
 8012dd8:	2300      	movs	r3, #0
 8012dda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012dde:	f7ed fe4b 	bl	8000a78 <__aeabi_dcmpeq>
 8012de2:	4680      	mov	r8, r0
 8012de4:	b158      	cbz	r0, 8012dfe <_dtoa_r+0xce>
 8012de6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012de8:	2301      	movs	r3, #1
 8012dea:	6013      	str	r3, [r2, #0]
 8012dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012dee:	b113      	cbz	r3, 8012df6 <_dtoa_r+0xc6>
 8012df0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012df2:	4b84      	ldr	r3, [pc, #528]	@ (8013004 <_dtoa_r+0x2d4>)
 8012df4:	6013      	str	r3, [r2, #0]
 8012df6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013018 <_dtoa_r+0x2e8>
 8012dfa:	f000 bd33 	b.w	8013864 <_dtoa_r+0xb34>
 8012dfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012e02:	aa16      	add	r2, sp, #88	@ 0x58
 8012e04:	a917      	add	r1, sp, #92	@ 0x5c
 8012e06:	4658      	mov	r0, fp
 8012e08:	f001 f980 	bl	801410c <__d2b>
 8012e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012e10:	4681      	mov	r9, r0
 8012e12:	2e00      	cmp	r6, #0
 8012e14:	d077      	beq.n	8012f06 <_dtoa_r+0x1d6>
 8012e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012e18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012e30:	4619      	mov	r1, r3
 8012e32:	2200      	movs	r2, #0
 8012e34:	4b74      	ldr	r3, [pc, #464]	@ (8013008 <_dtoa_r+0x2d8>)
 8012e36:	f7ed f9ff 	bl	8000238 <__aeabi_dsub>
 8012e3a:	a369      	add	r3, pc, #420	@ (adr r3, 8012fe0 <_dtoa_r+0x2b0>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	f7ed fbb2 	bl	80005a8 <__aeabi_dmul>
 8012e44:	a368      	add	r3, pc, #416	@ (adr r3, 8012fe8 <_dtoa_r+0x2b8>)
 8012e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4a:	f7ed f9f7 	bl	800023c <__adddf3>
 8012e4e:	4604      	mov	r4, r0
 8012e50:	4630      	mov	r0, r6
 8012e52:	460d      	mov	r5, r1
 8012e54:	f7ed fb3e 	bl	80004d4 <__aeabi_i2d>
 8012e58:	a365      	add	r3, pc, #404	@ (adr r3, 8012ff0 <_dtoa_r+0x2c0>)
 8012e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5e:	f7ed fba3 	bl	80005a8 <__aeabi_dmul>
 8012e62:	4602      	mov	r2, r0
 8012e64:	460b      	mov	r3, r1
 8012e66:	4620      	mov	r0, r4
 8012e68:	4629      	mov	r1, r5
 8012e6a:	f7ed f9e7 	bl	800023c <__adddf3>
 8012e6e:	4604      	mov	r4, r0
 8012e70:	460d      	mov	r5, r1
 8012e72:	f7ed fe49 	bl	8000b08 <__aeabi_d2iz>
 8012e76:	2200      	movs	r2, #0
 8012e78:	4607      	mov	r7, r0
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fe04 	bl	8000a8c <__aeabi_dcmplt>
 8012e84:	b140      	cbz	r0, 8012e98 <_dtoa_r+0x168>
 8012e86:	4638      	mov	r0, r7
 8012e88:	f7ed fb24 	bl	80004d4 <__aeabi_i2d>
 8012e8c:	4622      	mov	r2, r4
 8012e8e:	462b      	mov	r3, r5
 8012e90:	f7ed fdf2 	bl	8000a78 <__aeabi_dcmpeq>
 8012e94:	b900      	cbnz	r0, 8012e98 <_dtoa_r+0x168>
 8012e96:	3f01      	subs	r7, #1
 8012e98:	2f16      	cmp	r7, #22
 8012e9a:	d851      	bhi.n	8012f40 <_dtoa_r+0x210>
 8012e9c:	4b5b      	ldr	r3, [pc, #364]	@ (801300c <_dtoa_r+0x2dc>)
 8012e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012eaa:	f7ed fdef 	bl	8000a8c <__aeabi_dcmplt>
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	d048      	beq.n	8012f44 <_dtoa_r+0x214>
 8012eb2:	3f01      	subs	r7, #1
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8012eb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012eba:	1b9b      	subs	r3, r3, r6
 8012ebc:	1e5a      	subs	r2, r3, #1
 8012ebe:	bf44      	itt	mi
 8012ec0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012ec4:	2300      	movmi	r3, #0
 8012ec6:	9208      	str	r2, [sp, #32]
 8012ec8:	bf54      	ite	pl
 8012eca:	f04f 0800 	movpl.w	r8, #0
 8012ece:	9308      	strmi	r3, [sp, #32]
 8012ed0:	2f00      	cmp	r7, #0
 8012ed2:	db39      	blt.n	8012f48 <_dtoa_r+0x218>
 8012ed4:	9b08      	ldr	r3, [sp, #32]
 8012ed6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012ed8:	443b      	add	r3, r7
 8012eda:	9308      	str	r3, [sp, #32]
 8012edc:	2300      	movs	r3, #0
 8012ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ee2:	2b09      	cmp	r3, #9
 8012ee4:	d864      	bhi.n	8012fb0 <_dtoa_r+0x280>
 8012ee6:	2b05      	cmp	r3, #5
 8012ee8:	bfc4      	itt	gt
 8012eea:	3b04      	subgt	r3, #4
 8012eec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8012ef4:	bfcc      	ite	gt
 8012ef6:	2400      	movgt	r4, #0
 8012ef8:	2401      	movle	r4, #1
 8012efa:	2b03      	cmp	r3, #3
 8012efc:	d863      	bhi.n	8012fc6 <_dtoa_r+0x296>
 8012efe:	e8df f003 	tbb	[pc, r3]
 8012f02:	372a      	.short	0x372a
 8012f04:	5535      	.short	0x5535
 8012f06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012f0a:	441e      	add	r6, r3
 8012f0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012f10:	2b20      	cmp	r3, #32
 8012f12:	bfc1      	itttt	gt
 8012f14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012f18:	409f      	lslgt	r7, r3
 8012f1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012f1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012f22:	bfd6      	itet	le
 8012f24:	f1c3 0320 	rsble	r3, r3, #32
 8012f28:	ea47 0003 	orrgt.w	r0, r7, r3
 8012f2c:	fa04 f003 	lslle.w	r0, r4, r3
 8012f30:	f7ed fac0 	bl	80004b4 <__aeabi_ui2d>
 8012f34:	2201      	movs	r2, #1
 8012f36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012f3a:	3e01      	subs	r6, #1
 8012f3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012f3e:	e777      	b.n	8012e30 <_dtoa_r+0x100>
 8012f40:	2301      	movs	r3, #1
 8012f42:	e7b8      	b.n	8012eb6 <_dtoa_r+0x186>
 8012f44:	9012      	str	r0, [sp, #72]	@ 0x48
 8012f46:	e7b7      	b.n	8012eb8 <_dtoa_r+0x188>
 8012f48:	427b      	negs	r3, r7
 8012f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	eba8 0807 	sub.w	r8, r8, r7
 8012f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012f54:	e7c4      	b.n	8012ee0 <_dtoa_r+0x1b0>
 8012f56:	2300      	movs	r3, #0
 8012f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	dc35      	bgt.n	8012fcc <_dtoa_r+0x29c>
 8012f60:	2301      	movs	r3, #1
 8012f62:	9300      	str	r3, [sp, #0]
 8012f64:	9307      	str	r3, [sp, #28]
 8012f66:	461a      	mov	r2, r3
 8012f68:	920e      	str	r2, [sp, #56]	@ 0x38
 8012f6a:	e00b      	b.n	8012f84 <_dtoa_r+0x254>
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e7f3      	b.n	8012f58 <_dtoa_r+0x228>
 8012f70:	2300      	movs	r3, #0
 8012f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f76:	18fb      	adds	r3, r7, r3
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	9307      	str	r3, [sp, #28]
 8012f80:	bfb8      	it	lt
 8012f82:	2301      	movlt	r3, #1
 8012f84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012f88:	2100      	movs	r1, #0
 8012f8a:	2204      	movs	r2, #4
 8012f8c:	f102 0514 	add.w	r5, r2, #20
 8012f90:	429d      	cmp	r5, r3
 8012f92:	d91f      	bls.n	8012fd4 <_dtoa_r+0x2a4>
 8012f94:	6041      	str	r1, [r0, #4]
 8012f96:	4658      	mov	r0, fp
 8012f98:	f000 fd8e 	bl	8013ab8 <_Balloc>
 8012f9c:	4682      	mov	sl, r0
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d13c      	bne.n	801301c <_dtoa_r+0x2ec>
 8012fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8013010 <_dtoa_r+0x2e0>)
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012faa:	e6d8      	b.n	8012d5e <_dtoa_r+0x2e>
 8012fac:	2301      	movs	r3, #1
 8012fae:	e7e0      	b.n	8012f72 <_dtoa_r+0x242>
 8012fb0:	2401      	movs	r4, #1
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fbc:	9300      	str	r3, [sp, #0]
 8012fbe:	9307      	str	r3, [sp, #28]
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	2312      	movs	r3, #18
 8012fc4:	e7d0      	b.n	8012f68 <_dtoa_r+0x238>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fca:	e7f5      	b.n	8012fb8 <_dtoa_r+0x288>
 8012fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fce:	9300      	str	r3, [sp, #0]
 8012fd0:	9307      	str	r3, [sp, #28]
 8012fd2:	e7d7      	b.n	8012f84 <_dtoa_r+0x254>
 8012fd4:	3101      	adds	r1, #1
 8012fd6:	0052      	lsls	r2, r2, #1
 8012fd8:	e7d8      	b.n	8012f8c <_dtoa_r+0x25c>
 8012fda:	bf00      	nop
 8012fdc:	f3af 8000 	nop.w
 8012fe0:	636f4361 	.word	0x636f4361
 8012fe4:	3fd287a7 	.word	0x3fd287a7
 8012fe8:	8b60c8b3 	.word	0x8b60c8b3
 8012fec:	3fc68a28 	.word	0x3fc68a28
 8012ff0:	509f79fb 	.word	0x509f79fb
 8012ff4:	3fd34413 	.word	0x3fd34413
 8012ff8:	08014b95 	.word	0x08014b95
 8012ffc:	08014bac 	.word	0x08014bac
 8013000:	7ff00000 	.word	0x7ff00000
 8013004:	08014b65 	.word	0x08014b65
 8013008:	3ff80000 	.word	0x3ff80000
 801300c:	08014ca8 	.word	0x08014ca8
 8013010:	08014c04 	.word	0x08014c04
 8013014:	08014b91 	.word	0x08014b91
 8013018:	08014b64 	.word	0x08014b64
 801301c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013020:	6018      	str	r0, [r3, #0]
 8013022:	9b07      	ldr	r3, [sp, #28]
 8013024:	2b0e      	cmp	r3, #14
 8013026:	f200 80a4 	bhi.w	8013172 <_dtoa_r+0x442>
 801302a:	2c00      	cmp	r4, #0
 801302c:	f000 80a1 	beq.w	8013172 <_dtoa_r+0x442>
 8013030:	2f00      	cmp	r7, #0
 8013032:	dd33      	ble.n	801309c <_dtoa_r+0x36c>
 8013034:	4bad      	ldr	r3, [pc, #692]	@ (80132ec <_dtoa_r+0x5bc>)
 8013036:	f007 020f 	and.w	r2, r7, #15
 801303a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801303e:	ed93 7b00 	vldr	d7, [r3]
 8013042:	05f8      	lsls	r0, r7, #23
 8013044:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013048:	ea4f 1427 	mov.w	r4, r7, asr #4
 801304c:	d516      	bpl.n	801307c <_dtoa_r+0x34c>
 801304e:	4ba8      	ldr	r3, [pc, #672]	@ (80132f0 <_dtoa_r+0x5c0>)
 8013050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013058:	f7ed fbd0 	bl	80007fc <__aeabi_ddiv>
 801305c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013060:	f004 040f 	and.w	r4, r4, #15
 8013064:	2603      	movs	r6, #3
 8013066:	4da2      	ldr	r5, [pc, #648]	@ (80132f0 <_dtoa_r+0x5c0>)
 8013068:	b954      	cbnz	r4, 8013080 <_dtoa_r+0x350>
 801306a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801306e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013072:	f7ed fbc3 	bl	80007fc <__aeabi_ddiv>
 8013076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801307a:	e028      	b.n	80130ce <_dtoa_r+0x39e>
 801307c:	2602      	movs	r6, #2
 801307e:	e7f2      	b.n	8013066 <_dtoa_r+0x336>
 8013080:	07e1      	lsls	r1, r4, #31
 8013082:	d508      	bpl.n	8013096 <_dtoa_r+0x366>
 8013084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013088:	e9d5 2300 	ldrd	r2, r3, [r5]
 801308c:	f7ed fa8c 	bl	80005a8 <__aeabi_dmul>
 8013090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013094:	3601      	adds	r6, #1
 8013096:	1064      	asrs	r4, r4, #1
 8013098:	3508      	adds	r5, #8
 801309a:	e7e5      	b.n	8013068 <_dtoa_r+0x338>
 801309c:	f000 80d2 	beq.w	8013244 <_dtoa_r+0x514>
 80130a0:	427c      	negs	r4, r7
 80130a2:	4b92      	ldr	r3, [pc, #584]	@ (80132ec <_dtoa_r+0x5bc>)
 80130a4:	4d92      	ldr	r5, [pc, #584]	@ (80132f0 <_dtoa_r+0x5c0>)
 80130a6:	f004 020f 	and.w	r2, r4, #15
 80130aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80130b6:	f7ed fa77 	bl	80005a8 <__aeabi_dmul>
 80130ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130be:	1124      	asrs	r4, r4, #4
 80130c0:	2300      	movs	r3, #0
 80130c2:	2602      	movs	r6, #2
 80130c4:	2c00      	cmp	r4, #0
 80130c6:	f040 80b2 	bne.w	801322e <_dtoa_r+0x4fe>
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d1d3      	bne.n	8013076 <_dtoa_r+0x346>
 80130ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80130d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	f000 80b7 	beq.w	8013248 <_dtoa_r+0x518>
 80130da:	4b86      	ldr	r3, [pc, #536]	@ (80132f4 <_dtoa_r+0x5c4>)
 80130dc:	2200      	movs	r2, #0
 80130de:	4620      	mov	r0, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	f7ed fcd3 	bl	8000a8c <__aeabi_dcmplt>
 80130e6:	2800      	cmp	r0, #0
 80130e8:	f000 80ae 	beq.w	8013248 <_dtoa_r+0x518>
 80130ec:	9b07      	ldr	r3, [sp, #28]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f000 80aa 	beq.w	8013248 <_dtoa_r+0x518>
 80130f4:	9b00      	ldr	r3, [sp, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	dd37      	ble.n	801316a <_dtoa_r+0x43a>
 80130fa:	1e7b      	subs	r3, r7, #1
 80130fc:	9304      	str	r3, [sp, #16]
 80130fe:	4620      	mov	r0, r4
 8013100:	4b7d      	ldr	r3, [pc, #500]	@ (80132f8 <_dtoa_r+0x5c8>)
 8013102:	2200      	movs	r2, #0
 8013104:	4629      	mov	r1, r5
 8013106:	f7ed fa4f 	bl	80005a8 <__aeabi_dmul>
 801310a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801310e:	9c00      	ldr	r4, [sp, #0]
 8013110:	3601      	adds	r6, #1
 8013112:	4630      	mov	r0, r6
 8013114:	f7ed f9de 	bl	80004d4 <__aeabi_i2d>
 8013118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801311c:	f7ed fa44 	bl	80005a8 <__aeabi_dmul>
 8013120:	4b76      	ldr	r3, [pc, #472]	@ (80132fc <_dtoa_r+0x5cc>)
 8013122:	2200      	movs	r2, #0
 8013124:	f7ed f88a 	bl	800023c <__adddf3>
 8013128:	4605      	mov	r5, r0
 801312a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801312e:	2c00      	cmp	r4, #0
 8013130:	f040 808d 	bne.w	801324e <_dtoa_r+0x51e>
 8013134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013138:	4b71      	ldr	r3, [pc, #452]	@ (8013300 <_dtoa_r+0x5d0>)
 801313a:	2200      	movs	r2, #0
 801313c:	f7ed f87c 	bl	8000238 <__aeabi_dsub>
 8013140:	4602      	mov	r2, r0
 8013142:	460b      	mov	r3, r1
 8013144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013148:	462a      	mov	r2, r5
 801314a:	4633      	mov	r3, r6
 801314c:	f7ed fcbc 	bl	8000ac8 <__aeabi_dcmpgt>
 8013150:	2800      	cmp	r0, #0
 8013152:	f040 828b 	bne.w	801366c <_dtoa_r+0x93c>
 8013156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801315a:	462a      	mov	r2, r5
 801315c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013160:	f7ed fc94 	bl	8000a8c <__aeabi_dcmplt>
 8013164:	2800      	cmp	r0, #0
 8013166:	f040 8128 	bne.w	80133ba <_dtoa_r+0x68a>
 801316a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801316e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013174:	2b00      	cmp	r3, #0
 8013176:	f2c0 815a 	blt.w	801342e <_dtoa_r+0x6fe>
 801317a:	2f0e      	cmp	r7, #14
 801317c:	f300 8157 	bgt.w	801342e <_dtoa_r+0x6fe>
 8013180:	4b5a      	ldr	r3, [pc, #360]	@ (80132ec <_dtoa_r+0x5bc>)
 8013182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013186:	ed93 7b00 	vldr	d7, [r3]
 801318a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801318c:	2b00      	cmp	r3, #0
 801318e:	ed8d 7b00 	vstr	d7, [sp]
 8013192:	da03      	bge.n	801319c <_dtoa_r+0x46c>
 8013194:	9b07      	ldr	r3, [sp, #28]
 8013196:	2b00      	cmp	r3, #0
 8013198:	f340 8101 	ble.w	801339e <_dtoa_r+0x66e>
 801319c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80131a0:	4656      	mov	r6, sl
 80131a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131a6:	4620      	mov	r0, r4
 80131a8:	4629      	mov	r1, r5
 80131aa:	f7ed fb27 	bl	80007fc <__aeabi_ddiv>
 80131ae:	f7ed fcab 	bl	8000b08 <__aeabi_d2iz>
 80131b2:	4680      	mov	r8, r0
 80131b4:	f7ed f98e 	bl	80004d4 <__aeabi_i2d>
 80131b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131bc:	f7ed f9f4 	bl	80005a8 <__aeabi_dmul>
 80131c0:	4602      	mov	r2, r0
 80131c2:	460b      	mov	r3, r1
 80131c4:	4620      	mov	r0, r4
 80131c6:	4629      	mov	r1, r5
 80131c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80131cc:	f7ed f834 	bl	8000238 <__aeabi_dsub>
 80131d0:	f806 4b01 	strb.w	r4, [r6], #1
 80131d4:	9d07      	ldr	r5, [sp, #28]
 80131d6:	eba6 040a 	sub.w	r4, r6, sl
 80131da:	42a5      	cmp	r5, r4
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	f040 8117 	bne.w	8013412 <_dtoa_r+0x6e2>
 80131e4:	f7ed f82a 	bl	800023c <__adddf3>
 80131e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ec:	4604      	mov	r4, r0
 80131ee:	460d      	mov	r5, r1
 80131f0:	f7ed fc6a 	bl	8000ac8 <__aeabi_dcmpgt>
 80131f4:	2800      	cmp	r0, #0
 80131f6:	f040 80f9 	bne.w	80133ec <_dtoa_r+0x6bc>
 80131fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131fe:	4620      	mov	r0, r4
 8013200:	4629      	mov	r1, r5
 8013202:	f7ed fc39 	bl	8000a78 <__aeabi_dcmpeq>
 8013206:	b118      	cbz	r0, 8013210 <_dtoa_r+0x4e0>
 8013208:	f018 0f01 	tst.w	r8, #1
 801320c:	f040 80ee 	bne.w	80133ec <_dtoa_r+0x6bc>
 8013210:	4649      	mov	r1, r9
 8013212:	4658      	mov	r0, fp
 8013214:	f000 fc90 	bl	8013b38 <_Bfree>
 8013218:	2300      	movs	r3, #0
 801321a:	7033      	strb	r3, [r6, #0]
 801321c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801321e:	3701      	adds	r7, #1
 8013220:	601f      	str	r7, [r3, #0]
 8013222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013224:	2b00      	cmp	r3, #0
 8013226:	f000 831d 	beq.w	8013864 <_dtoa_r+0xb34>
 801322a:	601e      	str	r6, [r3, #0]
 801322c:	e31a      	b.n	8013864 <_dtoa_r+0xb34>
 801322e:	07e2      	lsls	r2, r4, #31
 8013230:	d505      	bpl.n	801323e <_dtoa_r+0x50e>
 8013232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013236:	f7ed f9b7 	bl	80005a8 <__aeabi_dmul>
 801323a:	3601      	adds	r6, #1
 801323c:	2301      	movs	r3, #1
 801323e:	1064      	asrs	r4, r4, #1
 8013240:	3508      	adds	r5, #8
 8013242:	e73f      	b.n	80130c4 <_dtoa_r+0x394>
 8013244:	2602      	movs	r6, #2
 8013246:	e742      	b.n	80130ce <_dtoa_r+0x39e>
 8013248:	9c07      	ldr	r4, [sp, #28]
 801324a:	9704      	str	r7, [sp, #16]
 801324c:	e761      	b.n	8013112 <_dtoa_r+0x3e2>
 801324e:	4b27      	ldr	r3, [pc, #156]	@ (80132ec <_dtoa_r+0x5bc>)
 8013250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013256:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801325a:	4454      	add	r4, sl
 801325c:	2900      	cmp	r1, #0
 801325e:	d053      	beq.n	8013308 <_dtoa_r+0x5d8>
 8013260:	4928      	ldr	r1, [pc, #160]	@ (8013304 <_dtoa_r+0x5d4>)
 8013262:	2000      	movs	r0, #0
 8013264:	f7ed faca 	bl	80007fc <__aeabi_ddiv>
 8013268:	4633      	mov	r3, r6
 801326a:	462a      	mov	r2, r5
 801326c:	f7ec ffe4 	bl	8000238 <__aeabi_dsub>
 8013270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013274:	4656      	mov	r6, sl
 8013276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801327a:	f7ed fc45 	bl	8000b08 <__aeabi_d2iz>
 801327e:	4605      	mov	r5, r0
 8013280:	f7ed f928 	bl	80004d4 <__aeabi_i2d>
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801328c:	f7ec ffd4 	bl	8000238 <__aeabi_dsub>
 8013290:	3530      	adds	r5, #48	@ 0x30
 8013292:	4602      	mov	r2, r0
 8013294:	460b      	mov	r3, r1
 8013296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801329a:	f806 5b01 	strb.w	r5, [r6], #1
 801329e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132a2:	f7ed fbf3 	bl	8000a8c <__aeabi_dcmplt>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d171      	bne.n	801338e <_dtoa_r+0x65e>
 80132aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132ae:	4911      	ldr	r1, [pc, #68]	@ (80132f4 <_dtoa_r+0x5c4>)
 80132b0:	2000      	movs	r0, #0
 80132b2:	f7ec ffc1 	bl	8000238 <__aeabi_dsub>
 80132b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132ba:	f7ed fbe7 	bl	8000a8c <__aeabi_dcmplt>
 80132be:	2800      	cmp	r0, #0
 80132c0:	f040 8095 	bne.w	80133ee <_dtoa_r+0x6be>
 80132c4:	42a6      	cmp	r6, r4
 80132c6:	f43f af50 	beq.w	801316a <_dtoa_r+0x43a>
 80132ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80132ce:	4b0a      	ldr	r3, [pc, #40]	@ (80132f8 <_dtoa_r+0x5c8>)
 80132d0:	2200      	movs	r2, #0
 80132d2:	f7ed f969 	bl	80005a8 <__aeabi_dmul>
 80132d6:	4b08      	ldr	r3, [pc, #32]	@ (80132f8 <_dtoa_r+0x5c8>)
 80132d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80132dc:	2200      	movs	r2, #0
 80132de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132e2:	f7ed f961 	bl	80005a8 <__aeabi_dmul>
 80132e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132ea:	e7c4      	b.n	8013276 <_dtoa_r+0x546>
 80132ec:	08014ca8 	.word	0x08014ca8
 80132f0:	08014c80 	.word	0x08014c80
 80132f4:	3ff00000 	.word	0x3ff00000
 80132f8:	40240000 	.word	0x40240000
 80132fc:	401c0000 	.word	0x401c0000
 8013300:	40140000 	.word	0x40140000
 8013304:	3fe00000 	.word	0x3fe00000
 8013308:	4631      	mov	r1, r6
 801330a:	4628      	mov	r0, r5
 801330c:	f7ed f94c 	bl	80005a8 <__aeabi_dmul>
 8013310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013314:	9415      	str	r4, [sp, #84]	@ 0x54
 8013316:	4656      	mov	r6, sl
 8013318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801331c:	f7ed fbf4 	bl	8000b08 <__aeabi_d2iz>
 8013320:	4605      	mov	r5, r0
 8013322:	f7ed f8d7 	bl	80004d4 <__aeabi_i2d>
 8013326:	4602      	mov	r2, r0
 8013328:	460b      	mov	r3, r1
 801332a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801332e:	f7ec ff83 	bl	8000238 <__aeabi_dsub>
 8013332:	3530      	adds	r5, #48	@ 0x30
 8013334:	f806 5b01 	strb.w	r5, [r6], #1
 8013338:	4602      	mov	r2, r0
 801333a:	460b      	mov	r3, r1
 801333c:	42a6      	cmp	r6, r4
 801333e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013342:	f04f 0200 	mov.w	r2, #0
 8013346:	d124      	bne.n	8013392 <_dtoa_r+0x662>
 8013348:	4bac      	ldr	r3, [pc, #688]	@ (80135fc <_dtoa_r+0x8cc>)
 801334a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801334e:	f7ec ff75 	bl	800023c <__adddf3>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801335a:	f7ed fbb5 	bl	8000ac8 <__aeabi_dcmpgt>
 801335e:	2800      	cmp	r0, #0
 8013360:	d145      	bne.n	80133ee <_dtoa_r+0x6be>
 8013362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013366:	49a5      	ldr	r1, [pc, #660]	@ (80135fc <_dtoa_r+0x8cc>)
 8013368:	2000      	movs	r0, #0
 801336a:	f7ec ff65 	bl	8000238 <__aeabi_dsub>
 801336e:	4602      	mov	r2, r0
 8013370:	460b      	mov	r3, r1
 8013372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013376:	f7ed fb89 	bl	8000a8c <__aeabi_dcmplt>
 801337a:	2800      	cmp	r0, #0
 801337c:	f43f aef5 	beq.w	801316a <_dtoa_r+0x43a>
 8013380:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013382:	1e73      	subs	r3, r6, #1
 8013384:	9315      	str	r3, [sp, #84]	@ 0x54
 8013386:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801338a:	2b30      	cmp	r3, #48	@ 0x30
 801338c:	d0f8      	beq.n	8013380 <_dtoa_r+0x650>
 801338e:	9f04      	ldr	r7, [sp, #16]
 8013390:	e73e      	b.n	8013210 <_dtoa_r+0x4e0>
 8013392:	4b9b      	ldr	r3, [pc, #620]	@ (8013600 <_dtoa_r+0x8d0>)
 8013394:	f7ed f908 	bl	80005a8 <__aeabi_dmul>
 8013398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801339c:	e7bc      	b.n	8013318 <_dtoa_r+0x5e8>
 801339e:	d10c      	bne.n	80133ba <_dtoa_r+0x68a>
 80133a0:	4b98      	ldr	r3, [pc, #608]	@ (8013604 <_dtoa_r+0x8d4>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133a8:	f7ed f8fe 	bl	80005a8 <__aeabi_dmul>
 80133ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80133b0:	f7ed fb80 	bl	8000ab4 <__aeabi_dcmpge>
 80133b4:	2800      	cmp	r0, #0
 80133b6:	f000 8157 	beq.w	8013668 <_dtoa_r+0x938>
 80133ba:	2400      	movs	r4, #0
 80133bc:	4625      	mov	r5, r4
 80133be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80133c0:	43db      	mvns	r3, r3
 80133c2:	9304      	str	r3, [sp, #16]
 80133c4:	4656      	mov	r6, sl
 80133c6:	2700      	movs	r7, #0
 80133c8:	4621      	mov	r1, r4
 80133ca:	4658      	mov	r0, fp
 80133cc:	f000 fbb4 	bl	8013b38 <_Bfree>
 80133d0:	2d00      	cmp	r5, #0
 80133d2:	d0dc      	beq.n	801338e <_dtoa_r+0x65e>
 80133d4:	b12f      	cbz	r7, 80133e2 <_dtoa_r+0x6b2>
 80133d6:	42af      	cmp	r7, r5
 80133d8:	d003      	beq.n	80133e2 <_dtoa_r+0x6b2>
 80133da:	4639      	mov	r1, r7
 80133dc:	4658      	mov	r0, fp
 80133de:	f000 fbab 	bl	8013b38 <_Bfree>
 80133e2:	4629      	mov	r1, r5
 80133e4:	4658      	mov	r0, fp
 80133e6:	f000 fba7 	bl	8013b38 <_Bfree>
 80133ea:	e7d0      	b.n	801338e <_dtoa_r+0x65e>
 80133ec:	9704      	str	r7, [sp, #16]
 80133ee:	4633      	mov	r3, r6
 80133f0:	461e      	mov	r6, r3
 80133f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133f6:	2a39      	cmp	r2, #57	@ 0x39
 80133f8:	d107      	bne.n	801340a <_dtoa_r+0x6da>
 80133fa:	459a      	cmp	sl, r3
 80133fc:	d1f8      	bne.n	80133f0 <_dtoa_r+0x6c0>
 80133fe:	9a04      	ldr	r2, [sp, #16]
 8013400:	3201      	adds	r2, #1
 8013402:	9204      	str	r2, [sp, #16]
 8013404:	2230      	movs	r2, #48	@ 0x30
 8013406:	f88a 2000 	strb.w	r2, [sl]
 801340a:	781a      	ldrb	r2, [r3, #0]
 801340c:	3201      	adds	r2, #1
 801340e:	701a      	strb	r2, [r3, #0]
 8013410:	e7bd      	b.n	801338e <_dtoa_r+0x65e>
 8013412:	4b7b      	ldr	r3, [pc, #492]	@ (8013600 <_dtoa_r+0x8d0>)
 8013414:	2200      	movs	r2, #0
 8013416:	f7ed f8c7 	bl	80005a8 <__aeabi_dmul>
 801341a:	2200      	movs	r2, #0
 801341c:	2300      	movs	r3, #0
 801341e:	4604      	mov	r4, r0
 8013420:	460d      	mov	r5, r1
 8013422:	f7ed fb29 	bl	8000a78 <__aeabi_dcmpeq>
 8013426:	2800      	cmp	r0, #0
 8013428:	f43f aebb 	beq.w	80131a2 <_dtoa_r+0x472>
 801342c:	e6f0      	b.n	8013210 <_dtoa_r+0x4e0>
 801342e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013430:	2a00      	cmp	r2, #0
 8013432:	f000 80db 	beq.w	80135ec <_dtoa_r+0x8bc>
 8013436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013438:	2a01      	cmp	r2, #1
 801343a:	f300 80bf 	bgt.w	80135bc <_dtoa_r+0x88c>
 801343e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013440:	2a00      	cmp	r2, #0
 8013442:	f000 80b7 	beq.w	80135b4 <_dtoa_r+0x884>
 8013446:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801344a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801344c:	4646      	mov	r6, r8
 801344e:	9a08      	ldr	r2, [sp, #32]
 8013450:	2101      	movs	r1, #1
 8013452:	441a      	add	r2, r3
 8013454:	4658      	mov	r0, fp
 8013456:	4498      	add	r8, r3
 8013458:	9208      	str	r2, [sp, #32]
 801345a:	f000 fc21 	bl	8013ca0 <__i2b>
 801345e:	4605      	mov	r5, r0
 8013460:	b15e      	cbz	r6, 801347a <_dtoa_r+0x74a>
 8013462:	9b08      	ldr	r3, [sp, #32]
 8013464:	2b00      	cmp	r3, #0
 8013466:	dd08      	ble.n	801347a <_dtoa_r+0x74a>
 8013468:	42b3      	cmp	r3, r6
 801346a:	9a08      	ldr	r2, [sp, #32]
 801346c:	bfa8      	it	ge
 801346e:	4633      	movge	r3, r6
 8013470:	eba8 0803 	sub.w	r8, r8, r3
 8013474:	1af6      	subs	r6, r6, r3
 8013476:	1ad3      	subs	r3, r2, r3
 8013478:	9308      	str	r3, [sp, #32]
 801347a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801347c:	b1f3      	cbz	r3, 80134bc <_dtoa_r+0x78c>
 801347e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013480:	2b00      	cmp	r3, #0
 8013482:	f000 80b7 	beq.w	80135f4 <_dtoa_r+0x8c4>
 8013486:	b18c      	cbz	r4, 80134ac <_dtoa_r+0x77c>
 8013488:	4629      	mov	r1, r5
 801348a:	4622      	mov	r2, r4
 801348c:	4658      	mov	r0, fp
 801348e:	f000 fcc7 	bl	8013e20 <__pow5mult>
 8013492:	464a      	mov	r2, r9
 8013494:	4601      	mov	r1, r0
 8013496:	4605      	mov	r5, r0
 8013498:	4658      	mov	r0, fp
 801349a:	f000 fc17 	bl	8013ccc <__multiply>
 801349e:	4649      	mov	r1, r9
 80134a0:	9004      	str	r0, [sp, #16]
 80134a2:	4658      	mov	r0, fp
 80134a4:	f000 fb48 	bl	8013b38 <_Bfree>
 80134a8:	9b04      	ldr	r3, [sp, #16]
 80134aa:	4699      	mov	r9, r3
 80134ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134ae:	1b1a      	subs	r2, r3, r4
 80134b0:	d004      	beq.n	80134bc <_dtoa_r+0x78c>
 80134b2:	4649      	mov	r1, r9
 80134b4:	4658      	mov	r0, fp
 80134b6:	f000 fcb3 	bl	8013e20 <__pow5mult>
 80134ba:	4681      	mov	r9, r0
 80134bc:	2101      	movs	r1, #1
 80134be:	4658      	mov	r0, fp
 80134c0:	f000 fbee 	bl	8013ca0 <__i2b>
 80134c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80134c6:	4604      	mov	r4, r0
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f000 81cf 	beq.w	801386c <_dtoa_r+0xb3c>
 80134ce:	461a      	mov	r2, r3
 80134d0:	4601      	mov	r1, r0
 80134d2:	4658      	mov	r0, fp
 80134d4:	f000 fca4 	bl	8013e20 <__pow5mult>
 80134d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134da:	2b01      	cmp	r3, #1
 80134dc:	4604      	mov	r4, r0
 80134de:	f300 8095 	bgt.w	801360c <_dtoa_r+0x8dc>
 80134e2:	9b02      	ldr	r3, [sp, #8]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f040 8087 	bne.w	80135f8 <_dtoa_r+0x8c8>
 80134ea:	9b03      	ldr	r3, [sp, #12]
 80134ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	f040 8089 	bne.w	8013608 <_dtoa_r+0x8d8>
 80134f6:	9b03      	ldr	r3, [sp, #12]
 80134f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80134fc:	0d1b      	lsrs	r3, r3, #20
 80134fe:	051b      	lsls	r3, r3, #20
 8013500:	b12b      	cbz	r3, 801350e <_dtoa_r+0x7de>
 8013502:	9b08      	ldr	r3, [sp, #32]
 8013504:	3301      	adds	r3, #1
 8013506:	9308      	str	r3, [sp, #32]
 8013508:	f108 0801 	add.w	r8, r8, #1
 801350c:	2301      	movs	r3, #1
 801350e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013512:	2b00      	cmp	r3, #0
 8013514:	f000 81b0 	beq.w	8013878 <_dtoa_r+0xb48>
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801351e:	6918      	ldr	r0, [r3, #16]
 8013520:	f000 fb72 	bl	8013c08 <__hi0bits>
 8013524:	f1c0 0020 	rsb	r0, r0, #32
 8013528:	9b08      	ldr	r3, [sp, #32]
 801352a:	4418      	add	r0, r3
 801352c:	f010 001f 	ands.w	r0, r0, #31
 8013530:	d077      	beq.n	8013622 <_dtoa_r+0x8f2>
 8013532:	f1c0 0320 	rsb	r3, r0, #32
 8013536:	2b04      	cmp	r3, #4
 8013538:	dd6b      	ble.n	8013612 <_dtoa_r+0x8e2>
 801353a:	9b08      	ldr	r3, [sp, #32]
 801353c:	f1c0 001c 	rsb	r0, r0, #28
 8013540:	4403      	add	r3, r0
 8013542:	4480      	add	r8, r0
 8013544:	4406      	add	r6, r0
 8013546:	9308      	str	r3, [sp, #32]
 8013548:	f1b8 0f00 	cmp.w	r8, #0
 801354c:	dd05      	ble.n	801355a <_dtoa_r+0x82a>
 801354e:	4649      	mov	r1, r9
 8013550:	4642      	mov	r2, r8
 8013552:	4658      	mov	r0, fp
 8013554:	f000 fcbe 	bl	8013ed4 <__lshift>
 8013558:	4681      	mov	r9, r0
 801355a:	9b08      	ldr	r3, [sp, #32]
 801355c:	2b00      	cmp	r3, #0
 801355e:	dd05      	ble.n	801356c <_dtoa_r+0x83c>
 8013560:	4621      	mov	r1, r4
 8013562:	461a      	mov	r2, r3
 8013564:	4658      	mov	r0, fp
 8013566:	f000 fcb5 	bl	8013ed4 <__lshift>
 801356a:	4604      	mov	r4, r0
 801356c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801356e:	2b00      	cmp	r3, #0
 8013570:	d059      	beq.n	8013626 <_dtoa_r+0x8f6>
 8013572:	4621      	mov	r1, r4
 8013574:	4648      	mov	r0, r9
 8013576:	f000 fd19 	bl	8013fac <__mcmp>
 801357a:	2800      	cmp	r0, #0
 801357c:	da53      	bge.n	8013626 <_dtoa_r+0x8f6>
 801357e:	1e7b      	subs	r3, r7, #1
 8013580:	9304      	str	r3, [sp, #16]
 8013582:	4649      	mov	r1, r9
 8013584:	2300      	movs	r3, #0
 8013586:	220a      	movs	r2, #10
 8013588:	4658      	mov	r0, fp
 801358a:	f000 faf7 	bl	8013b7c <__multadd>
 801358e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013590:	4681      	mov	r9, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	f000 8172 	beq.w	801387c <_dtoa_r+0xb4c>
 8013598:	2300      	movs	r3, #0
 801359a:	4629      	mov	r1, r5
 801359c:	220a      	movs	r2, #10
 801359e:	4658      	mov	r0, fp
 80135a0:	f000 faec 	bl	8013b7c <__multadd>
 80135a4:	9b00      	ldr	r3, [sp, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	4605      	mov	r5, r0
 80135aa:	dc67      	bgt.n	801367c <_dtoa_r+0x94c>
 80135ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135ae:	2b02      	cmp	r3, #2
 80135b0:	dc41      	bgt.n	8013636 <_dtoa_r+0x906>
 80135b2:	e063      	b.n	801367c <_dtoa_r+0x94c>
 80135b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80135b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80135ba:	e746      	b.n	801344a <_dtoa_r+0x71a>
 80135bc:	9b07      	ldr	r3, [sp, #28]
 80135be:	1e5c      	subs	r4, r3, #1
 80135c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135c2:	42a3      	cmp	r3, r4
 80135c4:	bfbf      	itttt	lt
 80135c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80135c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80135ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80135cc:	1ae3      	sublt	r3, r4, r3
 80135ce:	bfb4      	ite	lt
 80135d0:	18d2      	addlt	r2, r2, r3
 80135d2:	1b1c      	subge	r4, r3, r4
 80135d4:	9b07      	ldr	r3, [sp, #28]
 80135d6:	bfbc      	itt	lt
 80135d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80135da:	2400      	movlt	r4, #0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	bfb5      	itete	lt
 80135e0:	eba8 0603 	sublt.w	r6, r8, r3
 80135e4:	9b07      	ldrge	r3, [sp, #28]
 80135e6:	2300      	movlt	r3, #0
 80135e8:	4646      	movge	r6, r8
 80135ea:	e730      	b.n	801344e <_dtoa_r+0x71e>
 80135ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80135ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80135f0:	4646      	mov	r6, r8
 80135f2:	e735      	b.n	8013460 <_dtoa_r+0x730>
 80135f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80135f6:	e75c      	b.n	80134b2 <_dtoa_r+0x782>
 80135f8:	2300      	movs	r3, #0
 80135fa:	e788      	b.n	801350e <_dtoa_r+0x7de>
 80135fc:	3fe00000 	.word	0x3fe00000
 8013600:	40240000 	.word	0x40240000
 8013604:	40140000 	.word	0x40140000
 8013608:	9b02      	ldr	r3, [sp, #8]
 801360a:	e780      	b.n	801350e <_dtoa_r+0x7de>
 801360c:	2300      	movs	r3, #0
 801360e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013610:	e782      	b.n	8013518 <_dtoa_r+0x7e8>
 8013612:	d099      	beq.n	8013548 <_dtoa_r+0x818>
 8013614:	9a08      	ldr	r2, [sp, #32]
 8013616:	331c      	adds	r3, #28
 8013618:	441a      	add	r2, r3
 801361a:	4498      	add	r8, r3
 801361c:	441e      	add	r6, r3
 801361e:	9208      	str	r2, [sp, #32]
 8013620:	e792      	b.n	8013548 <_dtoa_r+0x818>
 8013622:	4603      	mov	r3, r0
 8013624:	e7f6      	b.n	8013614 <_dtoa_r+0x8e4>
 8013626:	9b07      	ldr	r3, [sp, #28]
 8013628:	9704      	str	r7, [sp, #16]
 801362a:	2b00      	cmp	r3, #0
 801362c:	dc20      	bgt.n	8013670 <_dtoa_r+0x940>
 801362e:	9300      	str	r3, [sp, #0]
 8013630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013632:	2b02      	cmp	r3, #2
 8013634:	dd1e      	ble.n	8013674 <_dtoa_r+0x944>
 8013636:	9b00      	ldr	r3, [sp, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	f47f aec0 	bne.w	80133be <_dtoa_r+0x68e>
 801363e:	4621      	mov	r1, r4
 8013640:	2205      	movs	r2, #5
 8013642:	4658      	mov	r0, fp
 8013644:	f000 fa9a 	bl	8013b7c <__multadd>
 8013648:	4601      	mov	r1, r0
 801364a:	4604      	mov	r4, r0
 801364c:	4648      	mov	r0, r9
 801364e:	f000 fcad 	bl	8013fac <__mcmp>
 8013652:	2800      	cmp	r0, #0
 8013654:	f77f aeb3 	ble.w	80133be <_dtoa_r+0x68e>
 8013658:	4656      	mov	r6, sl
 801365a:	2331      	movs	r3, #49	@ 0x31
 801365c:	f806 3b01 	strb.w	r3, [r6], #1
 8013660:	9b04      	ldr	r3, [sp, #16]
 8013662:	3301      	adds	r3, #1
 8013664:	9304      	str	r3, [sp, #16]
 8013666:	e6ae      	b.n	80133c6 <_dtoa_r+0x696>
 8013668:	9c07      	ldr	r4, [sp, #28]
 801366a:	9704      	str	r7, [sp, #16]
 801366c:	4625      	mov	r5, r4
 801366e:	e7f3      	b.n	8013658 <_dtoa_r+0x928>
 8013670:	9b07      	ldr	r3, [sp, #28]
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 8104 	beq.w	8013884 <_dtoa_r+0xb54>
 801367c:	2e00      	cmp	r6, #0
 801367e:	dd05      	ble.n	801368c <_dtoa_r+0x95c>
 8013680:	4629      	mov	r1, r5
 8013682:	4632      	mov	r2, r6
 8013684:	4658      	mov	r0, fp
 8013686:	f000 fc25 	bl	8013ed4 <__lshift>
 801368a:	4605      	mov	r5, r0
 801368c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801368e:	2b00      	cmp	r3, #0
 8013690:	d05a      	beq.n	8013748 <_dtoa_r+0xa18>
 8013692:	6869      	ldr	r1, [r5, #4]
 8013694:	4658      	mov	r0, fp
 8013696:	f000 fa0f 	bl	8013ab8 <_Balloc>
 801369a:	4606      	mov	r6, r0
 801369c:	b928      	cbnz	r0, 80136aa <_dtoa_r+0x97a>
 801369e:	4b84      	ldr	r3, [pc, #528]	@ (80138b0 <_dtoa_r+0xb80>)
 80136a0:	4602      	mov	r2, r0
 80136a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80136a6:	f7ff bb5a 	b.w	8012d5e <_dtoa_r+0x2e>
 80136aa:	692a      	ldr	r2, [r5, #16]
 80136ac:	3202      	adds	r2, #2
 80136ae:	0092      	lsls	r2, r2, #2
 80136b0:	f105 010c 	add.w	r1, r5, #12
 80136b4:	300c      	adds	r0, #12
 80136b6:	f7ff faa4 	bl	8012c02 <memcpy>
 80136ba:	2201      	movs	r2, #1
 80136bc:	4631      	mov	r1, r6
 80136be:	4658      	mov	r0, fp
 80136c0:	f000 fc08 	bl	8013ed4 <__lshift>
 80136c4:	f10a 0301 	add.w	r3, sl, #1
 80136c8:	9307      	str	r3, [sp, #28]
 80136ca:	9b00      	ldr	r3, [sp, #0]
 80136cc:	4453      	add	r3, sl
 80136ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136d0:	9b02      	ldr	r3, [sp, #8]
 80136d2:	f003 0301 	and.w	r3, r3, #1
 80136d6:	462f      	mov	r7, r5
 80136d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80136da:	4605      	mov	r5, r0
 80136dc:	9b07      	ldr	r3, [sp, #28]
 80136de:	4621      	mov	r1, r4
 80136e0:	3b01      	subs	r3, #1
 80136e2:	4648      	mov	r0, r9
 80136e4:	9300      	str	r3, [sp, #0]
 80136e6:	f7ff fa9a 	bl	8012c1e <quorem>
 80136ea:	4639      	mov	r1, r7
 80136ec:	9002      	str	r0, [sp, #8]
 80136ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80136f2:	4648      	mov	r0, r9
 80136f4:	f000 fc5a 	bl	8013fac <__mcmp>
 80136f8:	462a      	mov	r2, r5
 80136fa:	9008      	str	r0, [sp, #32]
 80136fc:	4621      	mov	r1, r4
 80136fe:	4658      	mov	r0, fp
 8013700:	f000 fc70 	bl	8013fe4 <__mdiff>
 8013704:	68c2      	ldr	r2, [r0, #12]
 8013706:	4606      	mov	r6, r0
 8013708:	bb02      	cbnz	r2, 801374c <_dtoa_r+0xa1c>
 801370a:	4601      	mov	r1, r0
 801370c:	4648      	mov	r0, r9
 801370e:	f000 fc4d 	bl	8013fac <__mcmp>
 8013712:	4602      	mov	r2, r0
 8013714:	4631      	mov	r1, r6
 8013716:	4658      	mov	r0, fp
 8013718:	920e      	str	r2, [sp, #56]	@ 0x38
 801371a:	f000 fa0d 	bl	8013b38 <_Bfree>
 801371e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013722:	9e07      	ldr	r6, [sp, #28]
 8013724:	ea43 0102 	orr.w	r1, r3, r2
 8013728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801372a:	4319      	orrs	r1, r3
 801372c:	d110      	bne.n	8013750 <_dtoa_r+0xa20>
 801372e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013732:	d029      	beq.n	8013788 <_dtoa_r+0xa58>
 8013734:	9b08      	ldr	r3, [sp, #32]
 8013736:	2b00      	cmp	r3, #0
 8013738:	dd02      	ble.n	8013740 <_dtoa_r+0xa10>
 801373a:	9b02      	ldr	r3, [sp, #8]
 801373c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013740:	9b00      	ldr	r3, [sp, #0]
 8013742:	f883 8000 	strb.w	r8, [r3]
 8013746:	e63f      	b.n	80133c8 <_dtoa_r+0x698>
 8013748:	4628      	mov	r0, r5
 801374a:	e7bb      	b.n	80136c4 <_dtoa_r+0x994>
 801374c:	2201      	movs	r2, #1
 801374e:	e7e1      	b.n	8013714 <_dtoa_r+0x9e4>
 8013750:	9b08      	ldr	r3, [sp, #32]
 8013752:	2b00      	cmp	r3, #0
 8013754:	db04      	blt.n	8013760 <_dtoa_r+0xa30>
 8013756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013758:	430b      	orrs	r3, r1
 801375a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801375c:	430b      	orrs	r3, r1
 801375e:	d120      	bne.n	80137a2 <_dtoa_r+0xa72>
 8013760:	2a00      	cmp	r2, #0
 8013762:	dded      	ble.n	8013740 <_dtoa_r+0xa10>
 8013764:	4649      	mov	r1, r9
 8013766:	2201      	movs	r2, #1
 8013768:	4658      	mov	r0, fp
 801376a:	f000 fbb3 	bl	8013ed4 <__lshift>
 801376e:	4621      	mov	r1, r4
 8013770:	4681      	mov	r9, r0
 8013772:	f000 fc1b 	bl	8013fac <__mcmp>
 8013776:	2800      	cmp	r0, #0
 8013778:	dc03      	bgt.n	8013782 <_dtoa_r+0xa52>
 801377a:	d1e1      	bne.n	8013740 <_dtoa_r+0xa10>
 801377c:	f018 0f01 	tst.w	r8, #1
 8013780:	d0de      	beq.n	8013740 <_dtoa_r+0xa10>
 8013782:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013786:	d1d8      	bne.n	801373a <_dtoa_r+0xa0a>
 8013788:	9a00      	ldr	r2, [sp, #0]
 801378a:	2339      	movs	r3, #57	@ 0x39
 801378c:	7013      	strb	r3, [r2, #0]
 801378e:	4633      	mov	r3, r6
 8013790:	461e      	mov	r6, r3
 8013792:	3b01      	subs	r3, #1
 8013794:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013798:	2a39      	cmp	r2, #57	@ 0x39
 801379a:	d052      	beq.n	8013842 <_dtoa_r+0xb12>
 801379c:	3201      	adds	r2, #1
 801379e:	701a      	strb	r2, [r3, #0]
 80137a0:	e612      	b.n	80133c8 <_dtoa_r+0x698>
 80137a2:	2a00      	cmp	r2, #0
 80137a4:	dd07      	ble.n	80137b6 <_dtoa_r+0xa86>
 80137a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80137aa:	d0ed      	beq.n	8013788 <_dtoa_r+0xa58>
 80137ac:	9a00      	ldr	r2, [sp, #0]
 80137ae:	f108 0301 	add.w	r3, r8, #1
 80137b2:	7013      	strb	r3, [r2, #0]
 80137b4:	e608      	b.n	80133c8 <_dtoa_r+0x698>
 80137b6:	9b07      	ldr	r3, [sp, #28]
 80137b8:	9a07      	ldr	r2, [sp, #28]
 80137ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80137be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137c0:	4293      	cmp	r3, r2
 80137c2:	d028      	beq.n	8013816 <_dtoa_r+0xae6>
 80137c4:	4649      	mov	r1, r9
 80137c6:	2300      	movs	r3, #0
 80137c8:	220a      	movs	r2, #10
 80137ca:	4658      	mov	r0, fp
 80137cc:	f000 f9d6 	bl	8013b7c <__multadd>
 80137d0:	42af      	cmp	r7, r5
 80137d2:	4681      	mov	r9, r0
 80137d4:	f04f 0300 	mov.w	r3, #0
 80137d8:	f04f 020a 	mov.w	r2, #10
 80137dc:	4639      	mov	r1, r7
 80137de:	4658      	mov	r0, fp
 80137e0:	d107      	bne.n	80137f2 <_dtoa_r+0xac2>
 80137e2:	f000 f9cb 	bl	8013b7c <__multadd>
 80137e6:	4607      	mov	r7, r0
 80137e8:	4605      	mov	r5, r0
 80137ea:	9b07      	ldr	r3, [sp, #28]
 80137ec:	3301      	adds	r3, #1
 80137ee:	9307      	str	r3, [sp, #28]
 80137f0:	e774      	b.n	80136dc <_dtoa_r+0x9ac>
 80137f2:	f000 f9c3 	bl	8013b7c <__multadd>
 80137f6:	4629      	mov	r1, r5
 80137f8:	4607      	mov	r7, r0
 80137fa:	2300      	movs	r3, #0
 80137fc:	220a      	movs	r2, #10
 80137fe:	4658      	mov	r0, fp
 8013800:	f000 f9bc 	bl	8013b7c <__multadd>
 8013804:	4605      	mov	r5, r0
 8013806:	e7f0      	b.n	80137ea <_dtoa_r+0xaba>
 8013808:	9b00      	ldr	r3, [sp, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	bfcc      	ite	gt
 801380e:	461e      	movgt	r6, r3
 8013810:	2601      	movle	r6, #1
 8013812:	4456      	add	r6, sl
 8013814:	2700      	movs	r7, #0
 8013816:	4649      	mov	r1, r9
 8013818:	2201      	movs	r2, #1
 801381a:	4658      	mov	r0, fp
 801381c:	f000 fb5a 	bl	8013ed4 <__lshift>
 8013820:	4621      	mov	r1, r4
 8013822:	4681      	mov	r9, r0
 8013824:	f000 fbc2 	bl	8013fac <__mcmp>
 8013828:	2800      	cmp	r0, #0
 801382a:	dcb0      	bgt.n	801378e <_dtoa_r+0xa5e>
 801382c:	d102      	bne.n	8013834 <_dtoa_r+0xb04>
 801382e:	f018 0f01 	tst.w	r8, #1
 8013832:	d1ac      	bne.n	801378e <_dtoa_r+0xa5e>
 8013834:	4633      	mov	r3, r6
 8013836:	461e      	mov	r6, r3
 8013838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801383c:	2a30      	cmp	r2, #48	@ 0x30
 801383e:	d0fa      	beq.n	8013836 <_dtoa_r+0xb06>
 8013840:	e5c2      	b.n	80133c8 <_dtoa_r+0x698>
 8013842:	459a      	cmp	sl, r3
 8013844:	d1a4      	bne.n	8013790 <_dtoa_r+0xa60>
 8013846:	9b04      	ldr	r3, [sp, #16]
 8013848:	3301      	adds	r3, #1
 801384a:	9304      	str	r3, [sp, #16]
 801384c:	2331      	movs	r3, #49	@ 0x31
 801384e:	f88a 3000 	strb.w	r3, [sl]
 8013852:	e5b9      	b.n	80133c8 <_dtoa_r+0x698>
 8013854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013856:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80138b4 <_dtoa_r+0xb84>
 801385a:	b11b      	cbz	r3, 8013864 <_dtoa_r+0xb34>
 801385c:	f10a 0308 	add.w	r3, sl, #8
 8013860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013862:	6013      	str	r3, [r2, #0]
 8013864:	4650      	mov	r0, sl
 8013866:	b019      	add	sp, #100	@ 0x64
 8013868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801386e:	2b01      	cmp	r3, #1
 8013870:	f77f ae37 	ble.w	80134e2 <_dtoa_r+0x7b2>
 8013874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013876:	930a      	str	r3, [sp, #40]	@ 0x28
 8013878:	2001      	movs	r0, #1
 801387a:	e655      	b.n	8013528 <_dtoa_r+0x7f8>
 801387c:	9b00      	ldr	r3, [sp, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	f77f aed6 	ble.w	8013630 <_dtoa_r+0x900>
 8013884:	4656      	mov	r6, sl
 8013886:	4621      	mov	r1, r4
 8013888:	4648      	mov	r0, r9
 801388a:	f7ff f9c8 	bl	8012c1e <quorem>
 801388e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013892:	f806 8b01 	strb.w	r8, [r6], #1
 8013896:	9b00      	ldr	r3, [sp, #0]
 8013898:	eba6 020a 	sub.w	r2, r6, sl
 801389c:	4293      	cmp	r3, r2
 801389e:	ddb3      	ble.n	8013808 <_dtoa_r+0xad8>
 80138a0:	4649      	mov	r1, r9
 80138a2:	2300      	movs	r3, #0
 80138a4:	220a      	movs	r2, #10
 80138a6:	4658      	mov	r0, fp
 80138a8:	f000 f968 	bl	8013b7c <__multadd>
 80138ac:	4681      	mov	r9, r0
 80138ae:	e7ea      	b.n	8013886 <_dtoa_r+0xb56>
 80138b0:	08014c04 	.word	0x08014c04
 80138b4:	08014b88 	.word	0x08014b88

080138b8 <_free_r>:
 80138b8:	b538      	push	{r3, r4, r5, lr}
 80138ba:	4605      	mov	r5, r0
 80138bc:	2900      	cmp	r1, #0
 80138be:	d041      	beq.n	8013944 <_free_r+0x8c>
 80138c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138c4:	1f0c      	subs	r4, r1, #4
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	bfb8      	it	lt
 80138ca:	18e4      	addlt	r4, r4, r3
 80138cc:	f000 f8e8 	bl	8013aa0 <__malloc_lock>
 80138d0:	4a1d      	ldr	r2, [pc, #116]	@ (8013948 <_free_r+0x90>)
 80138d2:	6813      	ldr	r3, [r2, #0]
 80138d4:	b933      	cbnz	r3, 80138e4 <_free_r+0x2c>
 80138d6:	6063      	str	r3, [r4, #4]
 80138d8:	6014      	str	r4, [r2, #0]
 80138da:	4628      	mov	r0, r5
 80138dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138e0:	f000 b8e4 	b.w	8013aac <__malloc_unlock>
 80138e4:	42a3      	cmp	r3, r4
 80138e6:	d908      	bls.n	80138fa <_free_r+0x42>
 80138e8:	6820      	ldr	r0, [r4, #0]
 80138ea:	1821      	adds	r1, r4, r0
 80138ec:	428b      	cmp	r3, r1
 80138ee:	bf01      	itttt	eq
 80138f0:	6819      	ldreq	r1, [r3, #0]
 80138f2:	685b      	ldreq	r3, [r3, #4]
 80138f4:	1809      	addeq	r1, r1, r0
 80138f6:	6021      	streq	r1, [r4, #0]
 80138f8:	e7ed      	b.n	80138d6 <_free_r+0x1e>
 80138fa:	461a      	mov	r2, r3
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	b10b      	cbz	r3, 8013904 <_free_r+0x4c>
 8013900:	42a3      	cmp	r3, r4
 8013902:	d9fa      	bls.n	80138fa <_free_r+0x42>
 8013904:	6811      	ldr	r1, [r2, #0]
 8013906:	1850      	adds	r0, r2, r1
 8013908:	42a0      	cmp	r0, r4
 801390a:	d10b      	bne.n	8013924 <_free_r+0x6c>
 801390c:	6820      	ldr	r0, [r4, #0]
 801390e:	4401      	add	r1, r0
 8013910:	1850      	adds	r0, r2, r1
 8013912:	4283      	cmp	r3, r0
 8013914:	6011      	str	r1, [r2, #0]
 8013916:	d1e0      	bne.n	80138da <_free_r+0x22>
 8013918:	6818      	ldr	r0, [r3, #0]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	6053      	str	r3, [r2, #4]
 801391e:	4408      	add	r0, r1
 8013920:	6010      	str	r0, [r2, #0]
 8013922:	e7da      	b.n	80138da <_free_r+0x22>
 8013924:	d902      	bls.n	801392c <_free_r+0x74>
 8013926:	230c      	movs	r3, #12
 8013928:	602b      	str	r3, [r5, #0]
 801392a:	e7d6      	b.n	80138da <_free_r+0x22>
 801392c:	6820      	ldr	r0, [r4, #0]
 801392e:	1821      	adds	r1, r4, r0
 8013930:	428b      	cmp	r3, r1
 8013932:	bf04      	itt	eq
 8013934:	6819      	ldreq	r1, [r3, #0]
 8013936:	685b      	ldreq	r3, [r3, #4]
 8013938:	6063      	str	r3, [r4, #4]
 801393a:	bf04      	itt	eq
 801393c:	1809      	addeq	r1, r1, r0
 801393e:	6021      	streq	r1, [r4, #0]
 8013940:	6054      	str	r4, [r2, #4]
 8013942:	e7ca      	b.n	80138da <_free_r+0x22>
 8013944:	bd38      	pop	{r3, r4, r5, pc}
 8013946:	bf00      	nop
 8013948:	200024c8 	.word	0x200024c8

0801394c <malloc>:
 801394c:	4b02      	ldr	r3, [pc, #8]	@ (8013958 <malloc+0xc>)
 801394e:	4601      	mov	r1, r0
 8013950:	6818      	ldr	r0, [r3, #0]
 8013952:	f000 b825 	b.w	80139a0 <_malloc_r>
 8013956:	bf00      	nop
 8013958:	20000134 	.word	0x20000134

0801395c <sbrk_aligned>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	4e0f      	ldr	r6, [pc, #60]	@ (801399c <sbrk_aligned+0x40>)
 8013960:	460c      	mov	r4, r1
 8013962:	6831      	ldr	r1, [r6, #0]
 8013964:	4605      	mov	r5, r0
 8013966:	b911      	cbnz	r1, 801396e <sbrk_aligned+0x12>
 8013968:	f000 fede 	bl	8014728 <_sbrk_r>
 801396c:	6030      	str	r0, [r6, #0]
 801396e:	4621      	mov	r1, r4
 8013970:	4628      	mov	r0, r5
 8013972:	f000 fed9 	bl	8014728 <_sbrk_r>
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	d103      	bne.n	8013982 <sbrk_aligned+0x26>
 801397a:	f04f 34ff 	mov.w	r4, #4294967295
 801397e:	4620      	mov	r0, r4
 8013980:	bd70      	pop	{r4, r5, r6, pc}
 8013982:	1cc4      	adds	r4, r0, #3
 8013984:	f024 0403 	bic.w	r4, r4, #3
 8013988:	42a0      	cmp	r0, r4
 801398a:	d0f8      	beq.n	801397e <sbrk_aligned+0x22>
 801398c:	1a21      	subs	r1, r4, r0
 801398e:	4628      	mov	r0, r5
 8013990:	f000 feca 	bl	8014728 <_sbrk_r>
 8013994:	3001      	adds	r0, #1
 8013996:	d1f2      	bne.n	801397e <sbrk_aligned+0x22>
 8013998:	e7ef      	b.n	801397a <sbrk_aligned+0x1e>
 801399a:	bf00      	nop
 801399c:	200024c4 	.word	0x200024c4

080139a0 <_malloc_r>:
 80139a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139a4:	1ccd      	adds	r5, r1, #3
 80139a6:	f025 0503 	bic.w	r5, r5, #3
 80139aa:	3508      	adds	r5, #8
 80139ac:	2d0c      	cmp	r5, #12
 80139ae:	bf38      	it	cc
 80139b0:	250c      	movcc	r5, #12
 80139b2:	2d00      	cmp	r5, #0
 80139b4:	4606      	mov	r6, r0
 80139b6:	db01      	blt.n	80139bc <_malloc_r+0x1c>
 80139b8:	42a9      	cmp	r1, r5
 80139ba:	d904      	bls.n	80139c6 <_malloc_r+0x26>
 80139bc:	230c      	movs	r3, #12
 80139be:	6033      	str	r3, [r6, #0]
 80139c0:	2000      	movs	r0, #0
 80139c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013a9c <_malloc_r+0xfc>
 80139ca:	f000 f869 	bl	8013aa0 <__malloc_lock>
 80139ce:	f8d8 3000 	ldr.w	r3, [r8]
 80139d2:	461c      	mov	r4, r3
 80139d4:	bb44      	cbnz	r4, 8013a28 <_malloc_r+0x88>
 80139d6:	4629      	mov	r1, r5
 80139d8:	4630      	mov	r0, r6
 80139da:	f7ff ffbf 	bl	801395c <sbrk_aligned>
 80139de:	1c43      	adds	r3, r0, #1
 80139e0:	4604      	mov	r4, r0
 80139e2:	d158      	bne.n	8013a96 <_malloc_r+0xf6>
 80139e4:	f8d8 4000 	ldr.w	r4, [r8]
 80139e8:	4627      	mov	r7, r4
 80139ea:	2f00      	cmp	r7, #0
 80139ec:	d143      	bne.n	8013a76 <_malloc_r+0xd6>
 80139ee:	2c00      	cmp	r4, #0
 80139f0:	d04b      	beq.n	8013a8a <_malloc_r+0xea>
 80139f2:	6823      	ldr	r3, [r4, #0]
 80139f4:	4639      	mov	r1, r7
 80139f6:	4630      	mov	r0, r6
 80139f8:	eb04 0903 	add.w	r9, r4, r3
 80139fc:	f000 fe94 	bl	8014728 <_sbrk_r>
 8013a00:	4581      	cmp	r9, r0
 8013a02:	d142      	bne.n	8013a8a <_malloc_r+0xea>
 8013a04:	6821      	ldr	r1, [r4, #0]
 8013a06:	1a6d      	subs	r5, r5, r1
 8013a08:	4629      	mov	r1, r5
 8013a0a:	4630      	mov	r0, r6
 8013a0c:	f7ff ffa6 	bl	801395c <sbrk_aligned>
 8013a10:	3001      	adds	r0, #1
 8013a12:	d03a      	beq.n	8013a8a <_malloc_r+0xea>
 8013a14:	6823      	ldr	r3, [r4, #0]
 8013a16:	442b      	add	r3, r5
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	bb62      	cbnz	r2, 8013a7c <_malloc_r+0xdc>
 8013a22:	f8c8 7000 	str.w	r7, [r8]
 8013a26:	e00f      	b.n	8013a48 <_malloc_r+0xa8>
 8013a28:	6822      	ldr	r2, [r4, #0]
 8013a2a:	1b52      	subs	r2, r2, r5
 8013a2c:	d420      	bmi.n	8013a70 <_malloc_r+0xd0>
 8013a2e:	2a0b      	cmp	r2, #11
 8013a30:	d917      	bls.n	8013a62 <_malloc_r+0xc2>
 8013a32:	1961      	adds	r1, r4, r5
 8013a34:	42a3      	cmp	r3, r4
 8013a36:	6025      	str	r5, [r4, #0]
 8013a38:	bf18      	it	ne
 8013a3a:	6059      	strne	r1, [r3, #4]
 8013a3c:	6863      	ldr	r3, [r4, #4]
 8013a3e:	bf08      	it	eq
 8013a40:	f8c8 1000 	streq.w	r1, [r8]
 8013a44:	5162      	str	r2, [r4, r5]
 8013a46:	604b      	str	r3, [r1, #4]
 8013a48:	4630      	mov	r0, r6
 8013a4a:	f000 f82f 	bl	8013aac <__malloc_unlock>
 8013a4e:	f104 000b 	add.w	r0, r4, #11
 8013a52:	1d23      	adds	r3, r4, #4
 8013a54:	f020 0007 	bic.w	r0, r0, #7
 8013a58:	1ac2      	subs	r2, r0, r3
 8013a5a:	bf1c      	itt	ne
 8013a5c:	1a1b      	subne	r3, r3, r0
 8013a5e:	50a3      	strne	r3, [r4, r2]
 8013a60:	e7af      	b.n	80139c2 <_malloc_r+0x22>
 8013a62:	6862      	ldr	r2, [r4, #4]
 8013a64:	42a3      	cmp	r3, r4
 8013a66:	bf0c      	ite	eq
 8013a68:	f8c8 2000 	streq.w	r2, [r8]
 8013a6c:	605a      	strne	r2, [r3, #4]
 8013a6e:	e7eb      	b.n	8013a48 <_malloc_r+0xa8>
 8013a70:	4623      	mov	r3, r4
 8013a72:	6864      	ldr	r4, [r4, #4]
 8013a74:	e7ae      	b.n	80139d4 <_malloc_r+0x34>
 8013a76:	463c      	mov	r4, r7
 8013a78:	687f      	ldr	r7, [r7, #4]
 8013a7a:	e7b6      	b.n	80139ea <_malloc_r+0x4a>
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	42a3      	cmp	r3, r4
 8013a82:	d1fb      	bne.n	8013a7c <_malloc_r+0xdc>
 8013a84:	2300      	movs	r3, #0
 8013a86:	6053      	str	r3, [r2, #4]
 8013a88:	e7de      	b.n	8013a48 <_malloc_r+0xa8>
 8013a8a:	230c      	movs	r3, #12
 8013a8c:	6033      	str	r3, [r6, #0]
 8013a8e:	4630      	mov	r0, r6
 8013a90:	f000 f80c 	bl	8013aac <__malloc_unlock>
 8013a94:	e794      	b.n	80139c0 <_malloc_r+0x20>
 8013a96:	6005      	str	r5, [r0, #0]
 8013a98:	e7d6      	b.n	8013a48 <_malloc_r+0xa8>
 8013a9a:	bf00      	nop
 8013a9c:	200024c8 	.word	0x200024c8

08013aa0 <__malloc_lock>:
 8013aa0:	4801      	ldr	r0, [pc, #4]	@ (8013aa8 <__malloc_lock+0x8>)
 8013aa2:	f7ff b8ac 	b.w	8012bfe <__retarget_lock_acquire_recursive>
 8013aa6:	bf00      	nop
 8013aa8:	200024c0 	.word	0x200024c0

08013aac <__malloc_unlock>:
 8013aac:	4801      	ldr	r0, [pc, #4]	@ (8013ab4 <__malloc_unlock+0x8>)
 8013aae:	f7ff b8a7 	b.w	8012c00 <__retarget_lock_release_recursive>
 8013ab2:	bf00      	nop
 8013ab4:	200024c0 	.word	0x200024c0

08013ab8 <_Balloc>:
 8013ab8:	b570      	push	{r4, r5, r6, lr}
 8013aba:	69c6      	ldr	r6, [r0, #28]
 8013abc:	4604      	mov	r4, r0
 8013abe:	460d      	mov	r5, r1
 8013ac0:	b976      	cbnz	r6, 8013ae0 <_Balloc+0x28>
 8013ac2:	2010      	movs	r0, #16
 8013ac4:	f7ff ff42 	bl	801394c <malloc>
 8013ac8:	4602      	mov	r2, r0
 8013aca:	61e0      	str	r0, [r4, #28]
 8013acc:	b920      	cbnz	r0, 8013ad8 <_Balloc+0x20>
 8013ace:	4b18      	ldr	r3, [pc, #96]	@ (8013b30 <_Balloc+0x78>)
 8013ad0:	4818      	ldr	r0, [pc, #96]	@ (8013b34 <_Balloc+0x7c>)
 8013ad2:	216b      	movs	r1, #107	@ 0x6b
 8013ad4:	f000 fe38 	bl	8014748 <__assert_func>
 8013ad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013adc:	6006      	str	r6, [r0, #0]
 8013ade:	60c6      	str	r6, [r0, #12]
 8013ae0:	69e6      	ldr	r6, [r4, #28]
 8013ae2:	68f3      	ldr	r3, [r6, #12]
 8013ae4:	b183      	cbz	r3, 8013b08 <_Balloc+0x50>
 8013ae6:	69e3      	ldr	r3, [r4, #28]
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013aee:	b9b8      	cbnz	r0, 8013b20 <_Balloc+0x68>
 8013af0:	2101      	movs	r1, #1
 8013af2:	fa01 f605 	lsl.w	r6, r1, r5
 8013af6:	1d72      	adds	r2, r6, #5
 8013af8:	0092      	lsls	r2, r2, #2
 8013afa:	4620      	mov	r0, r4
 8013afc:	f000 fe42 	bl	8014784 <_calloc_r>
 8013b00:	b160      	cbz	r0, 8013b1c <_Balloc+0x64>
 8013b02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b06:	e00e      	b.n	8013b26 <_Balloc+0x6e>
 8013b08:	2221      	movs	r2, #33	@ 0x21
 8013b0a:	2104      	movs	r1, #4
 8013b0c:	4620      	mov	r0, r4
 8013b0e:	f000 fe39 	bl	8014784 <_calloc_r>
 8013b12:	69e3      	ldr	r3, [r4, #28]
 8013b14:	60f0      	str	r0, [r6, #12]
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d1e4      	bne.n	8013ae6 <_Balloc+0x2e>
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}
 8013b20:	6802      	ldr	r2, [r0, #0]
 8013b22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b26:	2300      	movs	r3, #0
 8013b28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b2c:	e7f7      	b.n	8013b1e <_Balloc+0x66>
 8013b2e:	bf00      	nop
 8013b30:	08014b95 	.word	0x08014b95
 8013b34:	08014c15 	.word	0x08014c15

08013b38 <_Bfree>:
 8013b38:	b570      	push	{r4, r5, r6, lr}
 8013b3a:	69c6      	ldr	r6, [r0, #28]
 8013b3c:	4605      	mov	r5, r0
 8013b3e:	460c      	mov	r4, r1
 8013b40:	b976      	cbnz	r6, 8013b60 <_Bfree+0x28>
 8013b42:	2010      	movs	r0, #16
 8013b44:	f7ff ff02 	bl	801394c <malloc>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	61e8      	str	r0, [r5, #28]
 8013b4c:	b920      	cbnz	r0, 8013b58 <_Bfree+0x20>
 8013b4e:	4b09      	ldr	r3, [pc, #36]	@ (8013b74 <_Bfree+0x3c>)
 8013b50:	4809      	ldr	r0, [pc, #36]	@ (8013b78 <_Bfree+0x40>)
 8013b52:	218f      	movs	r1, #143	@ 0x8f
 8013b54:	f000 fdf8 	bl	8014748 <__assert_func>
 8013b58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b5c:	6006      	str	r6, [r0, #0]
 8013b5e:	60c6      	str	r6, [r0, #12]
 8013b60:	b13c      	cbz	r4, 8013b72 <_Bfree+0x3a>
 8013b62:	69eb      	ldr	r3, [r5, #28]
 8013b64:	6862      	ldr	r2, [r4, #4]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b6c:	6021      	str	r1, [r4, #0]
 8013b6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b72:	bd70      	pop	{r4, r5, r6, pc}
 8013b74:	08014b95 	.word	0x08014b95
 8013b78:	08014c15 	.word	0x08014c15

08013b7c <__multadd>:
 8013b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b80:	690d      	ldr	r5, [r1, #16]
 8013b82:	4607      	mov	r7, r0
 8013b84:	460c      	mov	r4, r1
 8013b86:	461e      	mov	r6, r3
 8013b88:	f101 0c14 	add.w	ip, r1, #20
 8013b8c:	2000      	movs	r0, #0
 8013b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8013b92:	b299      	uxth	r1, r3
 8013b94:	fb02 6101 	mla	r1, r2, r1, r6
 8013b98:	0c1e      	lsrs	r6, r3, #16
 8013b9a:	0c0b      	lsrs	r3, r1, #16
 8013b9c:	fb02 3306 	mla	r3, r2, r6, r3
 8013ba0:	b289      	uxth	r1, r1
 8013ba2:	3001      	adds	r0, #1
 8013ba4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ba8:	4285      	cmp	r5, r0
 8013baa:	f84c 1b04 	str.w	r1, [ip], #4
 8013bae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bb2:	dcec      	bgt.n	8013b8e <__multadd+0x12>
 8013bb4:	b30e      	cbz	r6, 8013bfa <__multadd+0x7e>
 8013bb6:	68a3      	ldr	r3, [r4, #8]
 8013bb8:	42ab      	cmp	r3, r5
 8013bba:	dc19      	bgt.n	8013bf0 <__multadd+0x74>
 8013bbc:	6861      	ldr	r1, [r4, #4]
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	3101      	adds	r1, #1
 8013bc2:	f7ff ff79 	bl	8013ab8 <_Balloc>
 8013bc6:	4680      	mov	r8, r0
 8013bc8:	b928      	cbnz	r0, 8013bd6 <__multadd+0x5a>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8013c00 <__multadd+0x84>)
 8013bce:	480d      	ldr	r0, [pc, #52]	@ (8013c04 <__multadd+0x88>)
 8013bd0:	21ba      	movs	r1, #186	@ 0xba
 8013bd2:	f000 fdb9 	bl	8014748 <__assert_func>
 8013bd6:	6922      	ldr	r2, [r4, #16]
 8013bd8:	3202      	adds	r2, #2
 8013bda:	f104 010c 	add.w	r1, r4, #12
 8013bde:	0092      	lsls	r2, r2, #2
 8013be0:	300c      	adds	r0, #12
 8013be2:	f7ff f80e 	bl	8012c02 <memcpy>
 8013be6:	4621      	mov	r1, r4
 8013be8:	4638      	mov	r0, r7
 8013bea:	f7ff ffa5 	bl	8013b38 <_Bfree>
 8013bee:	4644      	mov	r4, r8
 8013bf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013bf4:	3501      	adds	r5, #1
 8013bf6:	615e      	str	r6, [r3, #20]
 8013bf8:	6125      	str	r5, [r4, #16]
 8013bfa:	4620      	mov	r0, r4
 8013bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c00:	08014c04 	.word	0x08014c04
 8013c04:	08014c15 	.word	0x08014c15

08013c08 <__hi0bits>:
 8013c08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	bf36      	itet	cc
 8013c10:	0403      	lslcc	r3, r0, #16
 8013c12:	2000      	movcs	r0, #0
 8013c14:	2010      	movcc	r0, #16
 8013c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013c1a:	bf3c      	itt	cc
 8013c1c:	021b      	lslcc	r3, r3, #8
 8013c1e:	3008      	addcc	r0, #8
 8013c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c24:	bf3c      	itt	cc
 8013c26:	011b      	lslcc	r3, r3, #4
 8013c28:	3004      	addcc	r0, #4
 8013c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c2e:	bf3c      	itt	cc
 8013c30:	009b      	lslcc	r3, r3, #2
 8013c32:	3002      	addcc	r0, #2
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	db05      	blt.n	8013c44 <__hi0bits+0x3c>
 8013c38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013c3c:	f100 0001 	add.w	r0, r0, #1
 8013c40:	bf08      	it	eq
 8013c42:	2020      	moveq	r0, #32
 8013c44:	4770      	bx	lr

08013c46 <__lo0bits>:
 8013c46:	6803      	ldr	r3, [r0, #0]
 8013c48:	4602      	mov	r2, r0
 8013c4a:	f013 0007 	ands.w	r0, r3, #7
 8013c4e:	d00b      	beq.n	8013c68 <__lo0bits+0x22>
 8013c50:	07d9      	lsls	r1, r3, #31
 8013c52:	d421      	bmi.n	8013c98 <__lo0bits+0x52>
 8013c54:	0798      	lsls	r0, r3, #30
 8013c56:	bf49      	itett	mi
 8013c58:	085b      	lsrmi	r3, r3, #1
 8013c5a:	089b      	lsrpl	r3, r3, #2
 8013c5c:	2001      	movmi	r0, #1
 8013c5e:	6013      	strmi	r3, [r2, #0]
 8013c60:	bf5c      	itt	pl
 8013c62:	6013      	strpl	r3, [r2, #0]
 8013c64:	2002      	movpl	r0, #2
 8013c66:	4770      	bx	lr
 8013c68:	b299      	uxth	r1, r3
 8013c6a:	b909      	cbnz	r1, 8013c70 <__lo0bits+0x2a>
 8013c6c:	0c1b      	lsrs	r3, r3, #16
 8013c6e:	2010      	movs	r0, #16
 8013c70:	b2d9      	uxtb	r1, r3
 8013c72:	b909      	cbnz	r1, 8013c78 <__lo0bits+0x32>
 8013c74:	3008      	adds	r0, #8
 8013c76:	0a1b      	lsrs	r3, r3, #8
 8013c78:	0719      	lsls	r1, r3, #28
 8013c7a:	bf04      	itt	eq
 8013c7c:	091b      	lsreq	r3, r3, #4
 8013c7e:	3004      	addeq	r0, #4
 8013c80:	0799      	lsls	r1, r3, #30
 8013c82:	bf04      	itt	eq
 8013c84:	089b      	lsreq	r3, r3, #2
 8013c86:	3002      	addeq	r0, #2
 8013c88:	07d9      	lsls	r1, r3, #31
 8013c8a:	d403      	bmi.n	8013c94 <__lo0bits+0x4e>
 8013c8c:	085b      	lsrs	r3, r3, #1
 8013c8e:	f100 0001 	add.w	r0, r0, #1
 8013c92:	d003      	beq.n	8013c9c <__lo0bits+0x56>
 8013c94:	6013      	str	r3, [r2, #0]
 8013c96:	4770      	bx	lr
 8013c98:	2000      	movs	r0, #0
 8013c9a:	4770      	bx	lr
 8013c9c:	2020      	movs	r0, #32
 8013c9e:	4770      	bx	lr

08013ca0 <__i2b>:
 8013ca0:	b510      	push	{r4, lr}
 8013ca2:	460c      	mov	r4, r1
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	f7ff ff07 	bl	8013ab8 <_Balloc>
 8013caa:	4602      	mov	r2, r0
 8013cac:	b928      	cbnz	r0, 8013cba <__i2b+0x1a>
 8013cae:	4b05      	ldr	r3, [pc, #20]	@ (8013cc4 <__i2b+0x24>)
 8013cb0:	4805      	ldr	r0, [pc, #20]	@ (8013cc8 <__i2b+0x28>)
 8013cb2:	f240 1145 	movw	r1, #325	@ 0x145
 8013cb6:	f000 fd47 	bl	8014748 <__assert_func>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	6144      	str	r4, [r0, #20]
 8013cbe:	6103      	str	r3, [r0, #16]
 8013cc0:	bd10      	pop	{r4, pc}
 8013cc2:	bf00      	nop
 8013cc4:	08014c04 	.word	0x08014c04
 8013cc8:	08014c15 	.word	0x08014c15

08013ccc <__multiply>:
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	4614      	mov	r4, r2
 8013cd2:	690a      	ldr	r2, [r1, #16]
 8013cd4:	6923      	ldr	r3, [r4, #16]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	bfa8      	it	ge
 8013cda:	4623      	movge	r3, r4
 8013cdc:	460f      	mov	r7, r1
 8013cde:	bfa4      	itt	ge
 8013ce0:	460c      	movge	r4, r1
 8013ce2:	461f      	movge	r7, r3
 8013ce4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013ce8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013cec:	68a3      	ldr	r3, [r4, #8]
 8013cee:	6861      	ldr	r1, [r4, #4]
 8013cf0:	eb0a 0609 	add.w	r6, sl, r9
 8013cf4:	42b3      	cmp	r3, r6
 8013cf6:	b085      	sub	sp, #20
 8013cf8:	bfb8      	it	lt
 8013cfa:	3101      	addlt	r1, #1
 8013cfc:	f7ff fedc 	bl	8013ab8 <_Balloc>
 8013d00:	b930      	cbnz	r0, 8013d10 <__multiply+0x44>
 8013d02:	4602      	mov	r2, r0
 8013d04:	4b44      	ldr	r3, [pc, #272]	@ (8013e18 <__multiply+0x14c>)
 8013d06:	4845      	ldr	r0, [pc, #276]	@ (8013e1c <__multiply+0x150>)
 8013d08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013d0c:	f000 fd1c 	bl	8014748 <__assert_func>
 8013d10:	f100 0514 	add.w	r5, r0, #20
 8013d14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d18:	462b      	mov	r3, r5
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	4543      	cmp	r3, r8
 8013d1e:	d321      	bcc.n	8013d64 <__multiply+0x98>
 8013d20:	f107 0114 	add.w	r1, r7, #20
 8013d24:	f104 0214 	add.w	r2, r4, #20
 8013d28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013d2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013d30:	9302      	str	r3, [sp, #8]
 8013d32:	1b13      	subs	r3, r2, r4
 8013d34:	3b15      	subs	r3, #21
 8013d36:	f023 0303 	bic.w	r3, r3, #3
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	f104 0715 	add.w	r7, r4, #21
 8013d40:	42ba      	cmp	r2, r7
 8013d42:	bf38      	it	cc
 8013d44:	2304      	movcc	r3, #4
 8013d46:	9301      	str	r3, [sp, #4]
 8013d48:	9b02      	ldr	r3, [sp, #8]
 8013d4a:	9103      	str	r1, [sp, #12]
 8013d4c:	428b      	cmp	r3, r1
 8013d4e:	d80c      	bhi.n	8013d6a <__multiply+0x9e>
 8013d50:	2e00      	cmp	r6, #0
 8013d52:	dd03      	ble.n	8013d5c <__multiply+0x90>
 8013d54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d05b      	beq.n	8013e14 <__multiply+0x148>
 8013d5c:	6106      	str	r6, [r0, #16]
 8013d5e:	b005      	add	sp, #20
 8013d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d64:	f843 2b04 	str.w	r2, [r3], #4
 8013d68:	e7d8      	b.n	8013d1c <__multiply+0x50>
 8013d6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013d6e:	f1ba 0f00 	cmp.w	sl, #0
 8013d72:	d024      	beq.n	8013dbe <__multiply+0xf2>
 8013d74:	f104 0e14 	add.w	lr, r4, #20
 8013d78:	46a9      	mov	r9, r5
 8013d7a:	f04f 0c00 	mov.w	ip, #0
 8013d7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013d82:	f8d9 3000 	ldr.w	r3, [r9]
 8013d86:	fa1f fb87 	uxth.w	fp, r7
 8013d8a:	b29b      	uxth	r3, r3
 8013d8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013d90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013d94:	f8d9 7000 	ldr.w	r7, [r9]
 8013d98:	4463      	add	r3, ip
 8013d9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8013da2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013dac:	4572      	cmp	r2, lr
 8013dae:	f849 3b04 	str.w	r3, [r9], #4
 8013db2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013db6:	d8e2      	bhi.n	8013d7e <__multiply+0xb2>
 8013db8:	9b01      	ldr	r3, [sp, #4]
 8013dba:	f845 c003 	str.w	ip, [r5, r3]
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013dc4:	3104      	adds	r1, #4
 8013dc6:	f1b9 0f00 	cmp.w	r9, #0
 8013dca:	d021      	beq.n	8013e10 <__multiply+0x144>
 8013dcc:	682b      	ldr	r3, [r5, #0]
 8013dce:	f104 0c14 	add.w	ip, r4, #20
 8013dd2:	46ae      	mov	lr, r5
 8013dd4:	f04f 0a00 	mov.w	sl, #0
 8013dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8013ddc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013de0:	fb09 770b 	mla	r7, r9, fp, r7
 8013de4:	4457      	add	r7, sl
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013dec:	f84e 3b04 	str.w	r3, [lr], #4
 8013df0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013df4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013df8:	f8be 3000 	ldrh.w	r3, [lr]
 8013dfc:	fb09 330a 	mla	r3, r9, sl, r3
 8013e00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013e04:	4562      	cmp	r2, ip
 8013e06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e0a:	d8e5      	bhi.n	8013dd8 <__multiply+0x10c>
 8013e0c:	9f01      	ldr	r7, [sp, #4]
 8013e0e:	51eb      	str	r3, [r5, r7]
 8013e10:	3504      	adds	r5, #4
 8013e12:	e799      	b.n	8013d48 <__multiply+0x7c>
 8013e14:	3e01      	subs	r6, #1
 8013e16:	e79b      	b.n	8013d50 <__multiply+0x84>
 8013e18:	08014c04 	.word	0x08014c04
 8013e1c:	08014c15 	.word	0x08014c15

08013e20 <__pow5mult>:
 8013e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e24:	4615      	mov	r5, r2
 8013e26:	f012 0203 	ands.w	r2, r2, #3
 8013e2a:	4607      	mov	r7, r0
 8013e2c:	460e      	mov	r6, r1
 8013e2e:	d007      	beq.n	8013e40 <__pow5mult+0x20>
 8013e30:	4c25      	ldr	r4, [pc, #148]	@ (8013ec8 <__pow5mult+0xa8>)
 8013e32:	3a01      	subs	r2, #1
 8013e34:	2300      	movs	r3, #0
 8013e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e3a:	f7ff fe9f 	bl	8013b7c <__multadd>
 8013e3e:	4606      	mov	r6, r0
 8013e40:	10ad      	asrs	r5, r5, #2
 8013e42:	d03d      	beq.n	8013ec0 <__pow5mult+0xa0>
 8013e44:	69fc      	ldr	r4, [r7, #28]
 8013e46:	b97c      	cbnz	r4, 8013e68 <__pow5mult+0x48>
 8013e48:	2010      	movs	r0, #16
 8013e4a:	f7ff fd7f 	bl	801394c <malloc>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	61f8      	str	r0, [r7, #28]
 8013e52:	b928      	cbnz	r0, 8013e60 <__pow5mult+0x40>
 8013e54:	4b1d      	ldr	r3, [pc, #116]	@ (8013ecc <__pow5mult+0xac>)
 8013e56:	481e      	ldr	r0, [pc, #120]	@ (8013ed0 <__pow5mult+0xb0>)
 8013e58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e5c:	f000 fc74 	bl	8014748 <__assert_func>
 8013e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e64:	6004      	str	r4, [r0, #0]
 8013e66:	60c4      	str	r4, [r0, #12]
 8013e68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e70:	b94c      	cbnz	r4, 8013e86 <__pow5mult+0x66>
 8013e72:	f240 2171 	movw	r1, #625	@ 0x271
 8013e76:	4638      	mov	r0, r7
 8013e78:	f7ff ff12 	bl	8013ca0 <__i2b>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e82:	4604      	mov	r4, r0
 8013e84:	6003      	str	r3, [r0, #0]
 8013e86:	f04f 0900 	mov.w	r9, #0
 8013e8a:	07eb      	lsls	r3, r5, #31
 8013e8c:	d50a      	bpl.n	8013ea4 <__pow5mult+0x84>
 8013e8e:	4631      	mov	r1, r6
 8013e90:	4622      	mov	r2, r4
 8013e92:	4638      	mov	r0, r7
 8013e94:	f7ff ff1a 	bl	8013ccc <__multiply>
 8013e98:	4631      	mov	r1, r6
 8013e9a:	4680      	mov	r8, r0
 8013e9c:	4638      	mov	r0, r7
 8013e9e:	f7ff fe4b 	bl	8013b38 <_Bfree>
 8013ea2:	4646      	mov	r6, r8
 8013ea4:	106d      	asrs	r5, r5, #1
 8013ea6:	d00b      	beq.n	8013ec0 <__pow5mult+0xa0>
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	b938      	cbnz	r0, 8013ebc <__pow5mult+0x9c>
 8013eac:	4622      	mov	r2, r4
 8013eae:	4621      	mov	r1, r4
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	f7ff ff0b 	bl	8013ccc <__multiply>
 8013eb6:	6020      	str	r0, [r4, #0]
 8013eb8:	f8c0 9000 	str.w	r9, [r0]
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	e7e4      	b.n	8013e8a <__pow5mult+0x6a>
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ec6:	bf00      	nop
 8013ec8:	08014c70 	.word	0x08014c70
 8013ecc:	08014b95 	.word	0x08014b95
 8013ed0:	08014c15 	.word	0x08014c15

08013ed4 <__lshift>:
 8013ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ed8:	460c      	mov	r4, r1
 8013eda:	6849      	ldr	r1, [r1, #4]
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013ee2:	68a3      	ldr	r3, [r4, #8]
 8013ee4:	4607      	mov	r7, r0
 8013ee6:	4691      	mov	r9, r2
 8013ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013eec:	f108 0601 	add.w	r6, r8, #1
 8013ef0:	42b3      	cmp	r3, r6
 8013ef2:	db0b      	blt.n	8013f0c <__lshift+0x38>
 8013ef4:	4638      	mov	r0, r7
 8013ef6:	f7ff fddf 	bl	8013ab8 <_Balloc>
 8013efa:	4605      	mov	r5, r0
 8013efc:	b948      	cbnz	r0, 8013f12 <__lshift+0x3e>
 8013efe:	4602      	mov	r2, r0
 8013f00:	4b28      	ldr	r3, [pc, #160]	@ (8013fa4 <__lshift+0xd0>)
 8013f02:	4829      	ldr	r0, [pc, #164]	@ (8013fa8 <__lshift+0xd4>)
 8013f04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013f08:	f000 fc1e 	bl	8014748 <__assert_func>
 8013f0c:	3101      	adds	r1, #1
 8013f0e:	005b      	lsls	r3, r3, #1
 8013f10:	e7ee      	b.n	8013ef0 <__lshift+0x1c>
 8013f12:	2300      	movs	r3, #0
 8013f14:	f100 0114 	add.w	r1, r0, #20
 8013f18:	f100 0210 	add.w	r2, r0, #16
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	4553      	cmp	r3, sl
 8013f20:	db33      	blt.n	8013f8a <__lshift+0xb6>
 8013f22:	6920      	ldr	r0, [r4, #16]
 8013f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f28:	f104 0314 	add.w	r3, r4, #20
 8013f2c:	f019 091f 	ands.w	r9, r9, #31
 8013f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f38:	d02b      	beq.n	8013f92 <__lshift+0xbe>
 8013f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8013f3e:	468a      	mov	sl, r1
 8013f40:	2200      	movs	r2, #0
 8013f42:	6818      	ldr	r0, [r3, #0]
 8013f44:	fa00 f009 	lsl.w	r0, r0, r9
 8013f48:	4310      	orrs	r0, r2
 8013f4a:	f84a 0b04 	str.w	r0, [sl], #4
 8013f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f52:	459c      	cmp	ip, r3
 8013f54:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f58:	d8f3      	bhi.n	8013f42 <__lshift+0x6e>
 8013f5a:	ebac 0304 	sub.w	r3, ip, r4
 8013f5e:	3b15      	subs	r3, #21
 8013f60:	f023 0303 	bic.w	r3, r3, #3
 8013f64:	3304      	adds	r3, #4
 8013f66:	f104 0015 	add.w	r0, r4, #21
 8013f6a:	4584      	cmp	ip, r0
 8013f6c:	bf38      	it	cc
 8013f6e:	2304      	movcc	r3, #4
 8013f70:	50ca      	str	r2, [r1, r3]
 8013f72:	b10a      	cbz	r2, 8013f78 <__lshift+0xa4>
 8013f74:	f108 0602 	add.w	r6, r8, #2
 8013f78:	3e01      	subs	r6, #1
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	612e      	str	r6, [r5, #16]
 8013f7e:	4621      	mov	r1, r4
 8013f80:	f7ff fdda 	bl	8013b38 <_Bfree>
 8013f84:	4628      	mov	r0, r5
 8013f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013f8e:	3301      	adds	r3, #1
 8013f90:	e7c5      	b.n	8013f1e <__lshift+0x4a>
 8013f92:	3904      	subs	r1, #4
 8013f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f98:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f9c:	459c      	cmp	ip, r3
 8013f9e:	d8f9      	bhi.n	8013f94 <__lshift+0xc0>
 8013fa0:	e7ea      	b.n	8013f78 <__lshift+0xa4>
 8013fa2:	bf00      	nop
 8013fa4:	08014c04 	.word	0x08014c04
 8013fa8:	08014c15 	.word	0x08014c15

08013fac <__mcmp>:
 8013fac:	690a      	ldr	r2, [r1, #16]
 8013fae:	4603      	mov	r3, r0
 8013fb0:	6900      	ldr	r0, [r0, #16]
 8013fb2:	1a80      	subs	r0, r0, r2
 8013fb4:	b530      	push	{r4, r5, lr}
 8013fb6:	d10e      	bne.n	8013fd6 <__mcmp+0x2a>
 8013fb8:	3314      	adds	r3, #20
 8013fba:	3114      	adds	r1, #20
 8013fbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013fc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013fc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013fc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013fcc:	4295      	cmp	r5, r2
 8013fce:	d003      	beq.n	8013fd8 <__mcmp+0x2c>
 8013fd0:	d205      	bcs.n	8013fde <__mcmp+0x32>
 8013fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd6:	bd30      	pop	{r4, r5, pc}
 8013fd8:	42a3      	cmp	r3, r4
 8013fda:	d3f3      	bcc.n	8013fc4 <__mcmp+0x18>
 8013fdc:	e7fb      	b.n	8013fd6 <__mcmp+0x2a>
 8013fde:	2001      	movs	r0, #1
 8013fe0:	e7f9      	b.n	8013fd6 <__mcmp+0x2a>
	...

08013fe4 <__mdiff>:
 8013fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fe8:	4689      	mov	r9, r1
 8013fea:	4606      	mov	r6, r0
 8013fec:	4611      	mov	r1, r2
 8013fee:	4648      	mov	r0, r9
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	f7ff ffdb 	bl	8013fac <__mcmp>
 8013ff6:	1e05      	subs	r5, r0, #0
 8013ff8:	d112      	bne.n	8014020 <__mdiff+0x3c>
 8013ffa:	4629      	mov	r1, r5
 8013ffc:	4630      	mov	r0, r6
 8013ffe:	f7ff fd5b 	bl	8013ab8 <_Balloc>
 8014002:	4602      	mov	r2, r0
 8014004:	b928      	cbnz	r0, 8014012 <__mdiff+0x2e>
 8014006:	4b3f      	ldr	r3, [pc, #252]	@ (8014104 <__mdiff+0x120>)
 8014008:	f240 2137 	movw	r1, #567	@ 0x237
 801400c:	483e      	ldr	r0, [pc, #248]	@ (8014108 <__mdiff+0x124>)
 801400e:	f000 fb9b 	bl	8014748 <__assert_func>
 8014012:	2301      	movs	r3, #1
 8014014:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014018:	4610      	mov	r0, r2
 801401a:	b003      	add	sp, #12
 801401c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014020:	bfbc      	itt	lt
 8014022:	464b      	movlt	r3, r9
 8014024:	46a1      	movlt	r9, r4
 8014026:	4630      	mov	r0, r6
 8014028:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801402c:	bfba      	itte	lt
 801402e:	461c      	movlt	r4, r3
 8014030:	2501      	movlt	r5, #1
 8014032:	2500      	movge	r5, #0
 8014034:	f7ff fd40 	bl	8013ab8 <_Balloc>
 8014038:	4602      	mov	r2, r0
 801403a:	b918      	cbnz	r0, 8014044 <__mdiff+0x60>
 801403c:	4b31      	ldr	r3, [pc, #196]	@ (8014104 <__mdiff+0x120>)
 801403e:	f240 2145 	movw	r1, #581	@ 0x245
 8014042:	e7e3      	b.n	801400c <__mdiff+0x28>
 8014044:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014048:	6926      	ldr	r6, [r4, #16]
 801404a:	60c5      	str	r5, [r0, #12]
 801404c:	f109 0310 	add.w	r3, r9, #16
 8014050:	f109 0514 	add.w	r5, r9, #20
 8014054:	f104 0e14 	add.w	lr, r4, #20
 8014058:	f100 0b14 	add.w	fp, r0, #20
 801405c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014060:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014064:	9301      	str	r3, [sp, #4]
 8014066:	46d9      	mov	r9, fp
 8014068:	f04f 0c00 	mov.w	ip, #0
 801406c:	9b01      	ldr	r3, [sp, #4]
 801406e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014072:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014076:	9301      	str	r3, [sp, #4]
 8014078:	fa1f f38a 	uxth.w	r3, sl
 801407c:	4619      	mov	r1, r3
 801407e:	b283      	uxth	r3, r0
 8014080:	1acb      	subs	r3, r1, r3
 8014082:	0c00      	lsrs	r0, r0, #16
 8014084:	4463      	add	r3, ip
 8014086:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801408a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801408e:	b29b      	uxth	r3, r3
 8014090:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014094:	4576      	cmp	r6, lr
 8014096:	f849 3b04 	str.w	r3, [r9], #4
 801409a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801409e:	d8e5      	bhi.n	801406c <__mdiff+0x88>
 80140a0:	1b33      	subs	r3, r6, r4
 80140a2:	3b15      	subs	r3, #21
 80140a4:	f023 0303 	bic.w	r3, r3, #3
 80140a8:	3415      	adds	r4, #21
 80140aa:	3304      	adds	r3, #4
 80140ac:	42a6      	cmp	r6, r4
 80140ae:	bf38      	it	cc
 80140b0:	2304      	movcc	r3, #4
 80140b2:	441d      	add	r5, r3
 80140b4:	445b      	add	r3, fp
 80140b6:	461e      	mov	r6, r3
 80140b8:	462c      	mov	r4, r5
 80140ba:	4544      	cmp	r4, r8
 80140bc:	d30e      	bcc.n	80140dc <__mdiff+0xf8>
 80140be:	f108 0103 	add.w	r1, r8, #3
 80140c2:	1b49      	subs	r1, r1, r5
 80140c4:	f021 0103 	bic.w	r1, r1, #3
 80140c8:	3d03      	subs	r5, #3
 80140ca:	45a8      	cmp	r8, r5
 80140cc:	bf38      	it	cc
 80140ce:	2100      	movcc	r1, #0
 80140d0:	440b      	add	r3, r1
 80140d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140d6:	b191      	cbz	r1, 80140fe <__mdiff+0x11a>
 80140d8:	6117      	str	r7, [r2, #16]
 80140da:	e79d      	b.n	8014018 <__mdiff+0x34>
 80140dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80140e0:	46e6      	mov	lr, ip
 80140e2:	0c08      	lsrs	r0, r1, #16
 80140e4:	fa1c fc81 	uxtah	ip, ip, r1
 80140e8:	4471      	add	r1, lr
 80140ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80140ee:	b289      	uxth	r1, r1
 80140f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80140f4:	f846 1b04 	str.w	r1, [r6], #4
 80140f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140fc:	e7dd      	b.n	80140ba <__mdiff+0xd6>
 80140fe:	3f01      	subs	r7, #1
 8014100:	e7e7      	b.n	80140d2 <__mdiff+0xee>
 8014102:	bf00      	nop
 8014104:	08014c04 	.word	0x08014c04
 8014108:	08014c15 	.word	0x08014c15

0801410c <__d2b>:
 801410c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014110:	460f      	mov	r7, r1
 8014112:	2101      	movs	r1, #1
 8014114:	ec59 8b10 	vmov	r8, r9, d0
 8014118:	4616      	mov	r6, r2
 801411a:	f7ff fccd 	bl	8013ab8 <_Balloc>
 801411e:	4604      	mov	r4, r0
 8014120:	b930      	cbnz	r0, 8014130 <__d2b+0x24>
 8014122:	4602      	mov	r2, r0
 8014124:	4b23      	ldr	r3, [pc, #140]	@ (80141b4 <__d2b+0xa8>)
 8014126:	4824      	ldr	r0, [pc, #144]	@ (80141b8 <__d2b+0xac>)
 8014128:	f240 310f 	movw	r1, #783	@ 0x30f
 801412c:	f000 fb0c 	bl	8014748 <__assert_func>
 8014130:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014134:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014138:	b10d      	cbz	r5, 801413e <__d2b+0x32>
 801413a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	f1b8 0300 	subs.w	r3, r8, #0
 8014144:	d023      	beq.n	801418e <__d2b+0x82>
 8014146:	4668      	mov	r0, sp
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	f7ff fd7c 	bl	8013c46 <__lo0bits>
 801414e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014152:	b1d0      	cbz	r0, 801418a <__d2b+0x7e>
 8014154:	f1c0 0320 	rsb	r3, r0, #32
 8014158:	fa02 f303 	lsl.w	r3, r2, r3
 801415c:	430b      	orrs	r3, r1
 801415e:	40c2      	lsrs	r2, r0
 8014160:	6163      	str	r3, [r4, #20]
 8014162:	9201      	str	r2, [sp, #4]
 8014164:	9b01      	ldr	r3, [sp, #4]
 8014166:	61a3      	str	r3, [r4, #24]
 8014168:	2b00      	cmp	r3, #0
 801416a:	bf0c      	ite	eq
 801416c:	2201      	moveq	r2, #1
 801416e:	2202      	movne	r2, #2
 8014170:	6122      	str	r2, [r4, #16]
 8014172:	b1a5      	cbz	r5, 801419e <__d2b+0x92>
 8014174:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014178:	4405      	add	r5, r0
 801417a:	603d      	str	r5, [r7, #0]
 801417c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014180:	6030      	str	r0, [r6, #0]
 8014182:	4620      	mov	r0, r4
 8014184:	b003      	add	sp, #12
 8014186:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801418a:	6161      	str	r1, [r4, #20]
 801418c:	e7ea      	b.n	8014164 <__d2b+0x58>
 801418e:	a801      	add	r0, sp, #4
 8014190:	f7ff fd59 	bl	8013c46 <__lo0bits>
 8014194:	9b01      	ldr	r3, [sp, #4]
 8014196:	6163      	str	r3, [r4, #20]
 8014198:	3020      	adds	r0, #32
 801419a:	2201      	movs	r2, #1
 801419c:	e7e8      	b.n	8014170 <__d2b+0x64>
 801419e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80141a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80141a6:	6038      	str	r0, [r7, #0]
 80141a8:	6918      	ldr	r0, [r3, #16]
 80141aa:	f7ff fd2d 	bl	8013c08 <__hi0bits>
 80141ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80141b2:	e7e5      	b.n	8014180 <__d2b+0x74>
 80141b4:	08014c04 	.word	0x08014c04
 80141b8:	08014c15 	.word	0x08014c15

080141bc <__sfputc_r>:
 80141bc:	6893      	ldr	r3, [r2, #8]
 80141be:	3b01      	subs	r3, #1
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	b410      	push	{r4}
 80141c4:	6093      	str	r3, [r2, #8]
 80141c6:	da08      	bge.n	80141da <__sfputc_r+0x1e>
 80141c8:	6994      	ldr	r4, [r2, #24]
 80141ca:	42a3      	cmp	r3, r4
 80141cc:	db01      	blt.n	80141d2 <__sfputc_r+0x16>
 80141ce:	290a      	cmp	r1, #10
 80141d0:	d103      	bne.n	80141da <__sfputc_r+0x1e>
 80141d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141d6:	f000 ba13 	b.w	8014600 <__swbuf_r>
 80141da:	6813      	ldr	r3, [r2, #0]
 80141dc:	1c58      	adds	r0, r3, #1
 80141de:	6010      	str	r0, [r2, #0]
 80141e0:	7019      	strb	r1, [r3, #0]
 80141e2:	4608      	mov	r0, r1
 80141e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141e8:	4770      	bx	lr

080141ea <__sfputs_r>:
 80141ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ec:	4606      	mov	r6, r0
 80141ee:	460f      	mov	r7, r1
 80141f0:	4614      	mov	r4, r2
 80141f2:	18d5      	adds	r5, r2, r3
 80141f4:	42ac      	cmp	r4, r5
 80141f6:	d101      	bne.n	80141fc <__sfputs_r+0x12>
 80141f8:	2000      	movs	r0, #0
 80141fa:	e007      	b.n	801420c <__sfputs_r+0x22>
 80141fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014200:	463a      	mov	r2, r7
 8014202:	4630      	mov	r0, r6
 8014204:	f7ff ffda 	bl	80141bc <__sfputc_r>
 8014208:	1c43      	adds	r3, r0, #1
 801420a:	d1f3      	bne.n	80141f4 <__sfputs_r+0xa>
 801420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014210 <_vfiprintf_r>:
 8014210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014214:	460d      	mov	r5, r1
 8014216:	b09d      	sub	sp, #116	@ 0x74
 8014218:	4614      	mov	r4, r2
 801421a:	4698      	mov	r8, r3
 801421c:	4606      	mov	r6, r0
 801421e:	b118      	cbz	r0, 8014228 <_vfiprintf_r+0x18>
 8014220:	6a03      	ldr	r3, [r0, #32]
 8014222:	b90b      	cbnz	r3, 8014228 <_vfiprintf_r+0x18>
 8014224:	f7fe fbda 	bl	80129dc <__sinit>
 8014228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801422a:	07d9      	lsls	r1, r3, #31
 801422c:	d405      	bmi.n	801423a <_vfiprintf_r+0x2a>
 801422e:	89ab      	ldrh	r3, [r5, #12]
 8014230:	059a      	lsls	r2, r3, #22
 8014232:	d402      	bmi.n	801423a <_vfiprintf_r+0x2a>
 8014234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014236:	f7fe fce2 	bl	8012bfe <__retarget_lock_acquire_recursive>
 801423a:	89ab      	ldrh	r3, [r5, #12]
 801423c:	071b      	lsls	r3, r3, #28
 801423e:	d501      	bpl.n	8014244 <_vfiprintf_r+0x34>
 8014240:	692b      	ldr	r3, [r5, #16]
 8014242:	b99b      	cbnz	r3, 801426c <_vfiprintf_r+0x5c>
 8014244:	4629      	mov	r1, r5
 8014246:	4630      	mov	r0, r6
 8014248:	f000 fa18 	bl	801467c <__swsetup_r>
 801424c:	b170      	cbz	r0, 801426c <_vfiprintf_r+0x5c>
 801424e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014250:	07dc      	lsls	r4, r3, #31
 8014252:	d504      	bpl.n	801425e <_vfiprintf_r+0x4e>
 8014254:	f04f 30ff 	mov.w	r0, #4294967295
 8014258:	b01d      	add	sp, #116	@ 0x74
 801425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801425e:	89ab      	ldrh	r3, [r5, #12]
 8014260:	0598      	lsls	r0, r3, #22
 8014262:	d4f7      	bmi.n	8014254 <_vfiprintf_r+0x44>
 8014264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014266:	f7fe fccb 	bl	8012c00 <__retarget_lock_release_recursive>
 801426a:	e7f3      	b.n	8014254 <_vfiprintf_r+0x44>
 801426c:	2300      	movs	r3, #0
 801426e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014270:	2320      	movs	r3, #32
 8014272:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014276:	f8cd 800c 	str.w	r8, [sp, #12]
 801427a:	2330      	movs	r3, #48	@ 0x30
 801427c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801442c <_vfiprintf_r+0x21c>
 8014280:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014284:	f04f 0901 	mov.w	r9, #1
 8014288:	4623      	mov	r3, r4
 801428a:	469a      	mov	sl, r3
 801428c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014290:	b10a      	cbz	r2, 8014296 <_vfiprintf_r+0x86>
 8014292:	2a25      	cmp	r2, #37	@ 0x25
 8014294:	d1f9      	bne.n	801428a <_vfiprintf_r+0x7a>
 8014296:	ebba 0b04 	subs.w	fp, sl, r4
 801429a:	d00b      	beq.n	80142b4 <_vfiprintf_r+0xa4>
 801429c:	465b      	mov	r3, fp
 801429e:	4622      	mov	r2, r4
 80142a0:	4629      	mov	r1, r5
 80142a2:	4630      	mov	r0, r6
 80142a4:	f7ff ffa1 	bl	80141ea <__sfputs_r>
 80142a8:	3001      	adds	r0, #1
 80142aa:	f000 80a7 	beq.w	80143fc <_vfiprintf_r+0x1ec>
 80142ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142b0:	445a      	add	r2, fp
 80142b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80142b4:	f89a 3000 	ldrb.w	r3, [sl]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f000 809f 	beq.w	80143fc <_vfiprintf_r+0x1ec>
 80142be:	2300      	movs	r3, #0
 80142c0:	f04f 32ff 	mov.w	r2, #4294967295
 80142c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142c8:	f10a 0a01 	add.w	sl, sl, #1
 80142cc:	9304      	str	r3, [sp, #16]
 80142ce:	9307      	str	r3, [sp, #28]
 80142d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80142d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80142d6:	4654      	mov	r4, sl
 80142d8:	2205      	movs	r2, #5
 80142da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142de:	4853      	ldr	r0, [pc, #332]	@ (801442c <_vfiprintf_r+0x21c>)
 80142e0:	f7eb ff4e 	bl	8000180 <memchr>
 80142e4:	9a04      	ldr	r2, [sp, #16]
 80142e6:	b9d8      	cbnz	r0, 8014320 <_vfiprintf_r+0x110>
 80142e8:	06d1      	lsls	r1, r2, #27
 80142ea:	bf44      	itt	mi
 80142ec:	2320      	movmi	r3, #32
 80142ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142f2:	0713      	lsls	r3, r2, #28
 80142f4:	bf44      	itt	mi
 80142f6:	232b      	movmi	r3, #43	@ 0x2b
 80142f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80142fc:	f89a 3000 	ldrb.w	r3, [sl]
 8014300:	2b2a      	cmp	r3, #42	@ 0x2a
 8014302:	d015      	beq.n	8014330 <_vfiprintf_r+0x120>
 8014304:	9a07      	ldr	r2, [sp, #28]
 8014306:	4654      	mov	r4, sl
 8014308:	2000      	movs	r0, #0
 801430a:	f04f 0c0a 	mov.w	ip, #10
 801430e:	4621      	mov	r1, r4
 8014310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014314:	3b30      	subs	r3, #48	@ 0x30
 8014316:	2b09      	cmp	r3, #9
 8014318:	d94b      	bls.n	80143b2 <_vfiprintf_r+0x1a2>
 801431a:	b1b0      	cbz	r0, 801434a <_vfiprintf_r+0x13a>
 801431c:	9207      	str	r2, [sp, #28]
 801431e:	e014      	b.n	801434a <_vfiprintf_r+0x13a>
 8014320:	eba0 0308 	sub.w	r3, r0, r8
 8014324:	fa09 f303 	lsl.w	r3, r9, r3
 8014328:	4313      	orrs	r3, r2
 801432a:	9304      	str	r3, [sp, #16]
 801432c:	46a2      	mov	sl, r4
 801432e:	e7d2      	b.n	80142d6 <_vfiprintf_r+0xc6>
 8014330:	9b03      	ldr	r3, [sp, #12]
 8014332:	1d19      	adds	r1, r3, #4
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	9103      	str	r1, [sp, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	bfbb      	ittet	lt
 801433c:	425b      	neglt	r3, r3
 801433e:	f042 0202 	orrlt.w	r2, r2, #2
 8014342:	9307      	strge	r3, [sp, #28]
 8014344:	9307      	strlt	r3, [sp, #28]
 8014346:	bfb8      	it	lt
 8014348:	9204      	strlt	r2, [sp, #16]
 801434a:	7823      	ldrb	r3, [r4, #0]
 801434c:	2b2e      	cmp	r3, #46	@ 0x2e
 801434e:	d10a      	bne.n	8014366 <_vfiprintf_r+0x156>
 8014350:	7863      	ldrb	r3, [r4, #1]
 8014352:	2b2a      	cmp	r3, #42	@ 0x2a
 8014354:	d132      	bne.n	80143bc <_vfiprintf_r+0x1ac>
 8014356:	9b03      	ldr	r3, [sp, #12]
 8014358:	1d1a      	adds	r2, r3, #4
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	9203      	str	r2, [sp, #12]
 801435e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014362:	3402      	adds	r4, #2
 8014364:	9305      	str	r3, [sp, #20]
 8014366:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801443c <_vfiprintf_r+0x22c>
 801436a:	7821      	ldrb	r1, [r4, #0]
 801436c:	2203      	movs	r2, #3
 801436e:	4650      	mov	r0, sl
 8014370:	f7eb ff06 	bl	8000180 <memchr>
 8014374:	b138      	cbz	r0, 8014386 <_vfiprintf_r+0x176>
 8014376:	9b04      	ldr	r3, [sp, #16]
 8014378:	eba0 000a 	sub.w	r0, r0, sl
 801437c:	2240      	movs	r2, #64	@ 0x40
 801437e:	4082      	lsls	r2, r0
 8014380:	4313      	orrs	r3, r2
 8014382:	3401      	adds	r4, #1
 8014384:	9304      	str	r3, [sp, #16]
 8014386:	f814 1b01 	ldrb.w	r1, [r4], #1
 801438a:	4829      	ldr	r0, [pc, #164]	@ (8014430 <_vfiprintf_r+0x220>)
 801438c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014390:	2206      	movs	r2, #6
 8014392:	f7eb fef5 	bl	8000180 <memchr>
 8014396:	2800      	cmp	r0, #0
 8014398:	d03f      	beq.n	801441a <_vfiprintf_r+0x20a>
 801439a:	4b26      	ldr	r3, [pc, #152]	@ (8014434 <_vfiprintf_r+0x224>)
 801439c:	bb1b      	cbnz	r3, 80143e6 <_vfiprintf_r+0x1d6>
 801439e:	9b03      	ldr	r3, [sp, #12]
 80143a0:	3307      	adds	r3, #7
 80143a2:	f023 0307 	bic.w	r3, r3, #7
 80143a6:	3308      	adds	r3, #8
 80143a8:	9303      	str	r3, [sp, #12]
 80143aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143ac:	443b      	add	r3, r7
 80143ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80143b0:	e76a      	b.n	8014288 <_vfiprintf_r+0x78>
 80143b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80143b6:	460c      	mov	r4, r1
 80143b8:	2001      	movs	r0, #1
 80143ba:	e7a8      	b.n	801430e <_vfiprintf_r+0xfe>
 80143bc:	2300      	movs	r3, #0
 80143be:	3401      	adds	r4, #1
 80143c0:	9305      	str	r3, [sp, #20]
 80143c2:	4619      	mov	r1, r3
 80143c4:	f04f 0c0a 	mov.w	ip, #10
 80143c8:	4620      	mov	r0, r4
 80143ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143ce:	3a30      	subs	r2, #48	@ 0x30
 80143d0:	2a09      	cmp	r2, #9
 80143d2:	d903      	bls.n	80143dc <_vfiprintf_r+0x1cc>
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d0c6      	beq.n	8014366 <_vfiprintf_r+0x156>
 80143d8:	9105      	str	r1, [sp, #20]
 80143da:	e7c4      	b.n	8014366 <_vfiprintf_r+0x156>
 80143dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80143e0:	4604      	mov	r4, r0
 80143e2:	2301      	movs	r3, #1
 80143e4:	e7f0      	b.n	80143c8 <_vfiprintf_r+0x1b8>
 80143e6:	ab03      	add	r3, sp, #12
 80143e8:	9300      	str	r3, [sp, #0]
 80143ea:	462a      	mov	r2, r5
 80143ec:	4b12      	ldr	r3, [pc, #72]	@ (8014438 <_vfiprintf_r+0x228>)
 80143ee:	a904      	add	r1, sp, #16
 80143f0:	4630      	mov	r0, r6
 80143f2:	f7fd feaf 	bl	8012154 <_printf_float>
 80143f6:	4607      	mov	r7, r0
 80143f8:	1c78      	adds	r0, r7, #1
 80143fa:	d1d6      	bne.n	80143aa <_vfiprintf_r+0x19a>
 80143fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143fe:	07d9      	lsls	r1, r3, #31
 8014400:	d405      	bmi.n	801440e <_vfiprintf_r+0x1fe>
 8014402:	89ab      	ldrh	r3, [r5, #12]
 8014404:	059a      	lsls	r2, r3, #22
 8014406:	d402      	bmi.n	801440e <_vfiprintf_r+0x1fe>
 8014408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801440a:	f7fe fbf9 	bl	8012c00 <__retarget_lock_release_recursive>
 801440e:	89ab      	ldrh	r3, [r5, #12]
 8014410:	065b      	lsls	r3, r3, #25
 8014412:	f53f af1f 	bmi.w	8014254 <_vfiprintf_r+0x44>
 8014416:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014418:	e71e      	b.n	8014258 <_vfiprintf_r+0x48>
 801441a:	ab03      	add	r3, sp, #12
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	462a      	mov	r2, r5
 8014420:	4b05      	ldr	r3, [pc, #20]	@ (8014438 <_vfiprintf_r+0x228>)
 8014422:	a904      	add	r1, sp, #16
 8014424:	4630      	mov	r0, r6
 8014426:	f7fe f92d 	bl	8012684 <_printf_i>
 801442a:	e7e4      	b.n	80143f6 <_vfiprintf_r+0x1e6>
 801442c:	08014d70 	.word	0x08014d70
 8014430:	08014d7a 	.word	0x08014d7a
 8014434:	08012155 	.word	0x08012155
 8014438:	080141eb 	.word	0x080141eb
 801443c:	08014d76 	.word	0x08014d76

08014440 <__sflush_r>:
 8014440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014448:	0716      	lsls	r6, r2, #28
 801444a:	4605      	mov	r5, r0
 801444c:	460c      	mov	r4, r1
 801444e:	d454      	bmi.n	80144fa <__sflush_r+0xba>
 8014450:	684b      	ldr	r3, [r1, #4]
 8014452:	2b00      	cmp	r3, #0
 8014454:	dc02      	bgt.n	801445c <__sflush_r+0x1c>
 8014456:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014458:	2b00      	cmp	r3, #0
 801445a:	dd48      	ble.n	80144ee <__sflush_r+0xae>
 801445c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801445e:	2e00      	cmp	r6, #0
 8014460:	d045      	beq.n	80144ee <__sflush_r+0xae>
 8014462:	2300      	movs	r3, #0
 8014464:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014468:	682f      	ldr	r7, [r5, #0]
 801446a:	6a21      	ldr	r1, [r4, #32]
 801446c:	602b      	str	r3, [r5, #0]
 801446e:	d030      	beq.n	80144d2 <__sflush_r+0x92>
 8014470:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014472:	89a3      	ldrh	r3, [r4, #12]
 8014474:	0759      	lsls	r1, r3, #29
 8014476:	d505      	bpl.n	8014484 <__sflush_r+0x44>
 8014478:	6863      	ldr	r3, [r4, #4]
 801447a:	1ad2      	subs	r2, r2, r3
 801447c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801447e:	b10b      	cbz	r3, 8014484 <__sflush_r+0x44>
 8014480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014482:	1ad2      	subs	r2, r2, r3
 8014484:	2300      	movs	r3, #0
 8014486:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014488:	6a21      	ldr	r1, [r4, #32]
 801448a:	4628      	mov	r0, r5
 801448c:	47b0      	blx	r6
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	89a3      	ldrh	r3, [r4, #12]
 8014492:	d106      	bne.n	80144a2 <__sflush_r+0x62>
 8014494:	6829      	ldr	r1, [r5, #0]
 8014496:	291d      	cmp	r1, #29
 8014498:	d82b      	bhi.n	80144f2 <__sflush_r+0xb2>
 801449a:	4a2a      	ldr	r2, [pc, #168]	@ (8014544 <__sflush_r+0x104>)
 801449c:	410a      	asrs	r2, r1
 801449e:	07d6      	lsls	r6, r2, #31
 80144a0:	d427      	bmi.n	80144f2 <__sflush_r+0xb2>
 80144a2:	2200      	movs	r2, #0
 80144a4:	6062      	str	r2, [r4, #4]
 80144a6:	04d9      	lsls	r1, r3, #19
 80144a8:	6922      	ldr	r2, [r4, #16]
 80144aa:	6022      	str	r2, [r4, #0]
 80144ac:	d504      	bpl.n	80144b8 <__sflush_r+0x78>
 80144ae:	1c42      	adds	r2, r0, #1
 80144b0:	d101      	bne.n	80144b6 <__sflush_r+0x76>
 80144b2:	682b      	ldr	r3, [r5, #0]
 80144b4:	b903      	cbnz	r3, 80144b8 <__sflush_r+0x78>
 80144b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80144b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80144ba:	602f      	str	r7, [r5, #0]
 80144bc:	b1b9      	cbz	r1, 80144ee <__sflush_r+0xae>
 80144be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80144c2:	4299      	cmp	r1, r3
 80144c4:	d002      	beq.n	80144cc <__sflush_r+0x8c>
 80144c6:	4628      	mov	r0, r5
 80144c8:	f7ff f9f6 	bl	80138b8 <_free_r>
 80144cc:	2300      	movs	r3, #0
 80144ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80144d0:	e00d      	b.n	80144ee <__sflush_r+0xae>
 80144d2:	2301      	movs	r3, #1
 80144d4:	4628      	mov	r0, r5
 80144d6:	47b0      	blx	r6
 80144d8:	4602      	mov	r2, r0
 80144da:	1c50      	adds	r0, r2, #1
 80144dc:	d1c9      	bne.n	8014472 <__sflush_r+0x32>
 80144de:	682b      	ldr	r3, [r5, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d0c6      	beq.n	8014472 <__sflush_r+0x32>
 80144e4:	2b1d      	cmp	r3, #29
 80144e6:	d001      	beq.n	80144ec <__sflush_r+0xac>
 80144e8:	2b16      	cmp	r3, #22
 80144ea:	d11e      	bne.n	801452a <__sflush_r+0xea>
 80144ec:	602f      	str	r7, [r5, #0]
 80144ee:	2000      	movs	r0, #0
 80144f0:	e022      	b.n	8014538 <__sflush_r+0xf8>
 80144f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80144f6:	b21b      	sxth	r3, r3
 80144f8:	e01b      	b.n	8014532 <__sflush_r+0xf2>
 80144fa:	690f      	ldr	r7, [r1, #16]
 80144fc:	2f00      	cmp	r7, #0
 80144fe:	d0f6      	beq.n	80144ee <__sflush_r+0xae>
 8014500:	0793      	lsls	r3, r2, #30
 8014502:	680e      	ldr	r6, [r1, #0]
 8014504:	bf08      	it	eq
 8014506:	694b      	ldreq	r3, [r1, #20]
 8014508:	600f      	str	r7, [r1, #0]
 801450a:	bf18      	it	ne
 801450c:	2300      	movne	r3, #0
 801450e:	eba6 0807 	sub.w	r8, r6, r7
 8014512:	608b      	str	r3, [r1, #8]
 8014514:	f1b8 0f00 	cmp.w	r8, #0
 8014518:	dde9      	ble.n	80144ee <__sflush_r+0xae>
 801451a:	6a21      	ldr	r1, [r4, #32]
 801451c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801451e:	4643      	mov	r3, r8
 8014520:	463a      	mov	r2, r7
 8014522:	4628      	mov	r0, r5
 8014524:	47b0      	blx	r6
 8014526:	2800      	cmp	r0, #0
 8014528:	dc08      	bgt.n	801453c <__sflush_r+0xfc>
 801452a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801452e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014532:	81a3      	strh	r3, [r4, #12]
 8014534:	f04f 30ff 	mov.w	r0, #4294967295
 8014538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801453c:	4407      	add	r7, r0
 801453e:	eba8 0800 	sub.w	r8, r8, r0
 8014542:	e7e7      	b.n	8014514 <__sflush_r+0xd4>
 8014544:	dfbffffe 	.word	0xdfbffffe

08014548 <_fflush_r>:
 8014548:	b538      	push	{r3, r4, r5, lr}
 801454a:	690b      	ldr	r3, [r1, #16]
 801454c:	4605      	mov	r5, r0
 801454e:	460c      	mov	r4, r1
 8014550:	b913      	cbnz	r3, 8014558 <_fflush_r+0x10>
 8014552:	2500      	movs	r5, #0
 8014554:	4628      	mov	r0, r5
 8014556:	bd38      	pop	{r3, r4, r5, pc}
 8014558:	b118      	cbz	r0, 8014562 <_fflush_r+0x1a>
 801455a:	6a03      	ldr	r3, [r0, #32]
 801455c:	b90b      	cbnz	r3, 8014562 <_fflush_r+0x1a>
 801455e:	f7fe fa3d 	bl	80129dc <__sinit>
 8014562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d0f3      	beq.n	8014552 <_fflush_r+0xa>
 801456a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801456c:	07d0      	lsls	r0, r2, #31
 801456e:	d404      	bmi.n	801457a <_fflush_r+0x32>
 8014570:	0599      	lsls	r1, r3, #22
 8014572:	d402      	bmi.n	801457a <_fflush_r+0x32>
 8014574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014576:	f7fe fb42 	bl	8012bfe <__retarget_lock_acquire_recursive>
 801457a:	4628      	mov	r0, r5
 801457c:	4621      	mov	r1, r4
 801457e:	f7ff ff5f 	bl	8014440 <__sflush_r>
 8014582:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014584:	07da      	lsls	r2, r3, #31
 8014586:	4605      	mov	r5, r0
 8014588:	d4e4      	bmi.n	8014554 <_fflush_r+0xc>
 801458a:	89a3      	ldrh	r3, [r4, #12]
 801458c:	059b      	lsls	r3, r3, #22
 801458e:	d4e1      	bmi.n	8014554 <_fflush_r+0xc>
 8014590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014592:	f7fe fb35 	bl	8012c00 <__retarget_lock_release_recursive>
 8014596:	e7dd      	b.n	8014554 <_fflush_r+0xc>

08014598 <_putc_r>:
 8014598:	b570      	push	{r4, r5, r6, lr}
 801459a:	460d      	mov	r5, r1
 801459c:	4614      	mov	r4, r2
 801459e:	4606      	mov	r6, r0
 80145a0:	b118      	cbz	r0, 80145aa <_putc_r+0x12>
 80145a2:	6a03      	ldr	r3, [r0, #32]
 80145a4:	b90b      	cbnz	r3, 80145aa <_putc_r+0x12>
 80145a6:	f7fe fa19 	bl	80129dc <__sinit>
 80145aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145ac:	07d8      	lsls	r0, r3, #31
 80145ae:	d405      	bmi.n	80145bc <_putc_r+0x24>
 80145b0:	89a3      	ldrh	r3, [r4, #12]
 80145b2:	0599      	lsls	r1, r3, #22
 80145b4:	d402      	bmi.n	80145bc <_putc_r+0x24>
 80145b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145b8:	f7fe fb21 	bl	8012bfe <__retarget_lock_acquire_recursive>
 80145bc:	68a3      	ldr	r3, [r4, #8]
 80145be:	3b01      	subs	r3, #1
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	60a3      	str	r3, [r4, #8]
 80145c4:	da05      	bge.n	80145d2 <_putc_r+0x3a>
 80145c6:	69a2      	ldr	r2, [r4, #24]
 80145c8:	4293      	cmp	r3, r2
 80145ca:	db12      	blt.n	80145f2 <_putc_r+0x5a>
 80145cc:	b2eb      	uxtb	r3, r5
 80145ce:	2b0a      	cmp	r3, #10
 80145d0:	d00f      	beq.n	80145f2 <_putc_r+0x5a>
 80145d2:	6823      	ldr	r3, [r4, #0]
 80145d4:	1c5a      	adds	r2, r3, #1
 80145d6:	6022      	str	r2, [r4, #0]
 80145d8:	701d      	strb	r5, [r3, #0]
 80145da:	b2ed      	uxtb	r5, r5
 80145dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80145de:	07da      	lsls	r2, r3, #31
 80145e0:	d405      	bmi.n	80145ee <_putc_r+0x56>
 80145e2:	89a3      	ldrh	r3, [r4, #12]
 80145e4:	059b      	lsls	r3, r3, #22
 80145e6:	d402      	bmi.n	80145ee <_putc_r+0x56>
 80145e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80145ea:	f7fe fb09 	bl	8012c00 <__retarget_lock_release_recursive>
 80145ee:	4628      	mov	r0, r5
 80145f0:	bd70      	pop	{r4, r5, r6, pc}
 80145f2:	4629      	mov	r1, r5
 80145f4:	4622      	mov	r2, r4
 80145f6:	4630      	mov	r0, r6
 80145f8:	f000 f802 	bl	8014600 <__swbuf_r>
 80145fc:	4605      	mov	r5, r0
 80145fe:	e7ed      	b.n	80145dc <_putc_r+0x44>

08014600 <__swbuf_r>:
 8014600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014602:	460e      	mov	r6, r1
 8014604:	4614      	mov	r4, r2
 8014606:	4605      	mov	r5, r0
 8014608:	b118      	cbz	r0, 8014612 <__swbuf_r+0x12>
 801460a:	6a03      	ldr	r3, [r0, #32]
 801460c:	b90b      	cbnz	r3, 8014612 <__swbuf_r+0x12>
 801460e:	f7fe f9e5 	bl	80129dc <__sinit>
 8014612:	69a3      	ldr	r3, [r4, #24]
 8014614:	60a3      	str	r3, [r4, #8]
 8014616:	89a3      	ldrh	r3, [r4, #12]
 8014618:	071a      	lsls	r2, r3, #28
 801461a:	d501      	bpl.n	8014620 <__swbuf_r+0x20>
 801461c:	6923      	ldr	r3, [r4, #16]
 801461e:	b943      	cbnz	r3, 8014632 <__swbuf_r+0x32>
 8014620:	4621      	mov	r1, r4
 8014622:	4628      	mov	r0, r5
 8014624:	f000 f82a 	bl	801467c <__swsetup_r>
 8014628:	b118      	cbz	r0, 8014632 <__swbuf_r+0x32>
 801462a:	f04f 37ff 	mov.w	r7, #4294967295
 801462e:	4638      	mov	r0, r7
 8014630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014632:	6823      	ldr	r3, [r4, #0]
 8014634:	6922      	ldr	r2, [r4, #16]
 8014636:	1a98      	subs	r0, r3, r2
 8014638:	6963      	ldr	r3, [r4, #20]
 801463a:	b2f6      	uxtb	r6, r6
 801463c:	4283      	cmp	r3, r0
 801463e:	4637      	mov	r7, r6
 8014640:	dc05      	bgt.n	801464e <__swbuf_r+0x4e>
 8014642:	4621      	mov	r1, r4
 8014644:	4628      	mov	r0, r5
 8014646:	f7ff ff7f 	bl	8014548 <_fflush_r>
 801464a:	2800      	cmp	r0, #0
 801464c:	d1ed      	bne.n	801462a <__swbuf_r+0x2a>
 801464e:	68a3      	ldr	r3, [r4, #8]
 8014650:	3b01      	subs	r3, #1
 8014652:	60a3      	str	r3, [r4, #8]
 8014654:	6823      	ldr	r3, [r4, #0]
 8014656:	1c5a      	adds	r2, r3, #1
 8014658:	6022      	str	r2, [r4, #0]
 801465a:	701e      	strb	r6, [r3, #0]
 801465c:	6962      	ldr	r2, [r4, #20]
 801465e:	1c43      	adds	r3, r0, #1
 8014660:	429a      	cmp	r2, r3
 8014662:	d004      	beq.n	801466e <__swbuf_r+0x6e>
 8014664:	89a3      	ldrh	r3, [r4, #12]
 8014666:	07db      	lsls	r3, r3, #31
 8014668:	d5e1      	bpl.n	801462e <__swbuf_r+0x2e>
 801466a:	2e0a      	cmp	r6, #10
 801466c:	d1df      	bne.n	801462e <__swbuf_r+0x2e>
 801466e:	4621      	mov	r1, r4
 8014670:	4628      	mov	r0, r5
 8014672:	f7ff ff69 	bl	8014548 <_fflush_r>
 8014676:	2800      	cmp	r0, #0
 8014678:	d0d9      	beq.n	801462e <__swbuf_r+0x2e>
 801467a:	e7d6      	b.n	801462a <__swbuf_r+0x2a>

0801467c <__swsetup_r>:
 801467c:	b538      	push	{r3, r4, r5, lr}
 801467e:	4b29      	ldr	r3, [pc, #164]	@ (8014724 <__swsetup_r+0xa8>)
 8014680:	4605      	mov	r5, r0
 8014682:	6818      	ldr	r0, [r3, #0]
 8014684:	460c      	mov	r4, r1
 8014686:	b118      	cbz	r0, 8014690 <__swsetup_r+0x14>
 8014688:	6a03      	ldr	r3, [r0, #32]
 801468a:	b90b      	cbnz	r3, 8014690 <__swsetup_r+0x14>
 801468c:	f7fe f9a6 	bl	80129dc <__sinit>
 8014690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014694:	0719      	lsls	r1, r3, #28
 8014696:	d422      	bmi.n	80146de <__swsetup_r+0x62>
 8014698:	06da      	lsls	r2, r3, #27
 801469a:	d407      	bmi.n	80146ac <__swsetup_r+0x30>
 801469c:	2209      	movs	r2, #9
 801469e:	602a      	str	r2, [r5, #0]
 80146a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146a4:	81a3      	strh	r3, [r4, #12]
 80146a6:	f04f 30ff 	mov.w	r0, #4294967295
 80146aa:	e033      	b.n	8014714 <__swsetup_r+0x98>
 80146ac:	0758      	lsls	r0, r3, #29
 80146ae:	d512      	bpl.n	80146d6 <__swsetup_r+0x5a>
 80146b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146b2:	b141      	cbz	r1, 80146c6 <__swsetup_r+0x4a>
 80146b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146b8:	4299      	cmp	r1, r3
 80146ba:	d002      	beq.n	80146c2 <__swsetup_r+0x46>
 80146bc:	4628      	mov	r0, r5
 80146be:	f7ff f8fb 	bl	80138b8 <_free_r>
 80146c2:	2300      	movs	r3, #0
 80146c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80146c6:	89a3      	ldrh	r3, [r4, #12]
 80146c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146cc:	81a3      	strh	r3, [r4, #12]
 80146ce:	2300      	movs	r3, #0
 80146d0:	6063      	str	r3, [r4, #4]
 80146d2:	6923      	ldr	r3, [r4, #16]
 80146d4:	6023      	str	r3, [r4, #0]
 80146d6:	89a3      	ldrh	r3, [r4, #12]
 80146d8:	f043 0308 	orr.w	r3, r3, #8
 80146dc:	81a3      	strh	r3, [r4, #12]
 80146de:	6923      	ldr	r3, [r4, #16]
 80146e0:	b94b      	cbnz	r3, 80146f6 <__swsetup_r+0x7a>
 80146e2:	89a3      	ldrh	r3, [r4, #12]
 80146e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80146e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80146ec:	d003      	beq.n	80146f6 <__swsetup_r+0x7a>
 80146ee:	4621      	mov	r1, r4
 80146f0:	4628      	mov	r0, r5
 80146f2:	f000 f8b3 	bl	801485c <__smakebuf_r>
 80146f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146fa:	f013 0201 	ands.w	r2, r3, #1
 80146fe:	d00a      	beq.n	8014716 <__swsetup_r+0x9a>
 8014700:	2200      	movs	r2, #0
 8014702:	60a2      	str	r2, [r4, #8]
 8014704:	6962      	ldr	r2, [r4, #20]
 8014706:	4252      	negs	r2, r2
 8014708:	61a2      	str	r2, [r4, #24]
 801470a:	6922      	ldr	r2, [r4, #16]
 801470c:	b942      	cbnz	r2, 8014720 <__swsetup_r+0xa4>
 801470e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014712:	d1c5      	bne.n	80146a0 <__swsetup_r+0x24>
 8014714:	bd38      	pop	{r3, r4, r5, pc}
 8014716:	0799      	lsls	r1, r3, #30
 8014718:	bf58      	it	pl
 801471a:	6962      	ldrpl	r2, [r4, #20]
 801471c:	60a2      	str	r2, [r4, #8]
 801471e:	e7f4      	b.n	801470a <__swsetup_r+0x8e>
 8014720:	2000      	movs	r0, #0
 8014722:	e7f7      	b.n	8014714 <__swsetup_r+0x98>
 8014724:	20000134 	.word	0x20000134

08014728 <_sbrk_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d06      	ldr	r5, [pc, #24]	@ (8014744 <_sbrk_r+0x1c>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	602b      	str	r3, [r5, #0]
 8014734:	f7f0 f86a 	bl	800480c <_sbrk>
 8014738:	1c43      	adds	r3, r0, #1
 801473a:	d102      	bne.n	8014742 <_sbrk_r+0x1a>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	b103      	cbz	r3, 8014742 <_sbrk_r+0x1a>
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	200024bc 	.word	0x200024bc

08014748 <__assert_func>:
 8014748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801474a:	4614      	mov	r4, r2
 801474c:	461a      	mov	r2, r3
 801474e:	4b09      	ldr	r3, [pc, #36]	@ (8014774 <__assert_func+0x2c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	4605      	mov	r5, r0
 8014754:	68d8      	ldr	r0, [r3, #12]
 8014756:	b954      	cbnz	r4, 801476e <__assert_func+0x26>
 8014758:	4b07      	ldr	r3, [pc, #28]	@ (8014778 <__assert_func+0x30>)
 801475a:	461c      	mov	r4, r3
 801475c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014760:	9100      	str	r1, [sp, #0]
 8014762:	462b      	mov	r3, r5
 8014764:	4905      	ldr	r1, [pc, #20]	@ (801477c <__assert_func+0x34>)
 8014766:	f000 f841 	bl	80147ec <fiprintf>
 801476a:	f000 f8d5 	bl	8014918 <abort>
 801476e:	4b04      	ldr	r3, [pc, #16]	@ (8014780 <__assert_func+0x38>)
 8014770:	e7f4      	b.n	801475c <__assert_func+0x14>
 8014772:	bf00      	nop
 8014774:	20000134 	.word	0x20000134
 8014778:	08014dc6 	.word	0x08014dc6
 801477c:	08014d98 	.word	0x08014d98
 8014780:	08014d8b 	.word	0x08014d8b

08014784 <_calloc_r>:
 8014784:	b570      	push	{r4, r5, r6, lr}
 8014786:	fba1 5402 	umull	r5, r4, r1, r2
 801478a:	b93c      	cbnz	r4, 801479c <_calloc_r+0x18>
 801478c:	4629      	mov	r1, r5
 801478e:	f7ff f907 	bl	80139a0 <_malloc_r>
 8014792:	4606      	mov	r6, r0
 8014794:	b928      	cbnz	r0, 80147a2 <_calloc_r+0x1e>
 8014796:	2600      	movs	r6, #0
 8014798:	4630      	mov	r0, r6
 801479a:	bd70      	pop	{r4, r5, r6, pc}
 801479c:	220c      	movs	r2, #12
 801479e:	6002      	str	r2, [r0, #0]
 80147a0:	e7f9      	b.n	8014796 <_calloc_r+0x12>
 80147a2:	462a      	mov	r2, r5
 80147a4:	4621      	mov	r1, r4
 80147a6:	f7fe f9ac 	bl	8012b02 <memset>
 80147aa:	e7f5      	b.n	8014798 <_calloc_r+0x14>

080147ac <__ascii_mbtowc>:
 80147ac:	b082      	sub	sp, #8
 80147ae:	b901      	cbnz	r1, 80147b2 <__ascii_mbtowc+0x6>
 80147b0:	a901      	add	r1, sp, #4
 80147b2:	b142      	cbz	r2, 80147c6 <__ascii_mbtowc+0x1a>
 80147b4:	b14b      	cbz	r3, 80147ca <__ascii_mbtowc+0x1e>
 80147b6:	7813      	ldrb	r3, [r2, #0]
 80147b8:	600b      	str	r3, [r1, #0]
 80147ba:	7812      	ldrb	r2, [r2, #0]
 80147bc:	1e10      	subs	r0, r2, #0
 80147be:	bf18      	it	ne
 80147c0:	2001      	movne	r0, #1
 80147c2:	b002      	add	sp, #8
 80147c4:	4770      	bx	lr
 80147c6:	4610      	mov	r0, r2
 80147c8:	e7fb      	b.n	80147c2 <__ascii_mbtowc+0x16>
 80147ca:	f06f 0001 	mvn.w	r0, #1
 80147ce:	e7f8      	b.n	80147c2 <__ascii_mbtowc+0x16>

080147d0 <__ascii_wctomb>:
 80147d0:	4603      	mov	r3, r0
 80147d2:	4608      	mov	r0, r1
 80147d4:	b141      	cbz	r1, 80147e8 <__ascii_wctomb+0x18>
 80147d6:	2aff      	cmp	r2, #255	@ 0xff
 80147d8:	d904      	bls.n	80147e4 <__ascii_wctomb+0x14>
 80147da:	228a      	movs	r2, #138	@ 0x8a
 80147dc:	601a      	str	r2, [r3, #0]
 80147de:	f04f 30ff 	mov.w	r0, #4294967295
 80147e2:	4770      	bx	lr
 80147e4:	700a      	strb	r2, [r1, #0]
 80147e6:	2001      	movs	r0, #1
 80147e8:	4770      	bx	lr
	...

080147ec <fiprintf>:
 80147ec:	b40e      	push	{r1, r2, r3}
 80147ee:	b503      	push	{r0, r1, lr}
 80147f0:	4601      	mov	r1, r0
 80147f2:	ab03      	add	r3, sp, #12
 80147f4:	4805      	ldr	r0, [pc, #20]	@ (801480c <fiprintf+0x20>)
 80147f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80147fa:	6800      	ldr	r0, [r0, #0]
 80147fc:	9301      	str	r3, [sp, #4]
 80147fe:	f7ff fd07 	bl	8014210 <_vfiprintf_r>
 8014802:	b002      	add	sp, #8
 8014804:	f85d eb04 	ldr.w	lr, [sp], #4
 8014808:	b003      	add	sp, #12
 801480a:	4770      	bx	lr
 801480c:	20000134 	.word	0x20000134

08014810 <__swhatbuf_r>:
 8014810:	b570      	push	{r4, r5, r6, lr}
 8014812:	460c      	mov	r4, r1
 8014814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014818:	2900      	cmp	r1, #0
 801481a:	b096      	sub	sp, #88	@ 0x58
 801481c:	4615      	mov	r5, r2
 801481e:	461e      	mov	r6, r3
 8014820:	da0d      	bge.n	801483e <__swhatbuf_r+0x2e>
 8014822:	89a3      	ldrh	r3, [r4, #12]
 8014824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014828:	f04f 0100 	mov.w	r1, #0
 801482c:	bf14      	ite	ne
 801482e:	2340      	movne	r3, #64	@ 0x40
 8014830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014834:	2000      	movs	r0, #0
 8014836:	6031      	str	r1, [r6, #0]
 8014838:	602b      	str	r3, [r5, #0]
 801483a:	b016      	add	sp, #88	@ 0x58
 801483c:	bd70      	pop	{r4, r5, r6, pc}
 801483e:	466a      	mov	r2, sp
 8014840:	f000 f848 	bl	80148d4 <_fstat_r>
 8014844:	2800      	cmp	r0, #0
 8014846:	dbec      	blt.n	8014822 <__swhatbuf_r+0x12>
 8014848:	9901      	ldr	r1, [sp, #4]
 801484a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801484e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014852:	4259      	negs	r1, r3
 8014854:	4159      	adcs	r1, r3
 8014856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801485a:	e7eb      	b.n	8014834 <__swhatbuf_r+0x24>

0801485c <__smakebuf_r>:
 801485c:	898b      	ldrh	r3, [r1, #12]
 801485e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014860:	079d      	lsls	r5, r3, #30
 8014862:	4606      	mov	r6, r0
 8014864:	460c      	mov	r4, r1
 8014866:	d507      	bpl.n	8014878 <__smakebuf_r+0x1c>
 8014868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801486c:	6023      	str	r3, [r4, #0]
 801486e:	6123      	str	r3, [r4, #16]
 8014870:	2301      	movs	r3, #1
 8014872:	6163      	str	r3, [r4, #20]
 8014874:	b003      	add	sp, #12
 8014876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014878:	ab01      	add	r3, sp, #4
 801487a:	466a      	mov	r2, sp
 801487c:	f7ff ffc8 	bl	8014810 <__swhatbuf_r>
 8014880:	9f00      	ldr	r7, [sp, #0]
 8014882:	4605      	mov	r5, r0
 8014884:	4639      	mov	r1, r7
 8014886:	4630      	mov	r0, r6
 8014888:	f7ff f88a 	bl	80139a0 <_malloc_r>
 801488c:	b948      	cbnz	r0, 80148a2 <__smakebuf_r+0x46>
 801488e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014892:	059a      	lsls	r2, r3, #22
 8014894:	d4ee      	bmi.n	8014874 <__smakebuf_r+0x18>
 8014896:	f023 0303 	bic.w	r3, r3, #3
 801489a:	f043 0302 	orr.w	r3, r3, #2
 801489e:	81a3      	strh	r3, [r4, #12]
 80148a0:	e7e2      	b.n	8014868 <__smakebuf_r+0xc>
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	6020      	str	r0, [r4, #0]
 80148a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80148aa:	81a3      	strh	r3, [r4, #12]
 80148ac:	9b01      	ldr	r3, [sp, #4]
 80148ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80148b2:	b15b      	cbz	r3, 80148cc <__smakebuf_r+0x70>
 80148b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148b8:	4630      	mov	r0, r6
 80148ba:	f000 f81d 	bl	80148f8 <_isatty_r>
 80148be:	b128      	cbz	r0, 80148cc <__smakebuf_r+0x70>
 80148c0:	89a3      	ldrh	r3, [r4, #12]
 80148c2:	f023 0303 	bic.w	r3, r3, #3
 80148c6:	f043 0301 	orr.w	r3, r3, #1
 80148ca:	81a3      	strh	r3, [r4, #12]
 80148cc:	89a3      	ldrh	r3, [r4, #12]
 80148ce:	431d      	orrs	r5, r3
 80148d0:	81a5      	strh	r5, [r4, #12]
 80148d2:	e7cf      	b.n	8014874 <__smakebuf_r+0x18>

080148d4 <_fstat_r>:
 80148d4:	b538      	push	{r3, r4, r5, lr}
 80148d6:	4d07      	ldr	r5, [pc, #28]	@ (80148f4 <_fstat_r+0x20>)
 80148d8:	2300      	movs	r3, #0
 80148da:	4604      	mov	r4, r0
 80148dc:	4608      	mov	r0, r1
 80148de:	4611      	mov	r1, r2
 80148e0:	602b      	str	r3, [r5, #0]
 80148e2:	f7ef ff6b 	bl	80047bc <_fstat>
 80148e6:	1c43      	adds	r3, r0, #1
 80148e8:	d102      	bne.n	80148f0 <_fstat_r+0x1c>
 80148ea:	682b      	ldr	r3, [r5, #0]
 80148ec:	b103      	cbz	r3, 80148f0 <_fstat_r+0x1c>
 80148ee:	6023      	str	r3, [r4, #0]
 80148f0:	bd38      	pop	{r3, r4, r5, pc}
 80148f2:	bf00      	nop
 80148f4:	200024bc 	.word	0x200024bc

080148f8 <_isatty_r>:
 80148f8:	b538      	push	{r3, r4, r5, lr}
 80148fa:	4d06      	ldr	r5, [pc, #24]	@ (8014914 <_isatty_r+0x1c>)
 80148fc:	2300      	movs	r3, #0
 80148fe:	4604      	mov	r4, r0
 8014900:	4608      	mov	r0, r1
 8014902:	602b      	str	r3, [r5, #0]
 8014904:	f7ef ff6a 	bl	80047dc <_isatty>
 8014908:	1c43      	adds	r3, r0, #1
 801490a:	d102      	bne.n	8014912 <_isatty_r+0x1a>
 801490c:	682b      	ldr	r3, [r5, #0]
 801490e:	b103      	cbz	r3, 8014912 <_isatty_r+0x1a>
 8014910:	6023      	str	r3, [r4, #0]
 8014912:	bd38      	pop	{r3, r4, r5, pc}
 8014914:	200024bc 	.word	0x200024bc

08014918 <abort>:
 8014918:	b508      	push	{r3, lr}
 801491a:	2006      	movs	r0, #6
 801491c:	f000 f82c 	bl	8014978 <raise>
 8014920:	2001      	movs	r0, #1
 8014922:	f7ef fefb 	bl	800471c <_exit>

08014926 <_raise_r>:
 8014926:	291f      	cmp	r1, #31
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	4605      	mov	r5, r0
 801492c:	460c      	mov	r4, r1
 801492e:	d904      	bls.n	801493a <_raise_r+0x14>
 8014930:	2316      	movs	r3, #22
 8014932:	6003      	str	r3, [r0, #0]
 8014934:	f04f 30ff 	mov.w	r0, #4294967295
 8014938:	bd38      	pop	{r3, r4, r5, pc}
 801493a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801493c:	b112      	cbz	r2, 8014944 <_raise_r+0x1e>
 801493e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014942:	b94b      	cbnz	r3, 8014958 <_raise_r+0x32>
 8014944:	4628      	mov	r0, r5
 8014946:	f000 f831 	bl	80149ac <_getpid_r>
 801494a:	4622      	mov	r2, r4
 801494c:	4601      	mov	r1, r0
 801494e:	4628      	mov	r0, r5
 8014950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014954:	f000 b818 	b.w	8014988 <_kill_r>
 8014958:	2b01      	cmp	r3, #1
 801495a:	d00a      	beq.n	8014972 <_raise_r+0x4c>
 801495c:	1c59      	adds	r1, r3, #1
 801495e:	d103      	bne.n	8014968 <_raise_r+0x42>
 8014960:	2316      	movs	r3, #22
 8014962:	6003      	str	r3, [r0, #0]
 8014964:	2001      	movs	r0, #1
 8014966:	e7e7      	b.n	8014938 <_raise_r+0x12>
 8014968:	2100      	movs	r1, #0
 801496a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801496e:	4620      	mov	r0, r4
 8014970:	4798      	blx	r3
 8014972:	2000      	movs	r0, #0
 8014974:	e7e0      	b.n	8014938 <_raise_r+0x12>
	...

08014978 <raise>:
 8014978:	4b02      	ldr	r3, [pc, #8]	@ (8014984 <raise+0xc>)
 801497a:	4601      	mov	r1, r0
 801497c:	6818      	ldr	r0, [r3, #0]
 801497e:	f7ff bfd2 	b.w	8014926 <_raise_r>
 8014982:	bf00      	nop
 8014984:	20000134 	.word	0x20000134

08014988 <_kill_r>:
 8014988:	b538      	push	{r3, r4, r5, lr}
 801498a:	4d07      	ldr	r5, [pc, #28]	@ (80149a8 <_kill_r+0x20>)
 801498c:	2300      	movs	r3, #0
 801498e:	4604      	mov	r4, r0
 8014990:	4608      	mov	r0, r1
 8014992:	4611      	mov	r1, r2
 8014994:	602b      	str	r3, [r5, #0]
 8014996:	f7ef feb1 	bl	80046fc <_kill>
 801499a:	1c43      	adds	r3, r0, #1
 801499c:	d102      	bne.n	80149a4 <_kill_r+0x1c>
 801499e:	682b      	ldr	r3, [r5, #0]
 80149a0:	b103      	cbz	r3, 80149a4 <_kill_r+0x1c>
 80149a2:	6023      	str	r3, [r4, #0]
 80149a4:	bd38      	pop	{r3, r4, r5, pc}
 80149a6:	bf00      	nop
 80149a8:	200024bc 	.word	0x200024bc

080149ac <_getpid_r>:
 80149ac:	f7ef be9e 	b.w	80046ec <_getpid>

080149b0 <_init>:
 80149b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b2:	bf00      	nop
 80149b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149b6:	bc08      	pop	{r3}
 80149b8:	469e      	mov	lr, r3
 80149ba:	4770      	bx	lr

080149bc <_fini>:
 80149bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149be:	bf00      	nop
 80149c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149c2:	bc08      	pop	{r3}
 80149c4:	469e      	mov	lr, r3
 80149c6:	4770      	bx	lr
