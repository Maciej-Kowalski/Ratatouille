
ratatouille_transfer_audio_buffered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014798  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080148d8  080148d8  000158d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014dd8  08014dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014de0  08014de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014de4  08014de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e8  20000008  08014de8  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000021dc  200002f0  080150d0  000162f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200024cc  080150d0  000164cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dcde  00000000  00000000  00016320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057a2  00000000  00000000  00043ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b50  00000000  00000000  000497a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002167  00000000  00000000  0004c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab7d  00000000  00000000  0004e457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f355  00000000  00000000  00078fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100a3b  00000000  00000000  000a8329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a8d64  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca30  00000000  00000000  001a8da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  001b57d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f0 	.word	0x200002f0
 800015c:	00000000 	.word	0x00000000
 8000160:	080148c0 	.word	0x080148c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f4 	.word	0x200002f4
 800017c:	080148c0 	.word	0x080148c0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	4613      	mov	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <bmi160_get_regs+0x24>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e017      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000e78:	23f4      	movs	r3, #244	@ 0xf4
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e011      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d103      	bne.n	8000e8e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69dc      	ldr	r4, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7858      	ldrb	r0, [r3, #1]
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	47a0      	blx	r4
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}

08000eae <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000eae:	b590      	push	{r4, r7, lr}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <bmi160_set_regs+0x28>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	75fb      	strb	r3, [r7, #23]
 8000eda:	e045      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000ee2:	23f4      	movs	r3, #244	@ 0xf4
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e03f      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	789b      	ldrb	r3, [r3, #2]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d103      	bne.n	8000ef8 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef6:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b11      	cmp	r3, #17
 8000efe:	d003      	beq.n	8000f08 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000f04:	2b15      	cmp	r3, #21
 8000f06:	d124      	bne.n	8000f52 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1c      	ldr	r4, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7858      	ldrb	r0, [r3, #1]
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	7bf9      	ldrb	r1, [r7, #15]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2001      	movs	r0, #1
 8000f22:	4798      	blx	r3
 8000f24:	e01a      	b.n	8000f5c <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1c      	ldr	r4, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7858      	ldrb	r0, [r3, #1]
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	441a      	add	r2, r3
 8000f34:	7bf9      	ldrb	r1, [r7, #15]
 8000f36:	2301      	movs	r3, #1
 8000f38:	47a0      	blx	r4
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	2001      	movs	r0, #1
 8000f4a:	4798      	blx	r3
            for (; count < len; count++)
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8e4      	bhi.n	8000f26 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8000f64:	23fe      	movs	r3, #254	@ 0xfe
 8000f66:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fccd 	bl	8001920 <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <bmi160_init+0x38>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000f9a:	f107 010d 	add.w	r1, r7, #13
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	207f      	movs	r0, #127	@ 0x7f
 8000fa4:	f7ff ff50 	bl	8000e48 <bmi160_get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d127      	bne.n	8001004 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fba:	e007      	b.n	8000fcc <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff40 	bl	8000e48 <bmi160_get_regs>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	73ba      	strb	r2, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <bmi160_init+0x6a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fdc:	d1ee      	bne.n	8000fbc <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <bmi160_init+0x8c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fec:	d108      	bne.n	8001000 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	22ff      	movs	r2, #255	@ 0xff
 8000ff2:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f80b 	bl	8001010 <bmi160_soft_reset>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001000:	23fd      	movs	r3, #253	@ 0xfd
 8001002:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001018:	23b6      	movs	r3, #182	@ 0xb6
 800101a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <bmi160_soft_reset+0x1a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800102a:	23ff      	movs	r3, #255	@ 0xff
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e024      	b.n	800107a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001030:	f107 010e 	add.w	r1, r7, #14
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	207e      	movs	r0, #126	@ 0x7e
 800103a:	f7ff ff38 	bl	8000eae <bmi160_set_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	2001      	movs	r0, #1
 8001048:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <bmi160_soft_reset+0x5c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800105a:	f107 010e 	add.w	r1, r7, #14
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	207f      	movs	r0, #127	@ 0x7f
 8001064:	f7ff fef0 	bl	8000e48 <bmi160_get_regs>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fc73 	bl	8001960 <default_param_settg>
        }
    }

    return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <bmi160_set_sens_conf+0x1a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	@ 0xff
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e01f      	b.n	80010e6 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fc84 	bl	80019b4 <set_accel_conf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d116      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fdbf 	bl	8001c3c <set_gyro_conf>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f811 	bl	80010f2 <bmi160_set_power_mode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd78 	bl	8001bd2 <check_invalid_settg>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <bmi160_set_power_mode+0x1a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00d      	b.n	800112e <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe9b 	bl	8001e4e <set_accel_pwr>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ff29 	bl	8001f7c <set_gyro_pwr>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d879      	bhi.n	8001246 <bmi160_set_int_config+0x10a>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <bmi160_set_int_config+0x1c>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001191 	.word	0x08001191
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011c9 	.word	0x080011c9
 8001164:	080011bb 	.word	0x080011bb
 8001168:	080011bb 	.word	0x080011bb
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011e5 	.word	0x080011e5
 8001174:	08001201 	.word	0x08001201
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011ad 	.word	0x080011ad
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800121d 	.word	0x0800121d
 8001188:	0800122b 	.word	0x0800122b
 800118c:	08001239 	.word	0x08001239
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f95a 	bl	800144c <set_accel_any_motion_int>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
            break;
 800119c:	e054      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ed 	bl	8001580 <set_accel_sig_motion_int>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
            break;
 80011aa:	e04d      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fa14 	bl	80015dc <set_accel_no_motion_int>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
            break;
 80011b8:	e046      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f973 	bl	80014a8 <set_accel_tap_int>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
            break;
 80011c6:	e03f      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa34 	bl	8001638 <set_accel_step_detect_int>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
            break;
 80011d4:	e038      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fa6e 	bl	80016ba <set_accel_orientation_int>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
            break;
 80011e2:	e031      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 faa8 	bl	800173c <set_accel_flat_detect_int>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
            break;
 80011f0:	e02a      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fae2 	bl	80017be <set_accel_low_g_int>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
            break;
 80011fe:	e023      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb26 	bl	8001854 <set_accel_high_g_int>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
            break;
 800120c:	e01c      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f982 	bl	800151a <set_accel_gyro_data_ready_int>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
            break;
 800121a:	e015      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f002 fa00 	bl	8003624 <set_fifo_full_int>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
            break;
 8001228:	e00e      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fa60 	bl	80036f2 <set_fifo_watermark_int>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
            break;
 8001236:	e007      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fb55 	bl	80018ea <set_intr_pin_config>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
            break;
 8001244:	e000      	b.n	8001248 <bmi160_set_int_config+0x10c>
        default:
            break;
 8001246:	bf00      	nop
    }

    return rslt;
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb5d 	bl	8001920 <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e068      	b.n	800134a <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f002 fac0 	bl	8003800 <configure_offset_enable>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8001284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800128c:	f107 0116 	add.w	r1, r7, #22
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	2069      	movs	r0, #105	@ 0x69
 8001296:	f7ff fdd7 	bl	8000e48 <bmi160_get_regs>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f023 030c 	bic.w	r3, r3, #12
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 800131c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d112      	bne.n	800134a <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001324:	f107 0116 	add.w	r1, r7, #22
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	2069      	movs	r0, #105	@ 0x69
 800132e:	f7ff fdbe 	bl	8000eae <bmi160_set_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f002 faa7 	bl	8003894 <trigger_foc>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f000 fadd 	bl	8001920 <null_ptr_check>
 8001366:	4603      	mov	r3, r0
 8001368:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800136a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001372:	23ff      	movs	r3, #255	@ 0xff
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	e063      	b.n	8001440 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	2071      	movs	r0, #113	@ 0x71
 8001382:	f7ff fd61 	bl	8000e48 <bmi160_get_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	b25a      	sxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80013a6:	7cbb      	ldrb	r3, [r7, #18]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013ae:	7f7b      	ldrb	r3, [r7, #29]
 80013b0:	039b      	lsls	r3, r3, #14
 80013b2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013ba:	8b7a      	ldrh	r2, [r7, #26]
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80013c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <bmi160_get_offsets+0x76>
 80013ca:	333f      	adds	r3, #63	@ 0x3f
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	109b      	asrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013e4:	7f7b      	ldrb	r3, [r7, #29]
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013ea:	7fbb      	ldrb	r3, [r7, #30]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013f0:	8b7a      	ldrh	r2, [r7, #26]
 80013f2:	8b3b      	ldrh	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80013f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <bmi160_get_offsets+0xac>
 8001400:	333f      	adds	r3, #63	@ 0x3f
 8001402:	119b      	asrs	r3, r3, #6
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800140a:	7c7b      	ldrb	r3, [r7, #17]
 800140c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800140e:	7cbb      	ldrb	r3, [r7, #18]
 8001410:	111b      	asrs	r3, r3, #4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800141a:	7f7b      	ldrb	r3, [r7, #29]
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001426:	8b7a      	ldrh	r2, [r7, #26]
 8001428:	8b3b      	ldrh	r3, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <bmi160_get_offsets+0xe2>
 8001436:	333f      	adds	r3, #63	@ 0x3f
 8001438:	119b      	asrs	r3, r3, #6
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f000 fa62 	bl	8001920 <null_ptr_check>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <set_accel_any_motion_int+0x22>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800146e:	23ff      	movs	r3, #255	@ 0xff
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e013      	b.n	800149c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f000 fdc1 	bl	8002004 <enable_accel_any_motion_int>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ffef 	bl	8002476 <config_any_motion_int_settg>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f000 fa34 	bl	8001920 <null_ptr_check>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <set_accel_tap_int+0x22>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e01e      	b.n	800150e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3304      	adds	r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fb29 	bl	8002b32 <enable_tap_int>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d110      	bne.n	800150e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f9fb 	bl	80018ea <set_intr_pin_config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 fb67 	bl	8002bd8 <config_tap_int_settg>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f000 f9fb 	bl	8001920 <null_ptr_check>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <set_accel_gyro_data_ready_int+0x22>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e018      	b.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 ffd0 	bl	80024e8 <enable_data_ready_int>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9c7 	bl	80018ea <set_intr_pin_config>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fe84 	bl	8002278 <map_hardware_interrupt>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f000 f9c8 	bl	8001920 <null_ptr_check>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <set_accel_sig_motion_int+0x22>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e013      	b.n	80015d0 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f001 f8ef 	bl	8002794 <enable_sig_motion_int>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f925 	bl	8002816 <config_sig_motion_int_settg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f000 f99a 	bl	8001920 <null_ptr_check>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <set_accel_no_motion_int+0x22>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015fe:	23ff      	movs	r3, #255	@ 0xff
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e013      	b.n	800162c <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 ff98 	bl	8002542 <enable_no_motion_int>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 ffe2 	bl	80025ec <config_no_motion_int_settg>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 f96c 	bl	8001920 <null_ptr_check>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <set_accel_step_detect_int+0x22>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e026      	b.n	80016ae <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f001 f9a9 	bl	80029c0 <enable_step_detect_int>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f934 	bl	80018ea <set_intr_pin_config>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd57 	bl	8002144 <map_feature_interrupt>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 f9c4 	bl	8002a32 <config_step_detect>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f000 f92b 	bl	8001920 <null_ptr_check>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <set_accel_orientation_int+0x22>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e026      	b.n	8001730 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f001 fb78 	bl	8002de0 <enable_orient_int>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d119      	bne.n	8001730 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8f3 	bl	80018ea <set_intr_pin_config>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd16 	bl	8002144 <map_feature_interrupt>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f001 fb93 	bl	8002e52 <config_orient_int_settg>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f8ea 	bl	8001920 <null_ptr_check>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <set_accel_flat_detect_int+0x22>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800175e:	23ff      	movs	r3, #255	@ 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e026      	b.n	80017b2 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f001 fbff 	bl	8002f70 <enable_flat_int>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8b2 	bl	80018ea <set_intr_pin_config>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fcd5 	bl	8002144 <map_feature_interrupt>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f001 fc17 	bl	8002fdc <config_flat_int_settg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 f8a9 	bl	8001920 <null_ptr_check>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <set_accel_low_g_int+0x22>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e030      	b.n	8001848 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f001 fc50 	bl	8003094 <enable_low_g_int>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d123      	bne.n	8001848 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f871 	bl	80018ea <set_intr_pin_config>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc94 	bl	8002144 <map_feature_interrupt>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f001 fc6b 	bl	8003106 <config_low_g_data_src>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f001 fc98 	bl	8003174 <config_low_g_int_settg>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 f85e 	bl	8001920 <null_ptr_check>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <set_accel_high_g_int+0x22>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e030      	b.n	80018de <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f001 fccd 	bl	8003224 <enable_high_g_int>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f826 	bl	80018ea <set_intr_pin_config>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fc49 	bl	8002144 <map_feature_interrupt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fd0a 	bl	80032da <config_high_g_data_src>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f001 fd37 	bl	8003348 <config_high_g_int_settg>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fd6c 	bl	80033d4 <config_int_out_ctrl>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f001 fe27 	bl	800355e <config_int_latch>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <null_ptr_check+0x26>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <null_ptr_check+0x26>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <null_ptr_check+0x26>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2210      	movs	r2, #16
 8001978:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2208      	movs	r2, #8
 800198a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2214      	movs	r2, #20
 8001990:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f833 	bl	8001a32 <check_accel_config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d126      	bne.n	8001a26 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	2040      	movs	r0, #64	@ 0x40
 80019e2:	f7ff fa64 	bl	8000eae <bmi160_set_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	795a      	ldrb	r2, [r3, #5]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79da      	ldrb	r2, [r3, #7]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2041      	movs	r0, #65	@ 0x41
 8001a0e:	f7ff fa4e 	bl	8000eae <bmi160_set_regs>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	799a      	ldrb	r2, [r3, #6]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2040      	movs	r0, #64	@ 0x40
 8001a44:	f7ff fa00 	bl	8000e48 <bmi160_get_regs>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f81e 	bl	8001a98 <process_accel_odr>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f848 	bl	8001b00 <process_accel_bw>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f871 	bl	8001b6a <process_accel_range>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d81a      	bhi.n	8001aec <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	795a      	ldrb	r2, [r3, #5]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7a5b      	ldrb	r3, [r3, #9]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d016      	beq.n	8001af0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	795b      	ldrb	r3, [r3, #5]
 8001ac6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e001      	b.n	8001af0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aec:	23fc      	movs	r3, #252	@ 0xfc
 8001aee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	79db      	ldrb	r3, [r3, #7]
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d81b      	bhi.n	8001b56 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	79da      	ldrb	r2, [r3, #7]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7adb      	ldrb	r3, [r3, #11]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d017      	beq.n	8001b5a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	79db      	ldrb	r3, [r3, #7]
 8001b2e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b38:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e001      	b.n	8001b5a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b56:	23fc      	movs	r3, #252	@ 0xfc
 8001b58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	799b      	ldrb	r3, [r3, #6]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d81a      	bhi.n	8001bbe <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	799a      	ldrb	r2, [r3, #6]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7a9b      	ldrb	r3, [r3, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d016      	beq.n	8001bc2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001ba4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001bbe:	23fc      	movs	r3, #252	@ 0xfc
 8001bc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff f92e 	bl	8000e48 <bmi160_get_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001c08:	23fa      	movs	r3, #250	@ 0xfa
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e010      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d102      	bne.n	8001c1a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001c14:	23f9      	movs	r3, #249	@ 0xf9
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e00a      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d102      	bne.n	8001c26 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001c20:	23f8      	movs	r3, #248	@ 0xf8
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e004      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d101      	bne.n	8001c30 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001c2c:	23f7      	movs	r3, #247	@ 0xf7
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001c44:	2300      	movs	r3, #0
 8001c46:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f833 	bl	8001cba <check_gyro_config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d126      	bne.n	8001cae <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2042      	movs	r0, #66	@ 0x42
 8001c6a:	f7ff f920 	bl	8000eae <bmi160_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b5a      	ldrb	r2, [r3, #13]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7bda      	ldrb	r2, [r3, #15]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	2043      	movs	r0, #67	@ 0x43
 8001c96:	f7ff f90a 	bl	8000eae <bmi160_set_regs>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b9a      	ldrb	r2, [r3, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	2042      	movs	r0, #66	@ 0x42
 8001ccc:	f7ff f8bc 	bl	8000e48 <bmi160_get_regs>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11b      	bne.n	8001d14 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f81e 	bl	8001d20 <process_gyro_odr>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f848 	bl	8001d88 <process_gyro_bw>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f86b 	bl	8001de6 <process_gyro_range>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	d81a      	bhi.n	8001d74 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b5a      	ldrb	r2, [r3, #13]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7c5b      	ldrb	r3, [r3, #17]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d016      	beq.n	8001d78 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001d5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d74:	23fc      	movs	r3, #252	@ 0xfc
 8001d76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7bdb      	ldrb	r3, [r3, #15]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d815      	bhi.n	8001dd2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7bdb      	ldrb	r3, [r3, #15]
 8001daa:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001db4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dd2:	23fc      	movs	r3, #252	@ 0xfc
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d81a      	bhi.n	8001e3a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b9a      	ldrb	r2, [r3, #14]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7c9b      	ldrb	r3, [r3, #18]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d016      	beq.n	8001e3e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001e3a:	23fc      	movs	r3, #252	@ 0xfc
 8001e3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d92b      	bls.n	8001ebe <set_accel_pwr+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d827      	bhi.n	8001ebe <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791a      	ldrb	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d024      	beq.n	8001ec4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001e7a:	f107 030e 	add.w	r3, r7, #14
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f826 	bl	8001ed2 <process_under_sampling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1d19      	adds	r1, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	207e      	movs	r0, #126	@ 0x7e
 8001e9c:	f7ff f807 	bl	8000eae <bmi160_set_regs>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d103      	bne.n	8001eb4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	791a      	ldrb	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ebc:	e002      	b.n	8001ec4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ebe:	23f3      	movs	r3, #243	@ 0xf3
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e000      	b.n	8001ec6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ec4:	bf00      	nop
    }

    return rslt;
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	2040      	movs	r0, #64	@ 0x40
 8001eec:	f7fe ffac 	bl	8000e48 <bmi160_get_regs>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d139      	bne.n	8001f70 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d120      	bne.n	8001f46 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7fe ffc4 	bl	8000eae <bmi160_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11e      	bne.n	8001f70 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	2058      	movs	r0, #88	@ 0x58
 8001f3c:	f7fe ffb7 	bl	8000eae <bmi160_set_regs>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e014      	b.n	8001f70 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0f      	bge.n	8001f70 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f58:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	f7fe ffa1 	bl	8000eae <bmi160_set_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	2b14      	cmp	r3, #20
 8001f8e:	d007      	beq.n	8001fa0 <set_gyro_pwr+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b15      	cmp	r3, #21
 8001f96:	d003      	beq.n	8001fa0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f9c:	2b17      	cmp	r3, #23
 8001f9e:	d129      	bne.n	8001ff4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1a      	ldrb	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7c1b      	ldrb	r3, [r3, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d025      	beq.n	8001ff8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 010c 	add.w	r1, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	207e      	movs	r0, #126	@ 0x7e
 8001fb8:	f7fe ff79 	bl	8000eae <bmi160_set_regs>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7c1b      	ldrb	r3, [r3, #16]
 8001fc4:	2b14      	cmp	r3, #20
 8001fc6:	d104      	bne.n	8001fd2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2050      	movs	r0, #80	@ 0x50
 8001fce:	4798      	blx	r3
 8001fd0:	e00b      	b.n	8001fea <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7c1b      	ldrb	r3, [r3, #16]
 8001fd6:	2b17      	cmp	r3, #23
 8001fd8:	d107      	bne.n	8001fea <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fde:	2b15      	cmp	r3, #21
 8001fe0:	d103      	bne.n	8001fea <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7b1a      	ldrb	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001ff2:	e001      	b.n	8001ff8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ff4:	23f3      	movs	r3, #243	@ 0xf3
 8001ff6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002016:	f107 010d 	add.w	r1, r7, #13
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	2050      	movs	r0, #80	@ 0x50
 8002020:	f7fe ff12 	bl	8000e48 <bmi160_get_regs>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d151      	bne.n	80020d4 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d039      	beq.n	80020b2 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	4313      	orrs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	b25a      	sxtb	r2, r3
 8002076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	b25a      	sxtb	r2, r3
 800209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	70da      	strb	r2, [r3, #3]
 80020b0:	e007      	b.n	80020c2 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f023 0307 	bic.w	r3, r3, #7
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80020c2:	f107 010d 	add.w	r1, r7, #13
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	2050      	movs	r0, #80	@ 0x50
 80020cc:	f7fe feef 	bl	8000eae <bmi160_set_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80020f0:	f107 010d 	add.w	r1, r7, #13
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	2062      	movs	r0, #98	@ 0x62
 80020fa:	f7fe fea5 	bl	8000e48 <bmi160_get_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002124:	f107 010d 	add.w	r1, r7, #13
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	2062      	movs	r0, #98	@ 0x62
 800212e:	f7fe febe 	bl	8000eae <bmi160_set_regs>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800214e:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4611      	mov	r1, r2
 8002158:	8019      	strh	r1, [r3, #0]
 800215a:	3302      	adds	r3, #2
 800215c:	0c12      	lsrs	r2, r2, #16
 800215e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002160:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	8019      	strh	r1, [r3, #0]
 800216c:	3302      	adds	r3, #2
 800216e:	0c12      	lsrs	r2, r2, #16
 8002170:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2203      	movs	r2, #3
 800217a:	2055      	movs	r0, #85	@ 0x55
 800217c:	f7fe fe64 	bl	8000e48 <bmi160_get_regs>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16a      	bne.n	8002262 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	b25a      	sxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	4619      	mov	r1, r3
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <map_feature_interrupt+0x130>)
 8002198:	5c5b      	ldrb	r3, [r3, r1]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <map_feature_interrupt+0x130>)
 80021b4:	5c5b      	ldrb	r3, [r3, r1]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d83b      	bhi.n	8002244 <map_feature_interrupt+0x100>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <map_feature_interrupt+0x90>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ef 	.word	0x080021ef
 80021dc:	08002207 	.word	0x08002207
 80021e0:	0800221f 	.word	0x0800221f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80021e8:	7abb      	ldrb	r3, [r7, #10]
 80021ea:	73bb      	strb	r3, [r7, #14]
                break;
 80021ec:	e02c      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80021ee:	7a3a      	ldrb	r2, [r7, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <map_feature_interrupt+0x130>)
 80021f8:	5c5b      	ldrb	r3, [r3, r1]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	73bb      	strb	r3, [r7, #14]
                break;
 8002204:	e020      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002206:	7aba      	ldrb	r2, [r7, #10]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	4619      	mov	r1, r3
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <map_feature_interrupt+0x130>)
 8002210:	5c5b      	ldrb	r3, [r3, r1]
 8002212:	4313      	orrs	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002218:	7a3b      	ldrb	r3, [r7, #8]
 800221a:	733b      	strb	r3, [r7, #12]
                break;
 800221c:	e014      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800221e:	7a3a      	ldrb	r2, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	4619      	mov	r1, r3
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <map_feature_interrupt+0x130>)
 8002228:	5c5b      	ldrb	r3, [r3, r1]
 800222a:	4313      	orrs	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002230:	7aba      	ldrb	r2, [r7, #10]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	4619      	mov	r1, r3
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <map_feature_interrupt+0x130>)
 800223a:	5c5b      	ldrb	r3, [r3, r1]
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73bb      	strb	r3, [r7, #14]
                break;
 8002242:	e001      	b.n	8002248 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002244:	23fc      	movs	r3, #252	@ 0xfc
 8002246:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	2055      	movs	r0, #85	@ 0x55
 800225a:	f7fe fe28 	bl	8000eae <bmi160_set_regs>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	080148d8 	.word	0x080148d8
 8002274:	08014988 	.word	0x08014988

08002278 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 800228a:	f107 010d 	add.w	r1, r7, #13
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	2056      	movs	r0, #86	@ 0x56
 8002294:	f7fe fdd8 	bl	8000e48 <bmi160_get_regs>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d168      	bne.n	8002376 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d839      	bhi.n	8002358 <map_hardware_interrupt+0xe0>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <map_hardware_interrupt+0x74>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	0800232f 	.word	0x0800232f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	737b      	strb	r3, [r7, #13]
                break;
 8002300:	e02c      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	461a      	mov	r2, r3
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <map_hardware_interrupt+0x10c>)
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	4313      	orrs	r3, r2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	737b      	strb	r3, [r7, #13]
                break;
 8002318:	e020      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002322:	5c9a      	ldrb	r2, [r3, r2]
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	737b      	strb	r3, [r7, #13]
                break;
 800232c:	e016      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	461a      	mov	r2, r3
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002336:	5c9a      	ldrb	r2, [r3, r2]
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	461a      	mov	r2, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b2da      	uxtb	r2, r3
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	4313      	orrs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]
                break;
 8002356:	e001      	b.n	800235c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002358:	23fc      	movs	r3, #252	@ 0xfc
 800235a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002364:	f107 010d 	add.w	r1, r7, #13
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	2056      	movs	r0, #86	@ 0x56
 800236e:	f7fe fd9e 	bl	8000eae <bmi160_set_regs>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08014988 	.word	0x08014988

08002388 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800239a:	f107 010d 	add.w	r1, r7, #13
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2059      	movs	r0, #89	@ 0x59
 80023a4:	f7fe fd50 	bl	8000e48 <bmi160_get_regs>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d119      	bne.n	80023e8 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80023b4:	7b7b      	ldrb	r3, [r7, #13]
 80023b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ba:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80023d6:	f107 010d 	add.w	r1, r7, #13
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	2059      	movs	r0, #89	@ 0x59
 80023e0:	f7fe fd65 	bl	8000eae <bmi160_set_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002406:	2300      	movs	r3, #0
 8002408:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	205f      	movs	r0, #95	@ 0x5f
 8002414:	f7fe fd18 	bl	8000e48 <bmi160_get_regs>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d122      	bne.n	800246a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002430:	7b3b      	ldrb	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800243c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002440:	b25a      	sxtb	r2, r3
 8002442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002446:	4313      	orrs	r3, r2
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002458:	f107 0108 	add.w	r1, r7, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	205f      	movs	r0, #95	@ 0x5f
 8002462:	f7fe fd24 	bl	8000eae <bmi160_set_regs>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fa30 	bl	80018ea <set_intr_pin_config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800248e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d122      	bne.n	80024dc <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe22 	bl	80020e0 <disable_sig_motion_int>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80024a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe4a 	bl	8002144 <map_feature_interrupt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80024b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff62 	bl	8002388 <config_any_motion_src>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80024c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7ff ff8e 	bl	80023f4 <config_any_dur_threshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80024dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80024f8:	f107 010d 	add.w	r1, r7, #13
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	2051      	movs	r0, #81	@ 0x51
 8002502:	f7fe fca1 	bl	8000e48 <bmi160_get_regs>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	f023 0310 	bic.w	r3, r3, #16
 8002518:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002524:	f107 010d 	add.w	r1, r7, #13
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	2051      	movs	r0, #81	@ 0x51
 800252e:	f7fe fcbe 	bl	8000eae <bmi160_set_regs>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002554:	f107 010d 	add.w	r1, r7, #13
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	2052      	movs	r0, #82	@ 0x52
 800255e:	f7fe fc73 	bl	8000e48 <bmi160_get_regs>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d138      	bne.n	80025e0 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800257c:	7b7b      	ldrb	r3, [r7, #13]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80025ce:	f107 010d 	add.w	r1, r7, #13
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2052      	movs	r0, #82	@ 0x52
 80025d8:	f7fe fc69 	bl	8000eae <bmi160_set_regs>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff f975 	bl	80018ea <set_intr_pin_config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fd98 	bl	8002144 <map_feature_interrupt>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f812 	bl	800264c <config_no_motion_data_src>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800262c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f000 f83e 	bl	80026b8 <config_no_motion_dur_thr>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800265e:	f107 010d 	add.w	r1, r7, #13
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	2059      	movs	r0, #89	@ 0x59
 8002668:	f7fe fbee 	bl	8000e48 <bmi160_get_regs>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d119      	bne.n	80026ac <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800267e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	b25a      	sxtb	r2, r3
 800268e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002692:	4313      	orrs	r3, r2
 8002694:	b25b      	sxtb	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800269a:	f107 010d 	add.w	r1, r7, #13
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	2059      	movs	r0, #89	@ 0x59
 80026a4:	f7fe fc03 	bl	8000eae <bmi160_set_regs>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 80026ce:	2300      	movs	r3, #0
 80026d0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 80026d2:	235f      	movs	r3, #95	@ 0x5f
 80026d4:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80026d6:	f107 010b 	add.w	r1, r7, #11
 80026da:	7b38      	ldrb	r0, [r7, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	f7fe fbb2 	bl	8000e48 <bmi160_get_regs>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14b      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002700:	b2db      	uxtb	r3, r3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002712:	f107 010b 	add.w	r1, r7, #11
 8002716:	7b38      	ldrb	r0, [r7, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	f7fe fbc7 	bl	8000eae <bmi160_set_regs>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12d      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 800272c:	2362      	movs	r3, #98	@ 0x62
 800272e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002730:	f107 010b 	add.w	r1, r7, #11
 8002734:	7b38      	ldrb	r0, [r7, #12]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	f7fe fb85 	bl	8000e48 <bmi160_get_regs>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11e      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	4313      	orrs	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002772:	2361      	movs	r3, #97	@ 0x61
 8002774:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002776:	f107 0108 	add.w	r1, r7, #8
 800277a:	7b38      	ldrb	r0, [r7, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	f7fe fb95 	bl	8000eae <bmi160_set_regs>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027a6:	f107 010d 	add.w	r1, r7, #13
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	2050      	movs	r0, #80	@ 0x50
 80027b0:	f7fe fb4a 	bl	8000e48 <bmi160_get_regs>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d124      	bne.n	800280a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	70da      	strb	r2, [r3, #3]
 80027e6:	e007      	b.n	80027f8 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	22ff      	movs	r2, #255	@ 0xff
 80027f6:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027f8:	f107 010d 	add.w	r1, r7, #13
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2050      	movs	r0, #80	@ 0x50
 8002802:	f7fe fb54 	bl	8000eae <bmi160_set_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff f860 	bl	80018ea <set_intr_pin_config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800282e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fc83 	bl	8002144 <map_feature_interrupt>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f812 	bl	8002876 <config_sig_motion_data_src>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f83e 	bl	80028e2 <config_sig_dur_threshold>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800286a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002888:	f107 010d 	add.w	r1, r7, #13
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	2059      	movs	r0, #89	@ 0x59
 8002892:	f7fe fad9 	bl	8000e48 <bmi160_get_regs>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80028c4:	f107 010d 	add.w	r1, r7, #13
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	2059      	movs	r0, #89	@ 0x59
 80028ce:	f7fe faee 	bl	8000eae <bmi160_set_regs>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80028f6:	f107 010d 	add.w	r1, r7, #13
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	2060      	movs	r0, #96	@ 0x60
 8002900:	f7fe fad5 	bl	8000eae <bmi160_set_regs>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d151      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002910:	f107 010d 	add.w	r1, r7, #13
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	2062      	movs	r0, #98	@ 0x62
 800291a:	f7fe fa95 	bl	8000e48 <bmi160_get_regs>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d144      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	f023 030c 	bic.w	r3, r3, #12
 8002930:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	b25a      	sxtb	r2, r3
 8002946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800294a:	4313      	orrs	r3, r2
 800294c:	b25b      	sxtb	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002958:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b25b      	sxtb	r3, r3
 8002968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800296c:	b25a      	sxtb	r2, r3
 800296e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002972:	4313      	orrs	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	b25a      	sxtb	r2, r3
 8002996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800299a:	4313      	orrs	r3, r2
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a2:	f107 010d 	add.w	r1, r7, #13
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	2062      	movs	r0, #98	@ 0x62
 80029ac:	f7fe fa7f 	bl	8000eae <bmi160_set_regs>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80029d2:	f107 010d 	add.w	r1, r7, #13
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2052      	movs	r0, #82	@ 0x52
 80029dc:	f7fe fa34 	bl	8000e48 <bmi160_get_regs>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11c      	bne.n	8002a26 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002a14:	f107 010d 	add.w	r1, r7, #13
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2052      	movs	r0, #82	@ 0x52
 8002a1e:	f7fe fa46 	bl	8000eae <bmi160_set_regs>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8002a40:	2300      	movs	r3, #0
 8002a42:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8002a52:	2315      	movs	r3, #21
 8002a54:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8002a56:	2303      	movs	r3, #3
 8002a58:	737b      	strb	r3, [r7, #13]
 8002a5a:	e05b      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d104      	bne.n	8002a74 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8002a6a:	232d      	movs	r3, #45	@ 0x2d
 8002a6c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	737b      	strb	r3, [r7, #13]
 8002a72:	e04f      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d104      	bne.n	8002a8c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8002a82:	231d      	movs	r3, #29
 8002a84:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8002a86:	2307      	movs	r3, #7
 8002a88:	737b      	strb	r3, [r7, #13]
 8002a8a:	e043      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a98:	d13c      	bne.n	8002b14 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8002a9a:	f107 010c 	add.w	r1, r7, #12
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	207a      	movs	r0, #122	@ 0x7a
 8002aa4:	f7fe f9d0 	bl	8000e48 <bmi160_get_regs>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12f      	bne.n	8002b14 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	f023 0318 	bic.w	r3, r3, #24
 8002aba:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8002adc:	7b3b      	ldrb	r3, [r7, #12]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8002b14:	f107 010c 	add.w	r1, r7, #12
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	207a      	movs	r0, #122	@ 0x7a
 8002b1e:	f7fe f9c6 	bl	8000eae <bmi160_set_regs>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8002b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002b46:	f107 0115 	add.w	r1, r7, #21
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2050      	movs	r0, #80	@ 0x50
 8002b50:	f7fe f97a 	bl	8000e48 <bmi160_get_regs>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d135      	bne.n	8002bcc <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d114      	bne.n	8002b92 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8002b68:	7d7b      	ldrb	r3, [r7, #21]
 8002b6a:	f023 0320 	bic.w	r3, r3, #32
 8002b6e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	757b      	strb	r3, [r7, #21]
 8002b90:	e013      	b.n	8002bba <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	f023 0310 	bic.w	r3, r3, #16
 8002b98:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002bba:	f107 0115 	add.w	r1, r7, #21
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2050      	movs	r0, #80	@ 0x50
 8002bc4:	f7fe f973 	bl	8000eae <bmi160_set_regs>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7fe fe7f 	bl	80018ea <set_intr_pin_config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11a      	bne.n	8002c2e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff faa2 	bl	8002144 <map_feature_interrupt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 f813 	bl	8002c3a <config_tap_data_src>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f841 	bl	8002cac <config_tap_param>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c4c:	f107 010d 	add.w	r1, r7, #13
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2058      	movs	r0, #88	@ 0x58
 8002c56:	f7fe f8f7 	bl	8000e48 <bmi160_get_regs>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11c      	bne.n	8002ca0 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	f023 0308 	bic.w	r3, r3, #8
 8002c6c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c8e:	f107 010d 	add.w	r1, r7, #13
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	2058      	movs	r0, #88	@ 0x58
 8002c98:	f7fe f909 	bl	8000eae <bmi160_set_regs>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8002cc8:	f107 0114 	add.w	r1, r7, #20
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	2063      	movs	r0, #99	@ 0x63
 8002cd2:	f7fe f8b9 	bl	8000e48 <bmi160_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8002cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d178      	bne.n	8002dd4 <config_tap_param+0x128>
    {
        data = data_array[count];
 8002ce2:	7f3b      	ldrb	r3, [r7, #28]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cec:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d113      	bne.n	8002d1e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8002d02:	7fbb      	ldrb	r3, [r7, #30]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8002d0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8002d32:	7ebb      	ldrb	r3, [r7, #26]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
 8002d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d5a:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8002d5c:	7e7b      	ldrb	r3, [r7, #25]
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	773a      	strb	r2, [r7, #28]
 8002d72:	3320      	adds	r3, #32
 8002d74:	443b      	add	r3, r7
 8002d76:	7fba      	ldrb	r2, [r7, #30]
 8002d78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8002d7c:	7f3b      	ldrb	r3, [r7, #28]
 8002d7e:	3320      	adds	r3, #32
 8002d80:	443b      	add	r3, r7
 8002d82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002d86:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	f023 031f 	bic.w	r3, r3, #31
 8002d9a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8002d9c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b25a      	sxtb	r2, r3
 8002da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002db0:	7f3b      	ldrb	r3, [r7, #28]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	773a      	strb	r2, [r7, #28]
 8002db6:	3320      	adds	r3, #32
 8002db8:	443b      	add	r3, r7
 8002dba:	7fba      	ldrb	r2, [r7, #30]
 8002dbc:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8002dc0:	7f3b      	ldrb	r3, [r7, #28]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	f107 0114 	add.w	r1, r7, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2063      	movs	r0, #99	@ 0x63
 8002dcc:	f7fe f86f 	bl	8000eae <bmi160_set_regs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002df2:	f107 010d 	add.w	r1, r7, #13
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2050      	movs	r0, #80	@ 0x50
 8002dfc:	f7fe f824 	bl	8000e48 <bmi160_get_regs>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11c      	bne.n	8002e46 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8002e0c:	7b7b      	ldrb	r3, [r7, #13]
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e12:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002e34:	f107 010d 	add.w	r1, r7, #13
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2050      	movs	r0, #80	@ 0x50
 8002e3e:	f7fe f836 	bl	8000eae <bmi160_set_regs>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002e64:	2300      	movs	r3, #0
 8002e66:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002e68:	f107 0108 	add.w	r1, r7, #8
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	2065      	movs	r0, #101	@ 0x65
 8002e72:	f7fd ffe9 	bl	8000e48 <bmi160_get_regs>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d170      	bne.n	8002f64 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8002eea:	7a7b      	ldrb	r3, [r7, #9]
 8002eec:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef4:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f0e:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f34:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002f52:	f107 0108 	add.w	r1, r7, #8
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	2065      	movs	r0, #101	@ 0x65
 8002f5c:	f7fd ffa7 	bl	8000eae <bmi160_set_regs>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002f82:	f107 010d 	add.w	r1, r7, #13
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2050      	movs	r0, #80	@ 0x50
 8002f8c:	f7fd ff5c 	bl	8000e48 <bmi160_get_regs>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fbe:	f107 010d 	add.w	r1, r7, #13
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2050      	movs	r0, #80	@ 0x50
 8002fc8:	f7fd ff71 	bl	8000eae <bmi160_set_regs>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002fee:	2300      	movs	r3, #0
 8002ff0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8002ff2:	f107 0108 	add.w	r1, r7, #8
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2067      	movs	r0, #103	@ 0x67
 8002ffc:	f7fd ff24 	bl	8000e48 <bmi160_get_regs>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13d      	bne.n	8003088 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 800300c:	7a3b      	ldrb	r3, [r7, #8]
 800300e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003016:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	4313      	orrs	r3, r2
 8003028:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003038:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800304c:	b25a      	sxtb	r2, r3
 800304e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	7b7b      	ldrb	r3, [r7, #13]
 800306e:	4313      	orrs	r3, r2
 8003070:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003076:	f107 0108 	add.w	r1, r7, #8
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2202      	movs	r2, #2
 800307e:	2067      	movs	r0, #103	@ 0x67
 8003080:	f7fd ff15 	bl	8000eae <bmi160_set_regs>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030a6:	f107 010d 	add.w	r1, r7, #13
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	2051      	movs	r0, #81	@ 0x51
 80030b0:	f7fd feca 	bl	8000e48 <bmi160_get_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11c      	bne.n	80030fa <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80030c0:	7b7b      	ldrb	r3, [r7, #13]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030e8:	f107 010d 	add.w	r1, r7, #13
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	2051      	movs	r0, #81	@ 0x51
 80030f2:	f7fd fedc 	bl	8000eae <bmi160_set_regs>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003118:	f107 010d 	add.w	r1, r7, #13
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	2058      	movs	r0, #88	@ 0x58
 8003122:	f7fd fe91 	bl	8000e48 <bmi160_get_regs>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	b25a      	sxtb	r2, r3
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	4313      	orrs	r3, r2
 800314e:	b25b      	sxtb	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003154:	f107 010d 	add.w	r1, r7, #13
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2058      	movs	r0, #88	@ 0x58
 800315e:	f7fd fea6 	bl	8000eae <bmi160_set_regs>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003182:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <config_low_g_int_settg+0xac>)
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4611      	mov	r1, r2
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	3302      	adds	r3, #2
 8003190:	0c12      	lsrs	r2, r2, #16
 8003192:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	205c      	movs	r0, #92	@ 0x5c
 80031a0:	f7fd fe52 	bl	8000e48 <bmi160_get_regs>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d130      	bne.n	8003212 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	789b      	ldrb	r3, [r3, #2]
 80031bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80031cc:	7abb      	ldrb	r3, [r7, #10]
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	205a      	movs	r0, #90	@ 0x5a
 800320a:	f7fd fe50 	bl	8000eae <bmi160_set_regs>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	080148d8 	.word	0x080148d8

08003224 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003236:	f107 010d 	add.w	r1, r7, #13
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	2051      	movs	r0, #81	@ 0x51
 8003240:	f7fd fe02 	bl	8000e48 <bmi160_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13e      	bne.n	80032ce <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003250:	7b7b      	ldrb	r3, [r7, #13]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	4313      	orrs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	f023 0302 	bic.w	r3, r3, #2
 8003272:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	b25a      	sxtb	r2, r3
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	b25a      	sxtb	r2, r3
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80032bc:	f107 010d 	add.w	r1, r7, #13
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2051      	movs	r0, #81	@ 0x51
 80032c6:	f7fd fdf2 	bl	8000eae <bmi160_set_regs>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80032ec:	f107 010d 	add.w	r1, r7, #13
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	2058      	movs	r0, #88	@ 0x58
 80032f6:	f7fd fda7 	bl	8000e48 <bmi160_get_regs>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800330c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	b25a      	sxtb	r2, r3
 800331c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003320:	4313      	orrs	r3, r2
 8003322:	b25b      	sxtb	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003328:	f107 010d 	add.w	r1, r7, #13
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	2058      	movs	r0, #88	@ 0x58
 8003332:	f7fd fdbc 	bl	8000eae <bmi160_set_regs>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <config_high_g_int_settg+0x88>)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003368:	f107 0108 	add.w	r1, r7, #8
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	205c      	movs	r0, #92	@ 0x5c
 8003372:	f7fd fd69 	bl	8000e48 <bmi160_get_regs>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003382:	7a3b      	ldrb	r3, [r7, #8]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	b25a      	sxtb	r2, r3
 8003398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 80033b0:	f107 0108 	add.w	r1, r7, #8
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	205c      	movs	r0, #92	@ 0x5c
 80033ba:	f7fd fd78 	bl	8000eae <bmi160_set_regs>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	080148d8 	.word	0x080148d8

080033d4 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80033e6:	f107 010f 	add.w	r1, r7, #15
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2053      	movs	r0, #83	@ 0x53
 80033f0:	f7fd fd2a 	bl	8000e48 <bmi160_get_regs>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 80a8 	bne.w	8003552 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3302      	adds	r3, #2
 8003406:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d14a      	bne.n	80034a6 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	b25a      	sxtb	r2, r3
 800342c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003430:	4313      	orrs	r3, r2
 8003432:	b25b      	sxtb	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	b25a      	sxtb	r2, r3
 8003454:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003458:	4313      	orrs	r3, r2
 800345a:	b25b      	sxtb	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	f023 0302 	bic.w	r3, r3, #2
 8003466:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	b25a      	sxtb	r2, r3
 800347c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003480:	4313      	orrs	r3, r2
 8003482:	b25b      	sxtb	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e04c      	b.n	8003540 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ac:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	01db      	lsls	r3, r3, #7
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	f023 0320 	bic.w	r3, r3, #32
 80034f6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	b25a      	sxtb	r2, r3
 800350c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	b25a      	sxtb	r2, r3
 8003534:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003538:	4313      	orrs	r3, r2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003540:	f107 010f 	add.w	r1, r7, #15
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	2053      	movs	r0, #83	@ 0x53
 800354a:	f7fd fcb0 	bl	8000eae <bmi160_set_regs>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003570:	f107 010f 	add.w	r1, r7, #15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	2054      	movs	r0, #84	@ 0x54
 800357a:	f7fd fc65 	bl	8000e48 <bmi160_get_regs>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d146      	bne.n	8003618 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3302      	adds	r3, #2
 800358e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d114      	bne.n	80035c2 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e013      	b.n	80035ea <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	f023 0320 	bic.w	r3, r3, #32
 80035c8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	015b      	lsls	r3, r3, #5
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	4313      	orrs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003606:	f107 010f 	add.w	r1, r7, #15
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	2054      	movs	r0, #84	@ 0x54
 8003610:	f7fd fc4d 	bl	8000eae <bmi160_set_regs>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <set_fifo_full_int+0x1c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003640:	23ff      	movs	r3, #255	@ 0xff
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e019      	b.n	800367a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f81c 	bl	8003686 <enable_fifo_full_int>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe f944 	bl	80018ea <set_intr_pin_config>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe fe01 	bl	8002278 <map_hardware_interrupt>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003694:	f107 010e 	add.w	r1, r7, #14
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	2051      	movs	r0, #81	@ 0x51
 800369e:	f7fd fbd3 	bl	8000e48 <bmi160_get_regs>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11b      	bne.n	80036e6 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80036d4:	f107 010e 	add.w	r1, r7, #14
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2051      	movs	r0, #81	@ 0x51
 80036de:	f7fd fbe6 	bl	8000eae <bmi160_set_regs>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <set_fifo_watermark_int+0x1c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800370e:	23ff      	movs	r3, #255	@ 0xff
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e019      	b.n	8003748 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f81c 	bl	8003754 <enable_fifo_wtm_int>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f8dd 	bl	80018ea <set_intr_pin_config>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fd9a 	bl	8002278 <map_hardware_interrupt>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003762:	f107 010e 	add.w	r1, r7, #14
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	2051      	movs	r0, #81	@ 0x51
 800376c:	f7fd fb6c 	bl	8000e48 <bmi160_get_regs>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11b      	bne.n	80037b4 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	b25a      	sxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	b25b      	sxtb	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80037a2:	f107 010e 	add.w	r1, r7, #14
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	2051      	movs	r0, #81	@ 0x51
 80037ac:	f7fd fb7f 	bl	8000eae <bmi160_set_regs>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80037ca:	f107 010e 	add.w	r1, r7, #14
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	201b      	movs	r0, #27
 80037d4:	f7fd fb38 	bl	8000e48 <bmi160_get_regs>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fe f888 	bl	8001920 <null_ptr_check>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800381c:	23ff      	movs	r3, #255	@ 0xff
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e032      	b.n	8003888 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003822:	f107 010e 	add.w	r1, r7, #14
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	2077      	movs	r0, #119	@ 0x77
 800382c:	f7fd fb0c 	bl	8000e48 <bmi160_get_regs>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d125      	bne.n	8003888 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	b25a      	sxtb	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	b25b      	sxtb	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385e:	b25a      	sxtb	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003876:	f107 010e 	add.w	r1, r7, #14
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2077      	movs	r0, #119	@ 0x77
 8003880:	f7fd fb15 	bl	8000eae <bmi160_set_regs>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 800389e:	2301      	movs	r3, #1
 80038a0:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80038a2:	2303      	movs	r3, #3
 80038a4:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80038aa:	f107 011c 	add.w	r1, r7, #28
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	207e      	movs	r0, #126	@ 0x7e
 80038b4:	f7fd fafb 	bl	8000eae <bmi160_set_regs>
 80038b8:	4603      	mov	r3, r0
 80038ba:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80038bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d141      	bne.n	8003948 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80038c4:	f107 031d 	add.w	r3, r7, #29
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff78 	bl	80037c0 <get_foc_status>
 80038d0:	4603      	mov	r3, r0
 80038d2:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80038d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d112      	bne.n	8003902 <trigger_foc+0x6e>
 80038dc:	7f7b      	ldrb	r3, [r7, #29]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d025      	beq.n	800392e <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80038e2:	e00e      	b.n	8003902 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2019      	movs	r0, #25
 80038ea:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80038ec:	f107 031d 	add.w	r3, r7, #29
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff64 	bl	80037c0 <get_foc_status>
 80038f8:	4603      	mov	r3, r0
 80038fa:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
 80038fe:	3301      	adds	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003902:	7f7b      	ldrb	r3, [r7, #29]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <trigger_foc+0x7a>
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	2b1f      	cmp	r3, #31
 800390c:	d9ea      	bls.n	80038e4 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800390e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <trigger_foc+0x96>
 8003916:	7f7b      	ldrb	r3, [r7, #29]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fd19 	bl	8001356 <bmi160_get_offsets>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 800392a:	23f5      	movs	r3, #245	@ 0xf5
 800392c:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800392e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8003936:	f107 0108 	add.w	r1, r7, #8
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2214      	movs	r2, #20
 800393e:	200c      	movs	r0, #12
 8003940:	f7fd fa82 	bl	8000e48 <bmi160_get_regs>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 800395c:	f000 f8ec 	bl	8003b38 <set_bmi160_Ares>
	set_bmi160_Gres();
 8003960:	f000 f916 	bl	8003b90 <set_bmi160_Gres>
	get_bmi160_Ares();
 8003964:	f000 f946 	bl	8003bf4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8003968:	f000 f97a 	bl	8003c60 <get_bmi160_Gres>

    sensor.id = 0;
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <BMI160_init+0x164>)
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <BMI160_init+0x164>)
 8003974:	2200      	movs	r2, #0
 8003976:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8003978:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab8 <BMI160_init+0x164>)
 800397a:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <BMI160_init+0x168>)
 800397c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <BMI160_init+0x164>)
 8003980:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac0 <BMI160_init+0x16c>)
 8003982:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <BMI160_init+0x164>)
 8003986:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <BMI160_init+0x170>)
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <BMI160_init+0x164>)
 800398c:	2220      	movs	r2, #32
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8003990:	4849      	ldr	r0, [pc, #292]	@ (8003ab8 <BMI160_init+0x164>)
 8003992:	f7fd fb3d 	bl	8001010 <bmi160_soft_reset>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <BMI160_init+0x164>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	20c8      	movs	r0, #200	@ 0xc8
 80039a0:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80039a2:	4845      	ldr	r0, [pc, #276]	@ (8003ab8 <BMI160_init+0x164>)
 80039a4:	f7fd fae6 	bl	8000f74 <bmi160_init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80039b8:	89ba      	ldrh	r2, [r7, #12]
 80039ba:	f107 010b 	add.w	r1, r7, #11
 80039be:	7bb8      	ldrb	r0, [r7, #14]
 80039c0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <BMI160_init+0x164>)
 80039c2:	f7fd fa41 	bl	8000e48 <bmi160_get_regs>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <BMI160_init+0x164>)
 80039cc:	220b      	movs	r2, #11
 80039ce:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <BMI160_init+0x164>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80039d8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <BMI160_init+0x174>)
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <BMI160_init+0x164>)
 80039de:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80039e0:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <BMI160_init+0x164>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2064      	movs	r0, #100	@ 0x64
 80039e6:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80039e8:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <BMI160_init+0x164>)
 80039ea:	2211      	movs	r2, #17
 80039ec:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80039ee:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <BMI160_init+0x164>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2064      	movs	r0, #100	@ 0x64
 80039f4:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <BMI160_init+0x164>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <BMI160_init+0x164>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <BMI160_init+0x164>)
 8003a06:	220b      	movs	r2, #11
 8003a08:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <BMI160_init+0x164>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2064      	movs	r0, #100	@ 0x64
 8003a10:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <BMI160_init+0x178>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <BMI160_init+0x164>)
 8003a18:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <BMI160_init+0x164>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2064      	movs	r0, #100	@ 0x64
 8003a20:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <BMI160_init+0x164>)
 8003a24:	2215      	movs	r2, #21
 8003a26:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <BMI160_init+0x164>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2064      	movs	r0, #100	@ 0x64
 8003a2e:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <BMI160_init+0x164>)
 8003a32:	2202      	movs	r2, #2
 8003a34:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <BMI160_init+0x164>)
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	2064      	movs	r0, #100	@ 0x64
 8003a3c:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8003a3e:	481e      	ldr	r0, [pc, #120]	@ (8003ab8 <BMI160_init+0x164>)
 8003a40:	f7fd fb21 	bl	8001086 <bmi160_set_sens_conf>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8003a48:	f000 f844 	bl	8003ad4 <start_foc>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a5e:	7893      	ldrb	r3, [r2, #2]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a68:	7893      	ldrb	r3, [r2, #2]
 8003a6a:	f36f 0341 	bfc	r3, #1, #1
 8003a6e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a72:	7893      	ldrb	r3, [r2, #2]
 8003a74:	f36f 0382 	bfc	r3, #2, #1
 8003a78:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a7c:	7893      	ldrb	r3, [r2, #2]
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a86:	7893      	ldrb	r3, [r2, #2]
 8003a88:	f36f 1304 	bfc	r3, #4, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a90:	8853      	ldrh	r3, [r2, #2]
 8003a92:	f36f 1348 	bfc	r3, #5, #4
 8003a96:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8003a98:	4907      	ldr	r1, [pc, #28]	@ (8003ab8 <BMI160_init+0x164>)
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a9c:	f7fd fb4e 	bl	800113c <bmi160_set_int_config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	761a      	strb	r2, [r3, #24]
    return rslt;
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000030c 	.word	0x2000030c
 8003abc:	08003ce9 	.word	0x08003ce9
 8003ac0:	08003d2d 	.word	0x08003d2d
 8003ac4:	08004df1 	.word	0x08004df1
 8003ac8:	20000356 	.word	0x20000356
 8003acc:	20000357 	.word	0x20000357
 8003ad0:	2000034c 	.word	0x2000034c

08003ad4 <start_foc>:

int8_t start_foc()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <start_foc+0x58>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <start_foc+0x58>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <start_foc+0x58>)
 8003aec:	2203      	movs	r2, #3
 8003aee:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <start_foc+0x58>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <start_foc+0x5c>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2064      	movs	r0, #100	@ 0x64
 8003afc:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <start_foc+0x58>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <start_foc+0x58>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <start_foc+0x5c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	2064      	movs	r0, #100	@ 0x64
 8003b10:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8003b12:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <start_foc+0x5c>)
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <start_foc+0x60>)
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <start_foc+0x58>)
 8003b18:	f7fd fb9c 	bl	8001254 <bmi160_start_foc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000338 	.word	0x20000338
 8003b30:	2000030c 	.word	0x2000030c
 8003b34:	20000340 	.word	0x20000340

08003b38 <set_bmi160_Ares>:

	return rslt;
}

void set_bmi160_Ares()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <set_bmi160_Ares+0x50>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81a      	bhi.n	8003b7c <set_bmi160_Ares+0x44>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <set_bmi160_Ares+0x14>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b75 	.word	0x08003b75
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
			break;
 8003b62:	e00b      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b66:	2205      	movs	r2, #5
 8003b68:	701a      	strb	r2, [r3, #0]
			break;
 8003b6a:	e007      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
			break;
 8003b72:	e003      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	701a      	strb	r2, [r3, #0]
			break;
 8003b7a:	bf00      	nop
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	20000356 	.word	0x20000356

08003b90 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <set_bmi160_Gres+0x5c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d820      	bhi.n	8003be0 <set_bmi160_Gres+0x50>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <set_bmi160_Gres+0x14>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
			break;
 8003bbe:	e00f      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	701a      	strb	r2, [r3, #0]
			break;
 8003bc6:	e00b      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
			break;
 8003bce:	e007      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
			break;
 8003bd6:	e003      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
			break;
 8003bde:	bf00      	nop
	}
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000009 	.word	0x20000009
 8003bf0:	20000357 	.word	0x20000357

08003bf4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <get_bmi160_Ares+0x64>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d826      	bhi.n	8003c4e <get_bmi160_Ares+0x5a>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <get_bmi160_Ares+0x14>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003c27 	.word	0x08003c27
 8003c10:	08003c31 	.word	0x08003c31
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c45 	.word	0x08003c45
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c22:	601a      	str	r2, [r3, #0]
			break;
 8003c24:	e013      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c28:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e00e      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c32:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003c36:	601a      	str	r2, [r3, #0]
			break;
 8003c38:	e009      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c3c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8003c40:	601a      	str	r2, [r3, #0]
			break;
 8003c42:	e004      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c46:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8003c4a:	601a      	str	r2, [r3, #0]
			break;
 8003c4c:	bf00      	nop
	}
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	2000000a 	.word	0x2000000a
 8003c5c:	20000358 	.word	0x20000358

08003c60 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <get_bmi160_Gres+0x68>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d828      	bhi.n	8003cbe <get_bmi160_Gres+0x5e>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <get_bmi160_Gres+0x14>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cb7 	.word	0x08003cb7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <get_bmi160_Gres+0x6c>)
 8003c8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c92:	601a      	str	r2, [r3, #0]
			break;
 8003c94:	e013      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <get_bmi160_Gres+0x74>)
 8003c9a:	601a      	str	r2, [r3, #0]
			break;
 8003c9c:	e00f      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <get_bmi160_Gres+0x78>)
 8003ca2:	601a      	str	r2, [r3, #0]
			break;
 8003ca4:	e00b      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <get_bmi160_Gres+0x7c>)
 8003caa:	601a      	str	r2, [r3, #0]
			break;
 8003cac:	e007      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce0 <get_bmi160_Gres+0x80>)
 8003cb2:	601a      	str	r2, [r3, #0]
			break;
 8003cb4:	e003      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <get_bmi160_Gres+0x84>)
 8003cba:	601a      	str	r2, [r3, #0]
			break;
 8003cbc:	bf00      	nop
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	2000000b 	.word	0x2000000b
 8003ccc:	20000358 	.word	0x20000358
 8003cd0:	2000035c 	.word	0x2000035c
 8003cd4:	43833333 	.word	0x43833333
 8003cd8:	43033333 	.word	0x43033333
 8003cdc:	42833333 	.word	0x42833333
 8003ce0:	42033333 	.word	0x42033333
 8003ce4:	41833333 	.word	0x41833333

08003ce8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	603a      	str	r2, [r7, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	71bb      	strb	r3, [r7, #6]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	2364      	movs	r3, #100	@ 0x64
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	21d2      	movs	r1, #210	@ 0xd2
 8003d08:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d0a:	f003 f983 	bl	8007014 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	9200      	str	r2, [sp, #0]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	21d2      	movs	r1, #210	@ 0xd2
 8003d18:	4803      	ldr	r0, [pc, #12]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d1a:	f003 fa93 	bl	8007244 <HAL_I2C_Master_Receive>
	return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000650 	.word	0x20000650

08003d2c <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	603a      	str	r2, [r7, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	71bb      	strb	r3, [r7, #6]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	480a      	ldr	r0, [pc, #40]	@ (8003d78 <SensorAPI_I2Cx_Write+0x4c>)
 8003d50:	f00e fedd 	bl	8012b0e <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2264      	movs	r2, #100	@ 0x64
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d60:	21d2      	movs	r1, #210	@ 0xd2
 8003d62:	4806      	ldr	r0, [pc, #24]	@ (8003d7c <SensorAPI_I2Cx_Write+0x50>)
 8003d64:	f003 f956 	bl	8007014 <HAL_I2C_Master_Transmit>
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000360 	.word	0x20000360
 8003d78:	20000361 	.word	0x20000361
 8003d7c:	20000650 	.word	0x20000650

08003d80 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(TIMING_GPIO_Port, TIMING_Pin);
 8003dec:	2101      	movs	r1, #1
 8003dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003df2:	f003 f837 	bl	8006e64 <HAL_GPIO_TogglePin>
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e00a      	b.n	8003e12 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  mic = (uint16_t) rawValues[0];
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003dfe:	881a      	ldrh	r2, [r3, #0]
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e02:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8003e04:	4b0a      	ldr	r3, [pc, #40]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e0a:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3ef      	bcc.n	8003dfc <HAL_TIM_PeriodElapsedCallback+0x18>
	  }
	  flag = 1;
 8003e1c:	4b07      	ldr	r3, [pc, #28]	@ (8003e3c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200006f8 	.word	0x200006f8
 8003e30:	200006f2 	.word	0x200006f2
 8003e34:	200006f4 	.word	0x200006f4
 8003e38:	2000058c 	.word	0x2000058c
 8003e3c:	200006fc 	.word	0x200006fc

08003e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e46:	f000 ff4d 	bl	8004ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e4a:	f000 f8a7 	bl	8003f9c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003e4e:	f000 f909 	bl	8004064 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e52:	f000 fa4d 	bl	80042f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e56:	f000 fa39 	bl	80042cc <MX_DMA_Init>
  MX_ADC1_Init();
 8003e5a:	f000 f935 	bl	80040c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8003e5e:	f000 f9e7 	bl	8004230 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8003e62:	f00d fb41 	bl	80114e8 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003e66:	f000 f9a3 	bl	80041b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	493f      	ldr	r1, [pc, #252]	@ (8003f6c <main+0x12c>)
 8003e6e:	4840      	ldr	r0, [pc, #256]	@ (8003f70 <main+0x130>)
 8003e70:	f001 fb16 	bl	80054a0 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8003e74:	483f      	ldr	r0, [pc, #252]	@ (8003f74 <main+0x134>)
 8003e76:	f007 ff57 	bl	800bd28 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8003e7a:	bf00      	nop
 8003e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <main+0x138>)
 8003e7e:	466c      	mov	r4, sp
 8003e80:	f103 0210 	add.w	r2, r3, #16
 8003e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e8c:	f7ff fd62 	bl	8003954 <BMI160_init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d0f2      	beq.n	8003e7c <main+0x3c>

  if (imu_t.INIT_OK_i8 == TRUE){
 8003e96:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <main+0x138>)
 8003e98:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d102      	bne.n	8003ea6 <main+0x66>
	  BSP_LED_On(LED_RED);
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f000 fde7 	bl	8004a74 <BSP_LED_On>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 fdaa 	bl	8004a00 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8003eac:	2001      	movs	r0, #1
 8003eae:	f000 fda7 	bl	8004a00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003eb2:	2002      	movs	r0, #2
 8003eb4:	f000 fda4 	bl	8004a00 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f000 fdf4 	bl	8004aa8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f000 fdf0 	bl	8004aa8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8003ec8:	2101      	movs	r1, #1
 8003eca:	2002      	movs	r0, #2
 8003ecc:	f000 fdec 	bl	8004aa8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f7c <main+0x13c>)
 8003ed2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ed6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003ed8:	4b28      	ldr	r3, [pc, #160]	@ (8003f7c <main+0x13c>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003ede:	4b27      	ldr	r3, [pc, #156]	@ (8003f7c <main+0x13c>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003ee4:	4b25      	ldr	r3, [pc, #148]	@ (8003f7c <main+0x13c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003eea:	4b24      	ldr	r3, [pc, #144]	@ (8003f7c <main+0x13c>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003ef0:	4922      	ldr	r1, [pc, #136]	@ (8003f7c <main+0x13c>)
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f000 fe48 	bl	8004b88 <BSP_COM_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <main+0xc2>
  {
    Error_Handler();
 8003efe:	f000 fa5d 	bl	80043bc <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8003f02:	4b1f      	ldr	r3, [pc, #124]	@ (8003f80 <main+0x140>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d1fb      	bne.n	8003f02 <main+0xc2>

		  HAL_GPIO_TogglePin(SIGNAL_GPIO_Port, SIGNAL_Pin);
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f10:	f002 ffa8 	bl	8006e64 <HAL_GPIO_TogglePin>
		  //HAL_GPIO_WritePin(SIGNAL_GPIO_Port, SIGNAL_Pin,GPIO_PIN_SET);
		  if (counter == 32000){
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <main+0x144>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003f1c:	d103      	bne.n	8003f26 <main+0xe6>
			  counter = 0;
 8003f1e:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <main+0x144>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	801a      	strh	r2, [r3, #0]
 8003f24:	e005      	b.n	8003f32 <main+0xf2>
		  }
		  else{
			  counter++;
 8003f26:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <main+0x144>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <main+0x144>)
 8003f30:	801a      	strh	r2, [r3, #0]
		  }
		  update_data_packet_audio_buffered(mic, mic2, USB_buffer, &packet_length);
 8003f32:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <main+0x148>)
 8003f34:	8818      	ldrh	r0, [r3, #0]
 8003f36:	4b15      	ldr	r3, [pc, #84]	@ (8003f8c <main+0x14c>)
 8003f38:	8819      	ldrh	r1, [r3, #0]
 8003f3a:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <main+0x150>)
 8003f3c:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <main+0x154>)
 8003f3e:	f000 fa10 	bl	8004362 <update_data_packet_audio_buffered>
		  //prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);
		  //HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
		  if (counter % 100 == 0){
 8003f42:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <main+0x144>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <main+0x158>)
 8003f48:	fba2 1203 	umull	r1, r2, r2, r3
 8003f4c:	0952      	lsrs	r2, r2, #5
 8003f4e:	2164      	movs	r1, #100	@ 0x64
 8003f50:	fb01 f202 	mul.w	r2, r1, r2
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <main+0x122>
			  //CDC_Transmit_FS(USB_buffer, packet_length);
			  packet_length = 0;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <main+0x150>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8003f62:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <main+0x140>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 8003f68:	e7cb      	b.n	8003f02 <main+0xc2>
 8003f6a:	bf00      	nop
 8003f6c:	200006f8 	.word	0x200006f8
 8003f70:	2000058c 	.word	0x2000058c
 8003f74:	200006a4 	.word	0x200006a4
 8003f78:	20000560 	.word	0x20000560
 8003f7c:	2000057c 	.word	0x2000057c
 8003f80:	200006fc 	.word	0x200006fc
 8003f84:	200006f0 	.word	0x200006f0
 8003f88:	200006f2 	.word	0x200006f2
 8003f8c:	200006f4 	.word	0x200006f4
 8003f90:	20000900 	.word	0x20000900
 8003f94:	20000700 	.word	0x20000700
 8003f98:	51eb851f 	.word	0x51eb851f

08003f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b09a      	sub	sp, #104	@ 0x68
 8003fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fa2:	f107 0320 	add.w	r3, r7, #32
 8003fa6:	2248      	movs	r2, #72	@ 0x48
 8003fa8:	2100      	movs	r1, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	f00e fd2f 	bl	8012a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fb0:	1d3b      	adds	r3, r7, #4
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	615a      	str	r2, [r3, #20]
 8003fc0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc2:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <SystemClock_Config+0xc4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fca:	4a25      	ldr	r2, [pc, #148]	@ (8004060 <SystemClock_Config+0xc4>)
 8003fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <SystemClock_Config+0xc4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fee:	2340      	movs	r3, #64	@ 0x40
 8003ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003ffe:	2308      	movs	r3, #8
 8004000:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004002:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004006:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004008:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800400c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800400e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004012:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004014:	f107 0320 	add.w	r3, r7, #32
 8004018:	4618      	mov	r0, r3
 800401a:	f006 fbf5 	bl	800a808 <HAL_RCC_OscConfig>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004024:	f000 f9ca 	bl	80043bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004028:	236f      	movs	r3, #111	@ 0x6f
 800402a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800402c:	2303      	movs	r3, #3
 800402e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004030:	2300      	movs	r3, #0
 8004032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004034:	2300      	movs	r3, #0
 8004036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004040:	2300      	movs	r3, #0
 8004042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	2103      	movs	r1, #3
 8004048:	4618      	mov	r0, r3
 800404a:	f006 ff51 	bl	800aef0 <HAL_RCC_ClockConfig>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004054:	f000 f9b2 	bl	80043bc <Error_Handler>
  }
}
 8004058:	bf00      	nop
 800405a:	3768      	adds	r7, #104	@ 0x68
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	58000400 	.word	0x58000400

08004064 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b094      	sub	sp, #80	@ 0x50
 8004068:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800406a:	463b      	mov	r3, r7
 800406c:	2250      	movs	r2, #80	@ 0x50
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f00e fccc 	bl	8012a0e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8004076:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800407a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800407c:	2306      	movs	r3, #6
 800407e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004080:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004084:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800408a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800408c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004090:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004092:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8004096:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004098:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800409c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800409e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80040a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80040a4:	2300      	movs	r3, #0
 80040a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ac:	463b      	mov	r3, r7
 80040ae:	4618      	mov	r0, r3
 80040b0:	f007 fb5b 	bl	800b76a <HAL_RCCEx_PeriphCLKConfig>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80040ba:	f000 f97f 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80040be:	bf00      	nop
 80040c0:	3750      	adds	r7, #80	@ 0x50
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040ce:	463b      	mov	r3, r7
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040de:	4b30      	ldr	r3, [pc, #192]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 80040e0:	4a30      	ldr	r2, [pc, #192]	@ (80041a4 <MX_ADC1_Init+0xdc>)
 80040e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80040e4:	4b2e      	ldr	r3, [pc, #184]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 80040e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040ec:	4b2c      	ldr	r3, [pc, #176]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040f2:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040f8:	4b29      	ldr	r3, [pc, #164]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040fe:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004100:	2204      	movs	r2, #4
 8004102:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004104:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004106:	2200      	movs	r2, #0
 8004108:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800410a:	4b25      	ldr	r3, [pc, #148]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 800410c:	2201      	movs	r2, #1
 800410e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004110:	4b23      	ldr	r3, [pc, #140]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004112:	2202      	movs	r2, #2
 8004114:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004116:	4b22      	ldr	r3, [pc, #136]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800411e:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004124:	4b1e      	ldr	r3, [pc, #120]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004126:	2200      	movs	r2, #0
 8004128:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800412a:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004132:	4b1b      	ldr	r3, [pc, #108]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004134:	2200      	movs	r2, #0
 8004136:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8004138:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004140:	4817      	ldr	r0, [pc, #92]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 8004142:	f001 f861 	bl	8005208 <HAL_ADC_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800414c:	f000 f936 	bl	80043bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004150:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <MX_ADC1_Init+0xe0>)
 8004152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004154:	2306      	movs	r3, #6
 8004156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8004158:	2306      	movs	r3, #6
 800415a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800415c:	237f      	movs	r3, #127	@ 0x7f
 800415e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004160:	2304      	movs	r3, #4
 8004162:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004168:	463b      	mov	r3, r7
 800416a:	4619      	mov	r1, r3
 800416c:	480c      	ldr	r0, [pc, #48]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 800416e:	f001 fbf9 	bl	8005964 <HAL_ADC_ConfigChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8004178:	f000 f920 	bl	80043bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <MX_ADC1_Init+0xe4>)
 800417e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004180:	230c      	movs	r3, #12
 8004182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004184:	463b      	mov	r3, r7
 8004186:	4619      	mov	r1, r3
 8004188:	4805      	ldr	r0, [pc, #20]	@ (80041a0 <MX_ADC1_Init+0xd8>)
 800418a:	f001 fbeb 	bl	8005964 <HAL_ADC_ConfigChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8004194:	f000 f912 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2000058c 	.word	0x2000058c
 80041a4:	50040000 	.word	0x50040000
 80041a8:	04300002 	.word	0x04300002
 80041ac:	08600004 	.word	0x08600004

080041b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041b6:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <MX_I2C1_Init+0x78>)
 80041b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80041ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041bc:	4a1b      	ldr	r2, [pc, #108]	@ (800422c <MX_I2C1_Init+0x7c>)
 80041be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041c0:	4b18      	ldr	r3, [pc, #96]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041c6:	4b17      	ldr	r3, [pc, #92]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041cc:	4b15      	ldr	r3, [pc, #84]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041d2:	4b14      	ldr	r3, [pc, #80]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80041d8:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041da:	2200      	movs	r2, #0
 80041dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041de:	4b11      	ldr	r3, [pc, #68]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041ea:	480e      	ldr	r0, [pc, #56]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041ec:	f002 fe77 	bl	8006ede <HAL_I2C_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041f6:	f000 f8e1 	bl	80043bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041fa:	2100      	movs	r1, #0
 80041fc:	4809      	ldr	r0, [pc, #36]	@ (8004224 <MX_I2C1_Init+0x74>)
 80041fe:	f004 f995 	bl	800852c <HAL_I2CEx_ConfigAnalogFilter>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004208:	f000 f8d8 	bl	80043bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800420c:	2100      	movs	r1, #0
 800420e:	4805      	ldr	r0, [pc, #20]	@ (8004224 <MX_I2C1_Init+0x74>)
 8004210:	f004 f9d7 	bl	80085c2 <HAL_I2CEx_ConfigDigitalFilter>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800421a:	f000 f8cf 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800421e:	bf00      	nop
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000650 	.word	0x20000650
 8004228:	40005400 	.word	0x40005400
 800422c:	10b17db5 	.word	0x10b17db5

08004230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	f107 0310 	add.w	r3, r7, #16
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800424e:	4b1e      	ldr	r3, [pc, #120]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004250:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004254:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8004256:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004258:	2201      	movs	r2, #1
 800425a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <MX_TIM2_Init+0x98>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800-1;
 8004262:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004264:	f240 321f 	movw	r2, #799	@ 0x31f
 8004268:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <MX_TIM2_Init+0x98>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004270:	4b15      	ldr	r3, [pc, #84]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004272:	2280      	movs	r2, #128	@ 0x80
 8004274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004276:	4814      	ldr	r0, [pc, #80]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004278:	f007 fcfe 	bl	800bc78 <HAL_TIM_Base_Init>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004282:	f000 f89b 	bl	80043bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800428a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	4619      	mov	r1, r3
 8004292:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <MX_TIM2_Init+0x98>)
 8004294:	f007 fe9d 	bl	800bfd2 <HAL_TIM_ConfigClockSource>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800429e:	f000 f88d 	bl	80043bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80042a2:	2320      	movs	r3, #32
 80042a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <MX_TIM2_Init+0x98>)
 80042b0:	f008 f88c 	bl	800c3cc <HAL_TIMEx_MasterConfigSynchronization>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80042ba:	f000 f87f 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042be:	bf00      	nop
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	200006a4 	.word	0x200006a4

080042cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80042d0:	2004      	movs	r0, #4
 80042d2:	f7ff fd55 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80042d6:	2001      	movs	r0, #1
 80042d8:	f7ff fd52 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042dc:	2200      	movs	r2, #0
 80042de:	2100      	movs	r1, #0
 80042e0:	200b      	movs	r0, #11
 80042e2:	f002 f920 	bl	8006526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042e6:	200b      	movs	r0, #11
 80042e8:	f002 f937 	bl	800655a <HAL_NVIC_EnableIRQ>

}
 80042ec:	bf00      	nop
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004304:	2004      	movs	r0, #4
 8004306:	f7ff fd54 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	2002      	movs	r0, #2
 800430c:	f7ff fd51 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004310:	2001      	movs	r0, #1
 8004312:	f7ff fd4e 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIMING_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 8004316:	2200      	movs	r2, #0
 8004318:	2103      	movs	r1, #3
 800431a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800431e:	f002 fd89 	bl	8006e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 8004322:	2301      	movs	r3, #1
 8004324:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004326:	2301      	movs	r3, #1
 8004328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800432e:	2301      	movs	r3, #1
 8004330:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	4619      	mov	r1, r3
 8004336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800433a:	f002 fc0b 	bl	8006b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 800433e:	2302      	movs	r3, #2
 8004340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004342:	2301      	movs	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 800434e:	1d3b      	adds	r3, r7, #4
 8004350:	4619      	mov	r1, r3
 8004352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004356:	f002 fbfd 	bl	8006b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <update_data_packet_audio_buffered>:
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
}
void update_data_packet_audio_buffered(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	60ba      	str	r2, [r7, #8]
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	4603      	mov	r3, r0
 800436e:	81fb      	strh	r3, [r7, #14]
 8004370:	460b      	mov	r3, r1
 8004372:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
	if (*length == 0){
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d107      	bne.n	800438c <update_data_packet_audio_buffered+0x2a>
		buffer[0] = (uint8_t)-128;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	701a      	strb	r2, [r3, #0]
		(*length)++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
	}
    memcpy(&buffer[*length], &var1, sizeof(uint16_t));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	4413      	add	r3, r2
 8004394:	89fa      	ldrh	r2, [r7, #14]
 8004396:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[*length + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3302      	adds	r3, #2
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	89ba      	ldrh	r2, [r7, #12]
 80043a4:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    (*length) += 2*sizeof(uint16_t);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	1d1a      	adds	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043c0:	b672      	cpsid	i
}
 80043c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <Error_Handler+0x8>

080043c8 <LL_AHB2_GRP1_EnableClock>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4313      	orrs	r3, r2
 80043de:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043ec:	68fb      	ldr	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004406:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4313      	orrs	r3, r2
 8004410:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004416:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4013      	ands	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800441e:	68fb      	ldr	r3, [r7, #12]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 030c 	add.w	r3, r7, #12
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a26      	ldr	r2, [pc, #152]	@ (80044f4 <HAL_ADC_MspInit+0xb8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d145      	bne.n	80044ea <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800445e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004462:	f7ff ffb1 	bl	80043c8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004466:	2004      	movs	r0, #4
 8004468:	f7ff ffae 	bl	80043c8 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800446c:	2303      	movs	r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004470:	2303      	movs	r3, #3
 8004472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004474:	2300      	movs	r3, #0
 8004476:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	4619      	mov	r1, r3
 800447e:	481e      	ldr	r0, [pc, #120]	@ (80044f8 <HAL_ADC_MspInit+0xbc>)
 8004480:	f002 fb68 	bl	8006b54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 8004486:	4a1e      	ldr	r2, [pc, #120]	@ (8004500 <HAL_ADC_MspInit+0xc4>)
 8004488:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800448a:	4b1c      	ldr	r3, [pc, #112]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 800448c:	2205      	movs	r2, #5
 800448e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004490:	4b1a      	ldr	r3, [pc, #104]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 8004492:	2200      	movs	r2, #0
 8004494:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004496:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 8004498:	2200      	movs	r2, #0
 800449a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800449c:	4b17      	ldr	r3, [pc, #92]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80044a2:	4b16      	ldr	r3, [pc, #88]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044aa:	4b14      	ldr	r3, [pc, #80]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044b4:	2220      	movs	r2, #32
 80044b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044b8:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044be:	480f      	ldr	r0, [pc, #60]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044c0:	f002 f866 	bl	8006590 <HAL_DMA_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 80044ca:	f7ff ff77 	bl	80043bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a0a      	ldr	r2, [pc, #40]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80044d4:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <HAL_ADC_MspInit+0xc0>)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	2102      	movs	r1, #2
 80044de:	2012      	movs	r0, #18
 80044e0:	f002 f821 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80044e4:	2012      	movs	r0, #18
 80044e6:	f002 f838 	bl	800655a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80044ea:	bf00      	nop
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	50040000 	.word	0x50040000
 80044f8:	48000800 	.word	0x48000800
 80044fc:	200005f0 	.word	0x200005f0
 8004500:	40020008 	.word	0x40020008

08004504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b09c      	sub	sp, #112	@ 0x70
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800451c:	f107 030c 	add.w	r3, r7, #12
 8004520:	2250      	movs	r2, #80	@ 0x50
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f00e fa72 	bl	8012a0e <memset>
  if(hi2c->Instance==I2C1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <HAL_I2C_MspInit+0xa8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d136      	bne.n	80045a2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004534:	2304      	movs	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004538:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800453c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800453e:	f107 030c 	add.w	r3, r7, #12
 8004542:	4618      	mov	r0, r3
 8004544:	f007 f911 	bl	800b76a <HAL_RCCEx_PeriphCLKConfig>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800454e:	f7ff ff35 	bl	80043bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004552:	2002      	movs	r0, #2
 8004554:	f7ff ff38 	bl	80043c8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004558:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800455c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800455e:	2312      	movs	r3, #18
 8004560:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004566:	2300      	movs	r3, #0
 8004568:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800456a:	2304      	movs	r3, #4
 800456c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800456e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004572:	4619      	mov	r1, r3
 8004574:	480e      	ldr	r0, [pc, #56]	@ (80045b0 <HAL_I2C_MspInit+0xac>)
 8004576:	f002 faed 	bl	8006b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800457a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800457e:	f7ff ff3c 	bl	80043fa <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	201e      	movs	r0, #30
 8004588:	f001 ffcd 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800458c:	201e      	movs	r0, #30
 800458e:	f001 ffe4 	bl	800655a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	201f      	movs	r0, #31
 8004598:	f001 ffc5 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800459c:	201f      	movs	r0, #31
 800459e:	f001 ffdc 	bl	800655a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80045a2:	bf00      	nop
 80045a4:	3770      	adds	r7, #112	@ 0x70
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40005400 	.word	0x40005400
 80045b0:	48000400 	.word	0x48000400

080045b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c4:	d10a      	bne.n	80045dc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7ff ff17 	bl	80043fa <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80045cc:	2200      	movs	r2, #0
 80045ce:	2100      	movs	r1, #0
 80045d0:	201c      	movs	r0, #28
 80045d2:	f001 ffa8 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80045d6:	201c      	movs	r0, #28
 80045d8:	f001 ffbf 	bl	800655a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <NMI_Handler+0x4>

080045ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <HardFault_Handler+0x4>

080045f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045f8:	bf00      	nop
 80045fa:	e7fd      	b.n	80045f8 <MemManage_Handler+0x4>

080045fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <BusFault_Handler+0x4>

08004604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004608:	bf00      	nop
 800460a:	e7fd      	b.n	8004608 <UsageFault_Handler+0x4>

0800460c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004610:	bf00      	nop
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800463a:	f000 fbad 	bl	8004d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	bd80      	pop	{r7, pc}

08004642 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004646:	2001      	movs	r0, #1
 8004648:	f002 fc26 	bl	8006e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800464c:	bf00      	nop
 800464e:	bd80      	pop	{r7, pc}

08004650 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004654:	2002      	movs	r0, #2
 8004656:	f002 fc1f 	bl	8006e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}

0800465e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004662:	2010      	movs	r0, #16
 8004664:	f002 fc18 	bl	8006e98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}

0800466c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004670:	4802      	ldr	r0, [pc, #8]	@ (800467c <DMA1_Channel1_IRQHandler+0x10>)
 8004672:	f002 f90f 	bl	8006894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200005f0 	.word	0x200005f0

08004680 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004684:	4802      	ldr	r0, [pc, #8]	@ (8004690 <ADC1_IRQHandler+0x10>)
 8004686:	f000 ff8f 	bl	80055a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2000058c 	.word	0x2000058c

08004694 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004698:	4802      	ldr	r0, [pc, #8]	@ (80046a4 <USB_HP_IRQHandler+0x10>)
 800469a:	f004 f8ce 	bl	800883a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20001e84 	.word	0x20001e84

080046a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80046ac:	4802      	ldr	r0, [pc, #8]	@ (80046b8 <USB_LP_IRQHandler+0x10>)
 80046ae:	f004 f8c4 	bl	800883a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	20001e84 	.word	0x20001e84

080046bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80046c0:	4802      	ldr	r0, [pc, #8]	@ (80046cc <TIM2_IRQHandler+0x10>)
 80046c2:	f007 fb7f 	bl	800bdc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200006a4 	.word	0x200006a4

080046d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80046d4:	4802      	ldr	r0, [pc, #8]	@ (80046e0 <I2C1_EV_IRQHandler+0x10>)
 80046d6:	f002 feab 	bl	8007430 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000650 	.word	0x20000650

080046e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80046e8:	4802      	ldr	r0, [pc, #8]	@ (80046f4 <I2C1_ER_IRQHandler+0x10>)
 80046ea:	f002 febb 	bl	8007464 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000650 	.word	0x20000650

080046f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  return 1;
 80046fc:	2301      	movs	r3, #1
}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <_kill>:

int _kill(int pid, int sig)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004712:	f00e f9cf 	bl	8012ab4 <__errno>
 8004716:	4603      	mov	r3, r0
 8004718:	2216      	movs	r2, #22
 800471a:	601a      	str	r2, [r3, #0]
  return -1;
 800471c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_exit>:

void _exit (int status)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7ff ffe7 	bl	8004708 <_kill>
  while (1) {}    /* Make sure we hang here */
 800473a:	bf00      	nop
 800473c:	e7fd      	b.n	800473a <_exit+0x12>

0800473e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e00a      	b.n	8004766 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004750:	f3af 8000 	nop.w
 8004754:	4601      	mov	r1, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	60ba      	str	r2, [r7, #8]
 800475c:	b2ca      	uxtb	r2, r1
 800475e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	dbf0      	blt.n	8004750 <_read+0x12>
  }

  return len;
 800476e:	687b      	ldr	r3, [r7, #4]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	e009      	b.n	800479e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	60ba      	str	r2, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fa5a 	bl	8004c4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	dbf1      	blt.n	800478a <_write+0x12>
  }
  return len;
 80047a6:	687b      	ldr	r3, [r7, #4]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_close>:

int _close(int file)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047d8:	605a      	str	r2, [r3, #4]
  return 0;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_isatty>:

int _isatty(int file)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80047f0:	2301      	movs	r3, #1
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004820:	4a14      	ldr	r2, [pc, #80]	@ (8004874 <_sbrk+0x5c>)
 8004822:	4b15      	ldr	r3, [pc, #84]	@ (8004878 <_sbrk+0x60>)
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800482c:	4b13      	ldr	r3, [pc, #76]	@ (800487c <_sbrk+0x64>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004834:	4b11      	ldr	r3, [pc, #68]	@ (800487c <_sbrk+0x64>)
 8004836:	4a12      	ldr	r2, [pc, #72]	@ (8004880 <_sbrk+0x68>)
 8004838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800483a:	4b10      	ldr	r3, [pc, #64]	@ (800487c <_sbrk+0x64>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d207      	bcs.n	8004858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004848:	f00e f934 	bl	8012ab4 <__errno>
 800484c:	4603      	mov	r3, r0
 800484e:	220c      	movs	r2, #12
 8004850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	e009      	b.n	800486c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004858:	4b08      	ldr	r3, [pc, #32]	@ (800487c <_sbrk+0x64>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800485e:	4b07      	ldr	r3, [pc, #28]	@ (800487c <_sbrk+0x64>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	4a05      	ldr	r2, [pc, #20]	@ (800487c <_sbrk+0x64>)
 8004868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3718      	adds	r7, #24
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20030000 	.word	0x20030000
 8004878:	00000400 	.word	0x00000400
 800487c:	20000904 	.word	0x20000904
 8004880:	200024d0 	.word	0x200024d0

08004884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004888:	4b24      	ldr	r3, [pc, #144]	@ (800491c <SystemInit+0x98>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	4a23      	ldr	r2, [pc, #140]	@ (800491c <SystemInit+0x98>)
 8004890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80048a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80048b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048bc:	4b18      	ldr	r3, [pc, #96]	@ (8004920 <SystemInit+0x9c>)
 80048be:	4013      	ands	r3, r2
 80048c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ce:	f023 0305 	bic.w	r3, r3, #5
 80048d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004924 <SystemInit+0xa0>)
 80048f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80048f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f6:	4a0b      	ldr	r2, [pc, #44]	@ (8004924 <SystemInit+0xa0>)
 80048f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004904:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004908:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800490a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00
 8004920:	faf6fefb 	.word	0xfaf6fefb
 8004924:	22041000 	.word	0x22041000

08004928 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004928:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800492a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800492c:	3304      	adds	r3, #4

0800492e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800492e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004930:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004932:	d3f9      	bcc.n	8004928 <CopyDataInit>
  bx lr
 8004934:	4770      	bx	lr

08004936 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004936:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004938:	3004      	adds	r0, #4

0800493a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800493a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800493c:	d3fb      	bcc.n	8004936 <FillZerobss>
  bx lr
 800493e:	4770      	bx	lr

08004940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004940:	480c      	ldr	r0, [pc, #48]	@ (8004974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004942:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004944:	f7ff ff9e 	bl	8004884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004948:	480b      	ldr	r0, [pc, #44]	@ (8004978 <LoopForever+0x6>)
 800494a:	490c      	ldr	r1, [pc, #48]	@ (800497c <LoopForever+0xa>)
 800494c:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <LoopForever+0xe>)
 800494e:	2300      	movs	r3, #0
 8004950:	f7ff ffed 	bl	800492e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004954:	480b      	ldr	r0, [pc, #44]	@ (8004984 <LoopForever+0x12>)
 8004956:	490c      	ldr	r1, [pc, #48]	@ (8004988 <LoopForever+0x16>)
 8004958:	4a0c      	ldr	r2, [pc, #48]	@ (800498c <LoopForever+0x1a>)
 800495a:	2300      	movs	r3, #0
 800495c:	f7ff ffe7 	bl	800492e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004960:	480b      	ldr	r0, [pc, #44]	@ (8004990 <LoopForever+0x1e>)
 8004962:	490c      	ldr	r1, [pc, #48]	@ (8004994 <LoopForever+0x22>)
 8004964:	2300      	movs	r3, #0
 8004966:	f7ff ffe8 	bl	800493a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800496a:	f00e f8a9 	bl	8012ac0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800496e:	f7ff fa67 	bl	8003e40 <main>

08004972 <LoopForever>:

LoopForever:
  b LoopForever
 8004972:	e7fe      	b.n	8004972 <LoopForever>
  ldr   r0, =_estack
 8004974:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004978:	20000008 	.word	0x20000008
 800497c:	200002f0 	.word	0x200002f0
 8004980:	08014de8 	.word	0x08014de8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004984:	20030000 	.word	0x20030000
 8004988:	20030000 	.word	0x20030000
 800498c:	080150d0 	.word	0x080150d0
  INIT_BSS _sbss, _ebss
 8004990:	200002f0 	.word	0x200002f0
 8004994:	200024cc 	.word	0x200024cc

08004998 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004998:	e7fe      	b.n	8004998 <AES1_IRQHandler>

0800499a <LL_AHB2_GRP1_EnableClock>:
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80049b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4013      	ands	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4013      	ands	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049f0:	68fb      	ldr	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004a0a:	f107 030c 	add.w	r3, r7, #12
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	60da      	str	r2, [r3, #12]
 8004a18:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a1a:	2002      	movs	r0, #2
 8004a1c:	f7ff ffbd 	bl	800499a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	4a12      	ldr	r2, [pc, #72]	@ (8004a6c <BSP_LED_Init+0x6c>)
 8004a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a28:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a32:	2302      	movs	r3, #2
 8004a34:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <BSP_LED_Init+0x70>)
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3e:	f107 020c 	add.w	r2, r7, #12
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f002 f885 	bl	8006b54 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a08      	ldr	r2, [pc, #32]	@ (8004a70 <BSP_LED_Init+0x70>)
 8004a4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	4a05      	ldr	r2, [pc, #20]	@ (8004a6c <BSP_LED_Init+0x6c>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f002 f9e9 	bl	8006e34 <HAL_GPIO_WritePin>
}
 8004a62:	bf00      	nop
 8004a64:	3720      	adds	r7, #32
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	08014a38 	.word	0x08014a38
 8004a70:	20000010 	.word	0x20000010

08004a74 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	4a07      	ldr	r2, [pc, #28]	@ (8004aa0 <BSP_LED_On+0x2c>)
 8004a82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4a06      	ldr	r2, [pc, #24]	@ (8004aa4 <BSP_LED_On+0x30>)
 8004a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	4619      	mov	r1, r3
 8004a92:	f002 f9cf 	bl	8006e34 <HAL_GPIO_WritePin>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000010 	.word	0x20000010
 8004aa4:	08014a38 	.word	0x08014a38

08004aa8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	71fb      	strb	r3, [r7, #7]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <BSP_PB_Init+0x2e>
 8004ace:	2004      	movs	r0, #4
 8004ad0:	f7ff ff63 	bl	800499a <LL_AHB2_GRP1_EnableClock>
 8004ad4:	e00c      	b.n	8004af0 <BSP_PB_Init+0x48>
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d103      	bne.n	8004ae4 <BSP_PB_Init+0x3c>
 8004adc:	2008      	movs	r0, #8
 8004ade:	f7ff ff5c 	bl	800499a <LL_AHB2_GRP1_EnableClock>
 8004ae2:	e005      	b.n	8004af0 <BSP_PB_Init+0x48>
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d102      	bne.n	8004af0 <BSP_PB_Init+0x48>
 8004aea:	2008      	movs	r0, #8
 8004aec:	f7ff ff55 	bl	800499a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004af0:	79bb      	ldrb	r3, [r7, #6]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d117      	bne.n	8004b26 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	4a20      	ldr	r2, [pc, #128]	@ (8004b7c <BSP_PB_Init+0xd4>)
 8004afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004afe:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b80 <BSP_PB_Init+0xd8>)
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	f107 020c 	add.w	r2, r7, #12
 8004b18:	4611      	mov	r1, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f002 f81a 	bl	8006b54 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004b20:	2001      	movs	r0, #1
 8004b22:	f000 f965 	bl	8004df0 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004b26:	79bb      	ldrb	r3, [r7, #6]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d123      	bne.n	8004b74 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004b2c:	79fb      	ldrb	r3, [r7, #7]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	@ (8004b7c <BSP_PB_Init+0xd4>)
 8004b30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b34:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004b36:	2301      	movs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004b3a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b3e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	4a0f      	ldr	r2, [pc, #60]	@ (8004b80 <BSP_PB_Init+0xd8>)
 8004b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b48:	f107 020c 	add.w	r2, r7, #12
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 f800 	bl	8006b54 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4a0b      	ldr	r2, [pc, #44]	@ (8004b84 <BSP_PB_Init+0xdc>)
 8004b58:	5cd3      	ldrb	r3, [r2, r3]
 8004b5a:	b25b      	sxtb	r3, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	210f      	movs	r1, #15
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fce0 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	4a06      	ldr	r2, [pc, #24]	@ (8004b84 <BSP_PB_Init+0xdc>)
 8004b6a:	5cd3      	ldrb	r3, [r2, r3]
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fcf3 	bl	800655a <HAL_NVIC_EnableIRQ>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08014a40 	.word	0x08014a40
 8004b80:	2000001c 	.word	0x2000001c
 8004b84:	08014a48 	.word	0x08014a48

08004b88 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d903      	bls.n	8004ba6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b9e:	f06f 0301 	mvn.w	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e018      	b.n	8004bd8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2294      	movs	r2, #148	@ 0x94
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <BSP_COM_Init+0x5c>)
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f866 	bl	8004c84 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	2294      	movs	r2, #148	@ 0x94
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	4a08      	ldr	r2, [pc, #32]	@ (8004be4 <BSP_COM_Init+0x5c>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f80e 	bl	8004be8 <MX_LPUART1_Init>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8004bd2:	f06f 0303 	mvn.w	r3, #3
 8004bd6:	e000      	b.n	8004bda <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000908 	.word	0x20000908

08004be8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <MX_LPUART1_Init+0x60>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	220c      	movs	r2, #12
 8004c06:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	895b      	ldrh	r3, [r3, #10]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	891b      	ldrh	r3, [r3, #8]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	899b      	ldrh	r3, [r3, #12]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004c34:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f007 fc66 	bl	800c508 <HAL_UART_Init>
 8004c3c:	4603      	mov	r3, r0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000028 	.word	0x20000028

08004c4c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004c54:	4b09      	ldr	r3, [pc, #36]	@ (8004c7c <__io_putchar+0x30>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2394      	movs	r3, #148	@ 0x94
 8004c5c:	fb02 f303 	mul.w	r3, r2, r3
 8004c60:	4a07      	ldr	r2, [pc, #28]	@ (8004c80 <__io_putchar+0x34>)
 8004c62:	1898      	adds	r0, r3, r2
 8004c64:	1d39      	adds	r1, r7, #4
 8004c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f007 fca6 	bl	800c5bc <HAL_UART_Transmit>
  return ch;
 8004c70:	687b      	ldr	r3, [r7, #4]
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	2000099c 	.word	0x2000099c
 8004c80:	20000908 	.word	0x20000908

08004c84 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004c8c:	2002      	movs	r0, #2
 8004c8e:	f7ff fe84 	bl	800499a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8004c92:	2002      	movs	r0, #2
 8004c94:	f7ff fe81 	bl	800499a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004c98:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004c9c:	f7ff fe96 	bl	80049cc <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004ca0:	2340      	movs	r3, #64	@ 0x40
 8004ca2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004cb0:	2307      	movs	r3, #7
 8004cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4809      	ldr	r0, [pc, #36]	@ (8004ce0 <COM1_MspInit+0x5c>)
 8004cbc:	f001 ff4a 	bl	8006b54 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004cc8:	2307      	movs	r3, #7
 8004cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4803      	ldr	r0, [pc, #12]	@ (8004ce0 <COM1_MspInit+0x5c>)
 8004cd4:	f001 ff3e 	bl	8006b54 <HAL_GPIO_Init>
}
 8004cd8:	bf00      	nop
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	48000400 	.word	0x48000400

08004ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <HAL_Init+0x3c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8004d20 <HAL_Init+0x3c>)
 8004cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f001 fc08 	bl	8006510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d00:	2000      	movs	r0, #0
 8004d02:	f000 f80f 	bl	8004d24 <HAL_InitTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	71fb      	strb	r3, [r7, #7]
 8004d10:	e001      	b.n	8004d16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d12:	f7ff fb8b 	bl	800442c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d16:	79fb      	ldrb	r3, [r7, #7]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	58004000 	.word	0x58004000

08004d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004d30:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <HAL_InitTick+0x6c>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d024      	beq.n	8004d82 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004d38:	f006 fa86 	bl	800b248 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b14      	ldr	r3, [pc, #80]	@ (8004d90 <HAL_InitTick+0x6c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	4619      	mov	r1, r3
 8004d44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d48:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	4618      	mov	r0, r3
 8004d52:	f001 fc10 	bl	8006576 <HAL_SYSTICK_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	d809      	bhi.n	8004d76 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d62:	2200      	movs	r2, #0
 8004d64:	6879      	ldr	r1, [r7, #4]
 8004d66:	f04f 30ff 	mov.w	r0, #4294967295
 8004d6a:	f001 fbdc 	bl	8006526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d6e:	4a09      	ldr	r2, [pc, #36]	@ (8004d94 <HAL_InitTick+0x70>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e007      	b.n	8004d86 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	e004      	b.n	8004d86 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e001      	b.n	8004d86 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20000030 	.word	0x20000030
 8004d94:	2000002c 	.word	0x2000002c

08004d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	@ (8004db8 <HAL_IncTick+0x20>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_IncTick+0x24>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <HAL_IncTick+0x24>)
 8004daa:	6013      	str	r3, [r2, #0]
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	20000030 	.word	0x20000030
 8004dbc:	200009a0 	.word	0x200009a0

08004dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004dc4:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <HAL_GetTick+0x14>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	200009a0 	.word	0x200009a0

08004dd8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_GetTickPrio+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	2000002c 	.word	0x2000002c

08004df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df8:	f7ff ffe2 	bl	8004dc0 <HAL_GetTick>
 8004dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d005      	beq.n	8004e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <HAL_Delay+0x44>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4413      	add	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e16:	bf00      	nop
 8004e18:	f7ff ffd2 	bl	8004dc0 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d8f7      	bhi.n	8004e18 <HAL_Delay+0x28>
  {
  }
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000030 	.word	0x20000030

08004e38 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004e52:	bf00      	nop
 8004e54:	370c      	adds	r7, #12
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
 8004e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3360      	adds	r3, #96	@ 0x60
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b08      	ldr	r3, [pc, #32]	@ (8004ee4 <LL_ADC_SetOffset+0x44>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	03fff000 	.word	0x03fff000

08004ee8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3360      	adds	r3, #96	@ 0x60
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3360      	adds	r3, #96	@ 0x60
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004f62:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3330      	adds	r3, #48	@ 0x30
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	4413      	add	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	211f      	movs	r1, #31
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0e9b      	lsrs	r3, r3, #26
 8004fa8:	f003 011f 	and.w	r1, r3, #31
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800500a:	b480      	push	{r7}
 800500c:	b087      	sub	sp, #28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3314      	adds	r3, #20
 800501a:	461a      	mov	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	0e5b      	lsrs	r3, r3, #25
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	4413      	add	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	0d1b      	lsrs	r3, r3, #20
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2107      	movs	r1, #7
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	43db      	mvns	r3, r3
 800503e:	401a      	ands	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	0d1b      	lsrs	r3, r3, #20
 8005044:	f003 031f 	and.w	r3, r3, #31
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	fa01 f303 	lsl.w	r3, r1, r3
 800504e:	431a      	orrs	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0318 	and.w	r3, r3, #24
 8005082:	4908      	ldr	r1, [pc, #32]	@ (80050a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005084:	40d9      	lsrs	r1, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	400b      	ands	r3, r1
 800508a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508e:	431a      	orrs	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005096:	bf00      	nop
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	0007ffff 	.word	0x0007ffff

080050a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80050b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6093      	str	r3, [r2, #8]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050e0:	d101      	bne.n	80050e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005104:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005108:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005130:	d101      	bne.n	8005136 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005154:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005158:	f043 0201 	orr.w	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <LL_ADC_IsEnabled+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_ADC_IsEnabled+0x1a>
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80051a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80051a6:	f043 0204 	orr.w	r2, r3, #4
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d101      	bne.n	80051d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d101      	bne.n	80051f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e12e      	b.n	8005484 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff f901 	bl	800443c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff ff3d 	bl	80050cc <LL_ADC_IsDeepPowerDownEnabled>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff23 	bl	80050a8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff ff58 	bl	800511c <LL_ADC_IsInternalRegulatorEnabled>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff ff3c 	bl	80050f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800527c:	4b83      	ldr	r3, [pc, #524]	@ (800548c <HAL_ADC_Init+0x284>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	099b      	lsrs	r3, r3, #6
 8005282:	4a83      	ldr	r2, [pc, #524]	@ (8005490 <HAL_ADC_Init+0x288>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	099b      	lsrs	r3, r3, #6
 800528a:	3301      	adds	r3, #1
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005290:	e002      	b.n	8005298 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	3b01      	subs	r3, #1
 8005296:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f9      	bne.n	8005292 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff ff3a 	bl	800511c <LL_ADC_IsInternalRegulatorEnabled>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b2:	f043 0210 	orr.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff ff73 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 80052d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80c7 	bne.w	8005472 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f040 80c3 	bne.w	8005472 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80052f4:	f043 0202 	orr.w	r2, r3, #2
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff33 	bl	800516c <LL_ADC_IsEnabled>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10b      	bne.n	8005324 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800530c:	4861      	ldr	r0, [pc, #388]	@ (8005494 <HAL_ADC_Init+0x28c>)
 800530e:	f7ff ff2d 	bl	800516c <LL_ADC_IsEnabled>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4619      	mov	r1, r3
 800531e:	485e      	ldr	r0, [pc, #376]	@ (8005498 <HAL_ADC_Init+0x290>)
 8005320:	f7ff fd8a 	bl	8004e38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	7e5b      	ldrb	r3, [r3, #25]
 8005328:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800532e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005334:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800533a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005342:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005344:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d106      	bne.n	8005364 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	3b01      	subs	r3, #1
 800535c:	045b      	lsls	r3, r3, #17
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	4b45      	ldr	r3, [pc, #276]	@ (800549c <HAL_ADC_Init+0x294>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	69b9      	ldr	r1, [r7, #24]
 8005390:	430b      	orrs	r3, r1
 8005392:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff0e 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 800539e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff1b 	bl	80051e0 <LL_ADC_INJ_IsConversionOngoing>
 80053aa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d13d      	bne.n	800542e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13a      	bne.n	800542e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80053bc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053c4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	430b      	orrs	r3, r1
 80053e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d118      	bne.n	800541e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80053f6:	f023 0304 	bic.w	r3, r3, #4
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005402:	4311      	orrs	r1, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005408:	4311      	orrs	r1, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800540e:	430a      	orrs	r2, r1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	611a      	str	r2, [r3, #16]
 800541c:	e007      	b.n	800542e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10c      	bne.n	8005450 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	f023 010f 	bic.w	r1, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	1e5a      	subs	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
 800544e:	e007      	b.n	8005460 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 020f 	bic.w	r2, r2, #15
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	f043 0201 	orr.w	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005470:	e007      	b.n	8005482 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f043 0210 	orr.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005482:	7ffb      	ldrb	r3, [r7, #31]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000000c 	.word	0x2000000c
 8005490:	053e2d63 	.word	0x053e2d63
 8005494:	50040000 	.word	0x50040000
 8005498:	50040300 	.word	0x50040300
 800549c:	fff0c007 	.word	0xfff0c007

080054a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fe82 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d167      	bne.n	800558c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_Start_DMA+0x2a>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e063      	b.n	8005592 <HAL_ADC_Start_DMA+0xf2>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fe0c 	bl	80060f0 <ADC_Enable>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d14f      	bne.n	8005582 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	f023 0206 	bic.w	r2, r3, #6
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	659a      	str	r2, [r3, #88]	@ 0x58
 800550e:	e002      	b.n	8005516 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551a:	4a20      	ldr	r2, [pc, #128]	@ (800559c <HAL_ADC_Start_DMA+0xfc>)
 800551c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005522:	4a1f      	ldr	r2, [pc, #124]	@ (80055a0 <HAL_ADC_Start_DMA+0x100>)
 8005524:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	4a1e      	ldr	r2, [pc, #120]	@ (80055a4 <HAL_ADC_Start_DMA+0x104>)
 800552c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	221c      	movs	r2, #28
 8005534:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0210 	orr.w	r2, r2, #16
 800554c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0201 	orr.w	r2, r2, #1
 800555c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3340      	adds	r3, #64	@ 0x40
 8005568:	4619      	mov	r1, r3
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f001 f8b7 	bl	80066e0 <HAL_DMA_Start_IT>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fe09 	bl	8005192 <LL_ADC_REG_StartConversion>
 8005580:	e006      	b.n	8005590 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800558a:	e001      	b.n	8005590 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800558c:	2302      	movs	r3, #2
 800558e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	080061e5 	.word	0x080061e5
 80055a0:	080062bd 	.word	0x080062bd
 80055a4:	080062d9 	.word	0x080062d9

080055a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80055b0:	2300      	movs	r3, #0
 80055b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_ADC_IRQHandler+0x56>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d012      	beq.n	80055fe <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 feb3 	bl	800635c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2202      	movs	r2, #2
 80055fc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <HAL_ADC_IRQHandler+0x6a>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005618:	2b00      	cmp	r3, #0
 800561a:	d05d      	beq.n	80056d8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d058      	beq.n	80056d8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	f003 0310 	and.w	r3, r3, #16
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fc81 	bl	8004f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d03d      	beq.n	80056ca <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800565c:	d035      	beq.n	80056ca <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b08      	cmp	r3, #8
 800566a:	d12e      	bne.n	80056ca <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fda2 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11a      	bne.n	80056b2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 020c 	bic.w	r2, r2, #12
 800568a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d112      	bne.n	80056ca <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80056b0:	e00b      	b.n	80056ca <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b6:	f043 0210 	orr.w	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f922 	bl	8005914 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	220c      	movs	r2, #12
 80056d6:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <HAL_ADC_IRQHandler+0x144>
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d074      	beq.n	80057e0 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d06f      	beq.n	80057e0 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d105      	bne.n	8005718 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005710:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fc61 	bl	8004fe4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005722:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fc0e 	bl	8004f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 800572e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d049      	beq.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_ADC_IRQHandler+0x1b0>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d041      	beq.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005754:	2b00      	cmp	r3, #0
 8005756:	d13c      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d135      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d12e      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fd31 	bl	80051e0 <LL_ADC_INJ_IsConversionOngoing>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11a      	bne.n	80057ba <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005792:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d112      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80057b8:	e00b      	b.n	80057d2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057be:	f043 0210 	orr.w	r2, r3, #16
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fd9a 	bl	800630c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2260      	movs	r2, #96	@ 0x60
 80057de:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <HAL_ADC_IRQHandler+0x266>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00c      	beq.n	800580e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f89b 	bl	800593c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d012      	beq.n	800583e <HAL_ADC_IRQHandler+0x296>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00d      	beq.n	800583e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005826:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fd80 	bl	8006334 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005844:	2b00      	cmp	r3, #0
 8005846:	d012      	beq.n	800586e <HAL_ADC_IRQHandler+0x2c6>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005856:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fd72 	bl	8006348 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02b      	beq.n	80058d0 <HAL_ADC_IRQHandler+0x328>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	2b00      	cmp	r3, #0
 8005880:	d026      	beq.n	80058d0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800588a:	2301      	movs	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e009      	b.n	80058a4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fb97 	bl	8004fc8 <LL_ADC_REG_GetDMATransfer>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80058a0:	2301      	movs	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d10e      	bne.n	80058c8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ba:	f043 0202 	orr.w	r2, r3, #2
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f844 	bl	8005950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2210      	movs	r2, #16
 80058ce:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_ADC_IRQHandler+0x364>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d013      	beq.n	800590c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	f043 0208 	orr.w	r2, r3, #8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005904:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd0a 	bl	8006320 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800590c:	bf00      	nop
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b0b6      	sub	sp, #216	@ 0xd8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_ADC_ConfigChannel+0x22>
 8005982:	2302      	movs	r3, #2
 8005984:	e39f      	b.n	80060c6 <HAL_ADC_ConfigChannel+0x762>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff fc11 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 8384 	bne.w	80060a8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	f7ff fadf 	bl	8004f70 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff fbff 	bl	80051ba <LL_ADC_REG_IsConversionOngoing>
 80059bc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fc0b 	bl	80051e0 <LL_ADC_INJ_IsConversionOngoing>
 80059ca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80059ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 81a6 	bne.w	8005d24 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f040 81a1 	bne.w	8005d24 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6819      	ldr	r1, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f7ff fb0b 	bl	800500a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	695a      	ldr	r2, [r3, #20]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	08db      	lsrs	r3, r3, #3
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d00a      	beq.n	8005a2c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6919      	ldr	r1, [r3, #16]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a26:	f7ff fa3b 	bl	8004ea0 <LL_ADC_SetOffset>
 8005a2a:	e17b      	b.n	8005d24 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fa58 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0xf4>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2100      	movs	r1, #0
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fa4d 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	0e9b      	lsrs	r3, r3, #26
 8005a52:	f003 021f 	and.w	r2, r3, #31
 8005a56:	e01e      	b.n	8005a96 <HAL_ADC_ConfigChannel+0x132>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fa42 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005a86:	2320      	movs	r3, #32
 8005a88:	e004      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a8e:	fab3 f383 	clz	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <HAL_ADC_ConfigChannel+0x14a>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	0e9b      	lsrs	r3, r3, #26
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	e018      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x17c>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005aba:	fa93 f3a3 	rbit	r3, r3
 8005abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005ac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005aca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005ad2:	2320      	movs	r3, #32
 8005ad4:	e004      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005ad6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d106      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fa11 	bl	8004f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2101      	movs	r1, #1
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff f9f5 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <HAL_ADC_ConfigChannel+0x1ba>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff f9ea 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005b14:	4603      	mov	r3, r0
 8005b16:	0e9b      	lsrs	r3, r3, #26
 8005b18:	f003 021f 	and.w	r2, r3, #31
 8005b1c:	e01e      	b.n	8005b5c <HAL_ADC_ConfigChannel+0x1f8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2101      	movs	r1, #1
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff f9df 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b34:	fa93 f3a3 	rbit	r3, r3
 8005b38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005b44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	e004      	b.n	8005b5a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b54:	fab3 f383 	clz	r3, r3
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_ADC_ConfigChannel+0x210>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	0e9b      	lsrs	r3, r3, #26
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	e018      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x242>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b80:	fa93 f3a3 	rbit	r3, r3
 8005b84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005b88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005b98:	2320      	movs	r3, #32
 8005b9a:	e004      	b.n	8005ba6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005b9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ba0:	fab3 f383 	clz	r3, r3
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d106      	bne.n	8005bb8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7ff f9ae 	bl	8004f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff f992 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10a      	bne.n	8005be4 <HAL_ADC_ConfigChannel+0x280>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2102      	movs	r1, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff f987 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	0e9b      	lsrs	r3, r3, #26
 8005bde:	f003 021f 	and.w	r2, r3, #31
 8005be2:	e01e      	b.n	8005c22 <HAL_ADC_ConfigChannel+0x2be>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2102      	movs	r1, #2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff f97c 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bfa:	fa93 f3a3 	rbit	r3, r3
 8005bfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005c12:	2320      	movs	r3, #32
 8005c14:	e004      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c1a:	fab3 f383 	clz	r3, r3
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x2d6>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	0e9b      	lsrs	r3, r3, #26
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	e016      	b.n	8005c68 <HAL_ADC_ConfigChannel+0x304>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005c46:	fa93 f3a3 	rbit	r3, r3
 8005c4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005c5a:	2320      	movs	r3, #32
 8005c5c:	e004      	b.n	8005c68 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c62:	fab3 f383 	clz	r3, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d106      	bne.n	8005c7a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2102      	movs	r1, #2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7ff f94d 	bl	8004f14 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2103      	movs	r1, #3
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7ff f931 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0x342>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2103      	movs	r1, #3
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff f926 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	0e9b      	lsrs	r3, r3, #26
 8005ca0:	f003 021f 	and.w	r2, r3, #31
 8005ca4:	e017      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x372>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2103      	movs	r1, #3
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f91b 	bl	8004ee8 <LL_ADC_GetOffsetChannel>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cb8:	fa93 f3a3 	rbit	r3, r3
 8005cbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005cc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005cc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005cc8:	2320      	movs	r3, #32
 8005cca:	e003      	b.n	8005cd4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005ccc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cce:	fab3 f383 	clz	r3, r3
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x38a>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	0e9b      	lsrs	r3, r3, #26
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	e011      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x3ae>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cf6:	fa93 f3a3 	rbit	r3, r3
 8005cfa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005cfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005d06:	2320      	movs	r3, #32
 8005d08:	e003      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005d0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d0c:	fab3 f383 	clz	r3, r3
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d106      	bne.n	8005d24 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2103      	movs	r1, #3
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff f8f8 	bl	8004f14 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fa1f 	bl	800516c <LL_ADC_IsEnabled>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f040 81c2 	bne.w	80060ba <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	461a      	mov	r2, r3
 8005d44:	f7ff f98c 	bl	8005060 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8005f88 <HAL_ADC_ConfigChannel+0x624>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	f040 8130 	bne.w	8005fb4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x418>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0e9b      	lsrs	r3, r3, #26
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	2b09      	cmp	r3, #9
 8005d72:	bf94      	ite	ls
 8005d74:	2301      	movls	r3, #1
 8005d76:	2300      	movhi	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e019      	b.n	8005db0 <HAL_ADC_ConfigChannel+0x44c>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005d94:	2320      	movs	r3, #32
 8005d96:	e003      	b.n	8005da0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005d98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d9a:	fab3 f383 	clz	r3, r3
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	3301      	adds	r3, #1
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b09      	cmp	r3, #9
 8005da8:	bf94      	ite	ls
 8005daa:	2301      	movls	r3, #1
 8005dac:	2300      	movhi	r3, #0
 8005dae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d079      	beq.n	8005ea8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d107      	bne.n	8005dd0 <HAL_ADC_ConfigChannel+0x46c>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	0e9b      	lsrs	r3, r3, #26
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	069b      	lsls	r3, r3, #26
 8005dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dce:	e015      	b.n	8005dfc <HAL_ADC_ConfigChannel+0x498>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd8:	fa93 f3a3 	rbit	r3, r3
 8005ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005de0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005de8:	2320      	movs	r3, #32
 8005dea:	e003      	b.n	8005df4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dee:	fab3 f383 	clz	r3, r3
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	3301      	adds	r3, #1
 8005df6:	069b      	lsls	r3, r3, #26
 8005df8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x4b8>
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	0e9b      	lsrs	r3, r3, #26
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f003 031f 	and.w	r3, r3, #31
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	e017      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x4e8>
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e24:	fa93 f3a3 	rbit	r3, r3
 8005e28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005e34:	2320      	movs	r3, #32
 8005e36:	e003      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e3a:	fab3 f383 	clz	r3, r3
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	3301      	adds	r3, #1
 8005e42:	f003 031f 	and.w	r3, r3, #31
 8005e46:	2101      	movs	r1, #1
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	ea42 0103 	orr.w	r1, r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <HAL_ADC_ConfigChannel+0x50e>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	0e9b      	lsrs	r3, r3, #26
 8005e62:	3301      	adds	r3, #1
 8005e64:	f003 021f 	and.w	r2, r3, #31
 8005e68:	4613      	mov	r3, r2
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4413      	add	r3, r2
 8005e6e:	051b      	lsls	r3, r3, #20
 8005e70:	e018      	b.n	8005ea4 <HAL_ADC_ConfigChannel+0x540>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005e8a:	2320      	movs	r3, #32
 8005e8c:	e003      	b.n	8005e96 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e90:	fab3 f383 	clz	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4413      	add	r3, r2
 8005ea2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	e080      	b.n	8005faa <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d107      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x560>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	0e9b      	lsrs	r3, r3, #26
 8005eba:	3301      	adds	r3, #1
 8005ebc:	069b      	lsls	r3, r3, #26
 8005ebe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ec2:	e015      	b.n	8005ef0 <HAL_ADC_ConfigChannel+0x58c>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	fa93 f3a3 	rbit	r3, r3
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005edc:	2320      	movs	r3, #32
 8005ede:	e003      	b.n	8005ee8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	fab3 f383 	clz	r3, r3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	3301      	adds	r3, #1
 8005eea:	069b      	lsls	r3, r3, #26
 8005eec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d109      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x5ac>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	0e9b      	lsrs	r3, r3, #26
 8005f02:	3301      	adds	r3, #1
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	e017      	b.n	8005f40 <HAL_ADC_ConfigChannel+0x5dc>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	61fb      	str	r3, [r7, #28]
  return result;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005f28:	2320      	movs	r3, #32
 8005f2a:	e003      	b.n	8005f34 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	3301      	adds	r3, #1
 8005f36:	f003 031f 	and.w	r3, r3, #31
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	ea42 0103 	orr.w	r1, r2, r3
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10d      	bne.n	8005f6c <HAL_ADC_ConfigChannel+0x608>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	0e9b      	lsrs	r3, r3, #26
 8005f56:	3301      	adds	r3, #1
 8005f58:	f003 021f 	and.w	r2, r3, #31
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4413      	add	r3, r2
 8005f62:	3b1e      	subs	r3, #30
 8005f64:	051b      	lsls	r3, r3, #20
 8005f66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f6a:	e01d      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x644>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	fa93 f3a3 	rbit	r3, r3
 8005f78:	613b      	str	r3, [r7, #16]
  return result;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d103      	bne.n	8005f8c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005f84:	2320      	movs	r3, #32
 8005f86:	e005      	b.n	8005f94 <HAL_ADC_ConfigChannel+0x630>
 8005f88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	fab3 f383 	clz	r3, r3
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	3301      	adds	r3, #1
 8005f96:	f003 021f 	and.w	r2, r3, #31
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	005b      	lsls	r3, r3, #1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3b1e      	subs	r3, #30
 8005fa2:	051b      	lsls	r3, r3, #20
 8005fa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fa8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f7ff f82b 	bl	800500a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b45      	ldr	r3, [pc, #276]	@ (80060d0 <HAL_ADC_ConfigChannel+0x76c>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d07c      	beq.n	80060ba <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005fc0:	4844      	ldr	r0, [pc, #272]	@ (80060d4 <HAL_ADC_ConfigChannel+0x770>)
 8005fc2:	f7fe ff5f 	bl	8004e84 <LL_ADC_GetCommonPathInternalCh>
 8005fc6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fca:	4843      	ldr	r0, [pc, #268]	@ (80060d8 <HAL_ADC_ConfigChannel+0x774>)
 8005fcc:	f7ff f8ce 	bl	800516c <LL_ADC_IsEnabled>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d15e      	bne.n	8006094 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a40      	ldr	r2, [pc, #256]	@ (80060dc <HAL_ADC_ConfigChannel+0x778>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d127      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x6cc>
 8005fe0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d121      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a39      	ldr	r2, [pc, #228]	@ (80060d8 <HAL_ADC_ConfigChannel+0x774>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d161      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ffa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ffe:	4619      	mov	r1, r3
 8006000:	4834      	ldr	r0, [pc, #208]	@ (80060d4 <HAL_ADC_ConfigChannel+0x770>)
 8006002:	f7fe ff2c 	bl	8004e5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006006:	4b36      	ldr	r3, [pc, #216]	@ (80060e0 <HAL_ADC_ConfigChannel+0x77c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	4a35      	ldr	r2, [pc, #212]	@ (80060e4 <HAL_ADC_ConfigChannel+0x780>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006020:	e002      	b.n	8006028 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3b01      	subs	r3, #1
 8006026:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f9      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800602e:	e044      	b.n	80060ba <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2c      	ldr	r2, [pc, #176]	@ (80060e8 <HAL_ADC_ConfigChannel+0x784>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d113      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x6fe>
 800603a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800603e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10d      	bne.n	8006062 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a23      	ldr	r2, [pc, #140]	@ (80060d8 <HAL_ADC_ConfigChannel+0x774>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d134      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006050:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006054:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006058:	4619      	mov	r1, r3
 800605a:	481e      	ldr	r0, [pc, #120]	@ (80060d4 <HAL_ADC_ConfigChannel+0x770>)
 800605c:	f7fe feff 	bl	8004e5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006060:	e02b      	b.n	80060ba <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	@ (80060ec <HAL_ADC_ConfigChannel+0x788>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d126      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x756>
 800606c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d120      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a16      	ldr	r2, [pc, #88]	@ (80060d8 <HAL_ADC_ConfigChannel+0x774>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d11b      	bne.n	80060ba <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006086:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800608a:	4619      	mov	r1, r3
 800608c:	4811      	ldr	r0, [pc, #68]	@ (80060d4 <HAL_ADC_ConfigChannel+0x770>)
 800608e:	f7fe fee6 	bl	8004e5e <LL_ADC_SetCommonPathInternalCh>
 8006092:	e012      	b.n	80060ba <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80060a6:	e008      	b.n	80060ba <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80060c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	37d8      	adds	r7, #216	@ 0xd8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	80080000 	.word	0x80080000
 80060d4:	50040300 	.word	0x50040300
 80060d8:	50040000 	.word	0x50040000
 80060dc:	c7520000 	.word	0xc7520000
 80060e0:	2000000c 	.word	0x2000000c
 80060e4:	053e2d63 	.word	0x053e2d63
 80060e8:	cb840000 	.word	0xcb840000
 80060ec:	80000001 	.word	0x80000001

080060f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff f833 	bl	800516c <LL_ADC_IsEnabled>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d15e      	bne.n	80061ca <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	4b30      	ldr	r3, [pc, #192]	@ (80061d4 <ADC_Enable+0xe4>)
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00d      	beq.n	8006136 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f043 0210 	orr.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	f043 0201 	orr.w	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e04a      	b.n	80061cc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff f802 	bl	8005144 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006140:	4825      	ldr	r0, [pc, #148]	@ (80061d8 <ADC_Enable+0xe8>)
 8006142:	f7fe fe9f 	bl	8004e84 <LL_ADC_GetCommonPathInternalCh>
 8006146:	4603      	mov	r3, r0
 8006148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00f      	beq.n	8006170 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006150:	4b22      	ldr	r3, [pc, #136]	@ (80061dc <ADC_Enable+0xec>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	099b      	lsrs	r3, r3, #6
 8006156:	4a22      	ldr	r2, [pc, #136]	@ (80061e0 <ADC_Enable+0xf0>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	099b      	lsrs	r3, r3, #6
 800615e:	3301      	adds	r3, #1
 8006160:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006162:	e002      	b.n	800616a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3b01      	subs	r3, #1
 8006168:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1f9      	bne.n	8006164 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006170:	f7fe fe26 	bl	8004dc0 <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006176:	e021      	b.n	80061bc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fff5 	bl	800516c <LL_ADC_IsEnabled>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d104      	bne.n	8006192 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe ffd9 	bl	8005144 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006192:	f7fe fe15 	bl	8004dc0 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d90d      	bls.n	80061bc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a4:	f043 0210 	orr.w	r2, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e007      	b.n	80061cc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d1d6      	bne.n	8006178 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	8000003f 	.word	0x8000003f
 80061d8:	50040300 	.word	0x50040300
 80061dc:	2000000c 	.word	0x2000000c
 80061e0:	053e2d63 	.word	0x053e2d63

080061e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d14b      	bne.n	8006296 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006202:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d021      	beq.n	800625c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fe94 	bl	8004f4a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d032      	beq.n	800628e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d12b      	bne.n	800628e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d11f      	bne.n	800628e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	655a      	str	r2, [r3, #84]	@ 0x54
 800625a:	e018      	b.n	800628e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d111      	bne.n	800628e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006286:	f043 0201 	orr.w	r2, r3, #1
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fb40 	bl	8005914 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006294:	e00e      	b.n	80062b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff fb54 	bl	8005950 <HAL_ADC_ErrorCallback>
}
 80062a8:	e004      	b.n	80062b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	4798      	blx	r3
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fb2c 	bl	8005928 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f6:	f043 0204 	orr.w	r2, r3, #4
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f7ff fb26 	bl	8005950 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006380:	4b0c      	ldr	r3, [pc, #48]	@ (80063b4 <__NVIC_SetPriorityGrouping+0x44>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800638c:	4013      	ands	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800639c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063a2:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <__NVIC_SetPriorityGrouping+0x44>)
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	60d3      	str	r3, [r2, #12]
}
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063bc:	4b04      	ldr	r3, [pc, #16]	@ (80063d0 <__NVIC_GetPriorityGrouping+0x18>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	f003 0307 	and.w	r3, r3, #7
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	db0b      	blt.n	80063fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	f003 021f 	and.w	r2, r3, #31
 80063ec:	4907      	ldr	r1, [pc, #28]	@ (800640c <__NVIC_EnableIRQ+0x38>)
 80063ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2001      	movs	r0, #1
 80063f6:	fa00 f202 	lsl.w	r2, r0, r2
 80063fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	e000e100 	.word	0xe000e100

08006410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	6039      	str	r1, [r7, #0]
 800641a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	2b00      	cmp	r3, #0
 8006422:	db0a      	blt.n	800643a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	490c      	ldr	r1, [pc, #48]	@ (800645c <__NVIC_SetPriority+0x4c>)
 800642a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642e:	0112      	lsls	r2, r2, #4
 8006430:	b2d2      	uxtb	r2, r2
 8006432:	440b      	add	r3, r1
 8006434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006438:	e00a      	b.n	8006450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	4908      	ldr	r1, [pc, #32]	@ (8006460 <__NVIC_SetPriority+0x50>)
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	3b04      	subs	r3, #4
 8006448:	0112      	lsls	r2, r2, #4
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	440b      	add	r3, r1
 800644e:	761a      	strb	r2, [r3, #24]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	e000e100 	.word	0xe000e100
 8006460:	e000ed00 	.word	0xe000ed00

08006464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006464:	b480      	push	{r7}
 8006466:	b089      	sub	sp, #36	@ 0x24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	f1c3 0307 	rsb	r3, r3, #7
 800647e:	2b04      	cmp	r3, #4
 8006480:	bf28      	it	cs
 8006482:	2304      	movcs	r3, #4
 8006484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	3304      	adds	r3, #4
 800648a:	2b06      	cmp	r3, #6
 800648c:	d902      	bls.n	8006494 <NVIC_EncodePriority+0x30>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	3b03      	subs	r3, #3
 8006492:	e000      	b.n	8006496 <NVIC_EncodePriority+0x32>
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43da      	mvns	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	401a      	ands	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064ac:	f04f 31ff 	mov.w	r1, #4294967295
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	43d9      	mvns	r1, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064bc:	4313      	orrs	r3, r2
         );
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3724      	adds	r7, #36	@ 0x24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064dc:	d301      	bcc.n	80064e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064de:	2301      	movs	r3, #1
 80064e0:	e00f      	b.n	8006502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064e2:	4a0a      	ldr	r2, [pc, #40]	@ (800650c <SysTick_Config+0x40>)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064ea:	210f      	movs	r1, #15
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	f7ff ff8e 	bl	8006410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <SysTick_Config+0x40>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064fa:	4b04      	ldr	r3, [pc, #16]	@ (800650c <SysTick_Config+0x40>)
 80064fc:	2207      	movs	r2, #7
 80064fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	e000e010 	.word	0xe000e010

08006510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff ff29 	bl	8006370 <__NVIC_SetPriorityGrouping>
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b086      	sub	sp, #24
 800652a:	af00      	add	r7, sp, #0
 800652c:	4603      	mov	r3, r0
 800652e:	60b9      	str	r1, [r7, #8]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006534:	f7ff ff40 	bl	80063b8 <__NVIC_GetPriorityGrouping>
 8006538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	6978      	ldr	r0, [r7, #20]
 8006540:	f7ff ff90 	bl	8006464 <NVIC_EncodePriority>
 8006544:	4602      	mov	r2, r0
 8006546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ff5f 	bl	8006410 <__NVIC_SetPriority>
}
 8006552:	bf00      	nop
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	4603      	mov	r3, r0
 8006562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff ff33 	bl	80063d4 <__NVIC_EnableIRQ>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff ffa4 	bl	80064cc <SysTick_Config>
 8006584:	4603      	mov	r3, r0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e08e      	b.n	80066c0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	4b47      	ldr	r3, [pc, #284]	@ (80066c8 <HAL_DMA_Init+0x138>)
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d80f      	bhi.n	80065ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	4b45      	ldr	r3, [pc, #276]	@ (80066cc <HAL_DMA_Init+0x13c>)
 80065b6:	4413      	add	r3, r2
 80065b8:	4a45      	ldr	r2, [pc, #276]	@ (80066d0 <HAL_DMA_Init+0x140>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	009a      	lsls	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a42      	ldr	r2, [pc, #264]	@ (80066d4 <HAL_DMA_Init+0x144>)
 80065ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80065cc:	e00e      	b.n	80065ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b40      	ldr	r3, [pc, #256]	@ (80066d8 <HAL_DMA_Init+0x148>)
 80065d6:	4413      	add	r3, r2
 80065d8:	4a3d      	ldr	r2, [pc, #244]	@ (80066d0 <HAL_DMA_Init+0x140>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	091b      	lsrs	r3, r3, #4
 80065e0:	009a      	lsls	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a3c      	ldr	r2, [pc, #240]	@ (80066dc <HAL_DMA_Init+0x14c>)
 80065ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800661c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa24 	bl	8006a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800664c:	d102      	bne.n	8006654 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006660:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800666a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d010      	beq.n	8006696 <HAL_DMA_Init+0x106>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d80c      	bhi.n	8006696 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fa43 	bl	8006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006692:	605a      	str	r2, [r3, #4]
 8006694:	e008      	b.n	80066a8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40020407 	.word	0x40020407
 80066cc:	bffdfff8 	.word	0xbffdfff8
 80066d0:	cccccccd 	.word	0xcccccccd
 80066d4:	40020000 	.word	0x40020000
 80066d8:	bffdfbf8 	.word	0xbffdfbf8
 80066dc:	40020400 	.word	0x40020400

080066e0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_DMA_Start_IT+0x20>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e066      	b.n	80067ce <HAL_DMA_Start_IT+0xee>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d155      	bne.n	80067c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f968 	bl	8006a0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f042 020e 	orr.w	r2, r2, #14
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	e00f      	b.n	8006778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 020a 	orr.w	r2, r2, #10
 8006776:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006794:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0201 	orr.w	r2, r2, #1
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e005      	b.n	80067cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
 80067ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d005      	beq.n	80067fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2204      	movs	r2, #4
 80067f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	73fb      	strb	r3, [r7, #15]
 80067f8:	e047      	b.n	800688a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 020e 	bic.w	r2, r2, #14
 8006808:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f003 021c 	and.w	r2, r3, #28
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	2101      	movs	r1, #1
 8006838:	fa01 f202 	lsl.w	r2, r1, r2
 800683c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006846:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800685e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006868:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
    }
  }
  return status;
 800688a:	7bfb      	ldrb	r3, [r7, #15]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	f003 031c 	and.w	r3, r3, #28
 80068b4:	2204      	movs	r2, #4
 80068b6:	409a      	lsls	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d026      	beq.n	800690e <HAL_DMA_IRQHandler+0x7a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d021      	beq.n	800690e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0320 	and.w	r3, r3, #32
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d107      	bne.n	80068e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 0204 	bic.w	r2, r2, #4
 80068e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ec:	f003 021c 	and.w	r2, r3, #28
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f4:	2104      	movs	r1, #4
 80068f6:	fa01 f202 	lsl.w	r2, r1, r2
 80068fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d071      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800690c:	e06c      	b.n	80069e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006912:	f003 031c 	and.w	r3, r3, #28
 8006916:	2202      	movs	r2, #2
 8006918:	409a      	lsls	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4013      	ands	r3, r2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d02e      	beq.n	8006980 <HAL_DMA_IRQHandler+0xec>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 0302 	and.w	r3, r3, #2
 8006928:	2b00      	cmp	r3, #0
 800692a:	d029      	beq.n	8006980 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 020a 	bic.w	r2, r2, #10
 8006948:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	f003 021c 	and.w	r2, r3, #28
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695e:	2102      	movs	r1, #2
 8006960:	fa01 f202 	lsl.w	r2, r1, r2
 8006964:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d038      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800697e:	e033      	b.n	80069e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006984:	f003 031c 	and.w	r3, r3, #28
 8006988:	2208      	movs	r2, #8
 800698a:	409a      	lsls	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4013      	ands	r3, r2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d02a      	beq.n	80069ea <HAL_DMA_IRQHandler+0x156>
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f003 0308 	and.w	r3, r3, #8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d025      	beq.n	80069ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f022 020e 	bic.w	r2, r2, #14
 80069ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f003 021c 	and.w	r2, r3, #28
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f202 	lsl.w	r2, r1, r2
 80069c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
}
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006a00:	b2db      	uxtb	r3, r3
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a24:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006a36:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	f003 021c 	and.w	r2, r3, #28
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	2101      	movs	r1, #1
 8006a46:	fa01 f202 	lsl.w	r2, r1, r2
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d108      	bne.n	8006a6e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a6c:	e007      	b.n	8006a7e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
	...

08006a8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d80a      	bhi.n	8006ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa4:	089b      	lsrs	r3, r3, #2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006aac:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6493      	str	r3, [r2, #72]	@ 0x48
 8006ab4:	e007      	b.n	8006ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aba:	089b      	lsrs	r3, r3, #2
 8006abc:	009a      	lsls	r2, r3, #2
 8006abe:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	3b08      	subs	r3, #8
 8006ace:	4a0c      	ldr	r2, [pc, #48]	@ (8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a0a      	ldr	r2, [pc, #40]	@ (8006b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006adc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	409a      	lsls	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006aec:	bf00      	nop
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40020407 	.word	0x40020407
 8006afc:	4002081c 	.word	0x4002081c
 8006b00:	cccccccd 	.word	0xcccccccd
 8006b04:	40020880 	.word	0x40020880

08006b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b18:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a09      	ldr	r2, [pc, #36]	@ (8006b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006b2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2201      	movs	r2, #1
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	1000823f 	.word	0x1000823f
 8006b50:	40020940 	.word	0x40020940

08006b54 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b62:	e14c      	b.n	8006dfe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 813e 	beq.w	8006df8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f003 0303 	and.w	r3, r3, #3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d005      	beq.n	8006b94 <HAL_GPIO_Init+0x40>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d130      	bne.n	8006bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	2203      	movs	r2, #3
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4013      	ands	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bca:	2201      	movs	r2, #1
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 0201 	and.w	r2, r3, #1
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d017      	beq.n	8006c32 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4013      	ands	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	689a      	ldr	r2, [r3, #8]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d123      	bne.n	8006c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	08da      	lsrs	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3208      	adds	r2, #8
 8006c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	220f      	movs	r2, #15
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	08da      	lsrs	r2, r3, #3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3208      	adds	r2, #8
 8006c80:	6939      	ldr	r1, [r7, #16]
 8006c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	2203      	movs	r2, #3
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 0203 	and.w	r2, r3, #3
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8098 	beq.w	8006df8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006cc8:	4a54      	ldr	r2, [pc, #336]	@ (8006e1c <HAL_GPIO_Init+0x2c8>)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	089b      	lsrs	r3, r3, #2
 8006cce:	3302      	adds	r3, #2
 8006cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	220f      	movs	r2, #15
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006cf2:	d019      	beq.n	8006d28 <HAL_GPIO_Init+0x1d4>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8006e20 <HAL_GPIO_Init+0x2cc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_GPIO_Init+0x1d0>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a49      	ldr	r2, [pc, #292]	@ (8006e24 <HAL_GPIO_Init+0x2d0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00d      	beq.n	8006d20 <HAL_GPIO_Init+0x1cc>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a48      	ldr	r2, [pc, #288]	@ (8006e28 <HAL_GPIO_Init+0x2d4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <HAL_GPIO_Init+0x1c8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a47      	ldr	r2, [pc, #284]	@ (8006e2c <HAL_GPIO_Init+0x2d8>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_GPIO_Init+0x1c4>
 8006d14:	2304      	movs	r3, #4
 8006d16:	e008      	b.n	8006d2a <HAL_GPIO_Init+0x1d6>
 8006d18:	2307      	movs	r3, #7
 8006d1a:	e006      	b.n	8006d2a <HAL_GPIO_Init+0x1d6>
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e004      	b.n	8006d2a <HAL_GPIO_Init+0x1d6>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e002      	b.n	8006d2a <HAL_GPIO_Init+0x1d6>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <HAL_GPIO_Init+0x1d6>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	f002 0203 	and.w	r2, r2, #3
 8006d30:	0092      	lsls	r2, r2, #2
 8006d32:	4093      	lsls	r3, r2
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d3a:	4938      	ldr	r1, [pc, #224]	@ (8006e1c <HAL_GPIO_Init+0x2c8>)
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	089b      	lsrs	r3, r3, #2
 8006d40:	3302      	adds	r3, #2
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d48:	4b39      	ldr	r3, [pc, #228]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	43db      	mvns	r3, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4013      	ands	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d6c:	4a30      	ldr	r2, [pc, #192]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d72:	4b2f      	ldr	r3, [pc, #188]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d96:	4a26      	ldr	r2, [pc, #152]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d9c:	4b24      	ldr	r3, [pc, #144]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	43db      	mvns	r3, r3
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4013      	ands	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006dca:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006df0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e30 <HAL_GPIO_Init+0x2dc>)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f aeab 	bne.w	8006b64 <HAL_GPIO_Init+0x10>
  }
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	48000400 	.word	0x48000400
 8006e24:	48000800 	.word	0x48000800
 8006e28:	48000c00 	.word	0x48000c00
 8006e2c:	48001000 	.word	0x48001000
 8006e30:	58000800 	.word	0x58000800

08006e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	807b      	strh	r3, [r7, #2]
 8006e40:	4613      	mov	r3, r2
 8006e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006e44:	787b      	ldrb	r3, [r7, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e4a:	887a      	ldrh	r2, [r7, #2]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e50:	e002      	b.n	8006e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e52:	887a      	ldrh	r2, [r7, #2]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e76:	887a      	ldrh	r2, [r7, #2]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	041a      	lsls	r2, r3, #16
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	43d9      	mvns	r1, r3
 8006e82:	887b      	ldrh	r3, [r7, #2]
 8006e84:	400b      	ands	r3, r1
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	619a      	str	r2, [r3, #24]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006ea2:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d006      	beq.n	8006ebc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006eae:	4a05      	ldr	r2, [pc, #20]	@ (8006ec4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 f806 	bl	8006ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58000800 	.word	0x58000800

08006ec8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e08d      	b.n	800700c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fd fafd 	bl	8004504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2224      	movs	r2, #36	@ 0x24
 8006f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f022 0201 	bic.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685a      	ldr	r2, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689a      	ldr	r2, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d107      	bne.n	8006f58 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f54:	609a      	str	r2, [r3, #8]
 8006f56:	e006      	b.n	8006f66 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d108      	bne.n	8006f80 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e007      	b.n	8006f90 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	69d9      	ldr	r1, [r3, #28]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af02      	add	r7, sp, #8
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	461a      	mov	r2, r3
 8007020:	460b      	mov	r3, r1
 8007022:	817b      	strh	r3, [r7, #10]
 8007024:	4613      	mov	r3, r2
 8007026:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b20      	cmp	r3, #32
 8007032:	f040 80fd 	bne.w	8007230 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800703c:	2b01      	cmp	r3, #1
 800703e:	d101      	bne.n	8007044 <HAL_I2C_Master_Transmit+0x30>
 8007040:	2302      	movs	r3, #2
 8007042:	e0f6      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800704c:	f7fd feb8 	bl	8004dc0 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	2319      	movs	r3, #25
 8007058:	2201      	movs	r2, #1
 800705a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 ff85 	bl	8007f6e <I2C_WaitOnFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e0e1      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2221      	movs	r2, #33	@ 0x21
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2210      	movs	r2, #16
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	893a      	ldrh	r2, [r7, #8]
 800708e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	2bff      	cmp	r3, #255	@ 0xff
 800709e:	d906      	bls.n	80070ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	22ff      	movs	r2, #255	@ 0xff
 80070a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80070a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e007      	b.n	80070be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d024      	beq.n	8007110 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	3301      	adds	r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	8979      	ldrh	r1, [r7, #10]
 8007102:	4b4e      	ldr	r3, [pc, #312]	@ (800723c <HAL_I2C_Master_Transmit+0x228>)
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f001 f97f 	bl	800840c <I2C_TransferConfig>
 800710e:	e066      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007114:	b2da      	uxtb	r2, r3
 8007116:	8979      	ldrh	r1, [r7, #10]
 8007118:	4b48      	ldr	r3, [pc, #288]	@ (800723c <HAL_I2C_Master_Transmit+0x228>)
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f001 f974 	bl	800840c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007124:	e05b      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007126:	693a      	ldr	r2, [r7, #16]
 8007128:	6a39      	ldr	r1, [r7, #32]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 ff78 	bl	8008020 <I2C_WaitOnTXISFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d001      	beq.n	800713a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e07b      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716e:	b29b      	uxth	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d034      	beq.n	80071de <HAL_I2C_Master_Transmit+0x1ca>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	d130      	bne.n	80071de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	2200      	movs	r2, #0
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 fef1 	bl	8007f6e <I2C_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e04d      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719a:	b29b      	uxth	r3, r3
 800719c:	2bff      	cmp	r3, #255	@ 0xff
 800719e:	d90e      	bls.n	80071be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	22ff      	movs	r2, #255	@ 0xff
 80071a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	8979      	ldrh	r1, [r7, #10]
 80071ae:	2300      	movs	r3, #0
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f001 f928 	bl	800840c <I2C_TransferConfig>
 80071bc:	e00f      	b.n	80071de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	8979      	ldrh	r1, [r7, #10]
 80071d0:	2300      	movs	r3, #0
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f001 f917 	bl	800840c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d19e      	bne.n	8007126 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	6a39      	ldr	r1, [r7, #32]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 ff5e 	bl	80080ae <I2C_WaitOnSTOPFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e01a      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2220      	movs	r2, #32
 8007202:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <HAL_I2C_Master_Transmit+0x22c>)
 8007210:	400b      	ands	r3, r1
 8007212:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	e000      	b.n	8007232 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007230:	2302      	movs	r3, #2
  }
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	80002000 	.word	0x80002000
 8007240:	fe00e800 	.word	0xfe00e800

08007244 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b088      	sub	sp, #32
 8007248:	af02      	add	r7, sp, #8
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	461a      	mov	r2, r3
 8007250:	460b      	mov	r3, r1
 8007252:	817b      	strh	r3, [r7, #10]
 8007254:	4613      	mov	r3, r2
 8007256:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b20      	cmp	r3, #32
 8007262:	f040 80db 	bne.w	800741c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_I2C_Master_Receive+0x30>
 8007270:	2302      	movs	r3, #2
 8007272:	e0d4      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800727c:	f7fd fda0 	bl	8004dc0 <HAL_GetTick>
 8007280:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2319      	movs	r3, #25
 8007288:	2201      	movs	r2, #1
 800728a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fe6d 	bl	8007f6e <I2C_WaitOnFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e0bf      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2222      	movs	r2, #34	@ 0x22
 80072a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2210      	movs	r2, #16
 80072aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	893a      	ldrh	r2, [r7, #8]
 80072be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2bff      	cmp	r3, #255	@ 0xff
 80072ce:	d90e      	bls.n	80072ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	22ff      	movs	r2, #255	@ 0xff
 80072d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	8979      	ldrh	r1, [r7, #10]
 80072de:	4b52      	ldr	r3, [pc, #328]	@ (8007428 <HAL_I2C_Master_Receive+0x1e4>)
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072e6:	68f8      	ldr	r0, [r7, #12]
 80072e8:	f001 f890 	bl	800840c <I2C_TransferConfig>
 80072ec:	e06d      	b.n	80073ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	8979      	ldrh	r1, [r7, #10]
 8007300:	4b49      	ldr	r3, [pc, #292]	@ (8007428 <HAL_I2C_Master_Receive+0x1e4>)
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f001 f87f 	bl	800840c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800730e:	e05c      	b.n	80073ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	6a39      	ldr	r1, [r7, #32]
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 ff0d 	bl	8008134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e07c      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d034      	beq.n	80073ca <HAL_I2C_Master_Receive+0x186>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d130      	bne.n	80073ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	6a3b      	ldr	r3, [r7, #32]
 800736e:	2200      	movs	r2, #0
 8007370:	2180      	movs	r1, #128	@ 0x80
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fdfb 	bl	8007f6e <I2C_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e04d      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007386:	b29b      	uxth	r3, r3
 8007388:	2bff      	cmp	r3, #255	@ 0xff
 800738a:	d90e      	bls.n	80073aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	22ff      	movs	r2, #255	@ 0xff
 8007390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007396:	b2da      	uxtb	r2, r3
 8007398:	8979      	ldrh	r1, [r7, #10]
 800739a:	2300      	movs	r3, #0
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f001 f832 	bl	800840c <I2C_TransferConfig>
 80073a8:	e00f      	b.n	80073ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	8979      	ldrh	r1, [r7, #10]
 80073bc:	2300      	movs	r3, #0
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f001 f821 	bl	800840c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d19d      	bne.n	8007310 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	6a39      	ldr	r1, [r7, #32]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fe68 	bl	80080ae <I2C_WaitOnSTOPFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e01a      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2220      	movs	r2, #32
 80073ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b0c      	ldr	r3, [pc, #48]	@ (800742c <HAL_I2C_Master_Receive+0x1e8>)
 80073fc:	400b      	ands	r3, r1
 80073fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e000      	b.n	800741e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
  }
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	80002400 	.word	0x80002400
 800742c:	fe00e800 	.word	0xfe00e800

08007430 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
  }
}
 800745c:	bf00      	nop
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00f      	beq.n	80074a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00a      	beq.n	80074a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00f      	beq.n	80074d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074be:	f043 0208 	orr.w	r2, r3, #8
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00f      	beq.n	80074fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e8:	f043 0202 	orr.w	r2, r3, #2
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 030b 	and.w	r3, r3, #11
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fbd5 	bl	8007cbc <I2C_ITError>
  }
}
 8007512:	bf00      	nop
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007542:	b480      	push	{r7}
 8007544:	b083      	sub	sp, #12
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
 800754e:	4613      	mov	r3, r2
 8007550:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007566:	bf00      	nop
 8007568:	370c      	adds	r7, #12
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007572:	b480      	push	{r7}
 8007574:	b083      	sub	sp, #12
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800757a:	bf00      	nop
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <I2C_Slave_ISR_IT+0x24>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e0e2      	b.n	8007784 <I2C_Slave_ISR_IT+0x1ea>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f003 0320 	and.w	r3, r3, #32
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80075da:	6939      	ldr	r1, [r7, #16]
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f9b5 	bl	800794c <I2C_ITSlaveCplt>
 80075e2:	e0ca      	b.n	800777a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d04b      	beq.n	8007686 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d046      	beq.n	8007686 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d128      	bne.n	8007654 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b28      	cmp	r3, #40	@ 0x28
 800760c:	d108      	bne.n	8007620 <I2C_Slave_ISR_IT+0x86>
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007614:	d104      	bne.n	8007620 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007616:	6939      	ldr	r1, [r7, #16]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fafb 	bl	8007c14 <I2C_ITListenCplt>
 800761e:	e031      	b.n	8007684 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b29      	cmp	r3, #41	@ 0x29
 800762a:	d10e      	bne.n	800764a <I2C_Slave_ISR_IT+0xb0>
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007632:	d00a      	beq.n	800764a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2210      	movs	r2, #16
 800763a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fc54 	bl	8007eea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f926 	bl	8007894 <I2C_ITSlaveSeqCplt>
 8007648:	e01c      	b.n	8007684 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2210      	movs	r2, #16
 8007650:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007652:	e08f      	b.n	8007774 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2210      	movs	r2, #16
 800765a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007660:	f043 0204 	orr.w	r2, r3, #4
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <I2C_Slave_ISR_IT+0xdc>
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007674:	d17e      	bne.n	8007774 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fb1d 	bl	8007cbc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007682:	e077      	b.n	8007774 <I2C_Slave_ISR_IT+0x1da>
 8007684:	e076      	b.n	8007774 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02f      	beq.n	80076f0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007696:	2b00      	cmp	r3, #0
 8007698:	d02a      	beq.n	80076f0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d018      	beq.n	80076d6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d14b      	bne.n	8007778 <I2C_Slave_ISR_IT+0x1de>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80076e6:	d047      	beq.n	8007778 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f8d3 	bl	8007894 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80076ee:	e043      	b.n	8007778 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d009      	beq.n	800770e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007704:	6939      	ldr	r1, [r7, #16]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f840 	bl	800778c <I2C_ITAddrCplt>
 800770c:	e035      	b.n	800777a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f003 0302 	and.w	r3, r3, #2
 8007714:	2b00      	cmp	r3, #0
 8007716:	d030      	beq.n	800777a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02b      	beq.n	800777a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d018      	beq.n	800775e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800775c:	e00d      	b.n	800777a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007764:	d002      	beq.n	800776c <I2C_Slave_ISR_IT+0x1d2>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f000 f891 	bl	8007894 <I2C_ITSlaveSeqCplt>
 8007772:	e002      	b.n	800777a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007774:	bf00      	nop
 8007776:	e000      	b.n	800777a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007778:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800779c:	b2db      	uxtb	r3, r3
 800779e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077a2:	2b28      	cmp	r3, #40	@ 0x28
 80077a4:	d16a      	bne.n	800787c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	0c1b      	lsrs	r3, r3, #16
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	0c1b      	lsrs	r3, r3, #16
 80077be:	b29b      	uxth	r3, r3
 80077c0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80077c4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80077e0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d138      	bne.n	800785c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80077ea:	897b      	ldrh	r3, [r7, #10]
 80077ec:	09db      	lsrs	r3, r3, #7
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	89bb      	ldrh	r3, [r7, #12]
 80077f2:	4053      	eors	r3, r2
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	f003 0306 	and.w	r3, r3, #6
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11c      	bne.n	8007838 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80077fe:	897b      	ldrh	r3, [r7, #10]
 8007800:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007810:	2b02      	cmp	r3, #2
 8007812:	d13b      	bne.n	800788c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2208      	movs	r2, #8
 8007820:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800782a:	89ba      	ldrh	r2, [r7, #12]
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	4619      	mov	r1, r3
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff fe86 	bl	8007542 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007836:	e029      	b.n	800788c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007838:	893b      	ldrh	r3, [r7, #8]
 800783a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800783c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fe15 	bl	8008470 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800784e:	89ba      	ldrh	r2, [r7, #12]
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fe74 	bl	8007542 <HAL_I2C_AddrCallback>
}
 800785a:	e017      	b.n	800788c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800785c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fe05 	bl	8008470 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800786e:	89ba      	ldrh	r2, [r7, #12]
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fe64 	bl	8007542 <HAL_I2C_AddrCallback>
}
 800787a:	e007      	b.n	800788c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2208      	movs	r2, #8
 8007882:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d008      	beq.n	80078c8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	e00c      	b.n	80078e2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d007      	beq.n	80078e2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80078e0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b29      	cmp	r3, #41	@ 0x29
 80078ec:	d112      	bne.n	8007914 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2228      	movs	r2, #40	@ 0x28
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2221      	movs	r2, #33	@ 0x21
 80078fa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80078fc:	2101      	movs	r1, #1
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fdb6 	bl	8008470 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff fe04 	bl	800751a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007912:	e017      	b.n	8007944 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b2a      	cmp	r3, #42	@ 0x2a
 800791e:	d111      	bne.n	8007944 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2228      	movs	r2, #40	@ 0x28
 8007924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2222      	movs	r2, #34	@ 0x22
 800792c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800792e:	2102      	movs	r1, #2
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fd9d 	bl	8008470 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff fdf5 	bl	800752e <HAL_I2C_SlaveRxCpltCallback>
}
 8007944:	bf00      	nop
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007966:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800796e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2220      	movs	r2, #32
 8007976:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007978:	7afb      	ldrb	r3, [r7, #11]
 800797a:	2b21      	cmp	r3, #33	@ 0x21
 800797c:	d002      	beq.n	8007984 <I2C_ITSlaveCplt+0x38>
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	2b29      	cmp	r3, #41	@ 0x29
 8007982:	d108      	bne.n	8007996 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007984:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fd71 	bl	8008470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2221      	movs	r2, #33	@ 0x21
 8007992:	631a      	str	r2, [r3, #48]	@ 0x30
 8007994:	e019      	b.n	80079ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	2b22      	cmp	r3, #34	@ 0x22
 800799a:	d002      	beq.n	80079a2 <I2C_ITSlaveCplt+0x56>
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	2b2a      	cmp	r3, #42	@ 0x2a
 80079a0:	d108      	bne.n	80079b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80079a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd62 	bl	8008470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2222      	movs	r2, #34	@ 0x22
 80079b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80079b2:	e00a      	b.n	80079ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	2b28      	cmp	r3, #40	@ 0x28
 80079b8:	d107      	bne.n	80079ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80079ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fd56 	bl	8008470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b89      	ldr	r3, [pc, #548]	@ (8007c0c <I2C_ITSlaveCplt+0x2c0>)
 80079e6:	400b      	ands	r3, r1
 80079e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa7d 	bl	8007eea <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d013      	beq.n	8007a22 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a08:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d01f      	beq.n	8007a52 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007a20:	e017      	b.n	8007a52 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d012      	beq.n	8007a52 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d020      	beq.n	8007a9e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f023 0304 	bic.w	r3, r3, #4
 8007a62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00c      	beq.n	8007a9e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aac:	f043 0204 	orr.w	r2, r3, #4
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f003 0310 	and.w	r3, r3, #16
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d049      	beq.n	8007b52 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d044      	beq.n	8007b52 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d128      	bne.n	8007b24 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b28      	cmp	r3, #40	@ 0x28
 8007adc:	d108      	bne.n	8007af0 <I2C_ITSlaveCplt+0x1a4>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ae4:	d104      	bne.n	8007af0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007ae6:	6979      	ldr	r1, [r7, #20]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f893 	bl	8007c14 <I2C_ITListenCplt>
 8007aee:	e030      	b.n	8007b52 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b29      	cmp	r3, #41	@ 0x29
 8007afa:	d10e      	bne.n	8007b1a <I2C_ITSlaveCplt+0x1ce>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b02:	d00a      	beq.n	8007b1a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2210      	movs	r2, #16
 8007b0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9ec 	bl	8007eea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff febe 	bl	8007894 <I2C_ITSlaveSeqCplt>
 8007b18:	e01b      	b.n	8007b52 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2210      	movs	r2, #16
 8007b20:	61da      	str	r2, [r3, #28]
 8007b22:	e016      	b.n	8007b52 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2210      	movs	r2, #16
 8007b2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b30:	f043 0204 	orr.w	r2, r3, #4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <I2C_ITSlaveCplt+0x1fa>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b44:	d105      	bne.n	8007b52 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f8b5 	bl	8007cbc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d010      	beq.n	8007b8a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8a4 	bl	8007cbc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b28      	cmp	r3, #40	@ 0x28
 8007b7e:	d141      	bne.n	8007c04 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b80:	6979      	ldr	r1, [r7, #20]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f846 	bl	8007c14 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b88:	e03c      	b.n	8007c04 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b92:	d014      	beq.n	8007bbe <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fe7d 	bl	8007894 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007c10 <I2C_ITSlaveCplt+0x2c4>)
 8007b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff fcd1 	bl	800755e <HAL_I2C_ListenCpltCallback>
}
 8007bbc:	e022      	b.n	8007c04 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b22      	cmp	r3, #34	@ 0x22
 8007bc8:	d10e      	bne.n	8007be8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fca4 	bl	800752e <HAL_I2C_SlaveRxCpltCallback>
}
 8007be6:	e00d      	b.n	8007c04 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff fc8b 	bl	800751a <HAL_I2C_SlaveTxCpltCallback>
}
 8007c04:	bf00      	nop
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	fe00e800 	.word	0xfe00e800
 8007c10:	ffff0000 	.word	0xffff0000

08007c14 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a25      	ldr	r2, [pc, #148]	@ (8007cb8 <I2C_ITListenCplt+0xa4>)
 8007c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d022      	beq.n	8007c90 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d012      	beq.n	8007c90 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c88:	f043 0204 	orr.w	r2, r3, #4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c90:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fbeb 	bl	8008470 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fc57 	bl	800755e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007cb0:	bf00      	nop
 8007cb2:	3708      	adds	r7, #8
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	ffff0000 	.word	0xffff0000

08007cbc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ccc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a6d      	ldr	r2, [pc, #436]	@ (8007e90 <I2C_ITError+0x1d4>)
 8007cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b28      	cmp	r3, #40	@ 0x28
 8007cf2:	d005      	beq.n	8007d00 <I2C_ITError+0x44>
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
 8007cf6:	2b29      	cmp	r3, #41	@ 0x29
 8007cf8:	d002      	beq.n	8007d00 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cfe:	d10b      	bne.n	8007d18 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d00:	2103      	movs	r1, #3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fbb4 	bl	8008470 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2228      	movs	r2, #40	@ 0x28
 8007d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a60      	ldr	r2, [pc, #384]	@ (8007e94 <I2C_ITError+0x1d8>)
 8007d14:	635a      	str	r2, [r3, #52]	@ 0x34
 8007d16:	e030      	b.n	8007d7a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d18:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fba7 	bl	8008470 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8e1 	bl	8007eea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b60      	cmp	r3, #96	@ 0x60
 8007d32:	d01f      	beq.n	8007d74 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b20      	cmp	r3, #32
 8007d48:	d114      	bne.n	8007d74 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	f003 0310 	and.w	r3, r3, #16
 8007d54:	2b10      	cmp	r3, #16
 8007d56:	d109      	bne.n	8007d6c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2210      	movs	r2, #16
 8007d5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d64:	f043 0204 	orr.w	r2, r3, #4
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2220      	movs	r2, #32
 8007d72:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d039      	beq.n	8007dfc <I2C_ITError+0x140>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b11      	cmp	r3, #17
 8007d8c:	d002      	beq.n	8007d94 <I2C_ITError+0xd8>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b21      	cmp	r3, #33	@ 0x21
 8007d92:	d133      	bne.n	8007dfc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007da2:	d107      	bne.n	8007db4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007db2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fe1a 	bl	80069f2 <HAL_DMA_GetState>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d017      	beq.n	8007df4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc8:	4a33      	ldr	r2, [pc, #204]	@ (8007e98 <I2C_ITError+0x1dc>)
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe fcfc 	bl	80067d6 <HAL_DMA_Abort_IT>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d04d      	beq.n	8007e80 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007dee:	4610      	mov	r0, r2
 8007df0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007df2:	e045      	b.n	8007e80 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f851 	bl	8007e9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dfa:	e041      	b.n	8007e80 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d039      	beq.n	8007e78 <I2C_ITError+0x1bc>
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b12      	cmp	r3, #18
 8007e08:	d002      	beq.n	8007e10 <I2C_ITError+0x154>
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b22      	cmp	r3, #34	@ 0x22
 8007e0e:	d133      	bne.n	8007e78 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e1e:	d107      	bne.n	8007e30 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e2e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fddc 	bl	80069f2 <HAL_DMA_GetState>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d017      	beq.n	8007e70 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e44:	4a14      	ldr	r2, [pc, #80]	@ (8007e98 <I2C_ITError+0x1dc>)
 8007e46:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fcbe 	bl	80067d6 <HAL_DMA_Abort_IT>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d011      	beq.n	8007e84 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e6e:	e009      	b.n	8007e84 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f813 	bl	8007e9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e76:	e005      	b.n	8007e84 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f80f 	bl	8007e9c <I2C_TreatErrorCallback>
  }
}
 8007e7e:	e002      	b.n	8007e86 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e80:	bf00      	nop
 8007e82:	e000      	b.n	8007e86 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e84:	bf00      	nop
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	ffff0000 	.word	0xffff0000
 8007e94:	0800759b 	.word	0x0800759b
 8007e98:	08007f33 	.word	0x08007f33

08007e9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b60      	cmp	r3, #96	@ 0x60
 8007eae:	d10e      	bne.n	8007ece <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fb5d 	bl	8007586 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ecc:	e009      	b.n	8007ee2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff fb48 	bl	8007572 <HAL_I2C_ErrorCallback>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d103      	bne.n	8007f08 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d007      	beq.n	8007f26 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699a      	ldr	r2, [r3, #24]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f042 0201 	orr.w	r2, r2, #1
 8007f24:	619a      	str	r2, [r3, #24]
  }
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff ff9b 	bl	8007e9c <I2C_TreatErrorCallback>
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f7e:	e03b      	b.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f961 	bl	800824c <I2C_IsErrorOccurred>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e041      	b.n	8008018 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d02d      	beq.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f9c:	f7fc ff10 	bl	8004dc0 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d302      	bcc.n	8007fb2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d122      	bne.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	bf0c      	ite	eq
 8007fc2:	2301      	moveq	r3, #1
 8007fc4:	2300      	movne	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	79fb      	ldrb	r3, [r7, #7]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d113      	bne.n	8007ff8 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd4:	f043 0220 	orr.w	r2, r3, #32
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e00f      	b.n	8008018 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4013      	ands	r3, r2
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	429a      	cmp	r2, r3
 8008014:	d0b4      	beq.n	8007f80 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800802c:	e033      	b.n	8008096 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	68b9      	ldr	r1, [r7, #8]
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f90a 	bl	800824c <I2C_IsErrorOccurred>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e031      	b.n	80080a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008048:	d025      	beq.n	8008096 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800804a:	f7fc feb9 	bl	8004dc0 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	d302      	bcc.n	8008060 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11a      	bne.n	8008096 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d013      	beq.n	8008096 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008072:	f043 0220 	orr.w	r2, r3, #32
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e007      	b.n	80080a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d1c4      	bne.n	800802e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b084      	sub	sp, #16
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080ba:	e02f      	b.n	800811c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f8c3 	bl	800824c <I2C_IsErrorOccurred>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e02d      	b.n	800812c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d0:	f7fc fe76 	bl	8004dc0 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d302      	bcc.n	80080e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d11a      	bne.n	800811c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d013      	beq.n	800811c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080f8:	f043 0220 	orr.w	r2, r3, #32
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e007      	b.n	800812c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b20      	cmp	r3, #32
 8008128:	d1c8      	bne.n	80080bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008144:	e071      	b.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	68b9      	ldr	r1, [r7, #8]
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 f87e 	bl	800824c <I2C_IsErrorOccurred>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d13b      	bne.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d138      	bne.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b04      	cmp	r3, #4
 800817a:	d105      	bne.n	8008188 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	2b10      	cmp	r3, #16
 8008194:	d121      	bne.n	80081da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2210      	movs	r2, #16
 800819c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2204      	movs	r2, #4
 80081a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2220      	movs	r2, #32
 80081aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b24      	ldr	r3, [pc, #144]	@ (8008248 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80081b8:	400b      	ands	r3, r1
 80081ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
 80081d8:	e002      	b.n	80081e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80081e0:	f7fc fdee 	bl	8004dc0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d302      	bcc.n	80081f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d119      	bne.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d116      	bne.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b04      	cmp	r3, #4
 8008208:	d00f      	beq.n	800822a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820e:	f043 0220 	orr.w	r2, r3, #32
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0304 	and.w	r3, r3, #4
 8008234:	2b04      	cmp	r3, #4
 8008236:	d002      	beq.n	800823e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d083      	beq.n	8008146 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800823e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	fe00e800 	.word	0xfe00e800

0800824c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	f003 0310 	and.w	r3, r3, #16
 8008274:	2b00      	cmp	r3, #0
 8008276:	d068      	beq.n	800834a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2210      	movs	r2, #16
 800827e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008280:	e049      	b.n	8008316 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008288:	d045      	beq.n	8008316 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800828a:	f7fc fd99 	bl	8004dc0 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	429a      	cmp	r2, r3
 8008298:	d302      	bcc.n	80082a0 <I2C_IsErrorOccurred+0x54>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d13a      	bne.n	8008316 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80082b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082c2:	d121      	bne.n	8008308 <I2C_IsErrorOccurred+0xbc>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ca:	d01d      	beq.n	8008308 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80082cc:	7cfb      	ldrb	r3, [r7, #19]
 80082ce:	2b20      	cmp	r3, #32
 80082d0:	d01a      	beq.n	8008308 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80082e2:	f7fc fd6d 	bl	8004dc0 <HAL_GetTick>
 80082e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082e8:	e00e      	b.n	8008308 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80082ea:	f7fc fd69 	bl	8004dc0 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b19      	cmp	r3, #25
 80082f6:	d907      	bls.n	8008308 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	f043 0320 	orr.w	r3, r3, #32
 80082fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008306:	e006      	b.n	8008316 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b20      	cmp	r3, #32
 8008314:	d1e9      	bne.n	80082ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b20      	cmp	r3, #32
 8008322:	d003      	beq.n	800832c <I2C_IsErrorOccurred+0xe0>
 8008324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0aa      	beq.n	8008282 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800832c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2220      	movs	r2, #32
 800833a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	f043 0304 	orr.w	r3, r3, #4
 8008342:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	699b      	ldr	r3, [r3, #24]
 8008350:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800836c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	f043 0308 	orr.w	r3, r3, #8
 8008384:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800838e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00b      	beq.n	80083b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	f043 0302 	orr.w	r3, r3, #2
 80083a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80083b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d01c      	beq.n	80083fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff fd92 	bl	8007eea <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6859      	ldr	r1, [r3, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008408 <I2C_IsErrorOccurred+0x1bc>)
 80083d2:	400b      	ands	r3, r1
 80083d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	431a      	orrs	r2, r3
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80083fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3728      	adds	r7, #40	@ 0x28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	fe00e800 	.word	0xfe00e800

0800840c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	817b      	strh	r3, [r7, #10]
 800841a:	4613      	mov	r3, r2
 800841c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800841e:	897b      	ldrh	r3, [r7, #10]
 8008420:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008424:	7a7b      	ldrb	r3, [r7, #9]
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800842c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	4313      	orrs	r3, r2
 8008436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800843a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	0d5b      	lsrs	r3, r3, #21
 8008446:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800844a:	4b08      	ldr	r3, [pc, #32]	@ (800846c <I2C_TransferConfig+0x60>)
 800844c:	430b      	orrs	r3, r1
 800844e:	43db      	mvns	r3, r3
 8008450:	ea02 0103 	and.w	r1, r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	430a      	orrs	r2, r1
 800845c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	03ff63ff 	.word	0x03ff63ff

08008470 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	460b      	mov	r3, r1
 800847a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008480:	887b      	ldrh	r3, [r7, #2]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00f      	beq.n	80084aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008490:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008498:	b2db      	uxtb	r3, r3
 800849a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800849e:	2b28      	cmp	r3, #40	@ 0x28
 80084a0:	d003      	beq.n	80084aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80084a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80084ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80084c8:	2b28      	cmp	r3, #40	@ 0x28
 80084ca:	d003      	beq.n	80084d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80084d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80084d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da03      	bge.n	80084e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80084e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80084e4:	887b      	ldrh	r3, [r7, #2]
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d103      	bne.n	80084f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80084f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d103      	bne.n	8008500 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f043 0320 	orr.w	r3, r3, #32
 80084fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008500:	887b      	ldrh	r3, [r7, #2]
 8008502:	2b40      	cmp	r3, #64	@ 0x40
 8008504:	d103      	bne.n	800850e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	6819      	ldr	r1, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	43da      	mvns	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	400a      	ands	r2, r1
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b20      	cmp	r3, #32
 8008540:	d138      	bne.n	80085b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800854c:	2302      	movs	r3, #2
 800854e:	e032      	b.n	80085b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2224      	movs	r2, #36	@ 0x24
 800855c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0201 	bic.w	r2, r2, #1
 800856e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800857e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6819      	ldr	r1, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0201 	orr.w	r2, r2, #1
 800859e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b20      	cmp	r3, #32
 80085d6:	d139      	bne.n	800864c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d101      	bne.n	80085e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085e2:	2302      	movs	r3, #2
 80085e4:	e033      	b.n	800864e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2224      	movs	r2, #36	@ 0x24
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0201 	bic.w	r2, r2, #1
 8008604:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008614:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	021b      	lsls	r3, r3, #8
 800861a:	68fa      	ldr	r2, [r7, #12]
 800861c:	4313      	orrs	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0201 	orr.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d101      	bne.n	800866c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0c0      	b.n	80087ee <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	d106      	bne.n	8008686 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f009 f943 	bl	801190c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2203      	movs	r2, #3
 800868a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f004 fc7e 	bl	800cf94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
 800869c:	e03e      	b.n	800871c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800869e:	7bfa      	ldrb	r2, [r7, #15]
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	4613      	mov	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	440b      	add	r3, r1
 80086ac:	3311      	adds	r3, #17
 80086ae:	2201      	movs	r2, #1
 80086b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086b2:	7bfa      	ldrb	r2, [r7, #15]
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	3310      	adds	r3, #16
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80086c6:	7bfa      	ldrb	r2, [r7, #15]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	440b      	add	r3, r1
 80086d4:	3313      	adds	r3, #19
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80086da:	7bfa      	ldrb	r2, [r7, #15]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	3320      	adds	r3, #32
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80086ee:	7bfa      	ldrb	r2, [r7, #15]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	440b      	add	r3, r1
 80086fc:	3324      	adds	r3, #36	@ 0x24
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	1c5a      	adds	r2, r3, #1
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	440b      	add	r3, r1
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	3301      	adds	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	791b      	ldrb	r3, [r3, #4]
 8008720:	7bfa      	ldrb	r2, [r7, #15]
 8008722:	429a      	cmp	r2, r3
 8008724:	d3bb      	bcc.n	800869e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008726:	2300      	movs	r3, #0
 8008728:	73fb      	strb	r3, [r7, #15]
 800872a:	e044      	b.n	80087b6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	00db      	lsls	r3, r3, #3
 8008738:	440b      	add	r3, r1
 800873a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008742:	7bfa      	ldrb	r2, [r7, #15]
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	440b      	add	r3, r1
 8008750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008754:	7bfa      	ldrb	r2, [r7, #15]
 8008756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	00db      	lsls	r3, r3, #3
 8008764:	440b      	add	r3, r1
 8008766:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800876a:	2200      	movs	r2, #0
 800876c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800876e:	7bfa      	ldrb	r2, [r7, #15]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	00db      	lsls	r3, r3, #3
 800877a:	440b      	add	r3, r1
 800877c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008784:	7bfa      	ldrb	r2, [r7, #15]
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	440b      	add	r3, r1
 8008792:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800879a:	7bfa      	ldrb	r2, [r7, #15]
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	440b      	add	r3, r1
 80087a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	3301      	adds	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	791b      	ldrb	r3, [r3, #4]
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d3b5      	bcc.n	800872c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3304      	adds	r3, #4
 80087c8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80087cc:	f004 fbfd 	bl	800cfca <USB_DevInit>

  hpcd->USB_Address = 0U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7a9b      	ldrb	r3, [r3, #10]
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d102      	bne.n	80087ec <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 fc40 	bl	800a06c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_PCD_Start+0x16>
 8008808:	2302      	movs	r3, #2
 800880a:	e012      	b.n	8008832 <HAL_PCD_Start+0x3c>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f004 fba4 	bl	800cf66 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4618      	mov	r0, r3
 8008824:	f006 fe65 	bl	800f4f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4618      	mov	r0, r3
 8008848:	f006 fe6a 	bl	800f520 <USB_ReadInterrupts>
 800884c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fb04 	bl	8008e66 <PCD_EP_ISR_Handler>

    return;
 800885e:	e110      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008866:	2b00      	cmp	r3, #0
 8008868:	d013      	beq.n	8008892 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800887c:	b292      	uxth	r2, r2
 800887e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f009 f8d7 	bl	8011a36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008888:	2100      	movs	r1, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8fc 	bl	8008a88 <HAL_PCD_SetAddress>

    return;
 8008890:	e0f7      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00c      	beq.n	80088b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088ae:	b292      	uxth	r2, r2
 80088b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80088b4:	e0e5      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00c      	beq.n	80088da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088d2:	b292      	uxth	r2, r2
 80088d4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80088d8:	e0d3      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d034      	beq.n	800894e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0204 	bic.w	r2, r2, #4
 80088f6:	b292      	uxth	r2, r2
 80088f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008904:	b29a      	uxth	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0208 	bic.w	r2, r2, #8
 800890e:	b292      	uxth	r2, r2
 8008910:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800891a:	2b01      	cmp	r3, #1
 800891c:	d107      	bne.n	800892e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f009 fa79 	bl	8011e20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f009 f8ba 	bl	8011aa8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800893c:	b29a      	uxth	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008946:	b292      	uxth	r2, r2
 8008948:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800894c:	e099      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008954:	2b00      	cmp	r3, #0
 8008956:	d027      	beq.n	80089a8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0208 	orr.w	r2, r2, #8
 800896a:	b292      	uxth	r2, r2
 800896c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008978:	b29a      	uxth	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008982:	b292      	uxth	r2, r2
 8008984:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008990:	b29a      	uxth	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0204 	orr.w	r2, r2, #4
 800899a:	b292      	uxth	r2, r2
 800899c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f009 f867 	bl	8011a74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80089a6:	e06c      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d040      	beq.n	8008a34 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089c4:	b292      	uxth	r2, r2
 80089c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d12b      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089dc:	b29a      	uxth	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0204 	orr.w	r2, r2, #4
 80089e6:	b292      	uxth	r2, r2
 80089e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0208 	orr.w	r2, r2, #8
 80089fe:	b292      	uxth	r2, r2
 8008a00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	089b      	lsrs	r3, r3, #2
 8008a18:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a22:	2101      	movs	r1, #1
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f009 f9fb 	bl	8011e20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008a2a:	e02a      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f009 f821 	bl	8011a74 <HAL_PCD_SuspendCallback>
    return;
 8008a32:	e026      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00f      	beq.n	8008a5e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a50:	b292      	uxth	r2, r2
 8008a52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f008 ffdf 	bl	8011a1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008a5c:	e011      	b.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d00c      	beq.n	8008a82 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008a80:	bf00      	nop
  }
}
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d101      	bne.n	8008aa2 <HAL_PCD_SetAddress+0x1a>
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	e012      	b.n	8008ac8 <HAL_PCD_SetAddress+0x40>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	4611      	mov	r1, r2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f006 fd06 	bl	800f4ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	4608      	mov	r0, r1
 8008ada:	4611      	mov	r1, r2
 8008adc:	461a      	mov	r2, r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	70fb      	strb	r3, [r7, #3]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	803b      	strh	r3, [r7, #0]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da0e      	bge.n	8008b14 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	f003 0207 	and.w	r2, r3, #7
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	3310      	adds	r3, #16
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	4413      	add	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	705a      	strb	r2, [r3, #1]
 8008b12:	e00e      	b.n	8008b32 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	f003 0207 	and.w	r2, r3, #7
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4413      	add	r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008b3e:	883a      	ldrh	r2, [r7, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	78ba      	ldrb	r2, [r7, #2]
 8008b48:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008b4a:	78bb      	ldrb	r3, [r7, #2]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d102      	bne.n	8008b56 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_PCD_EP_Open+0x94>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e00e      	b.n	8008b82 <HAL_PCD_EP_Open+0xb2>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f004 fa48 	bl	800d008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008b80:	7afb      	ldrb	r3, [r7, #11]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da0e      	bge.n	8008bbc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	f003 0207 	and.w	r2, r3, #7
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	3310      	adds	r3, #16
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	705a      	strb	r2, [r3, #1]
 8008bba:	e00e      	b.n	8008bda <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bbc:	78fb      	ldrb	r3, [r7, #3]
 8008bbe:	f003 0207 	and.w	r2, r3, #7
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_PCD_EP_Close+0x6a>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e00e      	b.n	8008c12 <HAL_PCD_EP_Close+0x88>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f004 fdc4 	bl	800d790 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b086      	sub	sp, #24
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
 8008c26:	460b      	mov	r3, r1
 8008c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c2a:	7afb      	ldrb	r3, [r7, #11]
 8008c2c:	f003 0207 	and.w	r2, r3, #7
 8008c30:	4613      	mov	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4413      	add	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2200      	movs	r2, #0
 8008c52:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2200      	movs	r2, #0
 8008c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6979      	ldr	r1, [r7, #20]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f004 ff7c 	bl	800db6a <USB_EPStartXfer>

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	f003 0207 	and.w	r2, r3, #7
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4613      	mov	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	440b      	add	r3, r1
 8008c9a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008c9e:	681b      	ldr	r3, [r3, #0]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	f003 0207 	and.w	r2, r3, #7
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	3310      	adds	r3, #16
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cf8:	7afb      	ldrb	r3, [r7, #11]
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6979      	ldr	r1, [r7, #20]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f004 ff2d 	bl	800db6a <USB_EPStartXfer>

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008d26:	78fb      	ldrb	r3, [r7, #3]
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7912      	ldrb	r2, [r2, #4]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d901      	bls.n	8008d38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e03e      	b.n	8008db6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	da0e      	bge.n	8008d5e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	f003 0207 	and.w	r2, r3, #7
 8008d46:	4613      	mov	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	3310      	adds	r3, #16
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	4413      	add	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	705a      	strb	r2, [r3, #1]
 8008d5c:	e00c      	b.n	8008d78 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_PCD_EP_SetStall+0x7e>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e00e      	b.n	8008db6 <HAL_PCD_EP_SetStall+0x9c>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68f9      	ldr	r1, [r7, #12]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f006 fa90 	bl	800f2cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008dca:	78fb      	ldrb	r3, [r7, #3]
 8008dcc:	f003 030f 	and.w	r3, r3, #15
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	7912      	ldrb	r2, [r2, #4]
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d901      	bls.n	8008ddc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e040      	b.n	8008e5e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	da0e      	bge.n	8008e02 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	f003 0207 	and.w	r2, r3, #7
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	00db      	lsls	r3, r3, #3
 8008df2:	3310      	adds	r3, #16
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	4413      	add	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	705a      	strb	r2, [r3, #1]
 8008e00:	e00e      	b.n	8008e20 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	f003 0207 	and.w	r2, r3, #7
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	4413      	add	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e26:	78fb      	ldrb	r3, [r7, #3]
 8008e28:	f003 0307 	and.w	r3, r3, #7
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_PCD_EP_ClrStall+0x82>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e00e      	b.n	8008e5e <HAL_PCD_EP_ClrStall+0xa0>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68f9      	ldr	r1, [r7, #12]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f006 fa8d 	bl	800f36e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b096      	sub	sp, #88	@ 0x58
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008e6e:	e3ad      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e78:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8008e8a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 816f 	bne.w	8009172 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008e94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d14c      	bne.n	8008f3a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008eb0:	81fb      	strh	r3, [r7, #14]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	89fb      	ldrh	r3, [r7, #14]
 8008eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6812      	ldr	r2, [r2, #0]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef4:	695a      	ldr	r2, [r3, #20]
 8008ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	441a      	add	r2, r3
 8008efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008efe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f008 fd6f 	bl	80119e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7b1b      	ldrb	r3, [r3, #12]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 835c 	beq.w	80095cc <PCD_EP_ISR_Handler+0x766>
 8008f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f040 8357 	bne.w	80095cc <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	7b1b      	ldrb	r3, [r3, #12]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	731a      	strb	r2, [r3, #12]
 8008f38:	e348      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f40:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d032      	beq.n	8008fbe <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	461a      	mov	r2, r3
 8008f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f7e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8008f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f006 fb16 	bl	800f5c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	823b      	strh	r3, [r7, #16]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	8a3a      	ldrh	r2, [r7, #16]
 8008fae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f008 fce8 	bl	801198c <HAL_PCD_SetupStageCallback>
 8008fbc:	e306      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008fbe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f280 8302 	bge.w	80095cc <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	83fb      	strh	r3, [r7, #30]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	8bfa      	ldrh	r2, [r7, #30]
 8008fde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	4413      	add	r3, r2
 8009000:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800900a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800900c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800900e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d019      	beq.n	800904a <PCD_EP_ISR_Handler+0x1e4>
 8009016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d015      	beq.n	800904a <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009024:	6959      	ldr	r1, [r3, #20]
 8009026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009028:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800902a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800902c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800902e:	b29b      	uxth	r3, r3
 8009030:	f006 fac8 	bl	800f5c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	441a      	add	r2, r3
 800903e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009040:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f008 fcb3 	bl	80119b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009054:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800905c:	2b00      	cmp	r3, #0
 800905e:	f040 82b5 	bne.w	80095cc <PCD_EP_ISR_Handler+0x766>
 8009062:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009066:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800906a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800906e:	f000 82ad 	beq.w	80095cc <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	61bb      	str	r3, [r7, #24]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009080:	b29b      	uxth	r3, r3
 8009082:	461a      	mov	r2, r3
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	4413      	add	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800909c:	b29a      	uxth	r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80090a8:	d91d      	bls.n	80090e6 <PCD_EP_ISR_Handler+0x280>
 80090aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 031f 	and.w	r3, r3, #31
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <PCD_EP_ISR_Handler+0x25e>
 80090be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c0:	3b01      	subs	r3, #1
 80090c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	029b      	lsls	r3, r3, #10
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4313      	orrs	r3, r2
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090de:	b29a      	uxth	r2, r3
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	801a      	strh	r2, [r3, #0]
 80090e4:	e026      	b.n	8009134 <PCD_EP_ISR_Handler+0x2ce>
 80090e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <PCD_EP_ISR_Handler+0x29e>
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	e017      	b.n	8009134 <PCD_EP_ISR_Handler+0x2ce>
 8009104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	085b      	lsrs	r3, r3, #1
 800910a:	647b      	str	r3, [r7, #68]	@ 0x44
 800910c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <PCD_EP_ISR_Handler+0x2b8>
 8009118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800911a:	3301      	adds	r3, #1
 800911c:	647b      	str	r3, [r7, #68]	@ 0x44
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	b29a      	uxth	r2, r3
 8009124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009126:	b29b      	uxth	r3, r3
 8009128:	029b      	lsls	r3, r3, #10
 800912a:	b29b      	uxth	r3, r3
 800912c:	4313      	orrs	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009144:	827b      	strh	r3, [r7, #18]
 8009146:	8a7b      	ldrh	r3, [r7, #18]
 8009148:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800914c:	827b      	strh	r3, [r7, #18]
 800914e:	8a7b      	ldrh	r3, [r7, #18]
 8009150:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009154:	827b      	strh	r3, [r7, #18]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	8a7b      	ldrh	r3, [r7, #18]
 800915c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009160:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916c:	b29b      	uxth	r3, r3
 800916e:	8013      	strh	r3, [r2, #0]
 8009170:	e22c      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	461a      	mov	r2, r3
 8009178:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009186:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800918a:	2b00      	cmp	r3, #0
 800918c:	f280 80f6 	bge.w	800937c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80091a6:	4013      	ands	r3, r2
 80091a8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80091be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80091c2:	b292      	uxth	r2, r2
 80091c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80091c6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	4413      	add	r3, r2
 80091da:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80091dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091de:	7b1b      	ldrb	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d123      	bne.n	800922c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	4413      	add	r3, r2
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	4413      	add	r3, r2
 80091fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009208:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800920c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 808e 	beq.w	8009332 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800921c:	6959      	ldr	r1, [r3, #20]
 800921e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009220:	88da      	ldrh	r2, [r3, #6]
 8009222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009226:	f006 f9cd 	bl	800f5c4 <USB_ReadPMA>
 800922a:	e082      	b.n	8009332 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800922c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800922e:	78db      	ldrb	r3, [r3, #3]
 8009230:	2b02      	cmp	r3, #2
 8009232:	d10a      	bne.n	800924a <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009234:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009238:	461a      	mov	r2, r3
 800923a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9d3 	bl	80095e8 <HAL_PCD_EP_DB_Receive>
 8009242:	4603      	mov	r3, r0
 8009244:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009248:	e073      	b.n	8009332 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	881b      	ldrh	r3, [r3, #0]
 800925a:	b29b      	uxth	r3, r3
 800925c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009264:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	441a      	add	r2, r3
 8009276:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800927a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800927e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009286:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800928a:	b29b      	uxth	r3, r3
 800928c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d022      	beq.n	80092ee <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	461a      	mov	r2, r3
 80092b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6812      	ldr	r2, [r2, #0]
 80092c0:	4413      	add	r3, r2
 80092c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092c6:	881b      	ldrh	r3, [r3, #0]
 80092c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80092d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02c      	beq.n	8009332 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092de:	6959      	ldr	r1, [r3, #20]
 80092e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092e2:	891a      	ldrh	r2, [r3, #8]
 80092e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092e8:	f006 f96c 	bl	800f5c4 <USB_ReadPMA>
 80092ec:	e021      	b.n	8009332 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	00db      	lsls	r3, r3, #3
 8009300:	4413      	add	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6812      	ldr	r2, [r2, #0]
 8009306:	4413      	add	r3, r2
 8009308:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009312:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009324:	6959      	ldr	r1, [r3, #20]
 8009326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009328:	895a      	ldrh	r2, [r3, #10]
 800932a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800932e:	f006 f949 	bl	800f5c4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800933a:	441a      	add	r2, r3
 800933c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800933e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009342:	695a      	ldr	r2, [r3, #20]
 8009344:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009348:	441a      	add	r2, r3
 800934a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800934c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800934e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d005      	beq.n	8009362 <PCD_EP_ISR_Handler+0x4fc>
 8009356:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800935a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	429a      	cmp	r2, r3
 8009360:	d206      	bcs.n	8009370 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f008 fb21 	bl	80119b0 <HAL_PCD_DataOutStageCallback>
 800936e:	e005      	b.n	800937c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009376:	4618      	mov	r0, r3
 8009378:	f004 fbf7 	bl	800db6a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800937c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 8121 	beq.w	80095cc <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800938a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800938e:	4613      	mov	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	3310      	adds	r3, #16
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	4413      	add	r3, r2
 800939c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80093b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	461a      	mov	r2, r3
 80093c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	441a      	add	r2, r3
 80093ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80093ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80093da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093dc:	78db      	ldrb	r3, [r3, #3]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	f040 80a2 	bne.w	8009528 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80093e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093e6:	2200      	movs	r2, #0
 80093e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80093ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093ec:	7b1b      	ldrb	r3, [r3, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8093 	beq.w	800951a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80093f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80093f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d046      	beq.n	800948e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d126      	bne.n	8009456 <PCD_EP_ISR_Handler+0x5f0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009416:	b29b      	uxth	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941c:	4413      	add	r3, r2
 800941e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	00da      	lsls	r2, r3, #3
 8009426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009428:	4413      	add	r3, r2
 800942a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800942e:	623b      	str	r3, [r7, #32]
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800943a:	b29a      	uxth	r2, r3
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	801a      	strh	r2, [r3, #0]
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800944a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800944e:	b29a      	uxth	r2, r3
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	e061      	b.n	800951a <PCD_EP_ISR_Handler+0x6b4>
 8009456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d15d      	bne.n	800951a <PCD_EP_ISR_Handler+0x6b4>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800946c:	b29b      	uxth	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	4413      	add	r3, r2
 8009474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	00da      	lsls	r2, r3, #3
 800947c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947e:	4413      	add	r3, r2
 8009480:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	2200      	movs	r2, #0
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	e045      	b.n	800951a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009496:	785b      	ldrb	r3, [r3, #1]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d126      	bne.n	80094ea <PCD_EP_ISR_Handler+0x684>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	461a      	mov	r2, r3
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	4413      	add	r3, r2
 80094b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	00da      	lsls	r2, r3, #3
 80094ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094bc:	4413      	add	r3, r2
 80094be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	801a      	strh	r2, [r3, #0]
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	801a      	strh	r2, [r3, #0]
 80094e8:	e017      	b.n	800951a <PCD_EP_ISR_Handler+0x6b4>
 80094ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d113      	bne.n	800951a <PCD_EP_ISR_Handler+0x6b4>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009500:	4413      	add	r3, r2
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	00da      	lsls	r2, r3, #3
 800950a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800950c:	4413      	add	r3, r2
 800950e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009516:	2200      	movs	r2, #0
 8009518:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800951a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f008 fa60 	bl	80119e6 <HAL_PCD_DataInStageCallback>
 8009526:	e051      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800952c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009530:	2b00      	cmp	r3, #0
 8009532:	d144      	bne.n	80095be <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	4413      	add	r3, r2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	6812      	ldr	r2, [r2, #0]
 800954c:	4413      	add	r3, r2
 800954e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009558:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800955c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009564:	429a      	cmp	r2, r3
 8009566:	d907      	bls.n	8009578 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8009568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800956a:	699a      	ldr	r2, [r3, #24]
 800956c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009570:	1ad2      	subs	r2, r2, r3
 8009572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009574:	619a      	str	r2, [r3, #24]
 8009576:	e002      	b.n	800957e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8009578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800957e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d106      	bne.n	8009594 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f008 fa2a 	bl	80119e6 <HAL_PCD_DataInStageCallback>
 8009592:	e01b      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009596:	695a      	ldr	r2, [r3, #20]
 8009598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800959c:	441a      	add	r2, r3
 800959e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80095a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a4:	69da      	ldr	r2, [r3, #28]
 80095a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80095aa:	441a      	add	r2, r3
 80095ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095ae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095b6:	4618      	mov	r0, r3
 80095b8:	f004 fad7 	bl	800db6a <USB_EPStartXfer>
 80095bc:	e006      	b.n	80095cc <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80095be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80095c2:	461a      	mov	r2, r3
 80095c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f917 	bl	80097fa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b21b      	sxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f6ff ac49 	blt.w	8008e70 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3758      	adds	r7, #88	@ 0x58
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d07c      	beq.n	80096fa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009608:	b29b      	uxth	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	00db      	lsls	r3, r3, #3
 8009612:	4413      	add	r3, r2
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	6812      	ldr	r2, [r2, #0]
 8009618:	4413      	add	r3, r2
 800961a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009624:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	699a      	ldr	r2, [r3, #24]
 800962a:	8b7b      	ldrh	r3, [r7, #26]
 800962c:	429a      	cmp	r2, r3
 800962e:	d306      	bcc.n	800963e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	699a      	ldr	r2, [r3, #24]
 8009634:	8b7b      	ldrh	r3, [r7, #26]
 8009636:	1ad2      	subs	r2, r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	619a      	str	r2, [r3, #24]
 800963c:	e002      	b.n	8009644 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2200      	movs	r2, #0
 8009642:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d123      	bne.n	8009694 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009666:	833b      	strh	r3, [r7, #24]
 8009668:	8b3b      	ldrh	r3, [r7, #24]
 800966a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800966e:	833b      	strh	r3, [r7, #24]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	441a      	add	r2, r3
 800967e:	8b3b      	ldrh	r3, [r7, #24]
 8009680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009690:	b29b      	uxth	r3, r3
 8009692:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969a:	2b00      	cmp	r3, #0
 800969c:	d01f      	beq.n	80096de <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096b8:	82fb      	strh	r3, [r7, #22]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	461a      	mov	r2, r3
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	441a      	add	r2, r3
 80096c8:	8afb      	ldrh	r3, [r7, #22]
 80096ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80096de:	8b7b      	ldrh	r3, [r7, #26]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8085 	beq.w	80097f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6959      	ldr	r1, [r3, #20]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	891a      	ldrh	r2, [r3, #8]
 80096f2:	8b7b      	ldrh	r3, [r7, #26]
 80096f4:	f005 ff66 	bl	800f5c4 <USB_ReadPMA>
 80096f8:	e07a      	b.n	80097f0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009702:	b29b      	uxth	r3, r3
 8009704:	461a      	mov	r2, r3
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4413      	add	r3, r2
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	6812      	ldr	r2, [r2, #0]
 8009712:	4413      	add	r3, r2
 8009714:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800971e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	699a      	ldr	r2, [r3, #24]
 8009724:	8b7b      	ldrh	r3, [r7, #26]
 8009726:	429a      	cmp	r2, r3
 8009728:	d306      	bcc.n	8009738 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	8b7b      	ldrh	r3, [r7, #26]
 8009730:	1ad2      	subs	r2, r2, r3
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	619a      	str	r2, [r3, #24]
 8009736:	e002      	b.n	800973e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2200      	movs	r2, #0
 800973c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d123      	bne.n	800978e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29b      	uxth	r3, r3
 8009758:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800975c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009760:	83fb      	strh	r3, [r7, #30]
 8009762:	8bfb      	ldrh	r3, [r7, #30]
 8009764:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009768:	83fb      	strh	r3, [r7, #30]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	441a      	add	r2, r3
 8009778:	8bfb      	ldrh	r3, [r7, #30]
 800977a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800977e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800978a:	b29b      	uxth	r3, r3
 800978c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11f      	bne.n	80097d8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	4413      	add	r3, r2
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b2:	83bb      	strh	r3, [r7, #28]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	441a      	add	r2, r3
 80097c2:	8bbb      	ldrh	r3, [r7, #28]
 80097c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80097d8:	8b7b      	ldrh	r3, [r7, #26]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d008      	beq.n	80097f0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6818      	ldr	r0, [r3, #0]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6959      	ldr	r1, [r3, #20]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	895a      	ldrh	r2, [r3, #10]
 80097ea:	8b7b      	ldrh	r3, [r7, #26]
 80097ec:	f005 feea 	bl	800f5c4 <USB_ReadPMA>
    }
  }

  return count;
 80097f0:	8b7b      	ldrh	r3, [r7, #26]
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b0a4      	sub	sp, #144	@ 0x90
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	4613      	mov	r3, r2
 8009806:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 81db 	beq.w	8009bca <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800981c:	b29b      	uxth	r3, r3
 800981e:	461a      	mov	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	4413      	add	r3, r2
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	4413      	add	r3, r2
 800982e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009838:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009844:	429a      	cmp	r2, r3
 8009846:	d907      	bls.n	8009858 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	699a      	ldr	r2, [r3, #24]
 800984c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009850:	1ad2      	subs	r2, r2, r3
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	619a      	str	r2, [r3, #24]
 8009856:	e002      	b.n	800985e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f040 80b9 	bne.w	80099da <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d126      	bne.n	80098be <HAL_PCD_EP_DB_Transmit+0xc4>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009884:	4413      	add	r3, r2
 8009886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	00da      	lsls	r2, r3, #3
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	4413      	add	r3, r2
 8009892:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989a:	881b      	ldrh	r3, [r3, #0]
 800989c:	b29b      	uxth	r3, r3
 800989e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ba:	801a      	strh	r2, [r3, #0]
 80098bc:	e01a      	b.n	80098f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	785b      	ldrb	r3, [r3, #1]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d116      	bne.n	80098f4 <HAL_PCD_EP_DB_Transmit+0xfa>
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098da:	4413      	add	r3, r2
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	00da      	lsls	r2, r3, #3
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	4413      	add	r3, r2
 80098e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f0:	2200      	movs	r2, #0
 80098f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d126      	bne.n	8009950 <HAL_PCD_EP_DB_Transmit+0x156>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	61fb      	str	r3, [r7, #28]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009910:	b29b      	uxth	r3, r3
 8009912:	461a      	mov	r2, r3
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	61fb      	str	r3, [r7, #28]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	00da      	lsls	r2, r3, #3
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	881b      	ldrh	r3, [r3, #0]
 800992e:	b29b      	uxth	r3, r3
 8009930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009934:	b29a      	uxth	r2, r3
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	801a      	strh	r2, [r3, #0]
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009948:	b29a      	uxth	r2, r3
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	801a      	strh	r2, [r3, #0]
 800994e:	e017      	b.n	8009980 <HAL_PCD_EP_DB_Transmit+0x186>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d113      	bne.n	8009980 <HAL_PCD_EP_DB_Transmit+0x186>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009960:	b29b      	uxth	r3, r3
 8009962:	461a      	mov	r2, r3
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	4413      	add	r3, r2
 8009968:	627b      	str	r3, [r7, #36]	@ 0x24
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	00da      	lsls	r2, r3, #3
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	4413      	add	r3, r2
 8009974:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009978:	623b      	str	r3, [r7, #32]
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	2200      	movs	r2, #0
 800997e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f008 f82d 	bl	80119e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800998c:	88fb      	ldrh	r3, [r7, #6]
 800998e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 82fa 	beq.w	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099b2:	82fb      	strh	r3, [r7, #22]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	461a      	mov	r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	441a      	add	r2, r3
 80099c2:	8afb      	ldrh	r3, [r7, #22]
 80099c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	8013      	strh	r3, [r2, #0]
 80099d8:	e2d8      	b.n	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80099da:	88fb      	ldrh	r3, [r7, #6]
 80099dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d021      	beq.n	8009a28 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	881b      	ldrh	r3, [r3, #0]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	441a      	add	r2, r3
 8009a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	f040 82ac 	bne.w	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	695a      	ldr	r2, [r3, #20]
 8009a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a3c:	441a      	add	r2, r3
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	69da      	ldr	r2, [r3, #28]
 8009a46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a4a:	441a      	add	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6a1a      	ldr	r2, [r3, #32]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d30b      	bcc.n	8009a74 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a6c:	1ad2      	subs	r2, r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	621a      	str	r2, [r3, #32]
 8009a72:	e017      	b.n	8009aa4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d108      	bne.n	8009a8e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8009a7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009a8c:	e00a      	b.n	8009aa4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d165      	bne.n	8009b78 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	461a      	mov	r2, r3
 8009abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac0:	4413      	add	r3, r2
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	00da      	lsls	r2, r3, #3
 8009aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009acc:	4413      	add	r3, r2
 8009ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ae8:	2b3e      	cmp	r3, #62	@ 0x3e
 8009aea:	d91d      	bls.n	8009b28 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af0:	095b      	lsrs	r3, r3, #5
 8009af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009af8:	f003 031f 	and.w	r3, r3, #31
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <HAL_PCD_EP_DB_Transmit+0x30c>
 8009b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b02:	3b01      	subs	r3, #1
 8009b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	029b      	lsls	r3, r3, #10
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	4313      	orrs	r3, r2
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	801a      	strh	r2, [r3, #0]
 8009b26:	e044      	b.n	8009bb2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <HAL_PCD_EP_DB_Transmit+0x34c>
 8009b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	e035      	b.n	8009bb2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <HAL_PCD_EP_DB_Transmit+0x366>
 8009b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	029b      	lsls	r3, r3, #10
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b74:	801a      	strh	r2, [r3, #0]
 8009b76:	e01c      	b.n	8009bb2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d118      	bne.n	8009bb2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b94:	4413      	add	r3, r2
 8009b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	00da      	lsls	r2, r3, #3
 8009b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ba6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bb0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6959      	ldr	r1, [r3, #20]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	891a      	ldrh	r2, [r3, #8]
 8009bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	f005 fcbc 	bl	800f540 <USB_WritePMA>
 8009bc8:	e1e0      	b.n	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	00db      	lsls	r3, r3, #3
 8009bdc:	4413      	add	r3, r2
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	4413      	add	r3, r2
 8009be4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bee:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d307      	bcc.n	8009c0e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	699a      	ldr	r2, [r3, #24]
 8009c02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009c06:	1ad2      	subs	r2, r2, r3
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	619a      	str	r2, [r3, #24]
 8009c0c:	e002      	b.n	8009c14 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2200      	movs	r2, #0
 8009c12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f040 80c0 	bne.w	8009d9e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	785b      	ldrb	r3, [r3, #1]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d126      	bne.n	8009c74 <HAL_PCD_EP_DB_Transmit+0x47a>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	461a      	mov	r2, r3
 8009c38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c3a:	4413      	add	r3, r2
 8009c3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	00da      	lsls	r2, r3, #3
 8009c44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009c46:	4413      	add	r3, r2
 8009c48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c5c:	801a      	strh	r2, [r3, #0]
 8009c5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	e01a      	b.n	8009caa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d116      	bne.n	8009caa <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c90:	4413      	add	r3, r2
 8009c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	00da      	lsls	r2, r3, #3
 8009c9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ca2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ca4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	677b      	str	r3, [r7, #116]	@ 0x74
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	785b      	ldrb	r3, [r3, #1]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d12b      	bne.n	8009d10 <HAL_PCD_EP_DB_Transmit+0x516>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ccc:	4413      	add	r3, r2
 8009cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	00da      	lsls	r2, r3, #3
 8009cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd8:	4413      	add	r3, r2
 8009cda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009d0c:	801a      	strh	r2, [r3, #0]
 8009d0e:	e017      	b.n	8009d40 <HAL_PCD_EP_DB_Transmit+0x546>
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	785b      	ldrb	r3, [r3, #1]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d113      	bne.n	8009d40 <HAL_PCD_EP_DB_Transmit+0x546>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	461a      	mov	r2, r3
 8009d24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d26:	4413      	add	r3, r2
 8009d28:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	00da      	lsls	r2, r3, #3
 8009d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d32:	4413      	add	r3, r2
 8009d34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	4619      	mov	r1, r3
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f007 fe4d 	bl	80119e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f040 811a 	bne.w	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	881b      	ldrh	r3, [r3, #0]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d72:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	441a      	add	r2, r3
 8009d84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8009d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	8013      	strh	r3, [r2, #0]
 8009d9c:	e0f6      	b.n	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d121      	bne.n	8009dec <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	461a      	mov	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	441a      	add	r2, r3
 8009dd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009de0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	f040 80ca 	bne.w	8009f8c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	695a      	ldr	r2, [r3, #20]
 8009dfc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e00:	441a      	add	r2, r3
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	69da      	ldr	r2, [r3, #28]
 8009e0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e0e:	441a      	add	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d30b      	bcc.n	8009e38 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e30:	1ad2      	subs	r2, r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	621a      	str	r2, [r3, #32]
 8009e36:	e017      	b.n	8009e68 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d108      	bne.n	8009e52 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009e40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009e50:	e00a      	b.n	8009e68 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d165      	bne.n	8009f42 <HAL_PCD_EP_DB_Transmit+0x748>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	461a      	mov	r2, r3
 8009e88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e8a:	4413      	add	r3, r2
 8009e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	00da      	lsls	r2, r3, #3
 8009e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e96:	4413      	add	r3, r2
 8009e98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eb4:	d91d      	bls.n	8009ef2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8009eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eba:	095b      	lsrs	r3, r3, #5
 8009ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ec2:	f003 031f 	and.w	r3, r3, #31
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d102      	bne.n	8009ed0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ed0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	029b      	lsls	r3, r3, #10
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eee:	801a      	strh	r2, [r3, #0]
 8009ef0:	e041      	b.n	8009f76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <HAL_PCD_EP_DB_Transmit+0x716>
 8009efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f08:	b29a      	uxth	r2, r3
 8009f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e032      	b.n	8009f76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f14:	085b      	lsrs	r3, r3, #1
 8009f16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f1c:	f003 0301 	and.w	r3, r3, #1
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_PCD_EP_DB_Transmit+0x730>
 8009f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f26:	3301      	adds	r3, #1
 8009f28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	029b      	lsls	r3, r3, #10
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	e019      	b.n	8009f76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	785b      	ldrb	r3, [r3, #1]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d115      	bne.n	8009f76 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f58:	4413      	add	r3, r2
 8009f5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	00da      	lsls	r2, r3, #3
 8009f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f64:	4413      	add	r3, r2
 8009f66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f74:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6959      	ldr	r1, [r3, #20]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	895a      	ldrh	r2, [r3, #10]
 8009f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	f005 fada 	bl	800f540 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fa6:	82bb      	strh	r3, [r7, #20]
 8009fa8:	8abb      	ldrh	r3, [r7, #20]
 8009faa:	f083 0310 	eor.w	r3, r3, #16
 8009fae:	82bb      	strh	r3, [r7, #20]
 8009fb0:	8abb      	ldrh	r3, [r7, #20]
 8009fb2:	f083 0320 	eor.w	r3, r3, #32
 8009fb6:	82bb      	strh	r3, [r7, #20]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	441a      	add	r2, r3
 8009fc6:	8abb      	ldrh	r3, [r7, #20]
 8009fc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3790      	adds	r7, #144	@ 0x90
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b087      	sub	sp, #28
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	607b      	str	r3, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	817b      	strh	r3, [r7, #10]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009ff8:	897b      	ldrh	r3, [r7, #10]
 8009ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00b      	beq.n	800a01c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a004:	897b      	ldrh	r3, [r7, #10]
 800a006:	f003 0207 	and.w	r2, r3, #7
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	3310      	adds	r3, #16
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4413      	add	r3, r2
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	e009      	b.n	800a030 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a01c:	897a      	ldrh	r2, [r7, #10]
 800a01e:	4613      	mov	r3, r2
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	00db      	lsls	r3, r3, #3
 800a026:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a030:	893b      	ldrh	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d107      	bne.n	800a046 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2200      	movs	r2, #0
 800a03a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	b29a      	uxth	r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	80da      	strh	r2, [r3, #6]
 800a044:	e00b      	b.n	800a05e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2201      	movs	r2, #1
 800a04a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	0c1b      	lsrs	r3, r3, #16
 800a058:	b29a      	uxth	r2, r3
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	371c      	adds	r7, #28
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a090:	b29b      	uxth	r3, r3
 800a092:	f043 0301 	orr.w	r3, r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f043 0302 	orr.w	r3, r3, #2
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0c4:	4b05      	ldr	r3, [pc, #20]	@ (800a0dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a04      	ldr	r2, [pc, #16]	@ (800a0dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a0ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0ce:	6013      	str	r3, [r2, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	58000400 	.word	0x58000400

0800a0e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a0e4:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <HAL_PWREx_GetVoltageRange+0x18>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	58000400 	.word	0x58000400

0800a0fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a100:	4b05      	ldr	r3, [pc, #20]	@ (800a118 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	4a04      	ldr	r2, [pc, #16]	@ (800a118 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a106:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a10a:	6053      	str	r3, [r2, #4]
}
 800a10c:	bf00      	nop
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	58000400 	.word	0x58000400

0800a11c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a12a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a12e:	d101      	bne.n	800a134 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a130:	2301      	movs	r3, #1
 800a132:	e000      	b.n	800a136 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a14e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a152:	6013      	str	r3, [r2, #0]
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800a15e:	b480      	push	{r7}
 800a160:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a16c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a170:	6013      	str	r3, [r2, #0]
}
 800a172:	bf00      	nop
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a18e:	d101      	bne.n	800a194 <LL_RCC_HSE_IsReady+0x18>
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <LL_RCC_HSE_IsReady+0x1a>
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a1a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a1b2:	6013      	str	r3, [r2, #0]
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a1c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1d0:	6013      	str	r3, [r2, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a1e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1ee:	d101      	bne.n	800a1f4 <LL_RCC_HSI_IsReady+0x18>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e000      	b.n	800a1f6 <LL_RCC_HSI_IsReady+0x1a>
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	061b      	lsls	r3, r3, #24
 800a216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a21a:	4313      	orrs	r3, r2
 800a21c:	604b      	str	r3, [r1, #4]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800a22a:	b480      	push	{r7}
 800a22c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a22e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a236:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a23a:	f043 0301 	orr.w	r3, r3, #1
 800a23e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a242:	bf00      	nop
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a25c:	f023 0301 	bic.w	r3, r3, #1
 800a260:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800a26e:	b480      	push	{r7}
 800a270:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a27a:	f003 0302 	and.w	r3, r3, #2
 800a27e:	2b02      	cmp	r3, #2
 800a280:	d101      	bne.n	800a286 <LL_RCC_HSI48_IsReady+0x18>
 800a282:	2301      	movs	r3, #1
 800a284:	e000      	b.n	800a288 <LL_RCC_HSI48_IsReady+0x1a>
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800a292:	b480      	push	{r7}
 800a294:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a29a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a29e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2aa:	bf00      	nop
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a2b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2c4:	f023 0301 	bic.w	r3, r3, #1
 800a2c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2cc:	bf00      	nop
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a2da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2e6:	f043 0304 	orr.w	r3, r3, #4
 800a2ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2ee:	bf00      	nop
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a2fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a308:	f023 0304 	bic.w	r3, r3, #4
 800a30c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a310:	bf00      	nop
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a31a:	b480      	push	{r7}
 800a31c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a31e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	d101      	bne.n	800a332 <LL_RCC_LSE_IsReady+0x18>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <LL_RCC_LSE_IsReady+0x1a>
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800a33e:	b480      	push	{r7}
 800a340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a34a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a356:	bf00      	nop
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800a360:	b480      	push	{r7}
 800a362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a36c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a370:	f023 0301 	bic.w	r3, r3, #1
 800a374:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a378:	bf00      	nop
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800a382:	b480      	push	{r7}
 800a384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b02      	cmp	r3, #2
 800a394:	d101      	bne.n	800a39a <LL_RCC_LSI1_IsReady+0x18>
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <LL_RCC_LSI1_IsReady+0x1a>
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3b6:	f043 0304 	orr.w	r3, r3, #4
 800a3ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3be:	bf00      	nop
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a3cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3d8:	f023 0304 	bic.w	r3, r3, #4
 800a3dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a3e0:	bf00      	nop
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a3ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3f6:	f003 0308 	and.w	r3, r3, #8
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d101      	bne.n	800a402 <LL_RCC_LSI2_IsReady+0x18>
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <LL_RCC_LSI2_IsReady+0x1a>
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr

0800a40e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800a40e:	b480      	push	{r7}
 800a410:	b083      	sub	sp, #12
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a41a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a41e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	021b      	lsls	r3, r3, #8
 800a426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a42a:	4313      	orrs	r3, r2
 800a42c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	6013      	str	r3, [r2, #0]
}
 800a450:	bf00      	nop
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800a45a:	b480      	push	{r7}
 800a45c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a45e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a468:	f023 0301 	bic.w	r3, r3, #1
 800a46c:	6013      	str	r3, [r2, #0]
}
 800a46e:	bf00      	nop
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b02      	cmp	r3, #2
 800a488:	d101      	bne.n	800a48e <LL_RCC_MSI_IsReady+0x16>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <LL_RCC_MSI_IsReady+0x18>
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b083      	sub	sp, #12
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a4a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	600b      	str	r3, [r1, #0]
}
 800a4b6:	bf00      	nop
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a4c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2bb0      	cmp	r3, #176	@ 0xb0
 800a4d8:	d901      	bls.n	800a4de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800a4da:	23b0      	movs	r3, #176	@ 0xb0
 800a4dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800a4de:	687b      	ldr	r3, [r7, #4]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a506:	4313      	orrs	r3, r2
 800a508:	604b      	str	r3, [r1, #4]
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a51e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	f023 0203 	bic.w	r2, r3, #3
 800a528:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4313      	orrs	r3, r2
 800a530:	608b      	str	r3, [r1, #8]
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a53e:	b480      	push	{r7}
 800a540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f003 030c 	and.w	r3, r3, #12
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a556:	b480      	push	{r7}
 800a558:	b083      	sub	sp, #12
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a55e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4313      	orrs	r3, r2
 800a570:	608b      	str	r3, [r1, #8]
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a58a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a58e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4313      	orrs	r3, r2
 800a59a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a5b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5ba:	f023 020f 	bic.w	r2, r3, #15
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	091b      	lsrs	r3, r3, #4
 800a5c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a5ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	608b      	str	r3, [r1, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4313      	orrs	r3, r2
 800a61a:	608b      	str	r3, [r1, #8]
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a62c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a636:	4618      	mov	r0, r3
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a648:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a64c:	011b      	lsls	r3, r3, #4
 800a64e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a652:	4618      	mov	r0, r3
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a65c:	b480      	push	{r7}
 800a65e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a674:	b480      	push	{r7}
 800a676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a682:	4618      	mov	r0, r3
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a690:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a69a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a69e:	6013      	str	r3, [r2, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a6ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a6b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a6bc:	6013      	str	r3, [r2, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a6cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6da:	d101      	bne.n	800a6e0 <LL_RCC_PLL_IsReady+0x18>
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e000      	b.n	800a6e2 <LL_RCC_PLL_IsReady+0x1a>
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a6f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	0a1b      	lsrs	r3, r3, #8
 800a6f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a706:	b480      	push	{r7}
 800a708:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a714:	4618      	mov	r0, r3
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a71e:	b480      	push	{r7}
 800a720:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a736:	b480      	push	{r7}
 800a738:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a73a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f003 0303 	and.w	r3, r3, #3
}
 800a744:	4618      	mov	r0, r3
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a74e:	b480      	push	{r7}
 800a750:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a760:	d101      	bne.n	800a766 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a772:	b480      	push	{r7}
 800a774:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a77a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a77e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a782:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a786:	d101      	bne.n	800a78c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a788:	2301      	movs	r3, #1
 800a78a:	e000      	b.n	800a78e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a79c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a7a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a7a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ac:	d101      	bne.n	800a7b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e000      	b.n	800a7b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a7c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a7d0:	d101      	bne.n	800a7d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a7e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7f4:	d101      	bne.n	800a7fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
	...

0800a808 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a808:	b590      	push	{r4, r7, lr}
 800a80a:	b08d      	sub	sp, #52	@ 0x34
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e363      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 808d 	beq.w	800a942 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a828:	f7ff fe89 	bl	800a53e <LL_RCC_GetSysClkSource>
 800a82c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a82e:	f7ff ff82 	bl	800a736 <LL_RCC_PLL_GetMainSource>
 800a832:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <HAL_RCC_OscConfig+0x3e>
 800a83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83c:	2b0c      	cmp	r3, #12
 800a83e:	d147      	bne.n	800a8d0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a842:	2b01      	cmp	r3, #1
 800a844:	d144      	bne.n	800a8d0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	69db      	ldr	r3, [r3, #28]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e347      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a856:	f7ff fe34 	bl	800a4c2 <LL_RCC_MSI_GetRange>
 800a85a:	4603      	mov	r3, r0
 800a85c:	429c      	cmp	r4, r3
 800a85e:	d914      	bls.n	800a88a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fd2f 	bl	800b2c8 <RCC_SetFlashLatencyFromMSIRange>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e336      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	4618      	mov	r0, r3
 800a87a:	f7ff fe0e 	bl	800a49a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff fe32 	bl	800a4ec <LL_RCC_MSI_SetCalibTrimming>
 800a888:	e013      	b.n	800a8b2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fe03 	bl	800a49a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	4618      	mov	r0, r3
 800a89a:	f7ff fe27 	bl	800a4ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fd10 	bl	800b2c8 <RCC_SetFlashLatencyFromMSIRange>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e317      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a8b2:	f000 fcc9 	bl	800b248 <HAL_RCC_GetHCLKFreq>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4aa4      	ldr	r2, [pc, #656]	@ (800ab4c <HAL_RCC_OscConfig+0x344>)
 800a8ba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a8bc:	4ba4      	ldr	r3, [pc, #656]	@ (800ab50 <HAL_RCC_OscConfig+0x348>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fa fa2f 	bl	8004d24 <HAL_InitTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d039      	beq.n	800a940 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e308      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	69db      	ldr	r3, [r3, #28]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01e      	beq.n	800a916 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a8d8:	f7ff fdb0 	bl	800a43c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a8dc:	f7fa fa70 	bl	8004dc0 <HAL_GetTick>
 800a8e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a8e2:	e008      	b.n	800a8f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8e4:	f7fa fa6c 	bl	8004dc0 <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d901      	bls.n	800a8f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e2f5      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a8f6:	f7ff fdbf 	bl	800a478 <LL_RCC_MSI_IsReady>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0f1      	beq.n	800a8e4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fdc8 	bl	800a49a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fdec 	bl	800a4ec <LL_RCC_MSI_SetCalibTrimming>
 800a914:	e015      	b.n	800a942 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a916:	f7ff fda0 	bl	800a45a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a91a:	f7fa fa51 	bl	8004dc0 <HAL_GetTick>
 800a91e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a920:	e008      	b.n	800a934 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a922:	f7fa fa4d 	bl	8004dc0 <HAL_GetTick>
 800a926:	4602      	mov	r2, r0
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d901      	bls.n	800a934 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e2d6      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a934:	f7ff fda0 	bl	800a478 <LL_RCC_MSI_IsReady>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1f1      	bne.n	800a922 <HAL_RCC_OscConfig+0x11a>
 800a93e:	e000      	b.n	800a942 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a940:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d047      	beq.n	800a9de <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a94e:	f7ff fdf6 	bl	800a53e <LL_RCC_GetSysClkSource>
 800a952:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a954:	f7ff feef 	bl	800a736 <LL_RCC_PLL_GetMainSource>
 800a958:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d005      	beq.n	800a96c <HAL_RCC_OscConfig+0x164>
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	2b0c      	cmp	r3, #12
 800a964:	d108      	bne.n	800a978 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d105      	bne.n	800a978 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d134      	bne.n	800a9de <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e2b4      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a980:	d102      	bne.n	800a988 <HAL_RCC_OscConfig+0x180>
 800a982:	f7ff fbdd 	bl	800a140 <LL_RCC_HSE_Enable>
 800a986:	e001      	b.n	800a98c <HAL_RCC_OscConfig+0x184>
 800a988:	f7ff fbe9 	bl	800a15e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d012      	beq.n	800a9ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a994:	f7fa fa14 	bl	8004dc0 <HAL_GetTick>
 800a998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a99a:	e008      	b.n	800a9ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a99c:	f7fa fa10 	bl	8004dc0 <HAL_GetTick>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	2b64      	cmp	r3, #100	@ 0x64
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e299      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a9ae:	f7ff fbe5 	bl	800a17c <LL_RCC_HSE_IsReady>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0f1      	beq.n	800a99c <HAL_RCC_OscConfig+0x194>
 800a9b8:	e011      	b.n	800a9de <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ba:	f7fa fa01 	bl	8004dc0 <HAL_GetTick>
 800a9be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9c0:	e008      	b.n	800a9d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9c2:	f7fa f9fd 	bl	8004dc0 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	2b64      	cmp	r3, #100	@ 0x64
 800a9ce:	d901      	bls.n	800a9d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	e286      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a9d4:	f7ff fbd2 	bl	800a17c <LL_RCC_HSE_IsReady>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1f1      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d04c      	beq.n	800aa84 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9ea:	f7ff fda8 	bl	800a53e <LL_RCC_GetSysClkSource>
 800a9ee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a9f0:	f7ff fea1 	bl	800a736 <LL_RCC_PLL_GetMainSource>
 800a9f4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	2b04      	cmp	r3, #4
 800a9fa:	d005      	beq.n	800aa08 <HAL_RCC_OscConfig+0x200>
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	2b0c      	cmp	r3, #12
 800aa00:	d10e      	bne.n	800aa20 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d10b      	bne.n	800aa20 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e266      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff fbf1 	bl	800a200 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800aa1e:	e031      	b.n	800aa84 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d019      	beq.n	800aa5c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa28:	f7ff fbba 	bl	800a1a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa2c:	f7fa f9c8 	bl	8004dc0 <HAL_GetTick>
 800aa30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa32:	e008      	b.n	800aa46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa34:	f7fa f9c4 	bl	8004dc0 <HAL_GetTick>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d901      	bls.n	800aa46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e24d      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800aa46:	f7ff fbc9 	bl	800a1dc <LL_RCC_HSI_IsReady>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0f1      	beq.n	800aa34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff fbd3 	bl	800a200 <LL_RCC_HSI_SetCalibTrimming>
 800aa5a:	e013      	b.n	800aa84 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa5c:	f7ff fbaf 	bl	800a1be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa60:	f7fa f9ae 	bl	8004dc0 <HAL_GetTick>
 800aa64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa66:	e008      	b.n	800aa7a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa68:	f7fa f9aa 	bl	8004dc0 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d901      	bls.n	800aa7a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800aa76:	2303      	movs	r3, #3
 800aa78:	e233      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa7a:	f7ff fbaf 	bl	800a1dc <LL_RCC_HSI_IsReady>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1f1      	bne.n	800aa68 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0308 	and.w	r3, r3, #8
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d106      	bne.n	800aa9e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 80a3 	beq.w	800abe4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d076      	beq.n	800ab94 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0310 	and.w	r3, r3, #16
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d046      	beq.n	800ab40 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aab2:	f7ff fc66 	bl	800a382 <LL_RCC_LSI1_IsReady>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d113      	bne.n	800aae4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aabc:	f7ff fc3f 	bl	800a33e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aac0:	f7fa f97e 	bl	8004dc0 <HAL_GetTick>
 800aac4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aac6:	e008      	b.n	800aada <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aac8:	f7fa f97a 	bl	8004dc0 <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d901      	bls.n	800aada <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e203      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aada:	f7ff fc52 	bl	800a382 <LL_RCC_LSI1_IsReady>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d0f1      	beq.n	800aac8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800aae4:	f7ff fc5f 	bl	800a3a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aae8:	f7fa f96a 	bl	8004dc0 <HAL_GetTick>
 800aaec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aaee:	e008      	b.n	800ab02 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aaf0:	f7fa f966 	bl	8004dc0 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d901      	bls.n	800ab02 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e1ef      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ab02:	f7ff fc72 	bl	800a3ea <LL_RCC_LSI2_IsReady>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0f1      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fc7c 	bl	800a40e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ab16:	f7ff fc23 	bl	800a360 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab1a:	f7fa f951 	bl	8004dc0 <HAL_GetTick>
 800ab1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab20:	e008      	b.n	800ab34 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab22:	f7fa f94d 	bl	8004dc0 <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d901      	bls.n	800ab34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e1d6      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ab34:	f7ff fc25 	bl	800a382 <LL_RCC_LSI1_IsReady>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f1      	bne.n	800ab22 <HAL_RCC_OscConfig+0x31a>
 800ab3e:	e051      	b.n	800abe4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ab40:	f7ff fbfd 	bl	800a33e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab44:	f7fa f93c 	bl	8004dc0 <HAL_GetTick>
 800ab48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab4a:	e00c      	b.n	800ab66 <HAL_RCC_OscConfig+0x35e>
 800ab4c:	2000000c 	.word	0x2000000c
 800ab50:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab54:	f7fa f934 	bl	8004dc0 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d901      	bls.n	800ab66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e1bd      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab66:	f7ff fc0c 	bl	800a382 <LL_RCC_LSI1_IsReady>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0f1      	beq.n	800ab54 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ab70:	f7ff fc2a 	bl	800a3c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab74:	e008      	b.n	800ab88 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab76:	f7fa f923 	bl	8004dc0 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e1ac      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab88:	f7ff fc2f 	bl	800a3ea <LL_RCC_LSI2_IsReady>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f1      	bne.n	800ab76 <HAL_RCC_OscConfig+0x36e>
 800ab92:	e027      	b.n	800abe4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ab94:	f7ff fc18 	bl	800a3c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab98:	f7fa f912 	bl	8004dc0 <HAL_GetTick>
 800ab9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab9e:	e008      	b.n	800abb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aba0:	f7fa f90e 	bl	8004dc0 <HAL_GetTick>
 800aba4:	4602      	mov	r2, r0
 800aba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d901      	bls.n	800abb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e197      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800abb2:	f7ff fc1a 	bl	800a3ea <LL_RCC_LSI2_IsReady>
 800abb6:	4603      	mov	r3, r0
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1f1      	bne.n	800aba0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800abbc:	f7ff fbd0 	bl	800a360 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abc0:	f7fa f8fe 	bl	8004dc0 <HAL_GetTick>
 800abc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800abc6:	e008      	b.n	800abda <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800abc8:	f7fa f8fa 	bl	8004dc0 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d901      	bls.n	800abda <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e183      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800abda:	f7ff fbd2 	bl	800a382 <LL_RCC_LSI1_IsReady>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f1      	bne.n	800abc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d05b      	beq.n	800aca8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abf0:	4ba7      	ldr	r3, [pc, #668]	@ (800ae90 <HAL_RCC_OscConfig+0x688>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d114      	bne.n	800ac26 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800abfc:	f7ff fa60 	bl	800a0c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac00:	f7fa f8de 	bl	8004dc0 <HAL_GetTick>
 800ac04:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac08:	f7fa f8da 	bl	8004dc0 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e163      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac1a:	4b9d      	ldr	r3, [pc, #628]	@ (800ae90 <HAL_RCC_OscConfig+0x688>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d0f0      	beq.n	800ac08 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d102      	bne.n	800ac34 <HAL_RCC_OscConfig+0x42c>
 800ac2e:	f7ff fb30 	bl	800a292 <LL_RCC_LSE_Enable>
 800ac32:	e00c      	b.n	800ac4e <HAL_RCC_OscConfig+0x446>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	2b05      	cmp	r3, #5
 800ac3a:	d104      	bne.n	800ac46 <HAL_RCC_OscConfig+0x43e>
 800ac3c:	f7ff fb4b 	bl	800a2d6 <LL_RCC_LSE_EnableBypass>
 800ac40:	f7ff fb27 	bl	800a292 <LL_RCC_LSE_Enable>
 800ac44:	e003      	b.n	800ac4e <HAL_RCC_OscConfig+0x446>
 800ac46:	f7ff fb35 	bl	800a2b4 <LL_RCC_LSE_Disable>
 800ac4a:	f7ff fb55 	bl	800a2f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d014      	beq.n	800ac80 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac56:	f7fa f8b3 	bl	8004dc0 <HAL_GetTick>
 800ac5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac5c:	e00a      	b.n	800ac74 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac5e:	f7fa f8af 	bl	8004dc0 <HAL_GetTick>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e136      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac74:	f7ff fb51 	bl	800a31a <LL_RCC_LSE_IsReady>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d0ef      	beq.n	800ac5e <HAL_RCC_OscConfig+0x456>
 800ac7e:	e013      	b.n	800aca8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac80:	f7fa f89e 	bl	8004dc0 <HAL_GetTick>
 800ac84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac86:	e00a      	b.n	800ac9e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac88:	f7fa f89a 	bl	8004dc0 <HAL_GetTick>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d901      	bls.n	800ac9e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ac9a:	2303      	movs	r3, #3
 800ac9c:	e121      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac9e:	f7ff fb3c 	bl	800a31a <LL_RCC_LSE_IsReady>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ef      	bne.n	800ac88 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d02c      	beq.n	800ad0e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d014      	beq.n	800ace6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acbc:	f7ff fab5 	bl	800a22a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acc0:	f7fa f87e 	bl	8004dc0 <HAL_GetTick>
 800acc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800acc6:	e008      	b.n	800acda <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acc8:	f7fa f87a 	bl	8004dc0 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d901      	bls.n	800acda <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	e103      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800acda:	f7ff fac8 	bl	800a26e <LL_RCC_HSI48_IsReady>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0f1      	beq.n	800acc8 <HAL_RCC_OscConfig+0x4c0>
 800ace4:	e013      	b.n	800ad0e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ace6:	f7ff fab1 	bl	800a24c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acea:	f7fa f869 	bl	8004dc0 <HAL_GetTick>
 800acee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800acf0:	e008      	b.n	800ad04 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acf2:	f7fa f865 	bl	8004dc0 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d901      	bls.n	800ad04 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e0ee      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ad04:	f7ff fab3 	bl	800a26e <LL_RCC_HSI48_IsReady>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1f1      	bne.n	800acf2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80e4 	beq.w	800aee0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad18:	f7ff fc11 	bl	800a53e <LL_RCC_GetSysClkSource>
 800ad1c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ad1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	f040 80b4 	bne.w	800ae98 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f003 0203 	and.w	r2, r3, #3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d123      	bne.n	800ad86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d11c      	bne.n	800ad86 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	0a1b      	lsrs	r3, r3, #8
 800ad50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d114      	bne.n	800ad86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d10d      	bne.n	800ad86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d106      	bne.n	800ad86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d05d      	beq.n	800ae42 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b0c      	cmp	r3, #12
 800ad8a:	d058      	beq.n	800ae3e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ad8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e0a1      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ad9e:	f7ff fc84 	bl	800a6aa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ada2:	f7fa f80d 	bl	8004dc0 <HAL_GetTick>
 800ada6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ada8:	e008      	b.n	800adbc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adaa:	f7fa f809 	bl	8004dc0 <HAL_GetTick>
 800adae:	4602      	mov	r2, r0
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d901      	bls.n	800adbc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e092      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800adbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1ef      	bne.n	800adaa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	4b30      	ldr	r3, [pc, #192]	@ (800ae94 <HAL_RCC_OscConfig+0x68c>)
 800add2:	4013      	ands	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800add8:	687a      	ldr	r2, [r7, #4]
 800adda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800addc:	4311      	orrs	r1, r2
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ade2:	0212      	lsls	r2, r2, #8
 800ade4:	4311      	orrs	r1, r2
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800adea:	4311      	orrs	r1, r2
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800adf0:	4311      	orrs	r1, r2
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800adf6:	430a      	orrs	r2, r1
 800adf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ae00:	f7ff fc44 	bl	800a68c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ae14:	f7f9 ffd4 	bl	8004dc0 <HAL_GetTick>
 800ae18:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae1c:	f7f9 ffd0 	bl	8004dc0 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e059      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d0ef      	beq.n	800ae1c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae3c:	e050      	b.n	800aee0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e04f      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d147      	bne.n	800aee0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ae50:	f7ff fc1c 	bl	800a68c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae64:	f7f9 ffac 	bl	8004dc0 <HAL_GetTick>
 800ae68:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae6c:	f7f9 ffa8 	bl	8004dc0 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e031      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d0ef      	beq.n	800ae6c <HAL_RCC_OscConfig+0x664>
 800ae8c:	e028      	b.n	800aee0 <HAL_RCC_OscConfig+0x6d8>
 800ae8e:	bf00      	nop
 800ae90:	58000400 	.word	0x58000400
 800ae94:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	2b0c      	cmp	r3, #12
 800ae9c:	d01e      	beq.n	800aedc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae9e:	f7ff fc04 	bl	800a6aa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aea2:	f7f9 ff8d 	bl	8004dc0 <HAL_GetTick>
 800aea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aea8:	e008      	b.n	800aebc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeaa:	f7f9 ff89 	bl	8004dc0 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e012      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1ef      	bne.n	800aeaa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800aeca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aece:	68da      	ldr	r2, [r3, #12]
 800aed0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aed4:	4b05      	ldr	r3, [pc, #20]	@ (800aeec <HAL_RCC_OscConfig+0x6e4>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	60cb      	str	r3, [r1, #12]
 800aeda:	e001      	b.n	800aee0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e000      	b.n	800aee2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3734      	adds	r7, #52	@ 0x34
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd90      	pop	{r4, r7, pc}
 800aeea:	bf00      	nop
 800aeec:	eefefffc 	.word	0xeefefffc

0800aef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	e12d      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af04:	4b98      	ldr	r3, [pc, #608]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0307 	and.w	r3, r3, #7
 800af0c:	683a      	ldr	r2, [r7, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d91b      	bls.n	800af4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af12:	4b95      	ldr	r3, [pc, #596]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f023 0207 	bic.w	r2, r3, #7
 800af1a:	4993      	ldr	r1, [pc, #588]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	4313      	orrs	r3, r2
 800af20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af22:	f7f9 ff4d 	bl	8004dc0 <HAL_GetTick>
 800af26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af28:	e008      	b.n	800af3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800af2a:	f7f9 ff49 	bl	8004dc0 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e111      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af3c:	4b8a      	ldr	r3, [pc, #552]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d1ef      	bne.n	800af2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b00      	cmp	r3, #0
 800af54:	d016      	beq.n	800af84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fafb 	bl	800a556 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af60:	f7f9 ff2e 	bl	8004dc0 <HAL_GetTick>
 800af64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af66:	e008      	b.n	800af7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af68:	f7f9 ff2a 	bl	8004dc0 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b02      	cmp	r3, #2
 800af74:	d901      	bls.n	800af7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e0f2      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af7a:	f7ff fbe8 	bl	800a74e <LL_RCC_IsActiveFlag_HPRE>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0f1      	beq.n	800af68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 0320 	and.w	r3, r3, #32
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d016      	beq.n	800afbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff faf2 	bl	800a57e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af9a:	f7f9 ff11 	bl	8004dc0 <HAL_GetTick>
 800af9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afa0:	e008      	b.n	800afb4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afa2:	f7f9 ff0d 	bl	8004dc0 <HAL_GetTick>
 800afa6:	4602      	mov	r2, r0
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	2b02      	cmp	r3, #2
 800afae:	d901      	bls.n	800afb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e0d5      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800afb4:	f7ff fbdd 	bl	800a772 <LL_RCC_IsActiveFlag_C2HPRE>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0f1      	beq.n	800afa2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d016      	beq.n	800aff8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff faeb 	bl	800a5aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afd4:	f7f9 fef4 	bl	8004dc0 <HAL_GetTick>
 800afd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800afda:	e008      	b.n	800afee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afdc:	f7f9 fef0 	bl	8004dc0 <HAL_GetTick>
 800afe0:	4602      	mov	r2, r0
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d901      	bls.n	800afee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e0b8      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800afee:	f7ff fbd3 	bl	800a798 <LL_RCC_IsActiveFlag_SHDHPRE>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d0f1      	beq.n	800afdc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	d016      	beq.n	800b032 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fae5 	bl	800a5d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b00e:	f7f9 fed7 	bl	8004dc0 <HAL_GetTick>
 800b012:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b014:	e008      	b.n	800b028 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b016:	f7f9 fed3 	bl	8004dc0 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	2b02      	cmp	r3, #2
 800b022:	d901      	bls.n	800b028 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b024:	2303      	movs	r3, #3
 800b026:	e09b      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b028:	f7ff fbc9 	bl	800a7be <LL_RCC_IsActiveFlag_PPRE1>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d0f1      	beq.n	800b016 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0308 	and.w	r3, r3, #8
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d017      	beq.n	800b06e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	00db      	lsls	r3, r3, #3
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fadb 	bl	800a600 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b04a:	f7f9 feb9 	bl	8004dc0 <HAL_GetTick>
 800b04e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b050:	e008      	b.n	800b064 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b052:	f7f9 feb5 	bl	8004dc0 <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d901      	bls.n	800b064 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e07d      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b064:	f7ff fbbd 	bl	800a7e2 <LL_RCC_IsActiveFlag_PPRE2>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0f1      	beq.n	800b052 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0301 	and.w	r3, r3, #1
 800b076:	2b00      	cmp	r3, #0
 800b078:	d043      	beq.n	800b102 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d106      	bne.n	800b090 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b082:	f7ff f87b 	bl	800a17c <LL_RCC_HSE_IsReady>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d11e      	bne.n	800b0ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e067      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	2b03      	cmp	r3, #3
 800b096:	d106      	bne.n	800b0a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b098:	f7ff fb16 	bl	800a6c8 <LL_RCC_PLL_IsReady>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d113      	bne.n	800b0ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e05c      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b0ae:	f7ff f9e3 	bl	800a478 <LL_RCC_MSI_IsReady>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d108      	bne.n	800b0ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e051      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b0bc:	f7ff f88e 	bl	800a1dc <LL_RCC_HSI_IsReady>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e04a      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7ff fa21 	bl	800a516 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0d4:	f7f9 fe74 	bl	8004dc0 <HAL_GetTick>
 800b0d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0da:	e00a      	b.n	800b0f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0dc:	f7f9 fe70 	bl	8004dc0 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d901      	bls.n	800b0f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b0ee:	2303      	movs	r3, #3
 800b0f0:	e036      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0f2:	f7ff fa24 	bl	800a53e <LL_RCC_GetSysClkSource>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d1ec      	bne.n	800b0dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b102:	4b19      	ldr	r3, [pc, #100]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d21b      	bcs.n	800b148 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b110:	4b15      	ldr	r3, [pc, #84]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f023 0207 	bic.w	r2, r3, #7
 800b118:	4913      	ldr	r1, [pc, #76]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	4313      	orrs	r3, r2
 800b11e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b120:	f7f9 fe4e 	bl	8004dc0 <HAL_GetTick>
 800b124:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b126:	e008      	b.n	800b13a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b128:	f7f9 fe4a 	bl	8004dc0 <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d901      	bls.n	800b13a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e012      	b.n	800b160 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b13a:	4b0b      	ldr	r3, [pc, #44]	@ (800b168 <HAL_RCC_ClockConfig+0x278>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d1ef      	bne.n	800b128 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b148:	f000 f87e 	bl	800b248 <HAL_RCC_GetHCLKFreq>
 800b14c:	4603      	mov	r3, r0
 800b14e:	4a07      	ldr	r2, [pc, #28]	@ (800b16c <HAL_RCC_ClockConfig+0x27c>)
 800b150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b152:	f7f9 fe41 	bl	8004dd8 <HAL_GetTickPrio>
 800b156:	4603      	mov	r3, r0
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f9 fde3 	bl	8004d24 <HAL_InitTick>
 800b15e:	4603      	mov	r3, r0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	58004000 	.word	0x58004000
 800b16c:	2000000c 	.word	0x2000000c

0800b170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b176:	f7ff f9e2 	bl	800a53e <LL_RCC_GetSysClkSource>
 800b17a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10a      	bne.n	800b198 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b182:	f7ff f99e 	bl	800a4c2 <LL_RCC_MSI_GetRange>
 800b186:	4603      	mov	r3, r0
 800b188:	091b      	lsrs	r3, r3, #4
 800b18a:	f003 030f 	and.w	r3, r3, #15
 800b18e:	4a2b      	ldr	r2, [pc, #172]	@ (800b23c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b194:	60fb      	str	r3, [r7, #12]
 800b196:	e04b      	b.n	800b230 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b04      	cmp	r3, #4
 800b19c:	d102      	bne.n	800b1a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b19e:	4b28      	ldr	r3, [pc, #160]	@ (800b240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	e045      	b.n	800b230 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b08      	cmp	r3, #8
 800b1a8:	d10a      	bne.n	800b1c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1aa:	f7fe ffb7 	bl	800a11c <LL_RCC_HSE_IsEnabledDiv2>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d102      	bne.n	800b1ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b1b4:	4b22      	ldr	r3, [pc, #136]	@ (800b240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e03a      	b.n	800b230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b1ba:	4b22      	ldr	r3, [pc, #136]	@ (800b244 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b1bc:	60fb      	str	r3, [r7, #12]
 800b1be:	e037      	b.n	800b230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b1c0:	f7ff fab9 	bl	800a736 <LL_RCC_PLL_GetMainSource>
 800b1c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d003      	beq.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x64>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d003      	beq.n	800b1da <HAL_RCC_GetSysClockFreq+0x6a>
 800b1d2:	e00d      	b.n	800b1f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b1d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1d6:	60bb      	str	r3, [r7, #8]
        break;
 800b1d8:	e015      	b.n	800b206 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b1da:	f7fe ff9f 	bl	800a11c <LL_RCC_HSE_IsEnabledDiv2>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d102      	bne.n	800b1ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b1e4:	4b16      	ldr	r3, [pc, #88]	@ (800b240 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b1e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b1e8:	e00d      	b.n	800b206 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b1ea:	4b16      	ldr	r3, [pc, #88]	@ (800b244 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b1ec:	60bb      	str	r3, [r7, #8]
        break;
 800b1ee:	e00a      	b.n	800b206 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b1f0:	f7ff f967 	bl	800a4c2 <LL_RCC_MSI_GetRange>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	091b      	lsrs	r3, r3, #4
 800b1f8:	f003 030f 	and.w	r3, r3, #15
 800b1fc:	4a0f      	ldr	r2, [pc, #60]	@ (800b23c <HAL_RCC_GetSysClockFreq+0xcc>)
 800b1fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b202:	60bb      	str	r3, [r7, #8]
        break;
 800b204:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b206:	f7ff fa71 	bl	800a6ec <LL_RCC_PLL_GetN>
 800b20a:	4602      	mov	r2, r0
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	fb03 f402 	mul.w	r4, r3, r2
 800b212:	f7ff fa84 	bl	800a71e <LL_RCC_PLL_GetDivider>
 800b216:	4603      	mov	r3, r0
 800b218:	091b      	lsrs	r3, r3, #4
 800b21a:	3301      	adds	r3, #1
 800b21c:	fbb4 f4f3 	udiv	r4, r4, r3
 800b220:	f7ff fa71 	bl	800a706 <LL_RCC_PLL_GetR>
 800b224:	4603      	mov	r3, r0
 800b226:	0f5b      	lsrs	r3, r3, #29
 800b228:	3301      	adds	r3, #1
 800b22a:	fbb4 f3f3 	udiv	r3, r4, r3
 800b22e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b230:	68fb      	ldr	r3, [r7, #12]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	bd90      	pop	{r4, r7, pc}
 800b23a:	bf00      	nop
 800b23c:	080149f8 	.word	0x080149f8
 800b240:	00f42400 	.word	0x00f42400
 800b244:	01e84800 	.word	0x01e84800

0800b248 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b248:	b598      	push	{r3, r4, r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b24c:	f7ff ff90 	bl	800b170 <HAL_RCC_GetSysClockFreq>
 800b250:	4604      	mov	r4, r0
 800b252:	f7ff f9e9 	bl	800a628 <LL_RCC_GetAHBPrescaler>
 800b256:	4603      	mov	r3, r0
 800b258:	091b      	lsrs	r3, r3, #4
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	4a03      	ldr	r2, [pc, #12]	@ (800b26c <HAL_RCC_GetHCLKFreq+0x24>)
 800b260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b264:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b268:	4618      	mov	r0, r3
 800b26a:	bd98      	pop	{r3, r4, r7, pc}
 800b26c:	08014998 	.word	0x08014998

0800b270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b270:	b598      	push	{r3, r4, r7, lr}
 800b272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b274:	f7ff ffe8 	bl	800b248 <HAL_RCC_GetHCLKFreq>
 800b278:	4604      	mov	r4, r0
 800b27a:	f7ff f9ef 	bl	800a65c <LL_RCC_GetAPB1Prescaler>
 800b27e:	4603      	mov	r3, r0
 800b280:	0a1b      	lsrs	r3, r3, #8
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	4a04      	ldr	r2, [pc, #16]	@ (800b298 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b28c:	f003 031f 	and.w	r3, r3, #31
 800b290:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b294:	4618      	mov	r0, r3
 800b296:	bd98      	pop	{r3, r4, r7, pc}
 800b298:	080149d8 	.word	0x080149d8

0800b29c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b29c:	b598      	push	{r3, r4, r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b2a0:	f7ff ffd2 	bl	800b248 <HAL_RCC_GetHCLKFreq>
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	f7ff f9e5 	bl	800a674 <LL_RCC_GetAPB2Prescaler>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	0adb      	lsrs	r3, r3, #11
 800b2ae:	f003 0307 	and.w	r3, r3, #7
 800b2b2:	4a04      	ldr	r2, [pc, #16]	@ (800b2c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b8:	f003 031f 	and.w	r3, r3, #31
 800b2bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	bd98      	pop	{r3, r4, r7, pc}
 800b2c4:	080149d8 	.word	0x080149d8

0800b2c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b2c8:	b590      	push	{r4, r7, lr}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2bb0      	cmp	r3, #176	@ 0xb0
 800b2d4:	d903      	bls.n	800b2de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b2d6:	4b15      	ldr	r3, [pc, #84]	@ (800b32c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e007      	b.n	800b2ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	091b      	lsrs	r3, r3, #4
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	4a11      	ldr	r2, [pc, #68]	@ (800b32c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b2ee:	f7ff f9a7 	bl	800a640 <LL_RCC_GetAHB4Prescaler>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	091b      	lsrs	r3, r3, #4
 800b2f6:	f003 030f 	and.w	r3, r3, #15
 800b2fa:	4a0d      	ldr	r2, [pc, #52]	@ (800b330 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b2fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	fbb2 f3f3 	udiv	r3, r2, r3
 800b306:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4a0a      	ldr	r2, [pc, #40]	@ (800b334 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b30c:	fba2 2303 	umull	r2, r3, r2, r3
 800b310:	0c9c      	lsrs	r4, r3, #18
 800b312:	f7fe fee5 	bl	800a0e0 <HAL_PWREx_GetVoltageRange>
 800b316:	4603      	mov	r3, r0
 800b318:	4619      	mov	r1, r3
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 f80c 	bl	800b338 <RCC_SetFlashLatency>
 800b320:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	bd90      	pop	{r4, r7, pc}
 800b32a:	bf00      	nop
 800b32c:	080149f8 	.word	0x080149f8
 800b330:	08014998 	.word	0x08014998
 800b334:	431bde83 	.word	0x431bde83

0800b338 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b338:	b590      	push	{r4, r7, lr}
 800b33a:	b093      	sub	sp, #76	@ 0x4c
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b342:	4b37      	ldr	r3, [pc, #220]	@ (800b420 <RCC_SetFlashLatency+0xe8>)
 800b344:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b34a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b34e:	4a35      	ldr	r2, [pc, #212]	@ (800b424 <RCC_SetFlashLatency+0xec>)
 800b350:	f107 031c 	add.w	r3, r7, #28
 800b354:	ca07      	ldmia	r2, {r0, r1, r2}
 800b356:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b35a:	4b33      	ldr	r3, [pc, #204]	@ (800b428 <RCC_SetFlashLatency+0xf0>)
 800b35c:	f107 040c 	add.w	r4, r7, #12
 800b360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b366:	2300      	movs	r3, #0
 800b368:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b370:	d11a      	bne.n	800b3a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b372:	2300      	movs	r3, #0
 800b374:	643b      	str	r3, [r7, #64]	@ 0x40
 800b376:	e013      	b.n	800b3a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	3348      	adds	r3, #72	@ 0x48
 800b37e:	443b      	add	r3, r7
 800b380:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d807      	bhi.n	800b39a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b38a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	3348      	adds	r3, #72	@ 0x48
 800b390:	443b      	add	r3, r7
 800b392:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b396:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b398:	e020      	b.n	800b3dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	3301      	adds	r3, #1
 800b39e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3a2:	2b03      	cmp	r3, #3
 800b3a4:	d9e8      	bls.n	800b378 <RCC_SetFlashLatency+0x40>
 800b3a6:	e019      	b.n	800b3dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ac:	e013      	b.n	800b3d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	3348      	adds	r3, #72	@ 0x48
 800b3b4:	443b      	add	r3, r7
 800b3b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d807      	bhi.n	800b3d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	3348      	adds	r3, #72	@ 0x48
 800b3c6:	443b      	add	r3, r7
 800b3c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b3cc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b3ce:	e005      	b.n	800b3dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d9e8      	bls.n	800b3ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b3dc:	4b13      	ldr	r3, [pc, #76]	@ (800b42c <RCC_SetFlashLatency+0xf4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f023 0207 	bic.w	r2, r3, #7
 800b3e4:	4911      	ldr	r1, [pc, #68]	@ (800b42c <RCC_SetFlashLatency+0xf4>)
 800b3e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b3ec:	f7f9 fce8 	bl	8004dc0 <HAL_GetTick>
 800b3f0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b3f2:	e008      	b.n	800b406 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b3f4:	f7f9 fce4 	bl	8004dc0 <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d901      	bls.n	800b406 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e007      	b.n	800b416 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b406:	4b09      	ldr	r3, [pc, #36]	@ (800b42c <RCC_SetFlashLatency+0xf4>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b410:	429a      	cmp	r2, r3
 800b412:	d1ef      	bne.n	800b3f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b414:	2300      	movs	r3, #0
}
 800b416:	4618      	mov	r0, r3
 800b418:	374c      	adds	r7, #76	@ 0x4c
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd90      	pop	{r4, r7, pc}
 800b41e:	bf00      	nop
 800b420:	080148dc 	.word	0x080148dc
 800b424:	080148ec 	.word	0x080148ec
 800b428:	080148f8 	.word	0x080148f8
 800b42c:	58004000 	.word	0x58004000

0800b430 <LL_RCC_LSE_IsEnabled>:
{
 800b430:	b480      	push	{r7}
 800b432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	2b01      	cmp	r3, #1
 800b442:	d101      	bne.n	800b448 <LL_RCC_LSE_IsEnabled+0x18>
 800b444:	2301      	movs	r3, #1
 800b446:	e000      	b.n	800b44a <LL_RCC_LSE_IsEnabled+0x1a>
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <LL_RCC_LSE_IsReady>:
{
 800b454:	b480      	push	{r7}
 800b456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b460:	f003 0302 	and.w	r3, r3, #2
 800b464:	2b02      	cmp	r3, #2
 800b466:	d101      	bne.n	800b46c <LL_RCC_LSE_IsReady+0x18>
 800b468:	2301      	movs	r3, #1
 800b46a:	e000      	b.n	800b46e <LL_RCC_LSE_IsReady+0x1a>
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <LL_RCC_SetRFWKPClockSource>:
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b488:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b48c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4313      	orrs	r3, r2
 800b494:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <LL_RCC_SetSMPSClockSource>:
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b4ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b2:	f023 0203 	bic.w	r2, r3, #3
 800b4b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <LL_RCC_SetSMPSPrescaler>:
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b4d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b4de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4e8:	bf00      	nop
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <LL_RCC_SetUSARTClockSource>:
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b4fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b504:	f023 0203 	bic.w	r2, r3, #3
 800b508:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4313      	orrs	r3, r2
 800b510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b514:	bf00      	nop
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <LL_RCC_SetLPUARTClockSource>:
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b52c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b530:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b534:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <LL_RCC_SetI2CClockSource>:
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b558:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	091b      	lsrs	r3, r3, #4
 800b560:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b564:	43db      	mvns	r3, r3
 800b566:	401a      	ands	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	011b      	lsls	r3, r3, #4
 800b56c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b574:	4313      	orrs	r3, r2
 800b576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b57a:	bf00      	nop
 800b57c:	370c      	adds	r7, #12
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <LL_RCC_SetLPTIMClockSource>:
{
 800b586:	b480      	push	{r7}
 800b588:	b083      	sub	sp, #12
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b58e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b592:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	0c1b      	lsrs	r3, r3, #16
 800b59a:	041b      	lsls	r3, r3, #16
 800b59c:	43db      	mvns	r3, r3
 800b59e:	401a      	ands	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	041b      	lsls	r3, r3, #16
 800b5a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5ae:	bf00      	nop
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <LL_RCC_SetSAIClockSource>:
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b5ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5da:	bf00      	nop
 800b5dc:	370c      	adds	r7, #12
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <LL_RCC_SetRNGClockSource>:
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b5ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b5fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4313      	orrs	r3, r2
 800b602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b606:	bf00      	nop
 800b608:	370c      	adds	r7, #12
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <LL_RCC_SetCLK48ClockSource>:
{
 800b612:	b480      	push	{r7}
 800b614:	b083      	sub	sp, #12
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b61a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b626:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b632:	bf00      	nop
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <LL_RCC_SetUSBClockSource>:
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f7ff ffe3 	bl	800b612 <LL_RCC_SetCLK48ClockSource>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <LL_RCC_SetADCClockSource>:
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b65c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b664:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b668:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4313      	orrs	r3, r2
 800b670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <LL_RCC_SetRTCClockSource>:
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <LL_RCC_GetRTCClockSource>:
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b6b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <LL_RCC_ForceBackupDomainReset>:
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b6ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b6de:	bf00      	nop
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b700:	bf00      	nop
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr

0800b70a <LL_RCC_PLLSAI1_Enable>:
{
 800b70a:	b480      	push	{r7}
 800b70c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b70e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b718:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b71c:	6013      	str	r3, [r2, #0]
}
 800b71e:	bf00      	nop
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <LL_RCC_PLLSAI1_Disable>:
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b72c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b73a:	6013      	str	r3, [r2, #0]
}
 800b73c:	bf00      	nop
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <LL_RCC_PLLSAI1_IsReady>:
{
 800b746:	b480      	push	{r7}
 800b748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b758:	d101      	bne.n	800b75e <LL_RCC_PLLSAI1_IsReady+0x18>
 800b75a:	2301      	movs	r3, #1
 800b75c:	e000      	b.n	800b760 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b088      	sub	sp, #32
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b772:	2300      	movs	r3, #0
 800b774:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b776:	2300      	movs	r3, #0
 800b778:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b782:	2b00      	cmp	r3, #0
 800b784:	d034      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b78e:	d021      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b790:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b794:	d81b      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b796:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b79a:	d01d      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b79c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7a0:	d815      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d00b      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b7a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7aa:	d110      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b7ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7ba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7bc:	e00d      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 f947 	bl	800ba56 <RCCEx_PLLSAI1_ConfigNP>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b7cc:	e005      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	77fb      	strb	r3, [r7, #31]
        break;
 800b7d2:	e002      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b7d4:	bf00      	nop
 800b7d6:	e000      	b.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b7d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7da:	7ffb      	ldrb	r3, [r7, #31]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff fee8 	bl	800b5ba <LL_RCC_SetSAIClockSource>
 800b7ea:	e001      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ec:	7ffb      	ldrb	r3, [r7, #31]
 800b7ee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d046      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b7fc:	f7ff ff56 	bl	800b6ac <LL_RCC_GetRTCClockSource>
 800b800:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d03c      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b80c:	f7fe fc58 	bl	800a0c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d105      	bne.n	800b822 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff ff30 	bl	800b680 <LL_RCC_SetRTCClockSource>
 800b820:	e02e      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b82a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b82c:	f7ff ff4b 	bl	800b6c6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b830:	f7ff ff5a 	bl	800b6e8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b83e:	4313      	orrs	r3, r2
 800b840:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b84c:	f7ff fdf0 	bl	800b430 <LL_RCC_LSE_IsEnabled>
 800b850:	4603      	mov	r3, r0
 800b852:	2b01      	cmp	r3, #1
 800b854:	d114      	bne.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b856:	f7f9 fab3 	bl	8004dc0 <HAL_GetTick>
 800b85a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b85c:	e00b      	b.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b85e:	f7f9 faaf 	bl	8004dc0 <HAL_GetTick>
 800b862:	4602      	mov	r2, r0
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	1ad3      	subs	r3, r2, r3
 800b868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d902      	bls.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b870:	2303      	movs	r3, #3
 800b872:	77fb      	strb	r3, [r7, #31]
              break;
 800b874:	e004      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b876:	f7ff fded 	bl	800b454 <LL_RCC_LSE_IsReady>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d1ee      	bne.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b880:	7ffb      	ldrb	r3, [r7, #31]
 800b882:	77bb      	strb	r3, [r7, #30]
 800b884:	e001      	b.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b886:	7ffb      	ldrb	r3, [r7, #31]
 800b888:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d004      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fe2a 	bl	800b4f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0302 	and.w	r3, r3, #2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d004      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	69db      	ldr	r3, [r3, #28]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7ff fe35 	bl	800b520 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 0310 	and.w	r3, r3, #16
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff fe5d 	bl	800b586 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 0320 	and.w	r3, r3, #32
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d004      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7ff fe52 	bl	800b586 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0304 	and.w	r3, r3, #4
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d004      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fe2a 	bl	800b54c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0308 	and.w	r3, r3, #8
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff fe1f 	bl	800b54c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b916:	2b00      	cmp	r3, #0
 800b918:	d022      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b91e:	4618      	mov	r0, r3
 800b920:	f7ff fe8d 	bl	800b63e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b92c:	d107      	bne.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b92e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b938:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b93c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b942:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b946:	d10b      	bne.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	3304      	adds	r3, #4
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 f8dd 	bl	800bb0c <RCCEx_PLLSAI1_ConfigNQ>
 800b952:	4603      	mov	r3, r0
 800b954:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b956:	7ffb      	ldrb	r3, [r7, #31]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b95c:	7ffb      	ldrb	r3, [r7, #31]
 800b95e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d02b      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b974:	d008      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b97a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b97e:	d003      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b984:	2b00      	cmp	r3, #0
 800b986:	d105      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff fe2a 	bl	800b5e6 <LL_RCC_SetRNGClockSource>
 800b992:	e00a      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	2000      	movs	r0, #0
 800b9a0:	f7ff fe21 	bl	800b5e6 <LL_RCC_SetRNGClockSource>
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f7ff fe34 	bl	800b612 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b9b2:	d107      	bne.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b9b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d022      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7ff fe3d 	bl	800b654 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9e2:	d107      	bne.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b9e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9f2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9fc:	d10b      	bne.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4618      	mov	r0, r3
 800ba04:	f000 f8dd 	bl	800bbc2 <RCCEx_PLLSAI1_ConfigNR>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ba0c:	7ffb      	ldrb	r3, [r7, #31]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ba12:	7ffb      	ldrb	r3, [r7, #31]
 800ba14:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff fd26 	bl	800b478 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fd45 	bl	800b4cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff fd2c 	bl	800b4a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ba4c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3720      	adds	r7, #32
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba62:	f7ff fe61 	bl	800b728 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba66:	f7f9 f9ab 	bl	8004dc0 <HAL_GetTick>
 800ba6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba6c:	e009      	b.n	800ba82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba6e:	f7f9 f9a7 	bl	8004dc0 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d902      	bls.n	800ba82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba80:	e004      	b.n	800ba8c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba82:	f7ff fe60 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f0      	bne.n	800ba6e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d137      	bne.n	800bb02 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ba92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baa6:	4313      	orrs	r3, r2
 800baa8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800baaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800babc:	4313      	orrs	r3, r2
 800babe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bac0:	f7ff fe23 	bl	800b70a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bac4:	f7f9 f97c 	bl	8004dc0 <HAL_GetTick>
 800bac8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800baca:	e009      	b.n	800bae0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bacc:	f7f9 f978 	bl	8004dc0 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d902      	bls.n	800bae0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800bada:	2303      	movs	r3, #3
 800badc:	73fb      	strb	r3, [r7, #15]
        break;
 800bade:	e004      	b.n	800baea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bae0:	f7ff fe31 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d1f0      	bne.n	800bacc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800baf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf4:	691a      	ldr	r2, [r3, #16]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bafe:	4313      	orrs	r3, r2
 800bb00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb18:	f7ff fe06 	bl	800b728 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb1c:	f7f9 f950 	bl	8004dc0 <HAL_GetTick>
 800bb20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb22:	e009      	b.n	800bb38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb24:	f7f9 f94c 	bl	8004dc0 <HAL_GetTick>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d902      	bls.n	800bb38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb32:	2303      	movs	r3, #3
 800bb34:	73fb      	strb	r3, [r7, #15]
      break;
 800bb36:	e004      	b.n	800bb42 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb38:	f7ff fe05 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1f0      	bne.n	800bb24 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d137      	bne.n	800bbb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	021b      	lsls	r3, r3, #8
 800bb58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bb60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb64:	691b      	ldr	r3, [r3, #16]
 800bb66:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb72:	4313      	orrs	r3, r2
 800bb74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bb76:	f7ff fdc8 	bl	800b70a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb7a:	f7f9 f921 	bl	8004dc0 <HAL_GetTick>
 800bb7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb80:	e009      	b.n	800bb96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb82:	f7f9 f91d 	bl	8004dc0 <HAL_GetTick>
 800bb86:	4602      	mov	r2, r0
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	2b02      	cmp	r3, #2
 800bb8e:	d902      	bls.n	800bb96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb90:	2303      	movs	r3, #3
 800bb92:	73fb      	strb	r3, [r7, #15]
        break;
 800bb94:	e004      	b.n	800bba0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb96:	f7ff fdd6 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d1f0      	bne.n	800bb82 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d108      	bne.n	800bbb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbaa:	691a      	ldr	r2, [r3, #16]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bbce:	f7ff fdab 	bl	800b728 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bbd2:	f7f9 f8f5 	bl	8004dc0 <HAL_GetTick>
 800bbd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bbd8:	e009      	b.n	800bbee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbda:	f7f9 f8f1 	bl	8004dc0 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d902      	bls.n	800bbee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	73fb      	strb	r3, [r7, #15]
      break;
 800bbec:	e004      	b.n	800bbf8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bbee:	f7ff fdaa 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d1f0      	bne.n	800bbda <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d137      	bne.n	800bc6e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bbfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	021b      	lsls	r3, r3, #8
 800bc0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc12:	4313      	orrs	r3, r2
 800bc14:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bc16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	68db      	ldr	r3, [r3, #12]
 800bc24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bc2c:	f7ff fd6d 	bl	800b70a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc30:	f7f9 f8c6 	bl	8004dc0 <HAL_GetTick>
 800bc34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc36:	e009      	b.n	800bc4c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bc38:	f7f9 f8c2 	bl	8004dc0 <HAL_GetTick>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d902      	bls.n	800bc4c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc46:	2303      	movs	r3, #3
 800bc48:	73fb      	strb	r3, [r7, #15]
        break;
 800bc4a:	e004      	b.n	800bc56 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc4c:	f7ff fd7b 	bl	800b746 <LL_RCC_PLLSAI1_IsReady>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d1f0      	bne.n	800bc38 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bc56:	7bfb      	ldrb	r3, [r7, #15]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d108      	bne.n	800bc6e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bc5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc60:	691a      	ldr	r2, [r3, #16]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e049      	b.n	800bd1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f7f8 fc88 	bl	80045b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2202      	movs	r2, #2
 800bca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f000 fa7c 	bl	800c1b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2201      	movs	r2, #1
 800bd08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b085      	sub	sp, #20
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd36:	b2db      	uxtb	r3, r3
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d001      	beq.n	800bd40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e036      	b.n	800bdae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	68da      	ldr	r2, [r3, #12]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f042 0201 	orr.w	r2, r2, #1
 800bd56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a17      	ldr	r2, [pc, #92]	@ (800bdbc <HAL_TIM_Base_Start_IT+0x94>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d004      	beq.n	800bd6c <HAL_TIM_Base_Start_IT+0x44>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd6a:	d115      	bne.n	800bd98 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	4b13      	ldr	r3, [pc, #76]	@ (800bdc0 <HAL_TIM_Base_Start_IT+0x98>)
 800bd74:	4013      	ands	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b06      	cmp	r3, #6
 800bd7c:	d015      	beq.n	800bdaa <HAL_TIM_Base_Start_IT+0x82>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd84:	d011      	beq.n	800bdaa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f042 0201 	orr.w	r2, r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd96:	e008      	b.n	800bdaa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f042 0201 	orr.w	r2, r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	e000      	b.n	800bdac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	40012c00 	.word	0x40012c00
 800bdc0:	00010007 	.word	0x00010007

0800bdc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68db      	ldr	r3, [r3, #12]
 800bdd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d020      	beq.n	800be28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f003 0302 	and.w	r3, r3, #2
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01b      	beq.n	800be28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f06f 0202 	mvn.w	r2, #2
 800bdf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	f003 0303 	and.w	r3, r3, #3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f9b2 	bl	800c178 <HAL_TIM_IC_CaptureCallback>
 800be14:	e005      	b.n	800be22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f9a4 	bl	800c164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 f9b5 	bl	800c18c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d020      	beq.n	800be74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d01b      	beq.n	800be74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f06f 0204 	mvn.w	r2, #4
 800be44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2202      	movs	r2, #2
 800be4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f98c 	bl	800c178 <HAL_TIM_IC_CaptureCallback>
 800be60:	e005      	b.n	800be6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f97e 	bl	800c164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 f98f 	bl	800c18c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f003 0308 	and.w	r3, r3, #8
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d020      	beq.n	800bec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f003 0308 	and.w	r3, r3, #8
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01b      	beq.n	800bec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f06f 0208 	mvn.w	r2, #8
 800be90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2204      	movs	r2, #4
 800be96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d003      	beq.n	800beae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f966 	bl	800c178 <HAL_TIM_IC_CaptureCallback>
 800beac:	e005      	b.n	800beba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 f958 	bl	800c164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f969 	bl	800c18c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	f003 0310 	and.w	r3, r3, #16
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d020      	beq.n	800bf0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f003 0310 	and.w	r3, r3, #16
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d01b      	beq.n	800bf0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f06f 0210 	mvn.w	r2, #16
 800bedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2208      	movs	r2, #8
 800bee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	69db      	ldr	r3, [r3, #28]
 800beea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d003      	beq.n	800befa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f940 	bl	800c178 <HAL_TIM_IC_CaptureCallback>
 800bef8:	e005      	b.n	800bf06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f932 	bl	800c164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f000 f943 	bl	800c18c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00c      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f06f 0201 	mvn.w	r2, #1
 800bf28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7f7 ff5a 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d104      	bne.n	800bf44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00c      	beq.n	800bf5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d007      	beq.n	800bf5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bf56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 faa1 	bl	800c4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00c      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d007      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bf7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fa99 	bl	800c4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00c      	beq.n	800bfa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d007      	beq.n	800bfa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f000 f8fd 	bl	800c1a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	f003 0320 	and.w	r3, r3, #32
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d00c      	beq.n	800bfca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f003 0320 	and.w	r3, r3, #32
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d007      	beq.n	800bfca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f06f 0220 	mvn.w	r2, #32
 800bfc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fa61 	bl	800c48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfca:	bf00      	nop
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d101      	bne.n	800bfee <HAL_TIM_ConfigClockSource+0x1c>
 800bfea:	2302      	movs	r3, #2
 800bfec:	e0b6      	b.n	800c15c <HAL_TIM_ConfigClockSource+0x18a>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2202      	movs	r2, #2
 800bffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c00c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c010:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c018:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c02a:	d03e      	beq.n	800c0aa <HAL_TIM_ConfigClockSource+0xd8>
 800c02c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c030:	f200 8087 	bhi.w	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c034:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c038:	f000 8086 	beq.w	800c148 <HAL_TIM_ConfigClockSource+0x176>
 800c03c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c040:	d87f      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c042:	2b70      	cmp	r3, #112	@ 0x70
 800c044:	d01a      	beq.n	800c07c <HAL_TIM_ConfigClockSource+0xaa>
 800c046:	2b70      	cmp	r3, #112	@ 0x70
 800c048:	d87b      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c04a:	2b60      	cmp	r3, #96	@ 0x60
 800c04c:	d050      	beq.n	800c0f0 <HAL_TIM_ConfigClockSource+0x11e>
 800c04e:	2b60      	cmp	r3, #96	@ 0x60
 800c050:	d877      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c052:	2b50      	cmp	r3, #80	@ 0x50
 800c054:	d03c      	beq.n	800c0d0 <HAL_TIM_ConfigClockSource+0xfe>
 800c056:	2b50      	cmp	r3, #80	@ 0x50
 800c058:	d873      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c05a:	2b40      	cmp	r3, #64	@ 0x40
 800c05c:	d058      	beq.n	800c110 <HAL_TIM_ConfigClockSource+0x13e>
 800c05e:	2b40      	cmp	r3, #64	@ 0x40
 800c060:	d86f      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c062:	2b30      	cmp	r3, #48	@ 0x30
 800c064:	d064      	beq.n	800c130 <HAL_TIM_ConfigClockSource+0x15e>
 800c066:	2b30      	cmp	r3, #48	@ 0x30
 800c068:	d86b      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c06a:	2b20      	cmp	r3, #32
 800c06c:	d060      	beq.n	800c130 <HAL_TIM_ConfigClockSource+0x15e>
 800c06e:	2b20      	cmp	r3, #32
 800c070:	d867      	bhi.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
 800c072:	2b00      	cmp	r3, #0
 800c074:	d05c      	beq.n	800c130 <HAL_TIM_ConfigClockSource+0x15e>
 800c076:	2b10      	cmp	r3, #16
 800c078:	d05a      	beq.n	800c130 <HAL_TIM_ConfigClockSource+0x15e>
 800c07a:	e062      	b.n	800c142 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c08c:	f000 f97e 	bl	800c38c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c09e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	609a      	str	r2, [r3, #8]
      break;
 800c0a8:	e04f      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0ba:	f000 f967 	bl	800c38c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	689a      	ldr	r2, [r3, #8]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0cc:	609a      	str	r2, [r3, #8]
      break;
 800c0ce:	e03c      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0dc:	461a      	mov	r2, r3
 800c0de:	f000 f8d9 	bl	800c294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2150      	movs	r1, #80	@ 0x50
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 f932 	bl	800c352 <TIM_ITRx_SetConfig>
      break;
 800c0ee:	e02c      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	f000 f8f8 	bl	800c2f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2160      	movs	r1, #96	@ 0x60
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 f922 	bl	800c352 <TIM_ITRx_SetConfig>
      break;
 800c10e:	e01c      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c11c:	461a      	mov	r2, r3
 800c11e:	f000 f8b9 	bl	800c294 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2140      	movs	r1, #64	@ 0x40
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 f912 	bl	800c352 <TIM_ITRx_SetConfig>
      break;
 800c12e:	e00c      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4619      	mov	r1, r3
 800c13a:	4610      	mov	r0, r2
 800c13c:	f000 f909 	bl	800c352 <TIM_ITRx_SetConfig>
      break;
 800c140:	e003      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	73fb      	strb	r3, [r7, #15]
      break;
 800c146:	e000      	b.n	800c14a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c148:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2201      	movs	r2, #1
 800c14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b083      	sub	sp, #12
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1a8:	bf00      	nop
 800c1aa:	370c      	adds	r7, #12
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr

0800c1b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a30      	ldr	r2, [pc, #192]	@ (800c288 <TIM_Base_SetConfig+0xd4>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d003      	beq.n	800c1d4 <TIM_Base_SetConfig+0x20>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1d2:	d108      	bne.n	800c1e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a27      	ldr	r2, [pc, #156]	@ (800c288 <TIM_Base_SetConfig+0xd4>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d00b      	beq.n	800c206 <TIM_Base_SetConfig+0x52>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1f4:	d007      	beq.n	800c206 <TIM_Base_SetConfig+0x52>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a24      	ldr	r2, [pc, #144]	@ (800c28c <TIM_Base_SetConfig+0xd8>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d003      	beq.n	800c206 <TIM_Base_SetConfig+0x52>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a23      	ldr	r2, [pc, #140]	@ (800c290 <TIM_Base_SetConfig+0xdc>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d108      	bne.n	800c218 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c20c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	4313      	orrs	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	689a      	ldr	r2, [r3, #8]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a12      	ldr	r2, [pc, #72]	@ (800c288 <TIM_Base_SetConfig+0xd4>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d007      	beq.n	800c254 <TIM_Base_SetConfig+0xa0>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a11      	ldr	r2, [pc, #68]	@ (800c28c <TIM_Base_SetConfig+0xd8>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d003      	beq.n	800c254 <TIM_Base_SetConfig+0xa0>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a10      	ldr	r2, [pc, #64]	@ (800c290 <TIM_Base_SetConfig+0xdc>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d103      	bne.n	800c25c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	691a      	ldr	r2, [r3, #16]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d105      	bne.n	800c27a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	f023 0201 	bic.w	r2, r3, #1
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	611a      	str	r2, [r3, #16]
  }
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	40012c00 	.word	0x40012c00
 800c28c:	40014400 	.word	0x40014400
 800c290:	40014800 	.word	0x40014800

0800c294 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c294:	b480      	push	{r7}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a1b      	ldr	r3, [r3, #32]
 800c2a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	f023 0201 	bic.w	r2, r3, #1
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c2be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f023 030a 	bic.w	r3, r3, #10
 800c2d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	621a      	str	r2, [r3, #32]
}
 800c2e6:	bf00      	nop
 800c2e8:	371c      	adds	r7, #28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr

0800c2f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2f2:	b480      	push	{r7}
 800c2f4:	b087      	sub	sp, #28
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6a1b      	ldr	r3, [r3, #32]
 800c308:	f023 0210 	bic.w	r2, r3, #16
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c31c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	031b      	lsls	r3, r3, #12
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	4313      	orrs	r3, r2
 800c326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c32e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	4313      	orrs	r3, r2
 800c338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	693a      	ldr	r2, [r7, #16]
 800c33e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	621a      	str	r2, [r3, #32]
}
 800c346:	bf00      	nop
 800c348:	371c      	adds	r7, #28
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c352:	b480      	push	{r7}
 800c354:	b085      	sub	sp, #20
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
 800c35a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c36c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c36e:	683a      	ldr	r2, [r7, #0]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4313      	orrs	r3, r2
 800c374:	f043 0307 	orr.w	r3, r3, #7
 800c378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	609a      	str	r2, [r3, #8]
}
 800c380:	bf00      	nop
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr

0800c38c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	021a      	lsls	r2, r3, #8
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	431a      	orrs	r2, r3
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	697a      	ldr	r2, [r7, #20]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	609a      	str	r2, [r3, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	371c      	adds	r7, #28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b085      	sub	sp, #20
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d101      	bne.n	800c3e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	e04a      	b.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a1f      	ldr	r2, [pc, #124]	@ (800c488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d108      	bne.n	800c420 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c414:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a12      	ldr	r2, [pc, #72]	@ (800c488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d004      	beq.n	800c44e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c44c:	d10c      	bne.n	800c468 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	40012c00 	.word	0x40012c00

0800c48c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <LL_RCC_GetUSARTClockSource>:
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c4d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4013      	ands	r3, r2
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <LL_RCC_GetLPUARTClockSource>:
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c4f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4013      	ands	r3, r2
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d101      	bne.n	800c51a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e042      	b.n	800c5a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 f83b 	bl	800c5a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2224      	movs	r2, #36	@ 0x24
 800c536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f022 0201 	bic.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d002      	beq.n	800c558 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 fae8 	bl	800cb28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f8bd 	bl	800c6d8 <UART_SetConfig>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b01      	cmp	r3, #1
 800c562:	d101      	bne.n	800c568 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	e01b      	b.n	800c5a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685a      	ldr	r2, [r3, #4]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	689a      	ldr	r2, [r3, #8]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0201 	orr.w	r2, r2, #1
 800c596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fb67 	bl	800cc6c <UART_CheckIdleState>
 800c59e:	4603      	mov	r3, r0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b08a      	sub	sp, #40	@ 0x28
 800c5c0:	af02      	add	r7, sp, #8
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	603b      	str	r3, [r7, #0]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	d17b      	bne.n	800c6ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <HAL_UART_Transmit+0x26>
 800c5dc:	88fb      	ldrh	r3, [r7, #6]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e074      	b.n	800c6d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2221      	movs	r2, #33	@ 0x21
 800c5f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5f6:	f7f8 fbe3 	bl	8004dc0 <HAL_GetTick>
 800c5fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	88fa      	ldrh	r2, [r7, #6]
 800c600:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	88fa      	ldrh	r2, [r7, #6]
 800c608:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c614:	d108      	bne.n	800c628 <HAL_UART_Transmit+0x6c>
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d104      	bne.n	800c628 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c61e:	2300      	movs	r3, #0
 800c620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	61bb      	str	r3, [r7, #24]
 800c626:	e003      	b.n	800c630 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c630:	e030      	b.n	800c694 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2200      	movs	r2, #0
 800c63a:	2180      	movs	r1, #128	@ 0x80
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f000 fbbf 	bl	800cdc0 <UART_WaitOnFlagUntilTimeout>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d005      	beq.n	800c654 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2220      	movs	r2, #32
 800c64c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e03d      	b.n	800c6d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10b      	bne.n	800c672 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	881b      	ldrh	r3, [r3, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	3302      	adds	r3, #2
 800c66e:	61bb      	str	r3, [r7, #24]
 800c670:	e007      	b.n	800c682 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	781a      	ldrb	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	3301      	adds	r3, #1
 800c680:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c688:	b29b      	uxth	r3, r3
 800c68a:	3b01      	subs	r3, #1
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1c8      	bne.n	800c632 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2140      	movs	r1, #64	@ 0x40
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fb88 	bl	800cdc0 <UART_WaitOnFlagUntilTimeout>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d005      	beq.n	800c6c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c6be:	2303      	movs	r3, #3
 800c6c0:	e006      	b.n	800c6d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e000      	b.n	800c6d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c6ce:	2302      	movs	r3, #2
  }
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6dc:	b08c      	sub	sp, #48	@ 0x30
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	695b      	ldr	r3, [r3, #20]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	69db      	ldr	r3, [r3, #28]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	4baf      	ldr	r3, [pc, #700]	@ (800c9c4 <UART_SetConfig+0x2ec>)
 800c708:	4013      	ands	r3, r2
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	6812      	ldr	r2, [r2, #0]
 800c70e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c710:	430b      	orrs	r3, r1
 800c712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	68da      	ldr	r2, [r3, #12]
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	430a      	orrs	r2, r1
 800c728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	699b      	ldr	r3, [r3, #24]
 800c72e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4aa4      	ldr	r2, [pc, #656]	@ (800c9c8 <UART_SetConfig+0x2f0>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d004      	beq.n	800c744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c740:	4313      	orrs	r3, r2
 800c742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c74e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	6812      	ldr	r2, [r2, #0]
 800c756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c758:	430b      	orrs	r3, r1
 800c75a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c762:	f023 010f 	bic.w	r1, r3, #15
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a95      	ldr	r2, [pc, #596]	@ (800c9cc <UART_SetConfig+0x2f4>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d125      	bne.n	800c7c8 <UART_SetConfig+0xf0>
 800c77c:	2003      	movs	r0, #3
 800c77e:	f7ff fea3 	bl	800c4c8 <LL_RCC_GetUSARTClockSource>
 800c782:	4603      	mov	r3, r0
 800c784:	2b03      	cmp	r3, #3
 800c786:	d81b      	bhi.n	800c7c0 <UART_SetConfig+0xe8>
 800c788:	a201      	add	r2, pc, #4	@ (adr r2, 800c790 <UART_SetConfig+0xb8>)
 800c78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78e:	bf00      	nop
 800c790:	0800c7a1 	.word	0x0800c7a1
 800c794:	0800c7b1 	.word	0x0800c7b1
 800c798:	0800c7a9 	.word	0x0800c7a9
 800c79c:	0800c7b9 	.word	0x0800c7b9
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7a6:	e042      	b.n	800c82e <UART_SetConfig+0x156>
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ae:	e03e      	b.n	800c82e <UART_SetConfig+0x156>
 800c7b0:	2304      	movs	r3, #4
 800c7b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7b6:	e03a      	b.n	800c82e <UART_SetConfig+0x156>
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7be:	e036      	b.n	800c82e <UART_SetConfig+0x156>
 800c7c0:	2310      	movs	r3, #16
 800c7c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7c6:	e032      	b.n	800c82e <UART_SetConfig+0x156>
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a7e      	ldr	r2, [pc, #504]	@ (800c9c8 <UART_SetConfig+0x2f0>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d12a      	bne.n	800c828 <UART_SetConfig+0x150>
 800c7d2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c7d6:	f7ff fe87 	bl	800c4e8 <LL_RCC_GetLPUARTClockSource>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7e0:	d01a      	beq.n	800c818 <UART_SetConfig+0x140>
 800c7e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7e6:	d81b      	bhi.n	800c820 <UART_SetConfig+0x148>
 800c7e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7ec:	d00c      	beq.n	800c808 <UART_SetConfig+0x130>
 800c7ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7f2:	d815      	bhi.n	800c820 <UART_SetConfig+0x148>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <UART_SetConfig+0x128>
 800c7f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7fc:	d008      	beq.n	800c810 <UART_SetConfig+0x138>
 800c7fe:	e00f      	b.n	800c820 <UART_SetConfig+0x148>
 800c800:	2300      	movs	r3, #0
 800c802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c806:	e012      	b.n	800c82e <UART_SetConfig+0x156>
 800c808:	2302      	movs	r3, #2
 800c80a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c80e:	e00e      	b.n	800c82e <UART_SetConfig+0x156>
 800c810:	2304      	movs	r3, #4
 800c812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c816:	e00a      	b.n	800c82e <UART_SetConfig+0x156>
 800c818:	2308      	movs	r3, #8
 800c81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c81e:	e006      	b.n	800c82e <UART_SetConfig+0x156>
 800c820:	2310      	movs	r3, #16
 800c822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c826:	e002      	b.n	800c82e <UART_SetConfig+0x156>
 800c828:	2310      	movs	r3, #16
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a65      	ldr	r2, [pc, #404]	@ (800c9c8 <UART_SetConfig+0x2f0>)
 800c834:	4293      	cmp	r3, r2
 800c836:	f040 8097 	bne.w	800c968 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c83a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c83e:	2b08      	cmp	r3, #8
 800c840:	d823      	bhi.n	800c88a <UART_SetConfig+0x1b2>
 800c842:	a201      	add	r2, pc, #4	@ (adr r2, 800c848 <UART_SetConfig+0x170>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c86d 	.word	0x0800c86d
 800c84c:	0800c88b 	.word	0x0800c88b
 800c850:	0800c875 	.word	0x0800c875
 800c854:	0800c88b 	.word	0x0800c88b
 800c858:	0800c87b 	.word	0x0800c87b
 800c85c:	0800c88b 	.word	0x0800c88b
 800c860:	0800c88b 	.word	0x0800c88b
 800c864:	0800c88b 	.word	0x0800c88b
 800c868:	0800c883 	.word	0x0800c883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86c:	f7fe fd00 	bl	800b270 <HAL_RCC_GetPCLK1Freq>
 800c870:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c872:	e010      	b.n	800c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c874:	4b56      	ldr	r3, [pc, #344]	@ (800c9d0 <UART_SetConfig+0x2f8>)
 800c876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c878:	e00d      	b.n	800c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c87a:	f7fe fc79 	bl	800b170 <HAL_RCC_GetSysClockFreq>
 800c87e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c880:	e009      	b.n	800c896 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c888:	e005      	b.n	800c896 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c894:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 812b 	beq.w	800caf4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8a2:	4a4c      	ldr	r2, [pc, #304]	@ (800c9d4 <UART_SetConfig+0x2fc>)
 800c8a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	685a      	ldr	r2, [r3, #4]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	4413      	add	r3, r2
 800c8bc:	69ba      	ldr	r2, [r7, #24]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d305      	bcc.n	800c8ce <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d903      	bls.n	800c8d6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c8d4:	e10e      	b.n	800caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d8:	2200      	movs	r2, #0
 800c8da:	60bb      	str	r3, [r7, #8]
 800c8dc:	60fa      	str	r2, [r7, #12]
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e2:	4a3c      	ldr	r2, [pc, #240]	@ (800c9d4 <UART_SetConfig+0x2fc>)
 800c8e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	603b      	str	r3, [r7, #0]
 800c8ee:	607a      	str	r2, [r7, #4]
 800c8f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8f8:	f7f4 f92e 	bl	8000b58 <__aeabi_uldivmod>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	4610      	mov	r0, r2
 800c902:	4619      	mov	r1, r3
 800c904:	f04f 0200 	mov.w	r2, #0
 800c908:	f04f 0300 	mov.w	r3, #0
 800c90c:	020b      	lsls	r3, r1, #8
 800c90e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c912:	0202      	lsls	r2, r0, #8
 800c914:	6979      	ldr	r1, [r7, #20]
 800c916:	6849      	ldr	r1, [r1, #4]
 800c918:	0849      	lsrs	r1, r1, #1
 800c91a:	2000      	movs	r0, #0
 800c91c:	460c      	mov	r4, r1
 800c91e:	4605      	mov	r5, r0
 800c920:	eb12 0804 	adds.w	r8, r2, r4
 800c924:	eb43 0905 	adc.w	r9, r3, r5
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	469a      	mov	sl, r3
 800c930:	4693      	mov	fp, r2
 800c932:	4652      	mov	r2, sl
 800c934:	465b      	mov	r3, fp
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f4 f90d 	bl	8000b58 <__aeabi_uldivmod>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4613      	mov	r3, r2
 800c944:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c94c:	d308      	bcc.n	800c960 <UART_SetConfig+0x288>
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c954:	d204      	bcs.n	800c960 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6a3a      	ldr	r2, [r7, #32]
 800c95c:	60da      	str	r2, [r3, #12]
 800c95e:	e0c9      	b.n	800caf4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c966:	e0c5      	b.n	800caf4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	69db      	ldr	r3, [r3, #28]
 800c96c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c970:	d16d      	bne.n	800ca4e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c972:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c976:	3b01      	subs	r3, #1
 800c978:	2b07      	cmp	r3, #7
 800c97a:	d82d      	bhi.n	800c9d8 <UART_SetConfig+0x300>
 800c97c:	a201      	add	r2, pc, #4	@ (adr r2, 800c984 <UART_SetConfig+0x2ac>)
 800c97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c982:	bf00      	nop
 800c984:	0800c9a5 	.word	0x0800c9a5
 800c988:	0800c9ad 	.word	0x0800c9ad
 800c98c:	0800c9d9 	.word	0x0800c9d9
 800c990:	0800c9b3 	.word	0x0800c9b3
 800c994:	0800c9d9 	.word	0x0800c9d9
 800c998:	0800c9d9 	.word	0x0800c9d9
 800c99c:	0800c9d9 	.word	0x0800c9d9
 800c9a0:	0800c9bb 	.word	0x0800c9bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9a4:	f7fe fc7a 	bl	800b29c <HAL_RCC_GetPCLK2Freq>
 800c9a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9aa:	e01b      	b.n	800c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c9ac:	4b08      	ldr	r3, [pc, #32]	@ (800c9d0 <UART_SetConfig+0x2f8>)
 800c9ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9b0:	e018      	b.n	800c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c9b2:	f7fe fbdd 	bl	800b170 <HAL_RCC_GetSysClockFreq>
 800c9b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c9b8:	e014      	b.n	800c9e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c9c0:	e010      	b.n	800c9e4 <UART_SetConfig+0x30c>
 800c9c2:	bf00      	nop
 800c9c4:	cfff69f3 	.word	0xcfff69f3
 800c9c8:	40008000 	.word	0x40008000
 800c9cc:	40013800 	.word	0x40013800
 800c9d0:	00f42400 	.word	0x00f42400
 800c9d4:	08014a4c 	.word	0x08014a4c
      default:
        pclk = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c9e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 8084 	beq.w	800caf4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f0:	4a4b      	ldr	r2, [pc, #300]	@ (800cb20 <UART_SetConfig+0x448>)
 800c9f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9fe:	005a      	lsls	r2, r3, #1
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	085b      	lsrs	r3, r3, #1
 800ca06:	441a      	add	r2, r3
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca10:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	2b0f      	cmp	r3, #15
 800ca16:	d916      	bls.n	800ca46 <UART_SetConfig+0x36e>
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca1e:	d212      	bcs.n	800ca46 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	f023 030f 	bic.w	r3, r3, #15
 800ca28:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	085b      	lsrs	r3, r3, #1
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	8bfb      	ldrh	r3, [r7, #30]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	8bfa      	ldrh	r2, [r7, #30]
 800ca42:	60da      	str	r2, [r3, #12]
 800ca44:	e056      	b.n	800caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca4c:	e052      	b.n	800caf4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ca4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ca52:	3b01      	subs	r3, #1
 800ca54:	2b07      	cmp	r3, #7
 800ca56:	d822      	bhi.n	800ca9e <UART_SetConfig+0x3c6>
 800ca58:	a201      	add	r2, pc, #4	@ (adr r2, 800ca60 <UART_SetConfig+0x388>)
 800ca5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca5e:	bf00      	nop
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca9f 	.word	0x0800ca9f
 800ca6c:	0800ca8f 	.word	0x0800ca8f
 800ca70:	0800ca9f 	.word	0x0800ca9f
 800ca74:	0800ca9f 	.word	0x0800ca9f
 800ca78:	0800ca9f 	.word	0x0800ca9f
 800ca7c:	0800ca97 	.word	0x0800ca97
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca80:	f7fe fc0c 	bl	800b29c <HAL_RCC_GetPCLK2Freq>
 800ca84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca86:	e010      	b.n	800caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca88:	4b26      	ldr	r3, [pc, #152]	@ (800cb24 <UART_SetConfig+0x44c>)
 800ca8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca8c:	e00d      	b.n	800caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca8e:	f7fe fb6f 	bl	800b170 <HAL_RCC_GetSysClockFreq>
 800ca92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca94:	e009      	b.n	800caaa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca9c:	e005      	b.n	800caaa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800caa8:	bf00      	nop
    }

    if (pclk != 0U)
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d021      	beq.n	800caf4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cab4:	4a1a      	ldr	r2, [pc, #104]	@ (800cb20 <UART_SetConfig+0x448>)
 800cab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caba:	461a      	mov	r2, r3
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	fbb3 f2f2 	udiv	r2, r3, r2
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	085b      	lsrs	r3, r3, #1
 800cac8:	441a      	add	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	d909      	bls.n	800caee <UART_SetConfig+0x416>
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cae0:	d205      	bcs.n	800caee <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60da      	str	r2, [r3, #12]
 800caec:	e002      	b.n	800caf4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2201      	movs	r2, #1
 800caf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	2201      	movs	r2, #1
 800cb00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2200      	movs	r2, #0
 800cb08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cb10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3730      	adds	r7, #48	@ 0x30
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb1e:	bf00      	nop
 800cb20:	08014a4c 	.word	0x08014a4c
 800cb24:	00f42400 	.word	0x00f42400

0800cb28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb34:	f003 0308 	and.w	r3, r3, #8
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d00a      	beq.n	800cb52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb56:	f003 0301 	and.w	r3, r3, #1
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb78:	f003 0302 	and.w	r3, r3, #2
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00a      	beq.n	800cb96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb9a:	f003 0304 	and.w	r3, r3, #4
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00a      	beq.n	800cbb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	f003 0310 	and.w	r3, r3, #16
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00a      	beq.n	800cbda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d00a      	beq.n	800cbfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	430a      	orrs	r2, r1
 800cbfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d01a      	beq.n	800cc3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	430a      	orrs	r2, r1
 800cc1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc26:	d10a      	bne.n	800cc3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00a      	beq.n	800cc60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	605a      	str	r2, [r3, #4]
  }
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b098      	sub	sp, #96	@ 0x60
 800cc70:	af02      	add	r7, sp, #8
 800cc72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc7c:	f7f8 f8a0 	bl	8004dc0 <HAL_GetTick>
 800cc80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0308 	and.w	r3, r3, #8
 800cc8c:	2b08      	cmp	r3, #8
 800cc8e:	d12f      	bne.n	800ccf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 f88e 	bl	800cdc0 <UART_WaitOnFlagUntilTimeout>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d022      	beq.n	800ccf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	e853 3f00 	ldrex	r3, [r3]
 800ccb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ccca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccd0:	e841 2300 	strex	r3, r2, [r1]
 800ccd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ccd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d1e6      	bne.n	800ccaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2220      	movs	r2, #32
 800cce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccec:	2303      	movs	r3, #3
 800ccee:	e063      	b.n	800cdb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b04      	cmp	r3, #4
 800ccfc:	d149      	bne.n	800cd92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd06:	2200      	movs	r2, #0
 800cd08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f857 	bl	800cdc0 <UART_WaitOnFlagUntilTimeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d03c      	beq.n	800cd92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd20:	e853 3f00 	ldrex	r3, [r3]
 800cd24:	623b      	str	r3, [r7, #32]
   return(result);
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cd2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	461a      	mov	r2, r3
 800cd34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd36:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd3e:	e841 2300 	strex	r3, r2, [r1]
 800cd42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1e6      	bne.n	800cd18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	3308      	adds	r3, #8
 800cd50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	e853 3f00 	ldrex	r3, [r3]
 800cd58:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f023 0301 	bic.w	r3, r3, #1
 800cd60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3308      	adds	r3, #8
 800cd68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd6a:	61fa      	str	r2, [r7, #28]
 800cd6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6e:	69b9      	ldr	r1, [r7, #24]
 800cd70:	69fa      	ldr	r2, [r7, #28]
 800cd72:	e841 2300 	strex	r3, r2, [r1]
 800cd76:	617b      	str	r3, [r7, #20]
   return(result);
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1e5      	bne.n	800cd4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2220      	movs	r2, #32
 800cd82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e012      	b.n	800cdb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2220      	movs	r2, #32
 800cd9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3758      	adds	r7, #88	@ 0x58
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	60f8      	str	r0, [r7, #12]
 800cdc8:	60b9      	str	r1, [r7, #8]
 800cdca:	603b      	str	r3, [r7, #0]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdd0:	e04f      	b.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd8:	d04b      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdda:	f7f7 fff1 	bl	8004dc0 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d302      	bcc.n	800cdf0 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e04e      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f003 0304 	and.w	r3, r3, #4
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d037      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b80      	cmp	r3, #128	@ 0x80
 800ce06:	d034      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b40      	cmp	r3, #64	@ 0x40
 800ce0c:	d031      	beq.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	f003 0308 	and.w	r3, r3, #8
 800ce18:	2b08      	cmp	r3, #8
 800ce1a:	d110      	bne.n	800ce3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2208      	movs	r2, #8
 800ce22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f838 	bl	800ce9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2208      	movs	r2, #8
 800ce2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2200      	movs	r2, #0
 800ce36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	e029      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69db      	ldr	r3, [r3, #28]
 800ce44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce4c:	d111      	bne.n	800ce72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce58:	68f8      	ldr	r0, [r7, #12]
 800ce5a:	f000 f81e 	bl	800ce9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2220      	movs	r2, #32
 800ce62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e00f      	b.n	800ce92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	69da      	ldr	r2, [r3, #28]
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	bf0c      	ite	eq
 800ce82:	2301      	moveq	r3, #1
 800ce84:	2300      	movne	r3, #0
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	461a      	mov	r2, r3
 800ce8a:	79fb      	ldrb	r3, [r7, #7]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d0a0      	beq.n	800cdd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b095      	sub	sp, #84	@ 0x54
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ceb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cec2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e6      	bne.n	800cea2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	3308      	adds	r3, #8
 800ceda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	e853 3f00 	ldrex	r3, [r3]
 800cee2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ceea:	f023 0301 	bic.w	r3, r3, #1
 800ceee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3308      	adds	r3, #8
 800cef6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cefa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cefe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf00:	e841 2300 	strex	r3, r2, [r1]
 800cf04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e3      	bne.n	800ced4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d118      	bne.n	800cf46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	e853 3f00 	ldrex	r3, [r3]
 800cf20:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	f023 0310 	bic.w	r3, r3, #16
 800cf28:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf32:	61bb      	str	r3, [r7, #24]
 800cf34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf36:	6979      	ldr	r1, [r7, #20]
 800cf38:	69ba      	ldr	r2, [r7, #24]
 800cf3a:	e841 2300 	strex	r3, r2, [r1]
 800cf3e:	613b      	str	r3, [r7, #16]
   return(result);
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e6      	bne.n	800cf14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2220      	movs	r2, #32
 800cf4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cf5a:	bf00      	nop
 800cf5c:	3754      	adds	r7, #84	@ 0x54
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b085      	sub	sp, #20
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf9c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cfa0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	43db      	mvns	r3, r3
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	4013      	ands	r3, r2
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cfca:	b480      	push	{r7}
 800cfcc:	b085      	sub	sp, #20
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	1d3b      	adds	r3, r7, #4
 800cfd4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3714      	adds	r7, #20
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
	...

0800d008 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d008:	b480      	push	{r7}
 800d00a:	b09d      	sub	sp, #116	@ 0x74
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	4413      	add	r3, r2
 800d022:	881b      	ldrh	r3, [r3, #0]
 800d024:	b29b      	uxth	r3, r3
 800d026:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d02e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	78db      	ldrb	r3, [r3, #3]
 800d036:	2b03      	cmp	r3, #3
 800d038:	d81f      	bhi.n	800d07a <USB_ActivateEndpoint+0x72>
 800d03a:	a201      	add	r2, pc, #4	@ (adr r2, 800d040 <USB_ActivateEndpoint+0x38>)
 800d03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d040:	0800d051 	.word	0x0800d051
 800d044:	0800d06d 	.word	0x0800d06d
 800d048:	0800d083 	.word	0x0800d083
 800d04c:	0800d05f 	.word	0x0800d05f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d050:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d054:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d058:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d05c:	e012      	b.n	800d084 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d05e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d062:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d066:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d06a:	e00b      	b.n	800d084 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d06c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d070:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d074:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d078:	e004      	b.n	800d084 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d080:	e000      	b.n	800d084 <USB_ActivateEndpoint+0x7c>
      break;
 800d082:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	441a      	add	r2, r3
 800d08e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d09a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	881b      	ldrh	r3, [r3, #0]
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	b21b      	sxth	r3, r3
 800d0b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0be:	b21a      	sxth	r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	b21b      	sxth	r3, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	b21b      	sxth	r3, r3
 800d0ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	441a      	add	r2, r3
 800d0d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	7b1b      	ldrb	r3, [r3, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f040 8178 	bne.w	800d3ea <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	785b      	ldrb	r3, [r3, #1]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 8084 	beq.w	800d20c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	61bb      	str	r3, [r7, #24]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d10e:	b29b      	uxth	r3, r3
 800d110:	461a      	mov	r2, r3
 800d112:	69bb      	ldr	r3, [r7, #24]
 800d114:	4413      	add	r3, r2
 800d116:	61bb      	str	r3, [r7, #24]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	00da      	lsls	r2, r3, #3
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	4413      	add	r3, r2
 800d122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d126:	617b      	str	r3, [r7, #20]
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	88db      	ldrh	r3, [r3, #6]
 800d12c:	085b      	lsrs	r3, r3, #1
 800d12e:	b29b      	uxth	r3, r3
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	827b      	strh	r3, [r7, #18]
 800d146:	8a7b      	ldrh	r3, [r7, #18]
 800d148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d01b      	beq.n	800d188 <USB_ActivateEndpoint+0x180>
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d166:	823b      	strh	r3, [r7, #16]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	441a      	add	r2, r3
 800d172:	8a3b      	ldrh	r3, [r7, #16]
 800d174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d17c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d180:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d184:	b29b      	uxth	r3, r3
 800d186:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	78db      	ldrb	r3, [r3, #3]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d020      	beq.n	800d1d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d190:	687a      	ldr	r2, [r7, #4]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1a6:	81bb      	strh	r3, [r7, #12]
 800d1a8:	89bb      	ldrh	r3, [r7, #12]
 800d1aa:	f083 0320 	eor.w	r3, r3, #32
 800d1ae:	81bb      	strh	r3, [r7, #12]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	441a      	add	r2, r3
 800d1ba:	89bb      	ldrh	r3, [r7, #12]
 800d1bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	8013      	strh	r3, [r2, #0]
 800d1d0:	e2d5      	b.n	800d77e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1e8:	81fb      	strh	r3, [r7, #14]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	441a      	add	r2, r3
 800d1f4:	89fb      	ldrh	r3, [r7, #14]
 800d1f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d206:	b29b      	uxth	r3, r3
 800d208:	8013      	strh	r3, [r2, #0]
 800d20a:	e2b8      	b.n	800d77e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d216:	b29b      	uxth	r3, r3
 800d218:	461a      	mov	r2, r3
 800d21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21c:	4413      	add	r3, r2
 800d21e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00da      	lsls	r2, r3, #3
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	88db      	ldrh	r3, [r3, #6]
 800d234:	085b      	lsrs	r3, r3, #1
 800d236:	b29b      	uxth	r3, r3
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	461a      	mov	r2, r3
 800d24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d250:	4413      	add	r3, r2
 800d252:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	00da      	lsls	r2, r3, #3
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	4413      	add	r3, r2
 800d25e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d262:	627b      	str	r3, [r7, #36]	@ 0x24
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d26e:	b29a      	uxth	r2, r3
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	801a      	strh	r2, [r3, #0]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	2b3e      	cmp	r3, #62	@ 0x3e
 800d27a:	d91d      	bls.n	800d2b8 <USB_ActivateEndpoint+0x2b0>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	095b      	lsrs	r3, r3, #5
 800d282:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	f003 031f 	and.w	r3, r3, #31
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d102      	bne.n	800d296 <USB_ActivateEndpoint+0x28e>
 800d290:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d292:	3b01      	subs	r3, #1
 800d294:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	029b      	lsls	r3, r3, #10
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b4:	801a      	strh	r2, [r3, #0]
 800d2b6:	e026      	b.n	800d306 <USB_ActivateEndpoint+0x2fe>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d10a      	bne.n	800d2d6 <USB_ActivateEndpoint+0x2ce>
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c2:	881b      	ldrh	r3, [r3, #0]
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d2:	801a      	strh	r2, [r3, #0]
 800d2d4:	e017      	b.n	800d306 <USB_ActivateEndpoint+0x2fe>
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	085b      	lsrs	r3, r3, #1
 800d2dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	f003 0301 	and.w	r3, r3, #1
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <USB_ActivateEndpoint+0x2e8>
 800d2ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	029b      	lsls	r3, r3, #10
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	4313      	orrs	r3, r2
 800d300:	b29a      	uxth	r2, r3
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d314:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d01b      	beq.n	800d356 <USB_ActivateEndpoint+0x34e>
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d334:	843b      	strh	r3, [r7, #32]
 800d336:	687a      	ldr	r2, [r7, #4]
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	441a      	add	r2, r3
 800d340:	8c3b      	ldrh	r3, [r7, #32]
 800d342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d34a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d34e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d352:	b29b      	uxth	r3, r3
 800d354:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d124      	bne.n	800d3a8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d374:	83bb      	strh	r3, [r7, #28]
 800d376:	8bbb      	ldrh	r3, [r7, #28]
 800d378:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d37c:	83bb      	strh	r3, [r7, #28]
 800d37e:	8bbb      	ldrh	r3, [r7, #28]
 800d380:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d384:	83bb      	strh	r3, [r7, #28]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	441a      	add	r2, r3
 800d390:	8bbb      	ldrh	r3, [r7, #28]
 800d392:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d396:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d39a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	8013      	strh	r3, [r2, #0]
 800d3a6:	e1ea      	b.n	800d77e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3be:	83fb      	strh	r3, [r7, #30]
 800d3c0:	8bfb      	ldrh	r3, [r7, #30]
 800d3c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d3c6:	83fb      	strh	r3, [r7, #30]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	441a      	add	r2, r3
 800d3d2:	8bfb      	ldrh	r3, [r7, #30]
 800d3d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	8013      	strh	r3, [r2, #0]
 800d3e8:	e1c9      	b.n	800d77e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	78db      	ldrb	r3, [r3, #3]
 800d3ee:	2b02      	cmp	r3, #2
 800d3f0:	d11e      	bne.n	800d430 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4413      	add	r3, r2
 800d3fc:	881b      	ldrh	r3, [r3, #0]
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d408:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	441a      	add	r2, r3
 800d416:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d41a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d41e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d422:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	8013      	strh	r3, [r2, #0]
 800d42e:	e01d      	b.n	800d46c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	781b      	ldrb	r3, [r3, #0]
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4413      	add	r3, r2
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d446:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	441a      	add	r2, r3
 800d454:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d458:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d45c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d468:	b29b      	uxth	r3, r3
 800d46a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d476:	b29b      	uxth	r3, r3
 800d478:	461a      	mov	r2, r3
 800d47a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d47c:	4413      	add	r3, r2
 800d47e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	00da      	lsls	r2, r3, #3
 800d486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d488:	4413      	add	r3, r2
 800d48a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d48e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	891b      	ldrh	r3, [r3, #8]
 800d494:	085b      	lsrs	r3, r3, #1
 800d496:	b29b      	uxth	r3, r3
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4b0:	4413      	add	r3, r2
 800d4b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	00da      	lsls	r2, r3, #3
 800d4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4bc:	4413      	add	r3, r2
 800d4be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d4c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	895b      	ldrh	r3, [r3, #10]
 800d4c8:	085b      	lsrs	r3, r3, #1
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f040 8093 	bne.w	800d604 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	881b      	ldrh	r3, [r3, #0]
 800d4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d4ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d4f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d01b      	beq.n	800d532 <USB_ActivateEndpoint+0x52a>
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	b29b      	uxth	r3, r3
 800d508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d50c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d510:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	441a      	add	r2, r3
 800d51c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d51e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d522:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d52a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52e:	b29b      	uxth	r3, r3
 800d530:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4413      	add	r3, r2
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d540:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d546:	2b00      	cmp	r3, #0
 800d548:	d01b      	beq.n	800d582 <USB_ActivateEndpoint+0x57a>
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	b29b      	uxth	r3, r3
 800d558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d55c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d560:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	441a      	add	r2, r3
 800d56c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d56e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d57a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d57e:	b29b      	uxth	r3, r3
 800d580:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	b29b      	uxth	r3, r3
 800d590:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d598:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d59a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d59c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5a0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d5a8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	441a      	add	r2, r3
 800d5b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d5b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4413      	add	r3, r2
 800d5d4:	881b      	ldrh	r3, [r3, #0]
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	781b      	ldrb	r3, [r3, #0]
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	441a      	add	r2, r3
 800d5ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d5ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	8013      	strh	r3, [r2, #0]
 800d602:	e0bc      	b.n	800d77e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	881b      	ldrh	r3, [r3, #0]
 800d610:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d614:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01d      	beq.n	800d65c <USB_ActivateEndpoint+0x654>
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d636:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	441a      	add	r2, r3
 800d644:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800d648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d64c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d658:	b29b      	uxth	r3, r3
 800d65a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800d66c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d674:	2b00      	cmp	r3, #0
 800d676:	d01d      	beq.n	800d6b4 <USB_ActivateEndpoint+0x6ac>
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	881b      	ldrh	r3, [r3, #0]
 800d684:	b29b      	uxth	r3, r3
 800d686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d68a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d68e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	441a      	add	r2, r3
 800d69c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d6a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	78db      	ldrb	r3, [r3, #3]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d024      	beq.n	800d706 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	009b      	lsls	r3, r3, #2
 800d6c4:	4413      	add	r3, r2
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d6d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d6da:	f083 0320 	eor.w	r3, r3, #32
 800d6de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	441a      	add	r2, r3
 800d6ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d6f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d700:	b29b      	uxth	r3, r3
 800d702:	8013      	strh	r3, [r2, #0]
 800d704:	e01d      	b.n	800d742 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	b29b      	uxth	r3, r3
 800d714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d71c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	441a      	add	r2, r3
 800d72a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d72e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d73e:	b29b      	uxth	r3, r3
 800d740:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	881b      	ldrh	r3, [r3, #0]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d758:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	441a      	add	r2, r3
 800d766:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d76a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d76e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d77e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d782:	4618      	mov	r0, r3
 800d784:	3774      	adds	r7, #116	@ 0x74
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop

0800d790 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d790:	b480      	push	{r7}
 800d792:	b08d      	sub	sp, #52	@ 0x34
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	7b1b      	ldrb	r3, [r3, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f040 808e 	bne.w	800d8c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	785b      	ldrb	r3, [r3, #1]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d044      	beq.n	800d836 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	81bb      	strh	r3, [r7, #12]
 800d7ba:	89bb      	ldrh	r3, [r7, #12]
 800d7bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d01b      	beq.n	800d7fc <USB_DeactivateEndpoint+0x6c>
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	b29b      	uxth	r3, r3
 800d7d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7da:	817b      	strh	r3, [r7, #10]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	441a      	add	r2, r3
 800d7e6:	897b      	ldrh	r3, [r7, #10]
 800d7e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	881b      	ldrh	r3, [r3, #0]
 800d808:	b29b      	uxth	r3, r3
 800d80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d80e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d812:	813b      	strh	r3, [r7, #8]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	441a      	add	r2, r3
 800d81e:	893b      	ldrh	r3, [r7, #8]
 800d820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d82c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d830:	b29b      	uxth	r3, r3
 800d832:	8013      	strh	r3, [r2, #0]
 800d834:	e192      	b.n	800db5c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	827b      	strh	r3, [r7, #18]
 800d844:	8a7b      	ldrh	r3, [r7, #18]
 800d846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d01b      	beq.n	800d886 <USB_DeactivateEndpoint+0xf6>
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	881b      	ldrh	r3, [r3, #0]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d864:	823b      	strh	r3, [r7, #16]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	441a      	add	r2, r3
 800d870:	8a3b      	ldrh	r3, [r7, #16]
 800d872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d87a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d882:	b29b      	uxth	r3, r3
 800d884:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	4413      	add	r3, r2
 800d890:	881b      	ldrh	r3, [r3, #0]
 800d892:	b29b      	uxth	r3, r3
 800d894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d89c:	81fb      	strh	r3, [r7, #14]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	441a      	add	r2, r3
 800d8a8:	89fb      	ldrh	r3, [r7, #14]
 800d8aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	8013      	strh	r3, [r2, #0]
 800d8be:	e14d      	b.n	800db5c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	785b      	ldrb	r3, [r3, #1]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f040 80a5 	bne.w	800da14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	881b      	ldrh	r3, [r3, #0]
 800d8d6:	843b      	strh	r3, [r7, #32]
 800d8d8:	8c3b      	ldrh	r3, [r7, #32]
 800d8da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d01b      	beq.n	800d91a <USB_DeactivateEndpoint+0x18a>
 800d8e2:	687a      	ldr	r2, [r7, #4]
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4413      	add	r3, r2
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8f8:	83fb      	strh	r3, [r7, #30]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	441a      	add	r2, r3
 800d904:	8bfb      	ldrh	r3, [r7, #30]
 800d906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d90a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d90e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d916:	b29b      	uxth	r3, r3
 800d918:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	83bb      	strh	r3, [r7, #28]
 800d928:	8bbb      	ldrh	r3, [r7, #28]
 800d92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d01b      	beq.n	800d96a <USB_DeactivateEndpoint+0x1da>
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	4413      	add	r3, r2
 800d93c:	881b      	ldrh	r3, [r3, #0]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d944:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d948:	837b      	strh	r3, [r7, #26]
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	009b      	lsls	r3, r3, #2
 800d952:	441a      	add	r2, r3
 800d954:	8b7b      	ldrh	r3, [r7, #26]
 800d956:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d95a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d95e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d962:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d966:	b29b      	uxth	r3, r3
 800d968:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	b29b      	uxth	r3, r3
 800d978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d97c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d980:	833b      	strh	r3, [r7, #24]
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	009b      	lsls	r3, r3, #2
 800d98a:	441a      	add	r2, r3
 800d98c:	8b3b      	ldrh	r3, [r7, #24]
 800d98e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d992:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d99a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	881b      	ldrh	r3, [r3, #0]
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9b8:	82fb      	strh	r3, [r7, #22]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	441a      	add	r2, r3
 800d9c4:	8afb      	ldrh	r3, [r7, #22]
 800d9c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9f0:	82bb      	strh	r3, [r7, #20]
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	441a      	add	r2, r3
 800d9fc:	8abb      	ldrh	r3, [r7, #20]
 800d9fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da0e:	b29b      	uxth	r3, r3
 800da10:	8013      	strh	r3, [r2, #0]
 800da12:	e0a3      	b.n	800db5c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800da22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800da24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d01b      	beq.n	800da64 <USB_DeactivateEndpoint+0x2d4>
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	b29b      	uxth	r3, r3
 800da3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	441a      	add	r2, r3
 800da4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800da50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da60:	b29b      	uxth	r3, r3
 800da62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	009b      	lsls	r3, r3, #2
 800da6c:	4413      	add	r3, r2
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800da72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800da74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d01b      	beq.n	800dab4 <USB_DeactivateEndpoint+0x324>
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da92:	853b      	strh	r3, [r7, #40]	@ 0x28
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	441a      	add	r2, r3
 800da9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800daa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	009b      	lsls	r3, r3, #2
 800dabc:	4413      	add	r3, r2
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800dacc:	687a      	ldr	r2, [r7, #4]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	441a      	add	r2, r3
 800dad6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dad8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dadc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dae0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dae8:	b29b      	uxth	r3, r3
 800daea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	881b      	ldrh	r3, [r3, #0]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dafe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800db02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	441a      	add	r2, r3
 800db0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800db10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db20:	b29b      	uxth	r3, r3
 800db22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	009b      	lsls	r3, r3, #2
 800db2c:	4413      	add	r3, r2
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	b29b      	uxth	r3, r3
 800db32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	441a      	add	r2, r3
 800db46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800db48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db58:	b29b      	uxth	r3, r3
 800db5a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3734      	adds	r7, #52	@ 0x34
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b0c2      	sub	sp, #264	@ 0x108
 800db6e:	af00      	add	r7, sp, #0
 800db70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db78:	6018      	str	r0, [r3, #0]
 800db7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db82:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	2b01      	cmp	r3, #1
 800db92:	f040 86b7 	bne.w	800e904 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800db96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	699a      	ldr	r2, [r3, #24]
 800dba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d908      	bls.n	800dbc4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800dbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800dbc2:	e007      	b.n	800dbd4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800dbc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800dbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	7b1b      	ldrb	r3, [r3, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d13a      	bne.n	800dc5a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800dbe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6959      	ldr	r1, [r3, #20]
 800dbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	88da      	ldrh	r2, [r3, #6]
 800dbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dc0a:	6800      	ldr	r0, [r0, #0]
 800dc0c:	f001 fc98 	bl	800f540 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800dc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	613b      	str	r3, [r7, #16]
 800dc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	4413      	add	r3, r2
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	00da      	lsls	r2, r3, #3
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	4413      	add	r3, r2
 800dc46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	801a      	strh	r2, [r3, #0]
 800dc56:	f000 be1f 	b.w	800e898 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dc5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	78db      	ldrb	r3, [r3, #3]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	f040 8462 	bne.w	800e530 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6a1a      	ldr	r2, [r3, #32]
 800dc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	f240 83df 	bls.w	800e448 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dc8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	009b      	lsls	r3, r3, #2
 800dca2:	4413      	add	r3, r2
 800dca4:	881b      	ldrh	r3, [r3, #0]
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dcb0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800dcb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	441a      	add	r2, r3
 800dcce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dcd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcda:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dcde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6a1a      	ldr	r2, [r3, #32]
 800dcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf6:	1ad2      	subs	r2, r2, r3
 800dcf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 81c7 	beq.w	800e0ba <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dd2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d177      	bne.n	800de38 <USB_EPStartXfer+0x2ce>
 800dd48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	461a      	mov	r2, r3
 800dd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd68:	4413      	add	r3, r2
 800dd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	00da      	lsls	r2, r3, #3
 800dd7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd7c:	4413      	add	r3, r2
 800dd7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd82:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd92:	801a      	strh	r2, [r3, #0]
 800dd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd98:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd9a:	d921      	bls.n	800dde0 <USB_EPStartXfer+0x276>
 800dd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dda0:	095b      	lsrs	r3, r3, #5
 800dda2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddaa:	f003 031f 	and.w	r3, r3, #31
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d104      	bne.n	800ddbc <USB_EPStartXfer+0x252>
 800ddb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ddbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbe:	881b      	ldrh	r3, [r3, #0]
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	029b      	lsls	r3, r3, #10
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	801a      	strh	r2, [r3, #0]
 800ddde:	e050      	b.n	800de82 <USB_EPStartXfer+0x318>
 800dde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d10a      	bne.n	800ddfe <USB_EPStartXfer+0x294>
 800dde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	801a      	strh	r2, [r3, #0]
 800ddfc:	e041      	b.n	800de82 <USB_EPStartXfer+0x318>
 800ddfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de02:	085b      	lsrs	r3, r3, #1
 800de04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de0c:	f003 0301 	and.w	r3, r3, #1
 800de10:	2b00      	cmp	r3, #0
 800de12:	d004      	beq.n	800de1e <USB_EPStartXfer+0x2b4>
 800de14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de18:	3301      	adds	r3, #1
 800de1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800de1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	b29a      	uxth	r2, r3
 800de24:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800de28:	b29b      	uxth	r3, r3
 800de2a:	029b      	lsls	r3, r3, #10
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	4313      	orrs	r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de34:	801a      	strh	r2, [r3, #0]
 800de36:	e024      	b.n	800de82 <USB_EPStartXfer+0x318>
 800de38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	785b      	ldrb	r3, [r3, #1]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d11c      	bne.n	800de82 <USB_EPStartXfer+0x318>
 800de48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de56:	b29b      	uxth	r3, r3
 800de58:	461a      	mov	r2, r3
 800de5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5c:	4413      	add	r3, r2
 800de5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800de60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	00da      	lsls	r2, r3, #3
 800de6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de70:	4413      	add	r3, r2
 800de72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800de82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	895b      	ldrh	r3, [r3, #10]
 800de8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6959      	ldr	r1, [r3, #20]
 800de9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dea8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800deac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800deb0:	6800      	ldr	r0, [r0, #0]
 800deb2:	f001 fb45 	bl	800f540 <USB_WritePMA>
            ep->xfer_buff += len;
 800deb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	695a      	ldr	r2, [r3, #20]
 800dec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dec6:	441a      	add	r2, r3
 800dec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800decc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ded4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6a1a      	ldr	r2, [r3, #32]
 800dee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	429a      	cmp	r2, r3
 800deee:	d90f      	bls.n	800df10 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800def0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	6a1a      	ldr	r2, [r3, #32]
 800defc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df00:	1ad2      	subs	r2, r2, r3
 800df02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	621a      	str	r2, [r3, #32]
 800df0e:	e00e      	b.n	800df2e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800df10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6a1b      	ldr	r3, [r3, #32]
 800df1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800df20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2200      	movs	r2, #0
 800df2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800df2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d177      	bne.n	800e02e <USB_EPStartXfer+0x4c4>
 800df3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	61bb      	str	r3, [r7, #24]
 800df4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df58:	b29b      	uxth	r3, r3
 800df5a:	461a      	mov	r2, r3
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	4413      	add	r3, r2
 800df60:	61bb      	str	r3, [r7, #24]
 800df62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	00da      	lsls	r2, r3, #3
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	4413      	add	r3, r2
 800df74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	b29b      	uxth	r3, r3
 800df80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df84:	b29a      	uxth	r2, r3
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	801a      	strh	r2, [r3, #0]
 800df8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800df90:	d921      	bls.n	800dfd6 <USB_EPStartXfer+0x46c>
 800df92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df96:	095b      	lsrs	r3, r3, #5
 800df98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa0:	f003 031f 	and.w	r3, r3, #31
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d104      	bne.n	800dfb2 <USB_EPStartXfer+0x448>
 800dfa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfac:	3b01      	subs	r3, #1
 800dfae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	029b      	lsls	r3, r3, #10
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	801a      	strh	r2, [r3, #0]
 800dfd4:	e056      	b.n	800e084 <USB_EPStartXfer+0x51a>
 800dfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d10a      	bne.n	800dff4 <USB_EPStartXfer+0x48a>
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	801a      	strh	r2, [r3, #0]
 800dff2:	e047      	b.n	800e084 <USB_EPStartXfer+0x51a>
 800dff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dff8:	085b      	lsrs	r3, r3, #1
 800dffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800dffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e002:	f003 0301 	and.w	r3, r3, #1
 800e006:	2b00      	cmp	r3, #0
 800e008:	d004      	beq.n	800e014 <USB_EPStartXfer+0x4aa>
 800e00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e00e:	3301      	adds	r3, #1
 800e010:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	b29a      	uxth	r2, r3
 800e01a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e01e:	b29b      	uxth	r3, r3
 800e020:	029b      	lsls	r3, r3, #10
 800e022:	b29b      	uxth	r3, r3
 800e024:	4313      	orrs	r3, r2
 800e026:	b29a      	uxth	r2, r3
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	801a      	strh	r2, [r3, #0]
 800e02c:	e02a      	b.n	800e084 <USB_EPStartXfer+0x51a>
 800e02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	785b      	ldrb	r3, [r3, #1]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d122      	bne.n	800e084 <USB_EPStartXfer+0x51a>
 800e03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	623b      	str	r3, [r7, #32]
 800e04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e058:	b29b      	uxth	r3, r3
 800e05a:	461a      	mov	r2, r3
 800e05c:	6a3b      	ldr	r3, [r7, #32]
 800e05e:	4413      	add	r3, r2
 800e060:	623b      	str	r3, [r7, #32]
 800e062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	00da      	lsls	r2, r3, #3
 800e070:	6a3b      	ldr	r3, [r7, #32]
 800e072:	4413      	add	r3, r2
 800e074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e078:	61fb      	str	r3, [r7, #28]
 800e07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e07e:	b29a      	uxth	r2, r3
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	891b      	ldrh	r3, [r3, #8]
 800e090:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	6959      	ldr	r1, [r3, #20]
 800e0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e0aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e0ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e0b2:	6800      	ldr	r0, [r0, #0]
 800e0b4:	f001 fa44 	bl	800f540 <USB_WritePMA>
 800e0b8:	e3ee      	b.n	800e898 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	785b      	ldrb	r3, [r3, #1]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d177      	bne.n	800e1ba <USB_EPStartXfer+0x650>
 800e0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0ea:	4413      	add	r3, r2
 800e0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	00da      	lsls	r2, r3, #3
 800e0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e0fe:	4413      	add	r3, r2
 800e100:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e104:	647b      	str	r3, [r7, #68]	@ 0x44
 800e106:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e110:	b29a      	uxth	r2, r3
 800e112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e114:	801a      	strh	r2, [r3, #0]
 800e116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e11a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e11c:	d921      	bls.n	800e162 <USB_EPStartXfer+0x5f8>
 800e11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e122:	095b      	lsrs	r3, r3, #5
 800e124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e12c:	f003 031f 	and.w	r3, r3, #31
 800e130:	2b00      	cmp	r3, #0
 800e132:	d104      	bne.n	800e13e <USB_EPStartXfer+0x5d4>
 800e134:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e138:	3b01      	subs	r3, #1
 800e13a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e13e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	b29a      	uxth	r2, r3
 800e144:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e148:	b29b      	uxth	r3, r3
 800e14a:	029b      	lsls	r3, r3, #10
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	4313      	orrs	r3, r2
 800e150:	b29b      	uxth	r3, r3
 800e152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e15e:	801a      	strh	r2, [r3, #0]
 800e160:	e056      	b.n	800e210 <USB_EPStartXfer+0x6a6>
 800e162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e166:	2b00      	cmp	r3, #0
 800e168:	d10a      	bne.n	800e180 <USB_EPStartXfer+0x616>
 800e16a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	b29b      	uxth	r3, r3
 800e170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e178:	b29a      	uxth	r2, r3
 800e17a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e17c:	801a      	strh	r2, [r3, #0]
 800e17e:	e047      	b.n	800e210 <USB_EPStartXfer+0x6a6>
 800e180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e184:	085b      	lsrs	r3, r3, #1
 800e186:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e18e:	f003 0301 	and.w	r3, r3, #1
 800e192:	2b00      	cmp	r3, #0
 800e194:	d004      	beq.n	800e1a0 <USB_EPStartXfer+0x636>
 800e196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e19a:	3301      	adds	r3, #1
 800e19c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e1a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a2:	881b      	ldrh	r3, [r3, #0]
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	029b      	lsls	r3, r3, #10
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b6:	801a      	strh	r2, [r3, #0]
 800e1b8:	e02a      	b.n	800e210 <USB_EPStartXfer+0x6a6>
 800e1ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	785b      	ldrb	r3, [r3, #1]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d122      	bne.n	800e210 <USB_EPStartXfer+0x6a6>
 800e1ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ea:	4413      	add	r3, r2
 800e1ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	00da      	lsls	r2, r3, #3
 800e1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1fe:	4413      	add	r3, r2
 800e200:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e20e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6959      	ldr	r1, [r3, #20]
 800e22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e230:	b29b      	uxth	r3, r3
 800e232:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e236:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e23a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e23e:	6800      	ldr	r0, [r0, #0]
 800e240:	f001 f97e 	bl	800f540 <USB_WritePMA>
            ep->xfer_buff += len;
 800e244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	695a      	ldr	r2, [r3, #20]
 800e250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e254:	441a      	add	r2, r3
 800e256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6a1a      	ldr	r2, [r3, #32]
 800e26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e272:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d90f      	bls.n	800e29e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e27e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e282:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	6a1a      	ldr	r2, [r3, #32]
 800e28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	621a      	str	r2, [r3, #32]
 800e29c:	e00e      	b.n	800e2bc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	785b      	ldrb	r3, [r3, #1]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d177      	bne.n	800e3c8 <USB_EPStartXfer+0x85e>
 800e2d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f8:	4413      	add	r3, r2
 800e2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	00da      	lsls	r2, r3, #3
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	4413      	add	r3, r2
 800e30e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e312:	637b      	str	r3, [r7, #52]	@ 0x34
 800e314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e316:	881b      	ldrh	r3, [r3, #0]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e31e:	b29a      	uxth	r2, r3
 800e320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e322:	801a      	strh	r2, [r3, #0]
 800e324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e328:	2b3e      	cmp	r3, #62	@ 0x3e
 800e32a:	d921      	bls.n	800e370 <USB_EPStartXfer+0x806>
 800e32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e330:	095b      	lsrs	r3, r3, #5
 800e332:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e33a:	f003 031f 	and.w	r3, r3, #31
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d104      	bne.n	800e34c <USB_EPStartXfer+0x7e2>
 800e342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e346:	3b01      	subs	r3, #1
 800e348:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e34e:	881b      	ldrh	r3, [r3, #0]
 800e350:	b29a      	uxth	r2, r3
 800e352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e356:	b29b      	uxth	r3, r3
 800e358:	029b      	lsls	r3, r3, #10
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	4313      	orrs	r3, r2
 800e35e:	b29b      	uxth	r3, r3
 800e360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e368:	b29a      	uxth	r2, r3
 800e36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e36c:	801a      	strh	r2, [r3, #0]
 800e36e:	e050      	b.n	800e412 <USB_EPStartXfer+0x8a8>
 800e370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10a      	bne.n	800e38e <USB_EPStartXfer+0x824>
 800e378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e386:	b29a      	uxth	r2, r3
 800e388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38a:	801a      	strh	r2, [r3, #0]
 800e38c:	e041      	b.n	800e412 <USB_EPStartXfer+0x8a8>
 800e38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e392:	085b      	lsrs	r3, r3, #1
 800e394:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e39c:	f003 0301 	and.w	r3, r3, #1
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d004      	beq.n	800e3ae <USB_EPStartXfer+0x844>
 800e3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	029b      	lsls	r3, r3, #10
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	4313      	orrs	r3, r2
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3c4:	801a      	strh	r2, [r3, #0]
 800e3c6:	e024      	b.n	800e412 <USB_EPStartXfer+0x8a8>
 800e3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	785b      	ldrb	r3, [r3, #1]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d11c      	bne.n	800e412 <USB_EPStartXfer+0x8a8>
 800e3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3ec:	4413      	add	r3, r2
 800e3ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	00da      	lsls	r2, r3, #3
 800e3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e400:	4413      	add	r3, r2
 800e402:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e410:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	895b      	ldrh	r3, [r3, #10]
 800e41e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	6959      	ldr	r1, [r3, #20]
 800e42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e432:	b29b      	uxth	r3, r3
 800e434:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e438:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e43c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e440:	6800      	ldr	r0, [r0, #0]
 800e442:	f001 f87d 	bl	800f540 <USB_WritePMA>
 800e446:	e227      	b.n	800e898 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e44c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	6a1b      	ldr	r3, [r3, #32]
 800e454:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e45c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	b29b      	uxth	r3, r3
 800e476:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e47a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e47e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e486:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	441a      	add	r2, r3
 800e49c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e4a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e4a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e4a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e4b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4d4:	4413      	add	r3, r2
 800e4d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	00da      	lsls	r2, r3, #3
 800e4e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e4ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	891b      	ldrh	r3, [r3, #8]
 800e506:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	6959      	ldr	r1, [r3, #20]
 800e516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e520:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e524:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e528:	6800      	ldr	r0, [r0, #0]
 800e52a:	f001 f809 	bl	800f540 <USB_WritePMA>
 800e52e:	e1b3      	b.n	800e898 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6a1a      	ldr	r2, [r3, #32]
 800e53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e540:	1ad2      	subs	r2, r2, r3
 800e542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e556:	681a      	ldr	r2, [r3, #0]
 800e558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e55c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 80c6 	beq.w	800e702 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e57a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	673b      	str	r3, [r7, #112]	@ 0x70
 800e582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	785b      	ldrb	r3, [r3, #1]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d177      	bne.n	800e682 <USB_EPStartXfer+0xb18>
 800e592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5b2:	4413      	add	r3, r2
 800e5b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	00da      	lsls	r2, r3, #3
 800e5c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5c6:	4413      	add	r3, r2
 800e5c8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e5cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e5ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e5e4:	d921      	bls.n	800e62a <USB_EPStartXfer+0xac0>
 800e5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ea:	095b      	lsrs	r3, r3, #5
 800e5ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5f4:	f003 031f 	and.w	r3, r3, #31
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d104      	bne.n	800e606 <USB_EPStartXfer+0xa9c>
 800e5fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e600:	3b01      	subs	r3, #1
 800e602:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e608:	881b      	ldrh	r3, [r3, #0]
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e610:	b29b      	uxth	r3, r3
 800e612:	029b      	lsls	r3, r3, #10
 800e614:	b29b      	uxth	r3, r3
 800e616:	4313      	orrs	r3, r2
 800e618:	b29b      	uxth	r3, r3
 800e61a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e61e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e622:	b29a      	uxth	r2, r3
 800e624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e626:	801a      	strh	r2, [r3, #0]
 800e628:	e050      	b.n	800e6cc <USB_EPStartXfer+0xb62>
 800e62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d10a      	bne.n	800e648 <USB_EPStartXfer+0xade>
 800e632:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e634:	881b      	ldrh	r3, [r3, #0]
 800e636:	b29b      	uxth	r3, r3
 800e638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e63c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e640:	b29a      	uxth	r2, r3
 800e642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e644:	801a      	strh	r2, [r3, #0]
 800e646:	e041      	b.n	800e6cc <USB_EPStartXfer+0xb62>
 800e648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e64c:	085b      	lsrs	r3, r3, #1
 800e64e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <USB_EPStartXfer+0xafe>
 800e65e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e662:	3301      	adds	r3, #1
 800e664:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e668:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e66a:	881b      	ldrh	r3, [r3, #0]
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e672:	b29b      	uxth	r3, r3
 800e674:	029b      	lsls	r3, r3, #10
 800e676:	b29b      	uxth	r3, r3
 800e678:	4313      	orrs	r3, r2
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e67e:	801a      	strh	r2, [r3, #0]
 800e680:	e024      	b.n	800e6cc <USB_EPStartXfer+0xb62>
 800e682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	785b      	ldrb	r3, [r3, #1]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d11c      	bne.n	800e6cc <USB_EPStartXfer+0xb62>
 800e692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6a6:	4413      	add	r3, r2
 800e6a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800e6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	00da      	lsls	r2, r3, #3
 800e6b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e6ba:	4413      	add	r3, r2
 800e6bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e6ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	895b      	ldrh	r3, [r3, #10]
 800e6d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	6959      	ldr	r1, [r3, #20]
 800e6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e6f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e6f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e6fa:	6800      	ldr	r0, [r0, #0]
 800e6fc:	f000 ff20 	bl	800f540 <USB_WritePMA>
 800e700:	e0ca      	b.n	800e898 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	785b      	ldrb	r3, [r3, #1]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d177      	bne.n	800e802 <USB_EPStartXfer+0xc98>
 800e712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e716:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e71e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	461a      	mov	r2, r3
 800e730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e732:	4413      	add	r3, r2
 800e734:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	00da      	lsls	r2, r3, #3
 800e744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e746:	4413      	add	r3, r2
 800e748:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e74c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e74e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	b29b      	uxth	r3, r3
 800e754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e758:	b29a      	uxth	r2, r3
 800e75a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e75c:	801a      	strh	r2, [r3, #0]
 800e75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e762:	2b3e      	cmp	r3, #62	@ 0x3e
 800e764:	d921      	bls.n	800e7aa <USB_EPStartXfer+0xc40>
 800e766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e76a:	095b      	lsrs	r3, r3, #5
 800e76c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e774:	f003 031f 	and.w	r3, r3, #31
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d104      	bne.n	800e786 <USB_EPStartXfer+0xc1c>
 800e77c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e780:	3b01      	subs	r3, #1
 800e782:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e788:	881b      	ldrh	r3, [r3, #0]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e790:	b29b      	uxth	r3, r3
 800e792:	029b      	lsls	r3, r3, #10
 800e794:	b29b      	uxth	r3, r3
 800e796:	4313      	orrs	r3, r2
 800e798:	b29b      	uxth	r3, r3
 800e79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7a6:	801a      	strh	r2, [r3, #0]
 800e7a8:	e05c      	b.n	800e864 <USB_EPStartXfer+0xcfa>
 800e7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d10a      	bne.n	800e7c8 <USB_EPStartXfer+0xc5e>
 800e7b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7c4:	801a      	strh	r2, [r3, #0]
 800e7c6:	e04d      	b.n	800e864 <USB_EPStartXfer+0xcfa>
 800e7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7cc:	085b      	lsrs	r3, r3, #1
 800e7ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d6:	f003 0301 	and.w	r3, r3, #1
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d004      	beq.n	800e7e8 <USB_EPStartXfer+0xc7e>
 800e7de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e7e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7ea:	881b      	ldrh	r3, [r3, #0]
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	029b      	lsls	r3, r3, #10
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e7fe:	801a      	strh	r2, [r3, #0]
 800e800:	e030      	b.n	800e864 <USB_EPStartXfer+0xcfa>
 800e802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	785b      	ldrb	r3, [r3, #1]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d128      	bne.n	800e864 <USB_EPStartXfer+0xcfa>
 800e812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e816:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e82e:	b29b      	uxth	r3, r3
 800e830:	461a      	mov	r2, r3
 800e832:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e836:	4413      	add	r3, r2
 800e838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e83c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	00da      	lsls	r2, r3, #3
 800e84a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e84e:	4413      	add	r3, r2
 800e850:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e862:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	891b      	ldrh	r3, [r3, #8]
 800e870:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6959      	ldr	r1, [r3, #20]
 800e880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e884:	b29b      	uxth	r3, r3
 800e886:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e88a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e88e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e892:	6800      	ldr	r0, [r0, #0]
 800e894:	f000 fe54 	bl	800f540 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e89c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	4413      	add	r3, r2
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8be:	817b      	strh	r3, [r7, #10]
 800e8c0:	897b      	ldrh	r3, [r7, #10]
 800e8c2:	f083 0310 	eor.w	r3, r3, #16
 800e8c6:	817b      	strh	r3, [r7, #10]
 800e8c8:	897b      	ldrh	r3, [r7, #10]
 800e8ca:	f083 0320 	eor.w	r3, r3, #32
 800e8ce:	817b      	strh	r3, [r7, #10]
 800e8d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	441a      	add	r2, r3
 800e8ea:	897b      	ldrh	r3, [r7, #10]
 800e8ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	8013      	strh	r3, [r2, #0]
 800e900:	f000 bcde 	b.w	800f2c0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	7b1b      	ldrb	r3, [r3, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	f040 80bb 	bne.w	800ea8c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e91a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	699a      	ldr	r2, [r3, #24]
 800e922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d917      	bls.n	800e962 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e936:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	691b      	ldr	r3, [r3, #16]
 800e93e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800e942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e946:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	699a      	ldr	r2, [r3, #24]
 800e94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e952:	1ad2      	subs	r2, r2, r3
 800e954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	619a      	str	r2, [r3, #24]
 800e960:	e00e      	b.n	800e980 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	699b      	ldr	r3, [r3, #24]
 800e96e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	2200      	movs	r2, #0
 800e97e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	461a      	mov	r2, r3
 800e9a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	00da      	lsls	r2, r3, #3
 800e9b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e9bc:	4413      	add	r3, r2
 800e9be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e9c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9ca:	881b      	ldrh	r3, [r3, #0]
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e9d2:	b29a      	uxth	r2, r3
 800e9d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9d8:	801a      	strh	r2, [r3, #0]
 800e9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9de:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9e0:	d924      	bls.n	800ea2c <USB_EPStartXfer+0xec2>
 800e9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e6:	095b      	lsrs	r3, r3, #5
 800e9e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9f0:	f003 031f 	and.w	r3, r3, #31
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d104      	bne.n	800ea02 <USB_EPStartXfer+0xe98>
 800e9f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	029b      	lsls	r3, r3, #10
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	4313      	orrs	r3, r2
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea26:	801a      	strh	r2, [r3, #0]
 800ea28:	f000 bc10 	b.w	800f24c <USB_EPStartXfer+0x16e2>
 800ea2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d10c      	bne.n	800ea4e <USB_EPStartXfer+0xee4>
 800ea34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea38:	881b      	ldrh	r3, [r3, #0]
 800ea3a:	b29b      	uxth	r3, r3
 800ea3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea4a:	801a      	strh	r2, [r3, #0]
 800ea4c:	e3fe      	b.n	800f24c <USB_EPStartXfer+0x16e2>
 800ea4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea52:	085b      	lsrs	r3, r3, #1
 800ea54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea5c:	f003 0301 	and.w	r3, r3, #1
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d004      	beq.n	800ea6e <USB_EPStartXfer+0xf04>
 800ea64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea68:	3301      	adds	r3, #1
 800ea6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ea6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea72:	881b      	ldrh	r3, [r3, #0]
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	029b      	lsls	r3, r3, #10
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	4313      	orrs	r3, r2
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea88:	801a      	strh	r2, [r3, #0]
 800ea8a:	e3df      	b.n	800f24c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ea8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	78db      	ldrb	r3, [r3, #3]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	f040 8218 	bne.w	800eece <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ea9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	785b      	ldrb	r3, [r3, #1]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f040 809d 	bne.w	800ebea <USB_EPStartXfer+0x1080>
 800eab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eacc:	b29b      	uxth	r3, r3
 800eace:	461a      	mov	r2, r3
 800ead0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ead4:	4413      	add	r3, r2
 800ead6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	00da      	lsls	r2, r3, #3
 800eae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eaec:	4413      	add	r3, r2
 800eaee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eaf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eaf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb02:	b29a      	uxth	r2, r3
 800eb04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb08:	801a      	strh	r2, [r3, #0]
 800eb0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	691b      	ldr	r3, [r3, #16]
 800eb16:	2b3e      	cmp	r3, #62	@ 0x3e
 800eb18:	d92b      	bls.n	800eb72 <USB_EPStartXfer+0x1008>
 800eb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	095b      	lsrs	r3, r3, #5
 800eb28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	f003 031f 	and.w	r3, r3, #31
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d104      	bne.n	800eb4a <USB_EPStartXfer+0xfe0>
 800eb40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb44:	3b01      	subs	r3, #1
 800eb46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb4e:	881b      	ldrh	r3, [r3, #0]
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	029b      	lsls	r3, r3, #10
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb6e:	801a      	strh	r2, [r3, #0]
 800eb70:	e070      	b.n	800ec54 <USB_EPStartXfer+0x10ea>
 800eb72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10c      	bne.n	800eb9c <USB_EPStartXfer+0x1032>
 800eb82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb98:	801a      	strh	r2, [r3, #0]
 800eb9a:	e05b      	b.n	800ec54 <USB_EPStartXfer+0x10ea>
 800eb9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	691b      	ldr	r3, [r3, #16]
 800eba8:	085b      	lsrs	r3, r3, #1
 800ebaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	f003 0301 	and.w	r3, r3, #1
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d004      	beq.n	800ebcc <USB_EPStartXfer+0x1062>
 800ebc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ebcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	029b      	lsls	r3, r3, #10
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebe6:	801a      	strh	r2, [r3, #0]
 800ebe8:	e034      	b.n	800ec54 <USB_EPStartXfer+0x10ea>
 800ebea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	785b      	ldrb	r3, [r3, #1]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d12c      	bne.n	800ec54 <USB_EPStartXfer+0x10ea>
 800ebfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	461a      	mov	r2, r3
 800ec1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec1e:	4413      	add	r3, r2
 800ec20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	00da      	lsls	r2, r3, #3
 800ec32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec36:	4413      	add	r3, r2
 800ec38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ec3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	691b      	ldr	r3, [r3, #16]
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec52:	801a      	strh	r2, [r3, #0]
 800ec54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ec62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	785b      	ldrb	r3, [r3, #1]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f040 809d 	bne.w	800edae <USB_EPStartXfer+0x1244>
 800ec74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	461a      	mov	r2, r3
 800ec94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec98:	4413      	add	r3, r2
 800ec9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	00da      	lsls	r2, r3, #3
 800ecac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ecb0:	4413      	add	r3, r2
 800ecb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ecb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eccc:	801a      	strh	r2, [r3, #0]
 800ecce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	691b      	ldr	r3, [r3, #16]
 800ecda:	2b3e      	cmp	r3, #62	@ 0x3e
 800ecdc:	d92b      	bls.n	800ed36 <USB_EPStartXfer+0x11cc>
 800ecde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ece2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	691b      	ldr	r3, [r3, #16]
 800ecea:	095b      	lsrs	r3, r3, #5
 800ecec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ecf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	691b      	ldr	r3, [r3, #16]
 800ecfc:	f003 031f 	and.w	r3, r3, #31
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d104      	bne.n	800ed0e <USB_EPStartXfer+0x11a4>
 800ed04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	029b      	lsls	r3, r3, #10
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	4313      	orrs	r3, r2
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed32:	801a      	strh	r2, [r3, #0]
 800ed34:	e069      	b.n	800ee0a <USB_EPStartXfer+0x12a0>
 800ed36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	691b      	ldr	r3, [r3, #16]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d10c      	bne.n	800ed60 <USB_EPStartXfer+0x11f6>
 800ed46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed5c:	801a      	strh	r2, [r3, #0]
 800ed5e:	e054      	b.n	800ee0a <USB_EPStartXfer+0x12a0>
 800ed60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	085b      	lsrs	r3, r3, #1
 800ed6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d004      	beq.n	800ed90 <USB_EPStartXfer+0x1226>
 800ed86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	029b      	lsls	r3, r3, #10
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	4313      	orrs	r3, r2
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800edaa:	801a      	strh	r2, [r3, #0]
 800edac:	e02d      	b.n	800ee0a <USB_EPStartXfer+0x12a0>
 800edae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	785b      	ldrb	r3, [r3, #1]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d125      	bne.n	800ee0a <USB_EPStartXfer+0x12a0>
 800edbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edcc:	b29b      	uxth	r3, r3
 800edce:	461a      	mov	r2, r3
 800edd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800edd4:	4413      	add	r3, r2
 800edd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800edda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	00da      	lsls	r2, r3, #3
 800ede8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800edec:	4413      	add	r3, r2
 800edee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800edf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800edf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ee08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ee0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f000 8218 	beq.w	800f24c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ee1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	4413      	add	r3, r2
 800ee36:	881b      	ldrh	r3, [r3, #0]
 800ee38:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d005      	beq.n	800ee54 <USB_EPStartXfer+0x12ea>
 800ee48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10d      	bne.n	800ee70 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f040 81f5 	bne.w	800f24c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ee62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ee66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	f040 81ee 	bne.w	800f24c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ee70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee78:	681a      	ldr	r2, [r3, #0]
 800ee7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4413      	add	r3, r2
 800ee8a:	881b      	ldrh	r3, [r3, #0]
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee96:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ee9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	441a      	add	r2, r3
 800eeb4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800eeb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eec4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	8013      	strh	r3, [r2, #0]
 800eecc:	e1be      	b.n	800f24c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800eece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eed2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	78db      	ldrb	r3, [r3, #3]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	f040 81b4 	bne.w	800f248 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800eee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	699a      	ldr	r2, [r3, #24]
 800eeec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d917      	bls.n	800ef2c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800eefc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ef0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	699a      	ldr	r2, [r3, #24]
 800ef18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef1c:	1ad2      	subs	r2, r2, r3
 800ef1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	619a      	str	r2, [r3, #24]
 800ef2a:	e00e      	b.n	800ef4a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ef2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ef3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2200      	movs	r2, #0
 800ef48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ef4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	785b      	ldrb	r3, [r3, #1]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f040 8085 	bne.w	800f066 <USB_EPStartXfer+0x14fc>
 800ef5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ef6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ef80:	4413      	add	r3, r2
 800ef82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ef86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	00da      	lsls	r2, r3, #3
 800ef94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ef98:	4413      	add	r3, r2
 800ef9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ef9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800efa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efa6:	881b      	ldrh	r3, [r3, #0]
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efae:	b29a      	uxth	r2, r3
 800efb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efb4:	801a      	strh	r2, [r3, #0]
 800efb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efba:	2b3e      	cmp	r3, #62	@ 0x3e
 800efbc:	d923      	bls.n	800f006 <USB_EPStartXfer+0x149c>
 800efbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efc2:	095b      	lsrs	r3, r3, #5
 800efc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efcc:	f003 031f 	and.w	r3, r3, #31
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d104      	bne.n	800efde <USB_EPStartXfer+0x1474>
 800efd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efd8:	3b01      	subs	r3, #1
 800efda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efe2:	881b      	ldrh	r3, [r3, #0]
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efea:	b29b      	uxth	r3, r3
 800efec:	029b      	lsls	r3, r3, #10
 800efee:	b29b      	uxth	r3, r3
 800eff0:	4313      	orrs	r3, r2
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800effc:	b29a      	uxth	r2, r3
 800effe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f002:	801a      	strh	r2, [r3, #0]
 800f004:	e060      	b.n	800f0c8 <USB_EPStartXfer+0x155e>
 800f006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d10c      	bne.n	800f028 <USB_EPStartXfer+0x14be>
 800f00e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f012:	881b      	ldrh	r3, [r3, #0]
 800f014:	b29b      	uxth	r3, r3
 800f016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f01a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f01e:	b29a      	uxth	r2, r3
 800f020:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f024:	801a      	strh	r2, [r3, #0]
 800f026:	e04f      	b.n	800f0c8 <USB_EPStartXfer+0x155e>
 800f028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f02c:	085b      	lsrs	r3, r3, #1
 800f02e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d004      	beq.n	800f048 <USB_EPStartXfer+0x14de>
 800f03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f042:	3301      	adds	r3, #1
 800f044:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	b29a      	uxth	r2, r3
 800f050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f054:	b29b      	uxth	r3, r3
 800f056:	029b      	lsls	r3, r3, #10
 800f058:	b29b      	uxth	r3, r3
 800f05a:	4313      	orrs	r3, r2
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f062:	801a      	strh	r2, [r3, #0]
 800f064:	e030      	b.n	800f0c8 <USB_EPStartXfer+0x155e>
 800f066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	785b      	ldrb	r3, [r3, #1]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d128      	bne.n	800f0c8 <USB_EPStartXfer+0x155e>
 800f076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f07a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f088:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f092:	b29b      	uxth	r3, r3
 800f094:	461a      	mov	r2, r3
 800f096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f09a:	4413      	add	r3, r2
 800f09c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	00da      	lsls	r2, r3, #3
 800f0ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0b2:	4413      	add	r3, r2
 800f0b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f0b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f0c6:	801a      	strh	r2, [r3, #0]
 800f0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	785b      	ldrb	r3, [r3, #1]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f040 8085 	bne.w	800f1f2 <USB_EPStartXfer+0x1688>
 800f0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f104:	b29b      	uxth	r3, r3
 800f106:	461a      	mov	r2, r3
 800f108:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f10c:	4413      	add	r3, r2
 800f10e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	00da      	lsls	r2, r3, #3
 800f120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f124:	4413      	add	r3, r2
 800f126:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f12a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f12e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f132:	881b      	ldrh	r3, [r3, #0]
 800f134:	b29b      	uxth	r3, r3
 800f136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f13a:	b29a      	uxth	r2, r3
 800f13c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f140:	801a      	strh	r2, [r3, #0]
 800f142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f146:	2b3e      	cmp	r3, #62	@ 0x3e
 800f148:	d923      	bls.n	800f192 <USB_EPStartXfer+0x1628>
 800f14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f14e:	095b      	lsrs	r3, r3, #5
 800f150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f158:	f003 031f 	and.w	r3, r3, #31
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d104      	bne.n	800f16a <USB_EPStartXfer+0x1600>
 800f160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f164:	3b01      	subs	r3, #1
 800f166:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f16a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f16e:	881b      	ldrh	r3, [r3, #0]
 800f170:	b29a      	uxth	r2, r3
 800f172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f176:	b29b      	uxth	r3, r3
 800f178:	029b      	lsls	r3, r3, #10
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	4313      	orrs	r3, r2
 800f17e:	b29b      	uxth	r3, r3
 800f180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f188:	b29a      	uxth	r2, r3
 800f18a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f18e:	801a      	strh	r2, [r3, #0]
 800f190:	e05c      	b.n	800f24c <USB_EPStartXfer+0x16e2>
 800f192:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10c      	bne.n	800f1b4 <USB_EPStartXfer+0x164a>
 800f19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f19e:	881b      	ldrh	r3, [r3, #0]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1aa:	b29a      	uxth	r2, r3
 800f1ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1b0:	801a      	strh	r2, [r3, #0]
 800f1b2:	e04b      	b.n	800f24c <USB_EPStartXfer+0x16e2>
 800f1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1b8:	085b      	lsrs	r3, r3, #1
 800f1ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1c2:	f003 0301 	and.w	r3, r3, #1
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d004      	beq.n	800f1d4 <USB_EPStartXfer+0x166a>
 800f1ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f1d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	029b      	lsls	r3, r3, #10
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f1ee:	801a      	strh	r2, [r3, #0]
 800f1f0:	e02c      	b.n	800f24c <USB_EPStartXfer+0x16e2>
 800f1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	785b      	ldrb	r3, [r3, #1]
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d124      	bne.n	800f24c <USB_EPStartXfer+0x16e2>
 800f202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f210:	b29b      	uxth	r3, r3
 800f212:	461a      	mov	r2, r3
 800f214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f218:	4413      	add	r3, r2
 800f21a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	00da      	lsls	r2, r3, #3
 800f22c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f230:	4413      	add	r3, r2
 800f232:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f23e:	b29a      	uxth	r2, r3
 800f240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f244:	801a      	strh	r2, [r3, #0]
 800f246:	e001      	b.n	800f24c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f248:	2301      	movs	r3, #1
 800f24a:	e03a      	b.n	800f2c2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f250:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f25a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	b29b      	uxth	r3, r3
 800f26a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f26e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f272:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f276:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f27a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f27e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f282:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f286:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f28a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f29c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	441a      	add	r2, r3
 800f2a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	785b      	ldrb	r3, [r3, #1]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d020      	beq.n	800f320 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	009b      	lsls	r3, r3, #2
 800f2e6:	4413      	add	r3, r2
 800f2e8:	881b      	ldrh	r3, [r3, #0]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f2f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f2f4:	81bb      	strh	r3, [r7, #12]
 800f2f6:	89bb      	ldrh	r3, [r7, #12]
 800f2f8:	f083 0310 	eor.w	r3, r3, #16
 800f2fc:	81bb      	strh	r3, [r7, #12]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	441a      	add	r2, r3
 800f308:	89bb      	ldrh	r3, [r7, #12]
 800f30a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f30e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	8013      	strh	r3, [r2, #0]
 800f31e:	e01f      	b.n	800f360 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	781b      	ldrb	r3, [r3, #0]
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	4413      	add	r3, r2
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f336:	81fb      	strh	r3, [r7, #14]
 800f338:	89fb      	ldrh	r3, [r7, #14]
 800f33a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f33e:	81fb      	strh	r3, [r7, #14]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	441a      	add	r2, r3
 800f34a:	89fb      	ldrh	r3, [r7, #14]
 800f34c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3714      	adds	r7, #20
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f36e:	b480      	push	{r7}
 800f370:	b087      	sub	sp, #28
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	7b1b      	ldrb	r3, [r3, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	f040 809d 	bne.w	800f4bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d04c      	beq.n	800f424 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f38a:	687a      	ldr	r2, [r7, #4]
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	781b      	ldrb	r3, [r3, #0]
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	4413      	add	r3, r2
 800f394:	881b      	ldrh	r3, [r3, #0]
 800f396:	823b      	strh	r3, [r7, #16]
 800f398:	8a3b      	ldrh	r3, [r7, #16]
 800f39a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d01b      	beq.n	800f3da <USB_EPClearStall+0x6c>
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	4413      	add	r3, r2
 800f3ac:	881b      	ldrh	r3, [r3, #0]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3b8:	81fb      	strh	r3, [r7, #14]
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	441a      	add	r2, r3
 800f3c4:	89fb      	ldrh	r3, [r7, #14]
 800f3c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f3d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	78db      	ldrb	r3, [r3, #3]
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	d06c      	beq.n	800f4bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	009b      	lsls	r3, r3, #2
 800f3ea:	4413      	add	r3, r2
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f3f8:	81bb      	strh	r3, [r7, #12]
 800f3fa:	89bb      	ldrh	r3, [r7, #12]
 800f3fc:	f083 0320 	eor.w	r3, r3, #32
 800f400:	81bb      	strh	r3, [r7, #12]
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	441a      	add	r2, r3
 800f40c:	89bb      	ldrh	r3, [r7, #12]
 800f40e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f41e:	b29b      	uxth	r3, r3
 800f420:	8013      	strh	r3, [r2, #0]
 800f422:	e04b      	b.n	800f4bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	881b      	ldrh	r3, [r3, #0]
 800f430:	82fb      	strh	r3, [r7, #22]
 800f432:	8afb      	ldrh	r3, [r7, #22]
 800f434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d01b      	beq.n	800f474 <USB_EPClearStall+0x106>
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	009b      	lsls	r3, r3, #2
 800f444:	4413      	add	r3, r2
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	b29b      	uxth	r3, r3
 800f44a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f452:	82bb      	strh	r3, [r7, #20]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	441a      	add	r2, r3
 800f45e:	8abb      	ldrh	r3, [r7, #20]
 800f460:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f464:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f46c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f470:	b29b      	uxth	r3, r3
 800f472:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	009b      	lsls	r3, r3, #2
 800f47c:	4413      	add	r3, r2
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	b29b      	uxth	r3, r3
 800f482:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f48a:	827b      	strh	r3, [r7, #18]
 800f48c:	8a7b      	ldrh	r3, [r7, #18]
 800f48e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f492:	827b      	strh	r3, [r7, #18]
 800f494:	8a7b      	ldrh	r3, [r7, #18]
 800f496:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f49a:	827b      	strh	r3, [r7, #18]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	009b      	lsls	r3, r3, #2
 800f4a4:	441a      	add	r2, r3
 800f4a6:	8a7b      	ldrh	r3, [r7, #18]
 800f4a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f4ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f4b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f4b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4b8:	b29b      	uxth	r3, r3
 800f4ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	371c      	adds	r7, #28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f4d6:	78fb      	ldrb	r3, [r7, #3]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d103      	bne.n	800f4e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2280      	movs	r2, #128	@ 0x80
 800f4e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b083      	sub	sp, #12
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f500:	b29b      	uxth	r3, r3
 800f502:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f506:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	370c      	adds	r7, #12
 800f518:	46bd      	mov	sp, r7
 800f51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51e:	4770      	bx	lr

0800f520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f520:	b480      	push	{r7}
 800f522:	b085      	sub	sp, #20
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f52e:	b29b      	uxth	r3, r3
 800f530:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f532:	68fb      	ldr	r3, [r7, #12]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f540:	b480      	push	{r7}
 800f542:	b08b      	sub	sp, #44	@ 0x2c
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	4611      	mov	r1, r2
 800f54c:	461a      	mov	r2, r3
 800f54e:	460b      	mov	r3, r1
 800f550:	80fb      	strh	r3, [r7, #6]
 800f552:	4613      	mov	r3, r2
 800f554:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f556:	88bb      	ldrh	r3, [r7, #4]
 800f558:	3301      	adds	r3, #1
 800f55a:	085b      	lsrs	r3, r3, #1
 800f55c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f566:	88fa      	ldrh	r2, [r7, #6]
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	4413      	add	r3, r2
 800f56c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f570:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	627b      	str	r3, [r7, #36]	@ 0x24
 800f576:	e01b      	b.n	800f5b0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	3301      	adds	r3, #1
 800f582:	781b      	ldrb	r3, [r3, #0]
 800f584:	021b      	lsls	r3, r3, #8
 800f586:	b21a      	sxth	r2, r3
 800f588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	b21b      	sxth	r3, r3
 800f590:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f592:	6a3b      	ldr	r3, [r7, #32]
 800f594:	8a7a      	ldrh	r2, [r7, #18]
 800f596:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f598:	6a3b      	ldr	r3, [r7, #32]
 800f59a:	3302      	adds	r3, #2
 800f59c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1e0      	bne.n	800f578 <USB_WritePMA+0x38>
  }
}
 800f5b6:	bf00      	nop
 800f5b8:	bf00      	nop
 800f5ba:	372c      	adds	r7, #44	@ 0x2c
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b08b      	sub	sp, #44	@ 0x2c
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	80fb      	strh	r3, [r7, #6]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f5da:	88bb      	ldrh	r3, [r7, #4]
 800f5dc:	085b      	lsrs	r3, r3, #1
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f5ea:	88fa      	ldrh	r2, [r7, #6]
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5fa:	e018      	b.n	800f62e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f5fc:	6a3b      	ldr	r3, [r7, #32]
 800f5fe:	881b      	ldrh	r3, [r3, #0]
 800f600:	b29b      	uxth	r3, r3
 800f602:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	3302      	adds	r3, #2
 800f608:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	b2da      	uxtb	r2, r3
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	3301      	adds	r3, #1
 800f616:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	0a1b      	lsrs	r3, r3, #8
 800f61c:	b2da      	uxtb	r2, r3
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f622:	69fb      	ldr	r3, [r7, #28]
 800f624:	3301      	adds	r3, #1
 800f626:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f62a:	3b01      	subs	r3, #1
 800f62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1e3      	bne.n	800f5fc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f634:	88bb      	ldrh	r3, [r7, #4]
 800f636:	f003 0301 	and.w	r3, r3, #1
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d007      	beq.n	800f650 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f640:	6a3b      	ldr	r3, [r7, #32]
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	b29b      	uxth	r3, r3
 800f646:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f648:	693b      	ldr	r3, [r7, #16]
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	701a      	strb	r2, [r3, #0]
  }
}
 800f650:	bf00      	nop
 800f652:	372c      	adds	r7, #44	@ 0x2c
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	460b      	mov	r3, r1
 800f666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f668:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f66c:	f002 fc0e 	bl	8011e8c <USBD_static_malloc>
 800f670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	32b0      	adds	r2, #176	@ 0xb0
 800f682:	2100      	movs	r1, #0
 800f684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f688:	2302      	movs	r3, #2
 800f68a:	e0d4      	b.n	800f836 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f68c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f690:	2100      	movs	r1, #0
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f003 f9bb 	bl	8012a0e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	32b0      	adds	r2, #176	@ 0xb0
 800f6a2:	68f9      	ldr	r1, [r7, #12]
 800f6a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	32b0      	adds	r2, #176	@ 0xb0
 800f6b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7c1b      	ldrb	r3, [r3, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d138      	bne.n	800f736 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f6c4:	4b5e      	ldr	r3, [pc, #376]	@ (800f840 <USBD_CDC_Init+0x1e4>)
 800f6c6:	7819      	ldrb	r1, [r3, #0]
 800f6c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6cc:	2202      	movs	r2, #2
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f002 fa83 	bl	8011bda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f6d4:	4b5a      	ldr	r3, [pc, #360]	@ (800f840 <USBD_CDC_Init+0x1e4>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f003 020f 	and.w	r2, r3, #15
 800f6dc:	6879      	ldr	r1, [r7, #4]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	3324      	adds	r3, #36	@ 0x24
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f6ee:	4b55      	ldr	r3, [pc, #340]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f6f0:	7819      	ldrb	r1, [r3, #0]
 800f6f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f002 fa6e 	bl	8011bda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f6fe:	4b51      	ldr	r3, [pc, #324]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	f003 020f 	and.w	r2, r3, #15
 800f706:	6879      	ldr	r1, [r7, #4]
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f716:	2201      	movs	r2, #1
 800f718:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f71a:	4b4b      	ldr	r3, [pc, #300]	@ (800f848 <USBD_CDC_Init+0x1ec>)
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	f003 020f 	and.w	r2, r3, #15
 800f722:	6879      	ldr	r1, [r7, #4]
 800f724:	4613      	mov	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	440b      	add	r3, r1
 800f72e:	3326      	adds	r3, #38	@ 0x26
 800f730:	2210      	movs	r2, #16
 800f732:	801a      	strh	r2, [r3, #0]
 800f734:	e035      	b.n	800f7a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f736:	4b42      	ldr	r3, [pc, #264]	@ (800f840 <USBD_CDC_Init+0x1e4>)
 800f738:	7819      	ldrb	r1, [r3, #0]
 800f73a:	2340      	movs	r3, #64	@ 0x40
 800f73c:	2202      	movs	r2, #2
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f002 fa4b 	bl	8011bda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f744:	4b3e      	ldr	r3, [pc, #248]	@ (800f840 <USBD_CDC_Init+0x1e4>)
 800f746:	781b      	ldrb	r3, [r3, #0]
 800f748:	f003 020f 	and.w	r2, r3, #15
 800f74c:	6879      	ldr	r1, [r7, #4]
 800f74e:	4613      	mov	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4413      	add	r3, r2
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	440b      	add	r3, r1
 800f758:	3324      	adds	r3, #36	@ 0x24
 800f75a:	2201      	movs	r2, #1
 800f75c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f75e:	4b39      	ldr	r3, [pc, #228]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f760:	7819      	ldrb	r1, [r3, #0]
 800f762:	2340      	movs	r3, #64	@ 0x40
 800f764:	2202      	movs	r2, #2
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f002 fa37 	bl	8011bda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f76c:	4b35      	ldr	r3, [pc, #212]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	f003 020f 	and.w	r2, r3, #15
 800f774:	6879      	ldr	r1, [r7, #4]
 800f776:	4613      	mov	r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4413      	add	r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	440b      	add	r3, r1
 800f780:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f784:	2201      	movs	r2, #1
 800f786:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f788:	4b2f      	ldr	r3, [pc, #188]	@ (800f848 <USBD_CDC_Init+0x1ec>)
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	f003 020f 	and.w	r2, r3, #15
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	4613      	mov	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	4413      	add	r3, r2
 800f798:	009b      	lsls	r3, r3, #2
 800f79a:	440b      	add	r3, r1
 800f79c:	3326      	adds	r3, #38	@ 0x26
 800f79e:	2210      	movs	r2, #16
 800f7a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f7a2:	4b29      	ldr	r3, [pc, #164]	@ (800f848 <USBD_CDC_Init+0x1ec>)
 800f7a4:	7819      	ldrb	r1, [r3, #0]
 800f7a6:	2308      	movs	r3, #8
 800f7a8:	2203      	movs	r2, #3
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f002 fa15 	bl	8011bda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f7b0:	4b25      	ldr	r3, [pc, #148]	@ (800f848 <USBD_CDC_Init+0x1ec>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 020f 	and.w	r2, r3, #15
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3324      	adds	r3, #36	@ 0x24
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	33b0      	adds	r3, #176	@ 0xb0
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f800:	2302      	movs	r3, #2
 800f802:	e018      	b.n	800f836 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	7c1b      	ldrb	r3, [r3, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d10a      	bne.n	800f822 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f80c:	4b0d      	ldr	r3, [pc, #52]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f80e:	7819      	ldrb	r1, [r3, #0]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f002 facc 	bl	8011db8 <USBD_LL_PrepareReceive>
 800f820:	e008      	b.n	800f834 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f822:	4b08      	ldr	r3, [pc, #32]	@ (800f844 <USBD_CDC_Init+0x1e8>)
 800f824:	7819      	ldrb	r1, [r3, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f82c:	2340      	movs	r3, #64	@ 0x40
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f002 fac2 	bl	8011db8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	200000bb 	.word	0x200000bb
 800f844:	200000bc 	.word	0x200000bc
 800f848:	200000bd 	.word	0x200000bd

0800f84c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	460b      	mov	r3, r1
 800f856:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f858:	4b3a      	ldr	r3, [pc, #232]	@ (800f944 <USBD_CDC_DeInit+0xf8>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	4619      	mov	r1, r3
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f002 f9e1 	bl	8011c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f864:	4b37      	ldr	r3, [pc, #220]	@ (800f944 <USBD_CDC_DeInit+0xf8>)
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	f003 020f 	and.w	r2, r3, #15
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	4613      	mov	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	4413      	add	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	440b      	add	r3, r1
 800f878:	3324      	adds	r3, #36	@ 0x24
 800f87a:	2200      	movs	r2, #0
 800f87c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f87e:	4b32      	ldr	r3, [pc, #200]	@ (800f948 <USBD_CDC_DeInit+0xfc>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	4619      	mov	r1, r3
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f002 f9ce 	bl	8011c26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f88a:	4b2f      	ldr	r3, [pc, #188]	@ (800f948 <USBD_CDC_DeInit+0xfc>)
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	f003 020f 	and.w	r2, r3, #15
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	4613      	mov	r3, r2
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	4413      	add	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	440b      	add	r3, r1
 800f89e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f8a6:	4b29      	ldr	r3, [pc, #164]	@ (800f94c <USBD_CDC_DeInit+0x100>)
 800f8a8:	781b      	ldrb	r3, [r3, #0]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f002 f9ba 	bl	8011c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f8b2:	4b26      	ldr	r3, [pc, #152]	@ (800f94c <USBD_CDC_DeInit+0x100>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f003 020f 	and.w	r2, r3, #15
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	3324      	adds	r3, #36	@ 0x24
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f8cc:	4b1f      	ldr	r3, [pc, #124]	@ (800f94c <USBD_CDC_DeInit+0x100>)
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	f003 020f 	and.w	r2, r3, #15
 800f8d4:	6879      	ldr	r1, [r7, #4]
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	440b      	add	r3, r1
 800f8e0:	3326      	adds	r3, #38	@ 0x26
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	32b0      	adds	r2, #176	@ 0xb0
 800f8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d01f      	beq.n	800f938 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	33b0      	adds	r3, #176	@ 0xb0
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	32b0      	adds	r2, #176	@ 0xb0
 800f916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91a:	4618      	mov	r0, r3
 800f91c:	f002 fac4 	bl	8011ea8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	32b0      	adds	r2, #176	@ 0xb0
 800f92a:	2100      	movs	r1, #0
 800f92c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2200      	movs	r2, #0
 800f934:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	200000bb 	.word	0x200000bb
 800f948:	200000bc 	.word	0x200000bc
 800f94c:	200000bd 	.word	0x200000bd

0800f950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	32b0      	adds	r2, #176	@ 0xb0
 800f964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f968:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f96a:	2300      	movs	r3, #0
 800f96c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f96e:	2300      	movs	r3, #0
 800f970:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f972:	2300      	movs	r3, #0
 800f974:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d101      	bne.n	800f980 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f97c:	2303      	movs	r3, #3
 800f97e:	e0bf      	b.n	800fb00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d050      	beq.n	800fa2e <USBD_CDC_Setup+0xde>
 800f98c:	2b20      	cmp	r3, #32
 800f98e:	f040 80af 	bne.w	800faf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	88db      	ldrh	r3, [r3, #6]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d03a      	beq.n	800fa10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	b25b      	sxtb	r3, r3
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	da1b      	bge.n	800f9dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	33b0      	adds	r3, #176	@ 0xb0
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	689b      	ldr	r3, [r3, #8]
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f9ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	88d2      	ldrh	r2, [r2, #6]
 800f9c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	88db      	ldrh	r3, [r3, #6]
 800f9c6:	2b07      	cmp	r3, #7
 800f9c8:	bf28      	it	cs
 800f9ca:	2307      	movcs	r3, #7
 800f9cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	89fa      	ldrh	r2, [r7, #14]
 800f9d2:	4619      	mov	r1, r3
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f001 fd07 	bl	80113e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f9da:	e090      	b.n	800fafe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	785a      	ldrb	r2, [r3, #1]
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	88db      	ldrh	r3, [r3, #6]
 800f9ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800f9ec:	d803      	bhi.n	800f9f6 <USBD_CDC_Setup+0xa6>
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	88db      	ldrh	r3, [r3, #6]
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	e000      	b.n	800f9f8 <USBD_CDC_Setup+0xa8>
 800f9f6:	2240      	movs	r2, #64	@ 0x40
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f9fe:	6939      	ldr	r1, [r7, #16]
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fa06:	461a      	mov	r2, r3
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f001 fd19 	bl	8011440 <USBD_CtlPrepareRx>
      break;
 800fa0e:	e076      	b.n	800fafe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	33b0      	adds	r3, #176	@ 0xb0
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	7850      	ldrb	r0, [r2, #1]
 800fa26:	2200      	movs	r2, #0
 800fa28:	6839      	ldr	r1, [r7, #0]
 800fa2a:	4798      	blx	r3
      break;
 800fa2c:	e067      	b.n	800fafe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	785b      	ldrb	r3, [r3, #1]
 800fa32:	2b0b      	cmp	r3, #11
 800fa34:	d851      	bhi.n	800fada <USBD_CDC_Setup+0x18a>
 800fa36:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <USBD_CDC_Setup+0xec>)
 800fa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3c:	0800fa6d 	.word	0x0800fa6d
 800fa40:	0800fae9 	.word	0x0800fae9
 800fa44:	0800fadb 	.word	0x0800fadb
 800fa48:	0800fadb 	.word	0x0800fadb
 800fa4c:	0800fadb 	.word	0x0800fadb
 800fa50:	0800fadb 	.word	0x0800fadb
 800fa54:	0800fadb 	.word	0x0800fadb
 800fa58:	0800fadb 	.word	0x0800fadb
 800fa5c:	0800fadb 	.word	0x0800fadb
 800fa60:	0800fadb 	.word	0x0800fadb
 800fa64:	0800fa97 	.word	0x0800fa97
 800fa68:	0800fac1 	.word	0x0800fac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d107      	bne.n	800fa88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fa78:	f107 030a 	add.w	r3, r7, #10
 800fa7c:	2202      	movs	r2, #2
 800fa7e:	4619      	mov	r1, r3
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f001 fcb1 	bl	80113e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa86:	e032      	b.n	800faee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f001 fc2f 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800fa90:	2303      	movs	r3, #3
 800fa92:	75fb      	strb	r3, [r7, #23]
          break;
 800fa94:	e02b      	b.n	800faee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	d107      	bne.n	800fab2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800faa2:	f107 030d 	add.w	r3, r7, #13
 800faa6:	2201      	movs	r2, #1
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f001 fc9c 	bl	80113e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fab0:	e01d      	b.n	800faee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fab2:	6839      	ldr	r1, [r7, #0]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f001 fc1a 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800faba:	2303      	movs	r3, #3
 800fabc:	75fb      	strb	r3, [r7, #23]
          break;
 800fabe:	e016      	b.n	800faee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fac6:	b2db      	uxtb	r3, r3
 800fac8:	2b03      	cmp	r3, #3
 800faca:	d00f      	beq.n	800faec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800facc:	6839      	ldr	r1, [r7, #0]
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f001 fc0d 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800fad4:	2303      	movs	r3, #3
 800fad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fad8:	e008      	b.n	800faec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f001 fc06 	bl	80112ee <USBD_CtlError>
          ret = USBD_FAIL;
 800fae2:	2303      	movs	r3, #3
 800fae4:	75fb      	strb	r3, [r7, #23]
          break;
 800fae6:	e002      	b.n	800faee <USBD_CDC_Setup+0x19e>
          break;
 800fae8:	bf00      	nop
 800faea:	e008      	b.n	800fafe <USBD_CDC_Setup+0x1ae>
          break;
 800faec:	bf00      	nop
      }
      break;
 800faee:	e006      	b.n	800fafe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f001 fbfb 	bl	80112ee <USBD_CtlError>
      ret = USBD_FAIL;
 800faf8:	2303      	movs	r3, #3
 800fafa:	75fb      	strb	r3, [r7, #23]
      break;
 800fafc:	bf00      	nop
  }

  return (uint8_t)ret;
 800fafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3718      	adds	r7, #24
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	460b      	mov	r3, r1
 800fb12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	32b0      	adds	r2, #176	@ 0xb0
 800fb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d101      	bne.n	800fb32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fb2e:	2303      	movs	r3, #3
 800fb30:	e065      	b.n	800fbfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	32b0      	adds	r2, #176	@ 0xb0
 800fb3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fb42:	78fb      	ldrb	r3, [r7, #3]
 800fb44:	f003 020f 	and.w	r2, r3, #15
 800fb48:	6879      	ldr	r1, [r7, #4]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	4413      	add	r3, r2
 800fb50:	009b      	lsls	r3, r3, #2
 800fb52:	440b      	add	r3, r1
 800fb54:	3318      	adds	r3, #24
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02f      	beq.n	800fbbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fb5c:	78fb      	ldrb	r3, [r7, #3]
 800fb5e:	f003 020f 	and.w	r2, r3, #15
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	4613      	mov	r3, r2
 800fb66:	009b      	lsls	r3, r3, #2
 800fb68:	4413      	add	r3, r2
 800fb6a:	009b      	lsls	r3, r3, #2
 800fb6c:	440b      	add	r3, r1
 800fb6e:	3318      	adds	r3, #24
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	78fb      	ldrb	r3, [r7, #3]
 800fb74:	f003 010f 	and.w	r1, r3, #15
 800fb78:	68f8      	ldr	r0, [r7, #12]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	440b      	add	r3, r1
 800fb80:	00db      	lsls	r3, r3, #3
 800fb82:	4403      	add	r3, r0
 800fb84:	3320      	adds	r3, #32
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	fbb2 f1f3 	udiv	r1, r2, r3
 800fb8c:	fb01 f303 	mul.w	r3, r1, r3
 800fb90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d112      	bne.n	800fbbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fb96:	78fb      	ldrb	r3, [r7, #3]
 800fb98:	f003 020f 	and.w	r2, r3, #15
 800fb9c:	6879      	ldr	r1, [r7, #4]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	440b      	add	r3, r1
 800fba8:	3318      	adds	r3, #24
 800fbaa:	2200      	movs	r2, #0
 800fbac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fbae:	78f9      	ldrb	r1, [r7, #3]
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f002 f8de 	bl	8011d76 <USBD_LL_Transmit>
 800fbba:	e01f      	b.n	800fbfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	33b0      	adds	r3, #176	@ 0xb0
 800fbce:	009b      	lsls	r3, r3, #2
 800fbd0:	4413      	add	r3, r2
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d010      	beq.n	800fbfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	33b0      	adds	r3, #176	@ 0xb0
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	4413      	add	r3, r2
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fbf8:	78fa      	ldrb	r2, [r7, #3]
 800fbfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	6078      	str	r0, [r7, #4]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	32b0      	adds	r2, #176	@ 0xb0
 800fc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	32b0      	adds	r2, #176	@ 0xb0
 800fc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d101      	bne.n	800fc38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fc34:	2303      	movs	r3, #3
 800fc36:	e01a      	b.n	800fc6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fc38:	78fb      	ldrb	r3, [r7, #3]
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f002 f8dc 	bl	8011dfa <USBD_LL_GetRxDataSize>
 800fc42:	4602      	mov	r2, r0
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	33b0      	adds	r3, #176	@ 0xb0
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	4413      	add	r3, r2
 800fc58:	685b      	ldr	r3, [r3, #4]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b084      	sub	sp, #16
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	32b0      	adds	r2, #176	@ 0xb0
 800fc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d101      	bne.n	800fc98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fc94:	2303      	movs	r3, #3
 800fc96:	e024      	b.n	800fce2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc9e:	687a      	ldr	r2, [r7, #4]
 800fca0:	33b0      	adds	r3, #176	@ 0xb0
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4413      	add	r3, r2
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d019      	beq.n	800fce0 <USBD_CDC_EP0_RxReady+0x6a>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fcb2:	2bff      	cmp	r3, #255	@ 0xff
 800fcb4:	d014      	beq.n	800fce0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	33b0      	adds	r3, #176	@ 0xb0
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fcce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fcd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	22ff      	movs	r2, #255	@ 0xff
 800fcdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
	...

0800fcec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fcf4:	2182      	movs	r1, #130	@ 0x82
 800fcf6:	4818      	ldr	r0, [pc, #96]	@ (800fd58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fcf8:	f000 fc99 	bl	801062e <USBD_GetEpDesc>
 800fcfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fcfe:	2101      	movs	r1, #1
 800fd00:	4815      	ldr	r0, [pc, #84]	@ (800fd58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd02:	f000 fc94 	bl	801062e <USBD_GetEpDesc>
 800fd06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd08:	2181      	movs	r1, #129	@ 0x81
 800fd0a:	4813      	ldr	r0, [pc, #76]	@ (800fd58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd0c:	f000 fc8f 	bl	801062e <USBD_GetEpDesc>
 800fd10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd12:	697b      	ldr	r3, [r7, #20]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d002      	beq.n	800fd1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	2210      	movs	r2, #16
 800fd1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d006      	beq.n	800fd32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	2200      	movs	r2, #0
 800fd28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd2c:	711a      	strb	r2, [r3, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d006      	beq.n	800fd46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd40:	711a      	strb	r2, [r3, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2243      	movs	r2, #67	@ 0x43
 800fd4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd4c:	4b02      	ldr	r3, [pc, #8]	@ (800fd58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3718      	adds	r7, #24
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	20000078 	.word	0x20000078

0800fd5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd64:	2182      	movs	r1, #130	@ 0x82
 800fd66:	4818      	ldr	r0, [pc, #96]	@ (800fdc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fd68:	f000 fc61 	bl	801062e <USBD_GetEpDesc>
 800fd6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd6e:	2101      	movs	r1, #1
 800fd70:	4815      	ldr	r0, [pc, #84]	@ (800fdc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fd72:	f000 fc5c 	bl	801062e <USBD_GetEpDesc>
 800fd76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd78:	2181      	movs	r1, #129	@ 0x81
 800fd7a:	4813      	ldr	r0, [pc, #76]	@ (800fdc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fd7c:	f000 fc57 	bl	801062e <USBD_GetEpDesc>
 800fd80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d002      	beq.n	800fd8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	2210      	movs	r2, #16
 800fd8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d006      	beq.n	800fda2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	2200      	movs	r2, #0
 800fd98:	711a      	strb	r2, [r3, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f042 0202 	orr.w	r2, r2, #2
 800fda0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d006      	beq.n	800fdb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	711a      	strb	r2, [r3, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	f042 0202 	orr.w	r2, r2, #2
 800fdb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2243      	movs	r2, #67	@ 0x43
 800fdba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fdbc:	4b02      	ldr	r3, [pc, #8]	@ (800fdc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3718      	adds	r7, #24
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
 800fdc6:	bf00      	nop
 800fdc8:	20000078 	.word	0x20000078

0800fdcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b086      	sub	sp, #24
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fdd4:	2182      	movs	r1, #130	@ 0x82
 800fdd6:	4818      	ldr	r0, [pc, #96]	@ (800fe38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fdd8:	f000 fc29 	bl	801062e <USBD_GetEpDesc>
 800fddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fdde:	2101      	movs	r1, #1
 800fde0:	4815      	ldr	r0, [pc, #84]	@ (800fe38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fde2:	f000 fc24 	bl	801062e <USBD_GetEpDesc>
 800fde6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fde8:	2181      	movs	r1, #129	@ 0x81
 800fdea:	4813      	ldr	r0, [pc, #76]	@ (800fe38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fdec:	f000 fc1f 	bl	801062e <USBD_GetEpDesc>
 800fdf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d002      	beq.n	800fdfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2210      	movs	r2, #16
 800fdfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d006      	beq.n	800fe12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe0c:	711a      	strb	r2, [r3, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d006      	beq.n	800fe26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe20:	711a      	strb	r2, [r3, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2243      	movs	r2, #67	@ 0x43
 800fe2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fe2c:	4b02      	ldr	r3, [pc, #8]	@ (800fe38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3718      	adds	r7, #24
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}
 800fe36:	bf00      	nop
 800fe38:	20000078 	.word	0x20000078

0800fe3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b083      	sub	sp, #12
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	220a      	movs	r2, #10
 800fe48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fe4a:	4b03      	ldr	r3, [pc, #12]	@ (800fe58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	20000034 	.word	0x20000034

0800fe5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	e009      	b.n	800fe84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	33b0      	adds	r3, #176	@ 0xb0
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b087      	sub	sp, #28
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	60f8      	str	r0, [r7, #12]
 800fe98:	60b9      	str	r1, [r7, #8]
 800fe9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	32b0      	adds	r2, #176	@ 0xb0
 800fea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d101      	bne.n	800feb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800feb2:	2303      	movs	r3, #3
 800feb4:	e008      	b.n	800fec8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	687a      	ldr	r2, [r7, #4]
 800fec2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fec6:	2300      	movs	r3, #0
}
 800fec8:	4618      	mov	r0, r3
 800feca:	371c      	adds	r7, #28
 800fecc:	46bd      	mov	sp, r7
 800fece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed2:	4770      	bx	lr

0800fed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fed4:	b480      	push	{r7}
 800fed6:	b085      	sub	sp, #20
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	32b0      	adds	r2, #176	@ 0xb0
 800fee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d101      	bne.n	800fef8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fef4:	2303      	movs	r3, #3
 800fef6:	e004      	b.n	800ff02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ff00:	2300      	movs	r3, #0
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0c:	4770      	bx	lr
	...

0800ff10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	32b0      	adds	r2, #176	@ 0xb0
 800ff22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	32b0      	adds	r2, #176	@ 0xb0
 800ff32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ff3a:	2303      	movs	r3, #3
 800ff3c:	e018      	b.n	800ff70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7c1b      	ldrb	r3, [r3, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d10a      	bne.n	800ff5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff46:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <USBD_CDC_ReceivePacket+0x68>)
 800ff48:	7819      	ldrb	r1, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 ff2f 	bl	8011db8 <USBD_LL_PrepareReceive>
 800ff5a:	e008      	b.n	800ff6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff5c:	4b06      	ldr	r3, [pc, #24]	@ (800ff78 <USBD_CDC_ReceivePacket+0x68>)
 800ff5e:	7819      	ldrb	r1, [r3, #0]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff66:	2340      	movs	r3, #64	@ 0x40
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f001 ff25 	bl	8011db8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	200000bc 	.word	0x200000bc

0800ff7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	4613      	mov	r3, r2
 800ff88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10a      	bne.n	800ffa6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800ff90:	4817      	ldr	r0, [pc, #92]	@ (800fff0 <USBD_Init+0x74>)
 800ff92:	f002 fcdf 	bl	8012954 <iprintf>
 800ff96:	4817      	ldr	r0, [pc, #92]	@ (800fff4 <USBD_Init+0x78>)
 800ff98:	f002 fcdc 	bl	8012954 <iprintf>
 800ff9c:	200a      	movs	r0, #10
 800ff9e:	f002 fceb 	bl	8012978 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ffa2:	2303      	movs	r3, #3
 800ffa4:	e01f      	b.n	800ffe6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	79fa      	ldrb	r2, [r7, #7]
 800ffd8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f001 fd80 	bl	8011ae0 <USBD_LL_Init>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ffe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	08014908 	.word	0x08014908
 800fff4:	08014910 	.word	0x08014910

0800fff8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010002:	2300      	movs	r3, #0
 8010004:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d10a      	bne.n	8010022 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 801000c:	481a      	ldr	r0, [pc, #104]	@ (8010078 <USBD_RegisterClass+0x80>)
 801000e:	f002 fca1 	bl	8012954 <iprintf>
 8010012:	481a      	ldr	r0, [pc, #104]	@ (801007c <USBD_RegisterClass+0x84>)
 8010014:	f002 fc9e 	bl	8012954 <iprintf>
 8010018:	200a      	movs	r0, #10
 801001a:	f002 fcad 	bl	8012978 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801001e:	2303      	movs	r3, #3
 8010020:	e025      	b.n	801006e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	683a      	ldr	r2, [r7, #0]
 8010026:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	32ae      	adds	r2, #174	@ 0xae
 8010034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00f      	beq.n	801005e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	32ae      	adds	r2, #174	@ 0xae
 8010048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801004c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004e:	f107 020e 	add.w	r2, r7, #14
 8010052:	4610      	mov	r0, r2
 8010054:	4798      	blx	r3
 8010056:	4602      	mov	r2, r0
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	08014908 	.word	0x08014908
 801007c:	08014928 	.word	0x08014928

08010080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f001 fd8b 	bl	8011ba4 <USBD_LL_Start>
 801008e:	4603      	mov	r3, r0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b084      	sub	sp, #16
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	460b      	mov	r3, r1
 80100b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d009      	beq.n	80100dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	78fa      	ldrb	r2, [r7, #3]
 80100d2:	4611      	mov	r1, r2
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	4798      	blx	r3
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	460b      	mov	r3, r1
 80100f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	78fa      	ldrb	r2, [r7, #3]
 8010100:	4611      	mov	r1, r2
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	4798      	blx	r3
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801010c:	2303      	movs	r3, #3
 801010e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010110:	7bfb      	ldrb	r3, [r7, #15]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b084      	sub	sp, #16
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801012a:	6839      	ldr	r1, [r7, #0]
 801012c:	4618      	mov	r0, r3
 801012e:	f001 f8a4 	bl	801127a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010140:	461a      	mov	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801014e:	f003 031f 	and.w	r3, r3, #31
 8010152:	2b02      	cmp	r3, #2
 8010154:	d01a      	beq.n	801018c <USBD_LL_SetupStage+0x72>
 8010156:	2b02      	cmp	r3, #2
 8010158:	d822      	bhi.n	80101a0 <USBD_LL_SetupStage+0x86>
 801015a:	2b00      	cmp	r3, #0
 801015c:	d002      	beq.n	8010164 <USBD_LL_SetupStage+0x4a>
 801015e:	2b01      	cmp	r3, #1
 8010160:	d00a      	beq.n	8010178 <USBD_LL_SetupStage+0x5e>
 8010162:	e01d      	b.n	80101a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fad1 	bl	8010714 <USBD_StdDevReq>
 8010172:	4603      	mov	r3, r0
 8010174:	73fb      	strb	r3, [r7, #15]
      break;
 8010176:	e020      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801017e:	4619      	mov	r1, r3
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 fb39 	bl	80107f8 <USBD_StdItfReq>
 8010186:	4603      	mov	r3, r0
 8010188:	73fb      	strb	r3, [r7, #15]
      break;
 801018a:	e016      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010192:	4619      	mov	r1, r3
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fb9b 	bl	80108d0 <USBD_StdEPReq>
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]
      break;
 801019e:	e00c      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80101a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f001 fd58 	bl	8011c64 <USBD_LL_StallEP>
 80101b4:	4603      	mov	r3, r0
 80101b6:	73fb      	strb	r3, [r7, #15]
      break;
 80101b8:	bf00      	nop
  }

  return ret;
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	460b      	mov	r3, r1
 80101ce:	607a      	str	r2, [r7, #4]
 80101d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80101d2:	2300      	movs	r3, #0
 80101d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80101d6:	7afb      	ldrb	r3, [r7, #11]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d16e      	bne.n	80102ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80101e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80101ea:	2b03      	cmp	r3, #3
 80101ec:	f040 8098 	bne.w	8010320 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	689a      	ldr	r2, [r3, #8]
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d913      	bls.n	8010224 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	1ad2      	subs	r2, r2, r3
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	4293      	cmp	r3, r2
 8010214:	bf28      	it	cs
 8010216:	4613      	movcs	r3, r2
 8010218:	461a      	mov	r2, r3
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f001 f92c 	bl	801147a <USBD_CtlContinueRx>
 8010222:	e07d      	b.n	8010320 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801022a:	f003 031f 	and.w	r3, r3, #31
 801022e:	2b02      	cmp	r3, #2
 8010230:	d014      	beq.n	801025c <USBD_LL_DataOutStage+0x98>
 8010232:	2b02      	cmp	r3, #2
 8010234:	d81d      	bhi.n	8010272 <USBD_LL_DataOutStage+0xae>
 8010236:	2b00      	cmp	r3, #0
 8010238:	d002      	beq.n	8010240 <USBD_LL_DataOutStage+0x7c>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d003      	beq.n	8010246 <USBD_LL_DataOutStage+0x82>
 801023e:	e018      	b.n	8010272 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010240:	2300      	movs	r3, #0
 8010242:	75bb      	strb	r3, [r7, #22]
            break;
 8010244:	e018      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801024c:	b2db      	uxtb	r3, r3
 801024e:	4619      	mov	r1, r3
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 f9d2 	bl	80105fa <USBD_CoreFindIF>
 8010256:	4603      	mov	r3, r0
 8010258:	75bb      	strb	r3, [r7, #22]
            break;
 801025a:	e00d      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010262:	b2db      	uxtb	r3, r3
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f000 f9d4 	bl	8010614 <USBD_CoreFindEP>
 801026c:	4603      	mov	r3, r0
 801026e:	75bb      	strb	r3, [r7, #22]
            break;
 8010270:	e002      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010272:	2300      	movs	r3, #0
 8010274:	75bb      	strb	r3, [r7, #22]
            break;
 8010276:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010278:	7dbb      	ldrb	r3, [r7, #22]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d119      	bne.n	80102b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010284:	b2db      	uxtb	r3, r3
 8010286:	2b03      	cmp	r3, #3
 8010288:	d113      	bne.n	80102b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801028a:	7dba      	ldrb	r2, [r7, #22]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	32ae      	adds	r2, #174	@ 0xae
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	691b      	ldr	r3, [r3, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00b      	beq.n	80102b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801029a:	7dba      	ldrb	r2, [r7, #22]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80102a2:	7dba      	ldrb	r2, [r7, #22]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	32ae      	adds	r2, #174	@ 0xae
 80102a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ac:	691b      	ldr	r3, [r3, #16]
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f001 f8f2 	bl	801149c <USBD_CtlSendStatus>
 80102b8:	e032      	b.n	8010320 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80102ba:	7afb      	ldrb	r3, [r7, #11]
 80102bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 f9a5 	bl	8010614 <USBD_CoreFindEP>
 80102ca:	4603      	mov	r3, r0
 80102cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102ce:	7dbb      	ldrb	r3, [r7, #22]
 80102d0:	2bff      	cmp	r3, #255	@ 0xff
 80102d2:	d025      	beq.n	8010320 <USBD_LL_DataOutStage+0x15c>
 80102d4:	7dbb      	ldrb	r3, [r7, #22]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d122      	bne.n	8010320 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b03      	cmp	r3, #3
 80102e4:	d117      	bne.n	8010316 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80102e6:	7dba      	ldrb	r2, [r7, #22]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	32ae      	adds	r2, #174	@ 0xae
 80102ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00f      	beq.n	8010316 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80102f6:	7dba      	ldrb	r2, [r7, #22]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80102fe:	7dba      	ldrb	r2, [r7, #22]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	32ae      	adds	r2, #174	@ 0xae
 8010304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	7afa      	ldrb	r2, [r7, #11]
 801030c:	4611      	mov	r1, r2
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	4798      	blx	r3
 8010312:	4603      	mov	r3, r0
 8010314:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010316:	7dfb      	ldrb	r3, [r7, #23]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d001      	beq.n	8010320 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	e000      	b.n	8010322 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3718      	adds	r7, #24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	460b      	mov	r3, r1
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010338:	7afb      	ldrb	r3, [r7, #11]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d16f      	bne.n	801041e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3314      	adds	r3, #20
 8010342:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801034a:	2b02      	cmp	r3, #2
 801034c:	d15a      	bne.n	8010404 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d914      	bls.n	8010384 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	689a      	ldr	r2, [r3, #8]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	1ad2      	subs	r2, r2, r3
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	461a      	mov	r2, r3
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f001 f854 	bl	801141e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010376:	2300      	movs	r3, #0
 8010378:	2200      	movs	r2, #0
 801037a:	2100      	movs	r1, #0
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f001 fd1b 	bl	8011db8 <USBD_LL_PrepareReceive>
 8010382:	e03f      	b.n	8010404 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	68da      	ldr	r2, [r3, #12]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	429a      	cmp	r2, r3
 801038e:	d11c      	bne.n	80103ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	685a      	ldr	r2, [r3, #4]
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010398:	429a      	cmp	r2, r3
 801039a:	d316      	bcc.n	80103ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d20f      	bcs.n	80103ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80103aa:	2200      	movs	r2, #0
 80103ac:	2100      	movs	r1, #0
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f001 f835 	bl	801141e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103bc:	2300      	movs	r3, #0
 80103be:	2200      	movs	r2, #0
 80103c0:	2100      	movs	r1, #0
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f001 fcf8 	bl	8011db8 <USBD_LL_PrepareReceive>
 80103c8:	e01c      	b.n	8010404 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d10f      	bne.n	80103f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d009      	beq.n	80103f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f6:	2180      	movs	r1, #128	@ 0x80
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f001 fc33 	bl	8011c64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f001 f85f 	bl	80114c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d03a      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff fe42 	bl	8010098 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801041c:	e032      	b.n	8010484 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801041e:	7afb      	ldrb	r3, [r7, #11]
 8010420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4619      	mov	r1, r3
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f000 f8f3 	bl	8010614 <USBD_CoreFindEP>
 801042e:	4603      	mov	r3, r0
 8010430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010432:	7dfb      	ldrb	r3, [r7, #23]
 8010434:	2bff      	cmp	r3, #255	@ 0xff
 8010436:	d025      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
 8010438:	7dfb      	ldrb	r3, [r7, #23]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d122      	bne.n	8010484 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b03      	cmp	r3, #3
 8010448:	d11c      	bne.n	8010484 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801044a:	7dfa      	ldrb	r2, [r7, #23]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	32ae      	adds	r2, #174	@ 0xae
 8010450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d014      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801045a:	7dfa      	ldrb	r2, [r7, #23]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010462:	7dfa      	ldrb	r2, [r7, #23]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	32ae      	adds	r2, #174	@ 0xae
 8010468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801046c:	695b      	ldr	r3, [r3, #20]
 801046e:	7afa      	ldrb	r2, [r7, #11]
 8010470:	4611      	mov	r1, r2
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	4798      	blx	r3
 8010476:	4603      	mov	r3, r0
 8010478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801047a:	7dbb      	ldrb	r3, [r7, #22]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010480:	7dbb      	ldrb	r3, [r7, #22]
 8010482:	e000      	b.n	8010486 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b084      	sub	sp, #16
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010496:	2300      	movs	r3, #0
 8010498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d014      	beq.n	80104f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00e      	beq.n	80104f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	6852      	ldr	r2, [r2, #4]
 80104e2:	b2d2      	uxtb	r2, r2
 80104e4:	4611      	mov	r1, r2
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	4798      	blx	r3
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d001      	beq.n	80104f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80104f0:	2303      	movs	r3, #3
 80104f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80104f4:	2340      	movs	r3, #64	@ 0x40
 80104f6:	2200      	movs	r2, #0
 80104f8:	2100      	movs	r1, #0
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f001 fb6d 	bl	8011bda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2240      	movs	r2, #64	@ 0x40
 801050c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010510:	2340      	movs	r3, #64	@ 0x40
 8010512:	2200      	movs	r2, #0
 8010514:	2180      	movs	r1, #128	@ 0x80
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f001 fb5f 	bl	8011bda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2240      	movs	r2, #64	@ 0x40
 8010526:	621a      	str	r2, [r3, #32]

  return ret;
 8010528:	7bfb      	ldrb	r3, [r7, #15]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010532:	b480      	push	{r7}
 8010534:	b083      	sub	sp, #12
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	78fa      	ldrb	r2, [r7, #3]
 8010542:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010552:	b480      	push	{r7}
 8010554:	b083      	sub	sp, #12
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b04      	cmp	r3, #4
 8010564:	d006      	beq.n	8010574 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801056c:	b2da      	uxtb	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2204      	movs	r2, #4
 8010578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	370c      	adds	r7, #12
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr

0801058a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801058a:	b480      	push	{r7}
 801058c:	b083      	sub	sp, #12
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b04      	cmp	r3, #4
 801059c:	d106      	bne.n	80105ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d110      	bne.n	80105f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00b      	beq.n	80105f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105de:	69db      	ldr	r3, [r3, #28]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105ea:	69db      	ldr	r3, [r3, #28]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b083      	sub	sp, #12
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	460b      	mov	r3, r1
 8010604:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010606:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010608:	4618      	mov	r0, r3
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010620:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010622:	4618      	mov	r0, r3
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b086      	sub	sp, #24
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	460b      	mov	r3, r1
 8010638:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	885b      	ldrh	r3, [r3, #2]
 801064a:	b29b      	uxth	r3, r3
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	7812      	ldrb	r2, [r2, #0]
 8010650:	4293      	cmp	r3, r2
 8010652:	d91f      	bls.n	8010694 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801065a:	e013      	b.n	8010684 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801065c:	f107 030a 	add.w	r3, r7, #10
 8010660:	4619      	mov	r1, r3
 8010662:	6978      	ldr	r0, [r7, #20]
 8010664:	f000 f81b 	bl	801069e <USBD_GetNextDesc>
 8010668:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	785b      	ldrb	r3, [r3, #1]
 801066e:	2b05      	cmp	r3, #5
 8010670:	d108      	bne.n	8010684 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	789b      	ldrb	r3, [r3, #2]
 801067a:	78fa      	ldrb	r2, [r7, #3]
 801067c:	429a      	cmp	r2, r3
 801067e:	d008      	beq.n	8010692 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010680:	2300      	movs	r3, #0
 8010682:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	885b      	ldrh	r3, [r3, #2]
 8010688:	b29a      	uxth	r2, r3
 801068a:	897b      	ldrh	r3, [r7, #10]
 801068c:	429a      	cmp	r2, r3
 801068e:	d8e5      	bhi.n	801065c <USBD_GetEpDesc+0x2e>
 8010690:	e000      	b.n	8010694 <USBD_GetEpDesc+0x66>
          break;
 8010692:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010694:	693b      	ldr	r3, [r7, #16]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3718      	adds	r7, #24
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801069e:	b480      	push	{r7}
 80106a0:	b085      	sub	sp, #20
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	4413      	add	r3, r2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4413      	add	r3, r2
 80106c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80106c8:	68fb      	ldr	r3, [r7, #12]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b087      	sub	sp, #28
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	3301      	adds	r3, #1
 80106ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80106f4:	8a3b      	ldrh	r3, [r7, #16]
 80106f6:	021b      	lsls	r3, r3, #8
 80106f8:	b21a      	sxth	r2, r3
 80106fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80106fe:	4313      	orrs	r3, r2
 8010700:	b21b      	sxth	r3, r3
 8010702:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010704:	89fb      	ldrh	r3, [r7, #14]
}
 8010706:	4618      	mov	r0, r3
 8010708:	371c      	adds	r7, #28
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
	...

08010714 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801072a:	2b40      	cmp	r3, #64	@ 0x40
 801072c:	d005      	beq.n	801073a <USBD_StdDevReq+0x26>
 801072e:	2b40      	cmp	r3, #64	@ 0x40
 8010730:	d857      	bhi.n	80107e2 <USBD_StdDevReq+0xce>
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00f      	beq.n	8010756 <USBD_StdDevReq+0x42>
 8010736:	2b20      	cmp	r3, #32
 8010738:	d153      	bne.n	80107e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	32ae      	adds	r2, #174	@ 0xae
 8010744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	4798      	blx	r3
 8010750:	4603      	mov	r3, r0
 8010752:	73fb      	strb	r3, [r7, #15]
      break;
 8010754:	e04a      	b.n	80107ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	785b      	ldrb	r3, [r3, #1]
 801075a:	2b09      	cmp	r3, #9
 801075c:	d83b      	bhi.n	80107d6 <USBD_StdDevReq+0xc2>
 801075e:	a201      	add	r2, pc, #4	@ (adr r2, 8010764 <USBD_StdDevReq+0x50>)
 8010760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010764:	080107b9 	.word	0x080107b9
 8010768:	080107cd 	.word	0x080107cd
 801076c:	080107d7 	.word	0x080107d7
 8010770:	080107c3 	.word	0x080107c3
 8010774:	080107d7 	.word	0x080107d7
 8010778:	08010797 	.word	0x08010797
 801077c:	0801078d 	.word	0x0801078d
 8010780:	080107d7 	.word	0x080107d7
 8010784:	080107af 	.word	0x080107af
 8010788:	080107a1 	.word	0x080107a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801078c:	6839      	ldr	r1, [r7, #0]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fa3c 	bl	8010c0c <USBD_GetDescriptor>
          break;
 8010794:	e024      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010796:	6839      	ldr	r1, [r7, #0]
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fbcb 	bl	8010f34 <USBD_SetAddress>
          break;
 801079e:	e01f      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80107a0:	6839      	ldr	r1, [r7, #0]
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 fc0a 	bl	8010fbc <USBD_SetConfig>
 80107a8:	4603      	mov	r3, r0
 80107aa:	73fb      	strb	r3, [r7, #15]
          break;
 80107ac:	e018      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 fcad 	bl	8011110 <USBD_GetConfig>
          break;
 80107b6:	e013      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80107b8:	6839      	ldr	r1, [r7, #0]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fcde 	bl	801117c <USBD_GetStatus>
          break;
 80107c0:	e00e      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80107c2:	6839      	ldr	r1, [r7, #0]
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fd0d 	bl	80111e4 <USBD_SetFeature>
          break;
 80107ca:	e009      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 fd31 	bl	8011236 <USBD_ClrFeature>
          break;
 80107d4:	e004      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fd88 	bl	80112ee <USBD_CtlError>
          break;
 80107de:	bf00      	nop
      }
      break;
 80107e0:	e004      	b.n	80107ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80107e2:	6839      	ldr	r1, [r7, #0]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 fd82 	bl	80112ee <USBD_CtlError>
      break;
 80107ea:	bf00      	nop
  }

  return ret;
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop

080107f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801080e:	2b40      	cmp	r3, #64	@ 0x40
 8010810:	d005      	beq.n	801081e <USBD_StdItfReq+0x26>
 8010812:	2b40      	cmp	r3, #64	@ 0x40
 8010814:	d852      	bhi.n	80108bc <USBD_StdItfReq+0xc4>
 8010816:	2b00      	cmp	r3, #0
 8010818:	d001      	beq.n	801081e <USBD_StdItfReq+0x26>
 801081a:	2b20      	cmp	r3, #32
 801081c:	d14e      	bne.n	80108bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010824:	b2db      	uxtb	r3, r3
 8010826:	3b01      	subs	r3, #1
 8010828:	2b02      	cmp	r3, #2
 801082a:	d840      	bhi.n	80108ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	889b      	ldrh	r3, [r3, #4]
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b01      	cmp	r3, #1
 8010834:	d836      	bhi.n	80108a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	889b      	ldrh	r3, [r3, #4]
 801083a:	b2db      	uxtb	r3, r3
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff fedb 	bl	80105fa <USBD_CoreFindIF>
 8010844:	4603      	mov	r3, r0
 8010846:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010848:	7bbb      	ldrb	r3, [r7, #14]
 801084a:	2bff      	cmp	r3, #255	@ 0xff
 801084c:	d01d      	beq.n	801088a <USBD_StdItfReq+0x92>
 801084e:	7bbb      	ldrb	r3, [r7, #14]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d11a      	bne.n	801088a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010854:	7bba      	ldrb	r2, [r7, #14]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	32ae      	adds	r2, #174	@ 0xae
 801085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00f      	beq.n	8010884 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010864:	7bba      	ldrb	r2, [r7, #14]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801086c:	7bba      	ldrb	r2, [r7, #14]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	32ae      	adds	r2, #174	@ 0xae
 8010872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	6839      	ldr	r1, [r7, #0]
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	4798      	blx	r3
 801087e:	4603      	mov	r3, r0
 8010880:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010882:	e004      	b.n	801088e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010884:	2303      	movs	r3, #3
 8010886:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010888:	e001      	b.n	801088e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801088a:	2303      	movs	r3, #3
 801088c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	88db      	ldrh	r3, [r3, #6]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d110      	bne.n	80108b8 <USBD_StdItfReq+0xc0>
 8010896:	7bfb      	ldrb	r3, [r7, #15]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10d      	bne.n	80108b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fdfd 	bl	801149c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80108a2:	e009      	b.n	80108b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fd21 	bl	80112ee <USBD_CtlError>
          break;
 80108ac:	e004      	b.n	80108b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fd1c 	bl	80112ee <USBD_CtlError>
          break;
 80108b6:	e000      	b.n	80108ba <USBD_StdItfReq+0xc2>
          break;
 80108b8:	bf00      	nop
      }
      break;
 80108ba:	e004      	b.n	80108c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80108bc:	6839      	ldr	r1, [r7, #0]
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 fd15 	bl	80112ee <USBD_CtlError>
      break;
 80108c4:	bf00      	nop
  }

  return ret;
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80108da:	2300      	movs	r3, #0
 80108dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	889b      	ldrh	r3, [r3, #4]
 80108e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80108ec:	2b40      	cmp	r3, #64	@ 0x40
 80108ee:	d007      	beq.n	8010900 <USBD_StdEPReq+0x30>
 80108f0:	2b40      	cmp	r3, #64	@ 0x40
 80108f2:	f200 817f 	bhi.w	8010bf4 <USBD_StdEPReq+0x324>
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d02a      	beq.n	8010950 <USBD_StdEPReq+0x80>
 80108fa:	2b20      	cmp	r3, #32
 80108fc:	f040 817a 	bne.w	8010bf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010900:	7bbb      	ldrb	r3, [r7, #14]
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe85 	bl	8010614 <USBD_CoreFindEP>
 801090a:	4603      	mov	r3, r0
 801090c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801090e:	7b7b      	ldrb	r3, [r7, #13]
 8010910:	2bff      	cmp	r3, #255	@ 0xff
 8010912:	f000 8174 	beq.w	8010bfe <USBD_StdEPReq+0x32e>
 8010916:	7b7b      	ldrb	r3, [r7, #13]
 8010918:	2b00      	cmp	r3, #0
 801091a:	f040 8170 	bne.w	8010bfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801091e:	7b7a      	ldrb	r2, [r7, #13]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010926:	7b7a      	ldrb	r2, [r7, #13]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	32ae      	adds	r2, #174	@ 0xae
 801092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 8163 	beq.w	8010bfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010938:	7b7a      	ldrb	r2, [r7, #13]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	32ae      	adds	r2, #174	@ 0xae
 801093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	6839      	ldr	r1, [r7, #0]
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	4798      	blx	r3
 801094a:	4603      	mov	r3, r0
 801094c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801094e:	e156      	b.n	8010bfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	785b      	ldrb	r3, [r3, #1]
 8010954:	2b03      	cmp	r3, #3
 8010956:	d008      	beq.n	801096a <USBD_StdEPReq+0x9a>
 8010958:	2b03      	cmp	r3, #3
 801095a:	f300 8145 	bgt.w	8010be8 <USBD_StdEPReq+0x318>
 801095e:	2b00      	cmp	r3, #0
 8010960:	f000 809b 	beq.w	8010a9a <USBD_StdEPReq+0x1ca>
 8010964:	2b01      	cmp	r3, #1
 8010966:	d03c      	beq.n	80109e2 <USBD_StdEPReq+0x112>
 8010968:	e13e      	b.n	8010be8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010970:	b2db      	uxtb	r3, r3
 8010972:	2b02      	cmp	r3, #2
 8010974:	d002      	beq.n	801097c <USBD_StdEPReq+0xac>
 8010976:	2b03      	cmp	r3, #3
 8010978:	d016      	beq.n	80109a8 <USBD_StdEPReq+0xd8>
 801097a:	e02c      	b.n	80109d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801097c:	7bbb      	ldrb	r3, [r7, #14]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00d      	beq.n	801099e <USBD_StdEPReq+0xce>
 8010982:	7bbb      	ldrb	r3, [r7, #14]
 8010984:	2b80      	cmp	r3, #128	@ 0x80
 8010986:	d00a      	beq.n	801099e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010988:	7bbb      	ldrb	r3, [r7, #14]
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f001 f969 	bl	8011c64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010992:	2180      	movs	r1, #128	@ 0x80
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f001 f965 	bl	8011c64 <USBD_LL_StallEP>
 801099a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801099c:	e020      	b.n	80109e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 fca4 	bl	80112ee <USBD_CtlError>
              break;
 80109a6:	e01b      	b.n	80109e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10e      	bne.n	80109ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80109b0:	7bbb      	ldrb	r3, [r7, #14]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00b      	beq.n	80109ce <USBD_StdEPReq+0xfe>
 80109b6:	7bbb      	ldrb	r3, [r7, #14]
 80109b8:	2b80      	cmp	r3, #128	@ 0x80
 80109ba:	d008      	beq.n	80109ce <USBD_StdEPReq+0xfe>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	88db      	ldrh	r3, [r3, #6]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d104      	bne.n	80109ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80109c4:	7bbb      	ldrb	r3, [r7, #14]
 80109c6:	4619      	mov	r1, r3
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 f94b 	bl	8011c64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 fd64 	bl	801149c <USBD_CtlSendStatus>

              break;
 80109d4:	e004      	b.n	80109e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fc88 	bl	80112ee <USBD_CtlError>
              break;
 80109de:	bf00      	nop
          }
          break;
 80109e0:	e107      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d002      	beq.n	80109f4 <USBD_StdEPReq+0x124>
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d016      	beq.n	8010a20 <USBD_StdEPReq+0x150>
 80109f2:	e04b      	b.n	8010a8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109f4:	7bbb      	ldrb	r3, [r7, #14]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00d      	beq.n	8010a16 <USBD_StdEPReq+0x146>
 80109fa:	7bbb      	ldrb	r3, [r7, #14]
 80109fc:	2b80      	cmp	r3, #128	@ 0x80
 80109fe:	d00a      	beq.n	8010a16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a00:	7bbb      	ldrb	r3, [r7, #14]
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f001 f92d 	bl	8011c64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a0a:	2180      	movs	r1, #128	@ 0x80
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f001 f929 	bl	8011c64 <USBD_LL_StallEP>
 8010a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a14:	e040      	b.n	8010a98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 fc68 	bl	80112ee <USBD_CtlError>
              break;
 8010a1e:	e03b      	b.n	8010a98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	885b      	ldrh	r3, [r3, #2]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d136      	bne.n	8010a96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a28:	7bbb      	ldrb	r3, [r7, #14]
 8010a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d004      	beq.n	8010a3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a32:	7bbb      	ldrb	r3, [r7, #14]
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f001 f933 	bl	8011ca2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 fd2d 	bl	801149c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010a42:	7bbb      	ldrb	r3, [r7, #14]
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7ff fde4 	bl	8010614 <USBD_CoreFindEP>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a50:	7b7b      	ldrb	r3, [r7, #13]
 8010a52:	2bff      	cmp	r3, #255	@ 0xff
 8010a54:	d01f      	beq.n	8010a96 <USBD_StdEPReq+0x1c6>
 8010a56:	7b7b      	ldrb	r3, [r7, #13]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d11c      	bne.n	8010a96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010a5c:	7b7a      	ldrb	r2, [r7, #13]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010a64:	7b7a      	ldrb	r2, [r7, #13]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	32ae      	adds	r2, #174	@ 0xae
 8010a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d010      	beq.n	8010a96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010a74:	7b7a      	ldrb	r2, [r7, #13]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	32ae      	adds	r2, #174	@ 0xae
 8010a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	6839      	ldr	r1, [r7, #0]
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010a8a:	e004      	b.n	8010a96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fc2d 	bl	80112ee <USBD_CtlError>
              break;
 8010a94:	e000      	b.n	8010a98 <USBD_StdEPReq+0x1c8>
              break;
 8010a96:	bf00      	nop
          }
          break;
 8010a98:	e0ab      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d002      	beq.n	8010aac <USBD_StdEPReq+0x1dc>
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d032      	beq.n	8010b10 <USBD_StdEPReq+0x240>
 8010aaa:	e097      	b.n	8010bdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010aac:	7bbb      	ldrb	r3, [r7, #14]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d007      	beq.n	8010ac2 <USBD_StdEPReq+0x1f2>
 8010ab2:	7bbb      	ldrb	r3, [r7, #14]
 8010ab4:	2b80      	cmp	r3, #128	@ 0x80
 8010ab6:	d004      	beq.n	8010ac2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 fc17 	bl	80112ee <USBD_CtlError>
                break;
 8010ac0:	e091      	b.n	8010be6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	da0b      	bge.n	8010ae2 <USBD_StdEPReq+0x212>
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	3310      	adds	r3, #16
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	4413      	add	r3, r2
 8010ade:	3304      	adds	r3, #4
 8010ae0:	e00b      	b.n	8010afa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ae2:	7bbb      	ldrb	r3, [r7, #14]
 8010ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	4413      	add	r3, r2
 8010af8:	3304      	adds	r3, #4
 8010afa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	2202      	movs	r2, #2
 8010b06:	4619      	mov	r1, r3
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fc6d 	bl	80113e8 <USBD_CtlSendData>
              break;
 8010b0e:	e06a      	b.n	8010be6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da11      	bge.n	8010b3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b18:	7bbb      	ldrb	r3, [r7, #14]
 8010b1a:	f003 020f 	and.w	r2, r3, #15
 8010b1e:	6879      	ldr	r1, [r7, #4]
 8010b20:	4613      	mov	r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	440b      	add	r3, r1
 8010b2a:	3324      	adds	r3, #36	@ 0x24
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d117      	bne.n	8010b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 fbda 	bl	80112ee <USBD_CtlError>
                  break;
 8010b3a:	e054      	b.n	8010be6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	f003 020f 	and.w	r2, r3, #15
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	4613      	mov	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	440b      	add	r3, r1
 8010b4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d104      	bne.n	8010b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fbc7 	bl	80112ee <USBD_CtlError>
                  break;
 8010b60:	e041      	b.n	8010be6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da0b      	bge.n	8010b82 <USBD_StdEPReq+0x2b2>
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b70:	4613      	mov	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	3310      	adds	r3, #16
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	3304      	adds	r3, #4
 8010b80:	e00b      	b.n	8010b9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
 8010b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	4413      	add	r3, r2
 8010b98:	3304      	adds	r3, #4
 8010b9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <USBD_StdEPReq+0x2d8>
 8010ba2:	7bbb      	ldrb	r3, [r7, #14]
 8010ba4:	2b80      	cmp	r3, #128	@ 0x80
 8010ba6:	d103      	bne.n	8010bb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2200      	movs	r2, #0
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	e00e      	b.n	8010bce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f001 f893 	bl	8011ce0 <USBD_LL_IsStallEP>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d003      	beq.n	8010bc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e002      	b.n	8010bce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fc07 	bl	80113e8 <USBD_CtlSendData>
              break;
 8010bda:	e004      	b.n	8010be6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fb85 	bl	80112ee <USBD_CtlError>
              break;
 8010be4:	bf00      	nop
          }
          break;
 8010be6:	e004      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fb7f 	bl	80112ee <USBD_CtlError>
          break;
 8010bf0:	bf00      	nop
      }
      break;
 8010bf2:	e005      	b.n	8010c00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fb79 	bl	80112ee <USBD_CtlError>
      break;
 8010bfc:	e000      	b.n	8010c00 <USBD_StdEPReq+0x330>
      break;
 8010bfe:	bf00      	nop
  }

  return ret;
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c16:	2300      	movs	r3, #0
 8010c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	885b      	ldrh	r3, [r3, #2]
 8010c26:	0a1b      	lsrs	r3, r3, #8
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	2b0e      	cmp	r3, #14
 8010c2e:	f200 8152 	bhi.w	8010ed6 <USBD_GetDescriptor+0x2ca>
 8010c32:	a201      	add	r2, pc, #4	@ (adr r2, 8010c38 <USBD_GetDescriptor+0x2c>)
 8010c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c38:	08010ca9 	.word	0x08010ca9
 8010c3c:	08010cc1 	.word	0x08010cc1
 8010c40:	08010d01 	.word	0x08010d01
 8010c44:	08010ed7 	.word	0x08010ed7
 8010c48:	08010ed7 	.word	0x08010ed7
 8010c4c:	08010e77 	.word	0x08010e77
 8010c50:	08010ea3 	.word	0x08010ea3
 8010c54:	08010ed7 	.word	0x08010ed7
 8010c58:	08010ed7 	.word	0x08010ed7
 8010c5c:	08010ed7 	.word	0x08010ed7
 8010c60:	08010ed7 	.word	0x08010ed7
 8010c64:	08010ed7 	.word	0x08010ed7
 8010c68:	08010ed7 	.word	0x08010ed7
 8010c6c:	08010ed7 	.word	0x08010ed7
 8010c70:	08010c75 	.word	0x08010c75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d00b      	beq.n	8010c98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c86:	69db      	ldr	r3, [r3, #28]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	7c12      	ldrb	r2, [r2, #16]
 8010c8c:	f107 0108 	add.w	r1, r7, #8
 8010c90:	4610      	mov	r0, r2
 8010c92:	4798      	blx	r3
 8010c94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c96:	e126      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010c98:	6839      	ldr	r1, [r7, #0]
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 fb27 	bl	80112ee <USBD_CtlError>
        err++;
 8010ca0:	7afb      	ldrb	r3, [r7, #11]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8010ca6:	e11e      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	7c12      	ldrb	r2, [r2, #16]
 8010cb4:	f107 0108 	add.w	r1, r7, #8
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4798      	blx	r3
 8010cbc:	60f8      	str	r0, [r7, #12]
      break;
 8010cbe:	e112      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	7c1b      	ldrb	r3, [r3, #16]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d10d      	bne.n	8010ce4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd0:	f107 0208 	add.w	r2, r7, #8
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	4798      	blx	r3
 8010cd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	2202      	movs	r2, #2
 8010ce0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010ce2:	e100      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cec:	f107 0208 	add.w	r2, r7, #8
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	4798      	blx	r3
 8010cf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	2202      	movs	r2, #2
 8010cfc:	701a      	strb	r2, [r3, #0]
      break;
 8010cfe:	e0f2      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	885b      	ldrh	r3, [r3, #2]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b05      	cmp	r3, #5
 8010d08:	f200 80ac 	bhi.w	8010e64 <USBD_GetDescriptor+0x258>
 8010d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8010d14 <USBD_GetDescriptor+0x108>)
 8010d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d12:	bf00      	nop
 8010d14:	08010d2d 	.word	0x08010d2d
 8010d18:	08010d61 	.word	0x08010d61
 8010d1c:	08010d95 	.word	0x08010d95
 8010d20:	08010dc9 	.word	0x08010dc9
 8010d24:	08010dfd 	.word	0x08010dfd
 8010d28:	08010e31 	.word	0x08010e31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00b      	beq.n	8010d50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	7c12      	ldrb	r2, [r2, #16]
 8010d44:	f107 0108 	add.w	r1, r7, #8
 8010d48:	4610      	mov	r0, r2
 8010d4a:	4798      	blx	r3
 8010d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d4e:	e091      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d50:	6839      	ldr	r1, [r7, #0]
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 facb 	bl	80112ee <USBD_CtlError>
            err++;
 8010d58:	7afb      	ldrb	r3, [r7, #11]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8010d5e:	e089      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00b      	beq.n	8010d84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	7c12      	ldrb	r2, [r2, #16]
 8010d78:	f107 0108 	add.w	r1, r7, #8
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4798      	blx	r3
 8010d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d82:	e077      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 fab1 	bl	80112ee <USBD_CtlError>
            err++;
 8010d8c:	7afb      	ldrb	r3, [r7, #11]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	72fb      	strb	r3, [r7, #11]
          break;
 8010d92:	e06f      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00b      	beq.n	8010db8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	7c12      	ldrb	r2, [r2, #16]
 8010dac:	f107 0108 	add.w	r1, r7, #8
 8010db0:	4610      	mov	r0, r2
 8010db2:	4798      	blx	r3
 8010db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010db6:	e05d      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010db8:	6839      	ldr	r1, [r7, #0]
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa97 	bl	80112ee <USBD_CtlError>
            err++;
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8010dc6:	e055      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00b      	beq.n	8010dec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	7c12      	ldrb	r2, [r2, #16]
 8010de0:	f107 0108 	add.w	r1, r7, #8
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
 8010de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dea:	e043      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fa7d 	bl	80112ee <USBD_CtlError>
            err++;
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	3301      	adds	r3, #1
 8010df8:	72fb      	strb	r3, [r7, #11]
          break;
 8010dfa:	e03b      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00b      	beq.n	8010e20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e0e:	695b      	ldr	r3, [r3, #20]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	7c12      	ldrb	r2, [r2, #16]
 8010e14:	f107 0108 	add.w	r1, r7, #8
 8010e18:	4610      	mov	r0, r2
 8010e1a:	4798      	blx	r3
 8010e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e1e:	e029      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa63 	bl	80112ee <USBD_CtlError>
            err++;
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e2e:	e021      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e36:	699b      	ldr	r3, [r3, #24]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00b      	beq.n	8010e54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	7c12      	ldrb	r2, [r2, #16]
 8010e48:	f107 0108 	add.w	r1, r7, #8
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
 8010e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e52:	e00f      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e54:	6839      	ldr	r1, [r7, #0]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 fa49 	bl	80112ee <USBD_CtlError>
            err++;
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	72fb      	strb	r3, [r7, #11]
          break;
 8010e62:	e007      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 fa41 	bl	80112ee <USBD_CtlError>
          err++;
 8010e6c:	7afb      	ldrb	r3, [r7, #11]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010e72:	bf00      	nop
      }
      break;
 8010e74:	e037      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	7c1b      	ldrb	r3, [r3, #16]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d109      	bne.n	8010e92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e86:	f107 0208 	add.w	r2, r7, #8
 8010e8a:	4610      	mov	r0, r2
 8010e8c:	4798      	blx	r3
 8010e8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e90:	e029      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fa2a 	bl	80112ee <USBD_CtlError>
        err++;
 8010e9a:	7afb      	ldrb	r3, [r7, #11]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8010ea0:	e021      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	7c1b      	ldrb	r3, [r3, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10d      	bne.n	8010ec6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eb2:	f107 0208 	add.w	r2, r7, #8
 8010eb6:	4610      	mov	r0, r2
 8010eb8:	4798      	blx	r3
 8010eba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	2207      	movs	r2, #7
 8010ec2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ec4:	e00f      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 fa10 	bl	80112ee <USBD_CtlError>
        err++;
 8010ece:	7afb      	ldrb	r3, [r7, #11]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ed4:	e007      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fa08 	bl	80112ee <USBD_CtlError>
      err++;
 8010ede:	7afb      	ldrb	r3, [r7, #11]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ee4:	bf00      	nop
  }

  if (err != 0U)
 8010ee6:	7afb      	ldrb	r3, [r7, #11]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d11e      	bne.n	8010f2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	88db      	ldrh	r3, [r3, #6]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d016      	beq.n	8010f22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010ef4:	893b      	ldrh	r3, [r7, #8]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00e      	beq.n	8010f18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	88da      	ldrh	r2, [r3, #6]
 8010efe:	893b      	ldrh	r3, [r7, #8]
 8010f00:	4293      	cmp	r3, r2
 8010f02:	bf28      	it	cs
 8010f04:	4613      	movcs	r3, r2
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f0a:	893b      	ldrh	r3, [r7, #8]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	68f9      	ldr	r1, [r7, #12]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 fa69 	bl	80113e8 <USBD_CtlSendData>
 8010f16:	e009      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f18:	6839      	ldr	r1, [r7, #0]
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f9e7 	bl	80112ee <USBD_CtlError>
 8010f20:	e004      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 faba 	bl	801149c <USBD_CtlSendStatus>
 8010f28:	e000      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    return;
 8010f2a:	bf00      	nop
  }
}
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop

08010f34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	889b      	ldrh	r3, [r3, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d131      	bne.n	8010faa <USBD_SetAddress+0x76>
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	88db      	ldrh	r3, [r3, #6]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d12d      	bne.n	8010faa <USBD_SetAddress+0x76>
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	885b      	ldrh	r3, [r3, #2]
 8010f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f54:	d829      	bhi.n	8010faa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	885b      	ldrh	r3, [r3, #2]
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d104      	bne.n	8010f78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 f9bc 	bl	80112ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f76:	e01d      	b.n	8010fb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7bfa      	ldrb	r2, [r7, #15]
 8010f7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4619      	mov	r1, r3
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fed7 	bl	8011d38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fa86 	bl	801149c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d004      	beq.n	8010fa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2202      	movs	r2, #2
 8010f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f9e:	e009      	b.n	8010fb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fa8:	e004      	b.n	8010fb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 f99e 	bl	80112ee <USBD_CtlError>
  }
}
 8010fb2:	bf00      	nop
 8010fb4:	bf00      	nop
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	885b      	ldrh	r3, [r3, #2]
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	4b4e      	ldr	r3, [pc, #312]	@ (801110c <USBD_SetConfig+0x150>)
 8010fd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010fd4:	4b4d      	ldr	r3, [pc, #308]	@ (801110c <USBD_SetConfig+0x150>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d905      	bls.n	8010fe8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010fdc:	6839      	ldr	r1, [r7, #0]
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f985 	bl	80112ee <USBD_CtlError>
    return USBD_FAIL;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e08c      	b.n	8011102 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d002      	beq.n	8010ffa <USBD_SetConfig+0x3e>
 8010ff4:	2b03      	cmp	r3, #3
 8010ff6:	d029      	beq.n	801104c <USBD_SetConfig+0x90>
 8010ff8:	e075      	b.n	80110e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010ffa:	4b44      	ldr	r3, [pc, #272]	@ (801110c <USBD_SetConfig+0x150>)
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d020      	beq.n	8011044 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011002:	4b42      	ldr	r3, [pc, #264]	@ (801110c <USBD_SetConfig+0x150>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	461a      	mov	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801100c:	4b3f      	ldr	r3, [pc, #252]	@ (801110c <USBD_SetConfig+0x150>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff f84b 	bl	80100ae <USBD_SetClassConfig>
 8011018:	4603      	mov	r3, r0
 801101a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801101c:	7bfb      	ldrb	r3, [r7, #15]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d008      	beq.n	8011034 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 f962 	bl	80112ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2202      	movs	r2, #2
 801102e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011032:	e065      	b.n	8011100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fa31 	bl	801149c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2203      	movs	r2, #3
 801103e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011042:	e05d      	b.n	8011100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fa29 	bl	801149c <USBD_CtlSendStatus>
      break;
 801104a:	e059      	b.n	8011100 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801104c:	4b2f      	ldr	r3, [pc, #188]	@ (801110c <USBD_SetConfig+0x150>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d112      	bne.n	801107a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2202      	movs	r2, #2
 8011058:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801105c:	4b2b      	ldr	r3, [pc, #172]	@ (801110c <USBD_SetConfig+0x150>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011066:	4b29      	ldr	r3, [pc, #164]	@ (801110c <USBD_SetConfig+0x150>)
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7ff f83a 	bl	80100e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 fa12 	bl	801149c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011078:	e042      	b.n	8011100 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801107a:	4b24      	ldr	r3, [pc, #144]	@ (801110c <USBD_SetConfig+0x150>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d02a      	beq.n	80110de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	b2db      	uxtb	r3, r3
 801108e:	4619      	mov	r1, r3
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff f828 	bl	80100e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011096:	4b1d      	ldr	r3, [pc, #116]	@ (801110c <USBD_SetConfig+0x150>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110a0:	4b1a      	ldr	r3, [pc, #104]	@ (801110c <USBD_SetConfig+0x150>)
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff f801 	bl	80100ae <USBD_SetClassConfig>
 80110ac:	4603      	mov	r3, r0
 80110ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d00f      	beq.n	80110d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80110b6:	6839      	ldr	r1, [r7, #0]
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f918 	bl	80112ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	4619      	mov	r1, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff f80d 	bl	80100e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2202      	movs	r2, #2
 80110d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80110d4:	e014      	b.n	8011100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 f9e0 	bl	801149c <USBD_CtlSendStatus>
      break;
 80110dc:	e010      	b.n	8011100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f9dc 	bl	801149c <USBD_CtlSendStatus>
      break;
 80110e4:	e00c      	b.n	8011100 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f900 	bl	80112ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110ee:	4b07      	ldr	r3, [pc, #28]	@ (801110c <USBD_SetConfig+0x150>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	4619      	mov	r1, r3
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7fe fff6 	bl	80100e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80110fa:	2303      	movs	r3, #3
 80110fc:	73fb      	strb	r3, [r7, #15]
      break;
 80110fe:	bf00      	nop
  }

  return ret;
 8011100:	7bfb      	ldrb	r3, [r7, #15]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	200009a4 	.word	0x200009a4

08011110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	88db      	ldrh	r3, [r3, #6]
 801111e:	2b01      	cmp	r3, #1
 8011120:	d004      	beq.n	801112c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011122:	6839      	ldr	r1, [r7, #0]
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 f8e2 	bl	80112ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801112a:	e023      	b.n	8011174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011132:	b2db      	uxtb	r3, r3
 8011134:	2b02      	cmp	r3, #2
 8011136:	dc02      	bgt.n	801113e <USBD_GetConfig+0x2e>
 8011138:	2b00      	cmp	r3, #0
 801113a:	dc03      	bgt.n	8011144 <USBD_GetConfig+0x34>
 801113c:	e015      	b.n	801116a <USBD_GetConfig+0x5a>
 801113e:	2b03      	cmp	r3, #3
 8011140:	d00b      	beq.n	801115a <USBD_GetConfig+0x4a>
 8011142:	e012      	b.n	801116a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3308      	adds	r3, #8
 801114e:	2201      	movs	r2, #1
 8011150:	4619      	mov	r1, r3
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f948 	bl	80113e8 <USBD_CtlSendData>
        break;
 8011158:	e00c      	b.n	8011174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3304      	adds	r3, #4
 801115e:	2201      	movs	r2, #1
 8011160:	4619      	mov	r1, r3
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 f940 	bl	80113e8 <USBD_CtlSendData>
        break;
 8011168:	e004      	b.n	8011174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801116a:	6839      	ldr	r1, [r7, #0]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 f8be 	bl	80112ee <USBD_CtlError>
        break;
 8011172:	bf00      	nop
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801118c:	b2db      	uxtb	r3, r3
 801118e:	3b01      	subs	r3, #1
 8011190:	2b02      	cmp	r3, #2
 8011192:	d81e      	bhi.n	80111d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	88db      	ldrh	r3, [r3, #6]
 8011198:	2b02      	cmp	r3, #2
 801119a:	d004      	beq.n	80111a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 f8a5 	bl	80112ee <USBD_CtlError>
        break;
 80111a4:	e01a      	b.n	80111dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	f043 0202 	orr.w	r2, r3, #2
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	330c      	adds	r3, #12
 80111c6:	2202      	movs	r2, #2
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f90c 	bl	80113e8 <USBD_CtlSendData>
      break;
 80111d0:	e004      	b.n	80111dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f88a 	bl	80112ee <USBD_CtlError>
      break;
 80111da:	bf00      	nop
  }
}
 80111dc:	bf00      	nop
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	885b      	ldrh	r3, [r3, #2]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d107      	bne.n	8011206 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2201      	movs	r2, #1
 80111fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f94c 	bl	801149c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011204:	e013      	b.n	801122e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	885b      	ldrh	r3, [r3, #2]
 801120a:	2b02      	cmp	r3, #2
 801120c:	d10b      	bne.n	8011226 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	889b      	ldrh	r3, [r3, #4]
 8011212:	0a1b      	lsrs	r3, r3, #8
 8011214:	b29b      	uxth	r3, r3
 8011216:	b2da      	uxtb	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f000 f93c 	bl	801149c <USBD_CtlSendStatus>
}
 8011224:	e003      	b.n	801122e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f860 	bl	80112ee <USBD_CtlError>
}
 801122e:	bf00      	nop
 8011230:	3708      	adds	r7, #8
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b082      	sub	sp, #8
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
 801123e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011246:	b2db      	uxtb	r3, r3
 8011248:	3b01      	subs	r3, #1
 801124a:	2b02      	cmp	r3, #2
 801124c:	d80b      	bhi.n	8011266 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	885b      	ldrh	r3, [r3, #2]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d10c      	bne.n	8011270 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f91c 	bl	801149c <USBD_CtlSendStatus>
      }
      break;
 8011264:	e004      	b.n	8011270 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011266:	6839      	ldr	r1, [r7, #0]
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 f840 	bl	80112ee <USBD_CtlError>
      break;
 801126e:	e000      	b.n	8011272 <USBD_ClrFeature+0x3c>
      break;
 8011270:	bf00      	nop
  }
}
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b084      	sub	sp, #16
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	781a      	ldrb	r2, [r3, #0]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3301      	adds	r3, #1
 8011294:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	781a      	ldrb	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	3301      	adds	r3, #1
 80112a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f7ff fa16 	bl	80106d6 <SWAPBYTE>
 80112aa:	4603      	mov	r3, r0
 80112ac:	461a      	mov	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	3301      	adds	r3, #1
 80112bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f7ff fa09 	bl	80106d6 <SWAPBYTE>
 80112c4:	4603      	mov	r3, r0
 80112c6:	461a      	mov	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	3301      	adds	r3, #1
 80112d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f7ff f9fc 	bl	80106d6 <SWAPBYTE>
 80112de:	4603      	mov	r3, r0
 80112e0:	461a      	mov	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	80da      	strh	r2, [r3, #6]
}
 80112e6:	bf00      	nop
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b082      	sub	sp, #8
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80112f8:	2180      	movs	r1, #128	@ 0x80
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 fcb2 	bl	8011c64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011300:	2100      	movs	r1, #0
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fcae 	bl	8011c64 <USBD_LL_StallEP>
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801131c:	2300      	movs	r3, #0
 801131e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d042      	beq.n	80113ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801132a:	6938      	ldr	r0, [r7, #16]
 801132c:	f000 f842 	bl	80113b4 <USBD_GetLen>
 8011330:	4603      	mov	r3, r0
 8011332:	3301      	adds	r3, #1
 8011334:	005b      	lsls	r3, r3, #1
 8011336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801133a:	d808      	bhi.n	801134e <USBD_GetString+0x3e>
 801133c:	6938      	ldr	r0, [r7, #16]
 801133e:	f000 f839 	bl	80113b4 <USBD_GetLen>
 8011342:	4603      	mov	r3, r0
 8011344:	3301      	adds	r3, #1
 8011346:	b29b      	uxth	r3, r3
 8011348:	005b      	lsls	r3, r3, #1
 801134a:	b29a      	uxth	r2, r3
 801134c:	e001      	b.n	8011352 <USBD_GetString+0x42>
 801134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	4413      	add	r3, r2
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	7812      	ldrb	r2, [r2, #0]
 8011360:	701a      	strb	r2, [r3, #0]
  idx++;
 8011362:	7dfb      	ldrb	r3, [r7, #23]
 8011364:	3301      	adds	r3, #1
 8011366:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011368:	7dfb      	ldrb	r3, [r7, #23]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	4413      	add	r3, r2
 801136e:	2203      	movs	r2, #3
 8011370:	701a      	strb	r2, [r3, #0]
  idx++;
 8011372:	7dfb      	ldrb	r3, [r7, #23]
 8011374:	3301      	adds	r3, #1
 8011376:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011378:	e013      	b.n	80113a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	68ba      	ldr	r2, [r7, #8]
 801137e:	4413      	add	r3, r2
 8011380:	693a      	ldr	r2, [r7, #16]
 8011382:	7812      	ldrb	r2, [r2, #0]
 8011384:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	3301      	adds	r3, #1
 801138a:	613b      	str	r3, [r7, #16]
    idx++;
 801138c:	7dfb      	ldrb	r3, [r7, #23]
 801138e:	3301      	adds	r3, #1
 8011390:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011392:	7dfb      	ldrb	r3, [r7, #23]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	4413      	add	r3, r2
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]
    idx++;
 801139c:	7dfb      	ldrb	r3, [r7, #23]
 801139e:	3301      	adds	r3, #1
 80113a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1e7      	bne.n	801137a <USBD_GetString+0x6a>
 80113aa:	e000      	b.n	80113ae <USBD_GetString+0x9e>
    return;
 80113ac:	bf00      	nop
  }
}
 80113ae:	3718      	adds	r7, #24
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80113bc:	2300      	movs	r3, #0
 80113be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80113c4:	e005      	b.n	80113d2 <USBD_GetLen+0x1e>
  {
    len++;
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	3301      	adds	r3, #1
 80113ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	3301      	adds	r3, #1
 80113d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1f5      	bne.n	80113c6 <USBD_GetLen+0x12>
  }

  return len;
 80113da:	7bfb      	ldrb	r3, [r7, #15]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2202      	movs	r2, #2
 80113f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	2100      	movs	r1, #0
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f000 fcb1 	bl	8011d76 <USBD_LL_Transmit>

  return USBD_OK;
 8011414:	2300      	movs	r3, #0
}
 8011416:	4618      	mov	r0, r3
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b084      	sub	sp, #16
 8011422:	af00      	add	r7, sp, #0
 8011424:	60f8      	str	r0, [r7, #12]
 8011426:	60b9      	str	r1, [r7, #8]
 8011428:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68ba      	ldr	r2, [r7, #8]
 801142e:	2100      	movs	r1, #0
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 fca0 	bl	8011d76 <USBD_LL_Transmit>

  return USBD_OK;
 8011436:	2300      	movs	r3, #0
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2203      	movs	r2, #3
 8011450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	2100      	movs	r1, #0
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 fca4 	bl	8011db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b084      	sub	sp, #16
 801147e:	af00      	add	r7, sp, #0
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	60b9      	str	r1, [r7, #8]
 8011484:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68ba      	ldr	r2, [r7, #8]
 801148a:	2100      	movs	r1, #0
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f000 fc93 	bl	8011db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2204      	movs	r2, #4
 80114a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80114ac:	2300      	movs	r3, #0
 80114ae:	2200      	movs	r2, #0
 80114b0:	2100      	movs	r1, #0
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fc5f 	bl	8011d76 <USBD_LL_Transmit>

  return USBD_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3708      	adds	r7, #8
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b082      	sub	sp, #8
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2205      	movs	r2, #5
 80114ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114d2:	2300      	movs	r3, #0
 80114d4:	2200      	movs	r2, #0
 80114d6:	2100      	movs	r1, #0
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 fc6d 	bl	8011db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80114ec:	2200      	movs	r2, #0
 80114ee:	4912      	ldr	r1, [pc, #72]	@ (8011538 <MX_USB_Device_Init+0x50>)
 80114f0:	4812      	ldr	r0, [pc, #72]	@ (801153c <MX_USB_Device_Init+0x54>)
 80114f2:	f7fe fd43 	bl	800ff7c <USBD_Init>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80114fc:	f7f2 ff5e 	bl	80043bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011500:	490f      	ldr	r1, [pc, #60]	@ (8011540 <MX_USB_Device_Init+0x58>)
 8011502:	480e      	ldr	r0, [pc, #56]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011504:	f7fe fd78 	bl	800fff8 <USBD_RegisterClass>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801150e:	f7f2 ff55 	bl	80043bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011512:	490c      	ldr	r1, [pc, #48]	@ (8011544 <MX_USB_Device_Init+0x5c>)
 8011514:	4809      	ldr	r0, [pc, #36]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011516:	f7fe fca1 	bl	800fe5c <USBD_CDC_RegisterInterface>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011520:	f7f2 ff4c 	bl	80043bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011524:	4805      	ldr	r0, [pc, #20]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011526:	f7fe fdab 	bl	8010080 <USBD_Start>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d001      	beq.n	8011534 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011530:	f7f2 ff44 	bl	80043bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011534:	bf00      	nop
 8011536:	bd80      	pop	{r7, pc}
 8011538:	200000d4 	.word	0x200000d4
 801153c:	200009a8 	.word	0x200009a8
 8011540:	20000040 	.word	0x20000040
 8011544:	200000c0 	.word	0x200000c0

08011548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801154c:	2200      	movs	r2, #0
 801154e:	4905      	ldr	r1, [pc, #20]	@ (8011564 <CDC_Init_FS+0x1c>)
 8011550:	4805      	ldr	r0, [pc, #20]	@ (8011568 <CDC_Init_FS+0x20>)
 8011552:	f7fe fc9d 	bl	800fe90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011556:	4905      	ldr	r1, [pc, #20]	@ (801156c <CDC_Init_FS+0x24>)
 8011558:	4803      	ldr	r0, [pc, #12]	@ (8011568 <CDC_Init_FS+0x20>)
 801155a:	f7fe fcbb 	bl	800fed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801155e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011560:	4618      	mov	r0, r3
 8011562:	bd80      	pop	{r7, pc}
 8011564:	20001484 	.word	0x20001484
 8011568:	200009a8 	.word	0x200009a8
 801156c:	20000c84 	.word	0x20000c84

08011570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011570:	b480      	push	{r7}
 8011572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011576:	4618      	mov	r0, r3
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
 801158c:	4613      	mov	r3, r2
 801158e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011590:	79fb      	ldrb	r3, [r7, #7]
 8011592:	2b23      	cmp	r3, #35	@ 0x23
 8011594:	d84a      	bhi.n	801162c <CDC_Control_FS+0xac>
 8011596:	a201      	add	r2, pc, #4	@ (adr r2, 801159c <CDC_Control_FS+0x1c>)
 8011598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159c:	0801162d 	.word	0x0801162d
 80115a0:	0801162d 	.word	0x0801162d
 80115a4:	0801162d 	.word	0x0801162d
 80115a8:	0801162d 	.word	0x0801162d
 80115ac:	0801162d 	.word	0x0801162d
 80115b0:	0801162d 	.word	0x0801162d
 80115b4:	0801162d 	.word	0x0801162d
 80115b8:	0801162d 	.word	0x0801162d
 80115bc:	0801162d 	.word	0x0801162d
 80115c0:	0801162d 	.word	0x0801162d
 80115c4:	0801162d 	.word	0x0801162d
 80115c8:	0801162d 	.word	0x0801162d
 80115cc:	0801162d 	.word	0x0801162d
 80115d0:	0801162d 	.word	0x0801162d
 80115d4:	0801162d 	.word	0x0801162d
 80115d8:	0801162d 	.word	0x0801162d
 80115dc:	0801162d 	.word	0x0801162d
 80115e0:	0801162d 	.word	0x0801162d
 80115e4:	0801162d 	.word	0x0801162d
 80115e8:	0801162d 	.word	0x0801162d
 80115ec:	0801162d 	.word	0x0801162d
 80115f0:	0801162d 	.word	0x0801162d
 80115f4:	0801162d 	.word	0x0801162d
 80115f8:	0801162d 	.word	0x0801162d
 80115fc:	0801162d 	.word	0x0801162d
 8011600:	0801162d 	.word	0x0801162d
 8011604:	0801162d 	.word	0x0801162d
 8011608:	0801162d 	.word	0x0801162d
 801160c:	0801162d 	.word	0x0801162d
 8011610:	0801162d 	.word	0x0801162d
 8011614:	0801162d 	.word	0x0801162d
 8011618:	0801162d 	.word	0x0801162d
 801161c:	0801162d 	.word	0x0801162d
 8011620:	0801162d 	.word	0x0801162d
 8011624:	0801162d 	.word	0x0801162d
 8011628:	0801162d 	.word	0x0801162d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801162c:	bf00      	nop
  }

  return (USBD_OK);
 801162e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011630:	4618      	mov	r0, r3
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	4805      	ldr	r0, [pc, #20]	@ (8011660 <CDC_Receive_FS+0x24>)
 801164a:	f7fe fc43 	bl	800fed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801164e:	4804      	ldr	r0, [pc, #16]	@ (8011660 <CDC_Receive_FS+0x24>)
 8011650:	f7fe fc5e 	bl	800ff10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011656:	4618      	mov	r0, r3
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	200009a8 	.word	0x200009a8

08011664 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011664:	b480      	push	{r7}
 8011666:	b087      	sub	sp, #28
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	4613      	mov	r3, r2
 8011670:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011672:	2300      	movs	r3, #0
 8011674:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801167a:	4618      	mov	r0, r3
 801167c:	371c      	adds	r7, #28
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr
	...

08011688 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011688:	b480      	push	{r7}
 801168a:	b083      	sub	sp, #12
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	6039      	str	r1, [r7, #0]
 8011692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	2212      	movs	r2, #18
 8011698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801169a:	4b03      	ldr	r3, [pc, #12]	@ (80116a8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 801169c:	4618      	mov	r0, r3
 801169e:	370c      	adds	r7, #12
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr
 80116a8:	200000f4 	.word	0x200000f4

080116ac <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	2204      	movs	r2, #4
 80116bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80116be:	4b03      	ldr	r3, [pc, #12]	@ (80116cc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	20000108 	.word	0x20000108

080116d0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	4603      	mov	r3, r0
 80116d8:	6039      	str	r1, [r7, #0]
 80116da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80116dc:	79fb      	ldrb	r3, [r7, #7]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d105      	bne.n	80116ee <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116e2:	683a      	ldr	r2, [r7, #0]
 80116e4:	4907      	ldr	r1, [pc, #28]	@ (8011704 <USBD_CDC_ProductStrDescriptor+0x34>)
 80116e6:	4808      	ldr	r0, [pc, #32]	@ (8011708 <USBD_CDC_ProductStrDescriptor+0x38>)
 80116e8:	f7ff fe12 	bl	8011310 <USBD_GetString>
 80116ec:	e004      	b.n	80116f8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80116ee:	683a      	ldr	r2, [r7, #0]
 80116f0:	4904      	ldr	r1, [pc, #16]	@ (8011704 <USBD_CDC_ProductStrDescriptor+0x34>)
 80116f2:	4805      	ldr	r0, [pc, #20]	@ (8011708 <USBD_CDC_ProductStrDescriptor+0x38>)
 80116f4:	f7ff fe0c 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 80116f8:	4b02      	ldr	r3, [pc, #8]	@ (8011704 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3708      	adds	r7, #8
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20001c84 	.word	0x20001c84
 8011708:	08014940 	.word	0x08014940

0801170c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b082      	sub	sp, #8
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	6039      	str	r1, [r7, #0]
 8011716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	4904      	ldr	r1, [pc, #16]	@ (801172c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 801171c:	4804      	ldr	r0, [pc, #16]	@ (8011730 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801171e:	f7ff fdf7 	bl	8011310 <USBD_GetString>
  return USBD_StrDesc;
 8011722:	4b02      	ldr	r3, [pc, #8]	@ (801172c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011724:	4618      	mov	r0, r3
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	20001c84 	.word	0x20001c84
 8011730:	08014958 	.word	0x08014958

08011734 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	4603      	mov	r3, r0
 801173c:	6039      	str	r1, [r7, #0]
 801173e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	221a      	movs	r2, #26
 8011744:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011746:	f000 f843 	bl	80117d0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801174a:	4b02      	ldr	r3, [pc, #8]	@ (8011754 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 801174c:	4618      	mov	r0, r3
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}
 8011754:	2000010c 	.word	0x2000010c

08011758 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	6039      	str	r1, [r7, #0]
 8011762:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011764:	79fb      	ldrb	r3, [r7, #7]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d105      	bne.n	8011776 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801176a:	683a      	ldr	r2, [r7, #0]
 801176c:	4907      	ldr	r1, [pc, #28]	@ (801178c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801176e:	4808      	ldr	r0, [pc, #32]	@ (8011790 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011770:	f7ff fdce 	bl	8011310 <USBD_GetString>
 8011774:	e004      	b.n	8011780 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	4904      	ldr	r1, [pc, #16]	@ (801178c <USBD_CDC_ConfigStrDescriptor+0x34>)
 801177a:	4805      	ldr	r0, [pc, #20]	@ (8011790 <USBD_CDC_ConfigStrDescriptor+0x38>)
 801177c:	f7ff fdc8 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011780:	4b02      	ldr	r3, [pc, #8]	@ (801178c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011782:	4618      	mov	r0, r3
 8011784:	3708      	adds	r7, #8
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	20001c84 	.word	0x20001c84
 8011790:	0801496c 	.word	0x0801496c

08011794 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	4603      	mov	r3, r0
 801179c:	6039      	str	r1, [r7, #0]
 801179e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117a0:	79fb      	ldrb	r3, [r7, #7]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d105      	bne.n	80117b2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80117a6:	683a      	ldr	r2, [r7, #0]
 80117a8:	4907      	ldr	r1, [pc, #28]	@ (80117c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80117aa:	4808      	ldr	r0, [pc, #32]	@ (80117cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80117ac:	f7ff fdb0 	bl	8011310 <USBD_GetString>
 80117b0:	e004      	b.n	80117bc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	4904      	ldr	r1, [pc, #16]	@ (80117c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80117b6:	4805      	ldr	r0, [pc, #20]	@ (80117cc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80117b8:	f7ff fdaa 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117bc:	4b02      	ldr	r3, [pc, #8]	@ (80117c8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	20001c84 	.word	0x20001c84
 80117cc:	08014978 	.word	0x08014978

080117d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b084      	sub	sp, #16
 80117d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80117d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011814 <Get_SerialNum+0x44>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80117dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011818 <Get_SerialNum+0x48>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80117e2:	4b0e      	ldr	r3, [pc, #56]	@ (801181c <Get_SerialNum+0x4c>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80117e8:	68fa      	ldr	r2, [r7, #12]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	4413      	add	r3, r2
 80117ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d009      	beq.n	801180a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80117f6:	2208      	movs	r2, #8
 80117f8:	4909      	ldr	r1, [pc, #36]	@ (8011820 <Get_SerialNum+0x50>)
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f000 f814 	bl	8011828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011800:	2204      	movs	r2, #4
 8011802:	4908      	ldr	r1, [pc, #32]	@ (8011824 <Get_SerialNum+0x54>)
 8011804:	68b8      	ldr	r0, [r7, #8]
 8011806:	f000 f80f 	bl	8011828 <IntToUnicode>
  }
}
 801180a:	bf00      	nop
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	1fff7590 	.word	0x1fff7590
 8011818:	1fff7594 	.word	0x1fff7594
 801181c:	1fff7598 	.word	0x1fff7598
 8011820:	2000010e 	.word	0x2000010e
 8011824:	2000011e 	.word	0x2000011e

08011828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011828:	b480      	push	{r7}
 801182a:	b087      	sub	sp, #28
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	60b9      	str	r1, [r7, #8]
 8011832:	4613      	mov	r3, r2
 8011834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011836:	2300      	movs	r3, #0
 8011838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801183a:	2300      	movs	r3, #0
 801183c:	75fb      	strb	r3, [r7, #23]
 801183e:	e027      	b.n	8011890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	0f1b      	lsrs	r3, r3, #28
 8011844:	2b09      	cmp	r3, #9
 8011846:	d80b      	bhi.n	8011860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	0f1b      	lsrs	r3, r3, #28
 801184c:	b2da      	uxtb	r2, r3
 801184e:	7dfb      	ldrb	r3, [r7, #23]
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	4619      	mov	r1, r3
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	440b      	add	r3, r1
 8011858:	3230      	adds	r2, #48	@ 0x30
 801185a:	b2d2      	uxtb	r2, r2
 801185c:	701a      	strb	r2, [r3, #0]
 801185e:	e00a      	b.n	8011876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	0f1b      	lsrs	r3, r3, #28
 8011864:	b2da      	uxtb	r2, r3
 8011866:	7dfb      	ldrb	r3, [r7, #23]
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	4619      	mov	r1, r3
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	440b      	add	r3, r1
 8011870:	3237      	adds	r2, #55	@ 0x37
 8011872:	b2d2      	uxtb	r2, r2
 8011874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	011b      	lsls	r3, r3, #4
 801187a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801187c:	7dfb      	ldrb	r3, [r7, #23]
 801187e:	005b      	lsls	r3, r3, #1
 8011880:	3301      	adds	r3, #1
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	4413      	add	r3, r2
 8011886:	2200      	movs	r2, #0
 8011888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801188a:	7dfb      	ldrb	r3, [r7, #23]
 801188c:	3301      	adds	r3, #1
 801188e:	75fb      	strb	r3, [r7, #23]
 8011890:	7dfa      	ldrb	r2, [r7, #23]
 8011892:	79fb      	ldrb	r3, [r7, #7]
 8011894:	429a      	cmp	r2, r3
 8011896:	d3d3      	bcc.n	8011840 <IntToUnicode+0x18>
  }
}
 8011898:	bf00      	nop
 801189a:	bf00      	nop
 801189c:	371c      	adds	r7, #28
 801189e:	46bd      	mov	sp, r7
 80118a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a4:	4770      	bx	lr

080118a6 <LL_AHB2_GRP1_EnableClock>:
{
 80118a6:	b480      	push	{r7}
 80118a8:	b085      	sub	sp, #20
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80118ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80118b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80118be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4013      	ands	r3, r2
 80118c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80118ca:	68fb      	ldr	r3, [r7, #12]
}
 80118cc:	bf00      	nop
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <LL_APB1_GRP1_EnableClock>:
{
 80118d8:	b480      	push	{r7}
 80118da:	b085      	sub	sp, #20
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80118e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80118e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	4313      	orrs	r3, r2
 80118ee:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80118f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	4013      	ands	r3, r2
 80118fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80118fc:	68fb      	ldr	r3, [r7, #12]
}
 80118fe:	bf00      	nop
 8011900:	3714      	adds	r7, #20
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr
	...

0801190c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011914:	f107 030c 	add.w	r3, r7, #12
 8011918:	2200      	movs	r2, #0
 801191a:	601a      	str	r2, [r3, #0]
 801191c:	605a      	str	r2, [r3, #4]
 801191e:	609a      	str	r2, [r3, #8]
 8011920:	60da      	str	r2, [r3, #12]
 8011922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4a17      	ldr	r2, [pc, #92]	@ (8011988 <HAL_PCD_MspInit+0x7c>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d128      	bne.n	8011980 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801192e:	2001      	movs	r0, #1
 8011930:	f7ff ffb9 	bl	80118a6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8011934:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011938:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801193a:	2302      	movs	r3, #2
 801193c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801193e:	2300      	movs	r3, #0
 8011940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011942:	2300      	movs	r3, #0
 8011944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011946:	230a      	movs	r3, #10
 8011948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801194a:	f107 030c 	add.w	r3, r7, #12
 801194e:	4619      	mov	r1, r3
 8011950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011954:	f7f5 f8fe 	bl	8006b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011958:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 801195c:	f7ff ffbc 	bl	80118d8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8011960:	2200      	movs	r2, #0
 8011962:	2100      	movs	r1, #0
 8011964:	2013      	movs	r0, #19
 8011966:	f7f4 fdde 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 801196a:	2013      	movs	r0, #19
 801196c:	f7f4 fdf5 	bl	800655a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011970:	2200      	movs	r2, #0
 8011972:	2100      	movs	r1, #0
 8011974:	2014      	movs	r0, #20
 8011976:	f7f4 fdd6 	bl	8006526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801197a:	2014      	movs	r0, #20
 801197c:	f7f4 fded 	bl	800655a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011980:	bf00      	nop
 8011982:	3720      	adds	r7, #32
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	40006800 	.word	0x40006800

0801198c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80119a0:	4619      	mov	r1, r3
 80119a2:	4610      	mov	r0, r2
 80119a4:	f7fe fbb9 	bl	801011a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80119c2:	78fa      	ldrb	r2, [r7, #3]
 80119c4:	6879      	ldr	r1, [r7, #4]
 80119c6:	4613      	mov	r3, r2
 80119c8:	009b      	lsls	r3, r3, #2
 80119ca:	4413      	add	r3, r2
 80119cc:	00db      	lsls	r3, r3, #3
 80119ce:	440b      	add	r3, r1
 80119d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	78fb      	ldrb	r3, [r7, #3]
 80119d8:	4619      	mov	r1, r3
 80119da:	f7fe fbf3 	bl	80101c4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80119de:	bf00      	nop
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b082      	sub	sp, #8
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
 80119ee:	460b      	mov	r3, r1
 80119f0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80119f8:	78fa      	ldrb	r2, [r7, #3]
 80119fa:	6879      	ldr	r1, [r7, #4]
 80119fc:	4613      	mov	r3, r2
 80119fe:	009b      	lsls	r3, r3, #2
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	440b      	add	r3, r1
 8011a06:	3324      	adds	r3, #36	@ 0x24
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	78fb      	ldrb	r3, [r7, #3]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	f7fe fc8c 	bl	801032a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011a12:	bf00      	nop
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b082      	sub	sp, #8
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fe fdc6 	bl	80105ba <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011a2e:	bf00      	nop
 8011a30:	3708      	adds	r7, #8
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b084      	sub	sp, #16
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011a3e:	2301      	movs	r3, #1
 8011a40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	795b      	ldrb	r3, [r3, #5]
 8011a46:	2b02      	cmp	r3, #2
 8011a48:	d001      	beq.n	8011a4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011a4a:	f7f2 fcb7 	bl	80043bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a54:	7bfa      	ldrb	r2, [r7, #15]
 8011a56:	4611      	mov	r1, r2
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fe fd6a 	bl	8010532 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a64:	4618      	mov	r0, r3
 8011a66:	f7fe fd12 	bl	801048e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011a6a:	bf00      	nop
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
	...

08011a74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fe fd65 	bl	8010552 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	7a5b      	ldrb	r3, [r3, #9]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d005      	beq.n	8011a9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a90:	4b04      	ldr	r3, [pc, #16]	@ (8011aa4 <HAL_PCD_SuspendCallback+0x30>)
 8011a92:	691b      	ldr	r3, [r3, #16]
 8011a94:	4a03      	ldr	r2, [pc, #12]	@ (8011aa4 <HAL_PCD_SuspendCallback+0x30>)
 8011a96:	f043 0306 	orr.w	r3, r3, #6
 8011a9a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011a9c:	bf00      	nop
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	e000ed00 	.word	0xe000ed00

08011aa8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	7a5b      	ldrb	r3, [r3, #9]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d007      	beq.n	8011ac8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ab8:	4b08      	ldr	r3, [pc, #32]	@ (8011adc <HAL_PCD_ResumeCallback+0x34>)
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	4a07      	ldr	r2, [pc, #28]	@ (8011adc <HAL_PCD_ResumeCallback+0x34>)
 8011abe:	f023 0306 	bic.w	r3, r3, #6
 8011ac2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011ac4:	f000 f9fa 	bl	8011ebc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fe fd5b 	bl	801058a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011ad4:	bf00      	nop
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	e000ed00 	.word	0xe000ed00

08011ae0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	4a2a      	ldr	r2, [pc, #168]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011af4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011af8:	f7f8 fb00 	bl	800a0fc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011afc:	4b27      	ldr	r3, [pc, #156]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011afe:	4a28      	ldr	r2, [pc, #160]	@ (8011ba0 <USBD_LL_Init+0xc0>)
 8011b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011b02:	4b26      	ldr	r3, [pc, #152]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b04:	2208      	movs	r2, #8
 8011b06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011b08:	4b24      	ldr	r3, [pc, #144]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b0a:	2202      	movs	r2, #2
 8011b0c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b0e:	4b23      	ldr	r3, [pc, #140]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b10:	2202      	movs	r2, #2
 8011b12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011b14:	4b21      	ldr	r3, [pc, #132]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b16:	2200      	movs	r2, #0
 8011b18:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011b1a:	4b20      	ldr	r3, [pc, #128]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011b20:	4b1e      	ldr	r3, [pc, #120]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011b26:	4b1d      	ldr	r3, [pc, #116]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011b2c:	481b      	ldr	r0, [pc, #108]	@ (8011b9c <USBD_LL_Init+0xbc>)
 8011b2e:	f7f6 fd94 	bl	800865a <HAL_PCD_Init>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d001      	beq.n	8011b3c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011b38:	f7f2 fc40 	bl	80043bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b42:	2318      	movs	r3, #24
 8011b44:	2200      	movs	r2, #0
 8011b46:	2100      	movs	r1, #0
 8011b48:	f7f8 fa4d 	bl	8009fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b52:	2358      	movs	r3, #88	@ 0x58
 8011b54:	2200      	movs	r2, #0
 8011b56:	2180      	movs	r1, #128	@ 0x80
 8011b58:	f7f8 fa45 	bl	8009fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b62:	23c0      	movs	r3, #192	@ 0xc0
 8011b64:	2200      	movs	r2, #0
 8011b66:	2181      	movs	r1, #129	@ 0x81
 8011b68:	f7f8 fa3d 	bl	8009fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011b76:	2200      	movs	r2, #0
 8011b78:	2101      	movs	r1, #1
 8011b7a:	f7f8 fa34 	bl	8009fe6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011b88:	2200      	movs	r2, #0
 8011b8a:	2182      	movs	r1, #130	@ 0x82
 8011b8c:	f7f8 fa2b 	bl	8009fe6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20001e84 	.word	0x20001e84
 8011ba0:	40006800 	.word	0x40006800

08011ba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b084      	sub	sp, #16
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bac:	2300      	movs	r3, #0
 8011bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7f6 fe1b 	bl	80087f6 <HAL_PCD_Start>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bc4:	7bfb      	ldrb	r3, [r7, #15]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 f97e 	bl	8011ec8 <USBD_Get_USB_Status>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b084      	sub	sp, #16
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
 8011be2:	4608      	mov	r0, r1
 8011be4:	4611      	mov	r1, r2
 8011be6:	461a      	mov	r2, r3
 8011be8:	4603      	mov	r3, r0
 8011bea:	70fb      	strb	r3, [r7, #3]
 8011bec:	460b      	mov	r3, r1
 8011bee:	70bb      	strb	r3, [r7, #2]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c02:	78bb      	ldrb	r3, [r7, #2]
 8011c04:	883a      	ldrh	r2, [r7, #0]
 8011c06:	78f9      	ldrb	r1, [r7, #3]
 8011c08:	f7f6 ff62 	bl	8008ad0 <HAL_PCD_EP_Open>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f000 f958 	bl	8011ec8 <USBD_Get_USB_Status>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b084      	sub	sp, #16
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	460b      	mov	r3, r1
 8011c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c40:	78fa      	ldrb	r2, [r7, #3]
 8011c42:	4611      	mov	r1, r2
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7f6 ffa0 	bl	8008b8a <HAL_PCD_EP_Close>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c4e:	7bfb      	ldrb	r3, [r7, #15]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f000 f939 	bl	8011ec8 <USBD_Get_USB_Status>
 8011c56:	4603      	mov	r3, r0
 8011c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3710      	adds	r7, #16
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c70:	2300      	movs	r3, #0
 8011c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c74:	2300      	movs	r3, #0
 8011c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c7e:	78fa      	ldrb	r2, [r7, #3]
 8011c80:	4611      	mov	r1, r2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7f7 f849 	bl	8008d1a <HAL_PCD_EP_SetStall>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c8c:	7bfb      	ldrb	r3, [r7, #15]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 f91a 	bl	8011ec8 <USBD_Get_USB_Status>
 8011c94:	4603      	mov	r3, r0
 8011c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b084      	sub	sp, #16
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
 8011caa:	460b      	mov	r3, r1
 8011cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cbc:	78fa      	ldrb	r2, [r7, #3]
 8011cbe:	4611      	mov	r1, r2
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7f7 f87c 	bl	8008dbe <HAL_PCD_EP_ClrStall>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cca:	7bfb      	ldrb	r3, [r7, #15]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f000 f8fb 	bl	8011ec8 <USBD_Get_USB_Status>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3710      	adds	r7, #16
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	da0b      	bge.n	8011d14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011cfc:	78fb      	ldrb	r3, [r7, #3]
 8011cfe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d02:	68f9      	ldr	r1, [r7, #12]
 8011d04:	4613      	mov	r3, r2
 8011d06:	009b      	lsls	r3, r3, #2
 8011d08:	4413      	add	r3, r2
 8011d0a:	00db      	lsls	r3, r3, #3
 8011d0c:	440b      	add	r3, r1
 8011d0e:	3312      	adds	r3, #18
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	e00b      	b.n	8011d2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d14:	78fb      	ldrb	r3, [r7, #3]
 8011d16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d1a:	68f9      	ldr	r1, [r7, #12]
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	009b      	lsls	r3, r3, #2
 8011d20:	4413      	add	r3, r2
 8011d22:	00db      	lsls	r3, r3, #3
 8011d24:	440b      	add	r3, r1
 8011d26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011d2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	460b      	mov	r3, r1
 8011d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d44:	2300      	movs	r3, #0
 8011d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d52:	78fa      	ldrb	r2, [r7, #3]
 8011d54:	4611      	mov	r1, r2
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7f6 fe96 	bl	8008a88 <HAL_PCD_SetAddress>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d60:	7bfb      	ldrb	r3, [r7, #15]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f000 f8b0 	bl	8011ec8 <USBD_Get_USB_Status>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b086      	sub	sp, #24
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	60f8      	str	r0, [r7, #12]
 8011d7e:	607a      	str	r2, [r7, #4]
 8011d80:	603b      	str	r3, [r7, #0]
 8011d82:	460b      	mov	r3, r1
 8011d84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d94:	7af9      	ldrb	r1, [r7, #11]
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	f7f6 ff87 	bl	8008cac <HAL_PCD_EP_Transmit>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011da2:	7dfb      	ldrb	r3, [r7, #23]
 8011da4:	4618      	mov	r0, r3
 8011da6:	f000 f88f 	bl	8011ec8 <USBD_Get_USB_Status>
 8011daa:	4603      	mov	r3, r0
 8011dac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011dae:	7dbb      	ldrb	r3, [r7, #22]
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3718      	adds	r7, #24
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b086      	sub	sp, #24
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	607a      	str	r2, [r7, #4]
 8011dc2:	603b      	str	r3, [r7, #0]
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011dd6:	7af9      	ldrb	r1, [r7, #11]
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	687a      	ldr	r2, [r7, #4]
 8011ddc:	f7f6 ff1d 	bl	8008c1a <HAL_PCD_EP_Receive>
 8011de0:	4603      	mov	r3, r0
 8011de2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011de4:	7dfb      	ldrb	r3, [r7, #23]
 8011de6:	4618      	mov	r0, r3
 8011de8:	f000 f86e 	bl	8011ec8 <USBD_Get_USB_Status>
 8011dec:	4603      	mov	r3, r0
 8011dee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011df0:	7dbb      	ldrb	r3, [r7, #22]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b082      	sub	sp, #8
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	460b      	mov	r3, r1
 8011e04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e0c:	78fa      	ldrb	r2, [r7, #3]
 8011e0e:	4611      	mov	r1, r2
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7f6 ff33 	bl	8008c7c <HAL_PCD_EP_GetRxCount>
 8011e16:	4603      	mov	r3, r0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3708      	adds	r7, #8
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	460b      	mov	r3, r1
 8011e2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011e2c:	78fb      	ldrb	r3, [r7, #3]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d002      	beq.n	8011e38 <HAL_PCDEx_LPM_Callback+0x18>
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d013      	beq.n	8011e5e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011e36:	e023      	b.n	8011e80 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	7a5b      	ldrb	r3, [r3, #9]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d007      	beq.n	8011e50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011e40:	f000 f83c 	bl	8011ebc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e44:	4b10      	ldr	r3, [pc, #64]	@ (8011e88 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e46:	691b      	ldr	r3, [r3, #16]
 8011e48:	4a0f      	ldr	r2, [pc, #60]	@ (8011e88 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e4a:	f023 0306 	bic.w	r3, r3, #6
 8011e4e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7fe fb97 	bl	801058a <USBD_LL_Resume>
    break;
 8011e5c:	e010      	b.n	8011e80 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fe fb74 	bl	8010552 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	7a5b      	ldrb	r3, [r3, #9]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d005      	beq.n	8011e7e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e72:	4b05      	ldr	r3, [pc, #20]	@ (8011e88 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e74:	691b      	ldr	r3, [r3, #16]
 8011e76:	4a04      	ldr	r2, [pc, #16]	@ (8011e88 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e78:	f043 0306 	orr.w	r3, r3, #6
 8011e7c:	6113      	str	r3, [r2, #16]
    break;
 8011e7e:	bf00      	nop
}
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	e000ed00 	.word	0xe000ed00

08011e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011e94:	4b03      	ldr	r3, [pc, #12]	@ (8011ea4 <USBD_static_malloc+0x18>)
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	370c      	adds	r7, #12
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr
 8011ea2:	bf00      	nop
 8011ea4:	20002160 	.word	0x20002160

08011ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011eb0:	bf00      	nop
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011ec0:	f7f2 f86c 	bl	8003f9c <SystemClock_Config>
}
 8011ec4:	bf00      	nop
 8011ec6:	bd80      	pop	{r7, pc}

08011ec8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b085      	sub	sp, #20
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	4603      	mov	r3, r0
 8011ed0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ed6:	79fb      	ldrb	r3, [r7, #7]
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d817      	bhi.n	8011f0c <USBD_Get_USB_Status+0x44>
 8011edc:	a201      	add	r2, pc, #4	@ (adr r2, 8011ee4 <USBD_Get_USB_Status+0x1c>)
 8011ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee2:	bf00      	nop
 8011ee4:	08011ef5 	.word	0x08011ef5
 8011ee8:	08011efb 	.word	0x08011efb
 8011eec:	08011f01 	.word	0x08011f01
 8011ef0:	08011f07 	.word	0x08011f07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef8:	e00b      	b.n	8011f12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011efa:	2303      	movs	r3, #3
 8011efc:	73fb      	strb	r3, [r7, #15]
    break;
 8011efe:	e008      	b.n	8011f12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f00:	2301      	movs	r3, #1
 8011f02:	73fb      	strb	r3, [r7, #15]
    break;
 8011f04:	e005      	b.n	8011f12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f06:	2303      	movs	r3, #3
 8011f08:	73fb      	strb	r3, [r7, #15]
    break;
 8011f0a:	e002      	b.n	8011f12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011f0c:	2303      	movs	r3, #3
 8011f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f10:	bf00      	nop
  }
  return usb_status;
 8011f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1e:	4770      	bx	lr

08011f20 <__cvt>:
 8011f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f24:	ec57 6b10 	vmov	r6, r7, d0
 8011f28:	2f00      	cmp	r7, #0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	4619      	mov	r1, r3
 8011f2e:	463b      	mov	r3, r7
 8011f30:	bfbb      	ittet	lt
 8011f32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011f36:	461f      	movlt	r7, r3
 8011f38:	2300      	movge	r3, #0
 8011f3a:	232d      	movlt	r3, #45	@ 0x2d
 8011f3c:	700b      	strb	r3, [r1, #0]
 8011f3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011f44:	4691      	mov	r9, r2
 8011f46:	f023 0820 	bic.w	r8, r3, #32
 8011f4a:	bfbc      	itt	lt
 8011f4c:	4632      	movlt	r2, r6
 8011f4e:	4616      	movlt	r6, r2
 8011f50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011f54:	d005      	beq.n	8011f62 <__cvt+0x42>
 8011f56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011f5a:	d100      	bne.n	8011f5e <__cvt+0x3e>
 8011f5c:	3401      	adds	r4, #1
 8011f5e:	2102      	movs	r1, #2
 8011f60:	e000      	b.n	8011f64 <__cvt+0x44>
 8011f62:	2103      	movs	r1, #3
 8011f64:	ab03      	add	r3, sp, #12
 8011f66:	9301      	str	r3, [sp, #4]
 8011f68:	ab02      	add	r3, sp, #8
 8011f6a:	9300      	str	r3, [sp, #0]
 8011f6c:	ec47 6b10 	vmov	d0, r6, r7
 8011f70:	4653      	mov	r3, sl
 8011f72:	4622      	mov	r2, r4
 8011f74:	f000 fe64 	bl	8012c40 <_dtoa_r>
 8011f78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011f7c:	4605      	mov	r5, r0
 8011f7e:	d119      	bne.n	8011fb4 <__cvt+0x94>
 8011f80:	f019 0f01 	tst.w	r9, #1
 8011f84:	d00e      	beq.n	8011fa4 <__cvt+0x84>
 8011f86:	eb00 0904 	add.w	r9, r0, r4
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	4630      	mov	r0, r6
 8011f90:	4639      	mov	r1, r7
 8011f92:	f7ee fd71 	bl	8000a78 <__aeabi_dcmpeq>
 8011f96:	b108      	cbz	r0, 8011f9c <__cvt+0x7c>
 8011f98:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f9c:	2230      	movs	r2, #48	@ 0x30
 8011f9e:	9b03      	ldr	r3, [sp, #12]
 8011fa0:	454b      	cmp	r3, r9
 8011fa2:	d31e      	bcc.n	8011fe2 <__cvt+0xc2>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011fa8:	1b5b      	subs	r3, r3, r5
 8011faa:	4628      	mov	r0, r5
 8011fac:	6013      	str	r3, [r2, #0]
 8011fae:	b004      	add	sp, #16
 8011fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011fb8:	eb00 0904 	add.w	r9, r0, r4
 8011fbc:	d1e5      	bne.n	8011f8a <__cvt+0x6a>
 8011fbe:	7803      	ldrb	r3, [r0, #0]
 8011fc0:	2b30      	cmp	r3, #48	@ 0x30
 8011fc2:	d10a      	bne.n	8011fda <__cvt+0xba>
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	f7ee fd54 	bl	8000a78 <__aeabi_dcmpeq>
 8011fd0:	b918      	cbnz	r0, 8011fda <__cvt+0xba>
 8011fd2:	f1c4 0401 	rsb	r4, r4, #1
 8011fd6:	f8ca 4000 	str.w	r4, [sl]
 8011fda:	f8da 3000 	ldr.w	r3, [sl]
 8011fde:	4499      	add	r9, r3
 8011fe0:	e7d3      	b.n	8011f8a <__cvt+0x6a>
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	9103      	str	r1, [sp, #12]
 8011fe6:	701a      	strb	r2, [r3, #0]
 8011fe8:	e7d9      	b.n	8011f9e <__cvt+0x7e>

08011fea <__exponent>:
 8011fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fec:	2900      	cmp	r1, #0
 8011fee:	bfba      	itte	lt
 8011ff0:	4249      	neglt	r1, r1
 8011ff2:	232d      	movlt	r3, #45	@ 0x2d
 8011ff4:	232b      	movge	r3, #43	@ 0x2b
 8011ff6:	2909      	cmp	r1, #9
 8011ff8:	7002      	strb	r2, [r0, #0]
 8011ffa:	7043      	strb	r3, [r0, #1]
 8011ffc:	dd29      	ble.n	8012052 <__exponent+0x68>
 8011ffe:	f10d 0307 	add.w	r3, sp, #7
 8012002:	461d      	mov	r5, r3
 8012004:	270a      	movs	r7, #10
 8012006:	461a      	mov	r2, r3
 8012008:	fbb1 f6f7 	udiv	r6, r1, r7
 801200c:	fb07 1416 	mls	r4, r7, r6, r1
 8012010:	3430      	adds	r4, #48	@ 0x30
 8012012:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012016:	460c      	mov	r4, r1
 8012018:	2c63      	cmp	r4, #99	@ 0x63
 801201a:	f103 33ff 	add.w	r3, r3, #4294967295
 801201e:	4631      	mov	r1, r6
 8012020:	dcf1      	bgt.n	8012006 <__exponent+0x1c>
 8012022:	3130      	adds	r1, #48	@ 0x30
 8012024:	1e94      	subs	r4, r2, #2
 8012026:	f803 1c01 	strb.w	r1, [r3, #-1]
 801202a:	1c41      	adds	r1, r0, #1
 801202c:	4623      	mov	r3, r4
 801202e:	42ab      	cmp	r3, r5
 8012030:	d30a      	bcc.n	8012048 <__exponent+0x5e>
 8012032:	f10d 0309 	add.w	r3, sp, #9
 8012036:	1a9b      	subs	r3, r3, r2
 8012038:	42ac      	cmp	r4, r5
 801203a:	bf88      	it	hi
 801203c:	2300      	movhi	r3, #0
 801203e:	3302      	adds	r3, #2
 8012040:	4403      	add	r3, r0
 8012042:	1a18      	subs	r0, r3, r0
 8012044:	b003      	add	sp, #12
 8012046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012048:	f813 6b01 	ldrb.w	r6, [r3], #1
 801204c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012050:	e7ed      	b.n	801202e <__exponent+0x44>
 8012052:	2330      	movs	r3, #48	@ 0x30
 8012054:	3130      	adds	r1, #48	@ 0x30
 8012056:	7083      	strb	r3, [r0, #2]
 8012058:	70c1      	strb	r1, [r0, #3]
 801205a:	1d03      	adds	r3, r0, #4
 801205c:	e7f1      	b.n	8012042 <__exponent+0x58>
	...

08012060 <_printf_float>:
 8012060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012064:	b08d      	sub	sp, #52	@ 0x34
 8012066:	460c      	mov	r4, r1
 8012068:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801206c:	4616      	mov	r6, r2
 801206e:	461f      	mov	r7, r3
 8012070:	4605      	mov	r5, r0
 8012072:	f000 fcd5 	bl	8012a20 <_localeconv_r>
 8012076:	6803      	ldr	r3, [r0, #0]
 8012078:	9304      	str	r3, [sp, #16]
 801207a:	4618      	mov	r0, r3
 801207c:	f7ee f8d0 	bl	8000220 <strlen>
 8012080:	2300      	movs	r3, #0
 8012082:	930a      	str	r3, [sp, #40]	@ 0x28
 8012084:	f8d8 3000 	ldr.w	r3, [r8]
 8012088:	9005      	str	r0, [sp, #20]
 801208a:	3307      	adds	r3, #7
 801208c:	f023 0307 	bic.w	r3, r3, #7
 8012090:	f103 0208 	add.w	r2, r3, #8
 8012094:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012098:	f8d4 b000 	ldr.w	fp, [r4]
 801209c:	f8c8 2000 	str.w	r2, [r8]
 80120a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80120a8:	9307      	str	r3, [sp, #28]
 80120aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80120ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80120b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120b6:	4b9c      	ldr	r3, [pc, #624]	@ (8012328 <_printf_float+0x2c8>)
 80120b8:	f04f 32ff 	mov.w	r2, #4294967295
 80120bc:	f7ee fd0e 	bl	8000adc <__aeabi_dcmpun>
 80120c0:	bb70      	cbnz	r0, 8012120 <_printf_float+0xc0>
 80120c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80120c6:	4b98      	ldr	r3, [pc, #608]	@ (8012328 <_printf_float+0x2c8>)
 80120c8:	f04f 32ff 	mov.w	r2, #4294967295
 80120cc:	f7ee fce8 	bl	8000aa0 <__aeabi_dcmple>
 80120d0:	bb30      	cbnz	r0, 8012120 <_printf_float+0xc0>
 80120d2:	2200      	movs	r2, #0
 80120d4:	2300      	movs	r3, #0
 80120d6:	4640      	mov	r0, r8
 80120d8:	4649      	mov	r1, r9
 80120da:	f7ee fcd7 	bl	8000a8c <__aeabi_dcmplt>
 80120de:	b110      	cbz	r0, 80120e6 <_printf_float+0x86>
 80120e0:	232d      	movs	r3, #45	@ 0x2d
 80120e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120e6:	4a91      	ldr	r2, [pc, #580]	@ (801232c <_printf_float+0x2cc>)
 80120e8:	4b91      	ldr	r3, [pc, #580]	@ (8012330 <_printf_float+0x2d0>)
 80120ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80120ee:	bf94      	ite	ls
 80120f0:	4690      	movls	r8, r2
 80120f2:	4698      	movhi	r8, r3
 80120f4:	2303      	movs	r3, #3
 80120f6:	6123      	str	r3, [r4, #16]
 80120f8:	f02b 0304 	bic.w	r3, fp, #4
 80120fc:	6023      	str	r3, [r4, #0]
 80120fe:	f04f 0900 	mov.w	r9, #0
 8012102:	9700      	str	r7, [sp, #0]
 8012104:	4633      	mov	r3, r6
 8012106:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012108:	4621      	mov	r1, r4
 801210a:	4628      	mov	r0, r5
 801210c:	f000 f9d2 	bl	80124b4 <_printf_common>
 8012110:	3001      	adds	r0, #1
 8012112:	f040 808d 	bne.w	8012230 <_printf_float+0x1d0>
 8012116:	f04f 30ff 	mov.w	r0, #4294967295
 801211a:	b00d      	add	sp, #52	@ 0x34
 801211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012120:	4642      	mov	r2, r8
 8012122:	464b      	mov	r3, r9
 8012124:	4640      	mov	r0, r8
 8012126:	4649      	mov	r1, r9
 8012128:	f7ee fcd8 	bl	8000adc <__aeabi_dcmpun>
 801212c:	b140      	cbz	r0, 8012140 <_printf_float+0xe0>
 801212e:	464b      	mov	r3, r9
 8012130:	2b00      	cmp	r3, #0
 8012132:	bfbc      	itt	lt
 8012134:	232d      	movlt	r3, #45	@ 0x2d
 8012136:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801213a:	4a7e      	ldr	r2, [pc, #504]	@ (8012334 <_printf_float+0x2d4>)
 801213c:	4b7e      	ldr	r3, [pc, #504]	@ (8012338 <_printf_float+0x2d8>)
 801213e:	e7d4      	b.n	80120ea <_printf_float+0x8a>
 8012140:	6863      	ldr	r3, [r4, #4]
 8012142:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012146:	9206      	str	r2, [sp, #24]
 8012148:	1c5a      	adds	r2, r3, #1
 801214a:	d13b      	bne.n	80121c4 <_printf_float+0x164>
 801214c:	2306      	movs	r3, #6
 801214e:	6063      	str	r3, [r4, #4]
 8012150:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012154:	2300      	movs	r3, #0
 8012156:	6022      	str	r2, [r4, #0]
 8012158:	9303      	str	r3, [sp, #12]
 801215a:	ab0a      	add	r3, sp, #40	@ 0x28
 801215c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012160:	ab09      	add	r3, sp, #36	@ 0x24
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	6861      	ldr	r1, [r4, #4]
 8012166:	ec49 8b10 	vmov	d0, r8, r9
 801216a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801216e:	4628      	mov	r0, r5
 8012170:	f7ff fed6 	bl	8011f20 <__cvt>
 8012174:	9b06      	ldr	r3, [sp, #24]
 8012176:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012178:	2b47      	cmp	r3, #71	@ 0x47
 801217a:	4680      	mov	r8, r0
 801217c:	d129      	bne.n	80121d2 <_printf_float+0x172>
 801217e:	1cc8      	adds	r0, r1, #3
 8012180:	db02      	blt.n	8012188 <_printf_float+0x128>
 8012182:	6863      	ldr	r3, [r4, #4]
 8012184:	4299      	cmp	r1, r3
 8012186:	dd41      	ble.n	801220c <_printf_float+0x1ac>
 8012188:	f1aa 0a02 	sub.w	sl, sl, #2
 801218c:	fa5f fa8a 	uxtb.w	sl, sl
 8012190:	3901      	subs	r1, #1
 8012192:	4652      	mov	r2, sl
 8012194:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012198:	9109      	str	r1, [sp, #36]	@ 0x24
 801219a:	f7ff ff26 	bl	8011fea <__exponent>
 801219e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121a0:	1813      	adds	r3, r2, r0
 80121a2:	2a01      	cmp	r2, #1
 80121a4:	4681      	mov	r9, r0
 80121a6:	6123      	str	r3, [r4, #16]
 80121a8:	dc02      	bgt.n	80121b0 <_printf_float+0x150>
 80121aa:	6822      	ldr	r2, [r4, #0]
 80121ac:	07d2      	lsls	r2, r2, #31
 80121ae:	d501      	bpl.n	80121b4 <_printf_float+0x154>
 80121b0:	3301      	adds	r3, #1
 80121b2:	6123      	str	r3, [r4, #16]
 80121b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d0a2      	beq.n	8012102 <_printf_float+0xa2>
 80121bc:	232d      	movs	r3, #45	@ 0x2d
 80121be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121c2:	e79e      	b.n	8012102 <_printf_float+0xa2>
 80121c4:	9a06      	ldr	r2, [sp, #24]
 80121c6:	2a47      	cmp	r2, #71	@ 0x47
 80121c8:	d1c2      	bne.n	8012150 <_printf_float+0xf0>
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d1c0      	bne.n	8012150 <_printf_float+0xf0>
 80121ce:	2301      	movs	r3, #1
 80121d0:	e7bd      	b.n	801214e <_printf_float+0xee>
 80121d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80121d6:	d9db      	bls.n	8012190 <_printf_float+0x130>
 80121d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80121dc:	d118      	bne.n	8012210 <_printf_float+0x1b0>
 80121de:	2900      	cmp	r1, #0
 80121e0:	6863      	ldr	r3, [r4, #4]
 80121e2:	dd0b      	ble.n	80121fc <_printf_float+0x19c>
 80121e4:	6121      	str	r1, [r4, #16]
 80121e6:	b913      	cbnz	r3, 80121ee <_printf_float+0x18e>
 80121e8:	6822      	ldr	r2, [r4, #0]
 80121ea:	07d0      	lsls	r0, r2, #31
 80121ec:	d502      	bpl.n	80121f4 <_printf_float+0x194>
 80121ee:	3301      	adds	r3, #1
 80121f0:	440b      	add	r3, r1
 80121f2:	6123      	str	r3, [r4, #16]
 80121f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80121f6:	f04f 0900 	mov.w	r9, #0
 80121fa:	e7db      	b.n	80121b4 <_printf_float+0x154>
 80121fc:	b913      	cbnz	r3, 8012204 <_printf_float+0x1a4>
 80121fe:	6822      	ldr	r2, [r4, #0]
 8012200:	07d2      	lsls	r2, r2, #31
 8012202:	d501      	bpl.n	8012208 <_printf_float+0x1a8>
 8012204:	3302      	adds	r3, #2
 8012206:	e7f4      	b.n	80121f2 <_printf_float+0x192>
 8012208:	2301      	movs	r3, #1
 801220a:	e7f2      	b.n	80121f2 <_printf_float+0x192>
 801220c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012212:	4299      	cmp	r1, r3
 8012214:	db05      	blt.n	8012222 <_printf_float+0x1c2>
 8012216:	6823      	ldr	r3, [r4, #0]
 8012218:	6121      	str	r1, [r4, #16]
 801221a:	07d8      	lsls	r0, r3, #31
 801221c:	d5ea      	bpl.n	80121f4 <_printf_float+0x194>
 801221e:	1c4b      	adds	r3, r1, #1
 8012220:	e7e7      	b.n	80121f2 <_printf_float+0x192>
 8012222:	2900      	cmp	r1, #0
 8012224:	bfd4      	ite	le
 8012226:	f1c1 0202 	rsble	r2, r1, #2
 801222a:	2201      	movgt	r2, #1
 801222c:	4413      	add	r3, r2
 801222e:	e7e0      	b.n	80121f2 <_printf_float+0x192>
 8012230:	6823      	ldr	r3, [r4, #0]
 8012232:	055a      	lsls	r2, r3, #21
 8012234:	d407      	bmi.n	8012246 <_printf_float+0x1e6>
 8012236:	6923      	ldr	r3, [r4, #16]
 8012238:	4642      	mov	r2, r8
 801223a:	4631      	mov	r1, r6
 801223c:	4628      	mov	r0, r5
 801223e:	47b8      	blx	r7
 8012240:	3001      	adds	r0, #1
 8012242:	d12b      	bne.n	801229c <_printf_float+0x23c>
 8012244:	e767      	b.n	8012116 <_printf_float+0xb6>
 8012246:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801224a:	f240 80dd 	bls.w	8012408 <_printf_float+0x3a8>
 801224e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012252:	2200      	movs	r2, #0
 8012254:	2300      	movs	r3, #0
 8012256:	f7ee fc0f 	bl	8000a78 <__aeabi_dcmpeq>
 801225a:	2800      	cmp	r0, #0
 801225c:	d033      	beq.n	80122c6 <_printf_float+0x266>
 801225e:	4a37      	ldr	r2, [pc, #220]	@ (801233c <_printf_float+0x2dc>)
 8012260:	2301      	movs	r3, #1
 8012262:	4631      	mov	r1, r6
 8012264:	4628      	mov	r0, r5
 8012266:	47b8      	blx	r7
 8012268:	3001      	adds	r0, #1
 801226a:	f43f af54 	beq.w	8012116 <_printf_float+0xb6>
 801226e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012272:	4543      	cmp	r3, r8
 8012274:	db02      	blt.n	801227c <_printf_float+0x21c>
 8012276:	6823      	ldr	r3, [r4, #0]
 8012278:	07d8      	lsls	r0, r3, #31
 801227a:	d50f      	bpl.n	801229c <_printf_float+0x23c>
 801227c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	47b8      	blx	r7
 8012286:	3001      	adds	r0, #1
 8012288:	f43f af45 	beq.w	8012116 <_printf_float+0xb6>
 801228c:	f04f 0900 	mov.w	r9, #0
 8012290:	f108 38ff 	add.w	r8, r8, #4294967295
 8012294:	f104 0a1a 	add.w	sl, r4, #26
 8012298:	45c8      	cmp	r8, r9
 801229a:	dc09      	bgt.n	80122b0 <_printf_float+0x250>
 801229c:	6823      	ldr	r3, [r4, #0]
 801229e:	079b      	lsls	r3, r3, #30
 80122a0:	f100 8103 	bmi.w	80124aa <_printf_float+0x44a>
 80122a4:	68e0      	ldr	r0, [r4, #12]
 80122a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122a8:	4298      	cmp	r0, r3
 80122aa:	bfb8      	it	lt
 80122ac:	4618      	movlt	r0, r3
 80122ae:	e734      	b.n	801211a <_printf_float+0xba>
 80122b0:	2301      	movs	r3, #1
 80122b2:	4652      	mov	r2, sl
 80122b4:	4631      	mov	r1, r6
 80122b6:	4628      	mov	r0, r5
 80122b8:	47b8      	blx	r7
 80122ba:	3001      	adds	r0, #1
 80122bc:	f43f af2b 	beq.w	8012116 <_printf_float+0xb6>
 80122c0:	f109 0901 	add.w	r9, r9, #1
 80122c4:	e7e8      	b.n	8012298 <_printf_float+0x238>
 80122c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	dc39      	bgt.n	8012340 <_printf_float+0x2e0>
 80122cc:	4a1b      	ldr	r2, [pc, #108]	@ (801233c <_printf_float+0x2dc>)
 80122ce:	2301      	movs	r3, #1
 80122d0:	4631      	mov	r1, r6
 80122d2:	4628      	mov	r0, r5
 80122d4:	47b8      	blx	r7
 80122d6:	3001      	adds	r0, #1
 80122d8:	f43f af1d 	beq.w	8012116 <_printf_float+0xb6>
 80122dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80122e0:	ea59 0303 	orrs.w	r3, r9, r3
 80122e4:	d102      	bne.n	80122ec <_printf_float+0x28c>
 80122e6:	6823      	ldr	r3, [r4, #0]
 80122e8:	07d9      	lsls	r1, r3, #31
 80122ea:	d5d7      	bpl.n	801229c <_printf_float+0x23c>
 80122ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122f0:	4631      	mov	r1, r6
 80122f2:	4628      	mov	r0, r5
 80122f4:	47b8      	blx	r7
 80122f6:	3001      	adds	r0, #1
 80122f8:	f43f af0d 	beq.w	8012116 <_printf_float+0xb6>
 80122fc:	f04f 0a00 	mov.w	sl, #0
 8012300:	f104 0b1a 	add.w	fp, r4, #26
 8012304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012306:	425b      	negs	r3, r3
 8012308:	4553      	cmp	r3, sl
 801230a:	dc01      	bgt.n	8012310 <_printf_float+0x2b0>
 801230c:	464b      	mov	r3, r9
 801230e:	e793      	b.n	8012238 <_printf_float+0x1d8>
 8012310:	2301      	movs	r3, #1
 8012312:	465a      	mov	r2, fp
 8012314:	4631      	mov	r1, r6
 8012316:	4628      	mov	r0, r5
 8012318:	47b8      	blx	r7
 801231a:	3001      	adds	r0, #1
 801231c:	f43f aefb 	beq.w	8012116 <_printf_float+0xb6>
 8012320:	f10a 0a01 	add.w	sl, sl, #1
 8012324:	e7ee      	b.n	8012304 <_printf_float+0x2a4>
 8012326:	bf00      	nop
 8012328:	7fefffff 	.word	0x7fefffff
 801232c:	08014a64 	.word	0x08014a64
 8012330:	08014a68 	.word	0x08014a68
 8012334:	08014a6c 	.word	0x08014a6c
 8012338:	08014a70 	.word	0x08014a70
 801233c:	08014a74 	.word	0x08014a74
 8012340:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012342:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012346:	4553      	cmp	r3, sl
 8012348:	bfa8      	it	ge
 801234a:	4653      	movge	r3, sl
 801234c:	2b00      	cmp	r3, #0
 801234e:	4699      	mov	r9, r3
 8012350:	dc36      	bgt.n	80123c0 <_printf_float+0x360>
 8012352:	f04f 0b00 	mov.w	fp, #0
 8012356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801235a:	f104 021a 	add.w	r2, r4, #26
 801235e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012360:	9306      	str	r3, [sp, #24]
 8012362:	eba3 0309 	sub.w	r3, r3, r9
 8012366:	455b      	cmp	r3, fp
 8012368:	dc31      	bgt.n	80123ce <_printf_float+0x36e>
 801236a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801236c:	459a      	cmp	sl, r3
 801236e:	dc3a      	bgt.n	80123e6 <_printf_float+0x386>
 8012370:	6823      	ldr	r3, [r4, #0]
 8012372:	07da      	lsls	r2, r3, #31
 8012374:	d437      	bmi.n	80123e6 <_printf_float+0x386>
 8012376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012378:	ebaa 0903 	sub.w	r9, sl, r3
 801237c:	9b06      	ldr	r3, [sp, #24]
 801237e:	ebaa 0303 	sub.w	r3, sl, r3
 8012382:	4599      	cmp	r9, r3
 8012384:	bfa8      	it	ge
 8012386:	4699      	movge	r9, r3
 8012388:	f1b9 0f00 	cmp.w	r9, #0
 801238c:	dc33      	bgt.n	80123f6 <_printf_float+0x396>
 801238e:	f04f 0800 	mov.w	r8, #0
 8012392:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012396:	f104 0b1a 	add.w	fp, r4, #26
 801239a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801239c:	ebaa 0303 	sub.w	r3, sl, r3
 80123a0:	eba3 0309 	sub.w	r3, r3, r9
 80123a4:	4543      	cmp	r3, r8
 80123a6:	f77f af79 	ble.w	801229c <_printf_float+0x23c>
 80123aa:	2301      	movs	r3, #1
 80123ac:	465a      	mov	r2, fp
 80123ae:	4631      	mov	r1, r6
 80123b0:	4628      	mov	r0, r5
 80123b2:	47b8      	blx	r7
 80123b4:	3001      	adds	r0, #1
 80123b6:	f43f aeae 	beq.w	8012116 <_printf_float+0xb6>
 80123ba:	f108 0801 	add.w	r8, r8, #1
 80123be:	e7ec      	b.n	801239a <_printf_float+0x33a>
 80123c0:	4642      	mov	r2, r8
 80123c2:	4631      	mov	r1, r6
 80123c4:	4628      	mov	r0, r5
 80123c6:	47b8      	blx	r7
 80123c8:	3001      	adds	r0, #1
 80123ca:	d1c2      	bne.n	8012352 <_printf_float+0x2f2>
 80123cc:	e6a3      	b.n	8012116 <_printf_float+0xb6>
 80123ce:	2301      	movs	r3, #1
 80123d0:	4631      	mov	r1, r6
 80123d2:	4628      	mov	r0, r5
 80123d4:	9206      	str	r2, [sp, #24]
 80123d6:	47b8      	blx	r7
 80123d8:	3001      	adds	r0, #1
 80123da:	f43f ae9c 	beq.w	8012116 <_printf_float+0xb6>
 80123de:	9a06      	ldr	r2, [sp, #24]
 80123e0:	f10b 0b01 	add.w	fp, fp, #1
 80123e4:	e7bb      	b.n	801235e <_printf_float+0x2fe>
 80123e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123ea:	4631      	mov	r1, r6
 80123ec:	4628      	mov	r0, r5
 80123ee:	47b8      	blx	r7
 80123f0:	3001      	adds	r0, #1
 80123f2:	d1c0      	bne.n	8012376 <_printf_float+0x316>
 80123f4:	e68f      	b.n	8012116 <_printf_float+0xb6>
 80123f6:	9a06      	ldr	r2, [sp, #24]
 80123f8:	464b      	mov	r3, r9
 80123fa:	4442      	add	r2, r8
 80123fc:	4631      	mov	r1, r6
 80123fe:	4628      	mov	r0, r5
 8012400:	47b8      	blx	r7
 8012402:	3001      	adds	r0, #1
 8012404:	d1c3      	bne.n	801238e <_printf_float+0x32e>
 8012406:	e686      	b.n	8012116 <_printf_float+0xb6>
 8012408:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801240c:	f1ba 0f01 	cmp.w	sl, #1
 8012410:	dc01      	bgt.n	8012416 <_printf_float+0x3b6>
 8012412:	07db      	lsls	r3, r3, #31
 8012414:	d536      	bpl.n	8012484 <_printf_float+0x424>
 8012416:	2301      	movs	r3, #1
 8012418:	4642      	mov	r2, r8
 801241a:	4631      	mov	r1, r6
 801241c:	4628      	mov	r0, r5
 801241e:	47b8      	blx	r7
 8012420:	3001      	adds	r0, #1
 8012422:	f43f ae78 	beq.w	8012116 <_printf_float+0xb6>
 8012426:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801242a:	4631      	mov	r1, r6
 801242c:	4628      	mov	r0, r5
 801242e:	47b8      	blx	r7
 8012430:	3001      	adds	r0, #1
 8012432:	f43f ae70 	beq.w	8012116 <_printf_float+0xb6>
 8012436:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801243a:	2200      	movs	r2, #0
 801243c:	2300      	movs	r3, #0
 801243e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012442:	f7ee fb19 	bl	8000a78 <__aeabi_dcmpeq>
 8012446:	b9c0      	cbnz	r0, 801247a <_printf_float+0x41a>
 8012448:	4653      	mov	r3, sl
 801244a:	f108 0201 	add.w	r2, r8, #1
 801244e:	4631      	mov	r1, r6
 8012450:	4628      	mov	r0, r5
 8012452:	47b8      	blx	r7
 8012454:	3001      	adds	r0, #1
 8012456:	d10c      	bne.n	8012472 <_printf_float+0x412>
 8012458:	e65d      	b.n	8012116 <_printf_float+0xb6>
 801245a:	2301      	movs	r3, #1
 801245c:	465a      	mov	r2, fp
 801245e:	4631      	mov	r1, r6
 8012460:	4628      	mov	r0, r5
 8012462:	47b8      	blx	r7
 8012464:	3001      	adds	r0, #1
 8012466:	f43f ae56 	beq.w	8012116 <_printf_float+0xb6>
 801246a:	f108 0801 	add.w	r8, r8, #1
 801246e:	45d0      	cmp	r8, sl
 8012470:	dbf3      	blt.n	801245a <_printf_float+0x3fa>
 8012472:	464b      	mov	r3, r9
 8012474:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012478:	e6df      	b.n	801223a <_printf_float+0x1da>
 801247a:	f04f 0800 	mov.w	r8, #0
 801247e:	f104 0b1a 	add.w	fp, r4, #26
 8012482:	e7f4      	b.n	801246e <_printf_float+0x40e>
 8012484:	2301      	movs	r3, #1
 8012486:	4642      	mov	r2, r8
 8012488:	e7e1      	b.n	801244e <_printf_float+0x3ee>
 801248a:	2301      	movs	r3, #1
 801248c:	464a      	mov	r2, r9
 801248e:	4631      	mov	r1, r6
 8012490:	4628      	mov	r0, r5
 8012492:	47b8      	blx	r7
 8012494:	3001      	adds	r0, #1
 8012496:	f43f ae3e 	beq.w	8012116 <_printf_float+0xb6>
 801249a:	f108 0801 	add.w	r8, r8, #1
 801249e:	68e3      	ldr	r3, [r4, #12]
 80124a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124a2:	1a5b      	subs	r3, r3, r1
 80124a4:	4543      	cmp	r3, r8
 80124a6:	dcf0      	bgt.n	801248a <_printf_float+0x42a>
 80124a8:	e6fc      	b.n	80122a4 <_printf_float+0x244>
 80124aa:	f04f 0800 	mov.w	r8, #0
 80124ae:	f104 0919 	add.w	r9, r4, #25
 80124b2:	e7f4      	b.n	801249e <_printf_float+0x43e>

080124b4 <_printf_common>:
 80124b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124b8:	4616      	mov	r6, r2
 80124ba:	4698      	mov	r8, r3
 80124bc:	688a      	ldr	r2, [r1, #8]
 80124be:	690b      	ldr	r3, [r1, #16]
 80124c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80124c4:	4293      	cmp	r3, r2
 80124c6:	bfb8      	it	lt
 80124c8:	4613      	movlt	r3, r2
 80124ca:	6033      	str	r3, [r6, #0]
 80124cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80124d0:	4607      	mov	r7, r0
 80124d2:	460c      	mov	r4, r1
 80124d4:	b10a      	cbz	r2, 80124da <_printf_common+0x26>
 80124d6:	3301      	adds	r3, #1
 80124d8:	6033      	str	r3, [r6, #0]
 80124da:	6823      	ldr	r3, [r4, #0]
 80124dc:	0699      	lsls	r1, r3, #26
 80124de:	bf42      	ittt	mi
 80124e0:	6833      	ldrmi	r3, [r6, #0]
 80124e2:	3302      	addmi	r3, #2
 80124e4:	6033      	strmi	r3, [r6, #0]
 80124e6:	6825      	ldr	r5, [r4, #0]
 80124e8:	f015 0506 	ands.w	r5, r5, #6
 80124ec:	d106      	bne.n	80124fc <_printf_common+0x48>
 80124ee:	f104 0a19 	add.w	sl, r4, #25
 80124f2:	68e3      	ldr	r3, [r4, #12]
 80124f4:	6832      	ldr	r2, [r6, #0]
 80124f6:	1a9b      	subs	r3, r3, r2
 80124f8:	42ab      	cmp	r3, r5
 80124fa:	dc26      	bgt.n	801254a <_printf_common+0x96>
 80124fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012500:	6822      	ldr	r2, [r4, #0]
 8012502:	3b00      	subs	r3, #0
 8012504:	bf18      	it	ne
 8012506:	2301      	movne	r3, #1
 8012508:	0692      	lsls	r2, r2, #26
 801250a:	d42b      	bmi.n	8012564 <_printf_common+0xb0>
 801250c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012510:	4641      	mov	r1, r8
 8012512:	4638      	mov	r0, r7
 8012514:	47c8      	blx	r9
 8012516:	3001      	adds	r0, #1
 8012518:	d01e      	beq.n	8012558 <_printf_common+0xa4>
 801251a:	6823      	ldr	r3, [r4, #0]
 801251c:	6922      	ldr	r2, [r4, #16]
 801251e:	f003 0306 	and.w	r3, r3, #6
 8012522:	2b04      	cmp	r3, #4
 8012524:	bf02      	ittt	eq
 8012526:	68e5      	ldreq	r5, [r4, #12]
 8012528:	6833      	ldreq	r3, [r6, #0]
 801252a:	1aed      	subeq	r5, r5, r3
 801252c:	68a3      	ldr	r3, [r4, #8]
 801252e:	bf0c      	ite	eq
 8012530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012534:	2500      	movne	r5, #0
 8012536:	4293      	cmp	r3, r2
 8012538:	bfc4      	itt	gt
 801253a:	1a9b      	subgt	r3, r3, r2
 801253c:	18ed      	addgt	r5, r5, r3
 801253e:	2600      	movs	r6, #0
 8012540:	341a      	adds	r4, #26
 8012542:	42b5      	cmp	r5, r6
 8012544:	d11a      	bne.n	801257c <_printf_common+0xc8>
 8012546:	2000      	movs	r0, #0
 8012548:	e008      	b.n	801255c <_printf_common+0xa8>
 801254a:	2301      	movs	r3, #1
 801254c:	4652      	mov	r2, sl
 801254e:	4641      	mov	r1, r8
 8012550:	4638      	mov	r0, r7
 8012552:	47c8      	blx	r9
 8012554:	3001      	adds	r0, #1
 8012556:	d103      	bne.n	8012560 <_printf_common+0xac>
 8012558:	f04f 30ff 	mov.w	r0, #4294967295
 801255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012560:	3501      	adds	r5, #1
 8012562:	e7c6      	b.n	80124f2 <_printf_common+0x3e>
 8012564:	18e1      	adds	r1, r4, r3
 8012566:	1c5a      	adds	r2, r3, #1
 8012568:	2030      	movs	r0, #48	@ 0x30
 801256a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801256e:	4422      	add	r2, r4
 8012570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012578:	3302      	adds	r3, #2
 801257a:	e7c7      	b.n	801250c <_printf_common+0x58>
 801257c:	2301      	movs	r3, #1
 801257e:	4622      	mov	r2, r4
 8012580:	4641      	mov	r1, r8
 8012582:	4638      	mov	r0, r7
 8012584:	47c8      	blx	r9
 8012586:	3001      	adds	r0, #1
 8012588:	d0e6      	beq.n	8012558 <_printf_common+0xa4>
 801258a:	3601      	adds	r6, #1
 801258c:	e7d9      	b.n	8012542 <_printf_common+0x8e>
	...

08012590 <_printf_i>:
 8012590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012594:	7e0f      	ldrb	r7, [r1, #24]
 8012596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012598:	2f78      	cmp	r7, #120	@ 0x78
 801259a:	4691      	mov	r9, r2
 801259c:	4680      	mov	r8, r0
 801259e:	460c      	mov	r4, r1
 80125a0:	469a      	mov	sl, r3
 80125a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80125a6:	d807      	bhi.n	80125b8 <_printf_i+0x28>
 80125a8:	2f62      	cmp	r7, #98	@ 0x62
 80125aa:	d80a      	bhi.n	80125c2 <_printf_i+0x32>
 80125ac:	2f00      	cmp	r7, #0
 80125ae:	f000 80d2 	beq.w	8012756 <_printf_i+0x1c6>
 80125b2:	2f58      	cmp	r7, #88	@ 0x58
 80125b4:	f000 80b9 	beq.w	801272a <_printf_i+0x19a>
 80125b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80125bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80125c0:	e03a      	b.n	8012638 <_printf_i+0xa8>
 80125c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80125c6:	2b15      	cmp	r3, #21
 80125c8:	d8f6      	bhi.n	80125b8 <_printf_i+0x28>
 80125ca:	a101      	add	r1, pc, #4	@ (adr r1, 80125d0 <_printf_i+0x40>)
 80125cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80125d0:	08012629 	.word	0x08012629
 80125d4:	0801263d 	.word	0x0801263d
 80125d8:	080125b9 	.word	0x080125b9
 80125dc:	080125b9 	.word	0x080125b9
 80125e0:	080125b9 	.word	0x080125b9
 80125e4:	080125b9 	.word	0x080125b9
 80125e8:	0801263d 	.word	0x0801263d
 80125ec:	080125b9 	.word	0x080125b9
 80125f0:	080125b9 	.word	0x080125b9
 80125f4:	080125b9 	.word	0x080125b9
 80125f8:	080125b9 	.word	0x080125b9
 80125fc:	0801273d 	.word	0x0801273d
 8012600:	08012667 	.word	0x08012667
 8012604:	080126f7 	.word	0x080126f7
 8012608:	080125b9 	.word	0x080125b9
 801260c:	080125b9 	.word	0x080125b9
 8012610:	0801275f 	.word	0x0801275f
 8012614:	080125b9 	.word	0x080125b9
 8012618:	08012667 	.word	0x08012667
 801261c:	080125b9 	.word	0x080125b9
 8012620:	080125b9 	.word	0x080125b9
 8012624:	080126ff 	.word	0x080126ff
 8012628:	6833      	ldr	r3, [r6, #0]
 801262a:	1d1a      	adds	r2, r3, #4
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	6032      	str	r2, [r6, #0]
 8012630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012638:	2301      	movs	r3, #1
 801263a:	e09d      	b.n	8012778 <_printf_i+0x1e8>
 801263c:	6833      	ldr	r3, [r6, #0]
 801263e:	6820      	ldr	r0, [r4, #0]
 8012640:	1d19      	adds	r1, r3, #4
 8012642:	6031      	str	r1, [r6, #0]
 8012644:	0606      	lsls	r6, r0, #24
 8012646:	d501      	bpl.n	801264c <_printf_i+0xbc>
 8012648:	681d      	ldr	r5, [r3, #0]
 801264a:	e003      	b.n	8012654 <_printf_i+0xc4>
 801264c:	0645      	lsls	r5, r0, #25
 801264e:	d5fb      	bpl.n	8012648 <_printf_i+0xb8>
 8012650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012654:	2d00      	cmp	r5, #0
 8012656:	da03      	bge.n	8012660 <_printf_i+0xd0>
 8012658:	232d      	movs	r3, #45	@ 0x2d
 801265a:	426d      	negs	r5, r5
 801265c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012660:	4859      	ldr	r0, [pc, #356]	@ (80127c8 <_printf_i+0x238>)
 8012662:	230a      	movs	r3, #10
 8012664:	e011      	b.n	801268a <_printf_i+0xfa>
 8012666:	6821      	ldr	r1, [r4, #0]
 8012668:	6833      	ldr	r3, [r6, #0]
 801266a:	0608      	lsls	r0, r1, #24
 801266c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012670:	d402      	bmi.n	8012678 <_printf_i+0xe8>
 8012672:	0649      	lsls	r1, r1, #25
 8012674:	bf48      	it	mi
 8012676:	b2ad      	uxthmi	r5, r5
 8012678:	2f6f      	cmp	r7, #111	@ 0x6f
 801267a:	4853      	ldr	r0, [pc, #332]	@ (80127c8 <_printf_i+0x238>)
 801267c:	6033      	str	r3, [r6, #0]
 801267e:	bf14      	ite	ne
 8012680:	230a      	movne	r3, #10
 8012682:	2308      	moveq	r3, #8
 8012684:	2100      	movs	r1, #0
 8012686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801268a:	6866      	ldr	r6, [r4, #4]
 801268c:	60a6      	str	r6, [r4, #8]
 801268e:	2e00      	cmp	r6, #0
 8012690:	bfa2      	ittt	ge
 8012692:	6821      	ldrge	r1, [r4, #0]
 8012694:	f021 0104 	bicge.w	r1, r1, #4
 8012698:	6021      	strge	r1, [r4, #0]
 801269a:	b90d      	cbnz	r5, 80126a0 <_printf_i+0x110>
 801269c:	2e00      	cmp	r6, #0
 801269e:	d04b      	beq.n	8012738 <_printf_i+0x1a8>
 80126a0:	4616      	mov	r6, r2
 80126a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80126a6:	fb03 5711 	mls	r7, r3, r1, r5
 80126aa:	5dc7      	ldrb	r7, [r0, r7]
 80126ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80126b0:	462f      	mov	r7, r5
 80126b2:	42bb      	cmp	r3, r7
 80126b4:	460d      	mov	r5, r1
 80126b6:	d9f4      	bls.n	80126a2 <_printf_i+0x112>
 80126b8:	2b08      	cmp	r3, #8
 80126ba:	d10b      	bne.n	80126d4 <_printf_i+0x144>
 80126bc:	6823      	ldr	r3, [r4, #0]
 80126be:	07df      	lsls	r7, r3, #31
 80126c0:	d508      	bpl.n	80126d4 <_printf_i+0x144>
 80126c2:	6923      	ldr	r3, [r4, #16]
 80126c4:	6861      	ldr	r1, [r4, #4]
 80126c6:	4299      	cmp	r1, r3
 80126c8:	bfde      	ittt	le
 80126ca:	2330      	movle	r3, #48	@ 0x30
 80126cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80126d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80126d4:	1b92      	subs	r2, r2, r6
 80126d6:	6122      	str	r2, [r4, #16]
 80126d8:	f8cd a000 	str.w	sl, [sp]
 80126dc:	464b      	mov	r3, r9
 80126de:	aa03      	add	r2, sp, #12
 80126e0:	4621      	mov	r1, r4
 80126e2:	4640      	mov	r0, r8
 80126e4:	f7ff fee6 	bl	80124b4 <_printf_common>
 80126e8:	3001      	adds	r0, #1
 80126ea:	d14a      	bne.n	8012782 <_printf_i+0x1f2>
 80126ec:	f04f 30ff 	mov.w	r0, #4294967295
 80126f0:	b004      	add	sp, #16
 80126f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f6:	6823      	ldr	r3, [r4, #0]
 80126f8:	f043 0320 	orr.w	r3, r3, #32
 80126fc:	6023      	str	r3, [r4, #0]
 80126fe:	4833      	ldr	r0, [pc, #204]	@ (80127cc <_printf_i+0x23c>)
 8012700:	2778      	movs	r7, #120	@ 0x78
 8012702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012706:	6823      	ldr	r3, [r4, #0]
 8012708:	6831      	ldr	r1, [r6, #0]
 801270a:	061f      	lsls	r7, r3, #24
 801270c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012710:	d402      	bmi.n	8012718 <_printf_i+0x188>
 8012712:	065f      	lsls	r7, r3, #25
 8012714:	bf48      	it	mi
 8012716:	b2ad      	uxthmi	r5, r5
 8012718:	6031      	str	r1, [r6, #0]
 801271a:	07d9      	lsls	r1, r3, #31
 801271c:	bf44      	itt	mi
 801271e:	f043 0320 	orrmi.w	r3, r3, #32
 8012722:	6023      	strmi	r3, [r4, #0]
 8012724:	b11d      	cbz	r5, 801272e <_printf_i+0x19e>
 8012726:	2310      	movs	r3, #16
 8012728:	e7ac      	b.n	8012684 <_printf_i+0xf4>
 801272a:	4827      	ldr	r0, [pc, #156]	@ (80127c8 <_printf_i+0x238>)
 801272c:	e7e9      	b.n	8012702 <_printf_i+0x172>
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	f023 0320 	bic.w	r3, r3, #32
 8012734:	6023      	str	r3, [r4, #0]
 8012736:	e7f6      	b.n	8012726 <_printf_i+0x196>
 8012738:	4616      	mov	r6, r2
 801273a:	e7bd      	b.n	80126b8 <_printf_i+0x128>
 801273c:	6833      	ldr	r3, [r6, #0]
 801273e:	6825      	ldr	r5, [r4, #0]
 8012740:	6961      	ldr	r1, [r4, #20]
 8012742:	1d18      	adds	r0, r3, #4
 8012744:	6030      	str	r0, [r6, #0]
 8012746:	062e      	lsls	r6, r5, #24
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	d501      	bpl.n	8012750 <_printf_i+0x1c0>
 801274c:	6019      	str	r1, [r3, #0]
 801274e:	e002      	b.n	8012756 <_printf_i+0x1c6>
 8012750:	0668      	lsls	r0, r5, #25
 8012752:	d5fb      	bpl.n	801274c <_printf_i+0x1bc>
 8012754:	8019      	strh	r1, [r3, #0]
 8012756:	2300      	movs	r3, #0
 8012758:	6123      	str	r3, [r4, #16]
 801275a:	4616      	mov	r6, r2
 801275c:	e7bc      	b.n	80126d8 <_printf_i+0x148>
 801275e:	6833      	ldr	r3, [r6, #0]
 8012760:	1d1a      	adds	r2, r3, #4
 8012762:	6032      	str	r2, [r6, #0]
 8012764:	681e      	ldr	r6, [r3, #0]
 8012766:	6862      	ldr	r2, [r4, #4]
 8012768:	2100      	movs	r1, #0
 801276a:	4630      	mov	r0, r6
 801276c:	f7ed fd08 	bl	8000180 <memchr>
 8012770:	b108      	cbz	r0, 8012776 <_printf_i+0x1e6>
 8012772:	1b80      	subs	r0, r0, r6
 8012774:	6060      	str	r0, [r4, #4]
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	6123      	str	r3, [r4, #16]
 801277a:	2300      	movs	r3, #0
 801277c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012780:	e7aa      	b.n	80126d8 <_printf_i+0x148>
 8012782:	6923      	ldr	r3, [r4, #16]
 8012784:	4632      	mov	r2, r6
 8012786:	4649      	mov	r1, r9
 8012788:	4640      	mov	r0, r8
 801278a:	47d0      	blx	sl
 801278c:	3001      	adds	r0, #1
 801278e:	d0ad      	beq.n	80126ec <_printf_i+0x15c>
 8012790:	6823      	ldr	r3, [r4, #0]
 8012792:	079b      	lsls	r3, r3, #30
 8012794:	d413      	bmi.n	80127be <_printf_i+0x22e>
 8012796:	68e0      	ldr	r0, [r4, #12]
 8012798:	9b03      	ldr	r3, [sp, #12]
 801279a:	4298      	cmp	r0, r3
 801279c:	bfb8      	it	lt
 801279e:	4618      	movlt	r0, r3
 80127a0:	e7a6      	b.n	80126f0 <_printf_i+0x160>
 80127a2:	2301      	movs	r3, #1
 80127a4:	4632      	mov	r2, r6
 80127a6:	4649      	mov	r1, r9
 80127a8:	4640      	mov	r0, r8
 80127aa:	47d0      	blx	sl
 80127ac:	3001      	adds	r0, #1
 80127ae:	d09d      	beq.n	80126ec <_printf_i+0x15c>
 80127b0:	3501      	adds	r5, #1
 80127b2:	68e3      	ldr	r3, [r4, #12]
 80127b4:	9903      	ldr	r1, [sp, #12]
 80127b6:	1a5b      	subs	r3, r3, r1
 80127b8:	42ab      	cmp	r3, r5
 80127ba:	dcf2      	bgt.n	80127a2 <_printf_i+0x212>
 80127bc:	e7eb      	b.n	8012796 <_printf_i+0x206>
 80127be:	2500      	movs	r5, #0
 80127c0:	f104 0619 	add.w	r6, r4, #25
 80127c4:	e7f5      	b.n	80127b2 <_printf_i+0x222>
 80127c6:	bf00      	nop
 80127c8:	08014a76 	.word	0x08014a76
 80127cc:	08014a87 	.word	0x08014a87

080127d0 <std>:
 80127d0:	2300      	movs	r3, #0
 80127d2:	b510      	push	{r4, lr}
 80127d4:	4604      	mov	r4, r0
 80127d6:	e9c0 3300 	strd	r3, r3, [r0]
 80127da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127de:	6083      	str	r3, [r0, #8]
 80127e0:	8181      	strh	r1, [r0, #12]
 80127e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80127e4:	81c2      	strh	r2, [r0, #14]
 80127e6:	6183      	str	r3, [r0, #24]
 80127e8:	4619      	mov	r1, r3
 80127ea:	2208      	movs	r2, #8
 80127ec:	305c      	adds	r0, #92	@ 0x5c
 80127ee:	f000 f90e 	bl	8012a0e <memset>
 80127f2:	4b0d      	ldr	r3, [pc, #52]	@ (8012828 <std+0x58>)
 80127f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80127f6:	4b0d      	ldr	r3, [pc, #52]	@ (801282c <std+0x5c>)
 80127f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80127fa:	4b0d      	ldr	r3, [pc, #52]	@ (8012830 <std+0x60>)
 80127fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80127fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012834 <std+0x64>)
 8012800:	6323      	str	r3, [r4, #48]	@ 0x30
 8012802:	4b0d      	ldr	r3, [pc, #52]	@ (8012838 <std+0x68>)
 8012804:	6224      	str	r4, [r4, #32]
 8012806:	429c      	cmp	r4, r3
 8012808:	d006      	beq.n	8012818 <std+0x48>
 801280a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801280e:	4294      	cmp	r4, r2
 8012810:	d002      	beq.n	8012818 <std+0x48>
 8012812:	33d0      	adds	r3, #208	@ 0xd0
 8012814:	429c      	cmp	r4, r3
 8012816:	d105      	bne.n	8012824 <std+0x54>
 8012818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801281c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012820:	f000 b972 	b.w	8012b08 <__retarget_lock_init_recursive>
 8012824:	bd10      	pop	{r4, pc}
 8012826:	bf00      	nop
 8012828:	08012989 	.word	0x08012989
 801282c:	080129ab 	.word	0x080129ab
 8012830:	080129e3 	.word	0x080129e3
 8012834:	08012a07 	.word	0x08012a07
 8012838:	20002380 	.word	0x20002380

0801283c <stdio_exit_handler>:
 801283c:	4a02      	ldr	r2, [pc, #8]	@ (8012848 <stdio_exit_handler+0xc>)
 801283e:	4903      	ldr	r1, [pc, #12]	@ (801284c <stdio_exit_handler+0x10>)
 8012840:	4803      	ldr	r0, [pc, #12]	@ (8012850 <stdio_exit_handler+0x14>)
 8012842:	f000 b869 	b.w	8012918 <_fwalk_sglue>
 8012846:	bf00      	nop
 8012848:	20000128 	.word	0x20000128
 801284c:	08014459 	.word	0x08014459
 8012850:	20000138 	.word	0x20000138

08012854 <cleanup_stdio>:
 8012854:	6841      	ldr	r1, [r0, #4]
 8012856:	4b0c      	ldr	r3, [pc, #48]	@ (8012888 <cleanup_stdio+0x34>)
 8012858:	4299      	cmp	r1, r3
 801285a:	b510      	push	{r4, lr}
 801285c:	4604      	mov	r4, r0
 801285e:	d001      	beq.n	8012864 <cleanup_stdio+0x10>
 8012860:	f001 fdfa 	bl	8014458 <_fflush_r>
 8012864:	68a1      	ldr	r1, [r4, #8]
 8012866:	4b09      	ldr	r3, [pc, #36]	@ (801288c <cleanup_stdio+0x38>)
 8012868:	4299      	cmp	r1, r3
 801286a:	d002      	beq.n	8012872 <cleanup_stdio+0x1e>
 801286c:	4620      	mov	r0, r4
 801286e:	f001 fdf3 	bl	8014458 <_fflush_r>
 8012872:	68e1      	ldr	r1, [r4, #12]
 8012874:	4b06      	ldr	r3, [pc, #24]	@ (8012890 <cleanup_stdio+0x3c>)
 8012876:	4299      	cmp	r1, r3
 8012878:	d004      	beq.n	8012884 <cleanup_stdio+0x30>
 801287a:	4620      	mov	r0, r4
 801287c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012880:	f001 bdea 	b.w	8014458 <_fflush_r>
 8012884:	bd10      	pop	{r4, pc}
 8012886:	bf00      	nop
 8012888:	20002380 	.word	0x20002380
 801288c:	200023e8 	.word	0x200023e8
 8012890:	20002450 	.word	0x20002450

08012894 <global_stdio_init.part.0>:
 8012894:	b510      	push	{r4, lr}
 8012896:	4b0b      	ldr	r3, [pc, #44]	@ (80128c4 <global_stdio_init.part.0+0x30>)
 8012898:	4c0b      	ldr	r4, [pc, #44]	@ (80128c8 <global_stdio_init.part.0+0x34>)
 801289a:	4a0c      	ldr	r2, [pc, #48]	@ (80128cc <global_stdio_init.part.0+0x38>)
 801289c:	601a      	str	r2, [r3, #0]
 801289e:	4620      	mov	r0, r4
 80128a0:	2200      	movs	r2, #0
 80128a2:	2104      	movs	r1, #4
 80128a4:	f7ff ff94 	bl	80127d0 <std>
 80128a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80128ac:	2201      	movs	r2, #1
 80128ae:	2109      	movs	r1, #9
 80128b0:	f7ff ff8e 	bl	80127d0 <std>
 80128b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80128b8:	2202      	movs	r2, #2
 80128ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128be:	2112      	movs	r1, #18
 80128c0:	f7ff bf86 	b.w	80127d0 <std>
 80128c4:	200024b8 	.word	0x200024b8
 80128c8:	20002380 	.word	0x20002380
 80128cc:	0801283d 	.word	0x0801283d

080128d0 <__sfp_lock_acquire>:
 80128d0:	4801      	ldr	r0, [pc, #4]	@ (80128d8 <__sfp_lock_acquire+0x8>)
 80128d2:	f000 b91a 	b.w	8012b0a <__retarget_lock_acquire_recursive>
 80128d6:	bf00      	nop
 80128d8:	200024c1 	.word	0x200024c1

080128dc <__sfp_lock_release>:
 80128dc:	4801      	ldr	r0, [pc, #4]	@ (80128e4 <__sfp_lock_release+0x8>)
 80128de:	f000 b915 	b.w	8012b0c <__retarget_lock_release_recursive>
 80128e2:	bf00      	nop
 80128e4:	200024c1 	.word	0x200024c1

080128e8 <__sinit>:
 80128e8:	b510      	push	{r4, lr}
 80128ea:	4604      	mov	r4, r0
 80128ec:	f7ff fff0 	bl	80128d0 <__sfp_lock_acquire>
 80128f0:	6a23      	ldr	r3, [r4, #32]
 80128f2:	b11b      	cbz	r3, 80128fc <__sinit+0x14>
 80128f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128f8:	f7ff bff0 	b.w	80128dc <__sfp_lock_release>
 80128fc:	4b04      	ldr	r3, [pc, #16]	@ (8012910 <__sinit+0x28>)
 80128fe:	6223      	str	r3, [r4, #32]
 8012900:	4b04      	ldr	r3, [pc, #16]	@ (8012914 <__sinit+0x2c>)
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d1f5      	bne.n	80128f4 <__sinit+0xc>
 8012908:	f7ff ffc4 	bl	8012894 <global_stdio_init.part.0>
 801290c:	e7f2      	b.n	80128f4 <__sinit+0xc>
 801290e:	bf00      	nop
 8012910:	08012855 	.word	0x08012855
 8012914:	200024b8 	.word	0x200024b8

08012918 <_fwalk_sglue>:
 8012918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801291c:	4607      	mov	r7, r0
 801291e:	4688      	mov	r8, r1
 8012920:	4614      	mov	r4, r2
 8012922:	2600      	movs	r6, #0
 8012924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012928:	f1b9 0901 	subs.w	r9, r9, #1
 801292c:	d505      	bpl.n	801293a <_fwalk_sglue+0x22>
 801292e:	6824      	ldr	r4, [r4, #0]
 8012930:	2c00      	cmp	r4, #0
 8012932:	d1f7      	bne.n	8012924 <_fwalk_sglue+0xc>
 8012934:	4630      	mov	r0, r6
 8012936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801293a:	89ab      	ldrh	r3, [r5, #12]
 801293c:	2b01      	cmp	r3, #1
 801293e:	d907      	bls.n	8012950 <_fwalk_sglue+0x38>
 8012940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012944:	3301      	adds	r3, #1
 8012946:	d003      	beq.n	8012950 <_fwalk_sglue+0x38>
 8012948:	4629      	mov	r1, r5
 801294a:	4638      	mov	r0, r7
 801294c:	47c0      	blx	r8
 801294e:	4306      	orrs	r6, r0
 8012950:	3568      	adds	r5, #104	@ 0x68
 8012952:	e7e9      	b.n	8012928 <_fwalk_sglue+0x10>

08012954 <iprintf>:
 8012954:	b40f      	push	{r0, r1, r2, r3}
 8012956:	b507      	push	{r0, r1, r2, lr}
 8012958:	4906      	ldr	r1, [pc, #24]	@ (8012974 <iprintf+0x20>)
 801295a:	ab04      	add	r3, sp, #16
 801295c:	6808      	ldr	r0, [r1, #0]
 801295e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012962:	6881      	ldr	r1, [r0, #8]
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	f001 fbdb 	bl	8014120 <_vfiprintf_r>
 801296a:	b003      	add	sp, #12
 801296c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012970:	b004      	add	sp, #16
 8012972:	4770      	bx	lr
 8012974:	20000134 	.word	0x20000134

08012978 <putchar>:
 8012978:	4b02      	ldr	r3, [pc, #8]	@ (8012984 <putchar+0xc>)
 801297a:	4601      	mov	r1, r0
 801297c:	6818      	ldr	r0, [r3, #0]
 801297e:	6882      	ldr	r2, [r0, #8]
 8012980:	f001 bd92 	b.w	80144a8 <_putc_r>
 8012984:	20000134 	.word	0x20000134

08012988 <__sread>:
 8012988:	b510      	push	{r4, lr}
 801298a:	460c      	mov	r4, r1
 801298c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012990:	f000 f86c 	bl	8012a6c <_read_r>
 8012994:	2800      	cmp	r0, #0
 8012996:	bfab      	itete	ge
 8012998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801299a:	89a3      	ldrhlt	r3, [r4, #12]
 801299c:	181b      	addge	r3, r3, r0
 801299e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80129a2:	bfac      	ite	ge
 80129a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80129a6:	81a3      	strhlt	r3, [r4, #12]
 80129a8:	bd10      	pop	{r4, pc}

080129aa <__swrite>:
 80129aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ae:	461f      	mov	r7, r3
 80129b0:	898b      	ldrh	r3, [r1, #12]
 80129b2:	05db      	lsls	r3, r3, #23
 80129b4:	4605      	mov	r5, r0
 80129b6:	460c      	mov	r4, r1
 80129b8:	4616      	mov	r6, r2
 80129ba:	d505      	bpl.n	80129c8 <__swrite+0x1e>
 80129bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129c0:	2302      	movs	r3, #2
 80129c2:	2200      	movs	r2, #0
 80129c4:	f000 f840 	bl	8012a48 <_lseek_r>
 80129c8:	89a3      	ldrh	r3, [r4, #12]
 80129ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80129d2:	81a3      	strh	r3, [r4, #12]
 80129d4:	4632      	mov	r2, r6
 80129d6:	463b      	mov	r3, r7
 80129d8:	4628      	mov	r0, r5
 80129da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129de:	f000 b857 	b.w	8012a90 <_write_r>

080129e2 <__sseek>:
 80129e2:	b510      	push	{r4, lr}
 80129e4:	460c      	mov	r4, r1
 80129e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129ea:	f000 f82d 	bl	8012a48 <_lseek_r>
 80129ee:	1c43      	adds	r3, r0, #1
 80129f0:	89a3      	ldrh	r3, [r4, #12]
 80129f2:	bf15      	itete	ne
 80129f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80129f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80129fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80129fe:	81a3      	strheq	r3, [r4, #12]
 8012a00:	bf18      	it	ne
 8012a02:	81a3      	strhne	r3, [r4, #12]
 8012a04:	bd10      	pop	{r4, pc}

08012a06 <__sclose>:
 8012a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a0a:	f000 b80d 	b.w	8012a28 <_close_r>

08012a0e <memset>:
 8012a0e:	4402      	add	r2, r0
 8012a10:	4603      	mov	r3, r0
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d100      	bne.n	8012a18 <memset+0xa>
 8012a16:	4770      	bx	lr
 8012a18:	f803 1b01 	strb.w	r1, [r3], #1
 8012a1c:	e7f9      	b.n	8012a12 <memset+0x4>
	...

08012a20 <_localeconv_r>:
 8012a20:	4800      	ldr	r0, [pc, #0]	@ (8012a24 <_localeconv_r+0x4>)
 8012a22:	4770      	bx	lr
 8012a24:	20000274 	.word	0x20000274

08012a28 <_close_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4d06      	ldr	r5, [pc, #24]	@ (8012a44 <_close_r+0x1c>)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4608      	mov	r0, r1
 8012a32:	602b      	str	r3, [r5, #0]
 8012a34:	f7f1 febc 	bl	80047b0 <_close>
 8012a38:	1c43      	adds	r3, r0, #1
 8012a3a:	d102      	bne.n	8012a42 <_close_r+0x1a>
 8012a3c:	682b      	ldr	r3, [r5, #0]
 8012a3e:	b103      	cbz	r3, 8012a42 <_close_r+0x1a>
 8012a40:	6023      	str	r3, [r4, #0]
 8012a42:	bd38      	pop	{r3, r4, r5, pc}
 8012a44:	200024bc 	.word	0x200024bc

08012a48 <_lseek_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	4d07      	ldr	r5, [pc, #28]	@ (8012a68 <_lseek_r+0x20>)
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	4608      	mov	r0, r1
 8012a50:	4611      	mov	r1, r2
 8012a52:	2200      	movs	r2, #0
 8012a54:	602a      	str	r2, [r5, #0]
 8012a56:	461a      	mov	r2, r3
 8012a58:	f7f1 fed1 	bl	80047fe <_lseek>
 8012a5c:	1c43      	adds	r3, r0, #1
 8012a5e:	d102      	bne.n	8012a66 <_lseek_r+0x1e>
 8012a60:	682b      	ldr	r3, [r5, #0]
 8012a62:	b103      	cbz	r3, 8012a66 <_lseek_r+0x1e>
 8012a64:	6023      	str	r3, [r4, #0]
 8012a66:	bd38      	pop	{r3, r4, r5, pc}
 8012a68:	200024bc 	.word	0x200024bc

08012a6c <_read_r>:
 8012a6c:	b538      	push	{r3, r4, r5, lr}
 8012a6e:	4d07      	ldr	r5, [pc, #28]	@ (8012a8c <_read_r+0x20>)
 8012a70:	4604      	mov	r4, r0
 8012a72:	4608      	mov	r0, r1
 8012a74:	4611      	mov	r1, r2
 8012a76:	2200      	movs	r2, #0
 8012a78:	602a      	str	r2, [r5, #0]
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	f7f1 fe5f 	bl	800473e <_read>
 8012a80:	1c43      	adds	r3, r0, #1
 8012a82:	d102      	bne.n	8012a8a <_read_r+0x1e>
 8012a84:	682b      	ldr	r3, [r5, #0]
 8012a86:	b103      	cbz	r3, 8012a8a <_read_r+0x1e>
 8012a88:	6023      	str	r3, [r4, #0]
 8012a8a:	bd38      	pop	{r3, r4, r5, pc}
 8012a8c:	200024bc 	.word	0x200024bc

08012a90 <_write_r>:
 8012a90:	b538      	push	{r3, r4, r5, lr}
 8012a92:	4d07      	ldr	r5, [pc, #28]	@ (8012ab0 <_write_r+0x20>)
 8012a94:	4604      	mov	r4, r0
 8012a96:	4608      	mov	r0, r1
 8012a98:	4611      	mov	r1, r2
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	602a      	str	r2, [r5, #0]
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	f7f1 fe6a 	bl	8004778 <_write>
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	d102      	bne.n	8012aae <_write_r+0x1e>
 8012aa8:	682b      	ldr	r3, [r5, #0]
 8012aaa:	b103      	cbz	r3, 8012aae <_write_r+0x1e>
 8012aac:	6023      	str	r3, [r4, #0]
 8012aae:	bd38      	pop	{r3, r4, r5, pc}
 8012ab0:	200024bc 	.word	0x200024bc

08012ab4 <__errno>:
 8012ab4:	4b01      	ldr	r3, [pc, #4]	@ (8012abc <__errno+0x8>)
 8012ab6:	6818      	ldr	r0, [r3, #0]
 8012ab8:	4770      	bx	lr
 8012aba:	bf00      	nop
 8012abc:	20000134 	.word	0x20000134

08012ac0 <__libc_init_array>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8012af8 <__libc_init_array+0x38>)
 8012ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8012afc <__libc_init_array+0x3c>)
 8012ac6:	1b64      	subs	r4, r4, r5
 8012ac8:	10a4      	asrs	r4, r4, #2
 8012aca:	2600      	movs	r6, #0
 8012acc:	42a6      	cmp	r6, r4
 8012ace:	d109      	bne.n	8012ae4 <__libc_init_array+0x24>
 8012ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8012b00 <__libc_init_array+0x40>)
 8012ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8012b04 <__libc_init_array+0x44>)
 8012ad4:	f001 fef4 	bl	80148c0 <_init>
 8012ad8:	1b64      	subs	r4, r4, r5
 8012ada:	10a4      	asrs	r4, r4, #2
 8012adc:	2600      	movs	r6, #0
 8012ade:	42a6      	cmp	r6, r4
 8012ae0:	d105      	bne.n	8012aee <__libc_init_array+0x2e>
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}
 8012ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ae8:	4798      	blx	r3
 8012aea:	3601      	adds	r6, #1
 8012aec:	e7ee      	b.n	8012acc <__libc_init_array+0xc>
 8012aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8012af2:	4798      	blx	r3
 8012af4:	3601      	adds	r6, #1
 8012af6:	e7f2      	b.n	8012ade <__libc_init_array+0x1e>
 8012af8:	08014de0 	.word	0x08014de0
 8012afc:	08014de0 	.word	0x08014de0
 8012b00:	08014de0 	.word	0x08014de0
 8012b04:	08014de4 	.word	0x08014de4

08012b08 <__retarget_lock_init_recursive>:
 8012b08:	4770      	bx	lr

08012b0a <__retarget_lock_acquire_recursive>:
 8012b0a:	4770      	bx	lr

08012b0c <__retarget_lock_release_recursive>:
 8012b0c:	4770      	bx	lr

08012b0e <memcpy>:
 8012b0e:	440a      	add	r2, r1
 8012b10:	4291      	cmp	r1, r2
 8012b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b16:	d100      	bne.n	8012b1a <memcpy+0xc>
 8012b18:	4770      	bx	lr
 8012b1a:	b510      	push	{r4, lr}
 8012b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b24:	4291      	cmp	r1, r2
 8012b26:	d1f9      	bne.n	8012b1c <memcpy+0xe>
 8012b28:	bd10      	pop	{r4, pc}

08012b2a <quorem>:
 8012b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2e:	6903      	ldr	r3, [r0, #16]
 8012b30:	690c      	ldr	r4, [r1, #16]
 8012b32:	42a3      	cmp	r3, r4
 8012b34:	4607      	mov	r7, r0
 8012b36:	db7e      	blt.n	8012c36 <quorem+0x10c>
 8012b38:	3c01      	subs	r4, #1
 8012b3a:	f101 0814 	add.w	r8, r1, #20
 8012b3e:	00a3      	lsls	r3, r4, #2
 8012b40:	f100 0514 	add.w	r5, r0, #20
 8012b44:	9300      	str	r3, [sp, #0]
 8012b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b4a:	9301      	str	r3, [sp, #4]
 8012b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012b54:	3301      	adds	r3, #1
 8012b56:	429a      	cmp	r2, r3
 8012b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012b60:	d32e      	bcc.n	8012bc0 <quorem+0x96>
 8012b62:	f04f 0a00 	mov.w	sl, #0
 8012b66:	46c4      	mov	ip, r8
 8012b68:	46ae      	mov	lr, r5
 8012b6a:	46d3      	mov	fp, sl
 8012b6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012b70:	b298      	uxth	r0, r3
 8012b72:	fb06 a000 	mla	r0, r6, r0, sl
 8012b76:	0c02      	lsrs	r2, r0, #16
 8012b78:	0c1b      	lsrs	r3, r3, #16
 8012b7a:	fb06 2303 	mla	r3, r6, r3, r2
 8012b7e:	f8de 2000 	ldr.w	r2, [lr]
 8012b82:	b280      	uxth	r0, r0
 8012b84:	b292      	uxth	r2, r2
 8012b86:	1a12      	subs	r2, r2, r0
 8012b88:	445a      	add	r2, fp
 8012b8a:	f8de 0000 	ldr.w	r0, [lr]
 8012b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012b98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012b9c:	b292      	uxth	r2, r2
 8012b9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012ba2:	45e1      	cmp	r9, ip
 8012ba4:	f84e 2b04 	str.w	r2, [lr], #4
 8012ba8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012bac:	d2de      	bcs.n	8012b6c <quorem+0x42>
 8012bae:	9b00      	ldr	r3, [sp, #0]
 8012bb0:	58eb      	ldr	r3, [r5, r3]
 8012bb2:	b92b      	cbnz	r3, 8012bc0 <quorem+0x96>
 8012bb4:	9b01      	ldr	r3, [sp, #4]
 8012bb6:	3b04      	subs	r3, #4
 8012bb8:	429d      	cmp	r5, r3
 8012bba:	461a      	mov	r2, r3
 8012bbc:	d32f      	bcc.n	8012c1e <quorem+0xf4>
 8012bbe:	613c      	str	r4, [r7, #16]
 8012bc0:	4638      	mov	r0, r7
 8012bc2:	f001 f97b 	bl	8013ebc <__mcmp>
 8012bc6:	2800      	cmp	r0, #0
 8012bc8:	db25      	blt.n	8012c16 <quorem+0xec>
 8012bca:	4629      	mov	r1, r5
 8012bcc:	2000      	movs	r0, #0
 8012bce:	f858 2b04 	ldr.w	r2, [r8], #4
 8012bd2:	f8d1 c000 	ldr.w	ip, [r1]
 8012bd6:	fa1f fe82 	uxth.w	lr, r2
 8012bda:	fa1f f38c 	uxth.w	r3, ip
 8012bde:	eba3 030e 	sub.w	r3, r3, lr
 8012be2:	4403      	add	r3, r0
 8012be4:	0c12      	lsrs	r2, r2, #16
 8012be6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012bea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012bf4:	45c1      	cmp	r9, r8
 8012bf6:	f841 3b04 	str.w	r3, [r1], #4
 8012bfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012bfe:	d2e6      	bcs.n	8012bce <quorem+0xa4>
 8012c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c08:	b922      	cbnz	r2, 8012c14 <quorem+0xea>
 8012c0a:	3b04      	subs	r3, #4
 8012c0c:	429d      	cmp	r5, r3
 8012c0e:	461a      	mov	r2, r3
 8012c10:	d30b      	bcc.n	8012c2a <quorem+0x100>
 8012c12:	613c      	str	r4, [r7, #16]
 8012c14:	3601      	adds	r6, #1
 8012c16:	4630      	mov	r0, r6
 8012c18:	b003      	add	sp, #12
 8012c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1e:	6812      	ldr	r2, [r2, #0]
 8012c20:	3b04      	subs	r3, #4
 8012c22:	2a00      	cmp	r2, #0
 8012c24:	d1cb      	bne.n	8012bbe <quorem+0x94>
 8012c26:	3c01      	subs	r4, #1
 8012c28:	e7c6      	b.n	8012bb8 <quorem+0x8e>
 8012c2a:	6812      	ldr	r2, [r2, #0]
 8012c2c:	3b04      	subs	r3, #4
 8012c2e:	2a00      	cmp	r2, #0
 8012c30:	d1ef      	bne.n	8012c12 <quorem+0xe8>
 8012c32:	3c01      	subs	r4, #1
 8012c34:	e7ea      	b.n	8012c0c <quorem+0xe2>
 8012c36:	2000      	movs	r0, #0
 8012c38:	e7ee      	b.n	8012c18 <quorem+0xee>
 8012c3a:	0000      	movs	r0, r0
 8012c3c:	0000      	movs	r0, r0
	...

08012c40 <_dtoa_r>:
 8012c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	69c7      	ldr	r7, [r0, #28]
 8012c46:	b099      	sub	sp, #100	@ 0x64
 8012c48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012c4c:	ec55 4b10 	vmov	r4, r5, d0
 8012c50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012c52:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c54:	4683      	mov	fp, r0
 8012c56:	920e      	str	r2, [sp, #56]	@ 0x38
 8012c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012c5a:	b97f      	cbnz	r7, 8012c7c <_dtoa_r+0x3c>
 8012c5c:	2010      	movs	r0, #16
 8012c5e:	f000 fdfd 	bl	801385c <malloc>
 8012c62:	4602      	mov	r2, r0
 8012c64:	f8cb 001c 	str.w	r0, [fp, #28]
 8012c68:	b920      	cbnz	r0, 8012c74 <_dtoa_r+0x34>
 8012c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8012f08 <_dtoa_r+0x2c8>)
 8012c6c:	21ef      	movs	r1, #239	@ 0xef
 8012c6e:	48a7      	ldr	r0, [pc, #668]	@ (8012f0c <_dtoa_r+0x2cc>)
 8012c70:	f001 fcf2 	bl	8014658 <__assert_func>
 8012c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012c78:	6007      	str	r7, [r0, #0]
 8012c7a:	60c7      	str	r7, [r0, #12]
 8012c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012c80:	6819      	ldr	r1, [r3, #0]
 8012c82:	b159      	cbz	r1, 8012c9c <_dtoa_r+0x5c>
 8012c84:	685a      	ldr	r2, [r3, #4]
 8012c86:	604a      	str	r2, [r1, #4]
 8012c88:	2301      	movs	r3, #1
 8012c8a:	4093      	lsls	r3, r2
 8012c8c:	608b      	str	r3, [r1, #8]
 8012c8e:	4658      	mov	r0, fp
 8012c90:	f000 feda 	bl	8013a48 <_Bfree>
 8012c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	601a      	str	r2, [r3, #0]
 8012c9c:	1e2b      	subs	r3, r5, #0
 8012c9e:	bfb9      	ittee	lt
 8012ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012ca4:	9303      	strlt	r3, [sp, #12]
 8012ca6:	2300      	movge	r3, #0
 8012ca8:	6033      	strge	r3, [r6, #0]
 8012caa:	9f03      	ldr	r7, [sp, #12]
 8012cac:	4b98      	ldr	r3, [pc, #608]	@ (8012f10 <_dtoa_r+0x2d0>)
 8012cae:	bfbc      	itt	lt
 8012cb0:	2201      	movlt	r2, #1
 8012cb2:	6032      	strlt	r2, [r6, #0]
 8012cb4:	43bb      	bics	r3, r7
 8012cb6:	d112      	bne.n	8012cde <_dtoa_r+0x9e>
 8012cb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012cbe:	6013      	str	r3, [r2, #0]
 8012cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012cc4:	4323      	orrs	r3, r4
 8012cc6:	f000 854d 	beq.w	8013764 <_dtoa_r+0xb24>
 8012cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012ccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012f24 <_dtoa_r+0x2e4>
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	f000 854f 	beq.w	8013774 <_dtoa_r+0xb34>
 8012cd6:	f10a 0303 	add.w	r3, sl, #3
 8012cda:	f000 bd49 	b.w	8013770 <_dtoa_r+0xb30>
 8012cde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	ec51 0b17 	vmov	r0, r1, d7
 8012ce8:	2300      	movs	r3, #0
 8012cea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012cee:	f7ed fec3 	bl	8000a78 <__aeabi_dcmpeq>
 8012cf2:	4680      	mov	r8, r0
 8012cf4:	b158      	cbz	r0, 8012d0e <_dtoa_r+0xce>
 8012cf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	6013      	str	r3, [r2, #0]
 8012cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012cfe:	b113      	cbz	r3, 8012d06 <_dtoa_r+0xc6>
 8012d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d02:	4b84      	ldr	r3, [pc, #528]	@ (8012f14 <_dtoa_r+0x2d4>)
 8012d04:	6013      	str	r3, [r2, #0]
 8012d06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012f28 <_dtoa_r+0x2e8>
 8012d0a:	f000 bd33 	b.w	8013774 <_dtoa_r+0xb34>
 8012d0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012d12:	aa16      	add	r2, sp, #88	@ 0x58
 8012d14:	a917      	add	r1, sp, #92	@ 0x5c
 8012d16:	4658      	mov	r0, fp
 8012d18:	f001 f980 	bl	801401c <__d2b>
 8012d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012d20:	4681      	mov	r9, r0
 8012d22:	2e00      	cmp	r6, #0
 8012d24:	d077      	beq.n	8012e16 <_dtoa_r+0x1d6>
 8012d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012d40:	4619      	mov	r1, r3
 8012d42:	2200      	movs	r2, #0
 8012d44:	4b74      	ldr	r3, [pc, #464]	@ (8012f18 <_dtoa_r+0x2d8>)
 8012d46:	f7ed fa77 	bl	8000238 <__aeabi_dsub>
 8012d4a:	a369      	add	r3, pc, #420	@ (adr r3, 8012ef0 <_dtoa_r+0x2b0>)
 8012d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d50:	f7ed fc2a 	bl	80005a8 <__aeabi_dmul>
 8012d54:	a368      	add	r3, pc, #416	@ (adr r3, 8012ef8 <_dtoa_r+0x2b8>)
 8012d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5a:	f7ed fa6f 	bl	800023c <__adddf3>
 8012d5e:	4604      	mov	r4, r0
 8012d60:	4630      	mov	r0, r6
 8012d62:	460d      	mov	r5, r1
 8012d64:	f7ed fbb6 	bl	80004d4 <__aeabi_i2d>
 8012d68:	a365      	add	r3, pc, #404	@ (adr r3, 8012f00 <_dtoa_r+0x2c0>)
 8012d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6e:	f7ed fc1b 	bl	80005a8 <__aeabi_dmul>
 8012d72:	4602      	mov	r2, r0
 8012d74:	460b      	mov	r3, r1
 8012d76:	4620      	mov	r0, r4
 8012d78:	4629      	mov	r1, r5
 8012d7a:	f7ed fa5f 	bl	800023c <__adddf3>
 8012d7e:	4604      	mov	r4, r0
 8012d80:	460d      	mov	r5, r1
 8012d82:	f7ed fec1 	bl	8000b08 <__aeabi_d2iz>
 8012d86:	2200      	movs	r2, #0
 8012d88:	4607      	mov	r7, r0
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	4620      	mov	r0, r4
 8012d8e:	4629      	mov	r1, r5
 8012d90:	f7ed fe7c 	bl	8000a8c <__aeabi_dcmplt>
 8012d94:	b140      	cbz	r0, 8012da8 <_dtoa_r+0x168>
 8012d96:	4638      	mov	r0, r7
 8012d98:	f7ed fb9c 	bl	80004d4 <__aeabi_i2d>
 8012d9c:	4622      	mov	r2, r4
 8012d9e:	462b      	mov	r3, r5
 8012da0:	f7ed fe6a 	bl	8000a78 <__aeabi_dcmpeq>
 8012da4:	b900      	cbnz	r0, 8012da8 <_dtoa_r+0x168>
 8012da6:	3f01      	subs	r7, #1
 8012da8:	2f16      	cmp	r7, #22
 8012daa:	d851      	bhi.n	8012e50 <_dtoa_r+0x210>
 8012dac:	4b5b      	ldr	r3, [pc, #364]	@ (8012f1c <_dtoa_r+0x2dc>)
 8012dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012dba:	f7ed fe67 	bl	8000a8c <__aeabi_dcmplt>
 8012dbe:	2800      	cmp	r0, #0
 8012dc0:	d048      	beq.n	8012e54 <_dtoa_r+0x214>
 8012dc2:	3f01      	subs	r7, #1
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8012dc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012dca:	1b9b      	subs	r3, r3, r6
 8012dcc:	1e5a      	subs	r2, r3, #1
 8012dce:	bf44      	itt	mi
 8012dd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8012dd4:	2300      	movmi	r3, #0
 8012dd6:	9208      	str	r2, [sp, #32]
 8012dd8:	bf54      	ite	pl
 8012dda:	f04f 0800 	movpl.w	r8, #0
 8012dde:	9308      	strmi	r3, [sp, #32]
 8012de0:	2f00      	cmp	r7, #0
 8012de2:	db39      	blt.n	8012e58 <_dtoa_r+0x218>
 8012de4:	9b08      	ldr	r3, [sp, #32]
 8012de6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012de8:	443b      	add	r3, r7
 8012dea:	9308      	str	r3, [sp, #32]
 8012dec:	2300      	movs	r3, #0
 8012dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8012df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012df2:	2b09      	cmp	r3, #9
 8012df4:	d864      	bhi.n	8012ec0 <_dtoa_r+0x280>
 8012df6:	2b05      	cmp	r3, #5
 8012df8:	bfc4      	itt	gt
 8012dfa:	3b04      	subgt	r3, #4
 8012dfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e00:	f1a3 0302 	sub.w	r3, r3, #2
 8012e04:	bfcc      	ite	gt
 8012e06:	2400      	movgt	r4, #0
 8012e08:	2401      	movle	r4, #1
 8012e0a:	2b03      	cmp	r3, #3
 8012e0c:	d863      	bhi.n	8012ed6 <_dtoa_r+0x296>
 8012e0e:	e8df f003 	tbb	[pc, r3]
 8012e12:	372a      	.short	0x372a
 8012e14:	5535      	.short	0x5535
 8012e16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012e1a:	441e      	add	r6, r3
 8012e1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012e20:	2b20      	cmp	r3, #32
 8012e22:	bfc1      	itttt	gt
 8012e24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012e28:	409f      	lslgt	r7, r3
 8012e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012e32:	bfd6      	itet	le
 8012e34:	f1c3 0320 	rsble	r3, r3, #32
 8012e38:	ea47 0003 	orrgt.w	r0, r7, r3
 8012e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8012e40:	f7ed fb38 	bl	80004b4 <__aeabi_ui2d>
 8012e44:	2201      	movs	r2, #1
 8012e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012e4a:	3e01      	subs	r6, #1
 8012e4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8012e4e:	e777      	b.n	8012d40 <_dtoa_r+0x100>
 8012e50:	2301      	movs	r3, #1
 8012e52:	e7b8      	b.n	8012dc6 <_dtoa_r+0x186>
 8012e54:	9012      	str	r0, [sp, #72]	@ 0x48
 8012e56:	e7b7      	b.n	8012dc8 <_dtoa_r+0x188>
 8012e58:	427b      	negs	r3, r7
 8012e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	eba8 0807 	sub.w	r8, r8, r7
 8012e62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012e64:	e7c4      	b.n	8012df0 <_dtoa_r+0x1b0>
 8012e66:	2300      	movs	r3, #0
 8012e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	dc35      	bgt.n	8012edc <_dtoa_r+0x29c>
 8012e70:	2301      	movs	r3, #1
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	9307      	str	r3, [sp, #28]
 8012e76:	461a      	mov	r2, r3
 8012e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8012e7a:	e00b      	b.n	8012e94 <_dtoa_r+0x254>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e7f3      	b.n	8012e68 <_dtoa_r+0x228>
 8012e80:	2300      	movs	r3, #0
 8012e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e86:	18fb      	adds	r3, r7, r3
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	3301      	adds	r3, #1
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	9307      	str	r3, [sp, #28]
 8012e90:	bfb8      	it	lt
 8012e92:	2301      	movlt	r3, #1
 8012e94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012e98:	2100      	movs	r1, #0
 8012e9a:	2204      	movs	r2, #4
 8012e9c:	f102 0514 	add.w	r5, r2, #20
 8012ea0:	429d      	cmp	r5, r3
 8012ea2:	d91f      	bls.n	8012ee4 <_dtoa_r+0x2a4>
 8012ea4:	6041      	str	r1, [r0, #4]
 8012ea6:	4658      	mov	r0, fp
 8012ea8:	f000 fd8e 	bl	80139c8 <_Balloc>
 8012eac:	4682      	mov	sl, r0
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	d13c      	bne.n	8012f2c <_dtoa_r+0x2ec>
 8012eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8012f20 <_dtoa_r+0x2e0>)
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012eba:	e6d8      	b.n	8012c6e <_dtoa_r+0x2e>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e7e0      	b.n	8012e82 <_dtoa_r+0x242>
 8012ec0:	2401      	movs	r4, #1
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	9307      	str	r3, [sp, #28]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	2312      	movs	r3, #18
 8012ed4:	e7d0      	b.n	8012e78 <_dtoa_r+0x238>
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012eda:	e7f5      	b.n	8012ec8 <_dtoa_r+0x288>
 8012edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	9307      	str	r3, [sp, #28]
 8012ee2:	e7d7      	b.n	8012e94 <_dtoa_r+0x254>
 8012ee4:	3101      	adds	r1, #1
 8012ee6:	0052      	lsls	r2, r2, #1
 8012ee8:	e7d8      	b.n	8012e9c <_dtoa_r+0x25c>
 8012eea:	bf00      	nop
 8012eec:	f3af 8000 	nop.w
 8012ef0:	636f4361 	.word	0x636f4361
 8012ef4:	3fd287a7 	.word	0x3fd287a7
 8012ef8:	8b60c8b3 	.word	0x8b60c8b3
 8012efc:	3fc68a28 	.word	0x3fc68a28
 8012f00:	509f79fb 	.word	0x509f79fb
 8012f04:	3fd34413 	.word	0x3fd34413
 8012f08:	08014aa5 	.word	0x08014aa5
 8012f0c:	08014abc 	.word	0x08014abc
 8012f10:	7ff00000 	.word	0x7ff00000
 8012f14:	08014a75 	.word	0x08014a75
 8012f18:	3ff80000 	.word	0x3ff80000
 8012f1c:	08014bb8 	.word	0x08014bb8
 8012f20:	08014b14 	.word	0x08014b14
 8012f24:	08014aa1 	.word	0x08014aa1
 8012f28:	08014a74 	.word	0x08014a74
 8012f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012f30:	6018      	str	r0, [r3, #0]
 8012f32:	9b07      	ldr	r3, [sp, #28]
 8012f34:	2b0e      	cmp	r3, #14
 8012f36:	f200 80a4 	bhi.w	8013082 <_dtoa_r+0x442>
 8012f3a:	2c00      	cmp	r4, #0
 8012f3c:	f000 80a1 	beq.w	8013082 <_dtoa_r+0x442>
 8012f40:	2f00      	cmp	r7, #0
 8012f42:	dd33      	ble.n	8012fac <_dtoa_r+0x36c>
 8012f44:	4bad      	ldr	r3, [pc, #692]	@ (80131fc <_dtoa_r+0x5bc>)
 8012f46:	f007 020f 	and.w	r2, r7, #15
 8012f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f4e:	ed93 7b00 	vldr	d7, [r3]
 8012f52:	05f8      	lsls	r0, r7, #23
 8012f54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012f5c:	d516      	bpl.n	8012f8c <_dtoa_r+0x34c>
 8012f5e:	4ba8      	ldr	r3, [pc, #672]	@ (8013200 <_dtoa_r+0x5c0>)
 8012f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012f68:	f7ed fc48 	bl	80007fc <__aeabi_ddiv>
 8012f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f70:	f004 040f 	and.w	r4, r4, #15
 8012f74:	2603      	movs	r6, #3
 8012f76:	4da2      	ldr	r5, [pc, #648]	@ (8013200 <_dtoa_r+0x5c0>)
 8012f78:	b954      	cbnz	r4, 8012f90 <_dtoa_r+0x350>
 8012f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f82:	f7ed fc3b 	bl	80007fc <__aeabi_ddiv>
 8012f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f8a:	e028      	b.n	8012fde <_dtoa_r+0x39e>
 8012f8c:	2602      	movs	r6, #2
 8012f8e:	e7f2      	b.n	8012f76 <_dtoa_r+0x336>
 8012f90:	07e1      	lsls	r1, r4, #31
 8012f92:	d508      	bpl.n	8012fa6 <_dtoa_r+0x366>
 8012f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f9c:	f7ed fb04 	bl	80005a8 <__aeabi_dmul>
 8012fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fa4:	3601      	adds	r6, #1
 8012fa6:	1064      	asrs	r4, r4, #1
 8012fa8:	3508      	adds	r5, #8
 8012faa:	e7e5      	b.n	8012f78 <_dtoa_r+0x338>
 8012fac:	f000 80d2 	beq.w	8013154 <_dtoa_r+0x514>
 8012fb0:	427c      	negs	r4, r7
 8012fb2:	4b92      	ldr	r3, [pc, #584]	@ (80131fc <_dtoa_r+0x5bc>)
 8012fb4:	4d92      	ldr	r5, [pc, #584]	@ (8013200 <_dtoa_r+0x5c0>)
 8012fb6:	f004 020f 	and.w	r2, r4, #15
 8012fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fc6:	f7ed faef 	bl	80005a8 <__aeabi_dmul>
 8012fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fce:	1124      	asrs	r4, r4, #4
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	2602      	movs	r6, #2
 8012fd4:	2c00      	cmp	r4, #0
 8012fd6:	f040 80b2 	bne.w	801313e <_dtoa_r+0x4fe>
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d1d3      	bne.n	8012f86 <_dtoa_r+0x346>
 8012fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012fe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	f000 80b7 	beq.w	8013158 <_dtoa_r+0x518>
 8012fea:	4b86      	ldr	r3, [pc, #536]	@ (8013204 <_dtoa_r+0x5c4>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	4620      	mov	r0, r4
 8012ff0:	4629      	mov	r1, r5
 8012ff2:	f7ed fd4b 	bl	8000a8c <__aeabi_dcmplt>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	f000 80ae 	beq.w	8013158 <_dtoa_r+0x518>
 8012ffc:	9b07      	ldr	r3, [sp, #28]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f000 80aa 	beq.w	8013158 <_dtoa_r+0x518>
 8013004:	9b00      	ldr	r3, [sp, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	dd37      	ble.n	801307a <_dtoa_r+0x43a>
 801300a:	1e7b      	subs	r3, r7, #1
 801300c:	9304      	str	r3, [sp, #16]
 801300e:	4620      	mov	r0, r4
 8013010:	4b7d      	ldr	r3, [pc, #500]	@ (8013208 <_dtoa_r+0x5c8>)
 8013012:	2200      	movs	r2, #0
 8013014:	4629      	mov	r1, r5
 8013016:	f7ed fac7 	bl	80005a8 <__aeabi_dmul>
 801301a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801301e:	9c00      	ldr	r4, [sp, #0]
 8013020:	3601      	adds	r6, #1
 8013022:	4630      	mov	r0, r6
 8013024:	f7ed fa56 	bl	80004d4 <__aeabi_i2d>
 8013028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801302c:	f7ed fabc 	bl	80005a8 <__aeabi_dmul>
 8013030:	4b76      	ldr	r3, [pc, #472]	@ (801320c <_dtoa_r+0x5cc>)
 8013032:	2200      	movs	r2, #0
 8013034:	f7ed f902 	bl	800023c <__adddf3>
 8013038:	4605      	mov	r5, r0
 801303a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801303e:	2c00      	cmp	r4, #0
 8013040:	f040 808d 	bne.w	801315e <_dtoa_r+0x51e>
 8013044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013048:	4b71      	ldr	r3, [pc, #452]	@ (8013210 <_dtoa_r+0x5d0>)
 801304a:	2200      	movs	r2, #0
 801304c:	f7ed f8f4 	bl	8000238 <__aeabi_dsub>
 8013050:	4602      	mov	r2, r0
 8013052:	460b      	mov	r3, r1
 8013054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013058:	462a      	mov	r2, r5
 801305a:	4633      	mov	r3, r6
 801305c:	f7ed fd34 	bl	8000ac8 <__aeabi_dcmpgt>
 8013060:	2800      	cmp	r0, #0
 8013062:	f040 828b 	bne.w	801357c <_dtoa_r+0x93c>
 8013066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801306a:	462a      	mov	r2, r5
 801306c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013070:	f7ed fd0c 	bl	8000a8c <__aeabi_dcmplt>
 8013074:	2800      	cmp	r0, #0
 8013076:	f040 8128 	bne.w	80132ca <_dtoa_r+0x68a>
 801307a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801307e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013084:	2b00      	cmp	r3, #0
 8013086:	f2c0 815a 	blt.w	801333e <_dtoa_r+0x6fe>
 801308a:	2f0e      	cmp	r7, #14
 801308c:	f300 8157 	bgt.w	801333e <_dtoa_r+0x6fe>
 8013090:	4b5a      	ldr	r3, [pc, #360]	@ (80131fc <_dtoa_r+0x5bc>)
 8013092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013096:	ed93 7b00 	vldr	d7, [r3]
 801309a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801309c:	2b00      	cmp	r3, #0
 801309e:	ed8d 7b00 	vstr	d7, [sp]
 80130a2:	da03      	bge.n	80130ac <_dtoa_r+0x46c>
 80130a4:	9b07      	ldr	r3, [sp, #28]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f340 8101 	ble.w	80132ae <_dtoa_r+0x66e>
 80130ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80130b0:	4656      	mov	r6, sl
 80130b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130b6:	4620      	mov	r0, r4
 80130b8:	4629      	mov	r1, r5
 80130ba:	f7ed fb9f 	bl	80007fc <__aeabi_ddiv>
 80130be:	f7ed fd23 	bl	8000b08 <__aeabi_d2iz>
 80130c2:	4680      	mov	r8, r0
 80130c4:	f7ed fa06 	bl	80004d4 <__aeabi_i2d>
 80130c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130cc:	f7ed fa6c 	bl	80005a8 <__aeabi_dmul>
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	4620      	mov	r0, r4
 80130d6:	4629      	mov	r1, r5
 80130d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80130dc:	f7ed f8ac 	bl	8000238 <__aeabi_dsub>
 80130e0:	f806 4b01 	strb.w	r4, [r6], #1
 80130e4:	9d07      	ldr	r5, [sp, #28]
 80130e6:	eba6 040a 	sub.w	r4, r6, sl
 80130ea:	42a5      	cmp	r5, r4
 80130ec:	4602      	mov	r2, r0
 80130ee:	460b      	mov	r3, r1
 80130f0:	f040 8117 	bne.w	8013322 <_dtoa_r+0x6e2>
 80130f4:	f7ed f8a2 	bl	800023c <__adddf3>
 80130f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130fc:	4604      	mov	r4, r0
 80130fe:	460d      	mov	r5, r1
 8013100:	f7ed fce2 	bl	8000ac8 <__aeabi_dcmpgt>
 8013104:	2800      	cmp	r0, #0
 8013106:	f040 80f9 	bne.w	80132fc <_dtoa_r+0x6bc>
 801310a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801310e:	4620      	mov	r0, r4
 8013110:	4629      	mov	r1, r5
 8013112:	f7ed fcb1 	bl	8000a78 <__aeabi_dcmpeq>
 8013116:	b118      	cbz	r0, 8013120 <_dtoa_r+0x4e0>
 8013118:	f018 0f01 	tst.w	r8, #1
 801311c:	f040 80ee 	bne.w	80132fc <_dtoa_r+0x6bc>
 8013120:	4649      	mov	r1, r9
 8013122:	4658      	mov	r0, fp
 8013124:	f000 fc90 	bl	8013a48 <_Bfree>
 8013128:	2300      	movs	r3, #0
 801312a:	7033      	strb	r3, [r6, #0]
 801312c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801312e:	3701      	adds	r7, #1
 8013130:	601f      	str	r7, [r3, #0]
 8013132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013134:	2b00      	cmp	r3, #0
 8013136:	f000 831d 	beq.w	8013774 <_dtoa_r+0xb34>
 801313a:	601e      	str	r6, [r3, #0]
 801313c:	e31a      	b.n	8013774 <_dtoa_r+0xb34>
 801313e:	07e2      	lsls	r2, r4, #31
 8013140:	d505      	bpl.n	801314e <_dtoa_r+0x50e>
 8013142:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013146:	f7ed fa2f 	bl	80005a8 <__aeabi_dmul>
 801314a:	3601      	adds	r6, #1
 801314c:	2301      	movs	r3, #1
 801314e:	1064      	asrs	r4, r4, #1
 8013150:	3508      	adds	r5, #8
 8013152:	e73f      	b.n	8012fd4 <_dtoa_r+0x394>
 8013154:	2602      	movs	r6, #2
 8013156:	e742      	b.n	8012fde <_dtoa_r+0x39e>
 8013158:	9c07      	ldr	r4, [sp, #28]
 801315a:	9704      	str	r7, [sp, #16]
 801315c:	e761      	b.n	8013022 <_dtoa_r+0x3e2>
 801315e:	4b27      	ldr	r3, [pc, #156]	@ (80131fc <_dtoa_r+0x5bc>)
 8013160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801316a:	4454      	add	r4, sl
 801316c:	2900      	cmp	r1, #0
 801316e:	d053      	beq.n	8013218 <_dtoa_r+0x5d8>
 8013170:	4928      	ldr	r1, [pc, #160]	@ (8013214 <_dtoa_r+0x5d4>)
 8013172:	2000      	movs	r0, #0
 8013174:	f7ed fb42 	bl	80007fc <__aeabi_ddiv>
 8013178:	4633      	mov	r3, r6
 801317a:	462a      	mov	r2, r5
 801317c:	f7ed f85c 	bl	8000238 <__aeabi_dsub>
 8013180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013184:	4656      	mov	r6, sl
 8013186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801318a:	f7ed fcbd 	bl	8000b08 <__aeabi_d2iz>
 801318e:	4605      	mov	r5, r0
 8013190:	f7ed f9a0 	bl	80004d4 <__aeabi_i2d>
 8013194:	4602      	mov	r2, r0
 8013196:	460b      	mov	r3, r1
 8013198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801319c:	f7ed f84c 	bl	8000238 <__aeabi_dsub>
 80131a0:	3530      	adds	r5, #48	@ 0x30
 80131a2:	4602      	mov	r2, r0
 80131a4:	460b      	mov	r3, r1
 80131a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131aa:	f806 5b01 	strb.w	r5, [r6], #1
 80131ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80131b2:	f7ed fc6b 	bl	8000a8c <__aeabi_dcmplt>
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d171      	bne.n	801329e <_dtoa_r+0x65e>
 80131ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131be:	4911      	ldr	r1, [pc, #68]	@ (8013204 <_dtoa_r+0x5c4>)
 80131c0:	2000      	movs	r0, #0
 80131c2:	f7ed f839 	bl	8000238 <__aeabi_dsub>
 80131c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80131ca:	f7ed fc5f 	bl	8000a8c <__aeabi_dcmplt>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	f040 8095 	bne.w	80132fe <_dtoa_r+0x6be>
 80131d4:	42a6      	cmp	r6, r4
 80131d6:	f43f af50 	beq.w	801307a <_dtoa_r+0x43a>
 80131da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80131de:	4b0a      	ldr	r3, [pc, #40]	@ (8013208 <_dtoa_r+0x5c8>)
 80131e0:	2200      	movs	r2, #0
 80131e2:	f7ed f9e1 	bl	80005a8 <__aeabi_dmul>
 80131e6:	4b08      	ldr	r3, [pc, #32]	@ (8013208 <_dtoa_r+0x5c8>)
 80131e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80131ec:	2200      	movs	r2, #0
 80131ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131f2:	f7ed f9d9 	bl	80005a8 <__aeabi_dmul>
 80131f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131fa:	e7c4      	b.n	8013186 <_dtoa_r+0x546>
 80131fc:	08014bb8 	.word	0x08014bb8
 8013200:	08014b90 	.word	0x08014b90
 8013204:	3ff00000 	.word	0x3ff00000
 8013208:	40240000 	.word	0x40240000
 801320c:	401c0000 	.word	0x401c0000
 8013210:	40140000 	.word	0x40140000
 8013214:	3fe00000 	.word	0x3fe00000
 8013218:	4631      	mov	r1, r6
 801321a:	4628      	mov	r0, r5
 801321c:	f7ed f9c4 	bl	80005a8 <__aeabi_dmul>
 8013220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013224:	9415      	str	r4, [sp, #84]	@ 0x54
 8013226:	4656      	mov	r6, sl
 8013228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801322c:	f7ed fc6c 	bl	8000b08 <__aeabi_d2iz>
 8013230:	4605      	mov	r5, r0
 8013232:	f7ed f94f 	bl	80004d4 <__aeabi_i2d>
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801323e:	f7ec fffb 	bl	8000238 <__aeabi_dsub>
 8013242:	3530      	adds	r5, #48	@ 0x30
 8013244:	f806 5b01 	strb.w	r5, [r6], #1
 8013248:	4602      	mov	r2, r0
 801324a:	460b      	mov	r3, r1
 801324c:	42a6      	cmp	r6, r4
 801324e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013252:	f04f 0200 	mov.w	r2, #0
 8013256:	d124      	bne.n	80132a2 <_dtoa_r+0x662>
 8013258:	4bac      	ldr	r3, [pc, #688]	@ (801350c <_dtoa_r+0x8cc>)
 801325a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801325e:	f7ec ffed 	bl	800023c <__adddf3>
 8013262:	4602      	mov	r2, r0
 8013264:	460b      	mov	r3, r1
 8013266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801326a:	f7ed fc2d 	bl	8000ac8 <__aeabi_dcmpgt>
 801326e:	2800      	cmp	r0, #0
 8013270:	d145      	bne.n	80132fe <_dtoa_r+0x6be>
 8013272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013276:	49a5      	ldr	r1, [pc, #660]	@ (801350c <_dtoa_r+0x8cc>)
 8013278:	2000      	movs	r0, #0
 801327a:	f7ec ffdd 	bl	8000238 <__aeabi_dsub>
 801327e:	4602      	mov	r2, r0
 8013280:	460b      	mov	r3, r1
 8013282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013286:	f7ed fc01 	bl	8000a8c <__aeabi_dcmplt>
 801328a:	2800      	cmp	r0, #0
 801328c:	f43f aef5 	beq.w	801307a <_dtoa_r+0x43a>
 8013290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013292:	1e73      	subs	r3, r6, #1
 8013294:	9315      	str	r3, [sp, #84]	@ 0x54
 8013296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801329a:	2b30      	cmp	r3, #48	@ 0x30
 801329c:	d0f8      	beq.n	8013290 <_dtoa_r+0x650>
 801329e:	9f04      	ldr	r7, [sp, #16]
 80132a0:	e73e      	b.n	8013120 <_dtoa_r+0x4e0>
 80132a2:	4b9b      	ldr	r3, [pc, #620]	@ (8013510 <_dtoa_r+0x8d0>)
 80132a4:	f7ed f980 	bl	80005a8 <__aeabi_dmul>
 80132a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132ac:	e7bc      	b.n	8013228 <_dtoa_r+0x5e8>
 80132ae:	d10c      	bne.n	80132ca <_dtoa_r+0x68a>
 80132b0:	4b98      	ldr	r3, [pc, #608]	@ (8013514 <_dtoa_r+0x8d4>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132b8:	f7ed f976 	bl	80005a8 <__aeabi_dmul>
 80132bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132c0:	f7ed fbf8 	bl	8000ab4 <__aeabi_dcmpge>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	f000 8157 	beq.w	8013578 <_dtoa_r+0x938>
 80132ca:	2400      	movs	r4, #0
 80132cc:	4625      	mov	r5, r4
 80132ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80132d0:	43db      	mvns	r3, r3
 80132d2:	9304      	str	r3, [sp, #16]
 80132d4:	4656      	mov	r6, sl
 80132d6:	2700      	movs	r7, #0
 80132d8:	4621      	mov	r1, r4
 80132da:	4658      	mov	r0, fp
 80132dc:	f000 fbb4 	bl	8013a48 <_Bfree>
 80132e0:	2d00      	cmp	r5, #0
 80132e2:	d0dc      	beq.n	801329e <_dtoa_r+0x65e>
 80132e4:	b12f      	cbz	r7, 80132f2 <_dtoa_r+0x6b2>
 80132e6:	42af      	cmp	r7, r5
 80132e8:	d003      	beq.n	80132f2 <_dtoa_r+0x6b2>
 80132ea:	4639      	mov	r1, r7
 80132ec:	4658      	mov	r0, fp
 80132ee:	f000 fbab 	bl	8013a48 <_Bfree>
 80132f2:	4629      	mov	r1, r5
 80132f4:	4658      	mov	r0, fp
 80132f6:	f000 fba7 	bl	8013a48 <_Bfree>
 80132fa:	e7d0      	b.n	801329e <_dtoa_r+0x65e>
 80132fc:	9704      	str	r7, [sp, #16]
 80132fe:	4633      	mov	r3, r6
 8013300:	461e      	mov	r6, r3
 8013302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013306:	2a39      	cmp	r2, #57	@ 0x39
 8013308:	d107      	bne.n	801331a <_dtoa_r+0x6da>
 801330a:	459a      	cmp	sl, r3
 801330c:	d1f8      	bne.n	8013300 <_dtoa_r+0x6c0>
 801330e:	9a04      	ldr	r2, [sp, #16]
 8013310:	3201      	adds	r2, #1
 8013312:	9204      	str	r2, [sp, #16]
 8013314:	2230      	movs	r2, #48	@ 0x30
 8013316:	f88a 2000 	strb.w	r2, [sl]
 801331a:	781a      	ldrb	r2, [r3, #0]
 801331c:	3201      	adds	r2, #1
 801331e:	701a      	strb	r2, [r3, #0]
 8013320:	e7bd      	b.n	801329e <_dtoa_r+0x65e>
 8013322:	4b7b      	ldr	r3, [pc, #492]	@ (8013510 <_dtoa_r+0x8d0>)
 8013324:	2200      	movs	r2, #0
 8013326:	f7ed f93f 	bl	80005a8 <__aeabi_dmul>
 801332a:	2200      	movs	r2, #0
 801332c:	2300      	movs	r3, #0
 801332e:	4604      	mov	r4, r0
 8013330:	460d      	mov	r5, r1
 8013332:	f7ed fba1 	bl	8000a78 <__aeabi_dcmpeq>
 8013336:	2800      	cmp	r0, #0
 8013338:	f43f aebb 	beq.w	80130b2 <_dtoa_r+0x472>
 801333c:	e6f0      	b.n	8013120 <_dtoa_r+0x4e0>
 801333e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013340:	2a00      	cmp	r2, #0
 8013342:	f000 80db 	beq.w	80134fc <_dtoa_r+0x8bc>
 8013346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013348:	2a01      	cmp	r2, #1
 801334a:	f300 80bf 	bgt.w	80134cc <_dtoa_r+0x88c>
 801334e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013350:	2a00      	cmp	r2, #0
 8013352:	f000 80b7 	beq.w	80134c4 <_dtoa_r+0x884>
 8013356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801335a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801335c:	4646      	mov	r6, r8
 801335e:	9a08      	ldr	r2, [sp, #32]
 8013360:	2101      	movs	r1, #1
 8013362:	441a      	add	r2, r3
 8013364:	4658      	mov	r0, fp
 8013366:	4498      	add	r8, r3
 8013368:	9208      	str	r2, [sp, #32]
 801336a:	f000 fc21 	bl	8013bb0 <__i2b>
 801336e:	4605      	mov	r5, r0
 8013370:	b15e      	cbz	r6, 801338a <_dtoa_r+0x74a>
 8013372:	9b08      	ldr	r3, [sp, #32]
 8013374:	2b00      	cmp	r3, #0
 8013376:	dd08      	ble.n	801338a <_dtoa_r+0x74a>
 8013378:	42b3      	cmp	r3, r6
 801337a:	9a08      	ldr	r2, [sp, #32]
 801337c:	bfa8      	it	ge
 801337e:	4633      	movge	r3, r6
 8013380:	eba8 0803 	sub.w	r8, r8, r3
 8013384:	1af6      	subs	r6, r6, r3
 8013386:	1ad3      	subs	r3, r2, r3
 8013388:	9308      	str	r3, [sp, #32]
 801338a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801338c:	b1f3      	cbz	r3, 80133cc <_dtoa_r+0x78c>
 801338e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013390:	2b00      	cmp	r3, #0
 8013392:	f000 80b7 	beq.w	8013504 <_dtoa_r+0x8c4>
 8013396:	b18c      	cbz	r4, 80133bc <_dtoa_r+0x77c>
 8013398:	4629      	mov	r1, r5
 801339a:	4622      	mov	r2, r4
 801339c:	4658      	mov	r0, fp
 801339e:	f000 fcc7 	bl	8013d30 <__pow5mult>
 80133a2:	464a      	mov	r2, r9
 80133a4:	4601      	mov	r1, r0
 80133a6:	4605      	mov	r5, r0
 80133a8:	4658      	mov	r0, fp
 80133aa:	f000 fc17 	bl	8013bdc <__multiply>
 80133ae:	4649      	mov	r1, r9
 80133b0:	9004      	str	r0, [sp, #16]
 80133b2:	4658      	mov	r0, fp
 80133b4:	f000 fb48 	bl	8013a48 <_Bfree>
 80133b8:	9b04      	ldr	r3, [sp, #16]
 80133ba:	4699      	mov	r9, r3
 80133bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133be:	1b1a      	subs	r2, r3, r4
 80133c0:	d004      	beq.n	80133cc <_dtoa_r+0x78c>
 80133c2:	4649      	mov	r1, r9
 80133c4:	4658      	mov	r0, fp
 80133c6:	f000 fcb3 	bl	8013d30 <__pow5mult>
 80133ca:	4681      	mov	r9, r0
 80133cc:	2101      	movs	r1, #1
 80133ce:	4658      	mov	r0, fp
 80133d0:	f000 fbee 	bl	8013bb0 <__i2b>
 80133d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80133d6:	4604      	mov	r4, r0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f000 81cf 	beq.w	801377c <_dtoa_r+0xb3c>
 80133de:	461a      	mov	r2, r3
 80133e0:	4601      	mov	r1, r0
 80133e2:	4658      	mov	r0, fp
 80133e4:	f000 fca4 	bl	8013d30 <__pow5mult>
 80133e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	4604      	mov	r4, r0
 80133ee:	f300 8095 	bgt.w	801351c <_dtoa_r+0x8dc>
 80133f2:	9b02      	ldr	r3, [sp, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	f040 8087 	bne.w	8013508 <_dtoa_r+0x8c8>
 80133fa:	9b03      	ldr	r3, [sp, #12]
 80133fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013400:	2b00      	cmp	r3, #0
 8013402:	f040 8089 	bne.w	8013518 <_dtoa_r+0x8d8>
 8013406:	9b03      	ldr	r3, [sp, #12]
 8013408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801340c:	0d1b      	lsrs	r3, r3, #20
 801340e:	051b      	lsls	r3, r3, #20
 8013410:	b12b      	cbz	r3, 801341e <_dtoa_r+0x7de>
 8013412:	9b08      	ldr	r3, [sp, #32]
 8013414:	3301      	adds	r3, #1
 8013416:	9308      	str	r3, [sp, #32]
 8013418:	f108 0801 	add.w	r8, r8, #1
 801341c:	2301      	movs	r3, #1
 801341e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013422:	2b00      	cmp	r3, #0
 8013424:	f000 81b0 	beq.w	8013788 <_dtoa_r+0xb48>
 8013428:	6923      	ldr	r3, [r4, #16]
 801342a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801342e:	6918      	ldr	r0, [r3, #16]
 8013430:	f000 fb72 	bl	8013b18 <__hi0bits>
 8013434:	f1c0 0020 	rsb	r0, r0, #32
 8013438:	9b08      	ldr	r3, [sp, #32]
 801343a:	4418      	add	r0, r3
 801343c:	f010 001f 	ands.w	r0, r0, #31
 8013440:	d077      	beq.n	8013532 <_dtoa_r+0x8f2>
 8013442:	f1c0 0320 	rsb	r3, r0, #32
 8013446:	2b04      	cmp	r3, #4
 8013448:	dd6b      	ble.n	8013522 <_dtoa_r+0x8e2>
 801344a:	9b08      	ldr	r3, [sp, #32]
 801344c:	f1c0 001c 	rsb	r0, r0, #28
 8013450:	4403      	add	r3, r0
 8013452:	4480      	add	r8, r0
 8013454:	4406      	add	r6, r0
 8013456:	9308      	str	r3, [sp, #32]
 8013458:	f1b8 0f00 	cmp.w	r8, #0
 801345c:	dd05      	ble.n	801346a <_dtoa_r+0x82a>
 801345e:	4649      	mov	r1, r9
 8013460:	4642      	mov	r2, r8
 8013462:	4658      	mov	r0, fp
 8013464:	f000 fcbe 	bl	8013de4 <__lshift>
 8013468:	4681      	mov	r9, r0
 801346a:	9b08      	ldr	r3, [sp, #32]
 801346c:	2b00      	cmp	r3, #0
 801346e:	dd05      	ble.n	801347c <_dtoa_r+0x83c>
 8013470:	4621      	mov	r1, r4
 8013472:	461a      	mov	r2, r3
 8013474:	4658      	mov	r0, fp
 8013476:	f000 fcb5 	bl	8013de4 <__lshift>
 801347a:	4604      	mov	r4, r0
 801347c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801347e:	2b00      	cmp	r3, #0
 8013480:	d059      	beq.n	8013536 <_dtoa_r+0x8f6>
 8013482:	4621      	mov	r1, r4
 8013484:	4648      	mov	r0, r9
 8013486:	f000 fd19 	bl	8013ebc <__mcmp>
 801348a:	2800      	cmp	r0, #0
 801348c:	da53      	bge.n	8013536 <_dtoa_r+0x8f6>
 801348e:	1e7b      	subs	r3, r7, #1
 8013490:	9304      	str	r3, [sp, #16]
 8013492:	4649      	mov	r1, r9
 8013494:	2300      	movs	r3, #0
 8013496:	220a      	movs	r2, #10
 8013498:	4658      	mov	r0, fp
 801349a:	f000 faf7 	bl	8013a8c <__multadd>
 801349e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134a0:	4681      	mov	r9, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 8172 	beq.w	801378c <_dtoa_r+0xb4c>
 80134a8:	2300      	movs	r3, #0
 80134aa:	4629      	mov	r1, r5
 80134ac:	220a      	movs	r2, #10
 80134ae:	4658      	mov	r0, fp
 80134b0:	f000 faec 	bl	8013a8c <__multadd>
 80134b4:	9b00      	ldr	r3, [sp, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	4605      	mov	r5, r0
 80134ba:	dc67      	bgt.n	801358c <_dtoa_r+0x94c>
 80134bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134be:	2b02      	cmp	r3, #2
 80134c0:	dc41      	bgt.n	8013546 <_dtoa_r+0x906>
 80134c2:	e063      	b.n	801358c <_dtoa_r+0x94c>
 80134c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80134c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80134ca:	e746      	b.n	801335a <_dtoa_r+0x71a>
 80134cc:	9b07      	ldr	r3, [sp, #28]
 80134ce:	1e5c      	subs	r4, r3, #1
 80134d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134d2:	42a3      	cmp	r3, r4
 80134d4:	bfbf      	itttt	lt
 80134d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80134d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80134da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80134dc:	1ae3      	sublt	r3, r4, r3
 80134de:	bfb4      	ite	lt
 80134e0:	18d2      	addlt	r2, r2, r3
 80134e2:	1b1c      	subge	r4, r3, r4
 80134e4:	9b07      	ldr	r3, [sp, #28]
 80134e6:	bfbc      	itt	lt
 80134e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80134ea:	2400      	movlt	r4, #0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	bfb5      	itete	lt
 80134f0:	eba8 0603 	sublt.w	r6, r8, r3
 80134f4:	9b07      	ldrge	r3, [sp, #28]
 80134f6:	2300      	movlt	r3, #0
 80134f8:	4646      	movge	r6, r8
 80134fa:	e730      	b.n	801335e <_dtoa_r+0x71e>
 80134fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80134fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013500:	4646      	mov	r6, r8
 8013502:	e735      	b.n	8013370 <_dtoa_r+0x730>
 8013504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013506:	e75c      	b.n	80133c2 <_dtoa_r+0x782>
 8013508:	2300      	movs	r3, #0
 801350a:	e788      	b.n	801341e <_dtoa_r+0x7de>
 801350c:	3fe00000 	.word	0x3fe00000
 8013510:	40240000 	.word	0x40240000
 8013514:	40140000 	.word	0x40140000
 8013518:	9b02      	ldr	r3, [sp, #8]
 801351a:	e780      	b.n	801341e <_dtoa_r+0x7de>
 801351c:	2300      	movs	r3, #0
 801351e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013520:	e782      	b.n	8013428 <_dtoa_r+0x7e8>
 8013522:	d099      	beq.n	8013458 <_dtoa_r+0x818>
 8013524:	9a08      	ldr	r2, [sp, #32]
 8013526:	331c      	adds	r3, #28
 8013528:	441a      	add	r2, r3
 801352a:	4498      	add	r8, r3
 801352c:	441e      	add	r6, r3
 801352e:	9208      	str	r2, [sp, #32]
 8013530:	e792      	b.n	8013458 <_dtoa_r+0x818>
 8013532:	4603      	mov	r3, r0
 8013534:	e7f6      	b.n	8013524 <_dtoa_r+0x8e4>
 8013536:	9b07      	ldr	r3, [sp, #28]
 8013538:	9704      	str	r7, [sp, #16]
 801353a:	2b00      	cmp	r3, #0
 801353c:	dc20      	bgt.n	8013580 <_dtoa_r+0x940>
 801353e:	9300      	str	r3, [sp, #0]
 8013540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013542:	2b02      	cmp	r3, #2
 8013544:	dd1e      	ble.n	8013584 <_dtoa_r+0x944>
 8013546:	9b00      	ldr	r3, [sp, #0]
 8013548:	2b00      	cmp	r3, #0
 801354a:	f47f aec0 	bne.w	80132ce <_dtoa_r+0x68e>
 801354e:	4621      	mov	r1, r4
 8013550:	2205      	movs	r2, #5
 8013552:	4658      	mov	r0, fp
 8013554:	f000 fa9a 	bl	8013a8c <__multadd>
 8013558:	4601      	mov	r1, r0
 801355a:	4604      	mov	r4, r0
 801355c:	4648      	mov	r0, r9
 801355e:	f000 fcad 	bl	8013ebc <__mcmp>
 8013562:	2800      	cmp	r0, #0
 8013564:	f77f aeb3 	ble.w	80132ce <_dtoa_r+0x68e>
 8013568:	4656      	mov	r6, sl
 801356a:	2331      	movs	r3, #49	@ 0x31
 801356c:	f806 3b01 	strb.w	r3, [r6], #1
 8013570:	9b04      	ldr	r3, [sp, #16]
 8013572:	3301      	adds	r3, #1
 8013574:	9304      	str	r3, [sp, #16]
 8013576:	e6ae      	b.n	80132d6 <_dtoa_r+0x696>
 8013578:	9c07      	ldr	r4, [sp, #28]
 801357a:	9704      	str	r7, [sp, #16]
 801357c:	4625      	mov	r5, r4
 801357e:	e7f3      	b.n	8013568 <_dtoa_r+0x928>
 8013580:	9b07      	ldr	r3, [sp, #28]
 8013582:	9300      	str	r3, [sp, #0]
 8013584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013586:	2b00      	cmp	r3, #0
 8013588:	f000 8104 	beq.w	8013794 <_dtoa_r+0xb54>
 801358c:	2e00      	cmp	r6, #0
 801358e:	dd05      	ble.n	801359c <_dtoa_r+0x95c>
 8013590:	4629      	mov	r1, r5
 8013592:	4632      	mov	r2, r6
 8013594:	4658      	mov	r0, fp
 8013596:	f000 fc25 	bl	8013de4 <__lshift>
 801359a:	4605      	mov	r5, r0
 801359c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d05a      	beq.n	8013658 <_dtoa_r+0xa18>
 80135a2:	6869      	ldr	r1, [r5, #4]
 80135a4:	4658      	mov	r0, fp
 80135a6:	f000 fa0f 	bl	80139c8 <_Balloc>
 80135aa:	4606      	mov	r6, r0
 80135ac:	b928      	cbnz	r0, 80135ba <_dtoa_r+0x97a>
 80135ae:	4b84      	ldr	r3, [pc, #528]	@ (80137c0 <_dtoa_r+0xb80>)
 80135b0:	4602      	mov	r2, r0
 80135b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80135b6:	f7ff bb5a 	b.w	8012c6e <_dtoa_r+0x2e>
 80135ba:	692a      	ldr	r2, [r5, #16]
 80135bc:	3202      	adds	r2, #2
 80135be:	0092      	lsls	r2, r2, #2
 80135c0:	f105 010c 	add.w	r1, r5, #12
 80135c4:	300c      	adds	r0, #12
 80135c6:	f7ff faa2 	bl	8012b0e <memcpy>
 80135ca:	2201      	movs	r2, #1
 80135cc:	4631      	mov	r1, r6
 80135ce:	4658      	mov	r0, fp
 80135d0:	f000 fc08 	bl	8013de4 <__lshift>
 80135d4:	f10a 0301 	add.w	r3, sl, #1
 80135d8:	9307      	str	r3, [sp, #28]
 80135da:	9b00      	ldr	r3, [sp, #0]
 80135dc:	4453      	add	r3, sl
 80135de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80135e0:	9b02      	ldr	r3, [sp, #8]
 80135e2:	f003 0301 	and.w	r3, r3, #1
 80135e6:	462f      	mov	r7, r5
 80135e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80135ea:	4605      	mov	r5, r0
 80135ec:	9b07      	ldr	r3, [sp, #28]
 80135ee:	4621      	mov	r1, r4
 80135f0:	3b01      	subs	r3, #1
 80135f2:	4648      	mov	r0, r9
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	f7ff fa98 	bl	8012b2a <quorem>
 80135fa:	4639      	mov	r1, r7
 80135fc:	9002      	str	r0, [sp, #8]
 80135fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8013602:	4648      	mov	r0, r9
 8013604:	f000 fc5a 	bl	8013ebc <__mcmp>
 8013608:	462a      	mov	r2, r5
 801360a:	9008      	str	r0, [sp, #32]
 801360c:	4621      	mov	r1, r4
 801360e:	4658      	mov	r0, fp
 8013610:	f000 fc70 	bl	8013ef4 <__mdiff>
 8013614:	68c2      	ldr	r2, [r0, #12]
 8013616:	4606      	mov	r6, r0
 8013618:	bb02      	cbnz	r2, 801365c <_dtoa_r+0xa1c>
 801361a:	4601      	mov	r1, r0
 801361c:	4648      	mov	r0, r9
 801361e:	f000 fc4d 	bl	8013ebc <__mcmp>
 8013622:	4602      	mov	r2, r0
 8013624:	4631      	mov	r1, r6
 8013626:	4658      	mov	r0, fp
 8013628:	920e      	str	r2, [sp, #56]	@ 0x38
 801362a:	f000 fa0d 	bl	8013a48 <_Bfree>
 801362e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013632:	9e07      	ldr	r6, [sp, #28]
 8013634:	ea43 0102 	orr.w	r1, r3, r2
 8013638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801363a:	4319      	orrs	r1, r3
 801363c:	d110      	bne.n	8013660 <_dtoa_r+0xa20>
 801363e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013642:	d029      	beq.n	8013698 <_dtoa_r+0xa58>
 8013644:	9b08      	ldr	r3, [sp, #32]
 8013646:	2b00      	cmp	r3, #0
 8013648:	dd02      	ble.n	8013650 <_dtoa_r+0xa10>
 801364a:	9b02      	ldr	r3, [sp, #8]
 801364c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013650:	9b00      	ldr	r3, [sp, #0]
 8013652:	f883 8000 	strb.w	r8, [r3]
 8013656:	e63f      	b.n	80132d8 <_dtoa_r+0x698>
 8013658:	4628      	mov	r0, r5
 801365a:	e7bb      	b.n	80135d4 <_dtoa_r+0x994>
 801365c:	2201      	movs	r2, #1
 801365e:	e7e1      	b.n	8013624 <_dtoa_r+0x9e4>
 8013660:	9b08      	ldr	r3, [sp, #32]
 8013662:	2b00      	cmp	r3, #0
 8013664:	db04      	blt.n	8013670 <_dtoa_r+0xa30>
 8013666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013668:	430b      	orrs	r3, r1
 801366a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801366c:	430b      	orrs	r3, r1
 801366e:	d120      	bne.n	80136b2 <_dtoa_r+0xa72>
 8013670:	2a00      	cmp	r2, #0
 8013672:	dded      	ble.n	8013650 <_dtoa_r+0xa10>
 8013674:	4649      	mov	r1, r9
 8013676:	2201      	movs	r2, #1
 8013678:	4658      	mov	r0, fp
 801367a:	f000 fbb3 	bl	8013de4 <__lshift>
 801367e:	4621      	mov	r1, r4
 8013680:	4681      	mov	r9, r0
 8013682:	f000 fc1b 	bl	8013ebc <__mcmp>
 8013686:	2800      	cmp	r0, #0
 8013688:	dc03      	bgt.n	8013692 <_dtoa_r+0xa52>
 801368a:	d1e1      	bne.n	8013650 <_dtoa_r+0xa10>
 801368c:	f018 0f01 	tst.w	r8, #1
 8013690:	d0de      	beq.n	8013650 <_dtoa_r+0xa10>
 8013692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013696:	d1d8      	bne.n	801364a <_dtoa_r+0xa0a>
 8013698:	9a00      	ldr	r2, [sp, #0]
 801369a:	2339      	movs	r3, #57	@ 0x39
 801369c:	7013      	strb	r3, [r2, #0]
 801369e:	4633      	mov	r3, r6
 80136a0:	461e      	mov	r6, r3
 80136a2:	3b01      	subs	r3, #1
 80136a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80136a8:	2a39      	cmp	r2, #57	@ 0x39
 80136aa:	d052      	beq.n	8013752 <_dtoa_r+0xb12>
 80136ac:	3201      	adds	r2, #1
 80136ae:	701a      	strb	r2, [r3, #0]
 80136b0:	e612      	b.n	80132d8 <_dtoa_r+0x698>
 80136b2:	2a00      	cmp	r2, #0
 80136b4:	dd07      	ble.n	80136c6 <_dtoa_r+0xa86>
 80136b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80136ba:	d0ed      	beq.n	8013698 <_dtoa_r+0xa58>
 80136bc:	9a00      	ldr	r2, [sp, #0]
 80136be:	f108 0301 	add.w	r3, r8, #1
 80136c2:	7013      	strb	r3, [r2, #0]
 80136c4:	e608      	b.n	80132d8 <_dtoa_r+0x698>
 80136c6:	9b07      	ldr	r3, [sp, #28]
 80136c8:	9a07      	ldr	r2, [sp, #28]
 80136ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80136ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d028      	beq.n	8013726 <_dtoa_r+0xae6>
 80136d4:	4649      	mov	r1, r9
 80136d6:	2300      	movs	r3, #0
 80136d8:	220a      	movs	r2, #10
 80136da:	4658      	mov	r0, fp
 80136dc:	f000 f9d6 	bl	8013a8c <__multadd>
 80136e0:	42af      	cmp	r7, r5
 80136e2:	4681      	mov	r9, r0
 80136e4:	f04f 0300 	mov.w	r3, #0
 80136e8:	f04f 020a 	mov.w	r2, #10
 80136ec:	4639      	mov	r1, r7
 80136ee:	4658      	mov	r0, fp
 80136f0:	d107      	bne.n	8013702 <_dtoa_r+0xac2>
 80136f2:	f000 f9cb 	bl	8013a8c <__multadd>
 80136f6:	4607      	mov	r7, r0
 80136f8:	4605      	mov	r5, r0
 80136fa:	9b07      	ldr	r3, [sp, #28]
 80136fc:	3301      	adds	r3, #1
 80136fe:	9307      	str	r3, [sp, #28]
 8013700:	e774      	b.n	80135ec <_dtoa_r+0x9ac>
 8013702:	f000 f9c3 	bl	8013a8c <__multadd>
 8013706:	4629      	mov	r1, r5
 8013708:	4607      	mov	r7, r0
 801370a:	2300      	movs	r3, #0
 801370c:	220a      	movs	r2, #10
 801370e:	4658      	mov	r0, fp
 8013710:	f000 f9bc 	bl	8013a8c <__multadd>
 8013714:	4605      	mov	r5, r0
 8013716:	e7f0      	b.n	80136fa <_dtoa_r+0xaba>
 8013718:	9b00      	ldr	r3, [sp, #0]
 801371a:	2b00      	cmp	r3, #0
 801371c:	bfcc      	ite	gt
 801371e:	461e      	movgt	r6, r3
 8013720:	2601      	movle	r6, #1
 8013722:	4456      	add	r6, sl
 8013724:	2700      	movs	r7, #0
 8013726:	4649      	mov	r1, r9
 8013728:	2201      	movs	r2, #1
 801372a:	4658      	mov	r0, fp
 801372c:	f000 fb5a 	bl	8013de4 <__lshift>
 8013730:	4621      	mov	r1, r4
 8013732:	4681      	mov	r9, r0
 8013734:	f000 fbc2 	bl	8013ebc <__mcmp>
 8013738:	2800      	cmp	r0, #0
 801373a:	dcb0      	bgt.n	801369e <_dtoa_r+0xa5e>
 801373c:	d102      	bne.n	8013744 <_dtoa_r+0xb04>
 801373e:	f018 0f01 	tst.w	r8, #1
 8013742:	d1ac      	bne.n	801369e <_dtoa_r+0xa5e>
 8013744:	4633      	mov	r3, r6
 8013746:	461e      	mov	r6, r3
 8013748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801374c:	2a30      	cmp	r2, #48	@ 0x30
 801374e:	d0fa      	beq.n	8013746 <_dtoa_r+0xb06>
 8013750:	e5c2      	b.n	80132d8 <_dtoa_r+0x698>
 8013752:	459a      	cmp	sl, r3
 8013754:	d1a4      	bne.n	80136a0 <_dtoa_r+0xa60>
 8013756:	9b04      	ldr	r3, [sp, #16]
 8013758:	3301      	adds	r3, #1
 801375a:	9304      	str	r3, [sp, #16]
 801375c:	2331      	movs	r3, #49	@ 0x31
 801375e:	f88a 3000 	strb.w	r3, [sl]
 8013762:	e5b9      	b.n	80132d8 <_dtoa_r+0x698>
 8013764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80137c4 <_dtoa_r+0xb84>
 801376a:	b11b      	cbz	r3, 8013774 <_dtoa_r+0xb34>
 801376c:	f10a 0308 	add.w	r3, sl, #8
 8013770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013772:	6013      	str	r3, [r2, #0]
 8013774:	4650      	mov	r0, sl
 8013776:	b019      	add	sp, #100	@ 0x64
 8013778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801377c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801377e:	2b01      	cmp	r3, #1
 8013780:	f77f ae37 	ble.w	80133f2 <_dtoa_r+0x7b2>
 8013784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013786:	930a      	str	r3, [sp, #40]	@ 0x28
 8013788:	2001      	movs	r0, #1
 801378a:	e655      	b.n	8013438 <_dtoa_r+0x7f8>
 801378c:	9b00      	ldr	r3, [sp, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	f77f aed6 	ble.w	8013540 <_dtoa_r+0x900>
 8013794:	4656      	mov	r6, sl
 8013796:	4621      	mov	r1, r4
 8013798:	4648      	mov	r0, r9
 801379a:	f7ff f9c6 	bl	8012b2a <quorem>
 801379e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80137a2:	f806 8b01 	strb.w	r8, [r6], #1
 80137a6:	9b00      	ldr	r3, [sp, #0]
 80137a8:	eba6 020a 	sub.w	r2, r6, sl
 80137ac:	4293      	cmp	r3, r2
 80137ae:	ddb3      	ble.n	8013718 <_dtoa_r+0xad8>
 80137b0:	4649      	mov	r1, r9
 80137b2:	2300      	movs	r3, #0
 80137b4:	220a      	movs	r2, #10
 80137b6:	4658      	mov	r0, fp
 80137b8:	f000 f968 	bl	8013a8c <__multadd>
 80137bc:	4681      	mov	r9, r0
 80137be:	e7ea      	b.n	8013796 <_dtoa_r+0xb56>
 80137c0:	08014b14 	.word	0x08014b14
 80137c4:	08014a98 	.word	0x08014a98

080137c8 <_free_r>:
 80137c8:	b538      	push	{r3, r4, r5, lr}
 80137ca:	4605      	mov	r5, r0
 80137cc:	2900      	cmp	r1, #0
 80137ce:	d041      	beq.n	8013854 <_free_r+0x8c>
 80137d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137d4:	1f0c      	subs	r4, r1, #4
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	bfb8      	it	lt
 80137da:	18e4      	addlt	r4, r4, r3
 80137dc:	f000 f8e8 	bl	80139b0 <__malloc_lock>
 80137e0:	4a1d      	ldr	r2, [pc, #116]	@ (8013858 <_free_r+0x90>)
 80137e2:	6813      	ldr	r3, [r2, #0]
 80137e4:	b933      	cbnz	r3, 80137f4 <_free_r+0x2c>
 80137e6:	6063      	str	r3, [r4, #4]
 80137e8:	6014      	str	r4, [r2, #0]
 80137ea:	4628      	mov	r0, r5
 80137ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137f0:	f000 b8e4 	b.w	80139bc <__malloc_unlock>
 80137f4:	42a3      	cmp	r3, r4
 80137f6:	d908      	bls.n	801380a <_free_r+0x42>
 80137f8:	6820      	ldr	r0, [r4, #0]
 80137fa:	1821      	adds	r1, r4, r0
 80137fc:	428b      	cmp	r3, r1
 80137fe:	bf01      	itttt	eq
 8013800:	6819      	ldreq	r1, [r3, #0]
 8013802:	685b      	ldreq	r3, [r3, #4]
 8013804:	1809      	addeq	r1, r1, r0
 8013806:	6021      	streq	r1, [r4, #0]
 8013808:	e7ed      	b.n	80137e6 <_free_r+0x1e>
 801380a:	461a      	mov	r2, r3
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	b10b      	cbz	r3, 8013814 <_free_r+0x4c>
 8013810:	42a3      	cmp	r3, r4
 8013812:	d9fa      	bls.n	801380a <_free_r+0x42>
 8013814:	6811      	ldr	r1, [r2, #0]
 8013816:	1850      	adds	r0, r2, r1
 8013818:	42a0      	cmp	r0, r4
 801381a:	d10b      	bne.n	8013834 <_free_r+0x6c>
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	4401      	add	r1, r0
 8013820:	1850      	adds	r0, r2, r1
 8013822:	4283      	cmp	r3, r0
 8013824:	6011      	str	r1, [r2, #0]
 8013826:	d1e0      	bne.n	80137ea <_free_r+0x22>
 8013828:	6818      	ldr	r0, [r3, #0]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	6053      	str	r3, [r2, #4]
 801382e:	4408      	add	r0, r1
 8013830:	6010      	str	r0, [r2, #0]
 8013832:	e7da      	b.n	80137ea <_free_r+0x22>
 8013834:	d902      	bls.n	801383c <_free_r+0x74>
 8013836:	230c      	movs	r3, #12
 8013838:	602b      	str	r3, [r5, #0]
 801383a:	e7d6      	b.n	80137ea <_free_r+0x22>
 801383c:	6820      	ldr	r0, [r4, #0]
 801383e:	1821      	adds	r1, r4, r0
 8013840:	428b      	cmp	r3, r1
 8013842:	bf04      	itt	eq
 8013844:	6819      	ldreq	r1, [r3, #0]
 8013846:	685b      	ldreq	r3, [r3, #4]
 8013848:	6063      	str	r3, [r4, #4]
 801384a:	bf04      	itt	eq
 801384c:	1809      	addeq	r1, r1, r0
 801384e:	6021      	streq	r1, [r4, #0]
 8013850:	6054      	str	r4, [r2, #4]
 8013852:	e7ca      	b.n	80137ea <_free_r+0x22>
 8013854:	bd38      	pop	{r3, r4, r5, pc}
 8013856:	bf00      	nop
 8013858:	200024c8 	.word	0x200024c8

0801385c <malloc>:
 801385c:	4b02      	ldr	r3, [pc, #8]	@ (8013868 <malloc+0xc>)
 801385e:	4601      	mov	r1, r0
 8013860:	6818      	ldr	r0, [r3, #0]
 8013862:	f000 b825 	b.w	80138b0 <_malloc_r>
 8013866:	bf00      	nop
 8013868:	20000134 	.word	0x20000134

0801386c <sbrk_aligned>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	4e0f      	ldr	r6, [pc, #60]	@ (80138ac <sbrk_aligned+0x40>)
 8013870:	460c      	mov	r4, r1
 8013872:	6831      	ldr	r1, [r6, #0]
 8013874:	4605      	mov	r5, r0
 8013876:	b911      	cbnz	r1, 801387e <sbrk_aligned+0x12>
 8013878:	f000 fede 	bl	8014638 <_sbrk_r>
 801387c:	6030      	str	r0, [r6, #0]
 801387e:	4621      	mov	r1, r4
 8013880:	4628      	mov	r0, r5
 8013882:	f000 fed9 	bl	8014638 <_sbrk_r>
 8013886:	1c43      	adds	r3, r0, #1
 8013888:	d103      	bne.n	8013892 <sbrk_aligned+0x26>
 801388a:	f04f 34ff 	mov.w	r4, #4294967295
 801388e:	4620      	mov	r0, r4
 8013890:	bd70      	pop	{r4, r5, r6, pc}
 8013892:	1cc4      	adds	r4, r0, #3
 8013894:	f024 0403 	bic.w	r4, r4, #3
 8013898:	42a0      	cmp	r0, r4
 801389a:	d0f8      	beq.n	801388e <sbrk_aligned+0x22>
 801389c:	1a21      	subs	r1, r4, r0
 801389e:	4628      	mov	r0, r5
 80138a0:	f000 feca 	bl	8014638 <_sbrk_r>
 80138a4:	3001      	adds	r0, #1
 80138a6:	d1f2      	bne.n	801388e <sbrk_aligned+0x22>
 80138a8:	e7ef      	b.n	801388a <sbrk_aligned+0x1e>
 80138aa:	bf00      	nop
 80138ac:	200024c4 	.word	0x200024c4

080138b0 <_malloc_r>:
 80138b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138b4:	1ccd      	adds	r5, r1, #3
 80138b6:	f025 0503 	bic.w	r5, r5, #3
 80138ba:	3508      	adds	r5, #8
 80138bc:	2d0c      	cmp	r5, #12
 80138be:	bf38      	it	cc
 80138c0:	250c      	movcc	r5, #12
 80138c2:	2d00      	cmp	r5, #0
 80138c4:	4606      	mov	r6, r0
 80138c6:	db01      	blt.n	80138cc <_malloc_r+0x1c>
 80138c8:	42a9      	cmp	r1, r5
 80138ca:	d904      	bls.n	80138d6 <_malloc_r+0x26>
 80138cc:	230c      	movs	r3, #12
 80138ce:	6033      	str	r3, [r6, #0]
 80138d0:	2000      	movs	r0, #0
 80138d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80139ac <_malloc_r+0xfc>
 80138da:	f000 f869 	bl	80139b0 <__malloc_lock>
 80138de:	f8d8 3000 	ldr.w	r3, [r8]
 80138e2:	461c      	mov	r4, r3
 80138e4:	bb44      	cbnz	r4, 8013938 <_malloc_r+0x88>
 80138e6:	4629      	mov	r1, r5
 80138e8:	4630      	mov	r0, r6
 80138ea:	f7ff ffbf 	bl	801386c <sbrk_aligned>
 80138ee:	1c43      	adds	r3, r0, #1
 80138f0:	4604      	mov	r4, r0
 80138f2:	d158      	bne.n	80139a6 <_malloc_r+0xf6>
 80138f4:	f8d8 4000 	ldr.w	r4, [r8]
 80138f8:	4627      	mov	r7, r4
 80138fa:	2f00      	cmp	r7, #0
 80138fc:	d143      	bne.n	8013986 <_malloc_r+0xd6>
 80138fe:	2c00      	cmp	r4, #0
 8013900:	d04b      	beq.n	801399a <_malloc_r+0xea>
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	4639      	mov	r1, r7
 8013906:	4630      	mov	r0, r6
 8013908:	eb04 0903 	add.w	r9, r4, r3
 801390c:	f000 fe94 	bl	8014638 <_sbrk_r>
 8013910:	4581      	cmp	r9, r0
 8013912:	d142      	bne.n	801399a <_malloc_r+0xea>
 8013914:	6821      	ldr	r1, [r4, #0]
 8013916:	1a6d      	subs	r5, r5, r1
 8013918:	4629      	mov	r1, r5
 801391a:	4630      	mov	r0, r6
 801391c:	f7ff ffa6 	bl	801386c <sbrk_aligned>
 8013920:	3001      	adds	r0, #1
 8013922:	d03a      	beq.n	801399a <_malloc_r+0xea>
 8013924:	6823      	ldr	r3, [r4, #0]
 8013926:	442b      	add	r3, r5
 8013928:	6023      	str	r3, [r4, #0]
 801392a:	f8d8 3000 	ldr.w	r3, [r8]
 801392e:	685a      	ldr	r2, [r3, #4]
 8013930:	bb62      	cbnz	r2, 801398c <_malloc_r+0xdc>
 8013932:	f8c8 7000 	str.w	r7, [r8]
 8013936:	e00f      	b.n	8013958 <_malloc_r+0xa8>
 8013938:	6822      	ldr	r2, [r4, #0]
 801393a:	1b52      	subs	r2, r2, r5
 801393c:	d420      	bmi.n	8013980 <_malloc_r+0xd0>
 801393e:	2a0b      	cmp	r2, #11
 8013940:	d917      	bls.n	8013972 <_malloc_r+0xc2>
 8013942:	1961      	adds	r1, r4, r5
 8013944:	42a3      	cmp	r3, r4
 8013946:	6025      	str	r5, [r4, #0]
 8013948:	bf18      	it	ne
 801394a:	6059      	strne	r1, [r3, #4]
 801394c:	6863      	ldr	r3, [r4, #4]
 801394e:	bf08      	it	eq
 8013950:	f8c8 1000 	streq.w	r1, [r8]
 8013954:	5162      	str	r2, [r4, r5]
 8013956:	604b      	str	r3, [r1, #4]
 8013958:	4630      	mov	r0, r6
 801395a:	f000 f82f 	bl	80139bc <__malloc_unlock>
 801395e:	f104 000b 	add.w	r0, r4, #11
 8013962:	1d23      	adds	r3, r4, #4
 8013964:	f020 0007 	bic.w	r0, r0, #7
 8013968:	1ac2      	subs	r2, r0, r3
 801396a:	bf1c      	itt	ne
 801396c:	1a1b      	subne	r3, r3, r0
 801396e:	50a3      	strne	r3, [r4, r2]
 8013970:	e7af      	b.n	80138d2 <_malloc_r+0x22>
 8013972:	6862      	ldr	r2, [r4, #4]
 8013974:	42a3      	cmp	r3, r4
 8013976:	bf0c      	ite	eq
 8013978:	f8c8 2000 	streq.w	r2, [r8]
 801397c:	605a      	strne	r2, [r3, #4]
 801397e:	e7eb      	b.n	8013958 <_malloc_r+0xa8>
 8013980:	4623      	mov	r3, r4
 8013982:	6864      	ldr	r4, [r4, #4]
 8013984:	e7ae      	b.n	80138e4 <_malloc_r+0x34>
 8013986:	463c      	mov	r4, r7
 8013988:	687f      	ldr	r7, [r7, #4]
 801398a:	e7b6      	b.n	80138fa <_malloc_r+0x4a>
 801398c:	461a      	mov	r2, r3
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	42a3      	cmp	r3, r4
 8013992:	d1fb      	bne.n	801398c <_malloc_r+0xdc>
 8013994:	2300      	movs	r3, #0
 8013996:	6053      	str	r3, [r2, #4]
 8013998:	e7de      	b.n	8013958 <_malloc_r+0xa8>
 801399a:	230c      	movs	r3, #12
 801399c:	6033      	str	r3, [r6, #0]
 801399e:	4630      	mov	r0, r6
 80139a0:	f000 f80c 	bl	80139bc <__malloc_unlock>
 80139a4:	e794      	b.n	80138d0 <_malloc_r+0x20>
 80139a6:	6005      	str	r5, [r0, #0]
 80139a8:	e7d6      	b.n	8013958 <_malloc_r+0xa8>
 80139aa:	bf00      	nop
 80139ac:	200024c8 	.word	0x200024c8

080139b0 <__malloc_lock>:
 80139b0:	4801      	ldr	r0, [pc, #4]	@ (80139b8 <__malloc_lock+0x8>)
 80139b2:	f7ff b8aa 	b.w	8012b0a <__retarget_lock_acquire_recursive>
 80139b6:	bf00      	nop
 80139b8:	200024c0 	.word	0x200024c0

080139bc <__malloc_unlock>:
 80139bc:	4801      	ldr	r0, [pc, #4]	@ (80139c4 <__malloc_unlock+0x8>)
 80139be:	f7ff b8a5 	b.w	8012b0c <__retarget_lock_release_recursive>
 80139c2:	bf00      	nop
 80139c4:	200024c0 	.word	0x200024c0

080139c8 <_Balloc>:
 80139c8:	b570      	push	{r4, r5, r6, lr}
 80139ca:	69c6      	ldr	r6, [r0, #28]
 80139cc:	4604      	mov	r4, r0
 80139ce:	460d      	mov	r5, r1
 80139d0:	b976      	cbnz	r6, 80139f0 <_Balloc+0x28>
 80139d2:	2010      	movs	r0, #16
 80139d4:	f7ff ff42 	bl	801385c <malloc>
 80139d8:	4602      	mov	r2, r0
 80139da:	61e0      	str	r0, [r4, #28]
 80139dc:	b920      	cbnz	r0, 80139e8 <_Balloc+0x20>
 80139de:	4b18      	ldr	r3, [pc, #96]	@ (8013a40 <_Balloc+0x78>)
 80139e0:	4818      	ldr	r0, [pc, #96]	@ (8013a44 <_Balloc+0x7c>)
 80139e2:	216b      	movs	r1, #107	@ 0x6b
 80139e4:	f000 fe38 	bl	8014658 <__assert_func>
 80139e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139ec:	6006      	str	r6, [r0, #0]
 80139ee:	60c6      	str	r6, [r0, #12]
 80139f0:	69e6      	ldr	r6, [r4, #28]
 80139f2:	68f3      	ldr	r3, [r6, #12]
 80139f4:	b183      	cbz	r3, 8013a18 <_Balloc+0x50>
 80139f6:	69e3      	ldr	r3, [r4, #28]
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80139fe:	b9b8      	cbnz	r0, 8013a30 <_Balloc+0x68>
 8013a00:	2101      	movs	r1, #1
 8013a02:	fa01 f605 	lsl.w	r6, r1, r5
 8013a06:	1d72      	adds	r2, r6, #5
 8013a08:	0092      	lsls	r2, r2, #2
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 fe42 	bl	8014694 <_calloc_r>
 8013a10:	b160      	cbz	r0, 8013a2c <_Balloc+0x64>
 8013a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a16:	e00e      	b.n	8013a36 <_Balloc+0x6e>
 8013a18:	2221      	movs	r2, #33	@ 0x21
 8013a1a:	2104      	movs	r1, #4
 8013a1c:	4620      	mov	r0, r4
 8013a1e:	f000 fe39 	bl	8014694 <_calloc_r>
 8013a22:	69e3      	ldr	r3, [r4, #28]
 8013a24:	60f0      	str	r0, [r6, #12]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1e4      	bne.n	80139f6 <_Balloc+0x2e>
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	bd70      	pop	{r4, r5, r6, pc}
 8013a30:	6802      	ldr	r2, [r0, #0]
 8013a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a36:	2300      	movs	r3, #0
 8013a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a3c:	e7f7      	b.n	8013a2e <_Balloc+0x66>
 8013a3e:	bf00      	nop
 8013a40:	08014aa5 	.word	0x08014aa5
 8013a44:	08014b25 	.word	0x08014b25

08013a48 <_Bfree>:
 8013a48:	b570      	push	{r4, r5, r6, lr}
 8013a4a:	69c6      	ldr	r6, [r0, #28]
 8013a4c:	4605      	mov	r5, r0
 8013a4e:	460c      	mov	r4, r1
 8013a50:	b976      	cbnz	r6, 8013a70 <_Bfree+0x28>
 8013a52:	2010      	movs	r0, #16
 8013a54:	f7ff ff02 	bl	801385c <malloc>
 8013a58:	4602      	mov	r2, r0
 8013a5a:	61e8      	str	r0, [r5, #28]
 8013a5c:	b920      	cbnz	r0, 8013a68 <_Bfree+0x20>
 8013a5e:	4b09      	ldr	r3, [pc, #36]	@ (8013a84 <_Bfree+0x3c>)
 8013a60:	4809      	ldr	r0, [pc, #36]	@ (8013a88 <_Bfree+0x40>)
 8013a62:	218f      	movs	r1, #143	@ 0x8f
 8013a64:	f000 fdf8 	bl	8014658 <__assert_func>
 8013a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a6c:	6006      	str	r6, [r0, #0]
 8013a6e:	60c6      	str	r6, [r0, #12]
 8013a70:	b13c      	cbz	r4, 8013a82 <_Bfree+0x3a>
 8013a72:	69eb      	ldr	r3, [r5, #28]
 8013a74:	6862      	ldr	r2, [r4, #4]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a7c:	6021      	str	r1, [r4, #0]
 8013a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a82:	bd70      	pop	{r4, r5, r6, pc}
 8013a84:	08014aa5 	.word	0x08014aa5
 8013a88:	08014b25 	.word	0x08014b25

08013a8c <__multadd>:
 8013a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a90:	690d      	ldr	r5, [r1, #16]
 8013a92:	4607      	mov	r7, r0
 8013a94:	460c      	mov	r4, r1
 8013a96:	461e      	mov	r6, r3
 8013a98:	f101 0c14 	add.w	ip, r1, #20
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8013aa2:	b299      	uxth	r1, r3
 8013aa4:	fb02 6101 	mla	r1, r2, r1, r6
 8013aa8:	0c1e      	lsrs	r6, r3, #16
 8013aaa:	0c0b      	lsrs	r3, r1, #16
 8013aac:	fb02 3306 	mla	r3, r2, r6, r3
 8013ab0:	b289      	uxth	r1, r1
 8013ab2:	3001      	adds	r0, #1
 8013ab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013ab8:	4285      	cmp	r5, r0
 8013aba:	f84c 1b04 	str.w	r1, [ip], #4
 8013abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013ac2:	dcec      	bgt.n	8013a9e <__multadd+0x12>
 8013ac4:	b30e      	cbz	r6, 8013b0a <__multadd+0x7e>
 8013ac6:	68a3      	ldr	r3, [r4, #8]
 8013ac8:	42ab      	cmp	r3, r5
 8013aca:	dc19      	bgt.n	8013b00 <__multadd+0x74>
 8013acc:	6861      	ldr	r1, [r4, #4]
 8013ace:	4638      	mov	r0, r7
 8013ad0:	3101      	adds	r1, #1
 8013ad2:	f7ff ff79 	bl	80139c8 <_Balloc>
 8013ad6:	4680      	mov	r8, r0
 8013ad8:	b928      	cbnz	r0, 8013ae6 <__multadd+0x5a>
 8013ada:	4602      	mov	r2, r0
 8013adc:	4b0c      	ldr	r3, [pc, #48]	@ (8013b10 <__multadd+0x84>)
 8013ade:	480d      	ldr	r0, [pc, #52]	@ (8013b14 <__multadd+0x88>)
 8013ae0:	21ba      	movs	r1, #186	@ 0xba
 8013ae2:	f000 fdb9 	bl	8014658 <__assert_func>
 8013ae6:	6922      	ldr	r2, [r4, #16]
 8013ae8:	3202      	adds	r2, #2
 8013aea:	f104 010c 	add.w	r1, r4, #12
 8013aee:	0092      	lsls	r2, r2, #2
 8013af0:	300c      	adds	r0, #12
 8013af2:	f7ff f80c 	bl	8012b0e <memcpy>
 8013af6:	4621      	mov	r1, r4
 8013af8:	4638      	mov	r0, r7
 8013afa:	f7ff ffa5 	bl	8013a48 <_Bfree>
 8013afe:	4644      	mov	r4, r8
 8013b00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b04:	3501      	adds	r5, #1
 8013b06:	615e      	str	r6, [r3, #20]
 8013b08:	6125      	str	r5, [r4, #16]
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b10:	08014b14 	.word	0x08014b14
 8013b14:	08014b25 	.word	0x08014b25

08013b18 <__hi0bits>:
 8013b18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	bf36      	itet	cc
 8013b20:	0403      	lslcc	r3, r0, #16
 8013b22:	2000      	movcs	r0, #0
 8013b24:	2010      	movcc	r0, #16
 8013b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013b2a:	bf3c      	itt	cc
 8013b2c:	021b      	lslcc	r3, r3, #8
 8013b2e:	3008      	addcc	r0, #8
 8013b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b34:	bf3c      	itt	cc
 8013b36:	011b      	lslcc	r3, r3, #4
 8013b38:	3004      	addcc	r0, #4
 8013b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b3e:	bf3c      	itt	cc
 8013b40:	009b      	lslcc	r3, r3, #2
 8013b42:	3002      	addcc	r0, #2
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	db05      	blt.n	8013b54 <__hi0bits+0x3c>
 8013b48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b4c:	f100 0001 	add.w	r0, r0, #1
 8013b50:	bf08      	it	eq
 8013b52:	2020      	moveq	r0, #32
 8013b54:	4770      	bx	lr

08013b56 <__lo0bits>:
 8013b56:	6803      	ldr	r3, [r0, #0]
 8013b58:	4602      	mov	r2, r0
 8013b5a:	f013 0007 	ands.w	r0, r3, #7
 8013b5e:	d00b      	beq.n	8013b78 <__lo0bits+0x22>
 8013b60:	07d9      	lsls	r1, r3, #31
 8013b62:	d421      	bmi.n	8013ba8 <__lo0bits+0x52>
 8013b64:	0798      	lsls	r0, r3, #30
 8013b66:	bf49      	itett	mi
 8013b68:	085b      	lsrmi	r3, r3, #1
 8013b6a:	089b      	lsrpl	r3, r3, #2
 8013b6c:	2001      	movmi	r0, #1
 8013b6e:	6013      	strmi	r3, [r2, #0]
 8013b70:	bf5c      	itt	pl
 8013b72:	6013      	strpl	r3, [r2, #0]
 8013b74:	2002      	movpl	r0, #2
 8013b76:	4770      	bx	lr
 8013b78:	b299      	uxth	r1, r3
 8013b7a:	b909      	cbnz	r1, 8013b80 <__lo0bits+0x2a>
 8013b7c:	0c1b      	lsrs	r3, r3, #16
 8013b7e:	2010      	movs	r0, #16
 8013b80:	b2d9      	uxtb	r1, r3
 8013b82:	b909      	cbnz	r1, 8013b88 <__lo0bits+0x32>
 8013b84:	3008      	adds	r0, #8
 8013b86:	0a1b      	lsrs	r3, r3, #8
 8013b88:	0719      	lsls	r1, r3, #28
 8013b8a:	bf04      	itt	eq
 8013b8c:	091b      	lsreq	r3, r3, #4
 8013b8e:	3004      	addeq	r0, #4
 8013b90:	0799      	lsls	r1, r3, #30
 8013b92:	bf04      	itt	eq
 8013b94:	089b      	lsreq	r3, r3, #2
 8013b96:	3002      	addeq	r0, #2
 8013b98:	07d9      	lsls	r1, r3, #31
 8013b9a:	d403      	bmi.n	8013ba4 <__lo0bits+0x4e>
 8013b9c:	085b      	lsrs	r3, r3, #1
 8013b9e:	f100 0001 	add.w	r0, r0, #1
 8013ba2:	d003      	beq.n	8013bac <__lo0bits+0x56>
 8013ba4:	6013      	str	r3, [r2, #0]
 8013ba6:	4770      	bx	lr
 8013ba8:	2000      	movs	r0, #0
 8013baa:	4770      	bx	lr
 8013bac:	2020      	movs	r0, #32
 8013bae:	4770      	bx	lr

08013bb0 <__i2b>:
 8013bb0:	b510      	push	{r4, lr}
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	2101      	movs	r1, #1
 8013bb6:	f7ff ff07 	bl	80139c8 <_Balloc>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	b928      	cbnz	r0, 8013bca <__i2b+0x1a>
 8013bbe:	4b05      	ldr	r3, [pc, #20]	@ (8013bd4 <__i2b+0x24>)
 8013bc0:	4805      	ldr	r0, [pc, #20]	@ (8013bd8 <__i2b+0x28>)
 8013bc2:	f240 1145 	movw	r1, #325	@ 0x145
 8013bc6:	f000 fd47 	bl	8014658 <__assert_func>
 8013bca:	2301      	movs	r3, #1
 8013bcc:	6144      	str	r4, [r0, #20]
 8013bce:	6103      	str	r3, [r0, #16]
 8013bd0:	bd10      	pop	{r4, pc}
 8013bd2:	bf00      	nop
 8013bd4:	08014b14 	.word	0x08014b14
 8013bd8:	08014b25 	.word	0x08014b25

08013bdc <__multiply>:
 8013bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013be0:	4614      	mov	r4, r2
 8013be2:	690a      	ldr	r2, [r1, #16]
 8013be4:	6923      	ldr	r3, [r4, #16]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	bfa8      	it	ge
 8013bea:	4623      	movge	r3, r4
 8013bec:	460f      	mov	r7, r1
 8013bee:	bfa4      	itt	ge
 8013bf0:	460c      	movge	r4, r1
 8013bf2:	461f      	movge	r7, r3
 8013bf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013bf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013bfc:	68a3      	ldr	r3, [r4, #8]
 8013bfe:	6861      	ldr	r1, [r4, #4]
 8013c00:	eb0a 0609 	add.w	r6, sl, r9
 8013c04:	42b3      	cmp	r3, r6
 8013c06:	b085      	sub	sp, #20
 8013c08:	bfb8      	it	lt
 8013c0a:	3101      	addlt	r1, #1
 8013c0c:	f7ff fedc 	bl	80139c8 <_Balloc>
 8013c10:	b930      	cbnz	r0, 8013c20 <__multiply+0x44>
 8013c12:	4602      	mov	r2, r0
 8013c14:	4b44      	ldr	r3, [pc, #272]	@ (8013d28 <__multiply+0x14c>)
 8013c16:	4845      	ldr	r0, [pc, #276]	@ (8013d2c <__multiply+0x150>)
 8013c18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013c1c:	f000 fd1c 	bl	8014658 <__assert_func>
 8013c20:	f100 0514 	add.w	r5, r0, #20
 8013c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c28:	462b      	mov	r3, r5
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4543      	cmp	r3, r8
 8013c2e:	d321      	bcc.n	8013c74 <__multiply+0x98>
 8013c30:	f107 0114 	add.w	r1, r7, #20
 8013c34:	f104 0214 	add.w	r2, r4, #20
 8013c38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013c3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013c40:	9302      	str	r3, [sp, #8]
 8013c42:	1b13      	subs	r3, r2, r4
 8013c44:	3b15      	subs	r3, #21
 8013c46:	f023 0303 	bic.w	r3, r3, #3
 8013c4a:	3304      	adds	r3, #4
 8013c4c:	f104 0715 	add.w	r7, r4, #21
 8013c50:	42ba      	cmp	r2, r7
 8013c52:	bf38      	it	cc
 8013c54:	2304      	movcc	r3, #4
 8013c56:	9301      	str	r3, [sp, #4]
 8013c58:	9b02      	ldr	r3, [sp, #8]
 8013c5a:	9103      	str	r1, [sp, #12]
 8013c5c:	428b      	cmp	r3, r1
 8013c5e:	d80c      	bhi.n	8013c7a <__multiply+0x9e>
 8013c60:	2e00      	cmp	r6, #0
 8013c62:	dd03      	ble.n	8013c6c <__multiply+0x90>
 8013c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d05b      	beq.n	8013d24 <__multiply+0x148>
 8013c6c:	6106      	str	r6, [r0, #16]
 8013c6e:	b005      	add	sp, #20
 8013c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c74:	f843 2b04 	str.w	r2, [r3], #4
 8013c78:	e7d8      	b.n	8013c2c <__multiply+0x50>
 8013c7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8013c7e:	f1ba 0f00 	cmp.w	sl, #0
 8013c82:	d024      	beq.n	8013cce <__multiply+0xf2>
 8013c84:	f104 0e14 	add.w	lr, r4, #20
 8013c88:	46a9      	mov	r9, r5
 8013c8a:	f04f 0c00 	mov.w	ip, #0
 8013c8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013c92:	f8d9 3000 	ldr.w	r3, [r9]
 8013c96:	fa1f fb87 	uxth.w	fp, r7
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013ca4:	f8d9 7000 	ldr.w	r7, [r9]
 8013ca8:	4463      	add	r3, ip
 8013caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013cae:	fb0a c70b 	mla	r7, sl, fp, ip
 8013cb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013cbc:	4572      	cmp	r2, lr
 8013cbe:	f849 3b04 	str.w	r3, [r9], #4
 8013cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013cc6:	d8e2      	bhi.n	8013c8e <__multiply+0xb2>
 8013cc8:	9b01      	ldr	r3, [sp, #4]
 8013cca:	f845 c003 	str.w	ip, [r5, r3]
 8013cce:	9b03      	ldr	r3, [sp, #12]
 8013cd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013cd4:	3104      	adds	r1, #4
 8013cd6:	f1b9 0f00 	cmp.w	r9, #0
 8013cda:	d021      	beq.n	8013d20 <__multiply+0x144>
 8013cdc:	682b      	ldr	r3, [r5, #0]
 8013cde:	f104 0c14 	add.w	ip, r4, #20
 8013ce2:	46ae      	mov	lr, r5
 8013ce4:	f04f 0a00 	mov.w	sl, #0
 8013ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8013cec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013cf0:	fb09 770b 	mla	r7, r9, fp, r7
 8013cf4:	4457      	add	r7, sl
 8013cf6:	b29b      	uxth	r3, r3
 8013cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013cfc:	f84e 3b04 	str.w	r3, [lr], #4
 8013d00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d08:	f8be 3000 	ldrh.w	r3, [lr]
 8013d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8013d10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013d14:	4562      	cmp	r2, ip
 8013d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d1a:	d8e5      	bhi.n	8013ce8 <__multiply+0x10c>
 8013d1c:	9f01      	ldr	r7, [sp, #4]
 8013d1e:	51eb      	str	r3, [r5, r7]
 8013d20:	3504      	adds	r5, #4
 8013d22:	e799      	b.n	8013c58 <__multiply+0x7c>
 8013d24:	3e01      	subs	r6, #1
 8013d26:	e79b      	b.n	8013c60 <__multiply+0x84>
 8013d28:	08014b14 	.word	0x08014b14
 8013d2c:	08014b25 	.word	0x08014b25

08013d30 <__pow5mult>:
 8013d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d34:	4615      	mov	r5, r2
 8013d36:	f012 0203 	ands.w	r2, r2, #3
 8013d3a:	4607      	mov	r7, r0
 8013d3c:	460e      	mov	r6, r1
 8013d3e:	d007      	beq.n	8013d50 <__pow5mult+0x20>
 8013d40:	4c25      	ldr	r4, [pc, #148]	@ (8013dd8 <__pow5mult+0xa8>)
 8013d42:	3a01      	subs	r2, #1
 8013d44:	2300      	movs	r3, #0
 8013d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d4a:	f7ff fe9f 	bl	8013a8c <__multadd>
 8013d4e:	4606      	mov	r6, r0
 8013d50:	10ad      	asrs	r5, r5, #2
 8013d52:	d03d      	beq.n	8013dd0 <__pow5mult+0xa0>
 8013d54:	69fc      	ldr	r4, [r7, #28]
 8013d56:	b97c      	cbnz	r4, 8013d78 <__pow5mult+0x48>
 8013d58:	2010      	movs	r0, #16
 8013d5a:	f7ff fd7f 	bl	801385c <malloc>
 8013d5e:	4602      	mov	r2, r0
 8013d60:	61f8      	str	r0, [r7, #28]
 8013d62:	b928      	cbnz	r0, 8013d70 <__pow5mult+0x40>
 8013d64:	4b1d      	ldr	r3, [pc, #116]	@ (8013ddc <__pow5mult+0xac>)
 8013d66:	481e      	ldr	r0, [pc, #120]	@ (8013de0 <__pow5mult+0xb0>)
 8013d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013d6c:	f000 fc74 	bl	8014658 <__assert_func>
 8013d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d74:	6004      	str	r4, [r0, #0]
 8013d76:	60c4      	str	r4, [r0, #12]
 8013d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d80:	b94c      	cbnz	r4, 8013d96 <__pow5mult+0x66>
 8013d82:	f240 2171 	movw	r1, #625	@ 0x271
 8013d86:	4638      	mov	r0, r7
 8013d88:	f7ff ff12 	bl	8013bb0 <__i2b>
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d92:	4604      	mov	r4, r0
 8013d94:	6003      	str	r3, [r0, #0]
 8013d96:	f04f 0900 	mov.w	r9, #0
 8013d9a:	07eb      	lsls	r3, r5, #31
 8013d9c:	d50a      	bpl.n	8013db4 <__pow5mult+0x84>
 8013d9e:	4631      	mov	r1, r6
 8013da0:	4622      	mov	r2, r4
 8013da2:	4638      	mov	r0, r7
 8013da4:	f7ff ff1a 	bl	8013bdc <__multiply>
 8013da8:	4631      	mov	r1, r6
 8013daa:	4680      	mov	r8, r0
 8013dac:	4638      	mov	r0, r7
 8013dae:	f7ff fe4b 	bl	8013a48 <_Bfree>
 8013db2:	4646      	mov	r6, r8
 8013db4:	106d      	asrs	r5, r5, #1
 8013db6:	d00b      	beq.n	8013dd0 <__pow5mult+0xa0>
 8013db8:	6820      	ldr	r0, [r4, #0]
 8013dba:	b938      	cbnz	r0, 8013dcc <__pow5mult+0x9c>
 8013dbc:	4622      	mov	r2, r4
 8013dbe:	4621      	mov	r1, r4
 8013dc0:	4638      	mov	r0, r7
 8013dc2:	f7ff ff0b 	bl	8013bdc <__multiply>
 8013dc6:	6020      	str	r0, [r4, #0]
 8013dc8:	f8c0 9000 	str.w	r9, [r0]
 8013dcc:	4604      	mov	r4, r0
 8013dce:	e7e4      	b.n	8013d9a <__pow5mult+0x6a>
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dd6:	bf00      	nop
 8013dd8:	08014b80 	.word	0x08014b80
 8013ddc:	08014aa5 	.word	0x08014aa5
 8013de0:	08014b25 	.word	0x08014b25

08013de4 <__lshift>:
 8013de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013de8:	460c      	mov	r4, r1
 8013dea:	6849      	ldr	r1, [r1, #4]
 8013dec:	6923      	ldr	r3, [r4, #16]
 8013dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013df2:	68a3      	ldr	r3, [r4, #8]
 8013df4:	4607      	mov	r7, r0
 8013df6:	4691      	mov	r9, r2
 8013df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013dfc:	f108 0601 	add.w	r6, r8, #1
 8013e00:	42b3      	cmp	r3, r6
 8013e02:	db0b      	blt.n	8013e1c <__lshift+0x38>
 8013e04:	4638      	mov	r0, r7
 8013e06:	f7ff fddf 	bl	80139c8 <_Balloc>
 8013e0a:	4605      	mov	r5, r0
 8013e0c:	b948      	cbnz	r0, 8013e22 <__lshift+0x3e>
 8013e0e:	4602      	mov	r2, r0
 8013e10:	4b28      	ldr	r3, [pc, #160]	@ (8013eb4 <__lshift+0xd0>)
 8013e12:	4829      	ldr	r0, [pc, #164]	@ (8013eb8 <__lshift+0xd4>)
 8013e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013e18:	f000 fc1e 	bl	8014658 <__assert_func>
 8013e1c:	3101      	adds	r1, #1
 8013e1e:	005b      	lsls	r3, r3, #1
 8013e20:	e7ee      	b.n	8013e00 <__lshift+0x1c>
 8013e22:	2300      	movs	r3, #0
 8013e24:	f100 0114 	add.w	r1, r0, #20
 8013e28:	f100 0210 	add.w	r2, r0, #16
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	4553      	cmp	r3, sl
 8013e30:	db33      	blt.n	8013e9a <__lshift+0xb6>
 8013e32:	6920      	ldr	r0, [r4, #16]
 8013e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e38:	f104 0314 	add.w	r3, r4, #20
 8013e3c:	f019 091f 	ands.w	r9, r9, #31
 8013e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e48:	d02b      	beq.n	8013ea2 <__lshift+0xbe>
 8013e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8013e4e:	468a      	mov	sl, r1
 8013e50:	2200      	movs	r2, #0
 8013e52:	6818      	ldr	r0, [r3, #0]
 8013e54:	fa00 f009 	lsl.w	r0, r0, r9
 8013e58:	4310      	orrs	r0, r2
 8013e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8013e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e62:	459c      	cmp	ip, r3
 8013e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8013e68:	d8f3      	bhi.n	8013e52 <__lshift+0x6e>
 8013e6a:	ebac 0304 	sub.w	r3, ip, r4
 8013e6e:	3b15      	subs	r3, #21
 8013e70:	f023 0303 	bic.w	r3, r3, #3
 8013e74:	3304      	adds	r3, #4
 8013e76:	f104 0015 	add.w	r0, r4, #21
 8013e7a:	4584      	cmp	ip, r0
 8013e7c:	bf38      	it	cc
 8013e7e:	2304      	movcc	r3, #4
 8013e80:	50ca      	str	r2, [r1, r3]
 8013e82:	b10a      	cbz	r2, 8013e88 <__lshift+0xa4>
 8013e84:	f108 0602 	add.w	r6, r8, #2
 8013e88:	3e01      	subs	r6, #1
 8013e8a:	4638      	mov	r0, r7
 8013e8c:	612e      	str	r6, [r5, #16]
 8013e8e:	4621      	mov	r1, r4
 8013e90:	f7ff fdda 	bl	8013a48 <_Bfree>
 8013e94:	4628      	mov	r0, r5
 8013e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e9e:	3301      	adds	r3, #1
 8013ea0:	e7c5      	b.n	8013e2e <__lshift+0x4a>
 8013ea2:	3904      	subs	r1, #4
 8013ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013eac:	459c      	cmp	ip, r3
 8013eae:	d8f9      	bhi.n	8013ea4 <__lshift+0xc0>
 8013eb0:	e7ea      	b.n	8013e88 <__lshift+0xa4>
 8013eb2:	bf00      	nop
 8013eb4:	08014b14 	.word	0x08014b14
 8013eb8:	08014b25 	.word	0x08014b25

08013ebc <__mcmp>:
 8013ebc:	690a      	ldr	r2, [r1, #16]
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	6900      	ldr	r0, [r0, #16]
 8013ec2:	1a80      	subs	r0, r0, r2
 8013ec4:	b530      	push	{r4, r5, lr}
 8013ec6:	d10e      	bne.n	8013ee6 <__mcmp+0x2a>
 8013ec8:	3314      	adds	r3, #20
 8013eca:	3114      	adds	r1, #20
 8013ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013edc:	4295      	cmp	r5, r2
 8013ede:	d003      	beq.n	8013ee8 <__mcmp+0x2c>
 8013ee0:	d205      	bcs.n	8013eee <__mcmp+0x32>
 8013ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee6:	bd30      	pop	{r4, r5, pc}
 8013ee8:	42a3      	cmp	r3, r4
 8013eea:	d3f3      	bcc.n	8013ed4 <__mcmp+0x18>
 8013eec:	e7fb      	b.n	8013ee6 <__mcmp+0x2a>
 8013eee:	2001      	movs	r0, #1
 8013ef0:	e7f9      	b.n	8013ee6 <__mcmp+0x2a>
	...

08013ef4 <__mdiff>:
 8013ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	4689      	mov	r9, r1
 8013efa:	4606      	mov	r6, r0
 8013efc:	4611      	mov	r1, r2
 8013efe:	4648      	mov	r0, r9
 8013f00:	4614      	mov	r4, r2
 8013f02:	f7ff ffdb 	bl	8013ebc <__mcmp>
 8013f06:	1e05      	subs	r5, r0, #0
 8013f08:	d112      	bne.n	8013f30 <__mdiff+0x3c>
 8013f0a:	4629      	mov	r1, r5
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	f7ff fd5b 	bl	80139c8 <_Balloc>
 8013f12:	4602      	mov	r2, r0
 8013f14:	b928      	cbnz	r0, 8013f22 <__mdiff+0x2e>
 8013f16:	4b3f      	ldr	r3, [pc, #252]	@ (8014014 <__mdiff+0x120>)
 8013f18:	f240 2137 	movw	r1, #567	@ 0x237
 8013f1c:	483e      	ldr	r0, [pc, #248]	@ (8014018 <__mdiff+0x124>)
 8013f1e:	f000 fb9b 	bl	8014658 <__assert_func>
 8013f22:	2301      	movs	r3, #1
 8013f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f28:	4610      	mov	r0, r2
 8013f2a:	b003      	add	sp, #12
 8013f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f30:	bfbc      	itt	lt
 8013f32:	464b      	movlt	r3, r9
 8013f34:	46a1      	movlt	r9, r4
 8013f36:	4630      	mov	r0, r6
 8013f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f3c:	bfba      	itte	lt
 8013f3e:	461c      	movlt	r4, r3
 8013f40:	2501      	movlt	r5, #1
 8013f42:	2500      	movge	r5, #0
 8013f44:	f7ff fd40 	bl	80139c8 <_Balloc>
 8013f48:	4602      	mov	r2, r0
 8013f4a:	b918      	cbnz	r0, 8013f54 <__mdiff+0x60>
 8013f4c:	4b31      	ldr	r3, [pc, #196]	@ (8014014 <__mdiff+0x120>)
 8013f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8013f52:	e7e3      	b.n	8013f1c <__mdiff+0x28>
 8013f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013f58:	6926      	ldr	r6, [r4, #16]
 8013f5a:	60c5      	str	r5, [r0, #12]
 8013f5c:	f109 0310 	add.w	r3, r9, #16
 8013f60:	f109 0514 	add.w	r5, r9, #20
 8013f64:	f104 0e14 	add.w	lr, r4, #20
 8013f68:	f100 0b14 	add.w	fp, r0, #20
 8013f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013f74:	9301      	str	r3, [sp, #4]
 8013f76:	46d9      	mov	r9, fp
 8013f78:	f04f 0c00 	mov.w	ip, #0
 8013f7c:	9b01      	ldr	r3, [sp, #4]
 8013f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013f86:	9301      	str	r3, [sp, #4]
 8013f88:	fa1f f38a 	uxth.w	r3, sl
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	b283      	uxth	r3, r0
 8013f90:	1acb      	subs	r3, r1, r3
 8013f92:	0c00      	lsrs	r0, r0, #16
 8013f94:	4463      	add	r3, ip
 8013f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013fa4:	4576      	cmp	r6, lr
 8013fa6:	f849 3b04 	str.w	r3, [r9], #4
 8013faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013fae:	d8e5      	bhi.n	8013f7c <__mdiff+0x88>
 8013fb0:	1b33      	subs	r3, r6, r4
 8013fb2:	3b15      	subs	r3, #21
 8013fb4:	f023 0303 	bic.w	r3, r3, #3
 8013fb8:	3415      	adds	r4, #21
 8013fba:	3304      	adds	r3, #4
 8013fbc:	42a6      	cmp	r6, r4
 8013fbe:	bf38      	it	cc
 8013fc0:	2304      	movcc	r3, #4
 8013fc2:	441d      	add	r5, r3
 8013fc4:	445b      	add	r3, fp
 8013fc6:	461e      	mov	r6, r3
 8013fc8:	462c      	mov	r4, r5
 8013fca:	4544      	cmp	r4, r8
 8013fcc:	d30e      	bcc.n	8013fec <__mdiff+0xf8>
 8013fce:	f108 0103 	add.w	r1, r8, #3
 8013fd2:	1b49      	subs	r1, r1, r5
 8013fd4:	f021 0103 	bic.w	r1, r1, #3
 8013fd8:	3d03      	subs	r5, #3
 8013fda:	45a8      	cmp	r8, r5
 8013fdc:	bf38      	it	cc
 8013fde:	2100      	movcc	r1, #0
 8013fe0:	440b      	add	r3, r1
 8013fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013fe6:	b191      	cbz	r1, 801400e <__mdiff+0x11a>
 8013fe8:	6117      	str	r7, [r2, #16]
 8013fea:	e79d      	b.n	8013f28 <__mdiff+0x34>
 8013fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8013ff0:	46e6      	mov	lr, ip
 8013ff2:	0c08      	lsrs	r0, r1, #16
 8013ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8013ff8:	4471      	add	r1, lr
 8013ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013ffe:	b289      	uxth	r1, r1
 8014000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014004:	f846 1b04 	str.w	r1, [r6], #4
 8014008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801400c:	e7dd      	b.n	8013fca <__mdiff+0xd6>
 801400e:	3f01      	subs	r7, #1
 8014010:	e7e7      	b.n	8013fe2 <__mdiff+0xee>
 8014012:	bf00      	nop
 8014014:	08014b14 	.word	0x08014b14
 8014018:	08014b25 	.word	0x08014b25

0801401c <__d2b>:
 801401c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014020:	460f      	mov	r7, r1
 8014022:	2101      	movs	r1, #1
 8014024:	ec59 8b10 	vmov	r8, r9, d0
 8014028:	4616      	mov	r6, r2
 801402a:	f7ff fccd 	bl	80139c8 <_Balloc>
 801402e:	4604      	mov	r4, r0
 8014030:	b930      	cbnz	r0, 8014040 <__d2b+0x24>
 8014032:	4602      	mov	r2, r0
 8014034:	4b23      	ldr	r3, [pc, #140]	@ (80140c4 <__d2b+0xa8>)
 8014036:	4824      	ldr	r0, [pc, #144]	@ (80140c8 <__d2b+0xac>)
 8014038:	f240 310f 	movw	r1, #783	@ 0x30f
 801403c:	f000 fb0c 	bl	8014658 <__assert_func>
 8014040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014048:	b10d      	cbz	r5, 801404e <__d2b+0x32>
 801404a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801404e:	9301      	str	r3, [sp, #4]
 8014050:	f1b8 0300 	subs.w	r3, r8, #0
 8014054:	d023      	beq.n	801409e <__d2b+0x82>
 8014056:	4668      	mov	r0, sp
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	f7ff fd7c 	bl	8013b56 <__lo0bits>
 801405e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014062:	b1d0      	cbz	r0, 801409a <__d2b+0x7e>
 8014064:	f1c0 0320 	rsb	r3, r0, #32
 8014068:	fa02 f303 	lsl.w	r3, r2, r3
 801406c:	430b      	orrs	r3, r1
 801406e:	40c2      	lsrs	r2, r0
 8014070:	6163      	str	r3, [r4, #20]
 8014072:	9201      	str	r2, [sp, #4]
 8014074:	9b01      	ldr	r3, [sp, #4]
 8014076:	61a3      	str	r3, [r4, #24]
 8014078:	2b00      	cmp	r3, #0
 801407a:	bf0c      	ite	eq
 801407c:	2201      	moveq	r2, #1
 801407e:	2202      	movne	r2, #2
 8014080:	6122      	str	r2, [r4, #16]
 8014082:	b1a5      	cbz	r5, 80140ae <__d2b+0x92>
 8014084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014088:	4405      	add	r5, r0
 801408a:	603d      	str	r5, [r7, #0]
 801408c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014090:	6030      	str	r0, [r6, #0]
 8014092:	4620      	mov	r0, r4
 8014094:	b003      	add	sp, #12
 8014096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801409a:	6161      	str	r1, [r4, #20]
 801409c:	e7ea      	b.n	8014074 <__d2b+0x58>
 801409e:	a801      	add	r0, sp, #4
 80140a0:	f7ff fd59 	bl	8013b56 <__lo0bits>
 80140a4:	9b01      	ldr	r3, [sp, #4]
 80140a6:	6163      	str	r3, [r4, #20]
 80140a8:	3020      	adds	r0, #32
 80140aa:	2201      	movs	r2, #1
 80140ac:	e7e8      	b.n	8014080 <__d2b+0x64>
 80140ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80140b6:	6038      	str	r0, [r7, #0]
 80140b8:	6918      	ldr	r0, [r3, #16]
 80140ba:	f7ff fd2d 	bl	8013b18 <__hi0bits>
 80140be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80140c2:	e7e5      	b.n	8014090 <__d2b+0x74>
 80140c4:	08014b14 	.word	0x08014b14
 80140c8:	08014b25 	.word	0x08014b25

080140cc <__sfputc_r>:
 80140cc:	6893      	ldr	r3, [r2, #8]
 80140ce:	3b01      	subs	r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	b410      	push	{r4}
 80140d4:	6093      	str	r3, [r2, #8]
 80140d6:	da08      	bge.n	80140ea <__sfputc_r+0x1e>
 80140d8:	6994      	ldr	r4, [r2, #24]
 80140da:	42a3      	cmp	r3, r4
 80140dc:	db01      	blt.n	80140e2 <__sfputc_r+0x16>
 80140de:	290a      	cmp	r1, #10
 80140e0:	d103      	bne.n	80140ea <__sfputc_r+0x1e>
 80140e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140e6:	f000 ba13 	b.w	8014510 <__swbuf_r>
 80140ea:	6813      	ldr	r3, [r2, #0]
 80140ec:	1c58      	adds	r0, r3, #1
 80140ee:	6010      	str	r0, [r2, #0]
 80140f0:	7019      	strb	r1, [r3, #0]
 80140f2:	4608      	mov	r0, r1
 80140f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <__sfputs_r>:
 80140fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140fc:	4606      	mov	r6, r0
 80140fe:	460f      	mov	r7, r1
 8014100:	4614      	mov	r4, r2
 8014102:	18d5      	adds	r5, r2, r3
 8014104:	42ac      	cmp	r4, r5
 8014106:	d101      	bne.n	801410c <__sfputs_r+0x12>
 8014108:	2000      	movs	r0, #0
 801410a:	e007      	b.n	801411c <__sfputs_r+0x22>
 801410c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014110:	463a      	mov	r2, r7
 8014112:	4630      	mov	r0, r6
 8014114:	f7ff ffda 	bl	80140cc <__sfputc_r>
 8014118:	1c43      	adds	r3, r0, #1
 801411a:	d1f3      	bne.n	8014104 <__sfputs_r+0xa>
 801411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014120 <_vfiprintf_r>:
 8014120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014124:	460d      	mov	r5, r1
 8014126:	b09d      	sub	sp, #116	@ 0x74
 8014128:	4614      	mov	r4, r2
 801412a:	4698      	mov	r8, r3
 801412c:	4606      	mov	r6, r0
 801412e:	b118      	cbz	r0, 8014138 <_vfiprintf_r+0x18>
 8014130:	6a03      	ldr	r3, [r0, #32]
 8014132:	b90b      	cbnz	r3, 8014138 <_vfiprintf_r+0x18>
 8014134:	f7fe fbd8 	bl	80128e8 <__sinit>
 8014138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801413a:	07d9      	lsls	r1, r3, #31
 801413c:	d405      	bmi.n	801414a <_vfiprintf_r+0x2a>
 801413e:	89ab      	ldrh	r3, [r5, #12]
 8014140:	059a      	lsls	r2, r3, #22
 8014142:	d402      	bmi.n	801414a <_vfiprintf_r+0x2a>
 8014144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014146:	f7fe fce0 	bl	8012b0a <__retarget_lock_acquire_recursive>
 801414a:	89ab      	ldrh	r3, [r5, #12]
 801414c:	071b      	lsls	r3, r3, #28
 801414e:	d501      	bpl.n	8014154 <_vfiprintf_r+0x34>
 8014150:	692b      	ldr	r3, [r5, #16]
 8014152:	b99b      	cbnz	r3, 801417c <_vfiprintf_r+0x5c>
 8014154:	4629      	mov	r1, r5
 8014156:	4630      	mov	r0, r6
 8014158:	f000 fa18 	bl	801458c <__swsetup_r>
 801415c:	b170      	cbz	r0, 801417c <_vfiprintf_r+0x5c>
 801415e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014160:	07dc      	lsls	r4, r3, #31
 8014162:	d504      	bpl.n	801416e <_vfiprintf_r+0x4e>
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	b01d      	add	sp, #116	@ 0x74
 801416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416e:	89ab      	ldrh	r3, [r5, #12]
 8014170:	0598      	lsls	r0, r3, #22
 8014172:	d4f7      	bmi.n	8014164 <_vfiprintf_r+0x44>
 8014174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014176:	f7fe fcc9 	bl	8012b0c <__retarget_lock_release_recursive>
 801417a:	e7f3      	b.n	8014164 <_vfiprintf_r+0x44>
 801417c:	2300      	movs	r3, #0
 801417e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014180:	2320      	movs	r3, #32
 8014182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014186:	f8cd 800c 	str.w	r8, [sp, #12]
 801418a:	2330      	movs	r3, #48	@ 0x30
 801418c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801433c <_vfiprintf_r+0x21c>
 8014190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014194:	f04f 0901 	mov.w	r9, #1
 8014198:	4623      	mov	r3, r4
 801419a:	469a      	mov	sl, r3
 801419c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141a0:	b10a      	cbz	r2, 80141a6 <_vfiprintf_r+0x86>
 80141a2:	2a25      	cmp	r2, #37	@ 0x25
 80141a4:	d1f9      	bne.n	801419a <_vfiprintf_r+0x7a>
 80141a6:	ebba 0b04 	subs.w	fp, sl, r4
 80141aa:	d00b      	beq.n	80141c4 <_vfiprintf_r+0xa4>
 80141ac:	465b      	mov	r3, fp
 80141ae:	4622      	mov	r2, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	4630      	mov	r0, r6
 80141b4:	f7ff ffa1 	bl	80140fa <__sfputs_r>
 80141b8:	3001      	adds	r0, #1
 80141ba:	f000 80a7 	beq.w	801430c <_vfiprintf_r+0x1ec>
 80141be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141c0:	445a      	add	r2, fp
 80141c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80141c4:	f89a 3000 	ldrb.w	r3, [sl]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f000 809f 	beq.w	801430c <_vfiprintf_r+0x1ec>
 80141ce:	2300      	movs	r3, #0
 80141d0:	f04f 32ff 	mov.w	r2, #4294967295
 80141d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141d8:	f10a 0a01 	add.w	sl, sl, #1
 80141dc:	9304      	str	r3, [sp, #16]
 80141de:	9307      	str	r3, [sp, #28]
 80141e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80141e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80141e6:	4654      	mov	r4, sl
 80141e8:	2205      	movs	r2, #5
 80141ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141ee:	4853      	ldr	r0, [pc, #332]	@ (801433c <_vfiprintf_r+0x21c>)
 80141f0:	f7eb ffc6 	bl	8000180 <memchr>
 80141f4:	9a04      	ldr	r2, [sp, #16]
 80141f6:	b9d8      	cbnz	r0, 8014230 <_vfiprintf_r+0x110>
 80141f8:	06d1      	lsls	r1, r2, #27
 80141fa:	bf44      	itt	mi
 80141fc:	2320      	movmi	r3, #32
 80141fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014202:	0713      	lsls	r3, r2, #28
 8014204:	bf44      	itt	mi
 8014206:	232b      	movmi	r3, #43	@ 0x2b
 8014208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801420c:	f89a 3000 	ldrb.w	r3, [sl]
 8014210:	2b2a      	cmp	r3, #42	@ 0x2a
 8014212:	d015      	beq.n	8014240 <_vfiprintf_r+0x120>
 8014214:	9a07      	ldr	r2, [sp, #28]
 8014216:	4654      	mov	r4, sl
 8014218:	2000      	movs	r0, #0
 801421a:	f04f 0c0a 	mov.w	ip, #10
 801421e:	4621      	mov	r1, r4
 8014220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014224:	3b30      	subs	r3, #48	@ 0x30
 8014226:	2b09      	cmp	r3, #9
 8014228:	d94b      	bls.n	80142c2 <_vfiprintf_r+0x1a2>
 801422a:	b1b0      	cbz	r0, 801425a <_vfiprintf_r+0x13a>
 801422c:	9207      	str	r2, [sp, #28]
 801422e:	e014      	b.n	801425a <_vfiprintf_r+0x13a>
 8014230:	eba0 0308 	sub.w	r3, r0, r8
 8014234:	fa09 f303 	lsl.w	r3, r9, r3
 8014238:	4313      	orrs	r3, r2
 801423a:	9304      	str	r3, [sp, #16]
 801423c:	46a2      	mov	sl, r4
 801423e:	e7d2      	b.n	80141e6 <_vfiprintf_r+0xc6>
 8014240:	9b03      	ldr	r3, [sp, #12]
 8014242:	1d19      	adds	r1, r3, #4
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	9103      	str	r1, [sp, #12]
 8014248:	2b00      	cmp	r3, #0
 801424a:	bfbb      	ittet	lt
 801424c:	425b      	neglt	r3, r3
 801424e:	f042 0202 	orrlt.w	r2, r2, #2
 8014252:	9307      	strge	r3, [sp, #28]
 8014254:	9307      	strlt	r3, [sp, #28]
 8014256:	bfb8      	it	lt
 8014258:	9204      	strlt	r2, [sp, #16]
 801425a:	7823      	ldrb	r3, [r4, #0]
 801425c:	2b2e      	cmp	r3, #46	@ 0x2e
 801425e:	d10a      	bne.n	8014276 <_vfiprintf_r+0x156>
 8014260:	7863      	ldrb	r3, [r4, #1]
 8014262:	2b2a      	cmp	r3, #42	@ 0x2a
 8014264:	d132      	bne.n	80142cc <_vfiprintf_r+0x1ac>
 8014266:	9b03      	ldr	r3, [sp, #12]
 8014268:	1d1a      	adds	r2, r3, #4
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	9203      	str	r2, [sp, #12]
 801426e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014272:	3402      	adds	r4, #2
 8014274:	9305      	str	r3, [sp, #20]
 8014276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801434c <_vfiprintf_r+0x22c>
 801427a:	7821      	ldrb	r1, [r4, #0]
 801427c:	2203      	movs	r2, #3
 801427e:	4650      	mov	r0, sl
 8014280:	f7eb ff7e 	bl	8000180 <memchr>
 8014284:	b138      	cbz	r0, 8014296 <_vfiprintf_r+0x176>
 8014286:	9b04      	ldr	r3, [sp, #16]
 8014288:	eba0 000a 	sub.w	r0, r0, sl
 801428c:	2240      	movs	r2, #64	@ 0x40
 801428e:	4082      	lsls	r2, r0
 8014290:	4313      	orrs	r3, r2
 8014292:	3401      	adds	r4, #1
 8014294:	9304      	str	r3, [sp, #16]
 8014296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801429a:	4829      	ldr	r0, [pc, #164]	@ (8014340 <_vfiprintf_r+0x220>)
 801429c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80142a0:	2206      	movs	r2, #6
 80142a2:	f7eb ff6d 	bl	8000180 <memchr>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d03f      	beq.n	801432a <_vfiprintf_r+0x20a>
 80142aa:	4b26      	ldr	r3, [pc, #152]	@ (8014344 <_vfiprintf_r+0x224>)
 80142ac:	bb1b      	cbnz	r3, 80142f6 <_vfiprintf_r+0x1d6>
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	3307      	adds	r3, #7
 80142b2:	f023 0307 	bic.w	r3, r3, #7
 80142b6:	3308      	adds	r3, #8
 80142b8:	9303      	str	r3, [sp, #12]
 80142ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142bc:	443b      	add	r3, r7
 80142be:	9309      	str	r3, [sp, #36]	@ 0x24
 80142c0:	e76a      	b.n	8014198 <_vfiprintf_r+0x78>
 80142c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80142c6:	460c      	mov	r4, r1
 80142c8:	2001      	movs	r0, #1
 80142ca:	e7a8      	b.n	801421e <_vfiprintf_r+0xfe>
 80142cc:	2300      	movs	r3, #0
 80142ce:	3401      	adds	r4, #1
 80142d0:	9305      	str	r3, [sp, #20]
 80142d2:	4619      	mov	r1, r3
 80142d4:	f04f 0c0a 	mov.w	ip, #10
 80142d8:	4620      	mov	r0, r4
 80142da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142de:	3a30      	subs	r2, #48	@ 0x30
 80142e0:	2a09      	cmp	r2, #9
 80142e2:	d903      	bls.n	80142ec <_vfiprintf_r+0x1cc>
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d0c6      	beq.n	8014276 <_vfiprintf_r+0x156>
 80142e8:	9105      	str	r1, [sp, #20]
 80142ea:	e7c4      	b.n	8014276 <_vfiprintf_r+0x156>
 80142ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80142f0:	4604      	mov	r4, r0
 80142f2:	2301      	movs	r3, #1
 80142f4:	e7f0      	b.n	80142d8 <_vfiprintf_r+0x1b8>
 80142f6:	ab03      	add	r3, sp, #12
 80142f8:	9300      	str	r3, [sp, #0]
 80142fa:	462a      	mov	r2, r5
 80142fc:	4b12      	ldr	r3, [pc, #72]	@ (8014348 <_vfiprintf_r+0x228>)
 80142fe:	a904      	add	r1, sp, #16
 8014300:	4630      	mov	r0, r6
 8014302:	f7fd fead 	bl	8012060 <_printf_float>
 8014306:	4607      	mov	r7, r0
 8014308:	1c78      	adds	r0, r7, #1
 801430a:	d1d6      	bne.n	80142ba <_vfiprintf_r+0x19a>
 801430c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801430e:	07d9      	lsls	r1, r3, #31
 8014310:	d405      	bmi.n	801431e <_vfiprintf_r+0x1fe>
 8014312:	89ab      	ldrh	r3, [r5, #12]
 8014314:	059a      	lsls	r2, r3, #22
 8014316:	d402      	bmi.n	801431e <_vfiprintf_r+0x1fe>
 8014318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801431a:	f7fe fbf7 	bl	8012b0c <__retarget_lock_release_recursive>
 801431e:	89ab      	ldrh	r3, [r5, #12]
 8014320:	065b      	lsls	r3, r3, #25
 8014322:	f53f af1f 	bmi.w	8014164 <_vfiprintf_r+0x44>
 8014326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014328:	e71e      	b.n	8014168 <_vfiprintf_r+0x48>
 801432a:	ab03      	add	r3, sp, #12
 801432c:	9300      	str	r3, [sp, #0]
 801432e:	462a      	mov	r2, r5
 8014330:	4b05      	ldr	r3, [pc, #20]	@ (8014348 <_vfiprintf_r+0x228>)
 8014332:	a904      	add	r1, sp, #16
 8014334:	4630      	mov	r0, r6
 8014336:	f7fe f92b 	bl	8012590 <_printf_i>
 801433a:	e7e4      	b.n	8014306 <_vfiprintf_r+0x1e6>
 801433c:	08014c80 	.word	0x08014c80
 8014340:	08014c8a 	.word	0x08014c8a
 8014344:	08012061 	.word	0x08012061
 8014348:	080140fb 	.word	0x080140fb
 801434c:	08014c86 	.word	0x08014c86

08014350 <__sflush_r>:
 8014350:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014358:	0716      	lsls	r6, r2, #28
 801435a:	4605      	mov	r5, r0
 801435c:	460c      	mov	r4, r1
 801435e:	d454      	bmi.n	801440a <__sflush_r+0xba>
 8014360:	684b      	ldr	r3, [r1, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	dc02      	bgt.n	801436c <__sflush_r+0x1c>
 8014366:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014368:	2b00      	cmp	r3, #0
 801436a:	dd48      	ble.n	80143fe <__sflush_r+0xae>
 801436c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801436e:	2e00      	cmp	r6, #0
 8014370:	d045      	beq.n	80143fe <__sflush_r+0xae>
 8014372:	2300      	movs	r3, #0
 8014374:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014378:	682f      	ldr	r7, [r5, #0]
 801437a:	6a21      	ldr	r1, [r4, #32]
 801437c:	602b      	str	r3, [r5, #0]
 801437e:	d030      	beq.n	80143e2 <__sflush_r+0x92>
 8014380:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014382:	89a3      	ldrh	r3, [r4, #12]
 8014384:	0759      	lsls	r1, r3, #29
 8014386:	d505      	bpl.n	8014394 <__sflush_r+0x44>
 8014388:	6863      	ldr	r3, [r4, #4]
 801438a:	1ad2      	subs	r2, r2, r3
 801438c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801438e:	b10b      	cbz	r3, 8014394 <__sflush_r+0x44>
 8014390:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014392:	1ad2      	subs	r2, r2, r3
 8014394:	2300      	movs	r3, #0
 8014396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014398:	6a21      	ldr	r1, [r4, #32]
 801439a:	4628      	mov	r0, r5
 801439c:	47b0      	blx	r6
 801439e:	1c43      	adds	r3, r0, #1
 80143a0:	89a3      	ldrh	r3, [r4, #12]
 80143a2:	d106      	bne.n	80143b2 <__sflush_r+0x62>
 80143a4:	6829      	ldr	r1, [r5, #0]
 80143a6:	291d      	cmp	r1, #29
 80143a8:	d82b      	bhi.n	8014402 <__sflush_r+0xb2>
 80143aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014454 <__sflush_r+0x104>)
 80143ac:	410a      	asrs	r2, r1
 80143ae:	07d6      	lsls	r6, r2, #31
 80143b0:	d427      	bmi.n	8014402 <__sflush_r+0xb2>
 80143b2:	2200      	movs	r2, #0
 80143b4:	6062      	str	r2, [r4, #4]
 80143b6:	04d9      	lsls	r1, r3, #19
 80143b8:	6922      	ldr	r2, [r4, #16]
 80143ba:	6022      	str	r2, [r4, #0]
 80143bc:	d504      	bpl.n	80143c8 <__sflush_r+0x78>
 80143be:	1c42      	adds	r2, r0, #1
 80143c0:	d101      	bne.n	80143c6 <__sflush_r+0x76>
 80143c2:	682b      	ldr	r3, [r5, #0]
 80143c4:	b903      	cbnz	r3, 80143c8 <__sflush_r+0x78>
 80143c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80143c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80143ca:	602f      	str	r7, [r5, #0]
 80143cc:	b1b9      	cbz	r1, 80143fe <__sflush_r+0xae>
 80143ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80143d2:	4299      	cmp	r1, r3
 80143d4:	d002      	beq.n	80143dc <__sflush_r+0x8c>
 80143d6:	4628      	mov	r0, r5
 80143d8:	f7ff f9f6 	bl	80137c8 <_free_r>
 80143dc:	2300      	movs	r3, #0
 80143de:	6363      	str	r3, [r4, #52]	@ 0x34
 80143e0:	e00d      	b.n	80143fe <__sflush_r+0xae>
 80143e2:	2301      	movs	r3, #1
 80143e4:	4628      	mov	r0, r5
 80143e6:	47b0      	blx	r6
 80143e8:	4602      	mov	r2, r0
 80143ea:	1c50      	adds	r0, r2, #1
 80143ec:	d1c9      	bne.n	8014382 <__sflush_r+0x32>
 80143ee:	682b      	ldr	r3, [r5, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d0c6      	beq.n	8014382 <__sflush_r+0x32>
 80143f4:	2b1d      	cmp	r3, #29
 80143f6:	d001      	beq.n	80143fc <__sflush_r+0xac>
 80143f8:	2b16      	cmp	r3, #22
 80143fa:	d11e      	bne.n	801443a <__sflush_r+0xea>
 80143fc:	602f      	str	r7, [r5, #0]
 80143fe:	2000      	movs	r0, #0
 8014400:	e022      	b.n	8014448 <__sflush_r+0xf8>
 8014402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014406:	b21b      	sxth	r3, r3
 8014408:	e01b      	b.n	8014442 <__sflush_r+0xf2>
 801440a:	690f      	ldr	r7, [r1, #16]
 801440c:	2f00      	cmp	r7, #0
 801440e:	d0f6      	beq.n	80143fe <__sflush_r+0xae>
 8014410:	0793      	lsls	r3, r2, #30
 8014412:	680e      	ldr	r6, [r1, #0]
 8014414:	bf08      	it	eq
 8014416:	694b      	ldreq	r3, [r1, #20]
 8014418:	600f      	str	r7, [r1, #0]
 801441a:	bf18      	it	ne
 801441c:	2300      	movne	r3, #0
 801441e:	eba6 0807 	sub.w	r8, r6, r7
 8014422:	608b      	str	r3, [r1, #8]
 8014424:	f1b8 0f00 	cmp.w	r8, #0
 8014428:	dde9      	ble.n	80143fe <__sflush_r+0xae>
 801442a:	6a21      	ldr	r1, [r4, #32]
 801442c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801442e:	4643      	mov	r3, r8
 8014430:	463a      	mov	r2, r7
 8014432:	4628      	mov	r0, r5
 8014434:	47b0      	blx	r6
 8014436:	2800      	cmp	r0, #0
 8014438:	dc08      	bgt.n	801444c <__sflush_r+0xfc>
 801443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801443e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014442:	81a3      	strh	r3, [r4, #12]
 8014444:	f04f 30ff 	mov.w	r0, #4294967295
 8014448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801444c:	4407      	add	r7, r0
 801444e:	eba8 0800 	sub.w	r8, r8, r0
 8014452:	e7e7      	b.n	8014424 <__sflush_r+0xd4>
 8014454:	dfbffffe 	.word	0xdfbffffe

08014458 <_fflush_r>:
 8014458:	b538      	push	{r3, r4, r5, lr}
 801445a:	690b      	ldr	r3, [r1, #16]
 801445c:	4605      	mov	r5, r0
 801445e:	460c      	mov	r4, r1
 8014460:	b913      	cbnz	r3, 8014468 <_fflush_r+0x10>
 8014462:	2500      	movs	r5, #0
 8014464:	4628      	mov	r0, r5
 8014466:	bd38      	pop	{r3, r4, r5, pc}
 8014468:	b118      	cbz	r0, 8014472 <_fflush_r+0x1a>
 801446a:	6a03      	ldr	r3, [r0, #32]
 801446c:	b90b      	cbnz	r3, 8014472 <_fflush_r+0x1a>
 801446e:	f7fe fa3b 	bl	80128e8 <__sinit>
 8014472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d0f3      	beq.n	8014462 <_fflush_r+0xa>
 801447a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801447c:	07d0      	lsls	r0, r2, #31
 801447e:	d404      	bmi.n	801448a <_fflush_r+0x32>
 8014480:	0599      	lsls	r1, r3, #22
 8014482:	d402      	bmi.n	801448a <_fflush_r+0x32>
 8014484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014486:	f7fe fb40 	bl	8012b0a <__retarget_lock_acquire_recursive>
 801448a:	4628      	mov	r0, r5
 801448c:	4621      	mov	r1, r4
 801448e:	f7ff ff5f 	bl	8014350 <__sflush_r>
 8014492:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014494:	07da      	lsls	r2, r3, #31
 8014496:	4605      	mov	r5, r0
 8014498:	d4e4      	bmi.n	8014464 <_fflush_r+0xc>
 801449a:	89a3      	ldrh	r3, [r4, #12]
 801449c:	059b      	lsls	r3, r3, #22
 801449e:	d4e1      	bmi.n	8014464 <_fflush_r+0xc>
 80144a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144a2:	f7fe fb33 	bl	8012b0c <__retarget_lock_release_recursive>
 80144a6:	e7dd      	b.n	8014464 <_fflush_r+0xc>

080144a8 <_putc_r>:
 80144a8:	b570      	push	{r4, r5, r6, lr}
 80144aa:	460d      	mov	r5, r1
 80144ac:	4614      	mov	r4, r2
 80144ae:	4606      	mov	r6, r0
 80144b0:	b118      	cbz	r0, 80144ba <_putc_r+0x12>
 80144b2:	6a03      	ldr	r3, [r0, #32]
 80144b4:	b90b      	cbnz	r3, 80144ba <_putc_r+0x12>
 80144b6:	f7fe fa17 	bl	80128e8 <__sinit>
 80144ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144bc:	07d8      	lsls	r0, r3, #31
 80144be:	d405      	bmi.n	80144cc <_putc_r+0x24>
 80144c0:	89a3      	ldrh	r3, [r4, #12]
 80144c2:	0599      	lsls	r1, r3, #22
 80144c4:	d402      	bmi.n	80144cc <_putc_r+0x24>
 80144c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144c8:	f7fe fb1f 	bl	8012b0a <__retarget_lock_acquire_recursive>
 80144cc:	68a3      	ldr	r3, [r4, #8]
 80144ce:	3b01      	subs	r3, #1
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	60a3      	str	r3, [r4, #8]
 80144d4:	da05      	bge.n	80144e2 <_putc_r+0x3a>
 80144d6:	69a2      	ldr	r2, [r4, #24]
 80144d8:	4293      	cmp	r3, r2
 80144da:	db12      	blt.n	8014502 <_putc_r+0x5a>
 80144dc:	b2eb      	uxtb	r3, r5
 80144de:	2b0a      	cmp	r3, #10
 80144e0:	d00f      	beq.n	8014502 <_putc_r+0x5a>
 80144e2:	6823      	ldr	r3, [r4, #0]
 80144e4:	1c5a      	adds	r2, r3, #1
 80144e6:	6022      	str	r2, [r4, #0]
 80144e8:	701d      	strb	r5, [r3, #0]
 80144ea:	b2ed      	uxtb	r5, r5
 80144ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144ee:	07da      	lsls	r2, r3, #31
 80144f0:	d405      	bmi.n	80144fe <_putc_r+0x56>
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	059b      	lsls	r3, r3, #22
 80144f6:	d402      	bmi.n	80144fe <_putc_r+0x56>
 80144f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144fa:	f7fe fb07 	bl	8012b0c <__retarget_lock_release_recursive>
 80144fe:	4628      	mov	r0, r5
 8014500:	bd70      	pop	{r4, r5, r6, pc}
 8014502:	4629      	mov	r1, r5
 8014504:	4622      	mov	r2, r4
 8014506:	4630      	mov	r0, r6
 8014508:	f000 f802 	bl	8014510 <__swbuf_r>
 801450c:	4605      	mov	r5, r0
 801450e:	e7ed      	b.n	80144ec <_putc_r+0x44>

08014510 <__swbuf_r>:
 8014510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014512:	460e      	mov	r6, r1
 8014514:	4614      	mov	r4, r2
 8014516:	4605      	mov	r5, r0
 8014518:	b118      	cbz	r0, 8014522 <__swbuf_r+0x12>
 801451a:	6a03      	ldr	r3, [r0, #32]
 801451c:	b90b      	cbnz	r3, 8014522 <__swbuf_r+0x12>
 801451e:	f7fe f9e3 	bl	80128e8 <__sinit>
 8014522:	69a3      	ldr	r3, [r4, #24]
 8014524:	60a3      	str	r3, [r4, #8]
 8014526:	89a3      	ldrh	r3, [r4, #12]
 8014528:	071a      	lsls	r2, r3, #28
 801452a:	d501      	bpl.n	8014530 <__swbuf_r+0x20>
 801452c:	6923      	ldr	r3, [r4, #16]
 801452e:	b943      	cbnz	r3, 8014542 <__swbuf_r+0x32>
 8014530:	4621      	mov	r1, r4
 8014532:	4628      	mov	r0, r5
 8014534:	f000 f82a 	bl	801458c <__swsetup_r>
 8014538:	b118      	cbz	r0, 8014542 <__swbuf_r+0x32>
 801453a:	f04f 37ff 	mov.w	r7, #4294967295
 801453e:	4638      	mov	r0, r7
 8014540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	6922      	ldr	r2, [r4, #16]
 8014546:	1a98      	subs	r0, r3, r2
 8014548:	6963      	ldr	r3, [r4, #20]
 801454a:	b2f6      	uxtb	r6, r6
 801454c:	4283      	cmp	r3, r0
 801454e:	4637      	mov	r7, r6
 8014550:	dc05      	bgt.n	801455e <__swbuf_r+0x4e>
 8014552:	4621      	mov	r1, r4
 8014554:	4628      	mov	r0, r5
 8014556:	f7ff ff7f 	bl	8014458 <_fflush_r>
 801455a:	2800      	cmp	r0, #0
 801455c:	d1ed      	bne.n	801453a <__swbuf_r+0x2a>
 801455e:	68a3      	ldr	r3, [r4, #8]
 8014560:	3b01      	subs	r3, #1
 8014562:	60a3      	str	r3, [r4, #8]
 8014564:	6823      	ldr	r3, [r4, #0]
 8014566:	1c5a      	adds	r2, r3, #1
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	701e      	strb	r6, [r3, #0]
 801456c:	6962      	ldr	r2, [r4, #20]
 801456e:	1c43      	adds	r3, r0, #1
 8014570:	429a      	cmp	r2, r3
 8014572:	d004      	beq.n	801457e <__swbuf_r+0x6e>
 8014574:	89a3      	ldrh	r3, [r4, #12]
 8014576:	07db      	lsls	r3, r3, #31
 8014578:	d5e1      	bpl.n	801453e <__swbuf_r+0x2e>
 801457a:	2e0a      	cmp	r6, #10
 801457c:	d1df      	bne.n	801453e <__swbuf_r+0x2e>
 801457e:	4621      	mov	r1, r4
 8014580:	4628      	mov	r0, r5
 8014582:	f7ff ff69 	bl	8014458 <_fflush_r>
 8014586:	2800      	cmp	r0, #0
 8014588:	d0d9      	beq.n	801453e <__swbuf_r+0x2e>
 801458a:	e7d6      	b.n	801453a <__swbuf_r+0x2a>

0801458c <__swsetup_r>:
 801458c:	b538      	push	{r3, r4, r5, lr}
 801458e:	4b29      	ldr	r3, [pc, #164]	@ (8014634 <__swsetup_r+0xa8>)
 8014590:	4605      	mov	r5, r0
 8014592:	6818      	ldr	r0, [r3, #0]
 8014594:	460c      	mov	r4, r1
 8014596:	b118      	cbz	r0, 80145a0 <__swsetup_r+0x14>
 8014598:	6a03      	ldr	r3, [r0, #32]
 801459a:	b90b      	cbnz	r3, 80145a0 <__swsetup_r+0x14>
 801459c:	f7fe f9a4 	bl	80128e8 <__sinit>
 80145a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145a4:	0719      	lsls	r1, r3, #28
 80145a6:	d422      	bmi.n	80145ee <__swsetup_r+0x62>
 80145a8:	06da      	lsls	r2, r3, #27
 80145aa:	d407      	bmi.n	80145bc <__swsetup_r+0x30>
 80145ac:	2209      	movs	r2, #9
 80145ae:	602a      	str	r2, [r5, #0]
 80145b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145b4:	81a3      	strh	r3, [r4, #12]
 80145b6:	f04f 30ff 	mov.w	r0, #4294967295
 80145ba:	e033      	b.n	8014624 <__swsetup_r+0x98>
 80145bc:	0758      	lsls	r0, r3, #29
 80145be:	d512      	bpl.n	80145e6 <__swsetup_r+0x5a>
 80145c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80145c2:	b141      	cbz	r1, 80145d6 <__swsetup_r+0x4a>
 80145c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80145c8:	4299      	cmp	r1, r3
 80145ca:	d002      	beq.n	80145d2 <__swsetup_r+0x46>
 80145cc:	4628      	mov	r0, r5
 80145ce:	f7ff f8fb 	bl	80137c8 <_free_r>
 80145d2:	2300      	movs	r3, #0
 80145d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80145d6:	89a3      	ldrh	r3, [r4, #12]
 80145d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80145dc:	81a3      	strh	r3, [r4, #12]
 80145de:	2300      	movs	r3, #0
 80145e0:	6063      	str	r3, [r4, #4]
 80145e2:	6923      	ldr	r3, [r4, #16]
 80145e4:	6023      	str	r3, [r4, #0]
 80145e6:	89a3      	ldrh	r3, [r4, #12]
 80145e8:	f043 0308 	orr.w	r3, r3, #8
 80145ec:	81a3      	strh	r3, [r4, #12]
 80145ee:	6923      	ldr	r3, [r4, #16]
 80145f0:	b94b      	cbnz	r3, 8014606 <__swsetup_r+0x7a>
 80145f2:	89a3      	ldrh	r3, [r4, #12]
 80145f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80145f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145fc:	d003      	beq.n	8014606 <__swsetup_r+0x7a>
 80145fe:	4621      	mov	r1, r4
 8014600:	4628      	mov	r0, r5
 8014602:	f000 f8b3 	bl	801476c <__smakebuf_r>
 8014606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801460a:	f013 0201 	ands.w	r2, r3, #1
 801460e:	d00a      	beq.n	8014626 <__swsetup_r+0x9a>
 8014610:	2200      	movs	r2, #0
 8014612:	60a2      	str	r2, [r4, #8]
 8014614:	6962      	ldr	r2, [r4, #20]
 8014616:	4252      	negs	r2, r2
 8014618:	61a2      	str	r2, [r4, #24]
 801461a:	6922      	ldr	r2, [r4, #16]
 801461c:	b942      	cbnz	r2, 8014630 <__swsetup_r+0xa4>
 801461e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014622:	d1c5      	bne.n	80145b0 <__swsetup_r+0x24>
 8014624:	bd38      	pop	{r3, r4, r5, pc}
 8014626:	0799      	lsls	r1, r3, #30
 8014628:	bf58      	it	pl
 801462a:	6962      	ldrpl	r2, [r4, #20]
 801462c:	60a2      	str	r2, [r4, #8]
 801462e:	e7f4      	b.n	801461a <__swsetup_r+0x8e>
 8014630:	2000      	movs	r0, #0
 8014632:	e7f7      	b.n	8014624 <__swsetup_r+0x98>
 8014634:	20000134 	.word	0x20000134

08014638 <_sbrk_r>:
 8014638:	b538      	push	{r3, r4, r5, lr}
 801463a:	4d06      	ldr	r5, [pc, #24]	@ (8014654 <_sbrk_r+0x1c>)
 801463c:	2300      	movs	r3, #0
 801463e:	4604      	mov	r4, r0
 8014640:	4608      	mov	r0, r1
 8014642:	602b      	str	r3, [r5, #0]
 8014644:	f7f0 f8e8 	bl	8004818 <_sbrk>
 8014648:	1c43      	adds	r3, r0, #1
 801464a:	d102      	bne.n	8014652 <_sbrk_r+0x1a>
 801464c:	682b      	ldr	r3, [r5, #0]
 801464e:	b103      	cbz	r3, 8014652 <_sbrk_r+0x1a>
 8014650:	6023      	str	r3, [r4, #0]
 8014652:	bd38      	pop	{r3, r4, r5, pc}
 8014654:	200024bc 	.word	0x200024bc

08014658 <__assert_func>:
 8014658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801465a:	4614      	mov	r4, r2
 801465c:	461a      	mov	r2, r3
 801465e:	4b09      	ldr	r3, [pc, #36]	@ (8014684 <__assert_func+0x2c>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4605      	mov	r5, r0
 8014664:	68d8      	ldr	r0, [r3, #12]
 8014666:	b954      	cbnz	r4, 801467e <__assert_func+0x26>
 8014668:	4b07      	ldr	r3, [pc, #28]	@ (8014688 <__assert_func+0x30>)
 801466a:	461c      	mov	r4, r3
 801466c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014670:	9100      	str	r1, [sp, #0]
 8014672:	462b      	mov	r3, r5
 8014674:	4905      	ldr	r1, [pc, #20]	@ (801468c <__assert_func+0x34>)
 8014676:	f000 f841 	bl	80146fc <fiprintf>
 801467a:	f000 f8d5 	bl	8014828 <abort>
 801467e:	4b04      	ldr	r3, [pc, #16]	@ (8014690 <__assert_func+0x38>)
 8014680:	e7f4      	b.n	801466c <__assert_func+0x14>
 8014682:	bf00      	nop
 8014684:	20000134 	.word	0x20000134
 8014688:	08014cd6 	.word	0x08014cd6
 801468c:	08014ca8 	.word	0x08014ca8
 8014690:	08014c9b 	.word	0x08014c9b

08014694 <_calloc_r>:
 8014694:	b570      	push	{r4, r5, r6, lr}
 8014696:	fba1 5402 	umull	r5, r4, r1, r2
 801469a:	b93c      	cbnz	r4, 80146ac <_calloc_r+0x18>
 801469c:	4629      	mov	r1, r5
 801469e:	f7ff f907 	bl	80138b0 <_malloc_r>
 80146a2:	4606      	mov	r6, r0
 80146a4:	b928      	cbnz	r0, 80146b2 <_calloc_r+0x1e>
 80146a6:	2600      	movs	r6, #0
 80146a8:	4630      	mov	r0, r6
 80146aa:	bd70      	pop	{r4, r5, r6, pc}
 80146ac:	220c      	movs	r2, #12
 80146ae:	6002      	str	r2, [r0, #0]
 80146b0:	e7f9      	b.n	80146a6 <_calloc_r+0x12>
 80146b2:	462a      	mov	r2, r5
 80146b4:	4621      	mov	r1, r4
 80146b6:	f7fe f9aa 	bl	8012a0e <memset>
 80146ba:	e7f5      	b.n	80146a8 <_calloc_r+0x14>

080146bc <__ascii_mbtowc>:
 80146bc:	b082      	sub	sp, #8
 80146be:	b901      	cbnz	r1, 80146c2 <__ascii_mbtowc+0x6>
 80146c0:	a901      	add	r1, sp, #4
 80146c2:	b142      	cbz	r2, 80146d6 <__ascii_mbtowc+0x1a>
 80146c4:	b14b      	cbz	r3, 80146da <__ascii_mbtowc+0x1e>
 80146c6:	7813      	ldrb	r3, [r2, #0]
 80146c8:	600b      	str	r3, [r1, #0]
 80146ca:	7812      	ldrb	r2, [r2, #0]
 80146cc:	1e10      	subs	r0, r2, #0
 80146ce:	bf18      	it	ne
 80146d0:	2001      	movne	r0, #1
 80146d2:	b002      	add	sp, #8
 80146d4:	4770      	bx	lr
 80146d6:	4610      	mov	r0, r2
 80146d8:	e7fb      	b.n	80146d2 <__ascii_mbtowc+0x16>
 80146da:	f06f 0001 	mvn.w	r0, #1
 80146de:	e7f8      	b.n	80146d2 <__ascii_mbtowc+0x16>

080146e0 <__ascii_wctomb>:
 80146e0:	4603      	mov	r3, r0
 80146e2:	4608      	mov	r0, r1
 80146e4:	b141      	cbz	r1, 80146f8 <__ascii_wctomb+0x18>
 80146e6:	2aff      	cmp	r2, #255	@ 0xff
 80146e8:	d904      	bls.n	80146f4 <__ascii_wctomb+0x14>
 80146ea:	228a      	movs	r2, #138	@ 0x8a
 80146ec:	601a      	str	r2, [r3, #0]
 80146ee:	f04f 30ff 	mov.w	r0, #4294967295
 80146f2:	4770      	bx	lr
 80146f4:	700a      	strb	r2, [r1, #0]
 80146f6:	2001      	movs	r0, #1
 80146f8:	4770      	bx	lr
	...

080146fc <fiprintf>:
 80146fc:	b40e      	push	{r1, r2, r3}
 80146fe:	b503      	push	{r0, r1, lr}
 8014700:	4601      	mov	r1, r0
 8014702:	ab03      	add	r3, sp, #12
 8014704:	4805      	ldr	r0, [pc, #20]	@ (801471c <fiprintf+0x20>)
 8014706:	f853 2b04 	ldr.w	r2, [r3], #4
 801470a:	6800      	ldr	r0, [r0, #0]
 801470c:	9301      	str	r3, [sp, #4]
 801470e:	f7ff fd07 	bl	8014120 <_vfiprintf_r>
 8014712:	b002      	add	sp, #8
 8014714:	f85d eb04 	ldr.w	lr, [sp], #4
 8014718:	b003      	add	sp, #12
 801471a:	4770      	bx	lr
 801471c:	20000134 	.word	0x20000134

08014720 <__swhatbuf_r>:
 8014720:	b570      	push	{r4, r5, r6, lr}
 8014722:	460c      	mov	r4, r1
 8014724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014728:	2900      	cmp	r1, #0
 801472a:	b096      	sub	sp, #88	@ 0x58
 801472c:	4615      	mov	r5, r2
 801472e:	461e      	mov	r6, r3
 8014730:	da0d      	bge.n	801474e <__swhatbuf_r+0x2e>
 8014732:	89a3      	ldrh	r3, [r4, #12]
 8014734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014738:	f04f 0100 	mov.w	r1, #0
 801473c:	bf14      	ite	ne
 801473e:	2340      	movne	r3, #64	@ 0x40
 8014740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014744:	2000      	movs	r0, #0
 8014746:	6031      	str	r1, [r6, #0]
 8014748:	602b      	str	r3, [r5, #0]
 801474a:	b016      	add	sp, #88	@ 0x58
 801474c:	bd70      	pop	{r4, r5, r6, pc}
 801474e:	466a      	mov	r2, sp
 8014750:	f000 f848 	bl	80147e4 <_fstat_r>
 8014754:	2800      	cmp	r0, #0
 8014756:	dbec      	blt.n	8014732 <__swhatbuf_r+0x12>
 8014758:	9901      	ldr	r1, [sp, #4]
 801475a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801475e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014762:	4259      	negs	r1, r3
 8014764:	4159      	adcs	r1, r3
 8014766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801476a:	e7eb      	b.n	8014744 <__swhatbuf_r+0x24>

0801476c <__smakebuf_r>:
 801476c:	898b      	ldrh	r3, [r1, #12]
 801476e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014770:	079d      	lsls	r5, r3, #30
 8014772:	4606      	mov	r6, r0
 8014774:	460c      	mov	r4, r1
 8014776:	d507      	bpl.n	8014788 <__smakebuf_r+0x1c>
 8014778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801477c:	6023      	str	r3, [r4, #0]
 801477e:	6123      	str	r3, [r4, #16]
 8014780:	2301      	movs	r3, #1
 8014782:	6163      	str	r3, [r4, #20]
 8014784:	b003      	add	sp, #12
 8014786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014788:	ab01      	add	r3, sp, #4
 801478a:	466a      	mov	r2, sp
 801478c:	f7ff ffc8 	bl	8014720 <__swhatbuf_r>
 8014790:	9f00      	ldr	r7, [sp, #0]
 8014792:	4605      	mov	r5, r0
 8014794:	4639      	mov	r1, r7
 8014796:	4630      	mov	r0, r6
 8014798:	f7ff f88a 	bl	80138b0 <_malloc_r>
 801479c:	b948      	cbnz	r0, 80147b2 <__smakebuf_r+0x46>
 801479e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147a2:	059a      	lsls	r2, r3, #22
 80147a4:	d4ee      	bmi.n	8014784 <__smakebuf_r+0x18>
 80147a6:	f023 0303 	bic.w	r3, r3, #3
 80147aa:	f043 0302 	orr.w	r3, r3, #2
 80147ae:	81a3      	strh	r3, [r4, #12]
 80147b0:	e7e2      	b.n	8014778 <__smakebuf_r+0xc>
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	6020      	str	r0, [r4, #0]
 80147b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80147ba:	81a3      	strh	r3, [r4, #12]
 80147bc:	9b01      	ldr	r3, [sp, #4]
 80147be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80147c2:	b15b      	cbz	r3, 80147dc <__smakebuf_r+0x70>
 80147c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80147c8:	4630      	mov	r0, r6
 80147ca:	f000 f81d 	bl	8014808 <_isatty_r>
 80147ce:	b128      	cbz	r0, 80147dc <__smakebuf_r+0x70>
 80147d0:	89a3      	ldrh	r3, [r4, #12]
 80147d2:	f023 0303 	bic.w	r3, r3, #3
 80147d6:	f043 0301 	orr.w	r3, r3, #1
 80147da:	81a3      	strh	r3, [r4, #12]
 80147dc:	89a3      	ldrh	r3, [r4, #12]
 80147de:	431d      	orrs	r5, r3
 80147e0:	81a5      	strh	r5, [r4, #12]
 80147e2:	e7cf      	b.n	8014784 <__smakebuf_r+0x18>

080147e4 <_fstat_r>:
 80147e4:	b538      	push	{r3, r4, r5, lr}
 80147e6:	4d07      	ldr	r5, [pc, #28]	@ (8014804 <_fstat_r+0x20>)
 80147e8:	2300      	movs	r3, #0
 80147ea:	4604      	mov	r4, r0
 80147ec:	4608      	mov	r0, r1
 80147ee:	4611      	mov	r1, r2
 80147f0:	602b      	str	r3, [r5, #0]
 80147f2:	f7ef ffe9 	bl	80047c8 <_fstat>
 80147f6:	1c43      	adds	r3, r0, #1
 80147f8:	d102      	bne.n	8014800 <_fstat_r+0x1c>
 80147fa:	682b      	ldr	r3, [r5, #0]
 80147fc:	b103      	cbz	r3, 8014800 <_fstat_r+0x1c>
 80147fe:	6023      	str	r3, [r4, #0]
 8014800:	bd38      	pop	{r3, r4, r5, pc}
 8014802:	bf00      	nop
 8014804:	200024bc 	.word	0x200024bc

08014808 <_isatty_r>:
 8014808:	b538      	push	{r3, r4, r5, lr}
 801480a:	4d06      	ldr	r5, [pc, #24]	@ (8014824 <_isatty_r+0x1c>)
 801480c:	2300      	movs	r3, #0
 801480e:	4604      	mov	r4, r0
 8014810:	4608      	mov	r0, r1
 8014812:	602b      	str	r3, [r5, #0]
 8014814:	f7ef ffe8 	bl	80047e8 <_isatty>
 8014818:	1c43      	adds	r3, r0, #1
 801481a:	d102      	bne.n	8014822 <_isatty_r+0x1a>
 801481c:	682b      	ldr	r3, [r5, #0]
 801481e:	b103      	cbz	r3, 8014822 <_isatty_r+0x1a>
 8014820:	6023      	str	r3, [r4, #0]
 8014822:	bd38      	pop	{r3, r4, r5, pc}
 8014824:	200024bc 	.word	0x200024bc

08014828 <abort>:
 8014828:	b508      	push	{r3, lr}
 801482a:	2006      	movs	r0, #6
 801482c:	f000 f82c 	bl	8014888 <raise>
 8014830:	2001      	movs	r0, #1
 8014832:	f7ef ff79 	bl	8004728 <_exit>

08014836 <_raise_r>:
 8014836:	291f      	cmp	r1, #31
 8014838:	b538      	push	{r3, r4, r5, lr}
 801483a:	4605      	mov	r5, r0
 801483c:	460c      	mov	r4, r1
 801483e:	d904      	bls.n	801484a <_raise_r+0x14>
 8014840:	2316      	movs	r3, #22
 8014842:	6003      	str	r3, [r0, #0]
 8014844:	f04f 30ff 	mov.w	r0, #4294967295
 8014848:	bd38      	pop	{r3, r4, r5, pc}
 801484a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801484c:	b112      	cbz	r2, 8014854 <_raise_r+0x1e>
 801484e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014852:	b94b      	cbnz	r3, 8014868 <_raise_r+0x32>
 8014854:	4628      	mov	r0, r5
 8014856:	f000 f831 	bl	80148bc <_getpid_r>
 801485a:	4622      	mov	r2, r4
 801485c:	4601      	mov	r1, r0
 801485e:	4628      	mov	r0, r5
 8014860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014864:	f000 b818 	b.w	8014898 <_kill_r>
 8014868:	2b01      	cmp	r3, #1
 801486a:	d00a      	beq.n	8014882 <_raise_r+0x4c>
 801486c:	1c59      	adds	r1, r3, #1
 801486e:	d103      	bne.n	8014878 <_raise_r+0x42>
 8014870:	2316      	movs	r3, #22
 8014872:	6003      	str	r3, [r0, #0]
 8014874:	2001      	movs	r0, #1
 8014876:	e7e7      	b.n	8014848 <_raise_r+0x12>
 8014878:	2100      	movs	r1, #0
 801487a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801487e:	4620      	mov	r0, r4
 8014880:	4798      	blx	r3
 8014882:	2000      	movs	r0, #0
 8014884:	e7e0      	b.n	8014848 <_raise_r+0x12>
	...

08014888 <raise>:
 8014888:	4b02      	ldr	r3, [pc, #8]	@ (8014894 <raise+0xc>)
 801488a:	4601      	mov	r1, r0
 801488c:	6818      	ldr	r0, [r3, #0]
 801488e:	f7ff bfd2 	b.w	8014836 <_raise_r>
 8014892:	bf00      	nop
 8014894:	20000134 	.word	0x20000134

08014898 <_kill_r>:
 8014898:	b538      	push	{r3, r4, r5, lr}
 801489a:	4d07      	ldr	r5, [pc, #28]	@ (80148b8 <_kill_r+0x20>)
 801489c:	2300      	movs	r3, #0
 801489e:	4604      	mov	r4, r0
 80148a0:	4608      	mov	r0, r1
 80148a2:	4611      	mov	r1, r2
 80148a4:	602b      	str	r3, [r5, #0]
 80148a6:	f7ef ff2f 	bl	8004708 <_kill>
 80148aa:	1c43      	adds	r3, r0, #1
 80148ac:	d102      	bne.n	80148b4 <_kill_r+0x1c>
 80148ae:	682b      	ldr	r3, [r5, #0]
 80148b0:	b103      	cbz	r3, 80148b4 <_kill_r+0x1c>
 80148b2:	6023      	str	r3, [r4, #0]
 80148b4:	bd38      	pop	{r3, r4, r5, pc}
 80148b6:	bf00      	nop
 80148b8:	200024bc 	.word	0x200024bc

080148bc <_getpid_r>:
 80148bc:	f7ef bf1c 	b.w	80046f8 <_getpid>

080148c0 <_init>:
 80148c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c2:	bf00      	nop
 80148c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148c6:	bc08      	pop	{r3}
 80148c8:	469e      	mov	lr, r3
 80148ca:	4770      	bx	lr

080148cc <_fini>:
 80148cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ce:	bf00      	nop
 80148d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148d2:	bc08      	pop	{r3}
 80148d4:	469e      	mov	lr, r3
 80148d6:	4770      	bx	lr
