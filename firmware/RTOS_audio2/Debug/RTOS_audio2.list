
RTOS_audio2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a64  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08011ba4  08011ba4  00012ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011dd4  08011dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ddc  08011ddc  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011de0  08011de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000168  20000008  08011de4  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000ad20  20000170  08011f4c  00013170  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ae90  08011f4c  00013e90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013170  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003374d  00000000  00000000  000131a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000687b  00000000  00000000  000468ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e68  00000000  00000000  0004d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023b0  00000000  00000000  0004ffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000091b4  00000000  00000000  00052380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00033ce2  00000000  00000000  0005b534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00103833  00000000  00000000  0008f216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00192a49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ce04  00000000  00000000  00192a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  0019f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000170 	.word	0x20000170
 800015c:	00000000 	.word	0x00000000
 8000160:	08011b8c 	.word	0x08011b8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000174 	.word	0x20000174
 800017c:	08011b8c 	.word	0x08011b8c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800054a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800055a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fe56 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f84e 	bl	800061c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000580:	f000 f8b0 	bl	80006e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 fa30 	bl	80009e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 fa1c 	bl	80009c4 <MX_DMA_Init>
  MX_ADC1_Init();
 800058c:	f000 f8dc 	bl	8000748 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000590:	f000 f93e 	bl	8000810 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000594:	f000 f97c 	bl	8000890 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f9c8 	bl	800092c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	4813      	ldr	r0, [pc, #76]	@ (80005f0 <main+0x7c>)
 80005a2:	f002 fded 	bl	8003180 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_reading, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	4912      	ldr	r1, [pc, #72]	@ (80005f4 <main+0x80>)
 80005aa:	4813      	ldr	r0, [pc, #76]	@ (80005f8 <main+0x84>)
 80005ac:	f001 f9bc 	bl	8001928 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <main+0x88>)
 80005b2:	f006 faef 	bl	8006b94 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b6:	f00b ffbb 	bl	800c530 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of TransmitMutex */
  TransmitMutexHandle = osMutexNew(&TransmitMutex_attributes);
 80005ba:	4811      	ldr	r0, [pc, #68]	@ (8000600 <main+0x8c>)
 80005bc:	f00c f963 	bl	800c886 <osMutexNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a10      	ldr	r2, [pc, #64]	@ (8000604 <main+0x90>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of AudioQueue */
  AudioQueueHandle = osMessageQueueNew (1, sizeof(uint8_t*), &AudioQueue_attributes);
 80005c6:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <main+0x94>)
 80005c8:	2104      	movs	r1, #4
 80005ca:	2001      	movs	r0, #1
 80005cc:	f00c fa69 	bl	800caa2 <osMessageQueueNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0e      	ldr	r2, [pc, #56]	@ (800060c <main+0x98>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_handler, NULL, &Task1_attributes);
 80005d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000610 <main+0x9c>)
 80005d8:	2100      	movs	r1, #0
 80005da:	480e      	ldr	r0, [pc, #56]	@ (8000614 <main+0xa0>)
 80005dc:	f00b fff2 	bl	800c5c4 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <main+0xa4>)
 80005e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e6:	f00b ffc7 	bl	800c578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <main+0x76>
 80005ee:	bf00      	nop
 80005f0:	48000400 	.word	0x48000400
 80005f4:	20000390 	.word	0x20000390
 80005f8:	2000018c 	.word	0x2000018c
 80005fc:	200002a4 	.word	0x200002a4
 8000600:	08011cc8 	.word	0x08011cc8
 8000604:	2000038c 	.word	0x2000038c
 8000608:	08011cb0 	.word	0x08011cb0
 800060c:	20000388 	.word	0x20000388
 8000610:	08011c8c 	.word	0x08011c8c
 8000614:	08000a81 	.word	0x08000a81
 8000618:	20000384 	.word	0x20000384

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09a      	sub	sp, #104	@ 0x68
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2248      	movs	r2, #72	@ 0x48
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f010 fbfd 	bl	8010e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
 800063e:	615a      	str	r2, [r3, #20]
 8000640:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <SystemClock_Config+0xc4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800064a:	4a25      	ldr	r2, [pc, #148]	@ (80006e0 <SystemClock_Config+0xc4>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b23      	ldr	r3, [pc, #140]	@ (80006e0 <SystemClock_Config+0xc4>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800065e:	2303      	movs	r3, #3
 8000660:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000662:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800066c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2340      	movs	r3, #64	@ 0x40
 8000670:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	2303      	movs	r3, #3
 8000678:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800067a:	2310      	movs	r3, #16
 800067c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800067e:	2308      	movs	r3, #8
 8000680:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000686:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000688:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800068c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000692:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f004 ffb9 	bl	8005610 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a4:	f000 fa76 	bl	8000b94 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006a8:	236f      	movs	r3, #111	@ 0x6f
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2303      	movs	r3, #3
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2103      	movs	r1, #3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fb15 	bl	8005cf8 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006d4:	f000 fa5e 	bl	8000b94 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3768      	adds	r7, #104	@ 0x68
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58000400 	.word	0x58000400

080006e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2250      	movs	r2, #80	@ 0x50
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f010 fb9a 	bl	8010e2a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80006f6:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80006fa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80006fc:	2306      	movs	r3, #6
 80006fe:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000700:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000704:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800070c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000710:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000712:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000716:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000718:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800071c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800071e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000728:	2300      	movs	r3, #0
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f005 ff51 	bl	80065d6 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800073a:	f000 fa2b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	@ 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800075e:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	@ (8000808 <MX_ADC1_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800078a:	2201      	movs	r2, #1
 800078c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_ADC1_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <MX_ADC1_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007c0:	f000 ff66 	bl	8001690 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80007ca:	f000 f9e3 	bl	8000b94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_ADC1_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80007d6:	2306      	movs	r3, #6
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	@ 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_ADC1_Init+0xbc>)
 80007ec:	f001 fafe 	bl	8001dec <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f000 f9cd 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000018c 	.word	0x2000018c
 8000808:	50040000 	.word	0x50040000
 800080c:	04300002 	.word	0x04300002

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_I2C1_Init+0x74>)
 800084c:	f002 fcca 	bl	80031e4 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 f99d 	bl	8000b94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <MX_I2C1_Init+0x74>)
 800085e:	f002 fd5c 	bl	800331a <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 f994 	bl	8000b94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000870:	f002 fd9e 	bl	80033b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 f98b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000250 	.word	0x20000250
 8000888:	40005400 	.word	0x40005400
 800088c:	10b17db5 	.word	0x10b17db5

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200-1;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008c4:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80008c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008d2:	2280      	movs	r2, #128	@ 0x80
 80008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d6:	4814      	ldr	r0, [pc, #80]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008d8:	f006 f904 	bl	8006ae4 <HAL_TIM_Base_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008e2:	f000 f957 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_TIM2_Init+0x98>)
 80008f4:	f006 faa3 	bl	8006e3e <HAL_TIM_ConfigClockSource>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008fe:	f000 f949 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000902:	2320      	movs	r3, #32
 8000904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_TIM2_Init+0x98>)
 8000910:	f006 fc92 	bl	8007238 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800091a:	f000 f93b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200002a4 	.word	0x200002a4

0800092c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000932:	4a23      	ldr	r2, [pc, #140]	@ (80009c0 <MX_USART1_UART_Init+0x94>)
 8000934:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000936:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000974:	4811      	ldr	r0, [pc, #68]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000976:	f006 fcfd 	bl	8007374 <HAL_UART_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000980:	f000 f908 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 8000988:	f007 f9c4 	bl	8007d14 <HAL_UARTEx_SetTxFifoThreshold>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000992:	f000 f8ff 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 800099a:	f007 f9f9 	bl	8007d90 <HAL_UARTEx_SetRxFifoThreshold>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009a4:	f000 f8f6 	bl	8000b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_USART1_UART_Init+0x90>)
 80009aa:	f007 f97a 	bl	8007ca2 <HAL_UARTEx_DisableFifoMode>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 f8ee 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200002f0 	.word	0x200002f0
 80009c0:	40013800 	.word	0x40013800

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff fda1 	bl	8000510 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fd9e 	bl	8000510 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	200b      	movs	r0, #11
 80009da:	f001 ffc5 	bl	8002968 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009de:	200b      	movs	r0, #11
 80009e0:	f001 ffdc 	bl	800299c <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fc:	2004      	movs	r0, #4
 80009fe:	f7ff fda0 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2002      	movs	r0, #2
 8000a04:	f7ff fd9d 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fd9a 	bl	8000542 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2123      	movs	r1, #35	@ 0x23
 8000a12:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <MX_GPIO_Init+0x54>)
 8000a14:	f002 fbb4 	bl	8003180 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000a18:	2323      	movs	r3, #35	@ 0x23
 8000a1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4803      	ldr	r0, [pc, #12]	@ (8000a3c <MX_GPIO_Init+0x54>)
 8000a2e:	f002 fa37 	bl	8002ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3718      	adds	r7, #24
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	48000400 	.word	0x48000400

08000a40 <USB_transmit>:

/* USER CODE BEGIN 4 */
void USB_transmit(uint8_t *buffer, size_t length){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	osStatus_t status;

	osMutexAcquire(TransmitMutexHandle, osWaitForever);
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <USB_transmit+0x3c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00b ff9d 	bl	800c992 <osMutexAcquire>
	status = CDC_Transmit_FS(buffer, length);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f00f fc48 	bl	80102f4 <CDC_Transmit_FS>
 8000a64:	4603      	mov	r3, r0
 8000a66:	60fb      	str	r3, [r7, #12]
	osMutexRelease(TransmitMutexHandle);
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <USB_transmit+0x3c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f00b ffdb 	bl	800ca28 <osMutexRelease>
		//sprintf(msg, "Error, status code: %d \r\n", status);
		//sprintf(msg, "Error");
		//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	}
}
 8000a72:	bf00      	nop
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000038c 	.word	0x2000038c

08000a80 <task1_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_handler */
void task1_handler(void *argument)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* init code for USB_Device */
  MX_USB_Device_Init();
 8000a88:	f00f fb76 	bl	8010178 <MX_USB_Device_Init>
  /* USER CODE BEGIN 5 */
  size_t length = 2*AUDIO_PACKET_SIZE+1; //buffer length in bytes
 8000a8c:	23c9      	movs	r3, #201	@ 0xc9
 8000a8e:	60fb      	str	r3, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	2100      	movs	r1, #0
 8000a96:	2001      	movs	r0, #1
 8000a98:	f00b fe74 	bl	800c784 <osThreadFlagsWait>
	  //sprintf(msg, "task1_unblocked \r\n\n");
	  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	4809      	ldr	r0, [pc, #36]	@ (8000ac4 <task1_handler+0x44>)
 8000aa0:	f002 fb86 	bl	80031b0 <HAL_GPIO_TogglePin>
//	  test = osMessageQueueGetCount(AudioQueueHandle);
//	  sprintf(msg, "queue accessed - %d in queue\r\n", test);
//	  HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);


	  osMessageQueueGet(AudioQueueHandle, &buffer, NULL, osWaitForever);
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <task1_handler+0x48>)
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	f107 0108 	add.w	r1, r7, #8
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f00c f8c9 	bl	800cc48 <osMessageQueueGet>
	  //sprintf(msg, "buffer received: %d \r\n", buffer[50]);
	  //HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);

	  USB_transmit(buffer, length);
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	68f9      	ldr	r1, [r7, #12]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffc0 	bl	8000a40 <USB_transmit>
	  osThreadFlagsWait(0x01, osFlagsWaitAny, osWaitForever);
 8000ac0:	bf00      	nop
 8000ac2:	e7e5      	b.n	8000a90 <task1_handler+0x10>
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	20000388 	.word	0x20000388

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a24      	ldr	r2, [pc, #144]	@ (8000b6c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 fbc3 	bl	8001268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000aea:	d13b      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x98>
	static uint16_t sample_count = 0;
	static uint8_t buffer1[2*AUDIO_PACKET_SIZE+1];
	buffer1[0] = (uint8_t)-128;
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000aee:	2280      	movs	r2, #128	@ 0x80
 8000af0:	701a      	strb	r2, [r3, #0]
	static uint8_t buffer2[2*AUDIO_PACKET_SIZE+1];
	buffer2[0] = (uint8_t)-128;
 8000af2:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	701a      	strb	r2, [r3, #0]
	static uint8_t *passive_buffer = buffer2;
	osStatus_t status;

	//update buffer
	//memcpy(&active_buffer[2*sample_count+1], &sample_count, sizeof(uint16_t));
	memcpy(&active_buffer[2*sample_count+1], &ADC_reading, sizeof(uint16_t));
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	3301      	adds	r3, #1
 8000b04:	4413      	add	r3, r2
 8000b06:	4a1e      	ldr	r2, [pc, #120]	@ (8000b80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b08:	8812      	ldrh	r2, [r2, #0]
 8000b0a:	801a      	strh	r2, [r3, #0]


	sample_count++;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b16:	801a      	strh	r2, [r3, #0]

	// Use the local counter to determine when to signal
	if(sample_count == AUDIO_PACKET_SIZE)
 8000b18:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2b64      	cmp	r3, #100	@ 0x64
 8000b1e:	d121      	bne.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x98>
	{
		status = osMessageQueuePut(AudioQueueHandle, (const void*)&active_buffer, 0, 0);
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000b22:	6818      	ldr	r0, [r3, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2200      	movs	r2, #0
 8000b28:	4913      	ldr	r1, [pc, #76]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b2a:	f00c f82d 	bl	800cb88 <osMessageQueuePut>
 8000b2e:	60f8      	str	r0, [r7, #12]
		if (status != osOK){
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d003      	beq.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x72>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b36:	2102      	movs	r1, #2
 8000b38:	4813      	ldr	r0, [pc, #76]	@ (8000b88 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000b3a:	f002 fb39 	bl	80031b0 <HAL_GPIO_TogglePin>
		}
		//swap buffers so buffer points to the other buffer
		uint8_t *temp = active_buffer;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60bb      	str	r3, [r7, #8]
		active_buffer = passive_buffer;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b4a:	6013      	str	r3, [r2, #0]
		passive_buffer = temp;
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b8c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	6013      	str	r3, [r2, #0]
		sample_count = 0;
 8000b52:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	801a      	strh	r2, [r3, #0]
		osThreadFlagsSet(Task1Handle, 0x01);
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f00b fdc2 	bl	800c6e8 <osThreadFlagsSet>
	}
  }
	//sprintf(msg, "Put on queue - %d \r\n", sample_count);
	//HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
  /* USER CODE END Callback 1 */
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40012c00 	.word	0x40012c00
 8000b70:	20000394 	.word	0x20000394
 8000b74:	20000460 	.word	0x20000460
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	2000052a 	.word	0x2000052a
 8000b80:	20000390 	.word	0x20000390
 8000b84:	20000388 	.word	0x20000388
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	20000384 	.word	0x20000384

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <LL_AHB2_GRP1_EnableClock>:
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000be0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4013      	ands	r3, r2
 8000c26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	f06f 0001 	mvn.w	r0, #1
 8000c42:	f001 fe91 	bl	8002968 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a26      	ldr	r2, [pc, #152]	@ (8000d04 <HAL_ADC_MspInit+0xb8>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d145      	bne.n	8000cfa <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c6e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c72:	f7ff ff95 	bl	8000ba0 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2004      	movs	r0, #4
 8000c78:	f7ff ff92 	bl	8000ba0 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c80:	2303      	movs	r3, #3
 8000c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481e      	ldr	r0, [pc, #120]	@ (8000d08 <HAL_ADC_MspInit+0xbc>)
 8000c90:	f002 f906 	bl	8002ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <HAL_ADC_MspInit+0xc4>)
 8000c98:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cae:	2280      	movs	r2, #128	@ 0x80
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000cd0:	f001 fe72 	bl	80029b8 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8000cda:	f7ff ff5b 	bl	8000b94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ce4:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <HAL_ADC_MspInit+0xc0>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2105      	movs	r1, #5
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f001 fe3a 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000cf4:	2012      	movs	r0, #18
 8000cf6:	f001 fe51 	bl	800299c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	50040000 	.word	0x50040000
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	200001f0 	.word	0x200001f0
 8000d10:	40020008 	.word	0x40020008

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09c      	sub	sp, #112	@ 0x70
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2250      	movs	r2, #80	@ 0x50
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f010 f878 	bl	8010e2a <memset>
  if(hi2c->Instance==I2C1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_I2C_MspInit+0x88>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d126      	bne.n	8000d92 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d44:	2304      	movs	r3, #4
 8000d46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d48:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4618      	mov	r0, r3
 8000d54:	f005 fc3f 	bl	80065d6 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d5e:	f7ff ff19 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2002      	movs	r0, #2
 8000d64:	f7ff ff1c 	bl	8000ba0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <HAL_I2C_MspInit+0x8c>)
 8000d86:	f002 f88b 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d8e:	f7ff ff20 	bl	8000bd2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d92:	bf00      	nop
 8000d94:	3770      	adds	r7, #112	@ 0x70
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	48000400 	.word	0x48000400

08000da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db4:	d10a      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db6:	2001      	movs	r0, #1
 8000db8:	f7ff ff0b 	bl	8000bd2 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2105      	movs	r1, #5
 8000dc0:	201c      	movs	r0, #28
 8000dc2:	f001 fdd1 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dc6:	201c      	movs	r0, #28
 8000dc8:	f001 fde8 	bl	800299c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b09c      	sub	sp, #112	@ 0x70
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2250      	movs	r2, #80	@ 0x50
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f010 f818 	bl	8010e2a <memset>
  if(huart->Instance==USART1)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <HAL_UART_MspInit+0x84>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d124      	bne.n	8000e4e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 fbe0 	bl	80065d6 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff feba 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e20:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000e24:	f7ff feee 	bl	8000c04 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff feb9 	bl	8000ba0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e2e:	23c0      	movs	r3, #192	@ 0xc0
 8000e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e46:	4619      	mov	r1, r3
 8000e48:	4804      	ldr	r0, [pc, #16]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000e4a:	f002 f829 	bl	8002ea0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e4e:	bf00      	nop
 8000e50:	3770      	adds	r7, #112	@ 0x70
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40013800 	.word	0x40013800
 8000e5c:	48000400 	.word	0x48000400

08000e60 <LL_APB2_GRP1_EnableClock>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e7c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e84:	68fb      	ldr	r3, [r7, #12]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2019      	movs	r0, #25
 8000eaa:	f001 fd5d 	bl	8002968 <HAL_NVIC_SetPriority>
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eae:	2019      	movs	r0, #25
 8000eb0:	f001 fd74 	bl	800299c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000eb4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000eb8:	f7ff ffd2 	bl	8000e60 <LL_APB2_GRP1_EnableClock>
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 f902 	bl	80060d0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ecc:	f005 f8ea 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 8000ed0:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ed4:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <HAL_InitTick+0x8c>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	3b01      	subs	r3, #1
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <HAL_InitTick+0x90>)
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <HAL_InitTick+0x94>)
 8000ee4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_InitTick+0x90>)
 8000ee8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eee:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_InitTick+0x90>)
 8000ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ef2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_InitTick+0x90>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_InitTick+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f00:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <HAL_InitTick+0x90>)
 8000f02:	f005 fdef 	bl	8006ae4 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d104      	bne.n	8000f16 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <HAL_InitTick+0x90>)
 8000f0e:	f005 fe41 	bl	8006b94 <HAL_TIM_Base_Start_IT>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3730      	adds	r7, #48	@ 0x30
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	2000052c 	.word	0x2000052c
 8000f28:	40012c00 	.word	0x40012c00

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <NMI_Handler+0x4>

08000f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <MemManage_Handler+0x4>

08000f44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <BusFault_Handler+0x4>

08000f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <UsageFault_Handler+0x4>

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <DMA1_Channel1_IRQHandler+0x10>)
 8000f6a:	f001 fe48 	bl	8002bfe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200001f0 	.word	0x200001f0

08000f78 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <ADC1_IRQHandler+0x10>)
 8000f7e:	f000 fd57 	bl	8001a30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000018c 	.word	0x2000018c

08000f8c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <USB_LP_IRQHandler+0x10>)
 8000f92:	f002 fb49 	bl	8003628 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000a848 	.word	0x2000a848

08000fa0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000fa6:	f005 fe43 	bl	8006c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000052c 	.word	0x2000052c

08000fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <TIM2_IRQHandler+0x10>)
 8000fba:	f005 fe39 	bl	8006c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200002a4 	.word	0x200002a4

08000fc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	e00a      	b.n	8000ff0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fda:	f3af 8000 	nop.w
 8000fde:	4601      	mov	r1, r0
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1c5a      	adds	r2, r3, #1
 8000fe4:	60ba      	str	r2, [r7, #8]
 8000fe6:	b2ca      	uxtb	r2, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf0      	blt.n	8000fda <_read+0x12>
  }

  return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e009      	b.n	8001028 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	60ba      	str	r2, [r7, #8]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbf1      	blt.n	8001014 <_write+0x12>
  }
  return len;
 8001030:	687b      	ldr	r3, [r7, #4]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_close>:

int _close(int file)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001062:	605a      	str	r2, [r3, #4]
  return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_isatty>:

int _isatty(int file)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f00f ff4e 	bl	8010f74 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20030000 	.word	0x20030000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000578 	.word	0x20000578
 800110c:	2000ae90 	.word	0x2000ae90

08001110 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <SystemInit+0x98>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <SystemInit+0x98>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001138:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800113c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800113e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <SystemInit+0x9c>)
 800114a:	4013      	ands	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800115a:	f023 0305 	bic.w	r3, r3, #5
 800115e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800116a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800117a:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <SystemInit+0xa0>)
 800117c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800117e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <SystemInit+0xa0>)
 8001184:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001194:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00
 80011ac:	faf6fefb 	.word	0xfaf6fefb
 80011b0:	22041000 	.word	0x22041000

080011b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b8:	3304      	adds	r3, #4

080011ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80011be:	d3f9      	bcc.n	80011b4 <CopyDataInit>
  bx lr
 80011c0:	4770      	bx	lr

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80011c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80011c4:	3004      	adds	r0, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80011c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>
  bx lr
 80011ca:	4770      	bx	lr

080011cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d0:	f7ff ff9e 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80011d4:	480b      	ldr	r0, [pc, #44]	@ (8001204 <LoopForever+0x6>)
 80011d6:	490c      	ldr	r1, [pc, #48]	@ (8001208 <LoopForever+0xa>)
 80011d8:	4a0c      	ldr	r2, [pc, #48]	@ (800120c <LoopForever+0xe>)
 80011da:	2300      	movs	r3, #0
 80011dc:	f7ff ffed 	bl	80011ba <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011e0:	480b      	ldr	r0, [pc, #44]	@ (8001210 <LoopForever+0x12>)
 80011e2:	490c      	ldr	r1, [pc, #48]	@ (8001214 <LoopForever+0x16>)
 80011e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001218 <LoopForever+0x1a>)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f7ff ffe7 	bl	80011ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80011ec:	480b      	ldr	r0, [pc, #44]	@ (800121c <LoopForever+0x1e>)
 80011ee:	490c      	ldr	r1, [pc, #48]	@ (8001220 <LoopForever+0x22>)
 80011f0:	2300      	movs	r3, #0
 80011f2:	f7ff ffe8 	bl	80011c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011f6:	f00f fec3 	bl	8010f80 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011fa:	f7ff f9bb 	bl	8000574 <main>

080011fe <LoopForever>:

LoopForever:
  b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   r0, =_estack
 8001200:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001204:	20000008 	.word	0x20000008
 8001208:	20000170 	.word	0x20000170
 800120c:	08011de4 	.word	0x08011de4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001210:	20030000 	.word	0x20030000
 8001214:	20030000 	.word	0x20030000
 8001218:	08011f4c 	.word	0x08011f4c
  INIT_BSS _sbss, _ebss
 800121c:	20000170 	.word	0x20000170
 8001220:	2000ae90 	.word	0x2000ae90

08001224 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <AES1_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_Init+0x3c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_Init+0x3c>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800123c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123e:	2003      	movs	r0, #3
 8001240:	f001 fb87 	bl	8002952 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001244:	200f      	movs	r0, #15
 8001246:	f7ff fe25 	bl	8000e94 <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	e001      	b.n	800125a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001256:	f7ff fcee 	bl	8000c36 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125a:	79fb      	ldrb	r3, [r7, #7]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	58004000 	.word	0x58004000

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000018 	.word	0x20000018
 800128c:	2000057c 	.word	0x2000057c

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000057c 	.word	0x2000057c

080012a8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <HAL_GetTickPrio+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000014 	.word	0x20000014

080012c0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
 8001334:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3360      	adds	r3, #96	@ 0x60
 800133a:	461a      	mov	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <LL_ADC_SetOffset+0x44>)
 800134a:	4013      	ands	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	4313      	orrs	r3, r2
 8001358:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	03fff000 	.word	0x03fff000

08001370 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3360      	adds	r3, #96	@ 0x60
 800137e:	461a      	mov	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3360      	adds	r3, #96	@ 0x60
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013ea:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3330      	adds	r3, #48	@ 0x30
 8001408:	461a      	mov	r2, r3
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	4413      	add	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	211f      	movs	r1, #31
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	0e9b      	lsrs	r3, r3, #26
 8001430:	f003 011f 	and.w	r1, r3, #31
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001492:	b480      	push	{r7}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3314      	adds	r3, #20
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	0e5b      	lsrs	r3, r3, #25
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	0d1b      	lsrs	r3, r3, #20
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	2107      	movs	r1, #7
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	0d1b      	lsrs	r3, r3, #20
 80014cc:	f003 031f 	and.w	r3, r3, #31
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	431a      	orrs	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001500:	43db      	mvns	r3, r3
 8001502:	401a      	ands	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0318 	and.w	r3, r3, #24
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <LL_ADC_SetChannelSingleDiff+0x44>)
 800150c:	40d9      	lsrs	r1, r3
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	400b      	ands	r3, r1
 8001512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001516:	431a      	orrs	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	0007ffff 	.word	0x0007ffff

08001530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6093      	str	r3, [r2, #8]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001568:	d101      	bne.n	800156e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800158c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001590:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80015b8:	d101      	bne.n	80015be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <LL_ADC_IsEnabled+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_IsEnabled+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800162a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b04      	cmp	r3, #4
 8001654:	d101      	bne.n	800165a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	2b08      	cmp	r3, #8
 800167a:	d101      	bne.n	8001680 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e12e      	b.n	800190c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff fac5 	bl	8000c4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff3d 	bl	8001554 <LL_ADC_IsDeepPowerDownEnabled>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff23 	bl	8001530 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff58 	bl	80015a4 <LL_ADC_IsInternalRegulatorEnabled>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d115      	bne.n	8001726 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff3c 	bl	800157c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001704:	4b83      	ldr	r3, [pc, #524]	@ (8001914 <HAL_ADC_Init+0x284>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	4a83      	ldr	r2, [pc, #524]	@ (8001918 <HAL_ADC_Init+0x288>)
 800170c:	fba2 2303 	umull	r2, r3, r2, r3
 8001710:	099b      	lsrs	r3, r3, #6
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001718:	e002      	b.n	8001720 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff3a 	bl	80015a4 <LL_ADC_IsInternalRegulatorEnabled>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10d      	bne.n	8001752 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff73 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 800175c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 80c7 	bne.w	80018fa <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 80c3 	bne.w	80018fa <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff33 	bl	80015f4 <LL_ADC_IsEnabled>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10b      	bne.n	80017ac <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001794:	4861      	ldr	r0, [pc, #388]	@ (800191c <HAL_ADC_Init+0x28c>)
 8001796:	f7ff ff2d 	bl	80015f4 <LL_ADC_IsEnabled>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4619      	mov	r1, r3
 80017a6:	485e      	ldr	r0, [pc, #376]	@ (8001920 <HAL_ADC_Init+0x290>)
 80017a8:	f7ff fd8a 	bl	80012c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e5b      	ldrb	r3, [r3, #25]
 80017b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80017bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80017c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ca:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80017cc:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	3b01      	subs	r3, #1
 80017e4:	045b      	lsls	r3, r3, #17
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001800:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <HAL_ADC_Init+0x294>)
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6812      	ldr	r2, [r2, #0]
 8001816:	69b9      	ldr	r1, [r7, #24]
 8001818:	430b      	orrs	r3, r1
 800181a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff0e 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 8001826:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff1b 	bl	8001668 <LL_ADC_INJ_IsConversionOngoing>
 8001832:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13d      	bne.n	80018b6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d13a      	bne.n	80018b6 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001844:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800184c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800185c:	f023 0302 	bic.w	r3, r3, #2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	69b9      	ldr	r1, [r7, #24]
 8001866:	430b      	orrs	r3, r1
 8001868:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001870:	2b01      	cmp	r3, #1
 8001872:	d118      	bne.n	80018a6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800188a:	4311      	orrs	r1, r2
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001890:	4311      	orrs	r1, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001896:	430a      	orrs	r2, r1
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	611a      	str	r2, [r3, #16]
 80018a4:	e007      	b.n	80018b6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d10c      	bne.n	80018d8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	f023 010f 	bic.w	r1, r3, #15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80018d6:	e007      	b.n	80018e8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020f 	bic.w	r2, r2, #15
 80018e6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	f043 0201 	orr.w	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80018f8:	e007      	b.n	800190a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800190a:	7ffb      	ldrb	r3, [r7, #31]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000010 	.word	0x20000010
 8001918:	053e2d63 	.word	0x053e2d63
 800191c:	50040000 	.word	0x50040000
 8001920:	50040300 	.word	0x50040300
 8001924:	fff0c007 	.word	0xfff0c007

08001928 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fe82 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d167      	bne.n	8001a14 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_ADC_Start_DMA+0x2a>
 800194e:	2302      	movs	r3, #2
 8001950:	e063      	b.n	8001a1a <HAL_ADC_Start_DMA+0xf2>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fe0c 	bl	8002578 <ADC_Enable>
 8001960:	4603      	mov	r3, r0
 8001962:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d14f      	bne.n	8001a0a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198e:	f023 0206 	bic.w	r2, r3, #6
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	659a      	str	r2, [r3, #88]	@ 0x58
 8001996:	e002      	b.n	800199e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	4a20      	ldr	r2, [pc, #128]	@ (8001a24 <HAL_ADC_Start_DMA+0xfc>)
 80019a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <HAL_ADC_Start_DMA+0x100>)
 80019ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a2c <HAL_ADC_Start_DMA+0x104>)
 80019b4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	221c      	movs	r2, #28
 80019bc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0210 	orr.w	r2, r2, #16
 80019d4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3340      	adds	r3, #64	@ 0x40
 80019f0:	4619      	mov	r1, r3
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f001 f887 	bl	8002b08 <HAL_DMA_Start_IT>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe09 	bl	800161a <LL_ADC_REG_StartConversion>
 8001a08:	e006      	b.n	8001a18 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001a12:	e001      	b.n	8001a18 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
 8001a16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	0800266d 	.word	0x0800266d
 8001a28:	08002745 	.word	0x08002745
 8001a2c:	08002761 	.word	0x08002761

08001a30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d017      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x56>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a64:	f003 0310 	and.w	r3, r3, #16
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a70:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 feb3 	bl	80027e4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x6a>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05d      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d058      	beq.n	8001b60 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fc81 	bl	80013d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d03d      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ae4:	d035      	beq.n	8001b52 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d12e      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fda2 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d11a      	bne.n	8001b3a <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020c 	bic.w	r2, r2, #12
 8001b12:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d112      	bne.n	8001b52 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b38:	e00b      	b.n	8001b52 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b3e:	f043 0210 	orr.w	r2, r3, #16
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f922 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_ADC_IRQHandler+0x144>
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d074      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d06f      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fc61 	bl	800146c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001baa:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fc0e 	bl	80013d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bb6:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d049      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_ADC_IRQHandler+0x1b0>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d041      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d13c      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bea:	2b40      	cmp	r3, #64	@ 0x40
 8001bec:	d135      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d12e      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fd31 	bl	8001668 <LL_ADC_INJ_IsConversionOngoing>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d11a      	bne.n	8001c42 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c1a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d112      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c40:	e00b      	b.n	8001c5a <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	f043 0210 	orr.w	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fd9a 	bl	8002794 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2260      	movs	r2, #96	@ 0x60
 8001c66:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <HAL_ADC_IRQHandler+0x266>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00c      	beq.n	8001c96 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f89b 	bl	8001dc4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2280      	movs	r2, #128	@ 0x80
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d012      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x296>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fd80 	bl	80027bc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d012      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x2c6>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fd72 	bl	80027d0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d02b      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x328>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d026      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e009      	b.n	8001d2c <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fb97 	bl	8001450 <LL_ADC_REG_GetDMATransfer>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10e      	bne.n	8001d50 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f844 	bl	8001dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x364>
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d70:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f043 0208 	orr.w	r2, r3, #8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d8c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fd0a 	bl	80027a8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001d94:	bf00      	nop
 8001d96:	3720      	adds	r7, #32
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0b6      	sub	sp, #216	@ 0xd8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x22>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e39f      	b.n	800254e <HAL_ADC_ConfigChannel+0x762>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fc11 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f040 8384 	bne.w	8002530 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff fadf 	bl	80013f8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fbff 	bl	8001642 <LL_ADC_REG_IsConversionOngoing>
 8001e44:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fc0b 	bl	8001668 <LL_ADC_INJ_IsConversionOngoing>
 8001e52:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 81a6 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f040 81a1 	bne.w	80021ac <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6819      	ldr	r1, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	461a      	mov	r2, r3
 8001e78:	f7ff fb0b 	bl	8001492 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d00a      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6919      	ldr	r1, [r3, #16]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001eae:	f7ff fa3b 	bl	8001328 <LL_ADC_SetOffset>
 8001eb2:	e17b      	b.n	80021ac <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fa58 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0xf4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fa4d 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	e01e      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x132>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fa42 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	e004      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x14a>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	e018      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x17c>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8001f5a:	2320      	movs	r3, #32
 8001f5c:	e004      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d106      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fa11 	bl	800139c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f9f5 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x1ba>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff f9ea 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	e01e      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x1f8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f9df 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8001fd4:	2320      	movs	r3, #32
 8001fd6:	e004      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8001fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x210>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	e018      	b.n	800202e <HAL_ADC_ConfigChannel+0x242>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002010:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002020:	2320      	movs	r3, #32
 8002022:	e004      	b.n	800202e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002028:	fab3 f383 	clz	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	429a      	cmp	r2, r3
 8002030:	d106      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f9ae 	bl	800139c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2102      	movs	r1, #2
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f992 	bl	8001370 <LL_ADC_GetOffsetChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10a      	bne.n	800206c <HAL_ADC_ConfigChannel+0x280>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2102      	movs	r1, #2
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff f987 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	f003 021f 	and.w	r2, r3, #31
 800206a:	e01e      	b.n	80020aa <HAL_ADC_ConfigChannel+0x2be>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f97c 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002082:	fa93 f3a3 	rbit	r3, r3
 8002086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800208a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800208e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800209a:	2320      	movs	r3, #32
 800209c:	e004      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800209e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x2d6>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0e9b      	lsrs	r3, r3, #26
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	e016      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x304>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e004      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80020e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2102      	movs	r1, #2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff f94d 	bl	800139c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2103      	movs	r1, #3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f931 	bl	8001370 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_ADC_ConfigChannel+0x342>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2103      	movs	r1, #3
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f926 	bl	8001370 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	e017      	b.n	800215e <HAL_ADC_ConfigChannel+0x372>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2103      	movs	r1, #3
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f91b 	bl	8001370 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002148:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800214a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x38a>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	e011      	b.n	800219a <HAL_ADC_ConfigChannel+0x3ae>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002186:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e003      	b.n	800219a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	429a      	cmp	r2, r3
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2103      	movs	r1, #3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f8f8 	bl	800139c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fa1f 	bl	80015f4 <LL_ADC_IsEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 81c2 	bne.w	8002542 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	461a      	mov	r2, r3
 80021cc:	f7ff f98c 	bl	80014e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002410 <HAL_ADC_ConfigChannel+0x624>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	f040 8130 	bne.w	800243c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x418>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e019      	b.n	8002238 <HAL_ADC_ConfigChannel+0x44c>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002214:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2b09      	cmp	r3, #9
 8002230:	bf94      	ite	ls
 8002232:	2301      	movls	r3, #1
 8002234:	2300      	movhi	r3, #0
 8002236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002238:	2b00      	cmp	r3, #0
 800223a:	d079      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x46c>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	069b      	lsls	r3, r3, #26
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002256:	e015      	b.n	8002284 <HAL_ADC_ConfigChannel+0x498>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002268:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x4b8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2101      	movs	r1, #1
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	e017      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4e8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80022b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80022b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e003      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80022c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022c2:	fab3 f383 	clz	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	3301      	adds	r3, #1
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f303 	lsl.w	r3, r1, r3
 80022d4:	ea42 0103 	orr.w	r1, r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x50e>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	051b      	lsls	r3, r3, #20
 80022f8:	e018      	b.n	800232c <HAL_ADC_ConfigChannel+0x540>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800230c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232c:	430b      	orrs	r3, r1
 800232e:	e080      	b.n	8002432 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x560>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	069b      	lsls	r3, r3, #26
 8002346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800234a:	e015      	b.n	8002378 <HAL_ADC_ConfigChannel+0x58c>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	fa93 f3a3 	rbit	r3, r3
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800235a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800235e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	e003      	b.n	8002370 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	069b      	lsls	r3, r3, #26
 8002374:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x5ac>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0e9b      	lsrs	r3, r3, #26
 800238a:	3301      	adds	r3, #1
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	e017      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x5dc>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	fa93 f3a3 	rbit	r3, r3
 80023a4:	61fb      	str	r3, [r7, #28]
  return result;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80023b0:	2320      	movs	r3, #32
 80023b2:	e003      	b.n	80023bc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2101      	movs	r1, #1
 80023c4:	fa01 f303 	lsl.w	r3, r1, r3
 80023c8:	ea42 0103 	orr.w	r1, r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10d      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x608>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4613      	mov	r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	3b1e      	subs	r3, #30
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	e01d      	b.n	8002430 <HAL_ADC_ConfigChannel+0x644>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa93 f3a3 	rbit	r3, r3
 8002400:	613b      	str	r3, [r7, #16]
  return result;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e005      	b.n	800241c <HAL_ADC_ConfigChannel+0x630>
 8002410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	051b      	lsls	r3, r3, #20
 800242c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002430:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002436:	4619      	mov	r1, r3
 8002438:	f7ff f82b 	bl	8001492 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <HAL_ADC_ConfigChannel+0x76c>)
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d07c      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002448:	4844      	ldr	r0, [pc, #272]	@ (800255c <HAL_ADC_ConfigChannel+0x770>)
 800244a:	f7fe ff5f 	bl	800130c <LL_ADC_GetCommonPathInternalCh>
 800244e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002452:	4843      	ldr	r0, [pc, #268]	@ (8002560 <HAL_ADC_ConfigChannel+0x774>)
 8002454:	f7ff f8ce 	bl	80015f4 <LL_ADC_IsEnabled>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15e      	bne.n	800251c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a40      	ldr	r2, [pc, #256]	@ (8002564 <HAL_ADC_ConfigChannel+0x778>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d127      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x6cc>
 8002468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800246c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d121      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a39      	ldr	r2, [pc, #228]	@ (8002560 <HAL_ADC_ConfigChannel+0x774>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d161      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800247e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002482:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002486:	4619      	mov	r1, r3
 8002488:	4834      	ldr	r0, [pc, #208]	@ (800255c <HAL_ADC_ConfigChannel+0x770>)
 800248a:	f7fe ff2c 	bl	80012e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248e:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_ADC_ConfigChannel+0x77c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	4a35      	ldr	r2, [pc, #212]	@ (800256c <HAL_ADC_ConfigChannel+0x780>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	099b      	lsrs	r3, r3, #6
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80024a8:	e002      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f9      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b6:	e044      	b.n	8002542 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002570 <HAL_ADC_ConfigChannel+0x784>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d113      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x6fe>
 80024c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <HAL_ADC_ConfigChannel+0x774>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d134      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e0:	4619      	mov	r1, r3
 80024e2:	481e      	ldr	r0, [pc, #120]	@ (800255c <HAL_ADC_ConfigChannel+0x770>)
 80024e4:	f7fe feff 	bl	80012e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	e02b      	b.n	8002542 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <HAL_ADC_ConfigChannel+0x788>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d126      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x756>
 80024f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d120      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <HAL_ADC_ConfigChannel+0x774>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d11b      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800250a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800250e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002512:	4619      	mov	r1, r3
 8002514:	4811      	ldr	r0, [pc, #68]	@ (800255c <HAL_ADC_ConfigChannel+0x770>)
 8002516:	f7fe fee6 	bl	80012e6 <LL_ADC_SetCommonPathInternalCh>
 800251a:	e012      	b.n	8002542 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800252e:	e008      	b.n	8002542 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800254a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800254e:	4618      	mov	r0, r3
 8002550:	37d8      	adds	r7, #216	@ 0xd8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	80080000 	.word	0x80080000
 800255c:	50040300 	.word	0x50040300
 8002560:	50040000 	.word	0x50040000
 8002564:	c7520000 	.word	0xc7520000
 8002568:	20000010 	.word	0x20000010
 800256c:	053e2d63 	.word	0x053e2d63
 8002570:	cb840000 	.word	0xcb840000
 8002574:	80000001 	.word	0x80000001

08002578 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff f833 	bl	80015f4 <LL_ADC_IsEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d15e      	bne.n	8002652 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	4b30      	ldr	r3, [pc, #192]	@ (800265c <ADC_Enable+0xe4>)
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00d      	beq.n	80025be <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e04a      	b.n	8002654 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f802 	bl	80015cc <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025c8:	4825      	ldr	r0, [pc, #148]	@ (8002660 <ADC_Enable+0xe8>)
 80025ca:	f7fe fe9f 	bl	800130c <LL_ADC_GetCommonPathInternalCh>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00f      	beq.n	80025f8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <ADC_Enable+0xec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	099b      	lsrs	r3, r3, #6
 80025de:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <ADC_Enable+0xf0>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	3301      	adds	r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80025ea:	e002      	b.n	80025f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f9      	bne.n	80025ec <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80025f8:	f7fe fe4a 	bl	8001290 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025fe:	e021      	b.n	8002644 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fff5 	bl	80015f4 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe ffd9 	bl	80015cc <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261a:	f7fe fe39 	bl	8001290 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d90d      	bls.n	8002644 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d1d6      	bne.n	8002600 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	8000003f 	.word	0x8000003f
 8002660:	50040300 	.word	0x50040300
 8002664:	20000010 	.word	0x20000010
 8002668:	053e2d63 	.word	0x053e2d63

0800266c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d14b      	bne.n	800271e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fe94 	bl	80013d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d032      	beq.n	8002716 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d12b      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11f      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80026e2:	e018      	b.n	8002716 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d111      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fb40 	bl	8001d9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800271c:	e00e      	b.n	800273c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fb54 	bl	8001dd8 <HAL_ADC_ErrorCallback>
}
 8002730:	e004      	b.n	800273c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f7ff fb2c 	bl	8001db0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f043 0204 	orr.w	r2, r3, #4
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fb26 	bl	8001dd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002808:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002814:	4013      	ands	r3, r2
 8002816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800282a:	4a04      	ldr	r2, [pc, #16]	@ (800283c <__NVIC_SetPriorityGrouping+0x44>)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	60d3      	str	r3, [r2, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__NVIC_GetPriorityGrouping+0x18>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0307 	and.w	r3, r3, #7
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	2b00      	cmp	r3, #0
 800286c:	db0b      	blt.n	8002886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4907      	ldr	r1, [pc, #28]	@ (8002894 <__NVIC_EnableIRQ+0x38>)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	2001      	movs	r0, #1
 800287e:	fa00 f202 	lsl.w	r2, r0, r2
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000e100 	.word	0xe000e100

08002898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	6039      	str	r1, [r7, #0]
 80028a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	db0a      	blt.n	80028c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	490c      	ldr	r1, [pc, #48]	@ (80028e4 <__NVIC_SetPriority+0x4c>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	0112      	lsls	r2, r2, #4
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	440b      	add	r3, r1
 80028bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c0:	e00a      	b.n	80028d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <__NVIC_SetPriority+0x50>)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	3b04      	subs	r3, #4
 80028d0:	0112      	lsls	r2, r2, #4
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	440b      	add	r3, r1
 80028d6:	761a      	strb	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	@ 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f1c3 0307 	rsb	r3, r3, #7
 8002906:	2b04      	cmp	r3, #4
 8002908:	bf28      	it	cs
 800290a:	2304      	movcs	r3, #4
 800290c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3304      	adds	r3, #4
 8002912:	2b06      	cmp	r3, #6
 8002914:	d902      	bls.n	800291c <NVIC_EncodePriority+0x30>
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3b03      	subs	r3, #3
 800291a:	e000      	b.n	800291e <NVIC_EncodePriority+0x32>
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43da      	mvns	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	401a      	ands	r2, r3
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43d9      	mvns	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	4313      	orrs	r3, r2
         );
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	@ 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ff4c 	bl	80027f8 <__NVIC_SetPriorityGrouping>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002976:	f7ff ff63 	bl	8002840 <__NVIC_GetPriorityGrouping>
 800297a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f7ff ffb3 	bl	80028ec <NVIC_EncodePriority>
 8002986:	4602      	mov	r2, r0
 8002988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff82 	bl	8002898 <__NVIC_SetPriority>
}
 8002994:	bf00      	nop
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff56 	bl	800285c <__NVIC_EnableIRQ>
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e08e      	b.n	8002ae8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b47      	ldr	r3, [pc, #284]	@ (8002af0 <HAL_DMA_Init+0x138>)
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d80f      	bhi.n	80029f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	4b45      	ldr	r3, [pc, #276]	@ (8002af4 <HAL_DMA_Init+0x13c>)
 80029de:	4413      	add	r3, r2
 80029e0:	4a45      	ldr	r2, [pc, #276]	@ (8002af8 <HAL_DMA_Init+0x140>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	009a      	lsls	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a42      	ldr	r2, [pc, #264]	@ (8002afc <HAL_DMA_Init+0x144>)
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80029f4:	e00e      	b.n	8002a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <HAL_DMA_Init+0x148>)
 80029fe:	4413      	add	r3, r2
 8002a00:	4a3d      	ldr	r2, [pc, #244]	@ (8002af8 <HAL_DMA_Init+0x140>)
 8002a02:	fba2 2303 	umull	r2, r3, r2, r3
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	009a      	lsls	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a3c      	ldr	r2, [pc, #240]	@ (8002b04 <HAL_DMA_Init+0x14c>)
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9b6 	bl	8002dd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a74:	d102      	bne.n	8002a7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002a88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_DMA_Init+0x106>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d80c      	bhi.n	8002abe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f9d5 	bl	8002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	e008      	b.n	8002ad0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40020407 	.word	0x40020407
 8002af4:	bffdfff8 	.word	0xbffdfff8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020000 	.word	0x40020000
 8002b00:	bffdfbf8 	.word	0xbffdfbf8
 8002b04:	40020400 	.word	0x40020400

08002b08 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Start_IT+0x20>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e066      	b.n	8002bf6 <HAL_DMA_Start_IT+0xee>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d155      	bne.n	8002be8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f8fb 	bl	8002d5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 020e 	orr.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 020a 	orr.w	r2, r2, #10
 8002b9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d007      	beq.n	8002bbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e005      	b.n	8002bf4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f003 031c 	and.w	r3, r3, #28
 8002c1e:	2204      	movs	r2, #4
 8002c20:	409a      	lsls	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d026      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x7a>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d021      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0204 	bic.w	r2, r2, #4
 8002c50:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f003 021c 	and.w	r2, r3, #28
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	2104      	movs	r1, #4
 8002c60:	fa01 f202 	lsl.w	r2, r1, r2
 8002c64:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d071      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c76:	e06c      	b.n	8002d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	f003 031c 	and.w	r3, r3, #28
 8002c80:	2202      	movs	r2, #2
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02e      	beq.n	8002cea <HAL_DMA_IRQHandler+0xec>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d029      	beq.n	8002cea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10b      	bne.n	8002cbc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 020a 	bic.w	r2, r2, #10
 8002cb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	f003 021c 	and.w	r2, r3, #28
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	2102      	movs	r1, #2
 8002cca:	fa01 f202 	lsl.w	r2, r1, r2
 8002cce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d038      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ce8:	e033      	b.n	8002d52 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f003 031c 	and.w	r3, r3, #28
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d02a      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x156>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d025      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 020e 	bic.w	r2, r2, #14
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1c:	f003 021c 	and.w	r2, r3, #28
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
}
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d84:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f003 021c 	and.w	r2, r3, #28
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d108      	bne.n	8002dbc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dba:	e007      	b.n	8002dcc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d80a      	bhi.n	8002e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002df8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6493      	str	r3, [r2, #72]	@ 0x48
 8002e00:	e007      	b.n	8002e12 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3b08      	subs	r3, #8
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e28:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2201      	movs	r2, #1
 8002e32:	409a      	lsls	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40020407 	.word	0x40020407
 8002e48:	4002081c 	.word	0x4002081c
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	40020880 	.word	0x40020880

08002e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a09      	ldr	r2, [pc, #36]	@ (8002e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002e78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2201      	movs	r2, #1
 8002e84:	409a      	lsls	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	1000823f 	.word	0x1000823f
 8002e9c:	40020940 	.word	0x40020940

08002ea0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eae:	e14c      	b.n	800314a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 813e 	beq.w	8003144 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d005      	beq.n	8002ee0 <HAL_GPIO_Init+0x40>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d130      	bne.n	8002f42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f16:	2201      	movs	r2, #1
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0201 	and.w	r2, r3, #1
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d017      	beq.n	8002f7e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d123      	bne.n	8002fd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	08da      	lsrs	r2, r3, #3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3208      	adds	r2, #8
 8002f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	2203      	movs	r2, #3
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 8098 	beq.w	8003144 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003014:	4a54      	ldr	r2, [pc, #336]	@ (8003168 <HAL_GPIO_Init+0x2c8>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	3302      	adds	r3, #2
 800301c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800303e:	d019      	beq.n	8003074 <HAL_GPIO_Init+0x1d4>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a4a      	ldr	r2, [pc, #296]	@ (800316c <HAL_GPIO_Init+0x2cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d013      	beq.n	8003070 <HAL_GPIO_Init+0x1d0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a49      	ldr	r2, [pc, #292]	@ (8003170 <HAL_GPIO_Init+0x2d0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_GPIO_Init+0x1cc>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a48      	ldr	r2, [pc, #288]	@ (8003174 <HAL_GPIO_Init+0x2d4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <HAL_GPIO_Init+0x1c8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a47      	ldr	r2, [pc, #284]	@ (8003178 <HAL_GPIO_Init+0x2d8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_GPIO_Init+0x1c4>
 8003060:	2304      	movs	r3, #4
 8003062:	e008      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003064:	2307      	movs	r3, #7
 8003066:	e006      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003068:	2303      	movs	r3, #3
 800306a:	e004      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 800306c:	2302      	movs	r3, #2
 800306e:	e002      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <HAL_GPIO_Init+0x1d6>
 8003074:	2300      	movs	r3, #0
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	f002 0203 	and.w	r2, r2, #3
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	4093      	lsls	r3, r2
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003086:	4938      	ldr	r1, [pc, #224]	@ (8003168 <HAL_GPIO_Init+0x2c8>)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003094:	4b39      	ldr	r3, [pc, #228]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030b8:	4a30      	ldr	r2, [pc, #192]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030be:	4b2f      	ldr	r3, [pc, #188]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4013      	ands	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030e2:	4a26      	ldr	r2, [pc, #152]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030e8:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 80030ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800310e:	4a1b      	ldr	r2, [pc, #108]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003116:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 8003118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	43db      	mvns	r3, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800313c:	4a0f      	ldr	r2, [pc, #60]	@ (800317c <HAL_GPIO_Init+0x2dc>)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	3301      	adds	r3, #1
 8003148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f aeab 	bne.w	8002eb0 <HAL_GPIO_Init+0x10>
  }
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	371c      	adds	r7, #28
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40010000 	.word	0x40010000
 800316c:	48000400 	.word	0x48000400
 8003170:	48000800 	.word	0x48000800
 8003174:	48000c00 	.word	0x48000c00
 8003178:	48001000 	.word	0x48001000
 800317c:	58000800 	.word	0x58000800

08003180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003190:	787b      	ldrb	r3, [r7, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	43d9      	mvns	r1, r3
 80031ce:	887b      	ldrh	r3, [r7, #2]
 80031d0:	400b      	ands	r3, r1
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	619a      	str	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08d      	b.n	8003312 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd82 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e006      	b.n	800326c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800326a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d108      	bne.n	8003286 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	e007      	b.n	8003296 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	d138      	bne.n	80033a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800333a:	2302      	movs	r3, #2
 800333c:	e032      	b.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2224      	movs	r2, #36	@ 0x24
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800336c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e000      	b.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
  }
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	d139      	bne.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e033      	b.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2224      	movs	r2, #36	@ 0x24
 80033e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003402:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	021b      	lsls	r3, r3, #8
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e0c0      	b.n	80035dc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00d f8ba 	bl	80105e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2203      	movs	r2, #3
 8003478:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fd28 	bl	8007ed6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e03e      	b.n	800350a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	440b      	add	r3, r1
 800349a:	3311      	adds	r3, #17
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	3310      	adds	r3, #16
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	440b      	add	r3, r1
 80034c2:	3313      	adds	r3, #19
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3320      	adds	r3, #32
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	3324      	adds	r3, #36	@ 0x24
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	3301      	adds	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	791b      	ldrb	r3, [r3, #4]
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	429a      	cmp	r2, r3
 8003512:	d3bb      	bcc.n	800348c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e044      	b.n	80035a4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003542:	7bfa      	ldrb	r2, [r7, #15]
 8003544:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003588:	7bfa      	ldrb	r2, [r7, #15]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	3301      	adds	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	791b      	ldrb	r3, [r3, #4]
 80035a8:	7bfa      	ldrb	r2, [r7, #15]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d3b5      	bcc.n	800351a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035ba:	f004 fca7 	bl	8007f0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7a9b      	ldrb	r3, [r3, #10]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d102      	bne.n	80035da <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f001 fc40 	bl	8004e5a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_PCD_Start+0x16>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e012      	b.n	8003620 <HAL_PCD_Start+0x3c>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f004 fc4e 	bl	8007ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f006 ff0e 	bl	800a432 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f006 ff13 	bl	800a460 <USB_ReadInterrupts>
 800363a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fb04 	bl	8003c54 <PCD_EP_ISR_Handler>

    return;
 800364c:	e110      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003660:	b29a      	uxth	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800366a:	b292      	uxth	r2, r2
 800366c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f00d f846 	bl	8010702 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003676:	2100      	movs	r1, #0
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8fc 	bl	8003876 <HAL_PCD_SetAddress>

    return;
 800367e:	e0f7      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800369c:	b292      	uxth	r2, r2
 800369e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036a2:	e0e5      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00c      	beq.n	80036c8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c0:	b292      	uxth	r2, r2
 80036c2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036c6:	e0d3      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d034      	beq.n	800373c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0204 	bic.w	r2, r2, #4
 80036e4:	b292      	uxth	r2, r2
 80036e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0208 	bic.w	r2, r2, #8
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003714:	2100      	movs	r1, #0
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f00d f9e8 	bl	8010aec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f00d f829 	bl	8010774 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003734:	b292      	uxth	r2, r2
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800373a:	e099      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003742:	2b00      	cmp	r3, #0
 8003744:	d027      	beq.n	8003796 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800374e:	b29a      	uxth	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0208 	orr.w	r2, r2, #8
 8003758:	b292      	uxth	r2, r2
 800375a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003766:	b29a      	uxth	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003770:	b292      	uxth	r2, r2
 8003772:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0204 	orr.w	r2, r2, #4
 8003788:	b292      	uxth	r2, r2
 800378a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f00c ffd6 	bl	8010740 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003794:	e06c      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d040      	beq.n	8003822 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b2:	b292      	uxth	r2, r2
 80037b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d12b      	bne.n	800381a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0204 	orr.w	r2, r2, #4
 80037d4:	b292      	uxth	r2, r2
 80037d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0208 	orr.w	r2, r2, #8
 80037ec:	b292      	uxth	r2, r2
 80037ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003802:	b29b      	uxth	r3, r3
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003810:	2101      	movs	r1, #1
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f00d f96a 	bl	8010aec <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003818:	e02a      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f00c ff90 	bl	8010740 <HAL_PCD_SuspendCallback>
    return;
 8003820:	e026      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00f      	beq.n	800384c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800383e:	b292      	uxth	r2, r2
 8003840:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f00c ff4e 	bl	80106e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800384a:	e011      	b.n	8003870 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003868:	b292      	uxth	r2, r2
 800386a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800386e:	bf00      	nop
  }
}
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_PCD_SetAddress+0x1a>
 800388c:	2302      	movs	r3, #2
 800388e:	e012      	b.n	80038b6 <HAL_PCD_SetAddress+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f006 fdaf 	bl	800a40a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	4608      	mov	r0, r1
 80038c8:	4611      	mov	r1, r2
 80038ca:	461a      	mov	r2, r3
 80038cc:	4603      	mov	r3, r0
 80038ce:	70fb      	strb	r3, [r7, #3]
 80038d0:	460b      	mov	r3, r1
 80038d2:	803b      	strh	r3, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	da0e      	bge.n	8003902 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	3310      	adds	r3, #16
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	705a      	strb	r2, [r3, #1]
 8003900:	e00e      	b.n	8003920 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	f003 0207 	and.w	r2, r3, #7
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4413      	add	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	b2da      	uxtb	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800392c:	883a      	ldrh	r2, [r7, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	78ba      	ldrb	r2, [r7, #2]
 8003936:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003938:	78bb      	ldrb	r3, [r7, #2]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d102      	bne.n	8003944 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_PCD_EP_Open+0x94>
 800394e:	2302      	movs	r3, #2
 8003950:	e00e      	b.n	8003970 <HAL_PCD_EP_Open+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	4618      	mov	r0, r3
 8003962:	f004 faf1 	bl	8007f48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800396e:	7afb      	ldrb	r3, [r7, #11]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003988:	2b00      	cmp	r3, #0
 800398a:	da0e      	bge.n	80039aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	f003 0207 	and.w	r2, r3, #7
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	3310      	adds	r3, #16
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	705a      	strb	r2, [r3, #1]
 80039a8:	e00e      	b.n	80039c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 0207 	and.w	r2, r3, #7
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_PCD_EP_Close+0x6a>
 80039de:	2302      	movs	r3, #2
 80039e0:	e00e      	b.n	8003a00 <HAL_PCD_EP_Close+0x88>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68f9      	ldr	r1, [r7, #12]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 fe6d 	bl	80086d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	460b      	mov	r3, r1
 8003a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	7afb      	ldrb	r3, [r7, #11]
 8003a1a:	f003 0207 	and.w	r2, r3, #7
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2200      	movs	r2, #0
 8003a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a48:	7afb      	ldrb	r3, [r7, #11]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6979      	ldr	r1, [r7, #20]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f005 f825 	bl	8008aaa <USB_EPStartXfer>

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 0207 	and.w	r2, r3, #7
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	440b      	add	r3, r1
 8003a88:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003a8c:	681b      	ldr	r3, [r3, #0]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aaa:	7afb      	ldrb	r3, [r7, #11]
 8003aac:	f003 0207 	and.w	r2, r3, #7
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3310      	adds	r3, #16
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 ffd6 	bl	8008aaa <USB_EPStartXfer>

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	7912      	ldrb	r2, [r2, #4]
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e03e      	b.n	8003ba4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	da0e      	bge.n	8003b4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0207 	and.w	r2, r3, #7
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	705a      	strb	r2, [r3, #1]
 8003b4a:	e00c      	b.n	8003b66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_PCD_EP_SetStall+0x7e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e00e      	b.n	8003ba4 <HAL_PCD_EP_SetStall+0x9c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f006 fb39 	bl	800a20c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	7912      	ldrb	r2, [r2, #4]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e040      	b.n	8003c4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da0e      	bge.n	8003bf0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 0207 	and.w	r2, r3, #7
 8003bd8:	4613      	mov	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	3310      	adds	r3, #16
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	4413      	add	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	705a      	strb	r2, [r3, #1]
 8003bee:	e00e      	b.n	8003c0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 0207 	and.w	r2, r3, #7
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_PCD_EP_ClrStall+0x82>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e00e      	b.n	8003c4c <HAL_PCD_EP_ClrStall+0xa0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68f9      	ldr	r1, [r7, #12]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f006 fb36 	bl	800a2ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b096      	sub	sp, #88	@ 0x58
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c5c:	e3ad      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c66:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003c78:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 816f 	bne.w	8003f60 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d14c      	bne.n	8003d28 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c9e:	81fb      	strh	r3, [r7, #14]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4413      	add	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	441a      	add	r2, r3
 8003cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f00c fcde 	bl	80106b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	7b1b      	ldrb	r3, [r3, #12]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 835c 	beq.w	80043ba <PCD_EP_ISR_Handler+0x766>
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 8357 	bne.w	80043ba <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7b1b      	ldrb	r3, [r3, #12]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	731a      	strb	r2, [r3, #12]
 8003d26:	e348      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d2e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d032      	beq.n	8003dac <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d6c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	f006 fbbf 	bl	800a504 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d92:	4013      	ands	r3, r2
 8003d94:	823b      	strh	r3, [r7, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	8a3a      	ldrh	r2, [r7, #16]
 8003d9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003da0:	b292      	uxth	r2, r2
 8003da2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f00c fc57 	bl	8010658 <HAL_PCD_SetupStageCallback>
 8003daa:	e306      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f280 8302 	bge.w	80043ba <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	83fb      	strh	r3, [r7, #30]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	8bfa      	ldrh	r2, [r7, #30]
 8003dcc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4413      	add	r3, r2
 8003dee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d019      	beq.n	8003e38 <PCD_EP_ISR_Handler+0x1e4>
 8003e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d015      	beq.n	8003e38 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	6959      	ldr	r1, [r3, #20]
 8003e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e16:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f006 fb71 	bl	800a504 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	441a      	add	r2, r3
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e2e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e30:	2100      	movs	r1, #0
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f00c fc22 	bl	801067c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 82b5 	bne.w	80043ba <PCD_EP_ISR_Handler+0x766>
 8003e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e54:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e5c:	f000 82ad 	beq.w	80043ba <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e96:	d91d      	bls.n	8003ed4 <PCD_EP_ISR_Handler+0x280>
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f003 031f 	and.w	r3, r3, #31
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <PCD_EP_ISR_Handler+0x25e>
 8003eac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	029b      	lsls	r3, r3, #10
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e026      	b.n	8003f22 <PCD_EP_ISR_Handler+0x2ce>
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <PCD_EP_ISR_Handler+0x29e>
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	801a      	strh	r2, [r3, #0]
 8003ef0:	e017      	b.n	8003f22 <PCD_EP_ISR_Handler+0x2ce>
 8003ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	085b      	lsrs	r3, r3, #1
 8003ef8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <PCD_EP_ISR_Handler+0x2b8>
 8003f06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f08:	3301      	adds	r3, #1
 8003f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	827b      	strh	r3, [r7, #18]
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f3a:	827b      	strh	r3, [r7, #18]
 8003f3c:	8a7b      	ldrh	r3, [r7, #18]
 8003f3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f42:	827b      	strh	r3, [r7, #18]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	8a7b      	ldrh	r3, [r7, #18]
 8003f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	8013      	strh	r3, [r2, #0]
 8003f5e:	e22c      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f280 80f6 	bge.w	800416a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f94:	4013      	ands	r3, r2
 8003f96:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003fac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fb0:	b292      	uxth	r2, r2
 8003fb2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003fb4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fcc:	7b1b      	ldrb	r3, [r3, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d123      	bne.n	800401a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ff6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808e 	beq.w	8004120 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6818      	ldr	r0, [r3, #0]
 8004008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400a:	6959      	ldr	r1, [r3, #20]
 800400c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400e:	88da      	ldrh	r2, [r3, #6]
 8004010:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004014:	f006 fa76 	bl	800a504 <USB_ReadPMA>
 8004018:	e082      	b.n	8004120 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800401a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401c:	78db      	ldrb	r3, [r3, #3]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d10a      	bne.n	8004038 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004022:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004026:	461a      	mov	r2, r3
 8004028:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9d3 	bl	80043d6 <HAL_PCD_EP_DB_Receive>
 8004030:	4603      	mov	r3, r0
 8004032:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004036:	e073      	b.n	8004120 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004052:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004068:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004074:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004078:	b29b      	uxth	r3, r3
 800407a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d022      	beq.n	80040dc <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	4413      	add	r3, r2
 80040b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80040be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d02c      	beq.n	8004120 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	6959      	ldr	r1, [r3, #20]
 80040ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d0:	891a      	ldrh	r2, [r3, #8]
 80040d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040d6:	f006 fa15 	bl	800a504 <USB_ReadPMA>
 80040da:	e021      	b.n	8004120 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	461a      	mov	r2, r3
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	4413      	add	r3, r2
 80040f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004100:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004104:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004112:	6959      	ldr	r1, [r3, #20]
 8004114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004116:	895a      	ldrh	r2, [r3, #10]
 8004118:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800411c:	f006 f9f2 	bl	800a504 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004128:	441a      	add	r2, r3
 800412a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800412e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004136:	441a      	add	r2, r3
 8004138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800413c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <PCD_EP_ISR_Handler+0x4fc>
 8004144:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	429a      	cmp	r2, r3
 800414e:	d206      	bcs.n	800415e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f00c fa90 	bl	801067c <HAL_PCD_DataOutStageCallback>
 800415c:	e005      	b.n	800416a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004164:	4618      	mov	r0, r3
 8004166:	f004 fca0 	bl	8008aaa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800416a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800416e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8121 	beq.w	80043ba <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004178:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	3310      	adds	r3, #16
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4413      	add	r3, r2
 800418a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	441a      	add	r2, r3
 80041b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80041bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	78db      	ldrb	r3, [r3, #3]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	f040 80a2 	bne.w	8004316 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	2200      	movs	r2, #0
 80041d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80041d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041da:	7b1b      	ldrb	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8093 	beq.w	8004308 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80041e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d046      	beq.n	800427c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d126      	bne.n	8004244 <PCD_EP_ISR_Handler+0x5f0>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004204:	b29b      	uxth	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	4413      	add	r3, r2
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
 800420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	00da      	lsls	r2, r3, #3
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	4413      	add	r3, r2
 8004218:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004228:	b29a      	uxth	r2, r3
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800423c:	b29a      	uxth	r2, r3
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	801a      	strh	r2, [r3, #0]
 8004242:	e061      	b.n	8004308 <PCD_EP_ISR_Handler+0x6b4>
 8004244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004246:	785b      	ldrb	r3, [r3, #1]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d15d      	bne.n	8004308 <PCD_EP_ISR_Handler+0x6b4>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	4413      	add	r3, r2
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	00da      	lsls	r2, r3, #3
 800426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426c:	4413      	add	r3, r2
 800426e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	2200      	movs	r2, #0
 8004278:	801a      	strh	r2, [r3, #0]
 800427a:	e045      	b.n	8004308 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d126      	bne.n	80042d8 <PCD_EP_ISR_Handler+0x684>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	4413      	add	r3, r2
 80042a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	00da      	lsls	r2, r3, #3
 80042a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042aa:	4413      	add	r3, r2
 80042ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80042b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e017      	b.n	8004308 <PCD_EP_ISR_Handler+0x6b4>
 80042d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d113      	bne.n	8004308 <PCD_EP_ISR_Handler+0x6b4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ee:	4413      	add	r3, r2
 80042f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	00da      	lsls	r2, r3, #3
 80042f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fa:	4413      	add	r3, r2
 80042fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004300:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004304:	2200      	movs	r2, #0
 8004306:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f00c f9cf 	bl	80106b2 <HAL_PCD_DataInStageCallback>
 8004314:	e051      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004316:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d144      	bne.n	80043ac <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4413      	add	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	4413      	add	r3, r2
 800433c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004346:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004352:	429a      	cmp	r2, r3
 8004354:	d907      	bls.n	8004366 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	699a      	ldr	r2, [r3, #24]
 800435a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004362:	619a      	str	r2, [r3, #24]
 8004364:	e002      	b.n	800436c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f00c f999 	bl	80106b2 <HAL_PCD_DataInStageCallback>
 8004380:	e01b      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800438a:	441a      	add	r2, r3
 800438c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800438e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004398:	441a      	add	r2, r3
 800439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fb80 	bl	8008aaa <USB_EPStartXfer>
 80043aa:	e006      	b.n	80043ba <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80043ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043b0:	461a      	mov	r2, r3
 80043b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f917 	bl	80045e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f6ff ac49 	blt.w	8003c5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3758      	adds	r7, #88	@ 0x58
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b088      	sub	sp, #32
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	4613      	mov	r3, r2
 80043e2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d07c      	beq.n	80044e8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4413      	add	r3, r2
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	4413      	add	r3, r2
 8004408:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004412:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	8b7b      	ldrh	r3, [r7, #26]
 800441a:	429a      	cmp	r2, r3
 800441c:	d306      	bcc.n	800442c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	1ad2      	subs	r2, r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	619a      	str	r2, [r3, #24]
 800442a:	e002      	b.n	8004432 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d123      	bne.n	8004482 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004454:	833b      	strh	r3, [r7, #24]
 8004456:	8b3b      	ldrh	r3, [r7, #24]
 8004458:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800445c:	833b      	strh	r3, [r7, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8b3b      	ldrh	r3, [r7, #24]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01f      	beq.n	80044cc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a6:	82fb      	strh	r3, [r7, #22]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	8afb      	ldrh	r3, [r7, #22]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80044cc:	8b7b      	ldrh	r3, [r7, #26]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8085 	beq.w	80045de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6959      	ldr	r1, [r3, #20]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	891a      	ldrh	r2, [r3, #8]
 80044e0:	8b7b      	ldrh	r3, [r7, #26]
 80044e2:	f006 f80f 	bl	800a504 <USB_ReadPMA>
 80044e6:	e07a      	b.n	80045de <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4413      	add	r3, r2
 8004502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	8b7b      	ldrh	r3, [r7, #26]
 8004514:	429a      	cmp	r2, r3
 8004516:	d306      	bcc.n	8004526 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	8b7b      	ldrh	r3, [r7, #26]
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	619a      	str	r2, [r3, #24]
 8004524:	e002      	b.n	800452c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d123      	bne.n	800457c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454e:	83fb      	strh	r3, [r7, #30]
 8004550:	8bfb      	ldrh	r3, [r7, #30]
 8004552:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004556:	83fb      	strh	r3, [r7, #30]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	8bfb      	ldrh	r3, [r7, #30]
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004570:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d11f      	bne.n	80045c6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800459c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a0:	83bb      	strh	r3, [r7, #28]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8bbb      	ldrh	r3, [r7, #28]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80045c6:	8b7b      	ldrh	r3, [r7, #26]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d008      	beq.n	80045de <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6959      	ldr	r1, [r3, #20]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	895a      	ldrh	r2, [r3, #10]
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	f005 ff93 	bl	800a504 <USB_ReadPMA>
    }
  }

  return count;
 80045de:	8b7b      	ldrh	r3, [r7, #26]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b0a4      	sub	sp, #144	@ 0x90
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 81db 	beq.w	80049b8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800460a:	b29b      	uxth	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4413      	add	r3, r2
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	4413      	add	r3, r2
 800461c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004626:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004632:	429a      	cmp	r2, r3
 8004634:	d907      	bls.n	8004646 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	619a      	str	r2, [r3, #24]
 8004644:	e002      	b.n	800464c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 80b9 	bne.w	80047c8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d126      	bne.n	80046ac <HAL_PCD_EP_DB_Transmit+0xc4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004672:	4413      	add	r3, r2
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	00da      	lsls	r2, r3, #3
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	4413      	add	r3, r2
 8004680:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004690:	b29a      	uxth	r2, r3
 8004692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	801a      	strh	r2, [r3, #0]
 80046aa:	e01a      	b.n	80046e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d116      	bne.n	80046e2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	4413      	add	r3, r2
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	00da      	lsls	r2, r3, #3
 80046d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d126      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0x156>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	00da      	lsls	r2, r3, #3
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004722:	b29a      	uxth	r2, r3
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e017      	b.n	800476e <HAL_PCD_EP_DB_Transmit+0x186>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d113      	bne.n	800476e <HAL_PCD_EP_DB_Transmit+0x186>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474e:	b29b      	uxth	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	4413      	add	r3, r2
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	00da      	lsls	r2, r3, #3
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	4413      	add	r3, r2
 8004762:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004766:	623b      	str	r3, [r7, #32]
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2200      	movs	r2, #0
 800476c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f00b ff9c 	bl	80106b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 82fa 	beq.w	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800479c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a0:	82fb      	strh	r3, [r7, #22]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	8afb      	ldrh	r3, [r7, #22]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]
 80047c6:	e2d8      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d021      	beq.n	8004816 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800480e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004812:	b29b      	uxth	r3, r3
 8004814:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800481c:	2b01      	cmp	r3, #1
 800481e:	f040 82ac 	bne.w	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800482a:	441a      	add	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004838:	441a      	add	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6a1a      	ldr	r2, [r3, #32]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d30b      	bcc.n	8004862 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	621a      	str	r2, [r3, #32]
 8004860:	e017      	b.n	8004892 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d108      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800486a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800486e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800487a:	e00a      	b.n	8004892 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	785b      	ldrb	r3, [r3, #1]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d165      	bne.n	8004966 <HAL_PCD_EP_DB_Transmit+0x37e>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ae:	4413      	add	r3, r2
 80048b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ba:	4413      	add	r3, r2
 80048bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80048c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80048c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80048d8:	d91d      	bls.n	8004916 <HAL_PCD_EP_DB_Transmit+0x32e>
 80048da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <HAL_PCD_EP_DB_Transmit+0x30c>
 80048ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f0:	3b01      	subs	r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	b29b      	uxth	r3, r3
 8004902:	4313      	orrs	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800490a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800490e:	b29a      	uxth	r2, r3
 8004910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004912:	801a      	strh	r2, [r3, #0]
 8004914:	e044      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <HAL_PCD_EP_DB_Transmit+0x34c>
 800491e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492c:	b29a      	uxth	r2, r3
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	801a      	strh	r2, [r3, #0]
 8004932:	e035      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800493c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <HAL_PCD_EP_DB_Transmit+0x366>
 8004948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494a:	3301      	adds	r3, #1
 800494c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004956:	b29b      	uxth	r3, r3
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	b29b      	uxth	r3, r3
 800495c:	4313      	orrs	r3, r2
 800495e:	b29a      	uxth	r2, r3
 8004960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	e01c      	b.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d118      	bne.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	647b      	str	r3, [r7, #68]	@ 0x44
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800497c:	b29b      	uxth	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004982:	4413      	add	r3, r2
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	00da      	lsls	r2, r3, #3
 800498c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498e:	4413      	add	r3, r2
 8004990:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004994:	643b      	str	r3, [r7, #64]	@ 0x40
 8004996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800499a:	b29a      	uxth	r2, r3
 800499c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6959      	ldr	r1, [r3, #20]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	891a      	ldrh	r2, [r3, #8]
 80049ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f005 fd65 	bl	800a480 <USB_WritePMA>
 80049b6:	e1e0      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4413      	add	r3, r2
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	4413      	add	r3, r2
 80049d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049dc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d307      	bcc.n	80049fc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80049f4:	1ad2      	subs	r2, r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	619a      	str	r2, [r3, #24]
 80049fa:	e002      	b.n	8004a02 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 80c0 	bne.w	8004b8c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d126      	bne.n	8004a62 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a28:	4413      	add	r3, r2
 8004a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	00da      	lsls	r2, r3, #3
 8004a32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a34:	4413      	add	r3, r2
 8004a36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a4a:	801a      	strh	r2, [r3, #0]
 8004a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e01a      	b.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d116      	bne.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a7e:	4413      	add	r3, r2
 8004a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	00da      	lsls	r2, r3, #3
 8004a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a94:	2200      	movs	r2, #0
 8004a96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d12b      	bne.n	8004afe <HAL_PCD_EP_DB_Transmit+0x516>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aba:	4413      	add	r3, r2
 8004abc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	00da      	lsls	r2, r3, #3
 8004ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	e017      	b.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x546>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d113      	bne.n	8004b2e <HAL_PCD_EP_DB_Transmit+0x546>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	461a      	mov	r2, r3
 8004b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b14:	4413      	add	r3, r2
 8004b16:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	00da      	lsls	r2, r3, #3
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b20:	4413      	add	r3, r2
 8004b22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f00b fdbc 	bl	80106b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f040 811a 	bne.w	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b60:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
 8004b8a:	e0f6      	b.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d121      	bne.n	8004bda <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	f040 80ca 	bne.w	8004d7a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bee:	441a      	add	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bfc:	441a      	add	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6a1a      	ldr	r2, [r3, #32]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d30b      	bcc.n	8004c26 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c1e:	1ad2      	subs	r2, r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	621a      	str	r2, [r3, #32]
 8004c24:	e017      	b.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004c2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c3e:	e00a      	b.n	8004c56 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d165      	bne.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x748>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c78:	4413      	add	r3, r2
 8004c7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	00da      	lsls	r2, r3, #3
 8004c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c84:	4413      	add	r3, r2
 8004c86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ca2:	d91d      	bls.n	8004ce0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	029b      	lsls	r3, r3, #10
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e041      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_PCD_EP_DB_Transmit+0x716>
 8004ce8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cfa:	801a      	strh	r2, [r3, #0]
 8004cfc:	e032      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_PCD_EP_DB_Transmit+0x730>
 8004d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d14:	3301      	adds	r3, #1
 8004d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	029b      	lsls	r3, r3, #10
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	e019      	b.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	785b      	ldrb	r3, [r3, #1]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d115      	bne.n	8004d64 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	461a      	mov	r2, r3
 8004d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d46:	4413      	add	r3, r2
 8004d48:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	00da      	lsls	r2, r3, #3
 8004d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d52:	4413      	add	r3, r2
 8004d54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004d58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d62:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	6959      	ldr	r1, [r3, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	895a      	ldrh	r2, [r3, #10]
 8004d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f005 fb83 	bl	800a480 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d94:	82bb      	strh	r3, [r7, #20]
 8004d96:	8abb      	ldrh	r3, [r7, #20]
 8004d98:	f083 0310 	eor.w	r3, r3, #16
 8004d9c:	82bb      	strh	r3, [r7, #20]
 8004d9e:	8abb      	ldrh	r3, [r7, #20]
 8004da0:	f083 0320 	eor.w	r3, r3, #32
 8004da4:	82bb      	strh	r3, [r7, #20]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	441a      	add	r2, r3
 8004db4:	8abb      	ldrh	r3, [r7, #20]
 8004db6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3790      	adds	r7, #144	@ 0x90
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	817b      	strh	r3, [r7, #10]
 8004de2:	4613      	mov	r3, r2
 8004de4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	897b      	ldrh	r3, [r7, #10]
 8004df4:	f003 0207 	and.w	r2, r3, #7
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3310      	adds	r3, #16
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e009      	b.n	8004e1e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e0a:	897a      	ldrh	r2, [r7, #10]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e1e:	893b      	ldrh	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	80da      	strh	r2, [r3, #6]
 8004e32:	e00b      	b.n	8004e4c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2201      	movs	r2, #1
 8004e38:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f043 0302 	orr.w	r3, r3, #2
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb4:	4b05      	ldr	r3, [pc, #20]	@ (8004ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a04      	ldr	r2, [pc, #16]	@ (8004ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	58000400 	.word	0x58000400

08004ed0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	58000400 	.word	0x58000400

08004eec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	@ (8004f08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a04      	ldr	r2, [pc, #16]	@ (8004f08 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004efa:	6053      	str	r3, [r2, #4]
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	58000400 	.word	0x58000400

08004f0c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f1e:	d101      	bne.n	8004f24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f42:	6013      	str	r3, [r2, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7e:	d101      	bne.n	8004f84 <LL_RCC_HSE_IsReady+0x18>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <LL_RCC_HSE_IsReady+0x1a>
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa2:	6013      	str	r3, [r2, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc0:	6013      	str	r3, [r2, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fde:	d101      	bne.n	8004fe4 <LL_RCC_HSI_IsReady+0x18>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_RCC_HSI_IsReady+0x1a>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
}
 800500e:	bf00      	nop
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005026:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005044:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800504c:	f023 0301 	bic.w	r3, r3, #1
 8005050:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005066:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d101      	bne.n	8005076 <LL_RCC_HSI48_IsReady+0x18>
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <LL_RCC_HSI48_IsReady+0x1a>
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800508e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005092:	f043 0301 	orr.w	r3, r3, #1
 8005096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800509a:	bf00      	nop
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80050c6:	b480      	push	{r7}
 80050c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050d6:	f043 0304 	orr.w	r3, r3, #4
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005100:	bf00      	nop
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800510a:	b480      	push	{r7}
 800510c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d101      	bne.n	8005122 <LL_RCC_LSE_IsReady+0x18>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <LL_RCC_LSE_IsReady+0x1a>
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005146:	bf00      	nop
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800515c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d101      	bne.n	800518a <LL_RCC_LSI1_IsReady+0x18>
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <LL_RCC_LSI1_IsReady+0x1a>
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d101      	bne.n	80051f2 <LL_RCC_LSI2_IsReady+0x18>
 80051ee:	2301      	movs	r3, #1
 80051f0:	e000      	b.n	80051f4 <LL_RCC_LSI2_IsReady+0x1a>
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6013      	str	r3, [r2, #0]
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d101      	bne.n	800527e <LL_RCC_MSI_IsReady+0x16>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <LL_RCC_MSI_IsReady+0x18>
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800529c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80052b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052c2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80052c8:	d901      	bls.n	80052ce <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80052ca:	23b0      	movs	r3, #176	@ 0xb0
 80052cc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80052ce:	687b      	ldr	r3, [r7, #4]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80052e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	021b      	lsls	r3, r3, #8
 80052f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f023 0203 	bic.w	r2, r3, #3
 8005318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4313      	orrs	r3, r2
 8005320:	608b      	str	r3, [r1, #8]
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 030c 	and.w	r3, r3, #12
}
 800533c:	4618      	mov	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005358:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800537e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005382:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80053a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053aa:	f023 020f 	bic.w	r2, r3, #15
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80053d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	608b      	str	r3, [r1, #8]
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80053f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005402:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4313      	orrs	r3, r2
 800540a:	608b      	str	r3, [r1, #8]
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005438:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800544a:	b480      	push	{r7}
 800544c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800544e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005452:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005466:	b480      	push	{r7}
 8005468:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800546a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800547e:	b480      	push	{r7}
 8005480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a8:	6013      	str	r3, [r2, #0]
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054e4:	d101      	bne.n	80054ea <LL_RCC_PLL_IsReady+0x18>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <LL_RCC_PLL_IsReady+0x1a>
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	0a1b      	lsrs	r3, r3, #8
 8005502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005506:	4618      	mov	r0, r3
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800551e:	4618      	mov	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800552c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005536:	4618      	mov	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005540:	b480      	push	{r7}
 8005542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0303 	and.w	r3, r3, #3
}
 800554e:	4618      	mov	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800556a:	d101      	bne.n	8005570 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800556c:	2301      	movs	r3, #1
 800556e:	e000      	b.n	8005572 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005584:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005590:	d101      	bne.n	8005596 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80055ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b6:	d101      	bne.n	80055bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055da:	d101      	bne.n	80055e0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80055f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055fe:	d101      	bne.n	8005604 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b08d      	sub	sp, #52	@ 0x34
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e363      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 808d 	beq.w	800574a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005630:	f7ff fe7d 	bl	800532e <LL_RCC_GetSysClkSource>
 8005634:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005636:	f7ff ff83 	bl	8005540 <LL_RCC_PLL_GetMainSource>
 800563a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800563c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_RCC_OscConfig+0x3e>
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	2b0c      	cmp	r3, #12
 8005646:	d147      	bne.n	80056d8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564a:	2b01      	cmp	r3, #1
 800564c:	d144      	bne.n	80056d8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e347      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800565e:	f7ff fe28 	bl	80052b2 <LL_RCC_MSI_GetRange>
 8005662:	4603      	mov	r3, r0
 8005664:	429c      	cmp	r4, r3
 8005666:	d914      	bls.n	8005692 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fd61 	bl	8006134 <RCC_SetFlashLatencyFromMSIRange>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e336      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff fe02 	bl	800528a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fe26 	bl	80052dc <LL_RCC_MSI_SetCalibTrimming>
 8005690:	e013      	b.n	80056ba <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fdf7 	bl	800528a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fe1b 	bl	80052dc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fd42 	bl	8006134 <RCC_SetFlashLatencyFromMSIRange>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e317      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056ba:	f000 fcc9 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 80056be:	4603      	mov	r3, r0
 80056c0:	4aa4      	ldr	r2, [pc, #656]	@ (8005954 <HAL_RCC_OscConfig+0x344>)
 80056c2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056c4:	4ba4      	ldr	r3, [pc, #656]	@ (8005958 <HAL_RCC_OscConfig+0x348>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fb fbe3 	bl	8000e94 <HAL_InitTick>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d039      	beq.n	8005748 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e308      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01e      	beq.n	800571e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056e0:	f7ff fda4 	bl	800522c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056e4:	f7fb fdd4 	bl	8001290 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056ec:	f7fb fdd0 	bl	8001290 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e2f5      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80056fe:	f7ff fdb3 	bl	8005268 <LL_RCC_MSI_IsReady>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f1      	beq.n	80056ec <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fdbc 	bl	800528a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fde0 	bl	80052dc <LL_RCC_MSI_SetCalibTrimming>
 800571c:	e015      	b.n	800574a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800571e:	f7ff fd94 	bl	800524a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005722:	f7fb fdb5 	bl	8001290 <HAL_GetTick>
 8005726:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800572a:	f7fb fdb1 	bl	8001290 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e2d6      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800573c:	f7ff fd94 	bl	8005268 <LL_RCC_MSI_IsReady>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1f1      	bne.n	800572a <HAL_RCC_OscConfig+0x11a>
 8005746:	e000      	b.n	800574a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005748:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d047      	beq.n	80057e6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005756:	f7ff fdea 	bl	800532e <LL_RCC_GetSysClkSource>
 800575a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800575c:	f7ff fef0 	bl	8005540 <LL_RCC_PLL_GetMainSource>
 8005760:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d005      	beq.n	8005774 <HAL_RCC_OscConfig+0x164>
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	2b0c      	cmp	r3, #12
 800576c:	d108      	bne.n	8005780 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d105      	bne.n	8005780 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d134      	bne.n	80057e6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e2b4      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005788:	d102      	bne.n	8005790 <HAL_RCC_OscConfig+0x180>
 800578a:	f7ff fbd1 	bl	8004f30 <LL_RCC_HSE_Enable>
 800578e:	e001      	b.n	8005794 <HAL_RCC_OscConfig+0x184>
 8005790:	f7ff fbdd 	bl	8004f4e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d012      	beq.n	80057c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fb fd78 	bl	8001290 <HAL_GetTick>
 80057a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a4:	f7fb fd74 	bl	8001290 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b64      	cmp	r3, #100	@ 0x64
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e299      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80057b6:	f7ff fbd9 	bl	8004f6c <LL_RCC_HSE_IsReady>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f1      	beq.n	80057a4 <HAL_RCC_OscConfig+0x194>
 80057c0:	e011      	b.n	80057e6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fb fd65 	bl	8001290 <HAL_GetTick>
 80057c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057ca:	f7fb fd61 	bl	8001290 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b64      	cmp	r3, #100	@ 0x64
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e286      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80057dc:	f7ff fbc6 	bl	8004f6c <LL_RCC_HSE_IsReady>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1f1      	bne.n	80057ca <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d04c      	beq.n	800588c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f2:	f7ff fd9c 	bl	800532e <LL_RCC_GetSysClkSource>
 80057f6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057f8:	f7ff fea2 	bl	8005540 <LL_RCC_PLL_GetMainSource>
 80057fc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	2b04      	cmp	r3, #4
 8005802:	d005      	beq.n	8005810 <HAL_RCC_OscConfig+0x200>
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	2b0c      	cmp	r3, #12
 8005808:	d10e      	bne.n	8005828 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d10b      	bne.n	8005828 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e266      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fbe5 	bl	8004ff0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005826:	e031      	b.n	800588c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d019      	beq.n	8005864 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	f7ff fbae 	bl	8004f90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fb fd2c 	bl	8001290 <HAL_GetTick>
 8005838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800583a:	e008      	b.n	800584e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583c:	f7fb fd28 	bl	8001290 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e24d      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800584e:	f7ff fbbd 	bl	8004fcc <LL_RCC_HSI_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f1      	beq.n	800583c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fbc7 	bl	8004ff0 <LL_RCC_HSI_SetCalibTrimming>
 8005862:	e013      	b.n	800588c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005864:	f7ff fba3 	bl	8004fae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fb fd12 	bl	8001290 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005870:	f7fb fd0e 	bl	8001290 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e233      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005882:	f7ff fba3 	bl	8004fcc <LL_RCC_HSI_IsReady>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f1      	bne.n	8005870 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b00      	cmp	r3, #0
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a3 	beq.w	80059ec <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d076      	beq.n	800599c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d046      	beq.n	8005948 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80058ba:	f7ff fc5a 	bl	8005172 <LL_RCC_LSI1_IsReady>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d113      	bne.n	80058ec <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80058c4:	f7ff fc33 	bl	800512e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058c8:	f7fb fce2 	bl	8001290 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058d0:	f7fb fcde 	bl	8001290 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e203      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80058e2:	f7ff fc46 	bl	8005172 <LL_RCC_LSI1_IsReady>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f1      	beq.n	80058d0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80058ec:	f7ff fc53 	bl	8005196 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fb fcce 	bl	8001290 <HAL_GetTick>
 80058f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80058f8:	f7fb fcca 	bl	8001290 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b03      	cmp	r3, #3
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e1ef      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800590a:	f7ff fc66 	bl	80051da <LL_RCC_LSI2_IsReady>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f1      	beq.n	80058f8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	4618      	mov	r0, r3
 800591a:	f7ff fc70 	bl	80051fe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800591e:	f7ff fc17 	bl	8005150 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005922:	f7fb fcb5 	bl	8001290 <HAL_GetTick>
 8005926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005928:	e008      	b.n	800593c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800592a:	f7fb fcb1 	bl	8001290 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d901      	bls.n	800593c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e1d6      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800593c:	f7ff fc19 	bl	8005172 <LL_RCC_LSI1_IsReady>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <HAL_RCC_OscConfig+0x31a>
 8005946:	e051      	b.n	80059ec <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005948:	f7ff fbf1 	bl	800512e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fb fca0 	bl	8001290 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005952:	e00c      	b.n	800596e <HAL_RCC_OscConfig+0x35e>
 8005954:	20000010 	.word	0x20000010
 8005958:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800595c:	f7fb fc98 	bl	8001290 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1bd      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800596e:	f7ff fc00 	bl	8005172 <LL_RCC_LSI1_IsReady>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f1      	beq.n	800595c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005978:	f7ff fc1e 	bl	80051b8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800597e:	f7fb fc87 	bl	8001290 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b03      	cmp	r3, #3
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e1ac      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005990:	f7ff fc23 	bl	80051da <LL_RCC_LSI2_IsReady>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f1      	bne.n	800597e <HAL_RCC_OscConfig+0x36e>
 800599a:	e027      	b.n	80059ec <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800599c:	f7ff fc0c 	bl	80051b8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a0:	f7fb fc76 	bl	8001290 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80059a8:	f7fb fc72 	bl	8001290 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e197      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80059ba:	f7ff fc0e 	bl	80051da <LL_RCC_LSI2_IsReady>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f1      	bne.n	80059a8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80059c4:	f7ff fbc4 	bl	8005150 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fb fc62 	bl	8001290 <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80059d0:	f7fb fc5e 	bl	8001290 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e183      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80059e2:	f7ff fbc6 	bl	8005172 <LL_RCC_LSI1_IsReady>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f1      	bne.n	80059d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d05b      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059f8:	4ba7      	ldr	r3, [pc, #668]	@ (8005c98 <HAL_RCC_OscConfig+0x688>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d114      	bne.n	8005a2e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a04:	f7ff fa54 	bl	8004eb0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a08:	f7fb fc42 	bl	8001290 <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a10:	f7fb fc3e 	bl	8001290 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e163      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a22:	4b9d      	ldr	r3, [pc, #628]	@ (8005c98 <HAL_RCC_OscConfig+0x688>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d102      	bne.n	8005a3c <HAL_RCC_OscConfig+0x42c>
 8005a36:	f7ff fb24 	bl	8005082 <LL_RCC_LSE_Enable>
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCC_OscConfig+0x446>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d104      	bne.n	8005a4e <HAL_RCC_OscConfig+0x43e>
 8005a44:	f7ff fb3f 	bl	80050c6 <LL_RCC_LSE_EnableBypass>
 8005a48:	f7ff fb1b 	bl	8005082 <LL_RCC_LSE_Enable>
 8005a4c:	e003      	b.n	8005a56 <HAL_RCC_OscConfig+0x446>
 8005a4e:	f7ff fb29 	bl	80050a4 <LL_RCC_LSE_Disable>
 8005a52:	f7ff fb49 	bl	80050e8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d014      	beq.n	8005a88 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a5e:	f7fb fc17 	bl	8001290 <HAL_GetTick>
 8005a62:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a66:	f7fb fc13 	bl	8001290 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e136      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a7c:	f7ff fb45 	bl	800510a <LL_RCC_LSE_IsReady>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0ef      	beq.n	8005a66 <HAL_RCC_OscConfig+0x456>
 8005a86:	e013      	b.n	8005ab0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a88:	f7fb fc02 	bl	8001290 <HAL_GetTick>
 8005a8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a90:	f7fb fbfe 	bl	8001290 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e121      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005aa6:	f7ff fb30 	bl	800510a <LL_RCC_LSE_IsReady>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1ef      	bne.n	8005a90 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02c      	beq.n	8005b16 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d014      	beq.n	8005aee <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ac4:	f7ff faa9 	bl	800501a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac8:	f7fb fbe2 	bl	8001290 <HAL_GetTick>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ad0:	f7fb fbde 	bl	8001290 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e103      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005ae2:	f7ff fabc 	bl	800505e <LL_RCC_HSI48_IsReady>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f1      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4c0>
 8005aec:	e013      	b.n	8005b16 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aee:	f7ff faa5 	bl	800503c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af2:	f7fb fbcd 	bl	8001290 <HAL_GetTick>
 8005af6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005af8:	e008      	b.n	8005b0c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005afa:	f7fb fbc9 	bl	8001290 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e0ee      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b0c:	f7ff faa7 	bl	800505e <LL_RCC_HSI48_IsReady>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f1      	bne.n	8005afa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 80e4 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b20:	f7ff fc05 	bl	800532e <LL_RCC_GetSysClkSource>
 8005b24:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	f040 80b4 	bne.w	8005ca0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f003 0203 	and.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d123      	bne.n	8005b8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d11c      	bne.n	8005b8e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	0a1b      	lsrs	r3, r3, #8
 8005b58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d114      	bne.n	8005b8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d10d      	bne.n	8005b8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d05d      	beq.n	8005c4a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d058      	beq.n	8005c46 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e0a1      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ba6:	f7ff fc85 	bl	80054b4 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005baa:	f7fb fb71 	bl	8001290 <HAL_GetTick>
 8005bae:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fb fb6d 	bl	8001290 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e092      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1ef      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b30      	ldr	r3, [pc, #192]	@ (8005c9c <HAL_RCC_OscConfig+0x68c>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005be4:	4311      	orrs	r1, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bea:	0212      	lsls	r2, r2, #8
 8005bec:	4311      	orrs	r1, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005bf2:	4311      	orrs	r1, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005bf8:	4311      	orrs	r1, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c08:	f7ff fc45 	bl	8005496 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c1c:	f7fb fb38 	bl	8001290 <HAL_GetTick>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fb fb34 	bl	8001290 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e059      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ef      	beq.n	8005c24 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c44:	e050      	b.n	8005ce8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e04f      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d147      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c58:	f7ff fc1d 	bl	8005496 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c6c:	f7fb fb10 	bl	8001290 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fb fb0c 	bl	8001290 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e031      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0ef      	beq.n	8005c74 <HAL_RCC_OscConfig+0x664>
 8005c94:	e028      	b.n	8005ce8 <HAL_RCC_OscConfig+0x6d8>
 8005c96:	bf00      	nop
 8005c98:	58000400 	.word	0x58000400
 8005c9c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b0c      	cmp	r3, #12
 8005ca4:	d01e      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca6:	f7ff fc05 	bl	80054b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005caa:	f7fb faf1 	bl	8001290 <HAL_GetTick>
 8005cae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb0:	e008      	b.n	8005cc4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cb2:	f7fb faed 	bl	8001290 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e012      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1ef      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <HAL_RCC_OscConfig+0x6e4>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60cb      	str	r3, [r1, #12]
 8005ce2:	e001      	b.n	8005ce8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e000      	b.n	8005cea <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3734      	adds	r7, #52	@ 0x34
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd90      	pop	{r4, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	eefefffc 	.word	0xeefefffc

08005cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e12d      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b98      	ldr	r3, [pc, #608]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d91b      	bls.n	8005d52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b95      	ldr	r3, [pc, #596]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 0207 	bic.w	r2, r3, #7
 8005d22:	4993      	ldr	r1, [pc, #588]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d2a:	f7fb fab1 	bl	8001290 <HAL_GetTick>
 8005d2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d32:	f7fb faad 	bl	8001290 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e111      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d44:	4b8a      	ldr	r3, [pc, #552]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d1ef      	bne.n	8005d32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d016      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff faef 	bl	8005346 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d68:	f7fb fa92 	bl	8001290 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d70:	f7fb fa8e 	bl	8001290 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e0f2      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005d82:	f7ff fbe9 	bl	8005558 <LL_RCC_IsActiveFlag_HPRE>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f1      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d016      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fae6 	bl	800536e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005da2:	f7fb fa75 	bl	8001290 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005daa:	f7fb fa71 	bl	8001290 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e0d5      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005dbc:	f7ff fbde 	bl	800557c <LL_RCC_IsActiveFlag_C2HPRE>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f1      	beq.n	8005daa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fadf 	bl	800539a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ddc:	f7fb fa58 	bl	8001290 <HAL_GetTick>
 8005de0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005de4:	f7fb fa54 	bl	8001290 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0b8      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005df6:	f7ff fbd4 	bl	80055a2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f1      	beq.n	8005de4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d016      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff fad9 	bl	80053c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e16:	f7fb fa3b 	bl	8001290 <HAL_GetTick>
 8005e1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e1e:	f7fb fa37 	bl	8001290 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e09b      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e30:	f7ff fbca 	bl	80055c8 <LL_RCC_IsActiveFlag_PPRE1>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f1      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d017      	beq.n	8005e76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff facf 	bl	80053f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e52:	f7fb fa1d 	bl	8001290 <HAL_GetTick>
 8005e56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e58:	e008      	b.n	8005e6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e5a:	f7fb fa19 	bl	8001290 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e07d      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e6c:	f7ff fbbe 	bl	80055ec <LL_RCC_IsActiveFlag_PPRE2>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f1      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d043      	beq.n	8005f0a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005e8a:	f7ff f86f 	bl	8004f6c <LL_RCC_HSE_IsReady>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d11e      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e067      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d106      	bne.n	8005eae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ea0:	f7ff fb17 	bl	80054d2 <LL_RCC_PLL_IsReady>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d113      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e05c      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005eb6:	f7ff f9d7 	bl	8005268 <LL_RCC_MSI_IsReady>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d108      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e051      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ec4:	f7ff f882 	bl	8004fcc <LL_RCC_HSI_IsReady>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e04a      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fa15 	bl	8005306 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005edc:	f7fb f9d8 	bl	8001290 <HAL_GetTick>
 8005ee0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee2:	e00a      	b.n	8005efa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee4:	f7fb f9d4 	bl	8001290 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e036      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efa:	f7ff fa18 	bl	800532e <LL_RCC_GetSysClkSource>
 8005efe:	4602      	mov	r2, r0
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d1ec      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f0a:	4b19      	ldr	r3, [pc, #100]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d21b      	bcs.n	8005f50 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f18:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f023 0207 	bic.w	r2, r3, #7
 8005f20:	4913      	ldr	r1, [pc, #76]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f28:	f7fb f9b2 	bl	8001290 <HAL_GetTick>
 8005f2c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f30:	f7fb f9ae 	bl	8001290 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e012      	b.n	8005f68 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f42:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_RCC_ClockConfig+0x278>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d1ef      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f50:	f000 f87e 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4a07      	ldr	r2, [pc, #28]	@ (8005f74 <HAL_RCC_ClockConfig+0x27c>)
 8005f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005f5a:	f7fb f9a5 	bl	80012a8 <HAL_GetTickPrio>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fa ff97 	bl	8000e94 <HAL_InitTick>
 8005f66:	4603      	mov	r3, r0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	58004000 	.word	0x58004000
 8005f74:	20000010 	.word	0x20000010

08005f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f7e:	f7ff f9d6 	bl	800532e <LL_RCC_GetSysClkSource>
 8005f82:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10a      	bne.n	8005fa0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f8a:	f7ff f992 	bl	80052b2 <LL_RCC_MSI_GetRange>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	091b      	lsrs	r3, r3, #4
 8005f92:	f003 030f 	and.w	r3, r3, #15
 8005f96:	4a2b      	ldr	r2, [pc, #172]	@ (8006044 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e04b      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d102      	bne.n	8005fac <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fa6:	4b28      	ldr	r3, [pc, #160]	@ (8006048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e045      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d10a      	bne.n	8005fc8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fb2:	f7fe ffab 	bl	8004f0c <LL_RCC_HSE_IsEnabledDiv2>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d102      	bne.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005fbc:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e03a      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005fc2:	4b22      	ldr	r3, [pc, #136]	@ (800604c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e037      	b.n	8006038 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005fc8:	f7ff faba 	bl	8005540 <LL_RCC_PLL_GetMainSource>
 8005fcc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d003      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x64>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x6a>
 8005fda:	e00d      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8006048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fde:	60bb      	str	r3, [r7, #8]
        break;
 8005fe0:	e015      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fe2:	f7fe ff93 	bl	8004f0c <LL_RCC_HSE_IsEnabledDiv2>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005fec:	4b16      	ldr	r3, [pc, #88]	@ (8006048 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fee:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005ff0:	e00d      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005ff2:	4b16      	ldr	r3, [pc, #88]	@ (800604c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ff4:	60bb      	str	r3, [r7, #8]
        break;
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ff8:	f7ff f95b 	bl	80052b2 <LL_RCC_MSI_GetRange>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	4a0f      	ldr	r2, [pc, #60]	@ (8006044 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	60bb      	str	r3, [r7, #8]
        break;
 800600c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800600e:	f7ff fa72 	bl	80054f6 <LL_RCC_PLL_GetN>
 8006012:	4602      	mov	r2, r0
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	fb03 f402 	mul.w	r4, r3, r2
 800601a:	f7ff fa85 	bl	8005528 <LL_RCC_PLL_GetDivider>
 800601e:	4603      	mov	r3, r0
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	3301      	adds	r3, #1
 8006024:	fbb4 f4f3 	udiv	r4, r4, r3
 8006028:	f7ff fa72 	bl	8005510 <LL_RCC_PLL_GetR>
 800602c:	4603      	mov	r3, r0
 800602e:	0f5b      	lsrs	r3, r3, #29
 8006030:	3301      	adds	r3, #1
 8006032:	fbb4 f3f3 	udiv	r3, r4, r3
 8006036:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006038:	68fb      	ldr	r3, [r7, #12]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	bd90      	pop	{r4, r7, pc}
 8006042:	bf00      	nop
 8006044:	08011d38 	.word	0x08011d38
 8006048:	00f42400 	.word	0x00f42400
 800604c:	01e84800 	.word	0x01e84800

08006050 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006050:	b598      	push	{r3, r4, r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006054:	f7ff ff90 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 8006058:	4604      	mov	r4, r0
 800605a:	f7ff f9dd 	bl	8005418 <LL_RCC_GetAHBPrescaler>
 800605e:	4603      	mov	r3, r0
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 030f 	and.w	r3, r3, #15
 8006066:	4a03      	ldr	r2, [pc, #12]	@ (8006074 <HAL_RCC_GetHCLKFreq+0x24>)
 8006068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800606c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd98      	pop	{r3, r4, r7, pc}
 8006074:	08011cd8 	.word	0x08011cd8

08006078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006078:	b598      	push	{r3, r4, r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800607c:	f7ff ffe8 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 8006080:	4604      	mov	r4, r0
 8006082:	f7ff f9f0 	bl	8005466 <LL_RCC_GetAPB1Prescaler>
 8006086:	4603      	mov	r3, r0
 8006088:	0a1b      	lsrs	r3, r3, #8
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	fa24 f303 	lsr.w	r3, r4, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd98      	pop	{r3, r4, r7, pc}
 80060a0:	08011d18 	.word	0x08011d18

080060a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a4:	b598      	push	{r3, r4, r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80060a8:	f7ff ffd2 	bl	8006050 <HAL_RCC_GetHCLKFreq>
 80060ac:	4604      	mov	r4, r0
 80060ae:	f7ff f9e6 	bl	800547e <LL_RCC_GetAPB2Prescaler>
 80060b2:	4603      	mov	r3, r0
 80060b4:	0adb      	lsrs	r3, r3, #11
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	4a04      	ldr	r2, [pc, #16]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80060bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd98      	pop	{r3, r4, r7, pc}
 80060cc:	08011d18 	.word	0x08011d18

080060d0 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 |
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	226f      	movs	r2, #111	@ 0x6f
 80060de:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 80060e0:	f7ff f925 	bl	800532e <LL_RCC_GetSysClkSource>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 80060ea:	f7ff f995 	bl	8005418 <LL_RCC_GetAHBPrescaler>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 80060f4:	f7ff f9b7 	bl	8005466 <LL_RCC_GetAPB1Prescaler>
 80060f8:	4602      	mov	r2, r0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 80060fe:	f7ff f9be 	bl	800547e <LL_RCC_GetAPB2Prescaler>
 8006102:	4602      	mov	r2, r0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 8006108:	f7ff f992 	bl	8005430 <LL_C2_RCC_GetAHBPrescaler>
 800610c:	4602      	mov	r2, r0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 8006112:	f7ff f99a 	bl	800544a <LL_RCC_GetAHB4Prescaler>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800611c:	4b04      	ldr	r3, [pc, #16]	@ (8006130 <HAL_RCC_GetClockConfig+0x60>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0207 	and.w	r2, r3, #7
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	601a      	str	r2, [r3, #0]
}
 8006128:	bf00      	nop
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	58004000 	.word	0x58004000

08006134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006140:	d903      	bls.n	800614a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006142:	4b15      	ldr	r3, [pc, #84]	@ (8006198 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e007      	b.n	800615a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006158:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800615a:	f7ff f976 	bl	800544a <LL_RCC_GetAHB4Prescaler>
 800615e:	4603      	mov	r3, r0
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	4a0d      	ldr	r2, [pc, #52]	@ (800619c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006172:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	4a0a      	ldr	r2, [pc, #40]	@ (80061a0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	0c9c      	lsrs	r4, r3, #18
 800617e:	f7fe fea7 	bl	8004ed0 <HAL_PWREx_GetVoltageRange>
 8006182:	4603      	mov	r3, r0
 8006184:	4619      	mov	r1, r3
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f80c 	bl	80061a4 <RCC_SetFlashLatency>
 800618c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	08011d38 	.word	0x08011d38
 800619c:	08011cd8 	.word	0x08011cd8
 80061a0:	431bde83 	.word	0x431bde83

080061a4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b093      	sub	sp, #76	@ 0x4c
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80061ae:	4b37      	ldr	r3, [pc, #220]	@ (800628c <RCC_SetFlashLatency+0xe8>)
 80061b0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80061b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80061ba:	4a35      	ldr	r2, [pc, #212]	@ (8006290 <RCC_SetFlashLatency+0xec>)
 80061bc:	f107 031c 	add.w	r3, r7, #28
 80061c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80061c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80061c6:	4b33      	ldr	r3, [pc, #204]	@ (8006294 <RCC_SetFlashLatency+0xf0>)
 80061c8:	f107 040c 	add.w	r4, r7, #12
 80061cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80061d2:	2300      	movs	r3, #0
 80061d4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061dc:	d11a      	bne.n	8006214 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061de:	2300      	movs	r3, #0
 80061e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e2:	e013      	b.n	800620c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80061e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	3348      	adds	r3, #72	@ 0x48
 80061ea:	443b      	add	r3, r7
 80061ec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d807      	bhi.n	8006206 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80061f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3348      	adds	r3, #72	@ 0x48
 80061fc:	443b      	add	r3, r7
 80061fe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006202:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006204:	e020      	b.n	8006248 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006208:	3301      	adds	r3, #1
 800620a:	643b      	str	r3, [r7, #64]	@ 0x40
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	2b03      	cmp	r3, #3
 8006210:	d9e8      	bls.n	80061e4 <RCC_SetFlashLatency+0x40>
 8006212:	e019      	b.n	8006248 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006214:	2300      	movs	r3, #0
 8006216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006218:	e013      	b.n	8006242 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800621a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	3348      	adds	r3, #72	@ 0x48
 8006220:	443b      	add	r3, r7
 8006222:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d807      	bhi.n	800623c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800622c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	3348      	adds	r3, #72	@ 0x48
 8006232:	443b      	add	r3, r7
 8006234:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006238:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800623a:	e005      	b.n	8006248 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800623c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623e:	3301      	adds	r3, #1
 8006240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006244:	2b02      	cmp	r3, #2
 8006246:	d9e8      	bls.n	800621a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006248:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <RCC_SetFlashLatency+0xf4>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 0207 	bic.w	r2, r3, #7
 8006250:	4911      	ldr	r1, [pc, #68]	@ (8006298 <RCC_SetFlashLatency+0xf4>)
 8006252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006254:	4313      	orrs	r3, r2
 8006256:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006258:	f7fb f81a 	bl	8001290 <HAL_GetTick>
 800625c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800625e:	e008      	b.n	8006272 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006260:	f7fb f816 	bl	8001290 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e007      	b.n	8006282 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <RCC_SetFlashLatency+0xf4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800627c:	429a      	cmp	r2, r3
 800627e:	d1ef      	bne.n	8006260 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	374c      	adds	r7, #76	@ 0x4c
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}
 800628a:	bf00      	nop
 800628c:	08011bc8 	.word	0x08011bc8
 8006290:	08011bd8 	.word	0x08011bd8
 8006294:	08011be4 	.word	0x08011be4
 8006298:	58004000 	.word	0x58004000

0800629c <LL_RCC_LSE_IsEnabled>:
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a8:	f003 0301 	and.w	r3, r3, #1
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <LL_RCC_LSE_IsEnabled+0x18>
 80062b0:	2301      	movs	r3, #1
 80062b2:	e000      	b.n	80062b6 <LL_RCC_LSE_IsEnabled+0x1a>
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <LL_RCC_LSE_IsReady>:
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d101      	bne.n	80062d8 <LL_RCC_LSE_IsReady+0x18>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <LL_RCC_LSE_IsReady+0x1a>
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LL_RCC_SetRFWKPClockSource>:
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LL_RCC_SetSMPSClockSource>:
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	f023 0203 	bic.w	r2, r3, #3
 8006322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4313      	orrs	r3, r2
 800632a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <LL_RCC_SetSMPSPrescaler>:
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800634a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4313      	orrs	r3, r2
 8006352:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <LL_RCC_SetUSARTClockSource>:
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800636c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006370:	f023 0203 	bic.w	r2, r3, #3
 8006374:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <LL_RCC_SetLPUARTClockSource>:
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800639c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <LL_RCC_SetI2CClockSource>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	091b      	lsrs	r3, r3, #4
 80063cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80063d0:	43db      	mvns	r3, r3
 80063d2:	401a      	ands	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	011b      	lsls	r3, r3, #4
 80063d8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80063dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <LL_RCC_SetLPTIMClockSource>:
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	041b      	lsls	r3, r3, #16
 8006408:	43db      	mvns	r3, r3
 800640a:	401a      	ands	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	041b      	lsls	r3, r3, #16
 8006410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006414:	4313      	orrs	r3, r2
 8006416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <LL_RCC_SetSAIClockSource>:
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800642e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800643a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4313      	orrs	r3, r2
 8006442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_RCC_SetRNGClockSource>:
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800645a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006462:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <LL_RCC_SetCLK48ClockSource>:
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4313      	orrs	r3, r2
 800649a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <LL_RCC_SetUSBClockSource>:
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b082      	sub	sp, #8
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff ffe3 	bl	800647e <LL_RCC_SetCLK48ClockSource>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <LL_RCC_SetADCClockSource>:
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80064c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80064d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_RCC_SetRTCClockSource>:
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80064f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4313      	orrs	r3, r2
 8006508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <LL_RCC_GetRTCClockSource>:
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <LL_RCC_ForceBackupDomainReset>:
{
 8006532:	b480      	push	{r7}
 8006534:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800654a:	bf00      	nop
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800656c:	bf00      	nop
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <LL_RCC_PLLSAI1_Enable>:
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006584:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006588:	6013      	str	r3, [r2, #0]
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_RCC_PLLSAI1_Disable>:
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80065a6:	6013      	str	r3, [r2, #0]
}
 80065a8:	bf00      	nop
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_RCC_PLLSAI1_IsReady>:
{
 80065b2:	b480      	push	{r7}
 80065b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c4:	d101      	bne.n	80065ca <LL_RCC_PLLSAI1_IsReady+0x18>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b088      	sub	sp, #32
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80065de:	2300      	movs	r3, #0
 80065e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80065e2:	2300      	movs	r3, #0
 80065e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d034      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80065fa:	d021      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80065fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006600:	d81b      	bhi.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006602:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006606:	d01d      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006608:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800660c:	d815      	bhi.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006616:	d110      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006626:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006628:	e00d      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3304      	adds	r3, #4
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f947 	bl	80068c2 <RCCEx_PLLSAI1_ConfigNP>
 8006634:	4603      	mov	r3, r0
 8006636:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006638:	e005      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	77fb      	strb	r3, [r7, #31]
        break;
 800663e:	e002      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006640:	bf00      	nop
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006646:	7ffb      	ldrb	r3, [r7, #31]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fee8 	bl	8006426 <LL_RCC_SetSAIClockSource>
 8006656:	e001      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	7ffb      	ldrb	r3, [r7, #31]
 800665a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006664:	2b00      	cmp	r3, #0
 8006666:	d046      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006668:	f7ff ff56 	bl	8006518 <LL_RCC_GetRTCClockSource>
 800666c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	d03c      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006678:	f7fe fc1a 	bl	8004eb0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d105      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff ff30 	bl	80064ec <LL_RCC_SetRTCClockSource>
 800668c:	e02e      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800668e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006696:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006698:	f7ff ff4b 	bl	8006532 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800669c:	f7ff ff5a 	bl	8006554 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80066ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80066b8:	f7ff fdf0 	bl	800629c <LL_RCC_LSE_IsEnabled>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d114      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066c2:	f7fa fde5 	bl	8001290 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80066c8:	e00b      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ca:	f7fa fde1 	bl	8001290 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d8:	4293      	cmp	r3, r2
 80066da:	d902      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	77fb      	strb	r3, [r7, #31]
              break;
 80066e0:	e004      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80066e2:	f7ff fded 	bl	80062c0 <LL_RCC_LSE_IsReady>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d1ee      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80066ec:	7ffb      	ldrb	r3, [r7, #31]
 80066ee:	77bb      	strb	r3, [r7, #30]
 80066f0:	e001      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	7ffb      	ldrb	r3, [r7, #31]
 80066f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d004      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fe2a 	bl	8006360 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4618      	mov	r0, r3
 800671e:	f7ff fe35 	bl	800638c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d004      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fe5d 	bl	80063f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff fe52 	bl	80063f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fe2a 	bl	80063b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0308 	and.w	r3, r3, #8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fe1f 	bl	80063b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006782:	2b00      	cmp	r3, #0
 8006784:	d022      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fe8d 	bl	80064aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006794:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006798:	d107      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800679a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067b2:	d10b      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 f8dd 	bl	8006978 <RCCEx_PLLSAI1_ConfigNQ>
 80067be:	4603      	mov	r3, r0
 80067c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80067c2:	7ffb      	ldrb	r3, [r7, #31]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80067c8:	7ffb      	ldrb	r3, [r7, #31]
 80067ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d02b      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e0:	d008      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ea:	d003      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fe2a 	bl	8006452 <LL_RCC_SetRNGClockSource>
 80067fe:	e00a      	b.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	2000      	movs	r0, #0
 800680c:	f7ff fe21 	bl	8006452 <LL_RCC_SetRNGClockSource>
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fe34 	bl	800647e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800681e:	d107      	bne.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800682a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800682e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d022      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff fe3d 	bl	80064c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800684a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800684e:	d107      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800685a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800685e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006868:	d10b      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f8dd 	bl	8006a2e <RCCEx_PLLSAI1_ConfigNR>
 8006874:	4603      	mov	r3, r0
 8006876:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006878:	7ffb      	ldrb	r3, [r7, #31]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800687e:	7ffb      	ldrb	r3, [r7, #31]
 8006880:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fd26 	bl	80062e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d009      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fd45 	bl	8006338 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7ff fd2c 	bl	8006310 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80068b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80068ce:	f7ff fe61 	bl	8006594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068d2:	f7fa fcdd 	bl	8001290 <HAL_GetTick>
 80068d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068d8:	e009      	b.n	80068ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068da:	f7fa fcd9 	bl	8001290 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d902      	bls.n	80068ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	73fb      	strb	r3, [r7, #15]
      break;
 80068ec:	e004      	b.n	80068f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068ee:	f7ff fe60 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f0      	bne.n	80068da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d137      	bne.n	800696e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80068fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006928:	4313      	orrs	r3, r2
 800692a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800692c:	f7ff fe23 	bl	8006576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006930:	f7fa fcae 	bl	8001290 <HAL_GetTick>
 8006934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006936:	e009      	b.n	800694c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006938:	f7fa fcaa 	bl	8001290 <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d902      	bls.n	800694c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	73fb      	strb	r3, [r7, #15]
        break;
 800694a:	e004      	b.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800694c:	f7ff fe31 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 8006950:	4603      	mov	r3, r0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d1f0      	bne.n	8006938 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006956:	7bfb      	ldrb	r3, [r7, #15]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800695c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006984:	f7ff fe06 	bl	8006594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006988:	f7fa fc82 	bl	8001290 <HAL_GetTick>
 800698c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800698e:	e009      	b.n	80069a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006990:	f7fa fc7e 	bl	8001290 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d902      	bls.n	80069a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	73fb      	strb	r3, [r7, #15]
      break;
 80069a2:	e004      	b.n	80069ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80069a4:	f7ff fe05 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d137      	bne.n	8006a24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c8:	4313      	orrs	r3, r2
 80069ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80069cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069de:	4313      	orrs	r3, r2
 80069e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80069e2:	f7ff fdc8 	bl	8006576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e6:	f7fa fc53 	bl	8001290 <HAL_GetTick>
 80069ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069ec:	e009      	b.n	8006a02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069ee:	f7fa fc4f 	bl	8001290 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d902      	bls.n	8006a02 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	73fb      	strb	r3, [r7, #15]
        break;
 8006a00:	e004      	b.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a02:	f7ff fdd6 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d1f0      	bne.n	80069ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a3a:	f7ff fdab 	bl	8006594 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a3e:	f7fa fc27 	bl	8001290 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a44:	e009      	b.n	8006a5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a46:	f7fa fc23 	bl	8001290 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d902      	bls.n	8006a5a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e004      	b.n	8006a64 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a5a:	f7ff fdaa 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d137      	bne.n	8006ada <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a94:	4313      	orrs	r3, r2
 8006a96:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a98:	f7ff fd6d 	bl	8006576 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a9c:	f7fa fbf8 	bl	8001290 <HAL_GetTick>
 8006aa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006aa2:	e009      	b.n	8006ab8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006aa4:	f7fa fbf4 	bl	8001290 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d902      	bls.n	8006ab8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ab6:	e004      	b.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ab8:	f7ff fd7b 	bl	80065b2 <LL_RCC_PLLSAI1_IsReady>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d1f0      	bne.n	8006aa4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006acc:	691a      	ldr	r2, [r3, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e049      	b.n	8006b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fa f94a 	bl	8000da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 fa7c 	bl	8007020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d001      	beq.n	8006bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e036      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a17      	ldr	r2, [pc, #92]	@ (8006c28 <HAL_TIM_Base_Start_IT+0x94>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0x44>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bd6:	d115      	bne.n	8006c04 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	4b13      	ldr	r3, [pc, #76]	@ (8006c2c <HAL_TIM_Base_Start_IT+0x98>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d015      	beq.n	8006c16 <HAL_TIM_Base_Start_IT+0x82>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bf0:	d011      	beq.n	8006c16 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c02:	e008      	b.n	8006c16 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e000      	b.n	8006c18 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	00010007 	.word	0x00010007

08006c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d020      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01b      	beq.n	8006c94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f06f 0202 	mvn.w	r2, #2
 8006c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9b2 	bl	8006fe4 <HAL_TIM_IC_CaptureCallback>
 8006c80:	e005      	b.n	8006c8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f9a4 	bl	8006fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f9b5 	bl	8006ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0304 	and.w	r3, r3, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d020      	beq.n	8006ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01b      	beq.n	8006ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f06f 0204 	mvn.w	r2, #4
 8006cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f98c 	bl	8006fe4 <HAL_TIM_IC_CaptureCallback>
 8006ccc:	e005      	b.n	8006cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f97e 	bl	8006fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f98f 	bl	8006ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d020      	beq.n	8006d2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01b      	beq.n	8006d2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0208 	mvn.w	r2, #8
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2204      	movs	r2, #4
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69db      	ldr	r3, [r3, #28]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f966 	bl	8006fe4 <HAL_TIM_IC_CaptureCallback>
 8006d18:	e005      	b.n	8006d26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f958 	bl	8006fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f969 	bl	8006ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 0310 	and.w	r3, r3, #16
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d020      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f940 	bl	8006fe4 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f932 	bl	8006fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f943 	bl	8006ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d007      	beq.n	8006d9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0201 	mvn.w	r2, #1
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7f9 fe98 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d104      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00c      	beq.n	8006dca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d007      	beq.n	8006dca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 faa1 	bl	800730c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00c      	beq.n	8006dee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fa99 	bl	8007320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00c      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d007      	beq.n	8006e12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8fd 	bl	800700c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f06f 0220 	mvn.w	r2, #32
 8006e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 fa61 	bl	80072f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_ConfigClockSource+0x1c>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e0b6      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x18a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006e78:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e96:	d03e      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0xd8>
 8006e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e9c:	f200 8087 	bhi.w	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea4:	f000 8086 	beq.w	8006fb4 <HAL_TIM_ConfigClockSource+0x176>
 8006ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eac:	d87f      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006eae:	2b70      	cmp	r3, #112	@ 0x70
 8006eb0:	d01a      	beq.n	8006ee8 <HAL_TIM_ConfigClockSource+0xaa>
 8006eb2:	2b70      	cmp	r3, #112	@ 0x70
 8006eb4:	d87b      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006eb6:	2b60      	cmp	r3, #96	@ 0x60
 8006eb8:	d050      	beq.n	8006f5c <HAL_TIM_ConfigClockSource+0x11e>
 8006eba:	2b60      	cmp	r3, #96	@ 0x60
 8006ebc:	d877      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ebe:	2b50      	cmp	r3, #80	@ 0x50
 8006ec0:	d03c      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0xfe>
 8006ec2:	2b50      	cmp	r3, #80	@ 0x50
 8006ec4:	d873      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ec6:	2b40      	cmp	r3, #64	@ 0x40
 8006ec8:	d058      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0x13e>
 8006eca:	2b40      	cmp	r3, #64	@ 0x40
 8006ecc:	d86f      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ece:	2b30      	cmp	r3, #48	@ 0x30
 8006ed0:	d064      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0x15e>
 8006ed2:	2b30      	cmp	r3, #48	@ 0x30
 8006ed4:	d86b      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d060      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0x15e>
 8006eda:	2b20      	cmp	r3, #32
 8006edc:	d867      	bhi.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d05c      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0x15e>
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d05a      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0x15e>
 8006ee6:	e062      	b.n	8006fae <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ef8:	f000 f97e 	bl	80071f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]
      break;
 8006f14:	e04f      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f26:	f000 f967 	bl	80071f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f38:	609a      	str	r2, [r3, #8]
      break;
 8006f3a:	e03c      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f000 f8d9 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2150      	movs	r1, #80	@ 0x50
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f932 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f5a:	e02c      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f000 f8f8 	bl	800715e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2160      	movs	r1, #96	@ 0x60
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 f922 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f7a:	e01c      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f000 f8b9 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2140      	movs	r1, #64	@ 0x40
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 f912 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f9a:	e00c      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	f000 f909 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006fac:	e003      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb2:	e000      	b.n	8006fb6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006fb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a30      	ldr	r2, [pc, #192]	@ (80070f4 <TIM_Base_SetConfig+0xd4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_Base_SetConfig+0x20>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703e:	d108      	bne.n	8007052 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a27      	ldr	r2, [pc, #156]	@ (80070f4 <TIM_Base_SetConfig+0xd4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0x52>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0x52>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a24      	ldr	r2, [pc, #144]	@ (80070f8 <TIM_Base_SetConfig+0xd8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0x52>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a23      	ldr	r2, [pc, #140]	@ (80070fc <TIM_Base_SetConfig+0xdc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d108      	bne.n	8007084 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a12      	ldr	r2, [pc, #72]	@ (80070f4 <TIM_Base_SetConfig+0xd4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_Base_SetConfig+0xa0>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a11      	ldr	r2, [pc, #68]	@ (80070f8 <TIM_Base_SetConfig+0xd8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_Base_SetConfig+0xa0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a10      	ldr	r2, [pc, #64]	@ (80070fc <TIM_Base_SetConfig+0xdc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d103      	bne.n	80070c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d105      	bne.n	80070e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f023 0201 	bic.w	r2, r3, #1
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]
  }
}
 80070e6:	bf00      	nop
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40012c00 	.word	0x40012c00
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 030a 	bic.w	r3, r3, #10
 800713c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800715e:	b480      	push	{r7}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 0210 	bic.w	r2, r3, #16
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800719a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80071d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4313      	orrs	r3, r2
 80071e0:	f043 0307 	orr.w	r3, r3, #7
 80071e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	021a      	lsls	r2, r3, #8
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	431a      	orrs	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4313      	orrs	r3, r2
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	609a      	str	r2, [r3, #8]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800724c:	2302      	movs	r3, #2
 800724e:	e04a      	b.n	80072e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1f      	ldr	r2, [pc, #124]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007280:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a12      	ldr	r2, [pc, #72]	@ (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b8:	d10c      	bne.n	80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3714      	adds	r7, #20
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40012c00 	.word	0x40012c00

080072f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <LL_RCC_GetUSARTClockSource>:
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800733c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007340:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4013      	ands	r3, r2
}
 8007348:	4618      	mov	r0, r3
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <LL_RCC_GetLPUARTClockSource>:
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007360:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4013      	ands	r3, r2
}
 8007368:	4618      	mov	r0, r3
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e042      	b.n	800740c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7f9 fd1b 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2224      	movs	r2, #36	@ 0x24
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa50 	bl	8007864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f825 	bl	8007414 <UART_SetConfig>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e01b      	b.n	800740c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0201 	orr.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 facf 	bl	80079a8 <UART_CheckIdleState>
 800740a:	4603      	mov	r3, r0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007418:	b08c      	sub	sp, #48	@ 0x30
 800741a:	af00      	add	r7, sp, #0
 800741c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800741e:	2300      	movs	r3, #0
 8007420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	431a      	orrs	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	431a      	orrs	r2, r3
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4313      	orrs	r3, r2
 800743a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	4baf      	ldr	r3, [pc, #700]	@ (8007700 <UART_SetConfig+0x2ec>)
 8007444:	4013      	ands	r3, r2
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800744c:	430b      	orrs	r3, r1
 800744e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4aa4      	ldr	r2, [pc, #656]	@ (8007704 <UART_SetConfig+0x2f0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747c:	4313      	orrs	r3, r2
 800747e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800748a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800748e:	697a      	ldr	r2, [r7, #20]
 8007490:	6812      	ldr	r2, [r2, #0]
 8007492:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007494:	430b      	orrs	r3, r1
 8007496:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749e:	f023 010f 	bic.w	r1, r3, #15
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a95      	ldr	r2, [pc, #596]	@ (8007708 <UART_SetConfig+0x2f4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d125      	bne.n	8007504 <UART_SetConfig+0xf0>
 80074b8:	2003      	movs	r0, #3
 80074ba:	f7ff ff3b 	bl	8007334 <LL_RCC_GetUSARTClockSource>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d81b      	bhi.n	80074fc <UART_SetConfig+0xe8>
 80074c4:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <UART_SetConfig+0xb8>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080074dd 	.word	0x080074dd
 80074d0:	080074ed 	.word	0x080074ed
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	080074f5 	.word	0x080074f5
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e042      	b.n	800756a <UART_SetConfig+0x156>
 80074e4:	2302      	movs	r3, #2
 80074e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ea:	e03e      	b.n	800756a <UART_SetConfig+0x156>
 80074ec:	2304      	movs	r3, #4
 80074ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f2:	e03a      	b.n	800756a <UART_SetConfig+0x156>
 80074f4:	2308      	movs	r3, #8
 80074f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fa:	e036      	b.n	800756a <UART_SetConfig+0x156>
 80074fc:	2310      	movs	r3, #16
 80074fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007502:	e032      	b.n	800756a <UART_SetConfig+0x156>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a7e      	ldr	r2, [pc, #504]	@ (8007704 <UART_SetConfig+0x2f0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d12a      	bne.n	8007564 <UART_SetConfig+0x150>
 800750e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007512:	f7ff ff1f 	bl	8007354 <LL_RCC_GetLPUARTClockSource>
 8007516:	4603      	mov	r3, r0
 8007518:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800751c:	d01a      	beq.n	8007554 <UART_SetConfig+0x140>
 800751e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007522:	d81b      	bhi.n	800755c <UART_SetConfig+0x148>
 8007524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007528:	d00c      	beq.n	8007544 <UART_SetConfig+0x130>
 800752a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800752e:	d815      	bhi.n	800755c <UART_SetConfig+0x148>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <UART_SetConfig+0x128>
 8007534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007538:	d008      	beq.n	800754c <UART_SetConfig+0x138>
 800753a:	e00f      	b.n	800755c <UART_SetConfig+0x148>
 800753c:	2300      	movs	r3, #0
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007542:	e012      	b.n	800756a <UART_SetConfig+0x156>
 8007544:	2302      	movs	r3, #2
 8007546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754a:	e00e      	b.n	800756a <UART_SetConfig+0x156>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007552:	e00a      	b.n	800756a <UART_SetConfig+0x156>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755a:	e006      	b.n	800756a <UART_SetConfig+0x156>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007562:	e002      	b.n	800756a <UART_SetConfig+0x156>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a65      	ldr	r2, [pc, #404]	@ (8007704 <UART_SetConfig+0x2f0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	f040 8097 	bne.w	80076a4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007576:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800757a:	2b08      	cmp	r3, #8
 800757c:	d823      	bhi.n	80075c6 <UART_SetConfig+0x1b2>
 800757e:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <UART_SetConfig+0x170>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075c7 	.word	0x080075c7
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075c7 	.word	0x080075c7
 8007594:	080075b7 	.word	0x080075b7
 8007598:	080075c7 	.word	0x080075c7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075c7 	.word	0x080075c7
 80075a4:	080075bf 	.word	0x080075bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a8:	f7fe fd66 	bl	8006078 <HAL_RCC_GetPCLK1Freq>
 80075ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ae:	e010      	b.n	80075d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b0:	4b56      	ldr	r3, [pc, #344]	@ (800770c <UART_SetConfig+0x2f8>)
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b4:	e00d      	b.n	80075d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fe fcdf 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80075ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075bc:	e009      	b.n	80075d2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075c4:	e005      	b.n	80075d2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 812b 	beq.w	8007830 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	4a4c      	ldr	r2, [pc, #304]	@ (8007710 <UART_SetConfig+0x2fc>)
 80075e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d305      	bcc.n	800760a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	d903      	bls.n	8007612 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007610:	e10e      	b.n	8007830 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	2200      	movs	r2, #0
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	60fa      	str	r2, [r7, #12]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	4a3c      	ldr	r2, [pc, #240]	@ (8007710 <UART_SetConfig+0x2fc>)
 8007620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007624:	b29b      	uxth	r3, r3
 8007626:	2200      	movs	r2, #0
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007634:	f7f8 fdf4 	bl	8000220 <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	020b      	lsls	r3, r1, #8
 800764a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800764e:	0202      	lsls	r2, r0, #8
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	6849      	ldr	r1, [r1, #4]
 8007654:	0849      	lsrs	r1, r1, #1
 8007656:	2000      	movs	r0, #0
 8007658:	460c      	mov	r4, r1
 800765a:	4605      	mov	r5, r0
 800765c:	eb12 0804 	adds.w	r8, r2, r4
 8007660:	eb43 0905 	adc.w	r9, r3, r5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	469a      	mov	sl, r3
 800766c:	4693      	mov	fp, r2
 800766e:	4652      	mov	r2, sl
 8007670:	465b      	mov	r3, fp
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 fdd3 	bl	8000220 <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4613      	mov	r3, r2
 8007680:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007688:	d308      	bcc.n	800769c <UART_SetConfig+0x288>
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007690:	d204      	bcs.n	800769c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	e0c9      	b.n	8007830 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076a2:	e0c5      	b.n	8007830 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ac:	d16d      	bne.n	800778a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80076ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	3b01      	subs	r3, #1
 80076b4:	2b07      	cmp	r3, #7
 80076b6:	d82d      	bhi.n	8007714 <UART_SetConfig+0x300>
 80076b8:	a201      	add	r2, pc, #4	@ (adr r2, 80076c0 <UART_SetConfig+0x2ac>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	080076e9 	.word	0x080076e9
 80076c8:	08007715 	.word	0x08007715
 80076cc:	080076ef 	.word	0x080076ef
 80076d0:	08007715 	.word	0x08007715
 80076d4:	08007715 	.word	0x08007715
 80076d8:	08007715 	.word	0x08007715
 80076dc:	080076f7 	.word	0x080076f7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e0:	f7fe fce0 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 80076e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076e6:	e01b      	b.n	8007720 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e8:	4b08      	ldr	r3, [pc, #32]	@ (800770c <UART_SetConfig+0x2f8>)
 80076ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076ec:	e018      	b.n	8007720 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ee:	f7fe fc43 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80076f2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076f4:	e014      	b.n	8007720 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076fc:	e010      	b.n	8007720 <UART_SetConfig+0x30c>
 80076fe:	bf00      	nop
 8007700:	cfff69f3 	.word	0xcfff69f3
 8007704:	40008000 	.word	0x40008000
 8007708:	40013800 	.word	0x40013800
 800770c:	00f42400 	.word	0x00f42400
 8007710:	08011d78 	.word	0x08011d78
      default:
        pclk = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800771e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8084 	beq.w	8007830 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772c:	4a4b      	ldr	r2, [pc, #300]	@ (800785c <UART_SetConfig+0x448>)
 800772e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007732:	461a      	mov	r2, r3
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	fbb3 f3f2 	udiv	r3, r3, r2
 800773a:	005a      	lsls	r2, r3, #1
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	441a      	add	r2, r3
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	fbb2 f3f3 	udiv	r3, r2, r3
 800774c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	2b0f      	cmp	r3, #15
 8007752:	d916      	bls.n	8007782 <UART_SetConfig+0x36e>
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800775a:	d212      	bcs.n	8007782 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	b29b      	uxth	r3, r3
 8007760:	f023 030f 	bic.w	r3, r3, #15
 8007764:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	b29b      	uxth	r3, r3
 800776c:	f003 0307 	and.w	r3, r3, #7
 8007770:	b29a      	uxth	r2, r3
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	4313      	orrs	r3, r2
 8007776:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	8bfa      	ldrh	r2, [r7, #30]
 800777e:	60da      	str	r2, [r3, #12]
 8007780:	e056      	b.n	8007830 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007788:	e052      	b.n	8007830 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800778a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800778e:	3b01      	subs	r3, #1
 8007790:	2b07      	cmp	r3, #7
 8007792:	d822      	bhi.n	80077da <UART_SetConfig+0x3c6>
 8007794:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <UART_SetConfig+0x388>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077bd 	.word	0x080077bd
 80077a0:	080077c5 	.word	0x080077c5
 80077a4:	080077db 	.word	0x080077db
 80077a8:	080077cb 	.word	0x080077cb
 80077ac:	080077db 	.word	0x080077db
 80077b0:	080077db 	.word	0x080077db
 80077b4:	080077db 	.word	0x080077db
 80077b8:	080077d3 	.word	0x080077d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077bc:	f7fe fc72 	bl	80060a4 <HAL_RCC_GetPCLK2Freq>
 80077c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077c2:	e010      	b.n	80077e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c4:	4b26      	ldr	r3, [pc, #152]	@ (8007860 <UART_SetConfig+0x44c>)
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c8:	e00d      	b.n	80077e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ca:	f7fe fbd5 	bl	8005f78 <HAL_RCC_GetSysClockFreq>
 80077ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077d0:	e009      	b.n	80077e6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077d8:	e005      	b.n	80077e6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077e4:	bf00      	nop
    }

    if (pclk != 0U)
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d021      	beq.n	8007830 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f0:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <UART_SetConfig+0x448>)
 80077f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	441a      	add	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	fbb2 f3f3 	udiv	r3, r2, r3
 800780e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007810:	6a3b      	ldr	r3, [r7, #32]
 8007812:	2b0f      	cmp	r3, #15
 8007814:	d909      	bls.n	800782a <UART_SetConfig+0x416>
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800781c:	d205      	bcs.n	800782a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	b29a      	uxth	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60da      	str	r2, [r3, #12]
 8007828:	e002      	b.n	8007830 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2201      	movs	r2, #1
 8007834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	2201      	movs	r2, #1
 800783c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2200      	movs	r2, #0
 8007844:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2200      	movs	r2, #0
 800784a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800784c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007850:	4618      	mov	r0, r3
 8007852:	3730      	adds	r7, #48	@ 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800785a:	bf00      	nop
 800785c:	08011d78 	.word	0x08011d78
 8007860:	00f42400 	.word	0x00f42400

08007864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	f003 0304 	and.w	r3, r3, #4
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01a      	beq.n	800797a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007962:	d10a      	bne.n	800797a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b098      	sub	sp, #96	@ 0x60
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079b8:	f7f9 fc6a 	bl	8001290 <HAL_GetTick>
 80079bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d12f      	bne.n	8007a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f88e 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d022      	beq.n	8007a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e063      	b.n	8007af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b04      	cmp	r3, #4
 8007a38:	d149      	bne.n	8007ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a42:	2200      	movs	r2, #0
 8007a44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f857 	bl	8007afc <UART_WaitOnFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d03c      	beq.n	8007ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	623b      	str	r3, [r7, #32]
   return(result);
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e6      	bne.n	8007a54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aa6:	61fa      	str	r2, [r7, #28]
 8007aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e012      	b.n	8007af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3758      	adds	r7, #88	@ 0x58
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	603b      	str	r3, [r7, #0]
 8007b08:	4613      	mov	r3, r2
 8007b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b0c:	e04f      	b.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b14:	d04b      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b16:	f7f9 fbbb 	bl	8001290 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d302      	bcc.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e04e      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0304 	and.w	r3, r3, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d037      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b80      	cmp	r3, #128	@ 0x80
 8007b42:	d034      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b40      	cmp	r3, #64	@ 0x40
 8007b48:	d031      	beq.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d110      	bne.n	8007b7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2208      	movs	r2, #8
 8007b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f838 	bl	8007bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2208      	movs	r2, #8
 8007b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e029      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b88:	d111      	bne.n	8007bae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f000 f81e 	bl	8007bd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e00f      	b.n	8007bce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	bf0c      	ite	eq
 8007bbe:	2301      	moveq	r3, #1
 8007bc0:	2300      	movne	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d0a0      	beq.n	8007b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b095      	sub	sp, #84	@ 0x54
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	3308      	adds	r3, #8
 8007c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e3      	bne.n	8007c10 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d118      	bne.n	8007c82 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c6e:	61bb      	str	r3, [r7, #24]
 8007c70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6979      	ldr	r1, [r7, #20]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e6      	bne.n	8007c50 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c96:	bf00      	nop
 8007c98:	3754      	adds	r7, #84	@ 0x54
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e027      	b.n	8007d08 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	@ 0x24
 8007cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ce6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e02d      	b.n	8007d88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2224      	movs	r2, #36	@ 0x24
 8007d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f84f 	bl	8007e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d101      	bne.n	8007da8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e02d      	b.n	8007e04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2224      	movs	r2, #36	@ 0x24
 8007db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0201 	bic.w	r2, r2, #1
 8007dce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f811 	bl	8007e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d108      	bne.n	8007e2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e2c:	e031      	b.n	8007e92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e2e:	2308      	movs	r3, #8
 8007e30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e32:	2308      	movs	r3, #8
 8007e34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	0e5b      	lsrs	r3, r3, #25
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0f5b      	lsrs	r3, r3, #29
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0307 	and.w	r3, r3, #7
 8007e54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	7b3a      	ldrb	r2, [r7, #12]
 8007e5a:	4911      	ldr	r1, [pc, #68]	@ (8007ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e5c:	5c8a      	ldrb	r2, [r1, r2]
 8007e5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e62:	7b3a      	ldrb	r2, [r7, #12]
 8007e64:	490f      	ldr	r1, [pc, #60]	@ (8007ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	7b7a      	ldrb	r2, [r7, #13]
 8007e78:	4909      	ldr	r1, [pc, #36]	@ (8007ea0 <UARTEx_SetNbDataToProcess+0x94>)
 8007e7a:	5c8a      	ldrb	r2, [r1, r2]
 8007e7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e80:	7b7a      	ldrb	r2, [r7, #13]
 8007e82:	4908      	ldr	r1, [pc, #32]	@ (8007ea4 <UARTEx_SetNbDataToProcess+0x98>)
 8007e84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e92:	bf00      	nop
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	08011d90 	.word	0x08011d90
 8007ea4:	08011d98 	.word	0x08011d98

08007ea8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007eb8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007ebc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007ede:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007ee2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	43db      	mvns	r3, r3
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	1d3b      	adds	r3, r7, #4
 8007f16:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b09d      	sub	sp, #116	@ 0x74
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f6e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	78db      	ldrb	r3, [r3, #3]
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d81f      	bhi.n	8007fba <USB_ActivateEndpoint+0x72>
 8007f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <USB_ActivateEndpoint+0x38>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fad 	.word	0x08007fad
 8007f88:	08007fc3 	.word	0x08007fc3
 8007f8c:	08007f9f 	.word	0x08007f9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007f90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007f94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007f98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007f9c:	e012      	b.n	8007fc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007f9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fa2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007fa6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007faa:	e00b      	b.n	8007fc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007fac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007fb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8007fb8:	e004      	b.n	8007fc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8007fc0:	e000      	b.n	8007fc4 <USB_ActivateEndpoint+0x7c>
      break;
 8007fc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007fd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ffe:	b21a      	sxth	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b21b      	sxth	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b21b      	sxth	r3, r3
 800800a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800801c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802c:	b29b      	uxth	r3, r3
 800802e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	7b1b      	ldrb	r3, [r3, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	f040 8178 	bne.w	800832a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	785b      	ldrb	r3, [r3, #1]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 8084 	beq.w	800814c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	61bb      	str	r3, [r7, #24]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800804e:	b29b      	uxth	r3, r3
 8008050:	461a      	mov	r2, r3
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	4413      	add	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	00da      	lsls	r2, r3, #3
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	085b      	lsrs	r3, r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	b29a      	uxth	r2, r3
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	827b      	strh	r3, [r7, #18]
 8008086:	8a7b      	ldrh	r3, [r7, #18]
 8008088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01b      	beq.n	80080c8 <USB_ActivateEndpoint+0x180>
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080a6:	823b      	strh	r3, [r7, #16]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	441a      	add	r2, r3
 80080b2:	8a3b      	ldrh	r3, [r7, #16]
 80080b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	78db      	ldrb	r3, [r3, #3]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d020      	beq.n	8008112 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080e6:	81bb      	strh	r3, [r7, #12]
 80080e8:	89bb      	ldrh	r3, [r7, #12]
 80080ea:	f083 0320 	eor.w	r3, r3, #32
 80080ee:	81bb      	strh	r3, [r7, #12]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	441a      	add	r2, r3
 80080fa:	89bb      	ldrh	r3, [r7, #12]
 80080fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800810c:	b29b      	uxth	r3, r3
 800810e:	8013      	strh	r3, [r2, #0]
 8008110:	e2d5      	b.n	80086be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008128:	81fb      	strh	r3, [r7, #14]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	441a      	add	r2, r3
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800813a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800813e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008146:	b29b      	uxth	r3, r3
 8008148:	8013      	strh	r3, [r2, #0]
 800814a:	e2b8      	b.n	80086be <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008156:	b29b      	uxth	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	4413      	add	r3, r2
 800815e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	00da      	lsls	r2, r3, #3
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	4413      	add	r3, r2
 800816a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800816e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	88db      	ldrh	r3, [r3, #6]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008190:	4413      	add	r3, r2
 8008192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	00da      	lsls	r2, r3, #3
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	4413      	add	r3, r2
 800819e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80081ba:	d91d      	bls.n	80081f8 <USB_ActivateEndpoint+0x2b0>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 031f 	and.w	r3, r3, #31
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <USB_ActivateEndpoint+0x28e>
 80081d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081d2:	3b01      	subs	r3, #1
 80081d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	881b      	ldrh	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081de:	b29b      	uxth	r3, r3
 80081e0:	029b      	lsls	r3, r3, #10
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	801a      	strh	r2, [r3, #0]
 80081f6:	e026      	b.n	8008246 <USB_ActivateEndpoint+0x2fe>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10a      	bne.n	8008216 <USB_ActivateEndpoint+0x2ce>
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800820e:	b29a      	uxth	r2, r3
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	801a      	strh	r2, [r3, #0]
 8008214:	e017      	b.n	8008246 <USB_ActivateEndpoint+0x2fe>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	085b      	lsrs	r3, r3, #1
 800821c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <USB_ActivateEndpoint+0x2e8>
 800822a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800822c:	3301      	adds	r3, #1
 800822e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29a      	uxth	r2, r3
 8008236:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008238:	b29b      	uxth	r3, r3
 800823a:	029b      	lsls	r3, r3, #10
 800823c:	b29b      	uxth	r3, r3
 800823e:	4313      	orrs	r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008254:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d01b      	beq.n	8008296 <USB_ActivateEndpoint+0x34e>
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008270:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008274:	843b      	strh	r3, [r7, #32]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	441a      	add	r2, r3
 8008280:	8c3b      	ldrh	r3, [r7, #32]
 8008282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008286:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800828a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800828e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008292:	b29b      	uxth	r3, r3
 8008294:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d124      	bne.n	80082e8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b4:	83bb      	strh	r3, [r7, #28]
 80082b6:	8bbb      	ldrh	r3, [r7, #28]
 80082b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80082bc:	83bb      	strh	r3, [r7, #28]
 80082be:	8bbb      	ldrh	r3, [r7, #28]
 80082c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082c4:	83bb      	strh	r3, [r7, #28]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	441a      	add	r2, r3
 80082d0:	8bbb      	ldrh	r3, [r7, #28]
 80082d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8013      	strh	r3, [r2, #0]
 80082e6:	e1ea      	b.n	80086be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082fe:	83fb      	strh	r3, [r7, #30]
 8008300:	8bfb      	ldrh	r3, [r7, #30]
 8008302:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008306:	83fb      	strh	r3, [r7, #30]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	441a      	add	r2, r3
 8008312:	8bfb      	ldrh	r3, [r7, #30]
 8008314:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008318:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800831c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008324:	b29b      	uxth	r3, r3
 8008326:	8013      	strh	r3, [r2, #0]
 8008328:	e1c9      	b.n	80086be <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	78db      	ldrb	r3, [r3, #3]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d11e      	bne.n	8008370 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	881b      	ldrh	r3, [r3, #0]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008348:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	441a      	add	r2, r3
 8008356:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800835a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800835e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008362:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800836a:	b29b      	uxth	r3, r3
 800836c:	8013      	strh	r3, [r2, #0]
 800836e:	e01d      	b.n	80083ac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	441a      	add	r2, r3
 8008394:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800839c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083bc:	4413      	add	r3, r2
 80083be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	00da      	lsls	r2, r3, #3
 80083c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	891b      	ldrh	r3, [r3, #8]
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083f0:	4413      	add	r3, r2
 80083f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	00da      	lsls	r2, r3, #3
 80083fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008402:	653b      	str	r3, [r7, #80]	@ 0x50
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	895b      	ldrh	r3, [r3, #10]
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	005b      	lsls	r3, r3, #1
 800840e:	b29a      	uxth	r2, r3
 8008410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008412:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 8093 	bne.w	8008544 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800842e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01b      	beq.n	8008472 <USB_ActivateEndpoint+0x52a>
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800844c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008450:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800845e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008480:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	d01b      	beq.n	80084c2 <USB_ActivateEndpoint+0x57a>
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80084ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80084da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80084dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80084e0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80084e2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80084e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80084e8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80084f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008506:	b29b      	uxth	r3, r3
 8008508:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800851c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008520:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	441a      	add	r2, r3
 800852c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800852e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853e:	b29b      	uxth	r3, r3
 8008540:	8013      	strh	r3, [r2, #0]
 8008542:	e0bc      	b.n	80086be <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4413      	add	r3, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d01d      	beq.n	800859c <USB_ActivateEndpoint+0x654>
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29b      	uxth	r3, r3
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008576:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800858c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008590:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80085ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80085b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01d      	beq.n	80085f4 <USB_ActivateEndpoint+0x6ac>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80085e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	78db      	ldrb	r3, [r3, #3]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d024      	beq.n	8008646 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	b29b      	uxth	r3, r3
 800860a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800860e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008612:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008616:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800861a:	f083 0320 	eor.w	r3, r3, #32
 800861e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	441a      	add	r2, r3
 800862c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800863c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]
 8008644:	e01d      	b.n	8008682 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	b29b      	uxth	r3, r3
 8008654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	441a      	add	r2, r3
 800866a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800866e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008672:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800867a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800867e:	b29b      	uxth	r3, r3
 8008680:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008698:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80086be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3774      	adds	r7, #116	@ 0x74
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop

080086d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b08d      	sub	sp, #52	@ 0x34
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	7b1b      	ldrb	r3, [r3, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 808e 	bne.w	8008800 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d044      	beq.n	8008776 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	81bb      	strh	r3, [r7, #12]
 80086fa:	89bb      	ldrh	r3, [r7, #12]
 80086fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01b      	beq.n	800873c <USB_DeactivateEndpoint+0x6c>
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	881b      	ldrh	r3, [r3, #0]
 8008710:	b29b      	uxth	r3, r3
 8008712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871a:	817b      	strh	r3, [r7, #10]
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	441a      	add	r2, r3
 8008726:	897b      	ldrh	r3, [r7, #10]
 8008728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800872c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008734:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008738:	b29b      	uxth	r3, r3
 800873a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b29b      	uxth	r3, r3
 800874a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800874e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008752:	813b      	strh	r3, [r7, #8]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	441a      	add	r2, r3
 800875e:	893b      	ldrh	r3, [r7, #8]
 8008760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800876c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008770:	b29b      	uxth	r3, r3
 8008772:	8013      	strh	r3, [r2, #0]
 8008774:	e192      	b.n	8008a9c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	827b      	strh	r3, [r7, #18]
 8008784:	8a7b      	ldrh	r3, [r7, #18]
 8008786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01b      	beq.n	80087c6 <USB_DeactivateEndpoint+0xf6>
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087a4:	823b      	strh	r3, [r7, #16]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	441a      	add	r2, r3
 80087b0:	8a3b      	ldrh	r3, [r7, #16]
 80087b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087dc:	81fb      	strh	r3, [r7, #14]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	441a      	add	r2, r3
 80087e8:	89fb      	ldrh	r3, [r7, #14]
 80087ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	8013      	strh	r3, [r2, #0]
 80087fe:	e14d      	b.n	8008a9c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f040 80a5 	bne.w	8008954 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	843b      	strh	r3, [r7, #32]
 8008818:	8c3b      	ldrh	r3, [r7, #32]
 800881a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01b      	beq.n	800885a <USB_DeactivateEndpoint+0x18a>
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008838:	83fb      	strh	r3, [r7, #30]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	441a      	add	r2, r3
 8008844:	8bfb      	ldrh	r3, [r7, #30]
 8008846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800884a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800884e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008856:	b29b      	uxth	r3, r3
 8008858:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	83bb      	strh	r3, [r7, #28]
 8008868:	8bbb      	ldrh	r3, [r7, #28]
 800886a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01b      	beq.n	80088aa <USB_DeactivateEndpoint+0x1da>
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	881b      	ldrh	r3, [r3, #0]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008888:	837b      	strh	r3, [r7, #26]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	441a      	add	r2, r3
 8008894:	8b7b      	ldrh	r3, [r7, #26]
 8008896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800889a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800889e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	833b      	strh	r3, [r7, #24]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	441a      	add	r2, r3
 80088cc:	8b3b      	ldrh	r3, [r7, #24]
 80088ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80088de:	b29b      	uxth	r3, r3
 80088e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088f8:	82fb      	strh	r3, [r7, #22]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	441a      	add	r2, r3
 8008904:	8afb      	ldrh	r3, [r7, #22]
 8008906:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800890a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800890e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008916:	b29b      	uxth	r3, r3
 8008918:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800892c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008930:	82bb      	strh	r3, [r7, #20]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	441a      	add	r2, r3
 800893c:	8abb      	ldrh	r3, [r7, #20]
 800893e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800894a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800894e:	b29b      	uxth	r3, r3
 8008950:	8013      	strh	r3, [r2, #0]
 8008952:	e0a3      	b.n	8008a9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8008962:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01b      	beq.n	80089a4 <USB_DeactivateEndpoint+0x2d4>
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800897e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008982:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	441a      	add	r2, r3
 800898e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008990:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008994:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800899c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80089b2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80089b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01b      	beq.n	80089f4 <USB_DeactivateEndpoint+0x324>
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80089e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a42:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	441a      	add	r2, r3
 8008a4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	441a      	add	r2, r3
 8008a86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3734      	adds	r7, #52	@ 0x34
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b0c2      	sub	sp, #264	@ 0x108
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ab8:	6018      	str	r0, [r3, #0]
 8008aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	f040 86b7 	bne.w	8009844 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ad6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d908      	bls.n	8008b04 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008b02:	e007      	b.n	8008b14 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	7b1b      	ldrb	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d13a      	bne.n	8008b9a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6959      	ldr	r1, [r3, #20]
 8008b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	88da      	ldrh	r2, [r3, #6]
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008b46:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	f001 fc98 	bl	800a480 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	613b      	str	r3, [r7, #16]
 8008b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	4413      	add	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]
 8008b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	00da      	lsls	r2, r3, #3
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008b8a:	60fb      	str	r3, [r7, #12]
 8008b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	801a      	strh	r2, [r3, #0]
 8008b96:	f000 be1f 	b.w	80097d8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	78db      	ldrb	r3, [r3, #3]
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	f040 8462 	bne.w	8009470 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008bac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	f240 83df 	bls.w	8009388 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	441a      	add	r2, r3
 8008c0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008c12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a1a      	ldr	r2, [r3, #32]
 8008c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008c44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 81c7 	beq.w	8008ffa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	785b      	ldrb	r3, [r3, #1]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d177      	bne.n	8008d78 <USB_EPStartXfer+0x2ce>
 8008c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	4413      	add	r3, r2
 8008caa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	00da      	lsls	r2, r3, #3
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cda:	d921      	bls.n	8008d20 <USB_EPStartXfer+0x276>
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ce0:	095b      	lsrs	r3, r3, #5
 8008ce2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <USB_EPStartXfer+0x252>
 8008cf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	029b      	lsls	r3, r3, #10
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	e050      	b.n	8008dc2 <USB_EPStartXfer+0x318>
 8008d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10a      	bne.n	8008d3e <USB_EPStartXfer+0x294>
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3a:	801a      	strh	r2, [r3, #0]
 8008d3c:	e041      	b.n	8008dc2 <USB_EPStartXfer+0x318>
 8008d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d004      	beq.n	8008d5e <USB_EPStartXfer+0x2b4>
 8008d54:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d58:	3301      	adds	r3, #1
 8008d5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	029b      	lsls	r3, r3, #10
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d74:	801a      	strh	r2, [r3, #0]
 8008d76:	e024      	b.n	8008dc2 <USB_EPStartXfer+0x318>
 8008d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d11c      	bne.n	8008dc2 <USB_EPStartXfer+0x318>
 8008d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9c:	4413      	add	r3, r2
 8008d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	00da      	lsls	r2, r3, #3
 8008dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db0:	4413      	add	r3, r2
 8008db2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	895b      	ldrh	r3, [r3, #10]
 8008dce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6959      	ldr	r1, [r3, #20]
 8008dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008de8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008dec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008df0:	6800      	ldr	r0, [r0, #0]
 8008df2:	f001 fb45 	bl	800a480 <USB_WritePMA>
            ep->xfer_buff += len;
 8008df6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	695a      	ldr	r2, [r3, #20]
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e06:	441a      	add	r2, r3
 8008e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6a1a      	ldr	r2, [r3, #32]
 8008e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d90f      	bls.n	8008e50 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6a1a      	ldr	r2, [r3, #32]
 8008e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	621a      	str	r2, [r3, #32]
 8008e4e:	e00e      	b.n	8008e6e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	785b      	ldrb	r3, [r3, #1]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d177      	bne.n	8008f6e <USB_EPStartXfer+0x4c4>
 8008e7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	61bb      	str	r3, [r7, #24]
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	00da      	lsls	r2, r3, #3
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008eb8:	617b      	str	r3, [r7, #20]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ed0:	d921      	bls.n	8008f16 <USB_EPStartXfer+0x46c>
 8008ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ed6:	095b      	lsrs	r3, r3, #5
 8008ed8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee0:	f003 031f 	and.w	r3, r3, #31
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <USB_EPStartXfer+0x448>
 8008ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008eec:	3b01      	subs	r3, #1
 8008eee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	881b      	ldrh	r3, [r3, #0]
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	029b      	lsls	r3, r3, #10
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	4313      	orrs	r3, r2
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	801a      	strh	r2, [r3, #0]
 8008f14:	e056      	b.n	8008fc4 <USB_EPStartXfer+0x51a>
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <USB_EPStartXfer+0x48a>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	801a      	strh	r2, [r3, #0]
 8008f32:	e047      	b.n	8008fc4 <USB_EPStartXfer+0x51a>
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f38:	085b      	lsrs	r3, r3, #1
 8008f3a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <USB_EPStartXfer+0x4aa>
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f4e:	3301      	adds	r3, #1
 8008f50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	881b      	ldrh	r3, [r3, #0]
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	029b      	lsls	r3, r3, #10
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	4313      	orrs	r3, r2
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	801a      	strh	r2, [r3, #0]
 8008f6c:	e02a      	b.n	8008fc4 <USB_EPStartXfer+0x51a>
 8008f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	785b      	ldrb	r3, [r3, #1]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d122      	bne.n	8008fc4 <USB_EPStartXfer+0x51a>
 8008f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	623b      	str	r3, [r7, #32]
 8008f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	623b      	str	r3, [r7, #32]
 8008fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	00da      	lsls	r2, r3, #3
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	891b      	ldrh	r3, [r3, #8]
 8008fd0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6959      	ldr	r1, [r3, #20]
 8008fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008fea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008fee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008ff2:	6800      	ldr	r0, [r0, #0]
 8008ff4:	f001 fa44 	bl	800a480 <USB_WritePMA>
 8008ff8:	e3ee      	b.n	80097d8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d177      	bne.n	80090fa <USB_EPStartXfer+0x650>
 800900a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800900e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800901a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009024:	b29b      	uxth	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902a:	4413      	add	r3, r2
 800902c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800902e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	00da      	lsls	r2, r3, #3
 800903c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903e:	4413      	add	r3, r2
 8009040:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009044:	647b      	str	r3, [r7, #68]	@ 0x44
 8009046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009050:	b29a      	uxth	r2, r3
 8009052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009054:	801a      	strh	r2, [r3, #0]
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905a:	2b3e      	cmp	r3, #62	@ 0x3e
 800905c:	d921      	bls.n	80090a2 <USB_EPStartXfer+0x5f8>
 800905e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800906c:	f003 031f 	and.w	r3, r3, #31
 8009070:	2b00      	cmp	r3, #0
 8009072:	d104      	bne.n	800907e <USB_EPStartXfer+0x5d4>
 8009074:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009078:	3b01      	subs	r3, #1
 800907a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800907e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29a      	uxth	r2, r3
 8009084:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009088:	b29b      	uxth	r3, r3
 800908a:	029b      	lsls	r3, r3, #10
 800908c:	b29b      	uxth	r3, r3
 800908e:	4313      	orrs	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800909a:	b29a      	uxth	r2, r3
 800909c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800909e:	801a      	strh	r2, [r3, #0]
 80090a0:	e056      	b.n	8009150 <USB_EPStartXfer+0x6a6>
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <USB_EPStartXfer+0x616>
 80090aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090bc:	801a      	strh	r2, [r3, #0]
 80090be:	e047      	b.n	8009150 <USB_EPStartXfer+0x6a6>
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	085b      	lsrs	r3, r3, #1
 80090c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <USB_EPStartXfer+0x636>
 80090d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090da:	3301      	adds	r3, #1
 80090dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	029b      	lsls	r3, r3, #10
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090f6:	801a      	strh	r2, [r3, #0]
 80090f8:	e02a      	b.n	8009150 <USB_EPStartXfer+0x6a6>
 80090fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80090fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d122      	bne.n	8009150 <USB_EPStartXfer+0x6a6>
 800910a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800910e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	653b      	str	r3, [r7, #80]	@ 0x50
 8009116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800911a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009124:	b29b      	uxth	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800912a:	4413      	add	r3, r2
 800912c:	653b      	str	r3, [r7, #80]	@ 0x50
 800912e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	00da      	lsls	r2, r3, #3
 800913c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800913e:	4413      	add	r3, r2
 8009140:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800914a:	b29a      	uxth	r2, r3
 800914c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800914e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6959      	ldr	r1, [r3, #20]
 800916c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009170:	b29b      	uxth	r3, r3
 8009172:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009176:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800917a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800917e:	6800      	ldr	r0, [r0, #0]
 8009180:	f001 f97e 	bl	800a480 <USB_WritePMA>
            ep->xfer_buff += len;
 8009184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695a      	ldr	r2, [r3, #20]
 8009190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009194:	441a      	add	r2, r3
 8009196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800919a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6a1a      	ldr	r2, [r3, #32]
 80091ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d90f      	bls.n	80091de <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80091be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	621a      	str	r2, [r3, #32]
 80091dc:	e00e      	b.n	80091fc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80091de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80091ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2200      	movs	r2, #0
 80091fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009200:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	643b      	str	r3, [r7, #64]	@ 0x40
 8009208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800920c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d177      	bne.n	8009308 <USB_EPStartXfer+0x85e>
 8009218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800921c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009228:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009232:	b29b      	uxth	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009238:	4413      	add	r3, r2
 800923a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800923c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	00da      	lsls	r2, r3, #3
 800924a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924c:	4413      	add	r3, r2
 800924e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34
 8009254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800925e:	b29a      	uxth	r2, r3
 8009260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009262:	801a      	strh	r2, [r3, #0]
 8009264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009268:	2b3e      	cmp	r3, #62	@ 0x3e
 800926a:	d921      	bls.n	80092b0 <USB_EPStartXfer+0x806>
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009270:	095b      	lsrs	r3, r3, #5
 8009272:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	2b00      	cmp	r3, #0
 8009280:	d104      	bne.n	800928c <USB_EPStartXfer+0x7e2>
 8009282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009286:	3b01      	subs	r3, #1
 8009288:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b29a      	uxth	r2, r3
 8009292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009296:	b29b      	uxth	r3, r3
 8009298:	029b      	lsls	r3, r3, #10
 800929a:	b29b      	uxth	r3, r3
 800929c:	4313      	orrs	r3, r2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ac:	801a      	strh	r2, [r3, #0]
 80092ae:	e050      	b.n	8009352 <USB_EPStartXfer+0x8a8>
 80092b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d10a      	bne.n	80092ce <USB_EPStartXfer+0x824>
 80092b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ca:	801a      	strh	r2, [r3, #0]
 80092cc:	e041      	b.n	8009352 <USB_EPStartXfer+0x8a8>
 80092ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d2:	085b      	lsrs	r3, r3, #1
 80092d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <USB_EPStartXfer+0x844>
 80092e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092e8:	3301      	adds	r3, #1
 80092ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f0:	881b      	ldrh	r3, [r3, #0]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	029b      	lsls	r3, r3, #10
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b29a      	uxth	r2, r3
 8009302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009304:	801a      	strh	r2, [r3, #0]
 8009306:	e024      	b.n	8009352 <USB_EPStartXfer+0x8a8>
 8009308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d11c      	bne.n	8009352 <USB_EPStartXfer+0x8a8>
 8009318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800931c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009326:	b29b      	uxth	r3, r3
 8009328:	461a      	mov	r2, r3
 800932a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932c:	4413      	add	r3, r2
 800932e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	00da      	lsls	r2, r3, #3
 800933e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009340:	4413      	add	r3, r2
 8009342:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800934c:	b29a      	uxth	r2, r3
 800934e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	895b      	ldrh	r3, [r3, #10]
 800935e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6959      	ldr	r1, [r3, #20]
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009372:	b29b      	uxth	r3, r3
 8009374:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009378:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800937c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009380:	6800      	ldr	r0, [r0, #0]
 8009382:	f001 f87d 	bl	800a480 <USB_WritePMA>
 8009386:	e227      	b.n	80097d8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800938c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80093ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80093c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	441a      	add	r2, r3
 80093dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80093e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800940e:	b29b      	uxth	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009414:	4413      	add	r3, r2
 8009416:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	00da      	lsls	r2, r3, #3
 8009426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009428:	4413      	add	r3, r2
 800942a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800942e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009434:	b29a      	uxth	r2, r3
 8009436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009438:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800943a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800943e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	891b      	ldrh	r3, [r3, #8]
 8009446:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800944a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6959      	ldr	r1, [r3, #20]
 8009456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945a:	b29b      	uxth	r3, r3
 800945c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009460:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009464:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009468:	6800      	ldr	r0, [r0, #0]
 800946a:	f001 f809 	bl	800a480 <USB_WritePMA>
 800946e:	e1b3      	b.n	80097d8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6a1a      	ldr	r2, [r3, #32]
 800947c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009480:	1ad2      	subs	r2, r2, r3
 8009482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800948e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009492:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80c6 	beq.w	8009642 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80094c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d177      	bne.n	80095c2 <USB_EPStartXfer+0xb18>
 80094d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	461a      	mov	r2, r3
 80094f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094f2:	4413      	add	r3, r2
 80094f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	00da      	lsls	r2, r3, #3
 8009504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009506:	4413      	add	r3, r2
 8009508:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800950c:	667b      	str	r3, [r7, #100]	@ 0x64
 800950e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009518:	b29a      	uxth	r2, r3
 800951a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800951c:	801a      	strh	r2, [r3, #0]
 800951e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009522:	2b3e      	cmp	r3, #62	@ 0x3e
 8009524:	d921      	bls.n	800956a <USB_EPStartXfer+0xac0>
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952a:	095b      	lsrs	r3, r3, #5
 800952c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <USB_EPStartXfer+0xa9c>
 800953c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009540:	3b01      	subs	r3, #1
 8009542:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009546:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29a      	uxth	r2, r3
 800954c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009550:	b29b      	uxth	r3, r3
 8009552:	029b      	lsls	r3, r3, #10
 8009554:	b29b      	uxth	r3, r3
 8009556:	4313      	orrs	r3, r2
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009562:	b29a      	uxth	r2, r3
 8009564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009566:	801a      	strh	r2, [r3, #0]
 8009568:	e050      	b.n	800960c <USB_EPStartXfer+0xb62>
 800956a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <USB_EPStartXfer+0xade>
 8009572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800957c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009580:	b29a      	uxth	r2, r3
 8009582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009584:	801a      	strh	r2, [r3, #0]
 8009586:	e041      	b.n	800960c <USB_EPStartXfer+0xb62>
 8009588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <USB_EPStartXfer+0xafe>
 800959e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095a2:	3301      	adds	r3, #1
 80095a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80095a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	029b      	lsls	r3, r3, #10
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	e024      	b.n	800960c <USB_EPStartXfer+0xb62>
 80095c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	785b      	ldrb	r3, [r3, #1]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d11c      	bne.n	800960c <USB_EPStartXfer+0xb62>
 80095d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095e6:	4413      	add	r3, r2
 80095e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80095ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095fa:	4413      	add	r3, r2
 80095fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009600:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	b29a      	uxth	r2, r3
 8009608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800960a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800960c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	895b      	ldrh	r3, [r3, #10]
 8009618:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800961c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6959      	ldr	r1, [r3, #20]
 8009628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962c:	b29b      	uxth	r3, r3
 800962e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009632:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009636:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800963a:	6800      	ldr	r0, [r0, #0]
 800963c:	f000 ff20 	bl	800a480 <USB_WritePMA>
 8009640:	e0ca      	b.n	80097d8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d177      	bne.n	8009742 <USB_EPStartXfer+0xc98>
 8009652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009656:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800965e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009662:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800966c:	b29b      	uxth	r3, r3
 800966e:	461a      	mov	r2, r3
 8009670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009672:	4413      	add	r3, r2
 8009674:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	00da      	lsls	r2, r3, #3
 8009684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009686:	4413      	add	r3, r2
 8009688:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800968c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800968e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009698:	b29a      	uxth	r2, r3
 800969a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800969c:	801a      	strh	r2, [r3, #0]
 800969e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80096a4:	d921      	bls.n	80096ea <USB_EPStartXfer+0xc40>
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096aa:	095b      	lsrs	r3, r3, #5
 80096ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b4:	f003 031f 	and.w	r3, r3, #31
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <USB_EPStartXfer+0xc1c>
 80096bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80096c0:	3b01      	subs	r3, #1
 80096c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80096c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	029b      	lsls	r3, r3, #10
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	4313      	orrs	r3, r2
 80096d8:	b29b      	uxth	r3, r3
 80096da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	e05c      	b.n	80097a4 <USB_EPStartXfer+0xcfa>
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10a      	bne.n	8009708 <USB_EPStartXfer+0xc5e>
 80096f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009700:	b29a      	uxth	r2, r3
 8009702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	e04d      	b.n	80097a4 <USB_EPStartXfer+0xcfa>
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800970c:	085b      	lsrs	r3, r3, #1
 800970e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <USB_EPStartXfer+0xc7e>
 800971e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009722:	3301      	adds	r3, #1
 8009724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	b29a      	uxth	r2, r3
 800972e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009732:	b29b      	uxth	r3, r3
 8009734:	029b      	lsls	r3, r3, #10
 8009736:	b29b      	uxth	r3, r3
 8009738:	4313      	orrs	r3, r2
 800973a:	b29a      	uxth	r2, r3
 800973c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	e030      	b.n	80097a4 <USB_EPStartXfer+0xcfa>
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d128      	bne.n	80097a4 <USB_EPStartXfer+0xcfa>
 8009752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800976e:	b29b      	uxth	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009776:	4413      	add	r3, r2
 8009778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800977c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	00da      	lsls	r2, r3, #3
 800978a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800978e:	4413      	add	r3, r2
 8009790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979c:	b29a      	uxth	r2, r3
 800979e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80097a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	891b      	ldrh	r3, [r3, #8]
 80097b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6959      	ldr	r1, [r3, #20]
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097ca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097ce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097d2:	6800      	ldr	r0, [r0, #0]
 80097d4:	f000 fe54 	bl	800a480 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80097d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097fe:	817b      	strh	r3, [r7, #10]
 8009800:	897b      	ldrh	r3, [r7, #10]
 8009802:	f083 0310 	eor.w	r3, r3, #16
 8009806:	817b      	strh	r3, [r7, #10]
 8009808:	897b      	ldrh	r3, [r7, #10]
 800980a:	f083 0320 	eor.w	r3, r3, #32
 800980e:	817b      	strh	r3, [r7, #10]
 8009810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	441a      	add	r2, r3
 800982a:	897b      	ldrh	r3, [r7, #10]
 800982c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800983c:	b29b      	uxth	r3, r3
 800983e:	8013      	strh	r3, [r2, #0]
 8009840:	f000 bcde 	b.w	800a200 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	7b1b      	ldrb	r3, [r3, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f040 80bb 	bne.w	80099cc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	699a      	ldr	r2, [r3, #24]
 8009862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	429a      	cmp	r2, r3
 8009870:	d917      	bls.n	80098a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	1ad2      	subs	r2, r2, r3
 8009894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	619a      	str	r2, [r3, #24]
 80098a0:	e00e      	b.n	80098c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80098a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80098b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2200      	movs	r2, #0
 80098be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80098c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098dc:	b29b      	uxth	r3, r3
 80098de:	461a      	mov	r2, r3
 80098e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80098e4:	4413      	add	r3, r2
 80098e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	00da      	lsls	r2, r3, #3
 80098f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80098fc:	4413      	add	r3, r2
 80098fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009912:	b29a      	uxth	r2, r3
 8009914:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009920:	d924      	bls.n	800996c <USB_EPStartXfer+0xec2>
 8009922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	f003 031f 	and.w	r3, r3, #31
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <USB_EPStartXfer+0xe98>
 8009938:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800993c:	3b01      	subs	r3, #1
 800993e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29a      	uxth	r2, r3
 800994a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800994e:	b29b      	uxth	r3, r3
 8009950:	029b      	lsls	r3, r3, #10
 8009952:	b29b      	uxth	r3, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	b29b      	uxth	r3, r3
 8009958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800995c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009960:	b29a      	uxth	r2, r3
 8009962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	f000 bc10 	b.w	800a18c <USB_EPStartXfer+0x16e2>
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10c      	bne.n	800998e <USB_EPStartXfer+0xee4>
 8009974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009980:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009984:	b29a      	uxth	r2, r3
 8009986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800998a:	801a      	strh	r2, [r3, #0]
 800998c:	e3fe      	b.n	800a18c <USB_EPStartXfer+0x16e2>
 800998e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009992:	085b      	lsrs	r3, r3, #1
 8009994:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <USB_EPStartXfer+0xf04>
 80099a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80099a8:	3301      	adds	r3, #1
 80099aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099b2:	881b      	ldrh	r3, [r3, #0]
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4313      	orrs	r3, r2
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099c8:	801a      	strh	r2, [r3, #0]
 80099ca:	e3df      	b.n	800a18c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80099cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	78db      	ldrb	r3, [r3, #3]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f040 8218 	bne.w	8009e0e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80099de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	785b      	ldrb	r3, [r3, #1]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f040 809d 	bne.w	8009b2a <USB_EPStartXfer+0x1080>
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a14:	4413      	add	r3, r2
 8009a16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	00da      	lsls	r2, r3, #3
 8009a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a48:	801a      	strh	r2, [r3, #0]
 8009a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a58:	d92b      	bls.n	8009ab2 <USB_EPStartXfer+0x1008>
 8009a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <USB_EPStartXfer+0xfe0>
 8009a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a84:	3b01      	subs	r3, #1
 8009a86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	029b      	lsls	r3, r3, #10
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	e070      	b.n	8009b94 <USB_EPStartXfer+0x10ea>
 8009ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10c      	bne.n	8009adc <USB_EPStartXfer+0x1032>
 8009ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ac6:	881b      	ldrh	r3, [r3, #0]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009ad8:	801a      	strh	r2, [r3, #0]
 8009ada:	e05b      	b.n	8009b94 <USB_EPStartXfer+0x10ea>
 8009adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <USB_EPStartXfer+0x1062>
 8009b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b06:	3301      	adds	r3, #1
 8009b08:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	029b      	lsls	r3, r3, #10
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009b26:	801a      	strh	r2, [r3, #0]
 8009b28:	e034      	b.n	8009b94 <USB_EPStartXfer+0x10ea>
 8009b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d12c      	bne.n	8009b94 <USB_EPStartXfer+0x10ea>
 8009b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b5e:	4413      	add	r3, r2
 8009b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	00da      	lsls	r2, r3, #3
 8009b72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b76:	4413      	add	r3, r2
 8009b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 809d 	bne.w	8009cee <USB_EPStartXfer+0x1244>
 8009bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bd8:	4413      	add	r3, r2
 8009bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	00da      	lsls	r2, r3, #3
 8009bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009bf6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009bfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c06:	b29a      	uxth	r2, r3
 8009c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c1c:	d92b      	bls.n	8009c76 <USB_EPStartXfer+0x11cc>
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	095b      	lsrs	r3, r3, #5
 8009c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f003 031f 	and.w	r3, r3, #31
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d104      	bne.n	8009c4e <USB_EPStartXfer+0x11a4>
 8009c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	029b      	lsls	r3, r3, #10
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	4313      	orrs	r3, r2
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c72:	801a      	strh	r2, [r3, #0]
 8009c74:	e069      	b.n	8009d4a <USB_EPStartXfer+0x12a0>
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10c      	bne.n	8009ca0 <USB_EPStartXfer+0x11f6>
 8009c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c8a:	881b      	ldrh	r3, [r3, #0]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009c9c:	801a      	strh	r2, [r3, #0]
 8009c9e:	e054      	b.n	8009d4a <USB_EPStartXfer+0x12a0>
 8009ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <USB_EPStartXfer+0x1226>
 8009cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cca:	3301      	adds	r3, #1
 8009ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	029b      	lsls	r3, r3, #10
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cea:	801a      	strh	r2, [r3, #0]
 8009cec:	e02d      	b.n	8009d4a <USB_EPStartXfer+0x12a0>
 8009cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d125      	bne.n	8009d4a <USB_EPStartXfer+0x12a0>
 8009cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d14:	4413      	add	r3, r2
 8009d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	00da      	lsls	r2, r3, #3
 8009d28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009d4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8218 	beq.w	800a18c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <USB_EPStartXfer+0x12ea>
 8009d88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10d      	bne.n	8009db0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009d94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 81f5 	bne.w	800a18c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009da2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8009da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 81ee 	bne.w	800a18c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dd6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8009dda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	441a      	add	r2, r3
 8009df4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e04:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]
 8009e0c:	e1be      	b.n	800a18c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	78db      	ldrb	r3, [r3, #3]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f040 81b4 	bne.w	800a188 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699a      	ldr	r2, [r3, #24]
 8009e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d917      	bls.n	8009e6c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8009e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e5c:	1ad2      	subs	r2, r2, r3
 8009e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	619a      	str	r2, [r3, #24]
 8009e6a:	e00e      	b.n	8009e8a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	699b      	ldr	r3, [r3, #24]
 8009e78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f040 8085 	bne.w	8009fa6 <USB_EPStartXfer+0x14fc>
 8009e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009eaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ec0:	4413      	add	r3, r2
 8009ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	00da      	lsls	r2, r3, #3
 8009ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009ed8:	4413      	add	r3, r2
 8009eda:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ede:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ef4:	801a      	strh	r2, [r3, #0]
 8009ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efa:	2b3e      	cmp	r3, #62	@ 0x3e
 8009efc:	d923      	bls.n	8009f46 <USB_EPStartXfer+0x149c>
 8009efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	f003 031f 	and.w	r3, r3, #31
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d104      	bne.n	8009f1e <USB_EPStartXfer+0x1474>
 8009f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f22:	881b      	ldrh	r3, [r3, #0]
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	029b      	lsls	r3, r3, #10
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f42:	801a      	strh	r2, [r3, #0]
 8009f44:	e060      	b.n	800a008 <USB_EPStartXfer+0x155e>
 8009f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10c      	bne.n	8009f68 <USB_EPStartXfer+0x14be>
 8009f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f64:	801a      	strh	r2, [r3, #0]
 8009f66:	e04f      	b.n	800a008 <USB_EPStartXfer+0x155e>
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d004      	beq.n	8009f88 <USB_EPStartXfer+0x14de>
 8009f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f82:	3301      	adds	r3, #1
 8009f84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009f88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	029b      	lsls	r3, r3, #10
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fa2:	801a      	strh	r2, [r3, #0]
 8009fa4:	e030      	b.n	800a008 <USB_EPStartXfer+0x155e>
 8009fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009faa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	785b      	ldrb	r3, [r3, #1]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d128      	bne.n	800a008 <USB_EPStartXfer+0x155e>
 8009fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009fda:	4413      	add	r3, r2
 8009fdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	00da      	lsls	r2, r3, #3
 8009fee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a000:	b29a      	uxth	r2, r3
 800a002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a006:	801a      	strh	r2, [r3, #0]
 800a008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f040 8085 	bne.w	800a132 <USB_EPStartXfer+0x1688>
 800a028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a044:	b29b      	uxth	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a04c:	4413      	add	r3, r2
 800a04e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	00da      	lsls	r2, r3, #3
 800a060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a064:	4413      	add	r3, r2
 800a066:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a06a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a06e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a072:	881b      	ldrh	r3, [r3, #0]
 800a074:	b29b      	uxth	r3, r3
 800a076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a07a:	b29a      	uxth	r2, r3
 800a07c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a080:	801a      	strh	r2, [r3, #0]
 800a082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a086:	2b3e      	cmp	r3, #62	@ 0x3e
 800a088:	d923      	bls.n	800a0d2 <USB_EPStartXfer+0x1628>
 800a08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a08e:	095b      	lsrs	r3, r3, #5
 800a090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a098:	f003 031f 	and.w	r3, r3, #31
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d104      	bne.n	800a0aa <USB_EPStartXfer+0x1600>
 800a0a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	029b      	lsls	r3, r3, #10
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e05c      	b.n	800a18c <USB_EPStartXfer+0x16e2>
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10c      	bne.n	800a0f4 <USB_EPStartXfer+0x164a>
 800a0da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	e04b      	b.n	800a18c <USB_EPStartXfer+0x16e2>
 800a0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d004      	beq.n	800a114 <USB_EPStartXfer+0x166a>
 800a10a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a10e:	3301      	adds	r3, #1
 800a110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a120:	b29b      	uxth	r3, r3
 800a122:	029b      	lsls	r3, r3, #10
 800a124:	b29b      	uxth	r3, r3
 800a126:	4313      	orrs	r3, r2
 800a128:	b29a      	uxth	r2, r3
 800a12a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a12e:	801a      	strh	r2, [r3, #0]
 800a130:	e02c      	b.n	800a18c <USB_EPStartXfer+0x16e2>
 800a132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	785b      	ldrb	r3, [r3, #1]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d124      	bne.n	800a18c <USB_EPStartXfer+0x16e2>
 800a142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a150:	b29b      	uxth	r3, r3
 800a152:	461a      	mov	r2, r3
 800a154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a158:	4413      	add	r3, r2
 800a15a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a15e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	00da      	lsls	r2, r3, #3
 800a16c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a170:	4413      	add	r3, r2
 800a172:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a176:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17e:	b29a      	uxth	r2, r3
 800a180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a184:	801a      	strh	r2, [r3, #0]
 800a186:	e001      	b.n	800a18c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e03a      	b.n	800a202 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a1b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a1be:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a1c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	441a      	add	r2, r3
 800a1e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a1ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	785b      	ldrb	r3, [r3, #1]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d020      	beq.n	800a260 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a234:	81bb      	strh	r3, [r7, #12]
 800a236:	89bb      	ldrh	r3, [r7, #12]
 800a238:	f083 0310 	eor.w	r3, r3, #16
 800a23c:	81bb      	strh	r3, [r7, #12]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	89bb      	ldrh	r3, [r7, #12]
 800a24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	8013      	strh	r3, [r2, #0]
 800a25e:	e01f      	b.n	800a2a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a276:	81fb      	strh	r3, [r7, #14]
 800a278:	89fb      	ldrh	r3, [r7, #14]
 800a27a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a27e:	81fb      	strh	r3, [r7, #14]
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	441a      	add	r2, r3
 800a28a:	89fb      	ldrh	r3, [r7, #14]
 800a28c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a290:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b087      	sub	sp, #28
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	7b1b      	ldrb	r3, [r3, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 809d 	bne.w	800a3fc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	785b      	ldrb	r3, [r3, #1]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04c      	beq.n	800a364 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	823b      	strh	r3, [r7, #16]
 800a2d8:	8a3b      	ldrh	r3, [r7, #16]
 800a2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01b      	beq.n	800a31a <USB_EPClearStall+0x6c>
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4413      	add	r3, r2
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2f8:	81fb      	strh	r3, [r7, #14]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	441a      	add	r2, r3
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a30a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a30e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a312:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a316:	b29b      	uxth	r3, r3
 800a318:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	78db      	ldrb	r3, [r3, #3]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d06c      	beq.n	800a3fc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	881b      	ldrh	r3, [r3, #0]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a334:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a338:	81bb      	strh	r3, [r7, #12]
 800a33a:	89bb      	ldrh	r3, [r7, #12]
 800a33c:	f083 0320 	eor.w	r3, r3, #32
 800a340:	81bb      	strh	r3, [r7, #12]
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	441a      	add	r2, r3
 800a34c:	89bb      	ldrh	r3, [r7, #12]
 800a34e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a35a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a35e:	b29b      	uxth	r3, r3
 800a360:	8013      	strh	r3, [r2, #0]
 800a362:	e04b      	b.n	800a3fc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	4413      	add	r3, r2
 800a36e:	881b      	ldrh	r3, [r3, #0]
 800a370:	82fb      	strh	r3, [r7, #22]
 800a372:	8afb      	ldrh	r3, [r7, #22]
 800a374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01b      	beq.n	800a3b4 <USB_EPClearStall+0x106>
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a392:	82bb      	strh	r3, [r7, #20]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	441a      	add	r2, r3
 800a39e:	8abb      	ldrh	r3, [r7, #20]
 800a3a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ca:	827b      	strh	r3, [r7, #18]
 800a3cc:	8a7b      	ldrh	r3, [r7, #18]
 800a3ce:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a3d2:	827b      	strh	r3, [r7, #18]
 800a3d4:	8a7b      	ldrh	r3, [r7, #18]
 800a3d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a3da:	827b      	strh	r3, [r7, #18]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	441a      	add	r2, r3
 800a3e6:	8a7b      	ldrh	r3, [r7, #18]
 800a3e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	371c      	adds	r7, #28
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2280      	movs	r2, #128	@ 0x80
 800a420:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a440:	b29b      	uxth	r3, r3
 800a442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a452:	2300      	movs	r3, #0
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a46e:	b29b      	uxth	r3, r3
 800a470:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a480:	b480      	push	{r7}
 800a482:	b08b      	sub	sp, #44	@ 0x2c
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4611      	mov	r1, r2
 800a48c:	461a      	mov	r2, r3
 800a48e:	460b      	mov	r3, r1
 800a490:	80fb      	strh	r3, [r7, #6]
 800a492:	4613      	mov	r3, r2
 800a494:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a496:	88bb      	ldrh	r3, [r7, #4]
 800a498:	3301      	adds	r3, #1
 800a49a:	085b      	lsrs	r3, r3, #1
 800a49c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4b0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b6:	e01b      	b.n	800a4f0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	8a7a      	ldrh	r2, [r7, #18]
 800a4d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a4d8:	6a3b      	ldr	r3, [r7, #32]
 800a4da:	3302      	adds	r3, #2
 800a4dc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e0      	bne.n	800a4b8 <USB_WritePMA+0x38>
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	bf00      	nop
 800a4fa:	372c      	adds	r7, #44	@ 0x2c
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a504:	b480      	push	{r7}
 800a506:	b08b      	sub	sp, #44	@ 0x2c
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4611      	mov	r1, r2
 800a510:	461a      	mov	r2, r3
 800a512:	460b      	mov	r3, r1
 800a514:	80fb      	strh	r3, [r7, #6]
 800a516:	4613      	mov	r3, r2
 800a518:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a51a:	88bb      	ldrh	r3, [r7, #4]
 800a51c:	085b      	lsrs	r3, r3, #1
 800a51e:	b29b      	uxth	r3, r3
 800a520:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a52a:	88fa      	ldrh	r2, [r7, #6]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a534:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	627b      	str	r3, [r7, #36]	@ 0x24
 800a53a:	e018      	b.n	800a56e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	881b      	ldrh	r3, [r3, #0]
 800a540:	b29b      	uxth	r3, r3
 800a542:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	3302      	adds	r3, #2
 800a548:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	3301      	adds	r3, #1
 800a556:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	3301      	adds	r3, #1
 800a566:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	3b01      	subs	r3, #1
 800a56c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e3      	bne.n	800a53c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a574:	88bb      	ldrh	r3, [r7, #4]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	b29b      	uxth	r3, r3
 800a586:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	701a      	strb	r2, [r3, #0]
  }
}
 800a590:	bf00      	nop
 800a592:	372c      	adds	r7, #44	@ 0x2c
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a5a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a5ac:	f006 fad4 	bl	8010b58 <USBD_static_malloc>
 800a5b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	32b0      	adds	r2, #176	@ 0xb0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e0d4      	b.n	800a776 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a5cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f006 fc29 	bl	8010e2a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	32b0      	adds	r2, #176	@ 0xb0
 800a5e2:	68f9      	ldr	r1, [r7, #12]
 800a5e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32b0      	adds	r2, #176	@ 0xb0
 800a5f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7c1b      	ldrb	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d138      	bne.n	800a676 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a604:	4b5e      	ldr	r3, [pc, #376]	@ (800a780 <USBD_CDC_Init+0x1e4>)
 800a606:	7819      	ldrb	r1, [r3, #0]
 800a608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a60c:	2202      	movs	r2, #2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f006 f949 	bl	80108a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a614:	4b5a      	ldr	r3, [pc, #360]	@ (800a780 <USBD_CDC_Init+0x1e4>)
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	f003 020f 	and.w	r2, r3, #15
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	440b      	add	r3, r1
 800a628:	3324      	adds	r3, #36	@ 0x24
 800a62a:	2201      	movs	r2, #1
 800a62c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a62e:	4b55      	ldr	r3, [pc, #340]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a630:	7819      	ldrb	r1, [r3, #0]
 800a632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a636:	2202      	movs	r2, #2
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f006 f934 	bl	80108a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a63e:	4b51      	ldr	r3, [pc, #324]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	f003 020f 	and.w	r2, r3, #15
 800a646:	6879      	ldr	r1, [r7, #4]
 800a648:	4613      	mov	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4413      	add	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	440b      	add	r3, r1
 800a652:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a656:	2201      	movs	r2, #1
 800a658:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a65a:	4b4b      	ldr	r3, [pc, #300]	@ (800a788 <USBD_CDC_Init+0x1ec>)
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	f003 020f 	and.w	r2, r3, #15
 800a662:	6879      	ldr	r1, [r7, #4]
 800a664:	4613      	mov	r3, r2
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	440b      	add	r3, r1
 800a66e:	3326      	adds	r3, #38	@ 0x26
 800a670:	2210      	movs	r2, #16
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	e035      	b.n	800a6e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a676:	4b42      	ldr	r3, [pc, #264]	@ (800a780 <USBD_CDC_Init+0x1e4>)
 800a678:	7819      	ldrb	r1, [r3, #0]
 800a67a:	2340      	movs	r3, #64	@ 0x40
 800a67c:	2202      	movs	r2, #2
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f006 f911 	bl	80108a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a684:	4b3e      	ldr	r3, [pc, #248]	@ (800a780 <USBD_CDC_Init+0x1e4>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f003 020f 	and.w	r2, r3, #15
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	440b      	add	r3, r1
 800a698:	3324      	adds	r3, #36	@ 0x24
 800a69a:	2201      	movs	r2, #1
 800a69c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a69e:	4b39      	ldr	r3, [pc, #228]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a6a0:	7819      	ldrb	r1, [r3, #0]
 800a6a2:	2340      	movs	r3, #64	@ 0x40
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f006 f8fd 	bl	80108a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6ac:	4b35      	ldr	r3, [pc, #212]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	f003 020f 	and.w	r2, r3, #15
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	440b      	add	r3, r1
 800a6c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a6c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a788 <USBD_CDC_Init+0x1ec>)
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	6879      	ldr	r1, [r7, #4]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	3326      	adds	r3, #38	@ 0x26
 800a6de:	2210      	movs	r2, #16
 800a6e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a6e2:	4b29      	ldr	r3, [pc, #164]	@ (800a788 <USBD_CDC_Init+0x1ec>)
 800a6e4:	7819      	ldrb	r1, [r3, #0]
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	2203      	movs	r2, #3
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f006 f8db 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a6f0:	4b25      	ldr	r3, [pc, #148]	@ (800a788 <USBD_CDC_Init+0x1ec>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f003 020f 	and.w	r2, r3, #15
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	3324      	adds	r3, #36	@ 0x24
 800a706:	2201      	movs	r2, #1
 800a708:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	33b0      	adds	r3, #176	@ 0xb0
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a740:	2302      	movs	r3, #2
 800a742:	e018      	b.n	800a776 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7c1b      	ldrb	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10a      	bne.n	800a762 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a74e:	7819      	ldrb	r1, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f006 f992 	bl	8010a84 <USBD_LL_PrepareReceive>
 800a760:	e008      	b.n	800a774 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a762:	4b08      	ldr	r3, [pc, #32]	@ (800a784 <USBD_CDC_Init+0x1e8>)
 800a764:	7819      	ldrb	r1, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a76c:	2340      	movs	r3, #64	@ 0x40
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f006 f988 	bl	8010a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	200000a3 	.word	0x200000a3
 800a784:	200000a4 	.word	0x200000a4
 800a788:	200000a5 	.word	0x200000a5

0800a78c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a798:	4b3a      	ldr	r3, [pc, #232]	@ (800a884 <USBD_CDC_DeInit+0xf8>)
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f006 f8a7 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a7a4:	4b37      	ldr	r3, [pc, #220]	@ (800a884 <USBD_CDC_DeInit+0xf8>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	f003 020f 	and.w	r2, r3, #15
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	440b      	add	r3, r1
 800a7b8:	3324      	adds	r3, #36	@ 0x24
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a7be:	4b32      	ldr	r3, [pc, #200]	@ (800a888 <USBD_CDC_DeInit+0xfc>)
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f006 f894 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800a888 <USBD_CDC_DeInit+0xfc>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	f003 020f 	and.w	r2, r3, #15
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a7e6:	4b29      	ldr	r3, [pc, #164]	@ (800a88c <USBD_CDC_DeInit+0x100>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f006 f880 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a7f2:	4b26      	ldr	r3, [pc, #152]	@ (800a88c <USBD_CDC_DeInit+0x100>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 020f 	and.w	r2, r3, #15
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	3324      	adds	r3, #36	@ 0x24
 800a808:	2200      	movs	r2, #0
 800a80a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a80c:	4b1f      	ldr	r3, [pc, #124]	@ (800a88c <USBD_CDC_DeInit+0x100>)
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	f003 020f 	and.w	r2, r3, #15
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	440b      	add	r3, r1
 800a820:	3326      	adds	r3, #38	@ 0x26
 800a822:	2200      	movs	r2, #0
 800a824:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	32b0      	adds	r2, #176	@ 0xb0
 800a830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d01f      	beq.n	800a878 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	33b0      	adds	r3, #176	@ 0xb0
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	32b0      	adds	r2, #176	@ 0xb0
 800a856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f006 f98a 	bl	8010b74 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	32b0      	adds	r2, #176	@ 0xb0
 800a86a:	2100      	movs	r1, #0
 800a86c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	200000a3 	.word	0x200000a3
 800a888:	200000a4 	.word	0x200000a4
 800a88c:	200000a5 	.word	0x200000a5

0800a890 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	32b0      	adds	r2, #176	@ 0xb0
 800a8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e0bf      	b.n	800aa40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d050      	beq.n	800a96e <USBD_CDC_Setup+0xde>
 800a8cc:	2b20      	cmp	r3, #32
 800a8ce:	f040 80af 	bne.w	800aa30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	88db      	ldrh	r3, [r3, #6]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d03a      	beq.n	800a950 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b25b      	sxtb	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	da1b      	bge.n	800a91c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	33b0      	adds	r3, #176	@ 0xb0
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a8fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	88d2      	ldrh	r2, [r2, #6]
 800a900:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	88db      	ldrh	r3, [r3, #6]
 800a906:	2b07      	cmp	r3, #7
 800a908:	bf28      	it	cs
 800a90a:	2307      	movcs	r3, #7
 800a90c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	89fa      	ldrh	r2, [r7, #14]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 fd47 	bl	800c3a8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a91a:	e090      	b.n	800aa3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	785a      	ldrb	r2, [r3, #1]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	88db      	ldrh	r3, [r3, #6]
 800a92a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a92c:	d803      	bhi.n	800a936 <USBD_CDC_Setup+0xa6>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88db      	ldrh	r3, [r3, #6]
 800a932:	b2da      	uxtb	r2, r3
 800a934:	e000      	b.n	800a938 <USBD_CDC_Setup+0xa8>
 800a936:	2240      	movs	r2, #64	@ 0x40
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a93e:	6939      	ldr	r1, [r7, #16]
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a946:	461a      	mov	r2, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f001 fd59 	bl	800c400 <USBD_CtlPrepareRx>
      break;
 800a94e:	e076      	b.n	800aa3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	33b0      	adds	r3, #176	@ 0xb0
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	7850      	ldrb	r0, [r2, #1]
 800a966:	2200      	movs	r2, #0
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	4798      	blx	r3
      break;
 800a96c:	e067      	b.n	800aa3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	2b0b      	cmp	r3, #11
 800a974:	d851      	bhi.n	800aa1a <USBD_CDC_Setup+0x18a>
 800a976:	a201      	add	r2, pc, #4	@ (adr r2, 800a97c <USBD_CDC_Setup+0xec>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9ad 	.word	0x0800a9ad
 800a980:	0800aa29 	.word	0x0800aa29
 800a984:	0800aa1b 	.word	0x0800aa1b
 800a988:	0800aa1b 	.word	0x0800aa1b
 800a98c:	0800aa1b 	.word	0x0800aa1b
 800a990:	0800aa1b 	.word	0x0800aa1b
 800a994:	0800aa1b 	.word	0x0800aa1b
 800a998:	0800aa1b 	.word	0x0800aa1b
 800a99c:	0800aa1b 	.word	0x0800aa1b
 800a9a0:	0800aa1b 	.word	0x0800aa1b
 800a9a4:	0800a9d7 	.word	0x0800a9d7
 800a9a8:	0800aa01 	.word	0x0800aa01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b03      	cmp	r3, #3
 800a9b6:	d107      	bne.n	800a9c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a9b8:	f107 030a 	add.w	r3, r7, #10
 800a9bc:	2202      	movs	r2, #2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fcf1 	bl	800c3a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9c6:	e032      	b.n	800aa2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fc6f 	bl	800c2ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d4:	e02b      	b.n	800aa2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b03      	cmp	r3, #3
 800a9e0:	d107      	bne.n	800a9f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a9e2:	f107 030d 	add.w	r3, r7, #13
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f001 fcdc 	bl	800c3a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9f0:	e01d      	b.n	800aa2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f001 fc5a 	bl	800c2ae <USBD_CtlError>
            ret = USBD_FAIL;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a9fe:	e016      	b.n	800aa2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d00f      	beq.n	800aa2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fc4d 	bl	800c2ae <USBD_CtlError>
            ret = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa18:	e008      	b.n	800aa2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 fc46 	bl	800c2ae <USBD_CtlError>
          ret = USBD_FAIL;
 800aa22:	2303      	movs	r3, #3
 800aa24:	75fb      	strb	r3, [r7, #23]
          break;
 800aa26:	e002      	b.n	800aa2e <USBD_CDC_Setup+0x19e>
          break;
 800aa28:	bf00      	nop
 800aa2a:	e008      	b.n	800aa3e <USBD_CDC_Setup+0x1ae>
          break;
 800aa2c:	bf00      	nop
      }
      break;
 800aa2e:	e006      	b.n	800aa3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa30:	6839      	ldr	r1, [r7, #0]
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f001 fc3b 	bl	800c2ae <USBD_CtlError>
      ret = USBD_FAIL;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	32b0      	adds	r2, #176	@ 0xb0
 800aa66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e065      	b.n	800ab3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	32b0      	adds	r2, #176	@ 0xb0
 800aa7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa82:	78fb      	ldrb	r3, [r7, #3]
 800aa84:	f003 020f 	and.w	r2, r3, #15
 800aa88:	6879      	ldr	r1, [r7, #4]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	440b      	add	r3, r1
 800aa94:	3318      	adds	r3, #24
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d02f      	beq.n	800aafc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa9c:	78fb      	ldrb	r3, [r7, #3]
 800aa9e:	f003 020f 	and.w	r2, r3, #15
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	3318      	adds	r3, #24
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	f003 010f 	and.w	r1, r3, #15
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	460b      	mov	r3, r1
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	00db      	lsls	r3, r3, #3
 800aac2:	4403      	add	r3, r0
 800aac4:	3320      	adds	r3, #32
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	fbb2 f1f3 	udiv	r1, r2, r3
 800aacc:	fb01 f303 	mul.w	r3, r1, r3
 800aad0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d112      	bne.n	800aafc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aad6:	78fb      	ldrb	r3, [r7, #3]
 800aad8:	f003 020f 	and.w	r2, r3, #15
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	3318      	adds	r3, #24
 800aaea:	2200      	movs	r2, #0
 800aaec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aaee:	78f9      	ldrb	r1, [r7, #3]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f005 ffa4 	bl	8010a42 <USBD_LL_Transmit>
 800aafa:	e01f      	b.n	800ab3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	33b0      	adds	r3, #176	@ 0xb0
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d010      	beq.n	800ab3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	33b0      	adds	r3, #176	@ 0xb0
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	68ba      	ldr	r2, [r7, #8]
 800ab2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab38:	78fa      	ldrb	r2, [r7, #3]
 800ab3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	32b0      	adds	r2, #176	@ 0xb0
 800ab5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	32b0      	adds	r2, #176	@ 0xb0
 800ab6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e01a      	b.n	800abae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f005 ffa2 	bl	8010ac6 <USBD_LL_GetRxDataSize>
 800ab82:	4602      	mov	r2, r0
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	33b0      	adds	r3, #176	@ 0xb0
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800aba8:	4611      	mov	r1, r2
 800abaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	32b0      	adds	r2, #176	@ 0xb0
 800abc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d101      	bne.n	800abd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e024      	b.n	800ac22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	33b0      	adds	r3, #176	@ 0xb0
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4413      	add	r3, r2
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d019      	beq.n	800ac20 <USBD_CDC_EP0_RxReady+0x6a>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800abf2:	2bff      	cmp	r3, #255	@ 0xff
 800abf4:	d014      	beq.n	800ac20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	33b0      	adds	r3, #176	@ 0xb0
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	22ff      	movs	r2, #255	@ 0xff
 800ac1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac34:	2182      	movs	r1, #130	@ 0x82
 800ac36:	4818      	ldr	r0, [pc, #96]	@ (800ac98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac38:	f000 fcd9 	bl	800b5ee <USBD_GetEpDesc>
 800ac3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac3e:	2101      	movs	r1, #1
 800ac40:	4815      	ldr	r0, [pc, #84]	@ (800ac98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac42:	f000 fcd4 	bl	800b5ee <USBD_GetEpDesc>
 800ac46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac48:	2181      	movs	r1, #129	@ 0x81
 800ac4a:	4813      	ldr	r0, [pc, #76]	@ (800ac98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac4c:	f000 fccf 	bl	800b5ee <USBD_GetEpDesc>
 800ac50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	2210      	movs	r2, #16
 800ac5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d006      	beq.n	800ac72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac6c:	711a      	strb	r2, [r3, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d006      	beq.n	800ac86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac80:	711a      	strb	r2, [r3, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2243      	movs	r2, #67	@ 0x43
 800ac8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac8c:	4b02      	ldr	r3, [pc, #8]	@ (800ac98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3718      	adds	r7, #24
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20000060 	.word	0x20000060

0800ac9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aca4:	2182      	movs	r1, #130	@ 0x82
 800aca6:	4818      	ldr	r0, [pc, #96]	@ (800ad08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aca8:	f000 fca1 	bl	800b5ee <USBD_GetEpDesc>
 800acac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acae:	2101      	movs	r1, #1
 800acb0:	4815      	ldr	r0, [pc, #84]	@ (800ad08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acb2:	f000 fc9c 	bl	800b5ee <USBD_GetEpDesc>
 800acb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acb8:	2181      	movs	r1, #129	@ 0x81
 800acba:	4813      	ldr	r0, [pc, #76]	@ (800ad08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800acbc:	f000 fc97 	bl	800b5ee <USBD_GetEpDesc>
 800acc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d002      	beq.n	800acce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	2210      	movs	r2, #16
 800accc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2200      	movs	r2, #0
 800acd8:	711a      	strb	r2, [r3, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f042 0202 	orr.w	r2, r2, #2
 800ace0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	711a      	strb	r2, [r3, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f042 0202 	orr.w	r2, r2, #2
 800acf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2243      	movs	r2, #67	@ 0x43
 800acfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3718      	adds	r7, #24
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	20000060 	.word	0x20000060

0800ad0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad14:	2182      	movs	r1, #130	@ 0x82
 800ad16:	4818      	ldr	r0, [pc, #96]	@ (800ad78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad18:	f000 fc69 	bl	800b5ee <USBD_GetEpDesc>
 800ad1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad1e:	2101      	movs	r1, #1
 800ad20:	4815      	ldr	r0, [pc, #84]	@ (800ad78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad22:	f000 fc64 	bl	800b5ee <USBD_GetEpDesc>
 800ad26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad28:	2181      	movs	r1, #129	@ 0x81
 800ad2a:	4813      	ldr	r0, [pc, #76]	@ (800ad78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad2c:	f000 fc5f 	bl	800b5ee <USBD_GetEpDesc>
 800ad30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	2210      	movs	r2, #16
 800ad3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d006      	beq.n	800ad52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad4c:	711a      	strb	r2, [r3, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d006      	beq.n	800ad66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad60:	711a      	strb	r2, [r3, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2243      	movs	r2, #67	@ 0x43
 800ad6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad6c:	4b02      	ldr	r3, [pc, #8]	@ (800ad78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3718      	adds	r7, #24
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20000060 	.word	0x20000060

0800ad7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	220a      	movs	r2, #10
 800ad88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad8a:	4b03      	ldr	r3, [pc, #12]	@ (800ad98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	370c      	adds	r7, #12
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	2000001c 	.word	0x2000001c

0800ad9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800adac:	2303      	movs	r3, #3
 800adae:	e009      	b.n	800adc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	33b0      	adds	r3, #176	@ 0xb0
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	32b0      	adds	r2, #176	@ 0xb0
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e008      	b.n	800ae08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	371c      	adds	r7, #28
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	32b0      	adds	r2, #176	@ 0xb0
 800ae28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e004      	b.n	800ae42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3714      	adds	r7, #20
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
	...

0800ae50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	32b0      	adds	r2, #176	@ 0xb0
 800ae62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e025      	b.n	800aec2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11f      	bne.n	800aec0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ae88:	4b10      	ldr	r3, [pc, #64]	@ (800aecc <USBD_CDC_TransmitPacket+0x7c>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	f003 020f 	and.w	r2, r3, #15
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4403      	add	r3, r0
 800aea2:	3318      	adds	r3, #24
 800aea4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800aea6:	4b09      	ldr	r3, [pc, #36]	@ (800aecc <USBD_CDC_TransmitPacket+0x7c>)
 800aea8:	7819      	ldrb	r1, [r3, #0]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f005 fdc3 	bl	8010a42 <USBD_LL_Transmit>

    ret = USBD_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200000a3 	.word	0x200000a3

0800aed0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32b0      	adds	r2, #176	@ 0xb0
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32b0      	adds	r2, #176	@ 0xb0
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e018      	b.n	800af30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	7c1b      	ldrb	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af06:	4b0c      	ldr	r3, [pc, #48]	@ (800af38 <USBD_CDC_ReceivePacket+0x68>)
 800af08:	7819      	ldrb	r1, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f005 fdb5 	bl	8010a84 <USBD_LL_PrepareReceive>
 800af1a:	e008      	b.n	800af2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <USBD_CDC_ReceivePacket+0x68>)
 800af1e:	7819      	ldrb	r1, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af26:	2340      	movs	r3, #64	@ 0x40
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f005 fdab 	bl	8010a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200000a4 	.word	0x200000a4

0800af3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	4613      	mov	r3, r2
 800af48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800af50:	4817      	ldr	r0, [pc, #92]	@ (800afb0 <USBD_Init+0x74>)
 800af52:	f005 ff0d 	bl	8010d70 <iprintf>
 800af56:	4817      	ldr	r0, [pc, #92]	@ (800afb4 <USBD_Init+0x78>)
 800af58:	f005 ff0a 	bl	8010d70 <iprintf>
 800af5c:	200a      	movs	r0, #10
 800af5e:	f005 ff19 	bl	8010d94 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af62:	2303      	movs	r3, #3
 800af64:	e01f      	b.n	800afa6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2201      	movs	r2, #1
 800af90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	79fa      	ldrb	r2, [r7, #7]
 800af98:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f005 fc06 	bl	80107ac <USBD_LL_Init>
 800afa0:	4603      	mov	r3, r0
 800afa2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	08011bf4 	.word	0x08011bf4
 800afb4:	08011bfc 	.word	0x08011bfc

0800afb8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800afcc:	481a      	ldr	r0, [pc, #104]	@ (800b038 <USBD_RegisterClass+0x80>)
 800afce:	f005 fecf 	bl	8010d70 <iprintf>
 800afd2:	481a      	ldr	r0, [pc, #104]	@ (800b03c <USBD_RegisterClass+0x84>)
 800afd4:	f005 fecc 	bl	8010d70 <iprintf>
 800afd8:	200a      	movs	r0, #10
 800afda:	f005 fedb 	bl	8010d94 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	e025      	b.n	800b02e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	32ae      	adds	r2, #174	@ 0xae
 800aff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00f      	beq.n	800b01e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	32ae      	adds	r2, #174	@ 0xae
 800b008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	f107 020e 	add.w	r2, r7, #14
 800b012:	4610      	mov	r0, r2
 800b014:	4798      	blx	r3
 800b016:	4602      	mov	r2, r0
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	08011bf4 	.word	0x08011bf4
 800b03c:	08011c14 	.word	0x08011c14

0800b040 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f005 fc11 	bl	8010870 <USBD_LL_Start>
 800b04e:	4603      	mov	r3, r0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b060:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b062:	4618      	mov	r0, r3
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	78fa      	ldrb	r2, [r7, #3]
 800b092:	4611      	mov	r1, r2
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	78fa      	ldrb	r2, [r7, #3]
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f8a4 	bl	800c23a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b100:	461a      	mov	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b10e:	f003 031f 	and.w	r3, r3, #31
 800b112:	2b02      	cmp	r3, #2
 800b114:	d01a      	beq.n	800b14c <USBD_LL_SetupStage+0x72>
 800b116:	2b02      	cmp	r3, #2
 800b118:	d822      	bhi.n	800b160 <USBD_LL_SetupStage+0x86>
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d002      	beq.n	800b124 <USBD_LL_SetupStage+0x4a>
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d00a      	beq.n	800b138 <USBD_LL_SetupStage+0x5e>
 800b122:	e01d      	b.n	800b160 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fad1 	bl	800b6d4 <USBD_StdDevReq>
 800b132:	4603      	mov	r3, r0
 800b134:	73fb      	strb	r3, [r7, #15]
      break;
 800b136:	e020      	b.n	800b17a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fb39 	bl	800b7b8 <USBD_StdItfReq>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]
      break;
 800b14a:	e016      	b.n	800b17a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fb9b 	bl	800b890 <USBD_StdEPReq>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73fb      	strb	r3, [r7, #15]
      break;
 800b15e:	e00c      	b.n	800b17a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b166:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f005 fbde 	bl	8010930 <USBD_LL_StallEP>
 800b174:	4603      	mov	r3, r0
 800b176:	73fb      	strb	r3, [r7, #15]
      break;
 800b178:	bf00      	nop
  }

  return ret;
 800b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b086      	sub	sp, #24
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	460b      	mov	r3, r1
 800b18e:	607a      	str	r2, [r7, #4]
 800b190:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b196:	7afb      	ldrb	r3, [r7, #11]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d16e      	bne.n	800b27a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	f040 8098 	bne.w	800b2e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d913      	bls.n	800b1e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	1ad2      	subs	r2, r2, r3
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	bf28      	it	cs
 800b1d6:	4613      	movcs	r3, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f001 f92c 	bl	800c43a <USBD_CtlContinueRx>
 800b1e2:	e07d      	b.n	800b2e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1ea:	f003 031f 	and.w	r3, r3, #31
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d014      	beq.n	800b21c <USBD_LL_DataOutStage+0x98>
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d81d      	bhi.n	800b232 <USBD_LL_DataOutStage+0xae>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <USBD_LL_DataOutStage+0x7c>
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d003      	beq.n	800b206 <USBD_LL_DataOutStage+0x82>
 800b1fe:	e018      	b.n	800b232 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	75bb      	strb	r3, [r7, #22]
            break;
 800b204:	e018      	b.n	800b238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	4619      	mov	r1, r3
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f9d2 	bl	800b5ba <USBD_CoreFindIF>
 800b216:	4603      	mov	r3, r0
 800b218:	75bb      	strb	r3, [r7, #22]
            break;
 800b21a:	e00d      	b.n	800b238 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b222:	b2db      	uxtb	r3, r3
 800b224:	4619      	mov	r1, r3
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 f9d4 	bl	800b5d4 <USBD_CoreFindEP>
 800b22c:	4603      	mov	r3, r0
 800b22e:	75bb      	strb	r3, [r7, #22]
            break;
 800b230:	e002      	b.n	800b238 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	75bb      	strb	r3, [r7, #22]
            break;
 800b236:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b238:	7dbb      	ldrb	r3, [r7, #22]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d119      	bne.n	800b272 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b03      	cmp	r3, #3
 800b248:	d113      	bne.n	800b272 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b24a:	7dba      	ldrb	r2, [r7, #22]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	32ae      	adds	r2, #174	@ 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00b      	beq.n	800b272 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b25a:	7dba      	ldrb	r2, [r7, #22]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b262:	7dba      	ldrb	r2, [r7, #22]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	32ae      	adds	r2, #174	@ 0xae
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f001 f8f2 	bl	800c45c <USBD_CtlSendStatus>
 800b278:	e032      	b.n	800b2e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b27a:	7afb      	ldrb	r3, [r7, #11]
 800b27c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b280:	b2db      	uxtb	r3, r3
 800b282:	4619      	mov	r1, r3
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	f000 f9a5 	bl	800b5d4 <USBD_CoreFindEP>
 800b28a:	4603      	mov	r3, r0
 800b28c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b28e:	7dbb      	ldrb	r3, [r7, #22]
 800b290:	2bff      	cmp	r3, #255	@ 0xff
 800b292:	d025      	beq.n	800b2e0 <USBD_LL_DataOutStage+0x15c>
 800b294:	7dbb      	ldrb	r3, [r7, #22]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d122      	bne.n	800b2e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d117      	bne.n	800b2d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2a6:	7dba      	ldrb	r2, [r7, #22]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	32ae      	adds	r2, #174	@ 0xae
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00f      	beq.n	800b2d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2be:	7dba      	ldrb	r2, [r7, #22]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	32ae      	adds	r2, #174	@ 0xae
 800b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	7afa      	ldrb	r2, [r7, #11]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b2d6:	7dfb      	ldrb	r3, [r7, #23]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d001      	beq.n	800b2e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b2dc:	7dfb      	ldrb	r3, [r7, #23]
 800b2de:	e000      	b.n	800b2e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b086      	sub	sp, #24
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	607a      	str	r2, [r7, #4]
 800b2f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d16f      	bne.n	800b3de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	3314      	adds	r3, #20
 800b302:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d15a      	bne.n	800b3c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	689a      	ldr	r2, [r3, #8]
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	429a      	cmp	r2, r3
 800b318:	d914      	bls.n	800b344 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	1ad2      	subs	r2, r2, r3
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	461a      	mov	r2, r3
 800b32e:	6879      	ldr	r1, [r7, #4]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f001 f854 	bl	800c3de <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b336:	2300      	movs	r3, #0
 800b338:	2200      	movs	r2, #0
 800b33a:	2100      	movs	r1, #0
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f005 fba1 	bl	8010a84 <USBD_LL_PrepareReceive>
 800b342:	e03f      	b.n	800b3c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	68da      	ldr	r2, [r3, #12]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d11c      	bne.n	800b38a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b358:	429a      	cmp	r2, r3
 800b35a:	d316      	bcc.n	800b38a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b366:	429a      	cmp	r2, r3
 800b368:	d20f      	bcs.n	800b38a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b36a:	2200      	movs	r2, #0
 800b36c:	2100      	movs	r1, #0
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f001 f835 	bl	800c3de <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b37c:	2300      	movs	r3, #0
 800b37e:	2200      	movs	r2, #0
 800b380:	2100      	movs	r1, #0
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f005 fb7e 	bl	8010a84 <USBD_LL_PrepareReceive>
 800b388:	e01c      	b.n	800b3c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b03      	cmp	r3, #3
 800b394:	d10f      	bne.n	800b3b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3b6:	2180      	movs	r1, #128	@ 0x80
 800b3b8:	68f8      	ldr	r0, [r7, #12]
 800b3ba:	f005 fab9 	bl	8010930 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f001 f85f 	bl	800c482 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d03a      	beq.n	800b444 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff fe42 	bl	800b058 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b3dc:	e032      	b.n	800b444 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f8f3 	bl	800b5d4 <USBD_CoreFindEP>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3f2:	7dfb      	ldrb	r3, [r7, #23]
 800b3f4:	2bff      	cmp	r3, #255	@ 0xff
 800b3f6:	d025      	beq.n	800b444 <USBD_LL_DataInStage+0x15a>
 800b3f8:	7dfb      	ldrb	r3, [r7, #23]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d122      	bne.n	800b444 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b404:	b2db      	uxtb	r3, r3
 800b406:	2b03      	cmp	r3, #3
 800b408:	d11c      	bne.n	800b444 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b40a:	7dfa      	ldrb	r2, [r7, #23]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	32ae      	adds	r2, #174	@ 0xae
 800b410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d014      	beq.n	800b444 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b41a:	7dfa      	ldrb	r2, [r7, #23]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b422:	7dfa      	ldrb	r2, [r7, #23]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	32ae      	adds	r2, #174	@ 0xae
 800b428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	7afa      	ldrb	r2, [r7, #11]
 800b430:	4611      	mov	r1, r2
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b43a:	7dbb      	ldrb	r3, [r7, #22]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b440:	7dbb      	ldrb	r3, [r7, #22]
 800b442:	e000      	b.n	800b446 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b44e:	b580      	push	{r7, lr}
 800b450:	b084      	sub	sp, #16
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b486:	2b00      	cmp	r3, #0
 800b488:	d014      	beq.n	800b4b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00e      	beq.n	800b4b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6852      	ldr	r2, [r2, #4]
 800b4a2:	b2d2      	uxtb	r2, r2
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	4798      	blx	r3
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4b4:	2340      	movs	r3, #64	@ 0x40
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f005 f9f3 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2240      	movs	r2, #64	@ 0x40
 800b4cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4d0:	2340      	movs	r3, #64	@ 0x40
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	2180      	movs	r1, #128	@ 0x80
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f005 f9e5 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2240      	movs	r2, #64	@ 0x40
 800b4e6:	621a      	str	r2, [r3, #32]

  return ret;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b083      	sub	sp, #12
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	78fa      	ldrb	r2, [r7, #3]
 800b502:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b520:	b2db      	uxtb	r3, r3
 800b522:	2b04      	cmp	r3, #4
 800b524:	d006      	beq.n	800b534 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2204      	movs	r2, #4
 800b538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d106      	bne.n	800b56c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b564:	b2da      	uxtb	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	370c      	adds	r7, #12
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d110      	bne.n	800b5b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b594:	2b00      	cmp	r3, #0
 800b596:	d00b      	beq.n	800b5b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b59e:	69db      	ldr	r3, [r3, #28]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d005      	beq.n	800b5b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b083      	sub	sp, #12
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	370c      	adds	r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b086      	sub	sp, #24
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	7812      	ldrb	r2, [r2, #0]
 800b610:	4293      	cmp	r3, r2
 800b612:	d91f      	bls.n	800b654 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b61a:	e013      	b.n	800b644 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b61c:	f107 030a 	add.w	r3, r7, #10
 800b620:	4619      	mov	r1, r3
 800b622:	6978      	ldr	r0, [r7, #20]
 800b624:	f000 f81b 	bl	800b65e <USBD_GetNextDesc>
 800b628:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	785b      	ldrb	r3, [r3, #1]
 800b62e:	2b05      	cmp	r3, #5
 800b630:	d108      	bne.n	800b644 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	789b      	ldrb	r3, [r3, #2]
 800b63a:	78fa      	ldrb	r2, [r7, #3]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d008      	beq.n	800b652 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	885b      	ldrh	r3, [r3, #2]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	897b      	ldrh	r3, [r7, #10]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d8e5      	bhi.n	800b61c <USBD_GetEpDesc+0x2e>
 800b650:	e000      	b.n	800b654 <USBD_GetEpDesc+0x66>
          break;
 800b652:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b654:	693b      	ldr	r3, [r7, #16]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b65e:	b480      	push	{r7}
 800b660:	b085      	sub	sp, #20
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	881b      	ldrh	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	7812      	ldrb	r2, [r2, #0]
 800b674:	4413      	add	r3, r2
 800b676:	b29a      	uxth	r2, r3
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	461a      	mov	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4413      	add	r3, r2
 800b686:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b688:	68fb      	ldr	r3, [r7, #12]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b696:	b480      	push	{r7}
 800b698:	b087      	sub	sp, #28
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6b4:	8a3b      	ldrh	r3, [r7, #16]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	b21a      	sxth	r2, r3
 800b6ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	b21b      	sxth	r3, r3
 800b6c2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	371c      	adds	r7, #28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6ea:	2b40      	cmp	r3, #64	@ 0x40
 800b6ec:	d005      	beq.n	800b6fa <USBD_StdDevReq+0x26>
 800b6ee:	2b40      	cmp	r3, #64	@ 0x40
 800b6f0:	d857      	bhi.n	800b7a2 <USBD_StdDevReq+0xce>
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00f      	beq.n	800b716 <USBD_StdDevReq+0x42>
 800b6f6:	2b20      	cmp	r3, #32
 800b6f8:	d153      	bne.n	800b7a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	32ae      	adds	r2, #174	@ 0xae
 800b704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	4798      	blx	r3
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]
      break;
 800b714:	e04a      	b.n	800b7ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	785b      	ldrb	r3, [r3, #1]
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d83b      	bhi.n	800b796 <USBD_StdDevReq+0xc2>
 800b71e:	a201      	add	r2, pc, #4	@ (adr r2, 800b724 <USBD_StdDevReq+0x50>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b779 	.word	0x0800b779
 800b728:	0800b78d 	.word	0x0800b78d
 800b72c:	0800b797 	.word	0x0800b797
 800b730:	0800b783 	.word	0x0800b783
 800b734:	0800b797 	.word	0x0800b797
 800b738:	0800b757 	.word	0x0800b757
 800b73c:	0800b74d 	.word	0x0800b74d
 800b740:	0800b797 	.word	0x0800b797
 800b744:	0800b76f 	.word	0x0800b76f
 800b748:	0800b761 	.word	0x0800b761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa3c 	bl	800bbcc <USBD_GetDescriptor>
          break;
 800b754:	e024      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fbcb 	bl	800bef4 <USBD_SetAddress>
          break;
 800b75e:	e01f      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fc0a 	bl	800bf7c <USBD_SetConfig>
 800b768:	4603      	mov	r3, r0
 800b76a:	73fb      	strb	r3, [r7, #15]
          break;
 800b76c:	e018      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b76e:	6839      	ldr	r1, [r7, #0]
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fcad 	bl	800c0d0 <USBD_GetConfig>
          break;
 800b776:	e013      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b778:	6839      	ldr	r1, [r7, #0]
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fcde 	bl	800c13c <USBD_GetStatus>
          break;
 800b780:	e00e      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fd0d 	bl	800c1a4 <USBD_SetFeature>
          break;
 800b78a:	e009      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fd31 	bl	800c1f6 <USBD_ClrFeature>
          break;
 800b794:	e004      	b.n	800b7a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd88 	bl	800c2ae <USBD_CtlError>
          break;
 800b79e:	bf00      	nop
      }
      break;
 800b7a0:	e004      	b.n	800b7ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b7a2:	6839      	ldr	r1, [r7, #0]
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fd82 	bl	800c2ae <USBD_CtlError>
      break;
 800b7aa:	bf00      	nop
  }

  return ret;
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop

0800b7b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7ce:	2b40      	cmp	r3, #64	@ 0x40
 800b7d0:	d005      	beq.n	800b7de <USBD_StdItfReq+0x26>
 800b7d2:	2b40      	cmp	r3, #64	@ 0x40
 800b7d4:	d852      	bhi.n	800b87c <USBD_StdItfReq+0xc4>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <USBD_StdItfReq+0x26>
 800b7da:	2b20      	cmp	r3, #32
 800b7dc:	d14e      	bne.n	800b87c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	2b02      	cmp	r3, #2
 800b7ea:	d840      	bhi.n	800b86e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	889b      	ldrh	r3, [r3, #4]
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d836      	bhi.n	800b864 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	889b      	ldrh	r3, [r3, #4]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fedb 	bl	800b5ba <USBD_CoreFindIF>
 800b804:	4603      	mov	r3, r0
 800b806:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b808:	7bbb      	ldrb	r3, [r7, #14]
 800b80a:	2bff      	cmp	r3, #255	@ 0xff
 800b80c:	d01d      	beq.n	800b84a <USBD_StdItfReq+0x92>
 800b80e:	7bbb      	ldrb	r3, [r7, #14]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d11a      	bne.n	800b84a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b814:	7bba      	ldrb	r2, [r7, #14]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	32ae      	adds	r2, #174	@ 0xae
 800b81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00f      	beq.n	800b844 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b824:	7bba      	ldrb	r2, [r7, #14]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b82c:	7bba      	ldrb	r2, [r7, #14]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	32ae      	adds	r2, #174	@ 0xae
 800b832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	6839      	ldr	r1, [r7, #0]
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	4798      	blx	r3
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b842:	e004      	b.n	800b84e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b844:	2303      	movs	r3, #3
 800b846:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b848:	e001      	b.n	800b84e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b84a:	2303      	movs	r3, #3
 800b84c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	88db      	ldrh	r3, [r3, #6]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d110      	bne.n	800b878 <USBD_StdItfReq+0xc0>
 800b856:	7bfb      	ldrb	r3, [r7, #15]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10d      	bne.n	800b878 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fdfd 	bl	800c45c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b862:	e009      	b.n	800b878 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fd21 	bl	800c2ae <USBD_CtlError>
          break;
 800b86c:	e004      	b.n	800b878 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 fd1c 	bl	800c2ae <USBD_CtlError>
          break;
 800b876:	e000      	b.n	800b87a <USBD_StdItfReq+0xc2>
          break;
 800b878:	bf00      	nop
      }
      break;
 800b87a:	e004      	b.n	800b886 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b87c:	6839      	ldr	r1, [r7, #0]
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fd15 	bl	800c2ae <USBD_CtlError>
      break;
 800b884:	bf00      	nop
  }

  return ret;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b89a:	2300      	movs	r3, #0
 800b89c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	889b      	ldrh	r3, [r3, #4]
 800b8a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8ac:	2b40      	cmp	r3, #64	@ 0x40
 800b8ae:	d007      	beq.n	800b8c0 <USBD_StdEPReq+0x30>
 800b8b0:	2b40      	cmp	r3, #64	@ 0x40
 800b8b2:	f200 817f 	bhi.w	800bbb4 <USBD_StdEPReq+0x324>
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d02a      	beq.n	800b910 <USBD_StdEPReq+0x80>
 800b8ba:	2b20      	cmp	r3, #32
 800b8bc:	f040 817a 	bne.w	800bbb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8c0:	7bbb      	ldrb	r3, [r7, #14]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7ff fe85 	bl	800b5d4 <USBD_CoreFindEP>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8ce:	7b7b      	ldrb	r3, [r7, #13]
 800b8d0:	2bff      	cmp	r3, #255	@ 0xff
 800b8d2:	f000 8174 	beq.w	800bbbe <USBD_StdEPReq+0x32e>
 800b8d6:	7b7b      	ldrb	r3, [r7, #13]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f040 8170 	bne.w	800bbbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b8de:	7b7a      	ldrb	r2, [r7, #13]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b8e6:	7b7a      	ldrb	r2, [r7, #13]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	32ae      	adds	r2, #174	@ 0xae
 800b8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 8163 	beq.w	800bbbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b8f8:	7b7a      	ldrb	r2, [r7, #13]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	32ae      	adds	r2, #174	@ 0xae
 800b8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b90e:	e156      	b.n	800bbbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	2b03      	cmp	r3, #3
 800b916:	d008      	beq.n	800b92a <USBD_StdEPReq+0x9a>
 800b918:	2b03      	cmp	r3, #3
 800b91a:	f300 8145 	bgt.w	800bba8 <USBD_StdEPReq+0x318>
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 809b 	beq.w	800ba5a <USBD_StdEPReq+0x1ca>
 800b924:	2b01      	cmp	r3, #1
 800b926:	d03c      	beq.n	800b9a2 <USBD_StdEPReq+0x112>
 800b928:	e13e      	b.n	800bba8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b930:	b2db      	uxtb	r3, r3
 800b932:	2b02      	cmp	r3, #2
 800b934:	d002      	beq.n	800b93c <USBD_StdEPReq+0xac>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d016      	beq.n	800b968 <USBD_StdEPReq+0xd8>
 800b93a:	e02c      	b.n	800b996 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00d      	beq.n	800b95e <USBD_StdEPReq+0xce>
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b80      	cmp	r3, #128	@ 0x80
 800b946:	d00a      	beq.n	800b95e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	4619      	mov	r1, r3
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f004 ffef 	bl	8010930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b952:	2180      	movs	r1, #128	@ 0x80
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f004 ffeb 	bl	8010930 <USBD_LL_StallEP>
 800b95a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b95c:	e020      	b.n	800b9a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b95e:	6839      	ldr	r1, [r7, #0]
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fca4 	bl	800c2ae <USBD_CtlError>
              break;
 800b966:	e01b      	b.n	800b9a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	885b      	ldrh	r3, [r3, #2]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10e      	bne.n	800b98e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00b      	beq.n	800b98e <USBD_StdEPReq+0xfe>
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	2b80      	cmp	r3, #128	@ 0x80
 800b97a:	d008      	beq.n	800b98e <USBD_StdEPReq+0xfe>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	88db      	ldrh	r3, [r3, #6]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f004 ffd1 	bl	8010930 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fd64 	bl	800c45c <USBD_CtlSendStatus>

              break;
 800b994:	e004      	b.n	800b9a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fc88 	bl	800c2ae <USBD_CtlError>
              break;
 800b99e:	bf00      	nop
          }
          break;
 800b9a0:	e107      	b.n	800bbb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d002      	beq.n	800b9b4 <USBD_StdEPReq+0x124>
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d016      	beq.n	800b9e0 <USBD_StdEPReq+0x150>
 800b9b2:	e04b      	b.n	800ba4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00d      	beq.n	800b9d6 <USBD_StdEPReq+0x146>
 800b9ba:	7bbb      	ldrb	r3, [r7, #14]
 800b9bc:	2b80      	cmp	r3, #128	@ 0x80
 800b9be:	d00a      	beq.n	800b9d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9c0:	7bbb      	ldrb	r3, [r7, #14]
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f004 ffb3 	bl	8010930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ca:	2180      	movs	r1, #128	@ 0x80
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f004 ffaf 	bl	8010930 <USBD_LL_StallEP>
 800b9d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9d4:	e040      	b.n	800ba58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fc68 	bl	800c2ae <USBD_CtlError>
              break;
 800b9de:	e03b      	b.n	800ba58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	885b      	ldrh	r3, [r3, #2]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d136      	bne.n	800ba56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f004 ffb9 	bl	801096e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 fd2d 	bl	800c45c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fde4 	bl	800b5d4 <USBD_CoreFindEP>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba10:	7b7b      	ldrb	r3, [r7, #13]
 800ba12:	2bff      	cmp	r3, #255	@ 0xff
 800ba14:	d01f      	beq.n	800ba56 <USBD_StdEPReq+0x1c6>
 800ba16:	7b7b      	ldrb	r3, [r7, #13]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d11c      	bne.n	800ba56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba1c:	7b7a      	ldrb	r2, [r7, #13]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba24:	7b7a      	ldrb	r2, [r7, #13]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	32ae      	adds	r2, #174	@ 0xae
 800ba2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d010      	beq.n	800ba56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba34:	7b7a      	ldrb	r2, [r7, #13]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	@ 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba4a:	e004      	b.n	800ba56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fc2d 	bl	800c2ae <USBD_CtlError>
              break;
 800ba54:	e000      	b.n	800ba58 <USBD_StdEPReq+0x1c8>
              break;
 800ba56:	bf00      	nop
          }
          break;
 800ba58:	e0ab      	b.n	800bbb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d002      	beq.n	800ba6c <USBD_StdEPReq+0x1dc>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	d032      	beq.n	800bad0 <USBD_StdEPReq+0x240>
 800ba6a:	e097      	b.n	800bb9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba6c:	7bbb      	ldrb	r3, [r7, #14]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d007      	beq.n	800ba82 <USBD_StdEPReq+0x1f2>
 800ba72:	7bbb      	ldrb	r3, [r7, #14]
 800ba74:	2b80      	cmp	r3, #128	@ 0x80
 800ba76:	d004      	beq.n	800ba82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba78:	6839      	ldr	r1, [r7, #0]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fc17 	bl	800c2ae <USBD_CtlError>
                break;
 800ba80:	e091      	b.n	800bba6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da0b      	bge.n	800baa2 <USBD_StdEPReq+0x212>
 800ba8a:	7bbb      	ldrb	r3, [r7, #14]
 800ba8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba90:	4613      	mov	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	3310      	adds	r3, #16
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	3304      	adds	r3, #4
 800baa0:	e00b      	b.n	800baba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baa2:	7bbb      	ldrb	r3, [r7, #14]
 800baa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	4413      	add	r3, r2
 800bab8:	3304      	adds	r3, #4
 800baba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	2202      	movs	r2, #2
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fc6d 	bl	800c3a8 <USBD_CtlSendData>
              break;
 800bace:	e06a      	b.n	800bba6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	da11      	bge.n	800bafc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	f003 020f 	and.w	r2, r3, #15
 800bade:	6879      	ldr	r1, [r7, #4]
 800bae0:	4613      	mov	r3, r2
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	4413      	add	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	440b      	add	r3, r1
 800baea:	3324      	adds	r3, #36	@ 0x24
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d117      	bne.n	800bb22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fbda 	bl	800c2ae <USBD_CtlError>
                  break;
 800bafa:	e054      	b.n	800bba6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
 800bafe:	f003 020f 	and.w	r2, r3, #15
 800bb02:	6879      	ldr	r1, [r7, #4]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb12:	881b      	ldrh	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fbc7 	bl	800c2ae <USBD_CtlError>
                  break;
 800bb20:	e041      	b.n	800bba6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	da0b      	bge.n	800bb42 <USBD_StdEPReq+0x2b2>
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	3310      	adds	r3, #16
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	3304      	adds	r3, #4
 800bb40:	e00b      	b.n	800bb5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb42:	7bbb      	ldrb	r3, [r7, #14]
 800bb44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	4413      	add	r3, r2
 800bb58:	3304      	adds	r3, #4
 800bb5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <USBD_StdEPReq+0x2d8>
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	2b80      	cmp	r3, #128	@ 0x80
 800bb66:	d103      	bne.n	800bb70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	e00e      	b.n	800bb8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f004 ff19 	bl	80109ac <USBD_LL_IsStallEP>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2201      	movs	r2, #1
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	e002      	b.n	800bb8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2202      	movs	r2, #2
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fc07 	bl	800c3a8 <USBD_CtlSendData>
              break;
 800bb9a:	e004      	b.n	800bba6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fb85 	bl	800c2ae <USBD_CtlError>
              break;
 800bba4:	bf00      	nop
          }
          break;
 800bba6:	e004      	b.n	800bbb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bba8:	6839      	ldr	r1, [r7, #0]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fb7f 	bl	800c2ae <USBD_CtlError>
          break;
 800bbb0:	bf00      	nop
      }
      break;
 800bbb2:	e005      	b.n	800bbc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bbb4:	6839      	ldr	r1, [r7, #0]
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fb79 	bl	800c2ae <USBD_CtlError>
      break;
 800bbbc:	e000      	b.n	800bbc0 <USBD_StdEPReq+0x330>
      break;
 800bbbe:	bf00      	nop
  }

  return ret;
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3710      	adds	r7, #16
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
	...

0800bbcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	885b      	ldrh	r3, [r3, #2]
 800bbe6:	0a1b      	lsrs	r3, r3, #8
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	2b0e      	cmp	r3, #14
 800bbee:	f200 8152 	bhi.w	800be96 <USBD_GetDescriptor+0x2ca>
 800bbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf8 <USBD_GetDescriptor+0x2c>)
 800bbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf8:	0800bc69 	.word	0x0800bc69
 800bbfc:	0800bc81 	.word	0x0800bc81
 800bc00:	0800bcc1 	.word	0x0800bcc1
 800bc04:	0800be97 	.word	0x0800be97
 800bc08:	0800be97 	.word	0x0800be97
 800bc0c:	0800be37 	.word	0x0800be37
 800bc10:	0800be63 	.word	0x0800be63
 800bc14:	0800be97 	.word	0x0800be97
 800bc18:	0800be97 	.word	0x0800be97
 800bc1c:	0800be97 	.word	0x0800be97
 800bc20:	0800be97 	.word	0x0800be97
 800bc24:	0800be97 	.word	0x0800be97
 800bc28:	0800be97 	.word	0x0800be97
 800bc2c:	0800be97 	.word	0x0800be97
 800bc30:	0800bc35 	.word	0x0800bc35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc46:	69db      	ldr	r3, [r3, #28]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	7c12      	ldrb	r2, [r2, #16]
 800bc4c:	f107 0108 	add.w	r1, r7, #8
 800bc50:	4610      	mov	r0, r2
 800bc52:	4798      	blx	r3
 800bc54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc56:	e126      	b.n	800bea6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fb27 	bl	800c2ae <USBD_CtlError>
        err++;
 800bc60:	7afb      	ldrb	r3, [r7, #11]
 800bc62:	3301      	adds	r3, #1
 800bc64:	72fb      	strb	r3, [r7, #11]
      break;
 800bc66:	e11e      	b.n	800bea6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	7c12      	ldrb	r2, [r2, #16]
 800bc74:	f107 0108 	add.w	r1, r7, #8
 800bc78:	4610      	mov	r0, r2
 800bc7a:	4798      	blx	r3
 800bc7c:	60f8      	str	r0, [r7, #12]
      break;
 800bc7e:	e112      	b.n	800bea6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	7c1b      	ldrb	r3, [r3, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10d      	bne.n	800bca4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc90:	f107 0208 	add.w	r2, r7, #8
 800bc94:	4610      	mov	r0, r2
 800bc96:	4798      	blx	r3
 800bc98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	2202      	movs	r2, #2
 800bca0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bca2:	e100      	b.n	800bea6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcac:	f107 0208 	add.w	r2, r7, #8
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	4798      	blx	r3
 800bcb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	2202      	movs	r2, #2
 800bcbc:	701a      	strb	r2, [r3, #0]
      break;
 800bcbe:	e0f2      	b.n	800bea6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	885b      	ldrh	r3, [r3, #2]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	f200 80ac 	bhi.w	800be24 <USBD_GetDescriptor+0x258>
 800bccc:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <USBD_GetDescriptor+0x108>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bced 	.word	0x0800bced
 800bcd8:	0800bd21 	.word	0x0800bd21
 800bcdc:	0800bd55 	.word	0x0800bd55
 800bce0:	0800bd89 	.word	0x0800bd89
 800bce4:	0800bdbd 	.word	0x0800bdbd
 800bce8:	0800bdf1 	.word	0x0800bdf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00b      	beq.n	800bd10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	7c12      	ldrb	r2, [r2, #16]
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	4610      	mov	r0, r2
 800bd0a:	4798      	blx	r3
 800bd0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd0e:	e091      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 facb 	bl	800c2ae <USBD_CtlError>
            err++;
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd1e:	e089      	b.n	800be34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00b      	beq.n	800bd44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	7c12      	ldrb	r2, [r2, #16]
 800bd38:	f107 0108 	add.w	r1, r7, #8
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
 800bd40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd42:	e077      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd44:	6839      	ldr	r1, [r7, #0]
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fab1 	bl	800c2ae <USBD_CtlError>
            err++;
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	72fb      	strb	r3, [r7, #11]
          break;
 800bd52:	e06f      	b.n	800be34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00b      	beq.n	800bd78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	7c12      	ldrb	r2, [r2, #16]
 800bd6c:	f107 0108 	add.w	r1, r7, #8
 800bd70:	4610      	mov	r0, r2
 800bd72:	4798      	blx	r3
 800bd74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd76:	e05d      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd78:	6839      	ldr	r1, [r7, #0]
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f000 fa97 	bl	800c2ae <USBD_CtlError>
            err++;
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	3301      	adds	r3, #1
 800bd84:	72fb      	strb	r3, [r7, #11]
          break;
 800bd86:	e055      	b.n	800be34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7c12      	ldrb	r2, [r2, #16]
 800bda0:	f107 0108 	add.w	r1, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdaa:	e043      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f000 fa7d 	bl	800c2ae <USBD_CtlError>
            err++;
 800bdb4:	7afb      	ldrb	r3, [r7, #11]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdba:	e03b      	b.n	800be34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdc2:	695b      	ldr	r3, [r3, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00b      	beq.n	800bde0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	7c12      	ldrb	r2, [r2, #16]
 800bdd4:	f107 0108 	add.w	r1, r7, #8
 800bdd8:	4610      	mov	r0, r2
 800bdda:	4798      	blx	r3
 800bddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdde:	e029      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fa63 	bl	800c2ae <USBD_CtlError>
            err++;
 800bde8:	7afb      	ldrb	r3, [r7, #11]
 800bdea:	3301      	adds	r3, #1
 800bdec:	72fb      	strb	r3, [r7, #11]
          break;
 800bdee:	e021      	b.n	800be34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00b      	beq.n	800be14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	7c12      	ldrb	r2, [r2, #16]
 800be08:	f107 0108 	add.w	r1, r7, #8
 800be0c:	4610      	mov	r0, r2
 800be0e:	4798      	blx	r3
 800be10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be12:	e00f      	b.n	800be34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be14:	6839      	ldr	r1, [r7, #0]
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa49 	bl	800c2ae <USBD_CtlError>
            err++;
 800be1c:	7afb      	ldrb	r3, [r7, #11]
 800be1e:	3301      	adds	r3, #1
 800be20:	72fb      	strb	r3, [r7, #11]
          break;
 800be22:	e007      	b.n	800be34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fa41 	bl	800c2ae <USBD_CtlError>
          err++;
 800be2c:	7afb      	ldrb	r3, [r7, #11]
 800be2e:	3301      	adds	r3, #1
 800be30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be32:	bf00      	nop
      }
      break;
 800be34:	e037      	b.n	800bea6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7c1b      	ldrb	r3, [r3, #16]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d109      	bne.n	800be52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be46:	f107 0208 	add.w	r2, r7, #8
 800be4a:	4610      	mov	r0, r2
 800be4c:	4798      	blx	r3
 800be4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be50:	e029      	b.n	800bea6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fa2a 	bl	800c2ae <USBD_CtlError>
        err++;
 800be5a:	7afb      	ldrb	r3, [r7, #11]
 800be5c:	3301      	adds	r3, #1
 800be5e:	72fb      	strb	r3, [r7, #11]
      break;
 800be60:	e021      	b.n	800bea6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	7c1b      	ldrb	r3, [r3, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10d      	bne.n	800be86 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be72:	f107 0208 	add.w	r2, r7, #8
 800be76:	4610      	mov	r0, r2
 800be78:	4798      	blx	r3
 800be7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3301      	adds	r3, #1
 800be80:	2207      	movs	r2, #7
 800be82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be84:	e00f      	b.n	800bea6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fa10 	bl	800c2ae <USBD_CtlError>
        err++;
 800be8e:	7afb      	ldrb	r3, [r7, #11]
 800be90:	3301      	adds	r3, #1
 800be92:	72fb      	strb	r3, [r7, #11]
      break;
 800be94:	e007      	b.n	800bea6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800be96:	6839      	ldr	r1, [r7, #0]
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 fa08 	bl	800c2ae <USBD_CtlError>
      err++;
 800be9e:	7afb      	ldrb	r3, [r7, #11]
 800bea0:	3301      	adds	r3, #1
 800bea2:	72fb      	strb	r3, [r7, #11]
      break;
 800bea4:	bf00      	nop
  }

  if (err != 0U)
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d11e      	bne.n	800beea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	88db      	ldrh	r3, [r3, #6]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d016      	beq.n	800bee2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800beb4:	893b      	ldrh	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88da      	ldrh	r2, [r3, #6]
 800bebe:	893b      	ldrh	r3, [r7, #8]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	bf28      	it	cs
 800bec4:	4613      	movcs	r3, r2
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800beca:	893b      	ldrh	r3, [r7, #8]
 800becc:	461a      	mov	r2, r3
 800bece:	68f9      	ldr	r1, [r7, #12]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fa69 	bl	800c3a8 <USBD_CtlSendData>
 800bed6:	e009      	b.n	800beec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f9e7 	bl	800c2ae <USBD_CtlError>
 800bee0:	e004      	b.n	800beec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 faba 	bl	800c45c <USBD_CtlSendStatus>
 800bee8:	e000      	b.n	800beec <USBD_GetDescriptor+0x320>
    return;
 800beea:	bf00      	nop
  }
}
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop

0800bef4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	889b      	ldrh	r3, [r3, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d131      	bne.n	800bf6a <USBD_SetAddress+0x76>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	88db      	ldrh	r3, [r3, #6]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d12d      	bne.n	800bf6a <USBD_SetAddress+0x76>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	885b      	ldrh	r3, [r3, #2]
 800bf12:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf14:	d829      	bhi.n	800bf6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	885b      	ldrh	r3, [r3, #2]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	d104      	bne.n	800bf38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf2e:	6839      	ldr	r1, [r7, #0]
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f000 f9bc 	bl	800c2ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf36:	e01d      	b.n	800bf74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7bfa      	ldrb	r2, [r7, #15]
 800bf3c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	4619      	mov	r1, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f004 fd5d 	bl	8010a04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fa86 	bl	800c45c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf50:	7bfb      	ldrb	r3, [r7, #15]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf5e:	e009      	b.n	800bf74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf68:	e004      	b.n	800bf74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f99e 	bl	800c2ae <USBD_CtlError>
  }
}
 800bf72:	bf00      	nop
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	885b      	ldrh	r3, [r3, #2]
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	4b4e      	ldr	r3, [pc, #312]	@ (800c0cc <USBD_SetConfig+0x150>)
 800bf92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf94:	4b4d      	ldr	r3, [pc, #308]	@ (800c0cc <USBD_SetConfig+0x150>)
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d905      	bls.n	800bfa8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f985 	bl	800c2ae <USBD_CtlError>
    return USBD_FAIL;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e08c      	b.n	800c0c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	d002      	beq.n	800bfba <USBD_SetConfig+0x3e>
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d029      	beq.n	800c00c <USBD_SetConfig+0x90>
 800bfb8:	e075      	b.n	800c0a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfba:	4b44      	ldr	r3, [pc, #272]	@ (800c0cc <USBD_SetConfig+0x150>)
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d020      	beq.n	800c004 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bfc2:	4b42      	ldr	r3, [pc, #264]	@ (800c0cc <USBD_SetConfig+0x150>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfcc:	4b3f      	ldr	r3, [pc, #252]	@ (800c0cc <USBD_SetConfig+0x150>)
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff f84b 	bl	800b06e <USBD_SetClassConfig>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d008      	beq.n	800bff4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f962 	bl	800c2ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2202      	movs	r2, #2
 800bfee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bff2:	e065      	b.n	800c0c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa31 	bl	800c45c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2203      	movs	r2, #3
 800bffe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c002:	e05d      	b.n	800c0c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fa29 	bl	800c45c <USBD_CtlSendStatus>
      break;
 800c00a:	e059      	b.n	800c0c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c00c:	4b2f      	ldr	r3, [pc, #188]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d112      	bne.n	800c03a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2202      	movs	r2, #2
 800c018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c01c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	461a      	mov	r2, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c026:	4b29      	ldr	r3, [pc, #164]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7ff f83a 	bl	800b0a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa12 	bl	800c45c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c038:	e042      	b.n	800c0c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c03a:	4b24      	ldr	r3, [pc, #144]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	429a      	cmp	r2, r3
 800c046:	d02a      	beq.n	800c09e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff f828 	bl	800b0a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c056:	4b1d      	ldr	r3, [pc, #116]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	461a      	mov	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c060:	4b1a      	ldr	r3, [pc, #104]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4619      	mov	r1, r3
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff f801 	bl	800b06e <USBD_SetClassConfig>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c070:	7bfb      	ldrb	r3, [r7, #15]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00f      	beq.n	800c096 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f918 	bl	800c2ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	b2db      	uxtb	r3, r3
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff f80d 	bl	800b0a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2202      	movs	r2, #2
 800c090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c094:	e014      	b.n	800c0c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f9e0 	bl	800c45c <USBD_CtlSendStatus>
      break;
 800c09c:	e010      	b.n	800c0c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f9dc 	bl	800c45c <USBD_CtlSendStatus>
      break;
 800c0a4:	e00c      	b.n	800c0c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f900 	bl	800c2ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0ae:	4b07      	ldr	r3, [pc, #28]	@ (800c0cc <USBD_SetConfig+0x150>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f7fe fff6 	bl	800b0a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c0be:	bf00      	nop
  }

  return ret;
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000580 	.word	0x20000580

0800c0d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	88db      	ldrh	r3, [r3, #6]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d004      	beq.n	800c0ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f8e2 	bl	800c2ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0ea:	e023      	b.n	800c134 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	dc02      	bgt.n	800c0fe <USBD_GetConfig+0x2e>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dc03      	bgt.n	800c104 <USBD_GetConfig+0x34>
 800c0fc:	e015      	b.n	800c12a <USBD_GetConfig+0x5a>
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d00b      	beq.n	800c11a <USBD_GetConfig+0x4a>
 800c102:	e012      	b.n	800c12a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3308      	adds	r3, #8
 800c10e:	2201      	movs	r2, #1
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f948 	bl	800c3a8 <USBD_CtlSendData>
        break;
 800c118:	e00c      	b.n	800c134 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	3304      	adds	r3, #4
 800c11e:	2201      	movs	r2, #1
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f940 	bl	800c3a8 <USBD_CtlSendData>
        break;
 800c128:	e004      	b.n	800c134 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f8be 	bl	800c2ae <USBD_CtlError>
        break;
 800c132:	bf00      	nop
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	3b01      	subs	r3, #1
 800c150:	2b02      	cmp	r3, #2
 800c152:	d81e      	bhi.n	800c192 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	88db      	ldrh	r3, [r3, #6]
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d004      	beq.n	800c166 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 f8a5 	bl	800c2ae <USBD_CtlError>
        break;
 800c164:	e01a      	b.n	800c19c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d005      	beq.n	800c182 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	f043 0202 	orr.w	r2, r3, #2
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	330c      	adds	r3, #12
 800c186:	2202      	movs	r2, #2
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f90c 	bl	800c3a8 <USBD_CtlSendData>
      break;
 800c190:	e004      	b.n	800c19c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f88a 	bl	800c2ae <USBD_CtlError>
      break;
 800c19a:	bf00      	nop
  }
}
 800c19c:	bf00      	nop
 800c19e:	3708      	adds	r7, #8
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d107      	bne.n	800c1c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f94c 	bl	800c45c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c1c4:	e013      	b.n	800c1ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	885b      	ldrh	r3, [r3, #2]
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d10b      	bne.n	800c1e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	889b      	ldrh	r3, [r3, #4]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f93c 	bl	800c45c <USBD_CtlSendStatus>
}
 800c1e4:	e003      	b.n	800c1ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f860 	bl	800c2ae <USBD_CtlError>
}
 800c1ee:	bf00      	nop
 800c1f0:	3708      	adds	r7, #8
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b082      	sub	sp, #8
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c206:	b2db      	uxtb	r3, r3
 800c208:	3b01      	subs	r3, #1
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d80b      	bhi.n	800c226 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	885b      	ldrh	r3, [r3, #2]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d10c      	bne.n	800c230 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f91c 	bl	800c45c <USBD_CtlSendStatus>
      }
      break;
 800c224:	e004      	b.n	800c230 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f840 	bl	800c2ae <USBD_CtlError>
      break;
 800c22e:	e000      	b.n	800c232 <USBD_ClrFeature+0x3c>
      break;
 800c230:	bf00      	nop
  }
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	781a      	ldrb	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3301      	adds	r3, #1
 800c262:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f7ff fa16 	bl	800b696 <SWAPBYTE>
 800c26a:	4603      	mov	r3, r0
 800c26c:	461a      	mov	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3301      	adds	r3, #1
 800c276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fa09 	bl	800b696 <SWAPBYTE>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c298:	68f8      	ldr	r0, [r7, #12]
 800c29a:	f7ff f9fc 	bl	800b696 <SWAPBYTE>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	80da      	strh	r2, [r3, #6]
}
 800c2a6:	bf00      	nop
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b082      	sub	sp, #8
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b8:	2180      	movs	r1, #128	@ 0x80
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f004 fb38 	bl	8010930 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f004 fb34 	bl	8010930 <USBD_LL_StallEP>
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d042      	beq.n	800c36c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c2ea:	6938      	ldr	r0, [r7, #16]
 800c2ec:	f000 f842 	bl	800c374 <USBD_GetLen>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2fa:	d808      	bhi.n	800c30e <USBD_GetString+0x3e>
 800c2fc:	6938      	ldr	r0, [r7, #16]
 800c2fe:	f000 f839 	bl	800c374 <USBD_GetLen>
 800c302:	4603      	mov	r3, r0
 800c304:	3301      	adds	r3, #1
 800c306:	b29b      	uxth	r3, r3
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	e001      	b.n	800c312 <USBD_GetString+0x42>
 800c30e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	4413      	add	r3, r2
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7812      	ldrb	r2, [r2, #0]
 800c320:	701a      	strb	r2, [r3, #0]
  idx++;
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	3301      	adds	r3, #1
 800c326:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	4413      	add	r3, r2
 800c32e:	2203      	movs	r2, #3
 800c330:	701a      	strb	r2, [r3, #0]
  idx++;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	3301      	adds	r3, #1
 800c336:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c338:	e013      	b.n	800c362 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	4413      	add	r3, r2
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	7812      	ldrb	r2, [r2, #0]
 800c344:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	3301      	adds	r3, #1
 800c34a:	613b      	str	r3, [r7, #16]
    idx++;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	3301      	adds	r3, #1
 800c350:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	4413      	add	r3, r2
 800c358:	2200      	movs	r2, #0
 800c35a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	3301      	adds	r3, #1
 800c360:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1e7      	bne.n	800c33a <USBD_GetString+0x6a>
 800c36a:	e000      	b.n	800c36e <USBD_GetString+0x9e>
    return;
 800c36c:	bf00      	nop
  }
}
 800c36e:	3718      	adds	r7, #24
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c384:	e005      	b.n	800c392 <USBD_GetLen+0x1e>
  {
    len++;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
 800c388:	3301      	adds	r3, #1
 800c38a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	3301      	adds	r3, #1
 800c390:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1f5      	bne.n	800c386 <USBD_GetLen+0x12>
  }

  return len;
 800c39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f004 fb37 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f004 fb26 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2203      	movs	r2, #3
 800c410:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68ba      	ldr	r2, [r7, #8]
 800c428:	2100      	movs	r1, #0
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f004 fb2a 	bl	8010a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b084      	sub	sp, #16
 800c43e:	af00      	add	r7, sp, #0
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	2100      	movs	r1, #0
 800c44c:	68f8      	ldr	r0, [r7, #12]
 800c44e:	f004 fb19 	bl	8010a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2204      	movs	r2, #4
 800c468:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c46c:	2300      	movs	r3, #0
 800c46e:	2200      	movs	r2, #0
 800c470:	2100      	movs	r1, #0
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f004 fae5 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2205      	movs	r2, #5
 800c48e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c492:	2300      	movs	r3, #0
 800c494:	2200      	movs	r2, #0
 800c496:	2100      	movs	r1, #0
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f004 faf3 	bl	8010a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <__NVIC_SetPriority>:
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	6039      	str	r1, [r7, #0]
 800c4b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	db0a      	blt.n	800c4d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	b2da      	uxtb	r2, r3
 800c4c0:	490c      	ldr	r1, [pc, #48]	@ (800c4f4 <__NVIC_SetPriority+0x4c>)
 800c4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4c6:	0112      	lsls	r2, r2, #4
 800c4c8:	b2d2      	uxtb	r2, r2
 800c4ca:	440b      	add	r3, r1
 800c4cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c4d0:	e00a      	b.n	800c4e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	4908      	ldr	r1, [pc, #32]	@ (800c4f8 <__NVIC_SetPriority+0x50>)
 800c4d8:	79fb      	ldrb	r3, [r7, #7]
 800c4da:	f003 030f 	and.w	r3, r3, #15
 800c4de:	3b04      	subs	r3, #4
 800c4e0:	0112      	lsls	r2, r2, #4
 800c4e2:	b2d2      	uxtb	r2, r2
 800c4e4:	440b      	add	r3, r1
 800c4e6:	761a      	strb	r2, [r3, #24]
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	e000e100 	.word	0xe000e100
 800c4f8:	e000ed00 	.word	0xe000ed00

0800c4fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <SysTick_Handler+0x1c>)
 800c502:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c504:	f002 fab0 	bl	800ea68 <xTaskGetSchedulerState>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d001      	beq.n	800c512 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c50e:	f003 fbb3 	bl	800fc78 <xPortSysTickHandler>
  }
}
 800c512:	bf00      	nop
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	e000e010 	.word	0xe000e010

0800c51c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c520:	2100      	movs	r1, #0
 800c522:	f06f 0004 	mvn.w	r0, #4
 800c526:	f7ff ffbf 	bl	800c4a8 <__NVIC_SetPriority>
#endif
}
 800c52a:	bf00      	nop
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c536:	f3ef 8305 	mrs	r3, IPSR
 800c53a:	603b      	str	r3, [r7, #0]
  return(result);
 800c53c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c542:	f06f 0305 	mvn.w	r3, #5
 800c546:	607b      	str	r3, [r7, #4]
 800c548:	e00c      	b.n	800c564 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c54a:	4b0a      	ldr	r3, [pc, #40]	@ (800c574 <osKernelInitialize+0x44>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d105      	bne.n	800c55e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c552:	4b08      	ldr	r3, [pc, #32]	@ (800c574 <osKernelInitialize+0x44>)
 800c554:	2201      	movs	r2, #1
 800c556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c558:	2300      	movs	r3, #0
 800c55a:	607b      	str	r3, [r7, #4]
 800c55c:	e002      	b.n	800c564 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c55e:	f04f 33ff 	mov.w	r3, #4294967295
 800c562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c564:	687b      	ldr	r3, [r7, #4]
}
 800c566:	4618      	mov	r0, r3
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
 800c572:	bf00      	nop
 800c574:	20000584 	.word	0x20000584

0800c578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c57e:	f3ef 8305 	mrs	r3, IPSR
 800c582:	603b      	str	r3, [r7, #0]
  return(result);
 800c584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c58a:	f06f 0305 	mvn.w	r3, #5
 800c58e:	607b      	str	r3, [r7, #4]
 800c590:	e010      	b.n	800c5b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c592:	4b0b      	ldr	r3, [pc, #44]	@ (800c5c0 <osKernelStart+0x48>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d109      	bne.n	800c5ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c59a:	f7ff ffbf 	bl	800c51c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c59e:	4b08      	ldr	r3, [pc, #32]	@ (800c5c0 <osKernelStart+0x48>)
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c5a4:	f001 fdec 	bl	800e180 <vTaskStartScheduler>
      stat = osOK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	607b      	str	r3, [r7, #4]
 800c5ac:	e002      	b.n	800c5b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c5b4:	687b      	ldr	r3, [r7, #4]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000584 	.word	0x20000584

0800c5c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b08e      	sub	sp, #56	@ 0x38
 800c5c8:	af04      	add	r7, sp, #16
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5d4:	f3ef 8305 	mrs	r3, IPSR
 800c5d8:	617b      	str	r3, [r7, #20]
  return(result);
 800c5da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d17e      	bne.n	800c6de <osThreadNew+0x11a>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d07b      	beq.n	800c6de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c5e6:	2380      	movs	r3, #128	@ 0x80
 800c5e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c5ea:	2318      	movs	r3, #24
 800c5ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d045      	beq.n	800c68a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <osThreadNew+0x48>
        name = attr->name;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d002      	beq.n	800c61a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d008      	beq.n	800c632 <osThreadNew+0x6e>
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	2b38      	cmp	r3, #56	@ 0x38
 800c624:	d805      	bhi.n	800c632 <osThreadNew+0x6e>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f003 0301 	and.w	r3, r3, #1
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d001      	beq.n	800c636 <osThreadNew+0x72>
        return (NULL);
 800c632:	2300      	movs	r3, #0
 800c634:	e054      	b.n	800c6e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d003      	beq.n	800c646 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	089b      	lsrs	r3, r3, #2
 800c644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00e      	beq.n	800c66c <osThreadNew+0xa8>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	2ba7      	cmp	r3, #167	@ 0xa7
 800c654:	d90a      	bls.n	800c66c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d006      	beq.n	800c66c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d002      	beq.n	800c66c <osThreadNew+0xa8>
        mem = 1;
 800c666:	2301      	movs	r3, #1
 800c668:	61bb      	str	r3, [r7, #24]
 800c66a:	e010      	b.n	800c68e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10c      	bne.n	800c68e <osThreadNew+0xca>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d108      	bne.n	800c68e <osThreadNew+0xca>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <osThreadNew+0xca>
          mem = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	61bb      	str	r3, [r7, #24]
 800c688:	e001      	b.n	800c68e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d110      	bne.n	800c6b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c69c:	9202      	str	r2, [sp, #8]
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6a3a      	ldr	r2, [r7, #32]
 800c6a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f001 fbaa 	bl	800de04 <xTaskCreateStatic>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	613b      	str	r3, [r7, #16]
 800c6b4:	e013      	b.n	800c6de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d110      	bne.n	800c6de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c6bc:	6a3b      	ldr	r3, [r7, #32]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f107 0310 	add.w	r3, r7, #16
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f001 fbf8 	bl	800dec4 <xTaskCreate>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d001      	beq.n	800c6de <osThreadNew+0x11a>
            hTask = NULL;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c6de:	693b      	ldr	r3, [r7, #16]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3728      	adds	r7, #40	@ 0x28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <osThreadFlagsSet+0x1a>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	da03      	bge.n	800c70a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800c702:	f06f 0303 	mvn.w	r3, #3
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e035      	b.n	800c776 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800c70a:	f04f 33ff 	mov.w	r3, #4294967295
 800c70e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c710:	f3ef 8305 	mrs	r3, IPSR
 800c714:	613b      	str	r3, [r7, #16]
  return(result);
 800c716:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01f      	beq.n	800c75c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800c720:	f107 0308 	add.w	r3, r7, #8
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	2300      	movs	r3, #0
 800c728:	2201      	movs	r2, #1
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6978      	ldr	r0, [r7, #20]
 800c72e:	f002 fc4b 	bl	800efc8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800c732:	f107 030c 	add.w	r3, r7, #12
 800c736:	2200      	movs	r2, #0
 800c738:	9200      	str	r2, [sp, #0]
 800c73a:	2200      	movs	r2, #0
 800c73c:	2100      	movs	r1, #0
 800c73e:	6978      	ldr	r0, [r7, #20]
 800c740:	f002 fc42 	bl	800efc8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d015      	beq.n	800c776 <osThreadFlagsSet+0x8e>
 800c74a:	4b0d      	ldr	r3, [pc, #52]	@ (800c780 <osThreadFlagsSet+0x98>)
 800c74c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c750:	601a      	str	r2, [r3, #0]
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	e00c      	b.n	800c776 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800c75c:	2300      	movs	r3, #0
 800c75e:	2201      	movs	r2, #1
 800c760:	6839      	ldr	r1, [r7, #0]
 800c762:	6978      	ldr	r0, [r7, #20]
 800c764:	f002 fb6e 	bl	800ee44 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800c768:	f107 030c 	add.w	r3, r7, #12
 800c76c:	2200      	movs	r2, #0
 800c76e:	2100      	movs	r1, #0
 800c770:	6978      	ldr	r0, [r7, #20]
 800c772:	f002 fb67 	bl	800ee44 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800c776:	68fb      	ldr	r3, [r7, #12]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	e000ed04 	.word	0xe000ed04

0800c784 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800c784:	b580      	push	{r7, lr}
 800c786:	b08c      	sub	sp, #48	@ 0x30
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c790:	f3ef 8305 	mrs	r3, IPSR
 800c794:	617b      	str	r3, [r7, #20]
  return(result);
 800c796:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800c79c:	f06f 0305 	mvn.w	r3, #5
 800c7a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7a2:	e06b      	b.n	800c87c <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da03      	bge.n	800c7b2 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800c7aa:	f06f 0303 	mvn.w	r3, #3
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b0:	e064      	b.n	800c87c <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f003 0302 	and.w	r3, r3, #2
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7c0:	e001      	b.n	800c7c6 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 800c7ce:	f001 fdf3 	bl	800e3b8 <xTaskGetTickCount>
 800c7d2:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800c7d4:	f107 0210 	add.w	r2, r7, #16
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7dc:	2000      	movs	r0, #0
 800c7de:	f002 fad1 	bl	800ed84 <xTaskNotifyWait>
 800c7e2:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d137      	bne.n	800c85a <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800c7ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	4013      	ands	r3, r2
 800c7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00c      	beq.n	800c81e <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c808:	4013      	ands	r3, r2
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d032      	beq.n	800c876 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10f      	bne.n	800c836 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c816:	f06f 0302 	mvn.w	r3, #2
 800c81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c81c:	e02e      	b.n	800c87c <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800c81e:	68fa      	ldr	r2, [r7, #12]
 800c820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c822:	4013      	ands	r3, r2
 800c824:	2b00      	cmp	r3, #0
 800c826:	d128      	bne.n	800c87a <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d103      	bne.n	800c836 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800c82e:	f06f 0302 	mvn.w	r3, #2
 800c832:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 800c834:	e022      	b.n	800c87c <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800c836:	f001 fdbf 	bl	800e3b8 <xTaskGetTickCount>
 800c83a:	4602      	mov	r2, r0
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	429a      	cmp	r2, r3
 800c848:	d902      	bls.n	800c850 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800c84a:	2300      	movs	r3, #0
 800c84c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c84e:	e00e      	b.n	800c86e <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800c850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	1ad3      	subs	r3, r2, r3
 800c856:	627b      	str	r3, [r7, #36]	@ 0x24
 800c858:	e009      	b.n	800c86e <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d103      	bne.n	800c868 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800c860:	f06f 0302 	mvn.w	r3, #2
 800c864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c866:	e002      	b.n	800c86e <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800c868:	f06f 0301 	mvn.w	r3, #1
 800c86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1af      	bne.n	800c7d4 <osThreadFlagsWait+0x50>
 800c874:	e002      	b.n	800c87c <osThreadFlagsWait+0xf8>
            break;
 800c876:	bf00      	nop
 800c878:	e000      	b.n	800c87c <osThreadFlagsWait+0xf8>
            break;
 800c87a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800c87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3730      	adds	r7, #48	@ 0x30
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c886:	b580      	push	{r7, lr}
 800c888:	b088      	sub	sp, #32
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c892:	f3ef 8305 	mrs	r3, IPSR
 800c896:	60bb      	str	r3, [r7, #8]
  return(result);
 800c898:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d174      	bne.n	800c988 <osMutexNew+0x102>
    if (attr != NULL) {
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <osMutexNew+0x26>
      type = attr->attr_bits;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	61bb      	str	r3, [r7, #24]
 800c8aa:	e001      	b.n	800c8b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	f003 0301 	and.w	r3, r3, #1
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d002      	beq.n	800c8c0 <osMutexNew+0x3a>
      rmtx = 1U;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	617b      	str	r3, [r7, #20]
 800c8be:	e001      	b.n	800c8c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0308 	and.w	r3, r3, #8
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d15c      	bne.n	800c988 <osMutexNew+0x102>
      mem = -1;
 800c8ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d015      	beq.n	800c906 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d006      	beq.n	800c8f0 <osMutexNew+0x6a>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	2b4f      	cmp	r3, #79	@ 0x4f
 800c8e8:	d902      	bls.n	800c8f0 <osMutexNew+0x6a>
          mem = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	613b      	str	r3, [r7, #16]
 800c8ee:	e00c      	b.n	800c90a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d108      	bne.n	800c90a <osMutexNew+0x84>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d104      	bne.n	800c90a <osMutexNew+0x84>
            mem = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	613b      	str	r3, [r7, #16]
 800c904:	e001      	b.n	800c90a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d112      	bne.n	800c936 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d007      	beq.n	800c926 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	4619      	mov	r1, r3
 800c91c:	2004      	movs	r0, #4
 800c91e:	f000 fc50 	bl	800d1c2 <xQueueCreateMutexStatic>
 800c922:	61f8      	str	r0, [r7, #28]
 800c924:	e016      	b.n	800c954 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	4619      	mov	r1, r3
 800c92c:	2001      	movs	r0, #1
 800c92e:	f000 fc48 	bl	800d1c2 <xQueueCreateMutexStatic>
 800c932:	61f8      	str	r0, [r7, #28]
 800c934:	e00e      	b.n	800c954 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10b      	bne.n	800c954 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d004      	beq.n	800c94c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c942:	2004      	movs	r0, #4
 800c944:	f000 fc25 	bl	800d192 <xQueueCreateMutex>
 800c948:	61f8      	str	r0, [r7, #28]
 800c94a:	e003      	b.n	800c954 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c94c:	2001      	movs	r0, #1
 800c94e:	f000 fc20 	bl	800d192 <xQueueCreateMutex>
 800c952:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00c      	beq.n	800c974 <osMutexNew+0xee>
        if (attr != NULL) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <osMutexNew+0xe2>
          name = attr->name;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	e001      	b.n	800c96c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c96c:	68f9      	ldr	r1, [r7, #12]
 800c96e:	69f8      	ldr	r0, [r7, #28]
 800c970:	f001 f9ea 	bl	800dd48 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <osMutexNew+0x102>
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c980:	69fb      	ldr	r3, [r7, #28]
 800c982:	f043 0301 	orr.w	r3, r3, #1
 800c986:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c988:	69fb      	ldr	r3, [r7, #28]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3720      	adds	r7, #32
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c992:	b580      	push	{r7, lr}
 800c994:	b086      	sub	sp, #24
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f023 0301 	bic.w	r3, r3, #1
 800c9a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9b0:	f3ef 8305 	mrs	r3, IPSR
 800c9b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c9bc:	f06f 0305 	mvn.w	r3, #5
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	e02c      	b.n	800ca1e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d103      	bne.n	800c9d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c9ca:	f06f 0303 	mvn.w	r3, #3
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	e025      	b.n	800ca1e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d011      	beq.n	800c9fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6938      	ldr	r0, [r7, #16]
 800c9dc:	f000 fc41 	bl	800d262 <xQueueTakeMutexRecursive>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d01b      	beq.n	800ca1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d003      	beq.n	800c9f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c9ec:	f06f 0301 	mvn.w	r3, #1
 800c9f0:	617b      	str	r3, [r7, #20]
 800c9f2:	e014      	b.n	800ca1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c9f4:	f06f 0302 	mvn.w	r3, #2
 800c9f8:	617b      	str	r3, [r7, #20]
 800c9fa:	e010      	b.n	800ca1e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6938      	ldr	r0, [r7, #16]
 800ca00:	f000 fee8 	bl	800d7d4 <xQueueSemaphoreTake>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d009      	beq.n	800ca1e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ca10:	f06f 0301 	mvn.w	r3, #1
 800ca14:	617b      	str	r3, [r7, #20]
 800ca16:	e002      	b.n	800ca1e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca18:	f06f 0302 	mvn.w	r3, #2
 800ca1c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ca1e:	697b      	ldr	r3, [r7, #20]
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f023 0301 	bic.w	r3, r3, #1
 800ca36:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca44:	f3ef 8305 	mrs	r3, IPSR
 800ca48:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca4a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ca50:	f06f 0305 	mvn.w	r3, #5
 800ca54:	617b      	str	r3, [r7, #20]
 800ca56:	e01f      	b.n	800ca98 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d103      	bne.n	800ca66 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ca5e:	f06f 0303 	mvn.w	r3, #3
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e018      	b.n	800ca98 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d009      	beq.n	800ca80 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ca6c:	6938      	ldr	r0, [r7, #16]
 800ca6e:	f000 fbc3 	bl	800d1f8 <xQueueGiveMutexRecursive>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d00f      	beq.n	800ca98 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca78:	f06f 0302 	mvn.w	r3, #2
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	e00b      	b.n	800ca98 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ca80:	2300      	movs	r3, #0
 800ca82:	2200      	movs	r2, #0
 800ca84:	2100      	movs	r1, #0
 800ca86:	6938      	ldr	r0, [r7, #16]
 800ca88:	f000 fc22 	bl	800d2d0 <xQueueGenericSend>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d002      	beq.n	800ca98 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca92:	f06f 0302 	mvn.w	r3, #2
 800ca96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ca98:	697b      	ldr	r3, [r7, #20]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b08a      	sub	sp, #40	@ 0x28
 800caa6:	af02      	add	r7, sp, #8
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cab2:	f3ef 8305 	mrs	r3, IPSR
 800cab6:	613b      	str	r3, [r7, #16]
  return(result);
 800cab8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d15f      	bne.n	800cb7e <osMessageQueueNew+0xdc>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d05c      	beq.n	800cb7e <osMessageQueueNew+0xdc>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d059      	beq.n	800cb7e <osMessageQueueNew+0xdc>
    mem = -1;
 800caca:	f04f 33ff 	mov.w	r3, #4294967295
 800cace:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d029      	beq.n	800cb2a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d012      	beq.n	800cb04 <osMessageQueueNew+0x62>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	2b4f      	cmp	r3, #79	@ 0x4f
 800cae4:	d90e      	bls.n	800cb04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00a      	beq.n	800cb04 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	695a      	ldr	r2, [r3, #20]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	fb01 f303 	mul.w	r3, r1, r3
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d302      	bcc.n	800cb04 <osMessageQueueNew+0x62>
        mem = 1;
 800cafe:	2301      	movs	r3, #1
 800cb00:	61bb      	str	r3, [r7, #24]
 800cb02:	e014      	b.n	800cb2e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d110      	bne.n	800cb2e <osMessageQueueNew+0x8c>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d10c      	bne.n	800cb2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d108      	bne.n	800cb2e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d104      	bne.n	800cb2e <osMessageQueueNew+0x8c>
          mem = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	61bb      	str	r3, [r7, #24]
 800cb28:	e001      	b.n	800cb2e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d10b      	bne.n	800cb4c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	691a      	ldr	r2, [r3, #16]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	9100      	str	r1, [sp, #0]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f000 fa30 	bl	800cfa8 <xQueueGenericCreateStatic>
 800cb48:	61f8      	str	r0, [r7, #28]
 800cb4a:	e008      	b.n	800cb5e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cb52:	2200      	movs	r2, #0
 800cb54:	68b9      	ldr	r1, [r7, #8]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 faa3 	bl	800d0a2 <xQueueGenericCreate>
 800cb5c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00c      	beq.n	800cb7e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d003      	beq.n	800cb72 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	617b      	str	r3, [r7, #20]
 800cb70:	e001      	b.n	800cb76 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cb76:	6979      	ldr	r1, [r7, #20]
 800cb78:	69f8      	ldr	r0, [r7, #28]
 800cb7a:	f001 f8e5 	bl	800dd48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cb7e:	69fb      	ldr	r3, [r7, #28]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	4613      	mov	r3, r2
 800cb96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cba0:	f3ef 8305 	mrs	r3, IPSR
 800cba4:	617b      	str	r3, [r7, #20]
  return(result);
 800cba6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d028      	beq.n	800cbfe <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d005      	beq.n	800cbbe <osMessageQueuePut+0x36>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <osMessageQueuePut+0x36>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d003      	beq.n	800cbc6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cbbe:	f06f 0303 	mvn.w	r3, #3
 800cbc2:	61fb      	str	r3, [r7, #28]
 800cbc4:	e038      	b.n	800cc38 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cbca:	f107 0210 	add.w	r2, r7, #16
 800cbce:	2300      	movs	r3, #0
 800cbd0:	68b9      	ldr	r1, [r7, #8]
 800cbd2:	69b8      	ldr	r0, [r7, #24]
 800cbd4:	f000 fc7e 	bl	800d4d4 <xQueueGenericSendFromISR>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d003      	beq.n	800cbe6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cbde:	f06f 0302 	mvn.w	r3, #2
 800cbe2:	61fb      	str	r3, [r7, #28]
 800cbe4:	e028      	b.n	800cc38 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d025      	beq.n	800cc38 <osMessageQueuePut+0xb0>
 800cbec:	4b15      	ldr	r3, [pc, #84]	@ (800cc44 <osMessageQueuePut+0xbc>)
 800cbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	e01c      	b.n	800cc38 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d002      	beq.n	800cc0a <osMessageQueuePut+0x82>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cc0a:	f06f 0303 	mvn.w	r3, #3
 800cc0e:	61fb      	str	r3, [r7, #28]
 800cc10:	e012      	b.n	800cc38 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cc12:	2300      	movs	r3, #0
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	68b9      	ldr	r1, [r7, #8]
 800cc18:	69b8      	ldr	r0, [r7, #24]
 800cc1a:	f000 fb59 	bl	800d2d0 <xQueueGenericSend>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d009      	beq.n	800cc38 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d003      	beq.n	800cc32 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cc2a:	f06f 0301 	mvn.w	r3, #1
 800cc2e:	61fb      	str	r3, [r7, #28]
 800cc30:	e002      	b.n	800cc38 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cc32:	f06f 0302 	mvn.w	r3, #2
 800cc36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cc38:	69fb      	ldr	r3, [r7, #28]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3720      	adds	r7, #32
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5e:	f3ef 8305 	mrs	r3, IPSR
 800cc62:	617b      	str	r3, [r7, #20]
  return(result);
 800cc64:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d028      	beq.n	800ccbc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d005      	beq.n	800cc7c <osMessageQueueGet+0x34>
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d002      	beq.n	800cc7c <osMessageQueueGet+0x34>
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cc7c:	f06f 0303 	mvn.w	r3, #3
 800cc80:	61fb      	str	r3, [r7, #28]
 800cc82:	e037      	b.n	800ccf4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cc84:	2300      	movs	r3, #0
 800cc86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cc88:	f107 0310 	add.w	r3, r7, #16
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	69b8      	ldr	r0, [r7, #24]
 800cc92:	f000 feaf 	bl	800d9f4 <xQueueReceiveFromISR>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d003      	beq.n	800cca4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cc9c:	f06f 0302 	mvn.w	r3, #2
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	e027      	b.n	800ccf4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d024      	beq.n	800ccf4 <osMessageQueueGet+0xac>
 800ccaa:	4b15      	ldr	r3, [pc, #84]	@ (800cd00 <osMessageQueueGet+0xb8>)
 800ccac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccb0:	601a      	str	r2, [r3, #0]
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	e01b      	b.n	800ccf4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d002      	beq.n	800ccc8 <osMessageQueueGet+0x80>
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d103      	bne.n	800ccd0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ccc8:	f06f 0303 	mvn.w	r3, #3
 800cccc:	61fb      	str	r3, [r7, #28]
 800ccce:	e011      	b.n	800ccf4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	68b9      	ldr	r1, [r7, #8]
 800ccd4:	69b8      	ldr	r0, [r7, #24]
 800ccd6:	f000 fc9b 	bl	800d610 <xQueueReceive>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d009      	beq.n	800ccf4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cce6:	f06f 0301 	mvn.w	r3, #1
 800ccea:	61fb      	str	r3, [r7, #28]
 800ccec:	e002      	b.n	800ccf4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ccee:	f06f 0302 	mvn.w	r3, #2
 800ccf2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ccf4:	69fb      	ldr	r3, [r7, #28]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3720      	adds	r7, #32
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	e000ed04 	.word	0xe000ed04

0800cd04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4a07      	ldr	r2, [pc, #28]	@ (800cd30 <vApplicationGetIdleTaskMemory+0x2c>)
 800cd14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	4a06      	ldr	r2, [pc, #24]	@ (800cd34 <vApplicationGetIdleTaskMemory+0x30>)
 800cd1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2280      	movs	r2, #128	@ 0x80
 800cd20:	601a      	str	r2, [r3, #0]
}
 800cd22:	bf00      	nop
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20000588 	.word	0x20000588
 800cd34:	20000630 	.word	0x20000630

0800cd38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	4a07      	ldr	r2, [pc, #28]	@ (800cd64 <vApplicationGetTimerTaskMemory+0x2c>)
 800cd48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	4a06      	ldr	r2, [pc, #24]	@ (800cd68 <vApplicationGetTimerTaskMemory+0x30>)
 800cd4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cd56:	601a      	str	r2, [r3, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	20000830 	.word	0x20000830
 800cd68:	200008d8 	.word	0x200008d8

0800cd6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f103 0208 	add.w	r2, r3, #8
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f04f 32ff 	mov.w	r2, #4294967295
 800cd84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f103 0208 	add.w	r2, r3, #8
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f103 0208 	add.w	r2, r3, #8
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cdba:	bf00      	nop
 800cdbc:	370c      	adds	r7, #12
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr

0800cdc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cdc6:	b480      	push	{r7}
 800cdc8:	b085      	sub	sp, #20
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
}
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0c:	4770      	bx	lr

0800ce0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
 800ce16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce24:	d103      	bne.n	800ce2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	e00c      	b.n	800ce48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3308      	adds	r3, #8
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	e002      	b.n	800ce3c <vListInsert+0x2e>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d2f6      	bcs.n	800ce36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]
}
 800ce74:	bf00      	nop
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce80:	b480      	push	{r7}
 800ce82:	b085      	sub	sp, #20
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	6892      	ldr	r2, [r2, #8]
 800ce96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6852      	ldr	r2, [r2, #4]
 800cea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	687a      	ldr	r2, [r7, #4]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d103      	bne.n	800ceb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	689a      	ldr	r2, [r3, #8]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	1e5a      	subs	r2, r3, #1
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10b      	bne.n	800cf00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	e7fd      	b.n	800cefc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cf00:	f002 fe2a 	bl	800fb58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf0c:	68f9      	ldr	r1, [r7, #12]
 800cf0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf10:	fb01 f303 	mul.w	r3, r1, r3
 800cf14:	441a      	add	r2, r3
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf30:	3b01      	subs	r3, #1
 800cf32:	68f9      	ldr	r1, [r7, #12]
 800cf34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800cf36:	fb01 f303 	mul.w	r3, r1, r3
 800cf3a:	441a      	add	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	22ff      	movs	r2, #255	@ 0xff
 800cf44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	22ff      	movs	r2, #255	@ 0xff
 800cf4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d114      	bne.n	800cf80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d01a      	beq.n	800cf94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	3310      	adds	r3, #16
 800cf62:	4618      	mov	r0, r3
 800cf64:	f001 fbaa 	bl	800e6bc <xTaskRemoveFromEventList>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d012      	beq.n	800cf94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cf6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa4 <xQueueGenericReset+0xd0>)
 800cf70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf74:	601a      	str	r2, [r3, #0]
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	e009      	b.n	800cf94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	3310      	adds	r3, #16
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7ff fef1 	bl	800cd6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3324      	adds	r3, #36	@ 0x24
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7ff feec 	bl	800cd6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf94:	f002 fe12 	bl	800fbbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf98:	2301      	movs	r3, #1
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	e000ed04 	.word	0xe000ed04

0800cfa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08e      	sub	sp, #56	@ 0x38
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10b      	bne.n	800cfd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfc0:	f383 8811 	msr	BASEPRI, r3
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	f3bf 8f4f 	dsb	sy
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cfce:	bf00      	nop
 800cfd0:	bf00      	nop
 800cfd2:	e7fd      	b.n	800cfd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10b      	bne.n	800cff2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800cfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cfec:	bf00      	nop
 800cfee:	bf00      	nop
 800cff0:	e7fd      	b.n	800cfee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <xQueueGenericCreateStatic+0x56>
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d001      	beq.n	800d002 <xQueueGenericCreateStatic+0x5a>
 800cffe:	2301      	movs	r3, #1
 800d000:	e000      	b.n	800d004 <xQueueGenericCreateStatic+0x5c>
 800d002:	2300      	movs	r3, #0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d10b      	bne.n	800d020 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	623b      	str	r3, [r7, #32]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d102      	bne.n	800d02c <xQueueGenericCreateStatic+0x84>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d101      	bne.n	800d030 <xQueueGenericCreateStatic+0x88>
 800d02c:	2301      	movs	r3, #1
 800d02e:	e000      	b.n	800d032 <xQueueGenericCreateStatic+0x8a>
 800d030:	2300      	movs	r3, #0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10b      	bne.n	800d04e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d03a:	f383 8811 	msr	BASEPRI, r3
 800d03e:	f3bf 8f6f 	isb	sy
 800d042:	f3bf 8f4f 	dsb	sy
 800d046:	61fb      	str	r3, [r7, #28]
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	e7fd      	b.n	800d04a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d04e:	2350      	movs	r3, #80	@ 0x50
 800d050:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b50      	cmp	r3, #80	@ 0x50
 800d056:	d00b      	beq.n	800d070 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05c:	f383 8811 	msr	BASEPRI, r3
 800d060:	f3bf 8f6f 	isb	sy
 800d064:	f3bf 8f4f 	dsb	sy
 800d068:	61bb      	str	r3, [r7, #24]
}
 800d06a:	bf00      	nop
 800d06c:	bf00      	nop
 800d06e:	e7fd      	b.n	800d06c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d070:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00d      	beq.n	800d098 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07e:	2201      	movs	r2, #1
 800d080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d084:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	4613      	mov	r3, r2
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	68b9      	ldr	r1, [r7, #8]
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f000 f840 	bl	800d118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3730      	adds	r7, #48	@ 0x30
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b08a      	sub	sp, #40	@ 0x28
 800d0a6:	af02      	add	r7, sp, #8
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10b      	bne.n	800d0ce <xQueueGenericCreate+0x2c>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	613b      	str	r3, [r7, #16]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	fb02 f303 	mul.w	r3, r2, r3
 800d0d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	3350      	adds	r3, #80	@ 0x50
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f002 fe5d 	bl	800fd9c <pvPortMalloc>
 800d0e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d011      	beq.n	800d10e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	3350      	adds	r3, #80	@ 0x50
 800d0f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d0fc:	79fa      	ldrb	r2, [r7, #7]
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	4613      	mov	r3, r2
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	68b9      	ldr	r1, [r7, #8]
 800d108:	68f8      	ldr	r0, [r7, #12]
 800d10a:	f000 f805 	bl	800d118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d10e:	69bb      	ldr	r3, [r7, #24]
	}
 800d110:	4618      	mov	r0, r3
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d103      	bne.n	800d134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	69ba      	ldr	r2, [r7, #24]
 800d130:	601a      	str	r2, [r3, #0]
 800d132:	e002      	b.n	800d13a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	68ba      	ldr	r2, [r7, #8]
 800d144:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d146:	2101      	movs	r1, #1
 800d148:	69b8      	ldr	r0, [r7, #24]
 800d14a:	f7ff fec3 	bl	800ced4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	78fa      	ldrb	r2, [r7, #3]
 800d152:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00e      	beq.n	800d18a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d17e:	2300      	movs	r3, #0
 800d180:	2200      	movs	r2, #0
 800d182:	2100      	movs	r1, #0
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f8a3 	bl	800d2d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d18a:	bf00      	nop
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}

0800d192 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d192:	b580      	push	{r7, lr}
 800d194:	b086      	sub	sp, #24
 800d196:	af00      	add	r7, sp, #0
 800d198:	4603      	mov	r3, r0
 800d19a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d19c:	2301      	movs	r3, #1
 800d19e:	617b      	str	r3, [r7, #20]
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6939      	ldr	r1, [r7, #16]
 800d1aa:	6978      	ldr	r0, [r7, #20]
 800d1ac:	f7ff ff79 	bl	800d0a2 <xQueueGenericCreate>
 800d1b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f7ff ffd3 	bl	800d15e <prvInitialiseMutex>

		return xNewQueue;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
	}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b088      	sub	sp, #32
 800d1c6:	af02      	add	r7, sp, #8
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	6039      	str	r1, [r7, #0]
 800d1cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d1d6:	79fb      	ldrb	r3, [r7, #7]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	6939      	ldr	r1, [r7, #16]
 800d1e0:	6978      	ldr	r0, [r7, #20]
 800d1e2:	f7ff fee1 	bl	800cfa8 <xQueueGenericCreateStatic>
 800d1e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7ff ffb8 	bl	800d15e <prvInitialiseMutex>

		return xNewQueue;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d1f8:	b590      	push	{r4, r7, lr}
 800d1fa:	b087      	sub	sp, #28
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10b      	bne.n	800d222 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	60fb      	str	r3, [r7, #12]
}
 800d21c:	bf00      	nop
 800d21e:	bf00      	nop
 800d220:	e7fd      	b.n	800d21e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	689c      	ldr	r4, [r3, #8]
 800d226:	f001 fc0f 	bl	800ea48 <xTaskGetCurrentTaskHandle>
 800d22a:	4603      	mov	r3, r0
 800d22c:	429c      	cmp	r4, r3
 800d22e:	d111      	bne.n	800d254 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	1e5a      	subs	r2, r3, #1
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d105      	bne.n	800d24e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d242:	2300      	movs	r3, #0
 800d244:	2200      	movs	r2, #0
 800d246:	2100      	movs	r1, #0
 800d248:	6938      	ldr	r0, [r7, #16]
 800d24a:	f000 f841 	bl	800d2d0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d24e:	2301      	movs	r3, #1
 800d250:	617b      	str	r3, [r7, #20]
 800d252:	e001      	b.n	800d258 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d254:	2300      	movs	r3, #0
 800d256:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d258:	697b      	ldr	r3, [r7, #20]
	}
 800d25a:	4618      	mov	r0, r3
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}

0800d262 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d262:	b590      	push	{r4, r7, lr}
 800d264:	b087      	sub	sp, #28
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
 800d26a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d10b      	bne.n	800d28e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60fb      	str	r3, [r7, #12]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	689c      	ldr	r4, [r3, #8]
 800d292:	f001 fbd9 	bl	800ea48 <xTaskGetCurrentTaskHandle>
 800d296:	4603      	mov	r3, r0
 800d298:	429c      	cmp	r4, r3
 800d29a:	d107      	bne.n	800d2ac <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	617b      	str	r3, [r7, #20]
 800d2aa:	e00c      	b.n	800d2c6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6938      	ldr	r0, [r7, #16]
 800d2b0:	f000 fa90 	bl	800d7d4 <xQueueSemaphoreTake>
 800d2b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d004      	beq.n	800d2c6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	68db      	ldr	r3, [r3, #12]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d2c6:	697b      	ldr	r3, [r7, #20]
	}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	371c      	adds	r7, #28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd90      	pop	{r4, r7, pc}

0800d2d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08e      	sub	sp, #56	@ 0x38
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d10b      	bne.n	800d304 <xQueueGenericSend+0x34>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d2fe:	bf00      	nop
 800d300:	bf00      	nop
 800d302:	e7fd      	b.n	800d300 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d103      	bne.n	800d312 <xQueueGenericSend+0x42>
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d101      	bne.n	800d316 <xQueueGenericSend+0x46>
 800d312:	2301      	movs	r3, #1
 800d314:	e000      	b.n	800d318 <xQueueGenericSend+0x48>
 800d316:	2300      	movs	r3, #0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d10b      	bne.n	800d334 <xQueueGenericSend+0x64>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	2b02      	cmp	r3, #2
 800d338:	d103      	bne.n	800d342 <xQueueGenericSend+0x72>
 800d33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d33c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d101      	bne.n	800d346 <xQueueGenericSend+0x76>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <xQueueGenericSend+0x78>
 800d346:	2300      	movs	r3, #0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d10b      	bne.n	800d364 <xQueueGenericSend+0x94>
	__asm volatile
 800d34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	623b      	str	r3, [r7, #32]
}
 800d35e:	bf00      	nop
 800d360:	bf00      	nop
 800d362:	e7fd      	b.n	800d360 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d364:	f001 fb80 	bl	800ea68 <xTaskGetSchedulerState>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d102      	bne.n	800d374 <xQueueGenericSend+0xa4>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <xQueueGenericSend+0xa8>
 800d374:	2301      	movs	r3, #1
 800d376:	e000      	b.n	800d37a <xQueueGenericSend+0xaa>
 800d378:	2300      	movs	r3, #0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10b      	bne.n	800d396 <xQueueGenericSend+0xc6>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	61fb      	str	r3, [r7, #28]
}
 800d390:	bf00      	nop
 800d392:	bf00      	nop
 800d394:	e7fd      	b.n	800d392 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d396:	f002 fbdf 	bl	800fb58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d302      	bcc.n	800d3ac <xQueueGenericSend+0xdc>
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d129      	bne.n	800d400 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3ac:	683a      	ldr	r2, [r7, #0]
 800d3ae:	68b9      	ldr	r1, [r7, #8]
 800d3b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d3b2:	f000 fbb9 	bl	800db28 <prvCopyDataToQueue>
 800d3b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d010      	beq.n	800d3e2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c2:	3324      	adds	r3, #36	@ 0x24
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f001 f979 	bl	800e6bc <xTaskRemoveFromEventList>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d013      	beq.n	800d3f8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d3d0:	4b3f      	ldr	r3, [pc, #252]	@ (800d4d0 <xQueueGenericSend+0x200>)
 800d3d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3d6:	601a      	str	r2, [r3, #0]
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	e00a      	b.n	800d3f8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d007      	beq.n	800d3f8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d3e8:	4b39      	ldr	r3, [pc, #228]	@ (800d4d0 <xQueueGenericSend+0x200>)
 800d3ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3ee:	601a      	str	r2, [r3, #0]
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d3f8:	f002 fbe0 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e063      	b.n	800d4c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d103      	bne.n	800d40e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d406:	f002 fbd9 	bl	800fbbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d40a:	2300      	movs	r3, #0
 800d40c:	e05c      	b.n	800d4c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d40e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d410:	2b00      	cmp	r3, #0
 800d412:	d106      	bne.n	800d422 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d414:	f107 0314 	add.w	r3, r7, #20
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 f9b3 	bl	800e784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d41e:	2301      	movs	r3, #1
 800d420:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d422:	f002 fbcb 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d426:	f000 ff1b 	bl	800e260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d42a:	f002 fb95 	bl	800fb58 <vPortEnterCritical>
 800d42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d430:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d43a:	d103      	bne.n	800d444 <xQueueGenericSend+0x174>
 800d43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d446:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d44a:	b25b      	sxtb	r3, r3
 800d44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d450:	d103      	bne.n	800d45a <xQueueGenericSend+0x18a>
 800d452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d454:	2200      	movs	r2, #0
 800d456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d45a:	f002 fbaf 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d45e:	1d3a      	adds	r2, r7, #4
 800d460:	f107 0314 	add.w	r3, r7, #20
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f001 f9a2 	bl	800e7b0 <xTaskCheckForTimeOut>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d124      	bne.n	800d4bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d472:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d474:	f000 fc50 	bl	800dd18 <prvIsQueueFull>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d018      	beq.n	800d4b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d480:	3310      	adds	r3, #16
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f001 f8c6 	bl	800e618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d48c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d48e:	f000 fbdb 	bl	800dc48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d492:	f000 fef3 	bl	800e27c <xTaskResumeAll>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f47f af7c 	bne.w	800d396 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d49e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d0 <xQueueGenericSend+0x200>)
 800d4a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4a4:	601a      	str	r2, [r3, #0]
 800d4a6:	f3bf 8f4f 	dsb	sy
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	e772      	b.n	800d396 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d4b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4b2:	f000 fbc9 	bl	800dc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4b6:	f000 fee1 	bl	800e27c <xTaskResumeAll>
 800d4ba:	e76c      	b.n	800d396 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d4bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d4be:	f000 fbc3 	bl	800dc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4c2:	f000 fedb 	bl	800e27c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d4c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3738      	adds	r7, #56	@ 0x38
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	e000ed04 	.word	0xe000ed04

0800d4d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b090      	sub	sp, #64	@ 0x40
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10b      	bne.n	800d504 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d4fe:	bf00      	nop
 800d500:	bf00      	nop
 800d502:	e7fd      	b.n	800d500 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d103      	bne.n	800d512 <xQueueGenericSendFromISR+0x3e>
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d101      	bne.n	800d516 <xQueueGenericSendFromISR+0x42>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <xQueueGenericSendFromISR+0x44>
 800d516:	2300      	movs	r3, #0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10b      	bne.n	800d534 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d52e:	bf00      	nop
 800d530:	bf00      	nop
 800d532:	e7fd      	b.n	800d530 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b02      	cmp	r3, #2
 800d538:	d103      	bne.n	800d542 <xQueueGenericSendFromISR+0x6e>
 800d53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d101      	bne.n	800d546 <xQueueGenericSendFromISR+0x72>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <xQueueGenericSendFromISR+0x74>
 800d546:	2300      	movs	r3, #0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10b      	bne.n	800d564 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	623b      	str	r3, [r7, #32]
}
 800d55e:	bf00      	nop
 800d560:	bf00      	nop
 800d562:	e7fd      	b.n	800d560 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d564:	f002 fbd8 	bl	800fd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d568:	f3ef 8211 	mrs	r2, BASEPRI
 800d56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	61fa      	str	r2, [r7, #28]
 800d57e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d580:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d582:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d302      	bcc.n	800d596 <xQueueGenericSendFromISR+0xc2>
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d12f      	bne.n	800d5f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d598:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d59c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	68b9      	ldr	r1, [r7, #8]
 800d5aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d5ac:	f000 fabc 	bl	800db28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d5b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b8:	d112      	bne.n	800d5e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d016      	beq.n	800d5f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c4:	3324      	adds	r3, #36	@ 0x24
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f001 f878 	bl	800e6bc <xTaskRemoveFromEventList>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00e      	beq.n	800d5f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d00b      	beq.n	800d5f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	601a      	str	r2, [r3, #0]
 800d5de:	e007      	b.n	800d5f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d5e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	b25a      	sxtb	r2, r3
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d5f4:	e001      	b.n	800d5fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5fc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d604:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3740      	adds	r7, #64	@ 0x40
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08c      	sub	sp, #48	@ 0x30
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d61c:	2300      	movs	r3, #0
 800d61e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10b      	bne.n	800d642 <xQueueReceive+0x32>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	623b      	str	r3, [r7, #32]
}
 800d63c:	bf00      	nop
 800d63e:	bf00      	nop
 800d640:	e7fd      	b.n	800d63e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <xQueueReceive+0x40>
 800d648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d101      	bne.n	800d654 <xQueueReceive+0x44>
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <xQueueReceive+0x46>
 800d654:	2300      	movs	r3, #0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10b      	bne.n	800d672 <xQueueReceive+0x62>
	__asm volatile
 800d65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	61fb      	str	r3, [r7, #28]
}
 800d66c:	bf00      	nop
 800d66e:	bf00      	nop
 800d670:	e7fd      	b.n	800d66e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d672:	f001 f9f9 	bl	800ea68 <xTaskGetSchedulerState>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d102      	bne.n	800d682 <xQueueReceive+0x72>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <xQueueReceive+0x76>
 800d682:	2301      	movs	r3, #1
 800d684:	e000      	b.n	800d688 <xQueueReceive+0x78>
 800d686:	2300      	movs	r3, #0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10b      	bne.n	800d6a4 <xQueueReceive+0x94>
	__asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	61bb      	str	r3, [r7, #24]
}
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	e7fd      	b.n	800d6a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6a4:	f002 fa58 	bl	800fb58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d01f      	beq.n	800d6f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d6b4:	68b9      	ldr	r1, [r7, #8]
 800d6b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6b8:	f000 faa0 	bl	800dbfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	1e5a      	subs	r2, r3, #1
 800d6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00f      	beq.n	800d6ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ce:	3310      	adds	r3, #16
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f000 fff3 	bl	800e6bc <xTaskRemoveFromEventList>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d007      	beq.n	800d6ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d6dc:	4b3c      	ldr	r3, [pc, #240]	@ (800d7d0 <xQueueReceive+0x1c0>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d6ec:	f002 fa66 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e069      	b.n	800d7c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d103      	bne.n	800d702 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6fa:	f002 fa5f 	bl	800fbbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e062      	b.n	800d7c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d704:	2b00      	cmp	r3, #0
 800d706:	d106      	bne.n	800d716 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d708:	f107 0310 	add.w	r3, r7, #16
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 f839 	bl	800e784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d712:	2301      	movs	r3, #1
 800d714:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d716:	f002 fa51 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d71a:	f000 fda1 	bl	800e260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d71e:	f002 fa1b 	bl	800fb58 <vPortEnterCritical>
 800d722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d728:	b25b      	sxtb	r3, r3
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72e:	d103      	bne.n	800d738 <xQueueReceive+0x128>
 800d730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d732:	2200      	movs	r2, #0
 800d734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d73e:	b25b      	sxtb	r3, r3
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d744:	d103      	bne.n	800d74e <xQueueReceive+0x13e>
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	2200      	movs	r2, #0
 800d74a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d74e:	f002 fa35 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d752:	1d3a      	adds	r2, r7, #4
 800d754:	f107 0310 	add.w	r3, r7, #16
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f001 f828 	bl	800e7b0 <xTaskCheckForTimeOut>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d123      	bne.n	800d7ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d768:	f000 fac0 	bl	800dcec <prvIsQueueEmpty>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d017      	beq.n	800d7a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d774:	3324      	adds	r3, #36	@ 0x24
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	4611      	mov	r1, r2
 800d77a:	4618      	mov	r0, r3
 800d77c:	f000 ff4c 	bl	800e618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d780:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d782:	f000 fa61 	bl	800dc48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d786:	f000 fd79 	bl	800e27c <xTaskResumeAll>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d189      	bne.n	800d6a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d790:	4b0f      	ldr	r3, [pc, #60]	@ (800d7d0 <xQueueReceive+0x1c0>)
 800d792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d796:	601a      	str	r2, [r3, #0]
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	e780      	b.n	800d6a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d7a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7a4:	f000 fa50 	bl	800dc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7a8:	f000 fd68 	bl	800e27c <xTaskResumeAll>
 800d7ac:	e77a      	b.n	800d6a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d7ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7b0:	f000 fa4a 	bl	800dc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7b4:	f000 fd62 	bl	800e27c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d7b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d7ba:	f000 fa97 	bl	800dcec <prvIsQueueEmpty>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f43f af6f 	beq.w	800d6a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d7c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3730      	adds	r7, #48	@ 0x30
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	e000ed04 	.word	0xe000ed04

0800d7d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b08e      	sub	sp, #56	@ 0x38
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10b      	bne.n	800d808 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	623b      	str	r3, [r7, #32]
}
 800d802:	bf00      	nop
 800d804:	bf00      	nop
 800d806:	e7fd      	b.n	800d804 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00b      	beq.n	800d828 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d814:	f383 8811 	msr	BASEPRI, r3
 800d818:	f3bf 8f6f 	isb	sy
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	61fb      	str	r3, [r7, #28]
}
 800d822:	bf00      	nop
 800d824:	bf00      	nop
 800d826:	e7fd      	b.n	800d824 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d828:	f001 f91e 	bl	800ea68 <xTaskGetSchedulerState>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <xQueueSemaphoreTake+0x64>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <xQueueSemaphoreTake+0x68>
 800d838:	2301      	movs	r3, #1
 800d83a:	e000      	b.n	800d83e <xQueueSemaphoreTake+0x6a>
 800d83c:	2300      	movs	r3, #0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10b      	bne.n	800d85a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	61bb      	str	r3, [r7, #24]
}
 800d854:	bf00      	nop
 800d856:	bf00      	nop
 800d858:	e7fd      	b.n	800d856 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d85a:	f002 f97d 	bl	800fb58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d862:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d024      	beq.n	800d8b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86c:	1e5a      	subs	r2, r3, #1
 800d86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d870:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d104      	bne.n	800d884 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d87a:	f001 fa6f 	bl	800ed5c <pvTaskIncrementMutexHeldCount>
 800d87e:	4602      	mov	r2, r0
 800d880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d882:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00f      	beq.n	800d8ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	3310      	adds	r3, #16
 800d890:	4618      	mov	r0, r3
 800d892:	f000 ff13 	bl	800e6bc <xTaskRemoveFromEventList>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d007      	beq.n	800d8ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d89c:	4b54      	ldr	r3, [pc, #336]	@ (800d9f0 <xQueueSemaphoreTake+0x21c>)
 800d89e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	f3bf 8f4f 	dsb	sy
 800d8a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8ac:	f002 f986 	bl	800fbbc <vPortExitCritical>
				return pdPASS;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e098      	b.n	800d9e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d112      	bne.n	800d8e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00b      	beq.n	800d8d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	617b      	str	r3, [r7, #20]
}
 800d8d2:	bf00      	nop
 800d8d4:	bf00      	nop
 800d8d6:	e7fd      	b.n	800d8d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d8d8:	f002 f970 	bl	800fbbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e082      	b.n	800d9e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8e6:	f107 030c 	add.w	r3, r7, #12
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 ff4a 	bl	800e784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8f4:	f002 f962 	bl	800fbbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8f8:	f000 fcb2 	bl	800e260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8fc:	f002 f92c 	bl	800fb58 <vPortEnterCritical>
 800d900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d902:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d906:	b25b      	sxtb	r3, r3
 800d908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90c:	d103      	bne.n	800d916 <xQueueSemaphoreTake+0x142>
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	2200      	movs	r2, #0
 800d912:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d91c:	b25b      	sxtb	r3, r3
 800d91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d922:	d103      	bne.n	800d92c <xQueueSemaphoreTake+0x158>
 800d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d92c:	f002 f946 	bl	800fbbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d930:	463a      	mov	r2, r7
 800d932:	f107 030c 	add.w	r3, r7, #12
 800d936:	4611      	mov	r1, r2
 800d938:	4618      	mov	r0, r3
 800d93a:	f000 ff39 	bl	800e7b0 <xTaskCheckForTimeOut>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d132      	bne.n	800d9aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d944:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d946:	f000 f9d1 	bl	800dcec <prvIsQueueEmpty>
 800d94a:	4603      	mov	r3, r0
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d026      	beq.n	800d99e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d109      	bne.n	800d96c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d958:	f002 f8fe 	bl	800fb58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	4618      	mov	r0, r3
 800d962:	f001 f89f 	bl	800eaa4 <xTaskPriorityInherit>
 800d966:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d968:	f002 f928 	bl	800fbbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96e:	3324      	adds	r3, #36	@ 0x24
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f000 fe4f 	bl	800e618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d97a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d97c:	f000 f964 	bl	800dc48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d980:	f000 fc7c 	bl	800e27c <xTaskResumeAll>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	f47f af67 	bne.w	800d85a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d98c:	4b18      	ldr	r3, [pc, #96]	@ (800d9f0 <xQueueSemaphoreTake+0x21c>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	e75d      	b.n	800d85a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d99e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9a0:	f000 f952 	bl	800dc48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9a4:	f000 fc6a 	bl	800e27c <xTaskResumeAll>
 800d9a8:	e757      	b.n	800d85a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d9aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9ac:	f000 f94c 	bl	800dc48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9b0:	f000 fc64 	bl	800e27c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9b6:	f000 f999 	bl	800dcec <prvIsQueueEmpty>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f43f af4c 	beq.w	800d85a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00d      	beq.n	800d9e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d9c8:	f002 f8c6 	bl	800fb58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d9cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d9ce:	f000 f893 	bl	800daf8 <prvGetDisinheritPriorityAfterTimeout>
 800d9d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 f93a 	bl	800ec54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d9e0:	f002 f8ec 	bl	800fbbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3738      	adds	r7, #56	@ 0x38
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	e000ed04 	.word	0xe000ed04

0800d9f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08e      	sub	sp, #56	@ 0x38
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10b      	bne.n	800da22 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	623b      	str	r3, [r7, #32]
}
 800da1c:	bf00      	nop
 800da1e:	bf00      	nop
 800da20:	e7fd      	b.n	800da1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d103      	bne.n	800da30 <xQueueReceiveFromISR+0x3c>
 800da28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <xQueueReceiveFromISR+0x40>
 800da30:	2301      	movs	r3, #1
 800da32:	e000      	b.n	800da36 <xQueueReceiveFromISR+0x42>
 800da34:	2300      	movs	r3, #0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10b      	bne.n	800da52 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	61fb      	str	r3, [r7, #28]
}
 800da4c:	bf00      	nop
 800da4e:	bf00      	nop
 800da50:	e7fd      	b.n	800da4e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800da52:	f002 f961 	bl	800fd18 <vPortValidateInterruptPriority>
	__asm volatile
 800da56:	f3ef 8211 	mrs	r2, BASEPRI
 800da5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	61ba      	str	r2, [r7, #24]
 800da6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800da6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800da70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d02f      	beq.n	800dade <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da88:	68b9      	ldr	r1, [r7, #8]
 800da8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da8c:	f000 f8b6 	bl	800dbfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800da90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da92:	1e5a      	subs	r2, r3, #1
 800da94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da96:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800da98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa0:	d112      	bne.n	800dac8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d016      	beq.n	800dad8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	3310      	adds	r3, #16
 800daae:	4618      	mov	r0, r3
 800dab0:	f000 fe04 	bl	800e6bc <xTaskRemoveFromEventList>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00e      	beq.n	800dad8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	e007      	b.n	800dad8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dacc:	3301      	adds	r3, #1
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	b25a      	sxtb	r2, r3
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800dad8:	2301      	movs	r3, #1
 800dada:	637b      	str	r3, [r7, #52]	@ 0x34
 800dadc:	e001      	b.n	800dae2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800dade:	2300      	movs	r3, #0
 800dae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800dae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	f383 8811 	msr	BASEPRI, r3
}
 800daec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800daee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3738      	adds	r7, #56	@ 0x38
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	d006      	beq.n	800db16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	e001      	b.n	800db1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800db16:	2300      	movs	r3, #0
 800db18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800db1a:	68fb      	ldr	r3, [r7, #12]
	}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800db34:	2300      	movs	r3, #0
 800db36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10d      	bne.n	800db62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d14d      	bne.n	800dbea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	4618      	mov	r0, r3
 800db54:	f001 f80e 	bl	800eb74 <xTaskPriorityDisinherit>
 800db58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	609a      	str	r2, [r3, #8]
 800db60:	e043      	b.n	800dbea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d119      	bne.n	800db9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6858      	ldr	r0, [r3, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db70:	461a      	mov	r2, r3
 800db72:	68b9      	ldr	r1, [r7, #8]
 800db74:	f003 fa2b 	bl	8010fce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db80:	441a      	add	r2, r3
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	685a      	ldr	r2, [r3, #4]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d32b      	bcc.n	800dbea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681a      	ldr	r2, [r3, #0]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	605a      	str	r2, [r3, #4]
 800db9a:	e026      	b.n	800dbea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	68d8      	ldr	r0, [r3, #12]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba4:	461a      	mov	r2, r3
 800dba6:	68b9      	ldr	r1, [r7, #8]
 800dba8:	f003 fa11 	bl	8010fce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	68da      	ldr	r2, [r3, #12]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb4:	425b      	negs	r3, r3
 800dbb6:	441a      	add	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d207      	bcs.n	800dbd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	689a      	ldr	r2, [r3, #8]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbd0:	425b      	negs	r3, r3
 800dbd2:	441a      	add	r2, r3
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d105      	bne.n	800dbea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d002      	beq.n	800dbea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3b01      	subs	r3, #1
 800dbe8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	1c5a      	adds	r2, r3, #1
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dbf2:	697b      	ldr	r3, [r7, #20]
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d018      	beq.n	800dc40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68da      	ldr	r2, [r3, #12]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc16:	441a      	add	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	68da      	ldr	r2, [r3, #12]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d303      	bcc.n	800dc30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68d9      	ldr	r1, [r3, #12]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6838      	ldr	r0, [r7, #0]
 800dc3c:	f003 f9c7 	bl	8010fce <memcpy>
	}
}
 800dc40:	bf00      	nop
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dc50:	f001 ff82 	bl	800fb58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dc5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc5c:	e011      	b.n	800dc82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d012      	beq.n	800dc8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	3324      	adds	r3, #36	@ 0x24
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 fd26 	bl	800e6bc <xTaskRemoveFromEventList>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc76:	f000 fdff 	bl	800e878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc7a:	7bfb      	ldrb	r3, [r7, #15]
 800dc7c:	3b01      	subs	r3, #1
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	dce9      	bgt.n	800dc5e <prvUnlockQueue+0x16>
 800dc8a:	e000      	b.n	800dc8e <prvUnlockQueue+0x46>
					break;
 800dc8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	22ff      	movs	r2, #255	@ 0xff
 800dc92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dc96:	f001 ff91 	bl	800fbbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc9a:	f001 ff5d 	bl	800fb58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dca6:	e011      	b.n	800dccc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d012      	beq.n	800dcd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	3310      	adds	r3, #16
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 fd01 	bl	800e6bc <xTaskRemoveFromEventList>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dcc0:	f000 fdda 	bl	800e878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dcc4:	7bbb      	ldrb	r3, [r7, #14]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	dce9      	bgt.n	800dca8 <prvUnlockQueue+0x60>
 800dcd4:	e000      	b.n	800dcd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dcd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	22ff      	movs	r2, #255	@ 0xff
 800dcdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dce0:	f001 ff6c 	bl	800fbbc <vPortExitCritical>
}
 800dce4:	bf00      	nop
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcf4:	f001 ff30 	bl	800fb58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d102      	bne.n	800dd06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd00:	2301      	movs	r3, #1
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	e001      	b.n	800dd0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd06:	2300      	movs	r3, #0
 800dd08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd0a:	f001 ff57 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd20:	f001 ff1a 	bl	800fb58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d102      	bne.n	800dd36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dd30:	2301      	movs	r3, #1
 800dd32:	60fb      	str	r3, [r7, #12]
 800dd34:	e001      	b.n	800dd3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd3a:	f001 ff3f 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dd48:	b480      	push	{r7}
 800dd4a:	b085      	sub	sp, #20
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]
 800dd56:	e014      	b.n	800dd82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dd58:	4a0f      	ldr	r2, [pc, #60]	@ (800dd98 <vQueueAddToRegistry+0x50>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10b      	bne.n	800dd7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd64:	490c      	ldr	r1, [pc, #48]	@ (800dd98 <vQueueAddToRegistry+0x50>)
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	683a      	ldr	r2, [r7, #0]
 800dd6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd6e:	4a0a      	ldr	r2, [pc, #40]	@ (800dd98 <vQueueAddToRegistry+0x50>)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	00db      	lsls	r3, r3, #3
 800dd74:	4413      	add	r3, r2
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd7a:	e006      	b.n	800dd8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	60fb      	str	r3, [r7, #12]
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b07      	cmp	r3, #7
 800dd86:	d9e7      	bls.n	800dd58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd88:	bf00      	nop
 800dd8a:	bf00      	nop
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	20000cd8 	.word	0x20000cd8

0800dd9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ddac:	f001 fed4 	bl	800fb58 <vPortEnterCritical>
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddb6:	b25b      	sxtb	r3, r3
 800ddb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddbc:	d103      	bne.n	800ddc6 <vQueueWaitForMessageRestricted+0x2a>
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd2:	d103      	bne.n	800dddc <vQueueWaitForMessageRestricted+0x40>
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dddc:	f001 feee 	bl	800fbbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d106      	bne.n	800ddf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	3324      	adds	r3, #36	@ 0x24
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 fc37 	bl	800e664 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddf6:	6978      	ldr	r0, [r7, #20]
 800ddf8:	f7ff ff26 	bl	800dc48 <prvUnlockQueue>
	}
 800ddfc:	bf00      	nop
 800ddfe:	3718      	adds	r7, #24
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de04:	b580      	push	{r7, lr}
 800de06:	b08e      	sub	sp, #56	@ 0x38
 800de08:	af04      	add	r7, sp, #16
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
 800de10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de14:	2b00      	cmp	r3, #0
 800de16:	d10b      	bne.n	800de30 <xTaskCreateStatic+0x2c>
	__asm volatile
 800de18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1c:	f383 8811 	msr	BASEPRI, r3
 800de20:	f3bf 8f6f 	isb	sy
 800de24:	f3bf 8f4f 	dsb	sy
 800de28:	623b      	str	r3, [r7, #32]
}
 800de2a:	bf00      	nop
 800de2c:	bf00      	nop
 800de2e:	e7fd      	b.n	800de2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10b      	bne.n	800de4e <xTaskCreateStatic+0x4a>
	__asm volatile
 800de36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de3a:	f383 8811 	msr	BASEPRI, r3
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	f3bf 8f4f 	dsb	sy
 800de46:	61fb      	str	r3, [r7, #28]
}
 800de48:	bf00      	nop
 800de4a:	bf00      	nop
 800de4c:	e7fd      	b.n	800de4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de4e:	23a8      	movs	r3, #168	@ 0xa8
 800de50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2ba8      	cmp	r3, #168	@ 0xa8
 800de56:	d00b      	beq.n	800de70 <xTaskCreateStatic+0x6c>
	__asm volatile
 800de58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	61bb      	str	r3, [r7, #24]
}
 800de6a:	bf00      	nop
 800de6c:	bf00      	nop
 800de6e:	e7fd      	b.n	800de6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de74:	2b00      	cmp	r3, #0
 800de76:	d01e      	beq.n	800deb6 <xTaskCreateStatic+0xb2>
 800de78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01b      	beq.n	800deb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de8a:	2202      	movs	r2, #2
 800de8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de90:	2300      	movs	r3, #0
 800de92:	9303      	str	r3, [sp, #12]
 800de94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de96:	9302      	str	r3, [sp, #8]
 800de98:	f107 0314 	add.w	r3, r7, #20
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	68b9      	ldr	r1, [r7, #8]
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 f851 	bl	800df50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800deae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800deb0:	f000 f8f6 	bl	800e0a0 <prvAddNewTaskToReadyList>
 800deb4:	e001      	b.n	800deba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800deba:	697b      	ldr	r3, [r7, #20]
	}
 800debc:	4618      	mov	r0, r3
 800debe:	3728      	adds	r7, #40	@ 0x28
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08c      	sub	sp, #48	@ 0x30
 800dec8:	af04      	add	r7, sp, #16
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	603b      	str	r3, [r7, #0]
 800ded0:	4613      	mov	r3, r2
 800ded2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4618      	mov	r0, r3
 800deda:	f001 ff5f 	bl	800fd9c <pvPortMalloc>
 800dede:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d00e      	beq.n	800df04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dee6:	20a8      	movs	r0, #168	@ 0xa8
 800dee8:	f001 ff58 	bl	800fd9c <pvPortMalloc>
 800deec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d003      	beq.n	800defc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	631a      	str	r2, [r3, #48]	@ 0x30
 800defa:	e005      	b.n	800df08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800defc:	6978      	ldr	r0, [r7, #20]
 800defe:	f002 f81b 	bl	800ff38 <vPortFree>
 800df02:	e001      	b.n	800df08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df04:	2300      	movs	r3, #0
 800df06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d017      	beq.n	800df3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	2200      	movs	r2, #0
 800df12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df16:	88fa      	ldrh	r2, [r7, #6]
 800df18:	2300      	movs	r3, #0
 800df1a:	9303      	str	r3, [sp, #12]
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	9302      	str	r3, [sp, #8]
 800df20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df22:	9301      	str	r3, [sp, #4]
 800df24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	68b9      	ldr	r1, [r7, #8]
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 f80f 	bl	800df50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df32:	69f8      	ldr	r0, [r7, #28]
 800df34:	f000 f8b4 	bl	800e0a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df38:	2301      	movs	r3, #1
 800df3a:	61bb      	str	r3, [r7, #24]
 800df3c:	e002      	b.n	800df44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df3e:	f04f 33ff 	mov.w	r3, #4294967295
 800df42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df44:	69bb      	ldr	r3, [r7, #24]
	}
 800df46:	4618      	mov	r0, r3
 800df48:	3720      	adds	r7, #32
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
	...

0800df50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b088      	sub	sp, #32
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	461a      	mov	r2, r3
 800df68:	21a5      	movs	r1, #165	@ 0xa5
 800df6a:	f002 ff5e 	bl	8010e2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df78:	3b01      	subs	r3, #1
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	f023 0307 	bic.w	r3, r3, #7
 800df86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00b      	beq.n	800dfaa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	617b      	str	r3, [r7, #20]
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	e7fd      	b.n	800dfa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01f      	beq.n	800dff0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	61fb      	str	r3, [r7, #28]
 800dfb4:	e012      	b.n	800dfdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	4413      	add	r3, r2
 800dfbc:	7819      	ldrb	r1, [r3, #0]
 800dfbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	3334      	adds	r3, #52	@ 0x34
 800dfc6:	460a      	mov	r2, r1
 800dfc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfca:	68ba      	ldr	r2, [r7, #8]
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	4413      	add	r3, r2
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d006      	beq.n	800dfe4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	61fb      	str	r3, [r7, #28]
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	2b0f      	cmp	r3, #15
 800dfe0:	d9e9      	bls.n	800dfb6 <prvInitialiseNewTask+0x66>
 800dfe2:	e000      	b.n	800dfe6 <prvInitialiseNewTask+0x96>
			{
				break;
 800dfe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dfee:	e003      	b.n	800dff8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffa:	2b37      	cmp	r3, #55	@ 0x37
 800dffc:	d901      	bls.n	800e002 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dffe:	2337      	movs	r3, #55	@ 0x37
 800e000:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e006:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e00a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e00c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e010:	2200      	movs	r2, #0
 800e012:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e016:	3304      	adds	r3, #4
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe fec7 	bl	800cdac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e020:	3318      	adds	r3, #24
 800e022:	4618      	mov	r0, r3
 800e024:	f7fe fec2 	bl	800cdac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e02c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e036:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e03a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e03c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e040:	2200      	movs	r2, #0
 800e042:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e050:	3354      	adds	r3, #84	@ 0x54
 800e052:	224c      	movs	r2, #76	@ 0x4c
 800e054:	2100      	movs	r1, #0
 800e056:	4618      	mov	r0, r3
 800e058:	f002 fee7 	bl	8010e2a <memset>
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	4a0d      	ldr	r2, [pc, #52]	@ (800e094 <prvInitialiseNewTask+0x144>)
 800e060:	659a      	str	r2, [r3, #88]	@ 0x58
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	4a0c      	ldr	r2, [pc, #48]	@ (800e098 <prvInitialiseNewTask+0x148>)
 800e066:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06a:	4a0c      	ldr	r2, [pc, #48]	@ (800e09c <prvInitialiseNewTask+0x14c>)
 800e06c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e06e:	683a      	ldr	r2, [r7, #0]
 800e070:	68f9      	ldr	r1, [r7, #12]
 800e072:	69b8      	ldr	r0, [r7, #24]
 800e074:	f001 fc3c 	bl	800f8f0 <pxPortInitialiseStack>
 800e078:	4602      	mov	r2, r0
 800e07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e080:	2b00      	cmp	r3, #0
 800e082:	d002      	beq.n	800e08a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e08a:	bf00      	nop
 800e08c:	3720      	adds	r7, #32
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	2000ad44 	.word	0x2000ad44
 800e098:	2000adac 	.word	0x2000adac
 800e09c:	2000ae14 	.word	0x2000ae14

0800e0a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e0a8:	f001 fd56 	bl	800fb58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e0ac:	4b2d      	ldr	r3, [pc, #180]	@ (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	4a2c      	ldr	r2, [pc, #176]	@ (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d109      	bne.n	800e0d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0be:	4a2a      	ldr	r2, [pc, #168]	@ (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0c4:	4b27      	ldr	r3, [pc, #156]	@ (800e164 <prvAddNewTaskToReadyList+0xc4>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d110      	bne.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0cc:	f000 fbf8 	bl	800e8c0 <prvInitialiseTaskLists>
 800e0d0:	e00d      	b.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0d2:	4b26      	ldr	r3, [pc, #152]	@ (800e16c <prvAddNewTaskToReadyList+0xcc>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d109      	bne.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0da:	4b23      	ldr	r3, [pc, #140]	@ (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d802      	bhi.n	800e0ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0e8:	4a1f      	ldr	r2, [pc, #124]	@ (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0ee:	4b20      	ldr	r3, [pc, #128]	@ (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	4a1e      	ldr	r2, [pc, #120]	@ (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e170 <prvAddNewTaskToReadyList+0xd0>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e104:	4b1b      	ldr	r3, [pc, #108]	@ (800e174 <prvAddNewTaskToReadyList+0xd4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d903      	bls.n	800e114 <prvAddNewTaskToReadyList+0x74>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e110:	4a18      	ldr	r2, [pc, #96]	@ (800e174 <prvAddNewTaskToReadyList+0xd4>)
 800e112:	6013      	str	r3, [r2, #0]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e118:	4613      	mov	r3, r2
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4a15      	ldr	r2, [pc, #84]	@ (800e178 <prvAddNewTaskToReadyList+0xd8>)
 800e122:	441a      	add	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3304      	adds	r3, #4
 800e128:	4619      	mov	r1, r3
 800e12a:	4610      	mov	r0, r2
 800e12c:	f7fe fe4b 	bl	800cdc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e130:	f001 fd44 	bl	800fbbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e134:	4b0d      	ldr	r3, [pc, #52]	@ (800e16c <prvAddNewTaskToReadyList+0xcc>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d00e      	beq.n	800e15a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e13c:	4b0a      	ldr	r3, [pc, #40]	@ (800e168 <prvAddNewTaskToReadyList+0xc8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e146:	429a      	cmp	r2, r3
 800e148:	d207      	bcs.n	800e15a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e14a:	4b0c      	ldr	r3, [pc, #48]	@ (800e17c <prvAddNewTaskToReadyList+0xdc>)
 800e14c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e150:	601a      	str	r2, [r3, #0]
 800e152:	f3bf 8f4f 	dsb	sy
 800e156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	200011ec 	.word	0x200011ec
 800e168:	20000d18 	.word	0x20000d18
 800e16c:	200011f8 	.word	0x200011f8
 800e170:	20001208 	.word	0x20001208
 800e174:	200011f4 	.word	0x200011f4
 800e178:	20000d1c 	.word	0x20000d1c
 800e17c:	e000ed04 	.word	0xe000ed04

0800e180 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b08a      	sub	sp, #40	@ 0x28
 800e184:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e186:	2300      	movs	r3, #0
 800e188:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e18e:	463a      	mov	r2, r7
 800e190:	1d39      	adds	r1, r7, #4
 800e192:	f107 0308 	add.w	r3, r7, #8
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fdb4 	bl	800cd04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68ba      	ldr	r2, [r7, #8]
 800e1a2:	9202      	str	r2, [sp, #8]
 800e1a4:	9301      	str	r3, [sp, #4]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	460a      	mov	r2, r1
 800e1ae:	4924      	ldr	r1, [pc, #144]	@ (800e240 <vTaskStartScheduler+0xc0>)
 800e1b0:	4824      	ldr	r0, [pc, #144]	@ (800e244 <vTaskStartScheduler+0xc4>)
 800e1b2:	f7ff fe27 	bl	800de04 <xTaskCreateStatic>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	4a23      	ldr	r2, [pc, #140]	@ (800e248 <vTaskStartScheduler+0xc8>)
 800e1ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e1bc:	4b22      	ldr	r3, [pc, #136]	@ (800e248 <vTaskStartScheduler+0xc8>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	e001      	b.n	800e1ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d102      	bne.n	800e1da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e1d4:	f001 f832 	bl	800f23c <xTimerCreateTimerTask>
 800e1d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d11b      	bne.n	800e218 <vTaskStartScheduler+0x98>
	__asm volatile
 800e1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e4:	f383 8811 	msr	BASEPRI, r3
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	613b      	str	r3, [r7, #16]
}
 800e1f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e1f4:	4b15      	ldr	r3, [pc, #84]	@ (800e24c <vTaskStartScheduler+0xcc>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3354      	adds	r3, #84	@ 0x54
 800e1fa:	4a15      	ldr	r2, [pc, #84]	@ (800e250 <vTaskStartScheduler+0xd0>)
 800e1fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e1fe:	4b15      	ldr	r3, [pc, #84]	@ (800e254 <vTaskStartScheduler+0xd4>)
 800e200:	f04f 32ff 	mov.w	r2, #4294967295
 800e204:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e206:	4b14      	ldr	r3, [pc, #80]	@ (800e258 <vTaskStartScheduler+0xd8>)
 800e208:	2201      	movs	r2, #1
 800e20a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e20c:	4b13      	ldr	r3, [pc, #76]	@ (800e25c <vTaskStartScheduler+0xdc>)
 800e20e:	2200      	movs	r2, #0
 800e210:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e212:	f001 fbfd 	bl	800fa10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e216:	e00f      	b.n	800e238 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21e:	d10b      	bne.n	800e238 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e224:	f383 8811 	msr	BASEPRI, r3
 800e228:	f3bf 8f6f 	isb	sy
 800e22c:	f3bf 8f4f 	dsb	sy
 800e230:	60fb      	str	r3, [r7, #12]
}
 800e232:	bf00      	nop
 800e234:	bf00      	nop
 800e236:	e7fd      	b.n	800e234 <vTaskStartScheduler+0xb4>
}
 800e238:	bf00      	nop
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	08011c2c 	.word	0x08011c2c
 800e244:	0800e891 	.word	0x0800e891
 800e248:	20001210 	.word	0x20001210
 800e24c:	20000d18 	.word	0x20000d18
 800e250:	20000120 	.word	0x20000120
 800e254:	2000120c 	.word	0x2000120c
 800e258:	200011f8 	.word	0x200011f8
 800e25c:	200011f0 	.word	0x200011f0

0800e260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e260:	b480      	push	{r7}
 800e262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e264:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <vTaskSuspendAll+0x18>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	3301      	adds	r3, #1
 800e26a:	4a03      	ldr	r2, [pc, #12]	@ (800e278 <vTaskSuspendAll+0x18>)
 800e26c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e26e:	bf00      	nop
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	20001214 	.word	0x20001214

0800e27c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e286:	2300      	movs	r3, #0
 800e288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e28a:	4b42      	ldr	r3, [pc, #264]	@ (800e394 <xTaskResumeAll+0x118>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xTaskResumeAll+0x2e>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	603b      	str	r3, [r7, #0]
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e2aa:	f001 fc55 	bl	800fb58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e2ae:	4b39      	ldr	r3, [pc, #228]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3b01      	subs	r3, #1
 800e2b4:	4a37      	ldr	r2, [pc, #220]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e2b8:	4b36      	ldr	r3, [pc, #216]	@ (800e394 <xTaskResumeAll+0x118>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d162      	bne.n	800e386 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e2c0:	4b35      	ldr	r3, [pc, #212]	@ (800e398 <xTaskResumeAll+0x11c>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d05e      	beq.n	800e386 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e2c8:	e02f      	b.n	800e32a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ca:	4b34      	ldr	r3, [pc, #208]	@ (800e39c <xTaskResumeAll+0x120>)
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3318      	adds	r3, #24
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fe fdd2 	bl	800ce80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe fdcd 	bl	800ce80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ea:	4b2d      	ldr	r3, [pc, #180]	@ (800e3a0 <xTaskResumeAll+0x124>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d903      	bls.n	800e2fa <xTaskResumeAll+0x7e>
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e3a0 <xTaskResumeAll+0x124>)
 800e2f8:	6013      	str	r3, [r2, #0]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2fe:	4613      	mov	r3, r2
 800e300:	009b      	lsls	r3, r3, #2
 800e302:	4413      	add	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4a27      	ldr	r2, [pc, #156]	@ (800e3a4 <xTaskResumeAll+0x128>)
 800e308:	441a      	add	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fe fd58 	bl	800cdc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e31a:	4b23      	ldr	r3, [pc, #140]	@ (800e3a8 <xTaskResumeAll+0x12c>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e320:	429a      	cmp	r2, r3
 800e322:	d302      	bcc.n	800e32a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e324:	4b21      	ldr	r3, [pc, #132]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e326:	2201      	movs	r2, #1
 800e328:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e32a:	4b1c      	ldr	r3, [pc, #112]	@ (800e39c <xTaskResumeAll+0x120>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d1cb      	bne.n	800e2ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d001      	beq.n	800e33c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e338:	f000 fb66 	bl	800ea08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e33c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3b0 <xTaskResumeAll+0x134>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d010      	beq.n	800e36a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e348:	f000 f846 	bl	800e3d8 <xTaskIncrementTick>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d002      	beq.n	800e358 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e352:	4b16      	ldr	r3, [pc, #88]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e354:	2201      	movs	r2, #1
 800e356:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	3b01      	subs	r3, #1
 800e35c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1f1      	bne.n	800e348 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e364:	4b12      	ldr	r3, [pc, #72]	@ (800e3b0 <xTaskResumeAll+0x134>)
 800e366:	2200      	movs	r2, #0
 800e368:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e36a:	4b10      	ldr	r3, [pc, #64]	@ (800e3ac <xTaskResumeAll+0x130>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d009      	beq.n	800e386 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e372:	2301      	movs	r3, #1
 800e374:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <xTaskResumeAll+0x138>)
 800e378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e37c:	601a      	str	r2, [r3, #0]
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e386:	f001 fc19 	bl	800fbbc <vPortExitCritical>

	return xAlreadyYielded;
 800e38a:	68bb      	ldr	r3, [r7, #8]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	20001214 	.word	0x20001214
 800e398:	200011ec 	.word	0x200011ec
 800e39c:	200011ac 	.word	0x200011ac
 800e3a0:	200011f4 	.word	0x200011f4
 800e3a4:	20000d1c 	.word	0x20000d1c
 800e3a8:	20000d18 	.word	0x20000d18
 800e3ac:	20001200 	.word	0x20001200
 800e3b0:	200011fc 	.word	0x200011fc
 800e3b4:	e000ed04 	.word	0xe000ed04

0800e3b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b083      	sub	sp, #12
 800e3bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e3be:	4b05      	ldr	r3, [pc, #20]	@ (800e3d4 <xTaskGetTickCount+0x1c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e3c4:	687b      	ldr	r3, [r7, #4]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	370c      	adds	r7, #12
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d0:	4770      	bx	lr
 800e3d2:	bf00      	nop
 800e3d4:	200011f0 	.word	0x200011f0

0800e3d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e2:	4b4f      	ldr	r3, [pc, #316]	@ (800e520 <xTaskIncrementTick+0x148>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f040 8090 	bne.w	800e50c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e3ec:	4b4d      	ldr	r3, [pc, #308]	@ (800e524 <xTaskIncrementTick+0x14c>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e3f4:	4a4b      	ldr	r2, [pc, #300]	@ (800e524 <xTaskIncrementTick+0x14c>)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d121      	bne.n	800e444 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e400:	4b49      	ldr	r3, [pc, #292]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00b      	beq.n	800e422 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	603b      	str	r3, [r7, #0]
}
 800e41c:	bf00      	nop
 800e41e:	bf00      	nop
 800e420:	e7fd      	b.n	800e41e <xTaskIncrementTick+0x46>
 800e422:	4b41      	ldr	r3, [pc, #260]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	4b40      	ldr	r3, [pc, #256]	@ (800e52c <xTaskIncrementTick+0x154>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a3e      	ldr	r2, [pc, #248]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	4a3e      	ldr	r2, [pc, #248]	@ (800e52c <xTaskIncrementTick+0x154>)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	4b3e      	ldr	r3, [pc, #248]	@ (800e530 <xTaskIncrementTick+0x158>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	3301      	adds	r3, #1
 800e43c:	4a3c      	ldr	r2, [pc, #240]	@ (800e530 <xTaskIncrementTick+0x158>)
 800e43e:	6013      	str	r3, [r2, #0]
 800e440:	f000 fae2 	bl	800ea08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e444:	4b3b      	ldr	r3, [pc, #236]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	693a      	ldr	r2, [r7, #16]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d349      	bcc.n	800e4e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e44e:	4b36      	ldr	r3, [pc, #216]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d104      	bne.n	800e462 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e458:	4b36      	ldr	r3, [pc, #216]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e45a:	f04f 32ff 	mov.w	r2, #4294967295
 800e45e:	601a      	str	r2, [r3, #0]
					break;
 800e460:	e03f      	b.n	800e4e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e462:	4b31      	ldr	r3, [pc, #196]	@ (800e528 <xTaskIncrementTick+0x150>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e472:	693a      	ldr	r2, [r7, #16]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	429a      	cmp	r2, r3
 800e478:	d203      	bcs.n	800e482 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e47a:	4a2e      	ldr	r2, [pc, #184]	@ (800e534 <xTaskIncrementTick+0x15c>)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e480:	e02f      	b.n	800e4e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	3304      	adds	r3, #4
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe fcfa 	bl	800ce80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3318      	adds	r3, #24
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fe fcf1 	bl	800ce80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4a2:	4b25      	ldr	r3, [pc, #148]	@ (800e538 <xTaskIncrementTick+0x160>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d903      	bls.n	800e4b2 <xTaskIncrementTick+0xda>
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4ae:	4a22      	ldr	r2, [pc, #136]	@ (800e538 <xTaskIncrementTick+0x160>)
 800e4b0:	6013      	str	r3, [r2, #0]
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4a1f      	ldr	r2, [pc, #124]	@ (800e53c <xTaskIncrementTick+0x164>)
 800e4c0:	441a      	add	r2, r3
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	f7fe fc7c 	bl	800cdc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e540 <xTaskIncrementTick+0x168>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d3b8      	bcc.n	800e44e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4e0:	e7b5      	b.n	800e44e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e4e2:	4b17      	ldr	r3, [pc, #92]	@ (800e540 <xTaskIncrementTick+0x168>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e4e8:	4914      	ldr	r1, [pc, #80]	@ (800e53c <xTaskIncrementTick+0x164>)
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	440b      	add	r3, r1
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d901      	bls.n	800e4fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e4fe:	4b11      	ldr	r3, [pc, #68]	@ (800e544 <xTaskIncrementTick+0x16c>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d007      	beq.n	800e516 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e506:	2301      	movs	r3, #1
 800e508:	617b      	str	r3, [r7, #20]
 800e50a:	e004      	b.n	800e516 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e50c:	4b0e      	ldr	r3, [pc, #56]	@ (800e548 <xTaskIncrementTick+0x170>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	3301      	adds	r3, #1
 800e512:	4a0d      	ldr	r2, [pc, #52]	@ (800e548 <xTaskIncrementTick+0x170>)
 800e514:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e516:	697b      	ldr	r3, [r7, #20]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3718      	adds	r7, #24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	20001214 	.word	0x20001214
 800e524:	200011f0 	.word	0x200011f0
 800e528:	200011a4 	.word	0x200011a4
 800e52c:	200011a8 	.word	0x200011a8
 800e530:	20001204 	.word	0x20001204
 800e534:	2000120c 	.word	0x2000120c
 800e538:	200011f4 	.word	0x200011f4
 800e53c:	20000d1c 	.word	0x20000d1c
 800e540:	20000d18 	.word	0x20000d18
 800e544:	20001200 	.word	0x20001200
 800e548:	200011fc 	.word	0x200011fc

0800e54c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e552:	4b2b      	ldr	r3, [pc, #172]	@ (800e600 <vTaskSwitchContext+0xb4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e55a:	4b2a      	ldr	r3, [pc, #168]	@ (800e604 <vTaskSwitchContext+0xb8>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e560:	e047      	b.n	800e5f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e562:	4b28      	ldr	r3, [pc, #160]	@ (800e604 <vTaskSwitchContext+0xb8>)
 800e564:	2200      	movs	r2, #0
 800e566:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e568:	4b27      	ldr	r3, [pc, #156]	@ (800e608 <vTaskSwitchContext+0xbc>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60fb      	str	r3, [r7, #12]
 800e56e:	e011      	b.n	800e594 <vTaskSwitchContext+0x48>
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d10b      	bne.n	800e58e <vTaskSwitchContext+0x42>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	607b      	str	r3, [r7, #4]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <vTaskSwitchContext+0x3e>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3b01      	subs	r3, #1
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	491d      	ldr	r1, [pc, #116]	@ (800e60c <vTaskSwitchContext+0xc0>)
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	009b      	lsls	r3, r3, #2
 800e5a0:	440b      	add	r3, r1
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d0e3      	beq.n	800e570 <vTaskSwitchContext+0x24>
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4a16      	ldr	r2, [pc, #88]	@ (800e60c <vTaskSwitchContext+0xc0>)
 800e5b4:	4413      	add	r3, r2
 800e5b6:	60bb      	str	r3, [r7, #8]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	605a      	str	r2, [r3, #4]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	685a      	ldr	r2, [r3, #4]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d104      	bne.n	800e5d8 <vTaskSwitchContext+0x8c>
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	605a      	str	r2, [r3, #4]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	4a0c      	ldr	r2, [pc, #48]	@ (800e610 <vTaskSwitchContext+0xc4>)
 800e5e0:	6013      	str	r3, [r2, #0]
 800e5e2:	4a09      	ldr	r2, [pc, #36]	@ (800e608 <vTaskSwitchContext+0xbc>)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e5e8:	4b09      	ldr	r3, [pc, #36]	@ (800e610 <vTaskSwitchContext+0xc4>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3354      	adds	r3, #84	@ 0x54
 800e5ee:	4a09      	ldr	r2, [pc, #36]	@ (800e614 <vTaskSwitchContext+0xc8>)
 800e5f0:	6013      	str	r3, [r2, #0]
}
 800e5f2:	bf00      	nop
 800e5f4:	3714      	adds	r7, #20
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
 800e5fe:	bf00      	nop
 800e600:	20001214 	.word	0x20001214
 800e604:	20001200 	.word	0x20001200
 800e608:	200011f4 	.word	0x200011f4
 800e60c:	20000d1c 	.word	0x20000d1c
 800e610:	20000d18 	.word	0x20000d18
 800e614:	20000120 	.word	0x20000120

0800e618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d10b      	bne.n	800e640 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e62c:	f383 8811 	msr	BASEPRI, r3
 800e630:	f3bf 8f6f 	isb	sy
 800e634:	f3bf 8f4f 	dsb	sy
 800e638:	60fb      	str	r3, [r7, #12]
}
 800e63a:	bf00      	nop
 800e63c:	bf00      	nop
 800e63e:	e7fd      	b.n	800e63c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e640:	4b07      	ldr	r3, [pc, #28]	@ (800e660 <vTaskPlaceOnEventList+0x48>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3318      	adds	r3, #24
 800e646:	4619      	mov	r1, r3
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7fe fbe0 	bl	800ce0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e64e:	2101      	movs	r1, #1
 800e650:	6838      	ldr	r0, [r7, #0]
 800e652:	f000 fd9f 	bl	800f194 <prvAddCurrentTaskToDelayedList>
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	20000d18 	.word	0x20000d18

0800e664 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d10b      	bne.n	800e68e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67a:	f383 8811 	msr	BASEPRI, r3
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f3bf 8f4f 	dsb	sy
 800e686:	617b      	str	r3, [r7, #20]
}
 800e688:	bf00      	nop
 800e68a:	bf00      	nop
 800e68c:	e7fd      	b.n	800e68a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e68e:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3318      	adds	r3, #24
 800e694:	4619      	mov	r1, r3
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7fe fb95 	bl	800cdc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e6a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	68b8      	ldr	r0, [r7, #8]
 800e6ac:	f000 fd72 	bl	800f194 <prvAddCurrentTaskToDelayedList>
	}
 800e6b0:	bf00      	nop
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20000d18 	.word	0x20000d18

0800e6bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b086      	sub	sp, #24
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10b      	bne.n	800e6ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d6:	f383 8811 	msr	BASEPRI, r3
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	60fb      	str	r3, [r7, #12]
}
 800e6e4:	bf00      	nop
 800e6e6:	bf00      	nop
 800e6e8:	e7fd      	b.n	800e6e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	3318      	adds	r3, #24
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fe fbc6 	bl	800ce80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6f4:	4b1d      	ldr	r3, [pc, #116]	@ (800e76c <xTaskRemoveFromEventList+0xb0>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d11d      	bne.n	800e738 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	3304      	adds	r3, #4
 800e700:	4618      	mov	r0, r3
 800e702:	f7fe fbbd 	bl	800ce80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e70a:	4b19      	ldr	r3, [pc, #100]	@ (800e770 <xTaskRemoveFromEventList+0xb4>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d903      	bls.n	800e71a <xTaskRemoveFromEventList+0x5e>
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e716:	4a16      	ldr	r2, [pc, #88]	@ (800e770 <xTaskRemoveFromEventList+0xb4>)
 800e718:	6013      	str	r3, [r2, #0]
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4a13      	ldr	r2, [pc, #76]	@ (800e774 <xTaskRemoveFromEventList+0xb8>)
 800e728:	441a      	add	r2, r3
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	3304      	adds	r3, #4
 800e72e:	4619      	mov	r1, r3
 800e730:	4610      	mov	r0, r2
 800e732:	f7fe fb48 	bl	800cdc6 <vListInsertEnd>
 800e736:	e005      	b.n	800e744 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	3318      	adds	r3, #24
 800e73c:	4619      	mov	r1, r3
 800e73e:	480e      	ldr	r0, [pc, #56]	@ (800e778 <xTaskRemoveFromEventList+0xbc>)
 800e740:	f7fe fb41 	bl	800cdc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e748:	4b0c      	ldr	r3, [pc, #48]	@ (800e77c <xTaskRemoveFromEventList+0xc0>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e74e:	429a      	cmp	r2, r3
 800e750:	d905      	bls.n	800e75e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e752:	2301      	movs	r3, #1
 800e754:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e756:	4b0a      	ldr	r3, [pc, #40]	@ (800e780 <xTaskRemoveFromEventList+0xc4>)
 800e758:	2201      	movs	r2, #1
 800e75a:	601a      	str	r2, [r3, #0]
 800e75c:	e001      	b.n	800e762 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e75e:	2300      	movs	r3, #0
 800e760:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e762:	697b      	ldr	r3, [r7, #20]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	20001214 	.word	0x20001214
 800e770:	200011f4 	.word	0x200011f4
 800e774:	20000d1c 	.word	0x20000d1c
 800e778:	200011ac 	.word	0x200011ac
 800e77c:	20000d18 	.word	0x20000d18
 800e780:	20001200 	.word	0x20001200

0800e784 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e78c:	4b06      	ldr	r3, [pc, #24]	@ (800e7a8 <vTaskInternalSetTimeOutState+0x24>)
 800e78e:	681a      	ldr	r2, [r3, #0]
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e794:	4b05      	ldr	r3, [pc, #20]	@ (800e7ac <vTaskInternalSetTimeOutState+0x28>)
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	605a      	str	r2, [r3, #4]
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	20001204 	.word	0x20001204
 800e7ac:	200011f0 	.word	0x200011f0

0800e7b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b088      	sub	sp, #32
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10b      	bne.n	800e7d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	613b      	str	r3, [r7, #16]
}
 800e7d2:	bf00      	nop
 800e7d4:	bf00      	nop
 800e7d6:	e7fd      	b.n	800e7d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d10b      	bne.n	800e7f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e2:	f383 8811 	msr	BASEPRI, r3
 800e7e6:	f3bf 8f6f 	isb	sy
 800e7ea:	f3bf 8f4f 	dsb	sy
 800e7ee:	60fb      	str	r3, [r7, #12]
}
 800e7f0:	bf00      	nop
 800e7f2:	bf00      	nop
 800e7f4:	e7fd      	b.n	800e7f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e7f6:	f001 f9af 	bl	800fb58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e7fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e870 <xTaskCheckForTimeOut+0xc0>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	69ba      	ldr	r2, [r7, #24]
 800e806:	1ad3      	subs	r3, r2, r3
 800e808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e812:	d102      	bne.n	800e81a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e814:	2300      	movs	r3, #0
 800e816:	61fb      	str	r3, [r7, #28]
 800e818:	e023      	b.n	800e862 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	4b15      	ldr	r3, [pc, #84]	@ (800e874 <xTaskCheckForTimeOut+0xc4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	429a      	cmp	r2, r3
 800e824:	d007      	beq.n	800e836 <xTaskCheckForTimeOut+0x86>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	69ba      	ldr	r2, [r7, #24]
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d302      	bcc.n	800e836 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e830:	2301      	movs	r3, #1
 800e832:	61fb      	str	r3, [r7, #28]
 800e834:	e015      	b.n	800e862 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	697a      	ldr	r2, [r7, #20]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d20b      	bcs.n	800e858 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	1ad2      	subs	r2, r2, r3
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f7ff ff99 	bl	800e784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e852:	2300      	movs	r3, #0
 800e854:	61fb      	str	r3, [r7, #28]
 800e856:	e004      	b.n	800e862 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2200      	movs	r2, #0
 800e85c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e85e:	2301      	movs	r3, #1
 800e860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e862:	f001 f9ab 	bl	800fbbc <vPortExitCritical>

	return xReturn;
 800e866:	69fb      	ldr	r3, [r7, #28]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3720      	adds	r7, #32
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}
 800e870:	200011f0 	.word	0x200011f0
 800e874:	20001204 	.word	0x20001204

0800e878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e87c:	4b03      	ldr	r3, [pc, #12]	@ (800e88c <vTaskMissedYield+0x14>)
 800e87e:	2201      	movs	r2, #1
 800e880:	601a      	str	r2, [r3, #0]
}
 800e882:	bf00      	nop
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	20001200 	.word	0x20001200

0800e890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e898:	f000 f852 	bl	800e940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e89c:	4b06      	ldr	r3, [pc, #24]	@ (800e8b8 <prvIdleTask+0x28>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d9f9      	bls.n	800e898 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e8a4:	4b05      	ldr	r3, [pc, #20]	@ (800e8bc <prvIdleTask+0x2c>)
 800e8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8aa:	601a      	str	r2, [r3, #0]
 800e8ac:	f3bf 8f4f 	dsb	sy
 800e8b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e8b4:	e7f0      	b.n	800e898 <prvIdleTask+0x8>
 800e8b6:	bf00      	nop
 800e8b8:	20000d1c 	.word	0x20000d1c
 800e8bc:	e000ed04 	.word	0xe000ed04

0800e8c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	607b      	str	r3, [r7, #4]
 800e8ca:	e00c      	b.n	800e8e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4a12      	ldr	r2, [pc, #72]	@ (800e920 <prvInitialiseTaskLists+0x60>)
 800e8d8:	4413      	add	r3, r2
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe fa46 	bl	800cd6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	607b      	str	r3, [r7, #4]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2b37      	cmp	r3, #55	@ 0x37
 800e8ea:	d9ef      	bls.n	800e8cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e8ec:	480d      	ldr	r0, [pc, #52]	@ (800e924 <prvInitialiseTaskLists+0x64>)
 800e8ee:	f7fe fa3d 	bl	800cd6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e8f2:	480d      	ldr	r0, [pc, #52]	@ (800e928 <prvInitialiseTaskLists+0x68>)
 800e8f4:	f7fe fa3a 	bl	800cd6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e8f8:	480c      	ldr	r0, [pc, #48]	@ (800e92c <prvInitialiseTaskLists+0x6c>)
 800e8fa:	f7fe fa37 	bl	800cd6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e8fe:	480c      	ldr	r0, [pc, #48]	@ (800e930 <prvInitialiseTaskLists+0x70>)
 800e900:	f7fe fa34 	bl	800cd6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e904:	480b      	ldr	r0, [pc, #44]	@ (800e934 <prvInitialiseTaskLists+0x74>)
 800e906:	f7fe fa31 	bl	800cd6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e90a:	4b0b      	ldr	r3, [pc, #44]	@ (800e938 <prvInitialiseTaskLists+0x78>)
 800e90c:	4a05      	ldr	r2, [pc, #20]	@ (800e924 <prvInitialiseTaskLists+0x64>)
 800e90e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e910:	4b0a      	ldr	r3, [pc, #40]	@ (800e93c <prvInitialiseTaskLists+0x7c>)
 800e912:	4a05      	ldr	r2, [pc, #20]	@ (800e928 <prvInitialiseTaskLists+0x68>)
 800e914:	601a      	str	r2, [r3, #0]
}
 800e916:	bf00      	nop
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	20000d1c 	.word	0x20000d1c
 800e924:	2000117c 	.word	0x2000117c
 800e928:	20001190 	.word	0x20001190
 800e92c:	200011ac 	.word	0x200011ac
 800e930:	200011c0 	.word	0x200011c0
 800e934:	200011d8 	.word	0x200011d8
 800e938:	200011a4 	.word	0x200011a4
 800e93c:	200011a8 	.word	0x200011a8

0800e940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e946:	e019      	b.n	800e97c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e948:	f001 f906 	bl	800fb58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e94c:	4b10      	ldr	r3, [pc, #64]	@ (800e990 <prvCheckTasksWaitingTermination+0x50>)
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3304      	adds	r3, #4
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe fa91 	bl	800ce80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e95e:	4b0d      	ldr	r3, [pc, #52]	@ (800e994 <prvCheckTasksWaitingTermination+0x54>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3b01      	subs	r3, #1
 800e964:	4a0b      	ldr	r2, [pc, #44]	@ (800e994 <prvCheckTasksWaitingTermination+0x54>)
 800e966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e968:	4b0b      	ldr	r3, [pc, #44]	@ (800e998 <prvCheckTasksWaitingTermination+0x58>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	3b01      	subs	r3, #1
 800e96e:	4a0a      	ldr	r2, [pc, #40]	@ (800e998 <prvCheckTasksWaitingTermination+0x58>)
 800e970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e972:	f001 f923 	bl	800fbbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f810 	bl	800e99c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e97c:	4b06      	ldr	r3, [pc, #24]	@ (800e998 <prvCheckTasksWaitingTermination+0x58>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1e1      	bne.n	800e948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e984:	bf00      	nop
 800e986:	bf00      	nop
 800e988:	3708      	adds	r7, #8
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	200011c0 	.word	0x200011c0
 800e994:	200011ec 	.word	0x200011ec
 800e998:	200011d4 	.word	0x200011d4

0800e99c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	3354      	adds	r3, #84	@ 0x54
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f002 fa57 	bl	8010e5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d108      	bne.n	800e9ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f001 fabb 	bl	800ff38 <vPortFree>
				vPortFree( pxTCB );
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f001 fab8 	bl	800ff38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e9c8:	e019      	b.n	800e9fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d103      	bne.n	800e9dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f001 faaf 	bl	800ff38 <vPortFree>
	}
 800e9da:	e010      	b.n	800e9fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d00b      	beq.n	800e9fe <prvDeleteTCB+0x62>
	__asm volatile
 800e9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	60fb      	str	r3, [r7, #12]
}
 800e9f8:	bf00      	nop
 800e9fa:	bf00      	nop
 800e9fc:	e7fd      	b.n	800e9fa <prvDeleteTCB+0x5e>
	}
 800e9fe:	bf00      	nop
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
	...

0800ea08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b083      	sub	sp, #12
 800ea0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ea40 <prvResetNextTaskUnblockTime+0x38>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d104      	bne.n	800ea22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ea18:	4b0a      	ldr	r3, [pc, #40]	@ (800ea44 <prvResetNextTaskUnblockTime+0x3c>)
 800ea1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ea20:	e008      	b.n	800ea34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea22:	4b07      	ldr	r3, [pc, #28]	@ (800ea40 <prvResetNextTaskUnblockTime+0x38>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	4a04      	ldr	r2, [pc, #16]	@ (800ea44 <prvResetNextTaskUnblockTime+0x3c>)
 800ea32:	6013      	str	r3, [r2, #0]
}
 800ea34:	bf00      	nop
 800ea36:	370c      	adds	r7, #12
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr
 800ea40:	200011a4 	.word	0x200011a4
 800ea44:	2000120c 	.word	0x2000120c

0800ea48 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ea4e:	4b05      	ldr	r3, [pc, #20]	@ (800ea64 <xTaskGetCurrentTaskHandle+0x1c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ea54:	687b      	ldr	r3, [r7, #4]
	}
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20000d18 	.word	0x20000d18

0800ea68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ea6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ea9c <xTaskGetSchedulerState+0x34>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d102      	bne.n	800ea7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ea76:	2301      	movs	r3, #1
 800ea78:	607b      	str	r3, [r7, #4]
 800ea7a:	e008      	b.n	800ea8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea7c:	4b08      	ldr	r3, [pc, #32]	@ (800eaa0 <xTaskGetSchedulerState+0x38>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d102      	bne.n	800ea8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ea84:	2302      	movs	r3, #2
 800ea86:	607b      	str	r3, [r7, #4]
 800ea88:	e001      	b.n	800ea8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ea8e:	687b      	ldr	r3, [r7, #4]
	}
 800ea90:	4618      	mov	r0, r3
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	200011f8 	.word	0x200011f8
 800eaa0:	20001214 	.word	0x20001214

0800eaa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eab0:	2300      	movs	r3, #0
 800eab2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d051      	beq.n	800eb5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eabe:	4b2a      	ldr	r3, [pc, #168]	@ (800eb68 <xTaskPriorityInherit+0xc4>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d241      	bcs.n	800eb4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	db06      	blt.n	800eade <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ead0:	4b25      	ldr	r3, [pc, #148]	@ (800eb68 <xTaskPriorityInherit+0xc4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	6959      	ldr	r1, [r3, #20]
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eae6:	4613      	mov	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4a1f      	ldr	r2, [pc, #124]	@ (800eb6c <xTaskPriorityInherit+0xc8>)
 800eaf0:	4413      	add	r3, r2
 800eaf2:	4299      	cmp	r1, r3
 800eaf4:	d122      	bne.n	800eb3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	3304      	adds	r3, #4
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe f9c0 	bl	800ce80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb00:	4b19      	ldr	r3, [pc, #100]	@ (800eb68 <xTaskPriorityInherit+0xc4>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb0e:	4b18      	ldr	r3, [pc, #96]	@ (800eb70 <xTaskPriorityInherit+0xcc>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d903      	bls.n	800eb1e <xTaskPriorityInherit+0x7a>
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb1a:	4a15      	ldr	r2, [pc, #84]	@ (800eb70 <xTaskPriorityInherit+0xcc>)
 800eb1c:	6013      	str	r3, [r2, #0]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb22:	4613      	mov	r3, r2
 800eb24:	009b      	lsls	r3, r3, #2
 800eb26:	4413      	add	r3, r2
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4a10      	ldr	r2, [pc, #64]	@ (800eb6c <xTaskPriorityInherit+0xc8>)
 800eb2c:	441a      	add	r2, r3
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	3304      	adds	r3, #4
 800eb32:	4619      	mov	r1, r3
 800eb34:	4610      	mov	r0, r2
 800eb36:	f7fe f946 	bl	800cdc6 <vListInsertEnd>
 800eb3a:	e004      	b.n	800eb46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800eb68 <xTaskPriorityInherit+0xc4>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800eb46:	2301      	movs	r3, #1
 800eb48:	60fb      	str	r3, [r7, #12]
 800eb4a:	e008      	b.n	800eb5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb50:	4b05      	ldr	r3, [pc, #20]	@ (800eb68 <xTaskPriorityInherit+0xc4>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d201      	bcs.n	800eb5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
	}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	20000d18 	.word	0x20000d18
 800eb6c:	20000d1c 	.word	0x20000d1c
 800eb70:	200011f4 	.word	0x200011f4

0800eb74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b086      	sub	sp, #24
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb80:	2300      	movs	r3, #0
 800eb82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d058      	beq.n	800ec3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ec48 <xTaskPriorityDisinherit+0xd4>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d00b      	beq.n	800ebac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800eb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb98:	f383 8811 	msr	BASEPRI, r3
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	60fb      	str	r3, [r7, #12]
}
 800eba6:	bf00      	nop
 800eba8:	bf00      	nop
 800ebaa:	e7fd      	b.n	800eba8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d10b      	bne.n	800ebcc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ebb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb8:	f383 8811 	msr	BASEPRI, r3
 800ebbc:	f3bf 8f6f 	isb	sy
 800ebc0:	f3bf 8f4f 	dsb	sy
 800ebc4:	60bb      	str	r3, [r7, #8]
}
 800ebc6:	bf00      	nop
 800ebc8:	bf00      	nop
 800ebca:	e7fd      	b.n	800ebc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebd0:	1e5a      	subs	r2, r3, #1
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d02c      	beq.n	800ec3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d128      	bne.n	800ec3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	3304      	adds	r3, #4
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fe f946 	bl	800ce80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <xTaskPriorityDisinherit+0xd8>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d903      	bls.n	800ec1c <xTaskPriorityDisinherit+0xa8>
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec18:	4a0c      	ldr	r2, [pc, #48]	@ (800ec4c <xTaskPriorityDisinherit+0xd8>)
 800ec1a:	6013      	str	r3, [r2, #0]
 800ec1c:	693b      	ldr	r3, [r7, #16]
 800ec1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	4a09      	ldr	r2, [pc, #36]	@ (800ec50 <xTaskPriorityDisinherit+0xdc>)
 800ec2a:	441a      	add	r2, r3
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	3304      	adds	r3, #4
 800ec30:	4619      	mov	r1, r3
 800ec32:	4610      	mov	r0, r2
 800ec34:	f7fe f8c7 	bl	800cdc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec3c:	697b      	ldr	r3, [r7, #20]
	}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3718      	adds	r7, #24
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}
 800ec46:	bf00      	nop
 800ec48:	20000d18 	.word	0x20000d18
 800ec4c:	200011f4 	.word	0x200011f4
 800ec50:	20000d1c 	.word	0x20000d1c

0800ec54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b088      	sub	sp, #32
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ec62:	2301      	movs	r3, #1
 800ec64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d06c      	beq.n	800ed46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10b      	bne.n	800ec8c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	60fb      	str	r3, [r7, #12]
}
 800ec86:	bf00      	nop
 800ec88:	bf00      	nop
 800ec8a:	e7fd      	b.n	800ec88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ec8c:	69bb      	ldr	r3, [r7, #24]
 800ec8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d902      	bls.n	800ec9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	61fb      	str	r3, [r7, #28]
 800ec9a:	e002      	b.n	800eca2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eca0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca6:	69fa      	ldr	r2, [r7, #28]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d04c      	beq.n	800ed46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ecb0:	697a      	ldr	r2, [r7, #20]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d147      	bne.n	800ed46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ecb6:	4b26      	ldr	r3, [pc, #152]	@ (800ed50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d10b      	bne.n	800ecd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ecc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc4:	f383 8811 	msr	BASEPRI, r3
 800ecc8:	f3bf 8f6f 	isb	sy
 800eccc:	f3bf 8f4f 	dsb	sy
 800ecd0:	60bb      	str	r3, [r7, #8]
}
 800ecd2:	bf00      	nop
 800ecd4:	bf00      	nop
 800ecd6:	e7fd      	b.n	800ecd4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	69fa      	ldr	r2, [r7, #28]
 800ece2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ece4:	69bb      	ldr	r3, [r7, #24]
 800ece6:	699b      	ldr	r3, [r3, #24]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	db04      	blt.n	800ecf6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	6959      	ldr	r1, [r3, #20]
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	4a13      	ldr	r2, [pc, #76]	@ (800ed54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed06:	4413      	add	r3, r2
 800ed08:	4299      	cmp	r1, r3
 800ed0a:	d11c      	bne.n	800ed46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	3304      	adds	r3, #4
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fe f8b5 	bl	800ce80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ed58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d903      	bls.n	800ed2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed26:	4a0c      	ldr	r2, [pc, #48]	@ (800ed58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ed28:	6013      	str	r3, [r2, #0]
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed2e:	4613      	mov	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	4413      	add	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4a07      	ldr	r2, [pc, #28]	@ (800ed54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ed38:	441a      	add	r2, r3
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	3304      	adds	r3, #4
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4610      	mov	r0, r2
 800ed42:	f7fe f840 	bl	800cdc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed46:	bf00      	nop
 800ed48:	3720      	adds	r7, #32
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	20000d18 	.word	0x20000d18
 800ed54:	20000d1c 	.word	0x20000d1c
 800ed58:	200011f4 	.word	0x200011f4

0800ed5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ed5c:	b480      	push	{r7}
 800ed5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ed60:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d004      	beq.n	800ed72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ed68:	4b05      	ldr	r3, [pc, #20]	@ (800ed80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed6e:	3201      	adds	r2, #1
 800ed70:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ed72:	4b03      	ldr	r3, [pc, #12]	@ (800ed80 <pvTaskIncrementMutexHeldCount+0x24>)
 800ed74:	681b      	ldr	r3, [r3, #0]
	}
 800ed76:	4618      	mov	r0, r3
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	20000d18 	.word	0x20000d18

0800ed84 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
 800ed90:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ed92:	f000 fee1 	bl	800fb58 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed96:	4b29      	ldr	r3, [pc, #164]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b02      	cmp	r3, #2
 800eda2:	d01c      	beq.n	800edde <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800eda4:	4b25      	ldr	r3, [pc, #148]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800edac:	68fa      	ldr	r2, [r7, #12]
 800edae:	43d2      	mvns	r2, r2
 800edb0:	400a      	ands	r2, r1
 800edb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800edb6:	4b21      	ldr	r3, [pc, #132]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2201      	movs	r2, #1
 800edbc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00b      	beq.n	800edde <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edc6:	2101      	movs	r1, #1
 800edc8:	6838      	ldr	r0, [r7, #0]
 800edca:	f000 f9e3 	bl	800f194 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edce:	4b1c      	ldr	r3, [pc, #112]	@ (800ee40 <xTaskNotifyWait+0xbc>)
 800edd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edd4:	601a      	str	r2, [r3, #0]
 800edd6:	f3bf 8f4f 	dsb	sy
 800edda:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edde:	f000 feed 	bl	800fbbc <vPortExitCritical>

		taskENTER_CRITICAL();
 800ede2:	f000 feb9 	bl	800fb58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d005      	beq.n	800edf8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800edec:	4b13      	ldr	r3, [pc, #76]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800edf8:	4b10      	ldr	r3, [pc, #64]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee00:	b2db      	uxtb	r3, r3
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d002      	beq.n	800ee0c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ee06:	2300      	movs	r3, #0
 800ee08:	617b      	str	r3, [r7, #20]
 800ee0a:	e00a      	b.n	800ee22 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ee0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	43d2      	mvns	r2, r2
 800ee18:	400a      	ands	r2, r1
 800ee1a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee22:	4b06      	ldr	r3, [pc, #24]	@ (800ee3c <xTaskNotifyWait+0xb8>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800ee2c:	f000 fec6 	bl	800fbbc <vPortExitCritical>

		return xReturn;
 800ee30:	697b      	ldr	r3, [r7, #20]
	}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20000d18 	.word	0x20000d18
 800ee40:	e000ed04 	.word	0xe000ed04

0800ee44 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b08a      	sub	sp, #40	@ 0x28
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	603b      	str	r3, [r7, #0]
 800ee50:	4613      	mov	r3, r2
 800ee52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ee54:	2301      	movs	r3, #1
 800ee56:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10b      	bne.n	800ee76 <xTaskGenericNotify+0x32>
	__asm volatile
 800ee5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	61bb      	str	r3, [r7, #24]
}
 800ee70:	bf00      	nop
 800ee72:	bf00      	nop
 800ee74:	e7fd      	b.n	800ee72 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ee7a:	f000 fe6d 	bl	800fb58 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d004      	beq.n	800ee8e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ee94:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	2202      	movs	r2, #2
 800ee9a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800ee9e:	79fb      	ldrb	r3, [r7, #7]
 800eea0:	2b04      	cmp	r3, #4
 800eea2:	d82e      	bhi.n	800ef02 <xTaskGenericNotify+0xbe>
 800eea4:	a201      	add	r2, pc, #4	@ (adr r2, 800eeac <xTaskGenericNotify+0x68>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800ef27 	.word	0x0800ef27
 800eeb0:	0800eec1 	.word	0x0800eec1
 800eeb4:	0800eed3 	.word	0x0800eed3
 800eeb8:	0800eee3 	.word	0x0800eee3
 800eebc:	0800eeed 	.word	0x0800eeed
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eec0:	6a3b      	ldr	r3, [r7, #32]
 800eec2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	431a      	orrs	r2, r3
 800eeca:	6a3b      	ldr	r3, [r7, #32]
 800eecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eed0:	e02c      	b.n	800ef2c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eed8:	1c5a      	adds	r2, r3, #1
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eee0:	e024      	b.n	800ef2c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eee2:	6a3b      	ldr	r3, [r7, #32]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800eeea:	e01f      	b.n	800ef2c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eeec:	7ffb      	ldrb	r3, [r7, #31]
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	d004      	beq.n	800eefc <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eefa:	e017      	b.n	800ef2c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ef00:	e014      	b.n	800ef2c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0c:	d00d      	beq.n	800ef2a <xTaskGenericNotify+0xe6>
	__asm volatile
 800ef0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef12:	f383 8811 	msr	BASEPRI, r3
 800ef16:	f3bf 8f6f 	isb	sy
 800ef1a:	f3bf 8f4f 	dsb	sy
 800ef1e:	617b      	str	r3, [r7, #20]
}
 800ef20:	bf00      	nop
 800ef22:	bf00      	nop
 800ef24:	e7fd      	b.n	800ef22 <xTaskGenericNotify+0xde>
					break;
 800ef26:	bf00      	nop
 800ef28:	e000      	b.n	800ef2c <xTaskGenericNotify+0xe8>

					break;
 800ef2a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef2c:	7ffb      	ldrb	r3, [r7, #31]
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	d13b      	bne.n	800efaa <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	3304      	adds	r3, #4
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fd ffa2 	bl	800ce80 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef40:	4b1d      	ldr	r3, [pc, #116]	@ (800efb8 <xTaskGenericNotify+0x174>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d903      	bls.n	800ef50 <xTaskGenericNotify+0x10c>
 800ef48:	6a3b      	ldr	r3, [r7, #32]
 800ef4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef4c:	4a1a      	ldr	r2, [pc, #104]	@ (800efb8 <xTaskGenericNotify+0x174>)
 800ef4e:	6013      	str	r3, [r2, #0]
 800ef50:	6a3b      	ldr	r3, [r7, #32]
 800ef52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef54:	4613      	mov	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4413      	add	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4a17      	ldr	r2, [pc, #92]	@ (800efbc <xTaskGenericNotify+0x178>)
 800ef5e:	441a      	add	r2, r3
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	3304      	adds	r3, #4
 800ef64:	4619      	mov	r1, r3
 800ef66:	4610      	mov	r0, r2
 800ef68:	f7fd ff2d 	bl	800cdc6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef6c:	6a3b      	ldr	r3, [r7, #32]
 800ef6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00b      	beq.n	800ef8c <xTaskGenericNotify+0x148>
	__asm volatile
 800ef74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	613b      	str	r3, [r7, #16]
}
 800ef86:	bf00      	nop
 800ef88:	bf00      	nop
 800ef8a:	e7fd      	b.n	800ef88 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef8c:	6a3b      	ldr	r3, [r7, #32]
 800ef8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef90:	4b0b      	ldr	r3, [pc, #44]	@ (800efc0 <xTaskGenericNotify+0x17c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d907      	bls.n	800efaa <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ef9a:	4b0a      	ldr	r3, [pc, #40]	@ (800efc4 <xTaskGenericNotify+0x180>)
 800ef9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	f3bf 8f4f 	dsb	sy
 800efa6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efaa:	f000 fe07 	bl	800fbbc <vPortExitCritical>

		return xReturn;
 800efae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3728      	adds	r7, #40	@ 0x28
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	200011f4 	.word	0x200011f4
 800efbc:	20000d1c 	.word	0x20000d1c
 800efc0:	20000d18 	.word	0x20000d18
 800efc4:	e000ed04 	.word	0xe000ed04

0800efc8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08e      	sub	sp, #56	@ 0x38
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	603b      	str	r3, [r7, #0]
 800efd4:	4613      	mov	r3, r2
 800efd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800efd8:	2301      	movs	r3, #1
 800efda:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10b      	bne.n	800effa <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800efe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efe6:	f383 8811 	msr	BASEPRI, r3
 800efea:	f3bf 8f6f 	isb	sy
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800eff4:	bf00      	nop
 800eff6:	bf00      	nop
 800eff8:	e7fd      	b.n	800eff6 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800effa:	f000 fe8d 	bl	800fd18 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800f002:	f3ef 8211 	mrs	r2, BASEPRI
 800f006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f00a:	f383 8811 	msr	BASEPRI, r3
 800f00e:	f3bf 8f6f 	isb	sy
 800f012:	f3bf 8f4f 	dsb	sy
 800f016:	623a      	str	r2, [r7, #32]
 800f018:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f01a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d004      	beq.n	800f02e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f026:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f030:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f03a:	2202      	movs	r2, #2
 800f03c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	2b04      	cmp	r3, #4
 800f044:	d82e      	bhi.n	800f0a4 <xTaskGenericNotifyFromISR+0xdc>
 800f046:	a201      	add	r2, pc, #4	@ (adr r2, 800f04c <xTaskGenericNotifyFromISR+0x84>)
 800f048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f04c:	0800f0c9 	.word	0x0800f0c9
 800f050:	0800f061 	.word	0x0800f061
 800f054:	0800f073 	.word	0x0800f073
 800f058:	0800f083 	.word	0x0800f083
 800f05c:	0800f08d 	.word	0x0800f08d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f062:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	431a      	orrs	r2, r3
 800f06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f06c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f070:	e02d      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f07c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f080:	e025      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f08a:	e020      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f08c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f090:	2b02      	cmp	r3, #2
 800f092:	d004      	beq.n	800f09e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f096:	68ba      	ldr	r2, [r7, #8]
 800f098:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f09c:	e017      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800f0a2:	e014      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ae:	d00d      	beq.n	800f0cc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800f0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0b4:	f383 8811 	msr	BASEPRI, r3
 800f0b8:	f3bf 8f6f 	isb	sy
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	61bb      	str	r3, [r7, #24]
}
 800f0c2:	bf00      	nop
 800f0c4:	bf00      	nop
 800f0c6:	e7fd      	b.n	800f0c4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f0c8:	bf00      	nop
 800f0ca:	e000      	b.n	800f0ce <xTaskGenericNotifyFromISR+0x106>
					break;
 800f0cc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f0ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d147      	bne.n	800f166 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00b      	beq.n	800f0f6 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	617b      	str	r3, [r7, #20]
}
 800f0f0:	bf00      	nop
 800f0f2:	bf00      	nop
 800f0f4:	e7fd      	b.n	800f0f2 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0f6:	4b21      	ldr	r3, [pc, #132]	@ (800f17c <xTaskGenericNotifyFromISR+0x1b4>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d11d      	bne.n	800f13a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f100:	3304      	adds	r3, #4
 800f102:	4618      	mov	r0, r3
 800f104:	f7fd febc 	bl	800ce80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f10a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f10c:	4b1c      	ldr	r3, [pc, #112]	@ (800f180 <xTaskGenericNotifyFromISR+0x1b8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	429a      	cmp	r2, r3
 800f112:	d903      	bls.n	800f11c <xTaskGenericNotifyFromISR+0x154>
 800f114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f118:	4a19      	ldr	r2, [pc, #100]	@ (800f180 <xTaskGenericNotifyFromISR+0x1b8>)
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f120:	4613      	mov	r3, r2
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	4413      	add	r3, r2
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	4a16      	ldr	r2, [pc, #88]	@ (800f184 <xTaskGenericNotifyFromISR+0x1bc>)
 800f12a:	441a      	add	r2, r3
 800f12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f12e:	3304      	adds	r3, #4
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fd fe47 	bl	800cdc6 <vListInsertEnd>
 800f138:	e005      	b.n	800f146 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13c:	3318      	adds	r3, #24
 800f13e:	4619      	mov	r1, r3
 800f140:	4811      	ldr	r0, [pc, #68]	@ (800f188 <xTaskGenericNotifyFromISR+0x1c0>)
 800f142:	f7fd fe40 	bl	800cdc6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f14a:	4b10      	ldr	r3, [pc, #64]	@ (800f18c <xTaskGenericNotifyFromISR+0x1c4>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f150:	429a      	cmp	r2, r3
 800f152:	d908      	bls.n	800f166 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f156:	2b00      	cmp	r3, #0
 800f158:	d002      	beq.n	800f160 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f15c:	2201      	movs	r2, #1
 800f15e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f160:	4b0b      	ldr	r3, [pc, #44]	@ (800f190 <xTaskGenericNotifyFromISR+0x1c8>)
 800f162:	2201      	movs	r2, #1
 800f164:	601a      	str	r2, [r3, #0]
 800f166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f168:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f383 8811 	msr	BASEPRI, r3
}
 800f170:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800f174:	4618      	mov	r0, r3
 800f176:	3738      	adds	r7, #56	@ 0x38
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	20001214 	.word	0x20001214
 800f180:	200011f4 	.word	0x200011f4
 800f184:	20000d1c 	.word	0x20000d1c
 800f188:	200011ac 	.word	0x200011ac
 800f18c:	20000d18 	.word	0x20000d18
 800f190:	20001200 	.word	0x20001200

0800f194 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f19e:	4b21      	ldr	r3, [pc, #132]	@ (800f224 <prvAddCurrentTaskToDelayedList+0x90>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1a4:	4b20      	ldr	r3, [pc, #128]	@ (800f228 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fd fe68 	bl	800ce80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b6:	d10a      	bne.n	800f1ce <prvAddCurrentTaskToDelayedList+0x3a>
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1be:	4b1a      	ldr	r3, [pc, #104]	@ (800f228 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4819      	ldr	r0, [pc, #100]	@ (800f22c <prvAddCurrentTaskToDelayedList+0x98>)
 800f1c8:	f7fd fdfd 	bl	800cdc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1cc:	e026      	b.n	800f21c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1d6:	4b14      	ldr	r3, [pc, #80]	@ (800f228 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	68ba      	ldr	r2, [r7, #8]
 800f1dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d209      	bcs.n	800f1fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e6:	4b12      	ldr	r3, [pc, #72]	@ (800f230 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f228 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3304      	adds	r3, #4
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	4610      	mov	r0, r2
 800f1f4:	f7fd fe0b 	bl	800ce0e <vListInsert>
}
 800f1f8:	e010      	b.n	800f21c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f234 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f1fc:	681a      	ldr	r2, [r3, #0]
 800f1fe:	4b0a      	ldr	r3, [pc, #40]	@ (800f228 <prvAddCurrentTaskToDelayedList+0x94>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3304      	adds	r3, #4
 800f204:	4619      	mov	r1, r3
 800f206:	4610      	mov	r0, r2
 800f208:	f7fd fe01 	bl	800ce0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f20c:	4b0a      	ldr	r3, [pc, #40]	@ (800f238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	429a      	cmp	r2, r3
 800f214:	d202      	bcs.n	800f21c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f216:	4a08      	ldr	r2, [pc, #32]	@ (800f238 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	6013      	str	r3, [r2, #0]
}
 800f21c:	bf00      	nop
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	200011f0 	.word	0x200011f0
 800f228:	20000d18 	.word	0x20000d18
 800f22c:	200011d8 	.word	0x200011d8
 800f230:	200011a8 	.word	0x200011a8
 800f234:	200011a4 	.word	0x200011a4
 800f238:	2000120c 	.word	0x2000120c

0800f23c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b08a      	sub	sp, #40	@ 0x28
 800f240:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f242:	2300      	movs	r3, #0
 800f244:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f246:	f000 fb13 	bl	800f870 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f24a:	4b1d      	ldr	r3, [pc, #116]	@ (800f2c0 <xTimerCreateTimerTask+0x84>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d021      	beq.n	800f296 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f252:	2300      	movs	r3, #0
 800f254:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f256:	2300      	movs	r3, #0
 800f258:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f25a:	1d3a      	adds	r2, r7, #4
 800f25c:	f107 0108 	add.w	r1, r7, #8
 800f260:	f107 030c 	add.w	r3, r7, #12
 800f264:	4618      	mov	r0, r3
 800f266:	f7fd fd67 	bl	800cd38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f26a:	6879      	ldr	r1, [r7, #4]
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	9202      	str	r2, [sp, #8]
 800f272:	9301      	str	r3, [sp, #4]
 800f274:	2302      	movs	r3, #2
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	2300      	movs	r3, #0
 800f27a:	460a      	mov	r2, r1
 800f27c:	4911      	ldr	r1, [pc, #68]	@ (800f2c4 <xTimerCreateTimerTask+0x88>)
 800f27e:	4812      	ldr	r0, [pc, #72]	@ (800f2c8 <xTimerCreateTimerTask+0x8c>)
 800f280:	f7fe fdc0 	bl	800de04 <xTaskCreateStatic>
 800f284:	4603      	mov	r3, r0
 800f286:	4a11      	ldr	r2, [pc, #68]	@ (800f2cc <xTimerCreateTimerTask+0x90>)
 800f288:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f28a:	4b10      	ldr	r3, [pc, #64]	@ (800f2cc <xTimerCreateTimerTask+0x90>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d001      	beq.n	800f296 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f292:	2301      	movs	r3, #1
 800f294:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10b      	bne.n	800f2b4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	613b      	str	r3, [r7, #16]
}
 800f2ae:	bf00      	nop
 800f2b0:	bf00      	nop
 800f2b2:	e7fd      	b.n	800f2b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f2b4:	697b      	ldr	r3, [r7, #20]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	20001248 	.word	0x20001248
 800f2c4:	08011c34 	.word	0x08011c34
 800f2c8:	0800f409 	.word	0x0800f409
 800f2cc:	2000124c 	.word	0x2000124c

0800f2d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	@ 0x28
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10b      	bne.n	800f300 <xTimerGenericCommand+0x30>
	__asm volatile
 800f2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ec:	f383 8811 	msr	BASEPRI, r3
 800f2f0:	f3bf 8f6f 	isb	sy
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	623b      	str	r3, [r7, #32]
}
 800f2fa:	bf00      	nop
 800f2fc:	bf00      	nop
 800f2fe:	e7fd      	b.n	800f2fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f300:	4b19      	ldr	r3, [pc, #100]	@ (800f368 <xTimerGenericCommand+0x98>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d02a      	beq.n	800f35e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	2b05      	cmp	r3, #5
 800f318:	dc18      	bgt.n	800f34c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f31a:	f7ff fba5 	bl	800ea68 <xTaskGetSchedulerState>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b02      	cmp	r3, #2
 800f322:	d109      	bne.n	800f338 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f324:	4b10      	ldr	r3, [pc, #64]	@ (800f368 <xTimerGenericCommand+0x98>)
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	f107 0110 	add.w	r1, r7, #16
 800f32c:	2300      	movs	r3, #0
 800f32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f330:	f7fd ffce 	bl	800d2d0 <xQueueGenericSend>
 800f334:	6278      	str	r0, [r7, #36]	@ 0x24
 800f336:	e012      	b.n	800f35e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f338:	4b0b      	ldr	r3, [pc, #44]	@ (800f368 <xTimerGenericCommand+0x98>)
 800f33a:	6818      	ldr	r0, [r3, #0]
 800f33c:	f107 0110 	add.w	r1, r7, #16
 800f340:	2300      	movs	r3, #0
 800f342:	2200      	movs	r2, #0
 800f344:	f7fd ffc4 	bl	800d2d0 <xQueueGenericSend>
 800f348:	6278      	str	r0, [r7, #36]	@ 0x24
 800f34a:	e008      	b.n	800f35e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f34c:	4b06      	ldr	r3, [pc, #24]	@ (800f368 <xTimerGenericCommand+0x98>)
 800f34e:	6818      	ldr	r0, [r3, #0]
 800f350:	f107 0110 	add.w	r1, r7, #16
 800f354:	2300      	movs	r3, #0
 800f356:	683a      	ldr	r2, [r7, #0]
 800f358:	f7fe f8bc 	bl	800d4d4 <xQueueGenericSendFromISR>
 800f35c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f360:	4618      	mov	r0, r3
 800f362:	3728      	adds	r7, #40	@ 0x28
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	20001248 	.word	0x20001248

0800f36c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af02      	add	r7, sp, #8
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f376:	4b23      	ldr	r3, [pc, #140]	@ (800f404 <prvProcessExpiredTimer+0x98>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	3304      	adds	r3, #4
 800f384:	4618      	mov	r0, r3
 800f386:	f7fd fd7b 	bl	800ce80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f390:	f003 0304 	and.w	r3, r3, #4
 800f394:	2b00      	cmp	r3, #0
 800f396:	d023      	beq.n	800f3e0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	699a      	ldr	r2, [r3, #24]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	18d1      	adds	r1, r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	6978      	ldr	r0, [r7, #20]
 800f3a6:	f000 f8d5 	bl	800f554 <prvInsertTimerInActiveList>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d020      	beq.n	800f3f2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9300      	str	r3, [sp, #0]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	6978      	ldr	r0, [r7, #20]
 800f3bc:	f7ff ff88 	bl	800f2d0 <xTimerGenericCommand>
 800f3c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d114      	bne.n	800f3f2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3cc:	f383 8811 	msr	BASEPRI, r3
 800f3d0:	f3bf 8f6f 	isb	sy
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	60fb      	str	r3, [r7, #12]
}
 800f3da:	bf00      	nop
 800f3dc:	bf00      	nop
 800f3de:	e7fd      	b.n	800f3dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3e6:	f023 0301 	bic.w	r3, r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	6a1b      	ldr	r3, [r3, #32]
 800f3f6:	6978      	ldr	r0, [r7, #20]
 800f3f8:	4798      	blx	r3
}
 800f3fa:	bf00      	nop
 800f3fc:	3718      	adds	r7, #24
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
 800f402:	bf00      	nop
 800f404:	20001240 	.word	0x20001240

0800f408 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f410:	f107 0308 	add.w	r3, r7, #8
 800f414:	4618      	mov	r0, r3
 800f416:	f000 f859 	bl	800f4cc <prvGetNextExpireTime>
 800f41a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	4619      	mov	r1, r3
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f000 f805 	bl	800f430 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f426:	f000 f8d7 	bl	800f5d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f42a:	bf00      	nop
 800f42c:	e7f0      	b.n	800f410 <prvTimerTask+0x8>
	...

0800f430 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f43a:	f7fe ff11 	bl	800e260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f43e:	f107 0308 	add.w	r3, r7, #8
 800f442:	4618      	mov	r0, r3
 800f444:	f000 f866 	bl	800f514 <prvSampleTimeNow>
 800f448:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d130      	bne.n	800f4b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d10a      	bne.n	800f46c <prvProcessTimerOrBlockTask+0x3c>
 800f456:	687a      	ldr	r2, [r7, #4]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d806      	bhi.n	800f46c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f45e:	f7fe ff0d 	bl	800e27c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f462:	68f9      	ldr	r1, [r7, #12]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7ff ff81 	bl	800f36c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f46a:	e024      	b.n	800f4b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d008      	beq.n	800f484 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f472:	4b13      	ldr	r3, [pc, #76]	@ (800f4c0 <prvProcessTimerOrBlockTask+0x90>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d101      	bne.n	800f480 <prvProcessTimerOrBlockTask+0x50>
 800f47c:	2301      	movs	r3, #1
 800f47e:	e000      	b.n	800f482 <prvProcessTimerOrBlockTask+0x52>
 800f480:	2300      	movs	r3, #0
 800f482:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f484:	4b0f      	ldr	r3, [pc, #60]	@ (800f4c4 <prvProcessTimerOrBlockTask+0x94>)
 800f486:	6818      	ldr	r0, [r3, #0]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	4619      	mov	r1, r3
 800f492:	f7fe fc83 	bl	800dd9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f496:	f7fe fef1 	bl	800e27c <xTaskResumeAll>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10a      	bne.n	800f4b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f4a0:	4b09      	ldr	r3, [pc, #36]	@ (800f4c8 <prvProcessTimerOrBlockTask+0x98>)
 800f4a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4a6:	601a      	str	r2, [r3, #0]
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	f3bf 8f6f 	isb	sy
}
 800f4b0:	e001      	b.n	800f4b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f4b2:	f7fe fee3 	bl	800e27c <xTaskResumeAll>
}
 800f4b6:	bf00      	nop
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	20001244 	.word	0x20001244
 800f4c4:	20001248 	.word	0x20001248
 800f4c8:	e000ed04 	.word	0xe000ed04

0800f4cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f4d4:	4b0e      	ldr	r3, [pc, #56]	@ (800f510 <prvGetNextExpireTime+0x44>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d101      	bne.n	800f4e2 <prvGetNextExpireTime+0x16>
 800f4de:	2201      	movs	r2, #1
 800f4e0:	e000      	b.n	800f4e4 <prvGetNextExpireTime+0x18>
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d105      	bne.n	800f4fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f4f0:	4b07      	ldr	r3, [pc, #28]	@ (800f510 <prvGetNextExpireTime+0x44>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	60fb      	str	r3, [r7, #12]
 800f4fa:	e001      	b.n	800f500 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f500:	68fb      	ldr	r3, [r7, #12]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3714      	adds	r7, #20
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	20001240 	.word	0x20001240

0800f514 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f51c:	f7fe ff4c 	bl	800e3b8 <xTaskGetTickCount>
 800f520:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f522:	4b0b      	ldr	r3, [pc, #44]	@ (800f550 <prvSampleTimeNow+0x3c>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d205      	bcs.n	800f538 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f52c:	f000 f93a 	bl	800f7a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	e002      	b.n	800f53e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2200      	movs	r2, #0
 800f53c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f53e:	4a04      	ldr	r2, [pc, #16]	@ (800f550 <prvSampleTimeNow+0x3c>)
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f544:	68fb      	ldr	r3, [r7, #12]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	20001250 	.word	0x20001250

0800f554 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af00      	add	r7, sp, #0
 800f55a:	60f8      	str	r0, [r7, #12]
 800f55c:	60b9      	str	r1, [r7, #8]
 800f55e:	607a      	str	r2, [r7, #4]
 800f560:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f562:	2300      	movs	r3, #0
 800f564:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	429a      	cmp	r2, r3
 800f578:	d812      	bhi.n	800f5a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	1ad2      	subs	r2, r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	429a      	cmp	r2, r3
 800f586:	d302      	bcc.n	800f58e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f588:	2301      	movs	r3, #1
 800f58a:	617b      	str	r3, [r7, #20]
 800f58c:	e01b      	b.n	800f5c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f58e:	4b10      	ldr	r3, [pc, #64]	@ (800f5d0 <prvInsertTimerInActiveList+0x7c>)
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	3304      	adds	r3, #4
 800f596:	4619      	mov	r1, r3
 800f598:	4610      	mov	r0, r2
 800f59a:	f7fd fc38 	bl	800ce0e <vListInsert>
 800f59e:	e012      	b.n	800f5c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f5a0:	687a      	ldr	r2, [r7, #4]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d206      	bcs.n	800f5b6 <prvInsertTimerInActiveList+0x62>
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d302      	bcc.n	800f5b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	617b      	str	r3, [r7, #20]
 800f5b4:	e007      	b.n	800f5c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f5b6:	4b07      	ldr	r3, [pc, #28]	@ (800f5d4 <prvInsertTimerInActiveList+0x80>)
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	3304      	adds	r3, #4
 800f5be:	4619      	mov	r1, r3
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	f7fd fc24 	bl	800ce0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f5c6:	697b      	ldr	r3, [r7, #20]
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3718      	adds	r7, #24
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	20001244 	.word	0x20001244
 800f5d4:	20001240 	.word	0x20001240

0800f5d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b08e      	sub	sp, #56	@ 0x38
 800f5dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5de:	e0ce      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	da19      	bge.n	800f61a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f5e6:	1d3b      	adds	r3, r7, #4
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d10b      	bne.n	800f60a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f6:	f383 8811 	msr	BASEPRI, r3
 800f5fa:	f3bf 8f6f 	isb	sy
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	61fb      	str	r3, [r7, #28]
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	e7fd      	b.n	800f606 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f610:	6850      	ldr	r0, [r2, #4]
 800f612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f614:	6892      	ldr	r2, [r2, #8]
 800f616:	4611      	mov	r1, r2
 800f618:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f2c0 80ae 	blt.w	800f77e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d004      	beq.n	800f638 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f630:	3304      	adds	r3, #4
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd fc24 	bl	800ce80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f638:	463b      	mov	r3, r7
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7ff ff6a 	bl	800f514 <prvSampleTimeNow>
 800f640:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b09      	cmp	r3, #9
 800f646:	f200 8097 	bhi.w	800f778 <prvProcessReceivedCommands+0x1a0>
 800f64a:	a201      	add	r2, pc, #4	@ (adr r2, 800f650 <prvProcessReceivedCommands+0x78>)
 800f64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f650:	0800f679 	.word	0x0800f679
 800f654:	0800f679 	.word	0x0800f679
 800f658:	0800f679 	.word	0x0800f679
 800f65c:	0800f6ef 	.word	0x0800f6ef
 800f660:	0800f703 	.word	0x0800f703
 800f664:	0800f74f 	.word	0x0800f74f
 800f668:	0800f679 	.word	0x0800f679
 800f66c:	0800f679 	.word	0x0800f679
 800f670:	0800f6ef 	.word	0x0800f6ef
 800f674:	0800f703 	.word	0x0800f703
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f67a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f67e:	f043 0301 	orr.w	r3, r3, #1
 800f682:	b2da      	uxtb	r2, r3
 800f684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68e:	699b      	ldr	r3, [r3, #24]
 800f690:	18d1      	adds	r1, r2, r3
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f698:	f7ff ff5c 	bl	800f554 <prvInsertTimerInActiveList>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d06c      	beq.n	800f77c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6a4:	6a1b      	ldr	r3, [r3, #32]
 800f6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6b0:	f003 0304 	and.w	r3, r3, #4
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d061      	beq.n	800f77c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6bc:	699b      	ldr	r3, [r3, #24]
 800f6be:	441a      	add	r2, r3
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f6ca:	f7ff fe01 	bl	800f2d0 <xTimerGenericCommand>
 800f6ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f6d0:	6a3b      	ldr	r3, [r7, #32]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d152      	bne.n	800f77c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6da:	f383 8811 	msr	BASEPRI, r3
 800f6de:	f3bf 8f6f 	isb	sy
 800f6e2:	f3bf 8f4f 	dsb	sy
 800f6e6:	61bb      	str	r3, [r7, #24]
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	e7fd      	b.n	800f6ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f6f4:	f023 0301 	bic.w	r3, r3, #1
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f700:	e03d      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f708:	f043 0301 	orr.w	r3, r3, #1
 800f70c:	b2da      	uxtb	r2, r3
 800f70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f710:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f718:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10b      	bne.n	800f73a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f726:	f383 8811 	msr	BASEPRI, r3
 800f72a:	f3bf 8f6f 	isb	sy
 800f72e:	f3bf 8f4f 	dsb	sy
 800f732:	617b      	str	r3, [r7, #20]
}
 800f734:	bf00      	nop
 800f736:	bf00      	nop
 800f738:	e7fd      	b.n	800f736 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73c:	699a      	ldr	r2, [r3, #24]
 800f73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f740:	18d1      	adds	r1, r2, r3
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f748:	f7ff ff04 	bl	800f554 <prvInsertTimerInActiveList>
					break;
 800f74c:	e017      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f754:	f003 0302 	and.w	r3, r3, #2
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d103      	bne.n	800f764 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f75c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f75e:	f000 fbeb 	bl	800ff38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f762:	e00c      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f766:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f76a:	f023 0301 	bic.w	r3, r3, #1
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f772:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f776:	e002      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f778:	bf00      	nop
 800f77a:	e000      	b.n	800f77e <prvProcessReceivedCommands+0x1a6>
					break;
 800f77c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f77e:	4b08      	ldr	r3, [pc, #32]	@ (800f7a0 <prvProcessReceivedCommands+0x1c8>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	1d39      	adds	r1, r7, #4
 800f784:	2200      	movs	r2, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f7fd ff42 	bl	800d610 <xQueueReceive>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f47f af26 	bne.w	800f5e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f794:	bf00      	nop
 800f796:	bf00      	nop
 800f798:	3730      	adds	r7, #48	@ 0x30
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20001248 	.word	0x20001248

0800f7a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b088      	sub	sp, #32
 800f7a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7aa:	e049      	b.n	800f840 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f7ac:	4b2e      	ldr	r3, [pc, #184]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7b6:	4b2c      	ldr	r3, [pc, #176]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fd fb5b 	bl	800ce80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	6a1b      	ldr	r3, [r3, #32]
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7d8:	f003 0304 	and.w	r3, r3, #4
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d02f      	beq.n	800f840 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	699b      	ldr	r3, [r3, #24]
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	4413      	add	r3, r2
 800f7e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d90e      	bls.n	800f810 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	68ba      	ldr	r2, [r7, #8]
 800f7f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	3304      	adds	r3, #4
 800f806:	4619      	mov	r1, r3
 800f808:	4610      	mov	r0, r2
 800f80a:	f7fd fb00 	bl	800ce0e <vListInsert>
 800f80e:	e017      	b.n	800f840 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f810:	2300      	movs	r3, #0
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	2300      	movs	r3, #0
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	2100      	movs	r1, #0
 800f81a:	68f8      	ldr	r0, [r7, #12]
 800f81c:	f7ff fd58 	bl	800f2d0 <xTimerGenericCommand>
 800f820:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10b      	bne.n	800f840 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f82c:	f383 8811 	msr	BASEPRI, r3
 800f830:	f3bf 8f6f 	isb	sy
 800f834:	f3bf 8f4f 	dsb	sy
 800f838:	603b      	str	r3, [r7, #0]
}
 800f83a:	bf00      	nop
 800f83c:	bf00      	nop
 800f83e:	e7fd      	b.n	800f83c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f840:	4b09      	ldr	r3, [pc, #36]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1b0      	bne.n	800f7ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f84a:	4b07      	ldr	r3, [pc, #28]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f850:	4b06      	ldr	r3, [pc, #24]	@ (800f86c <prvSwitchTimerLists+0xc8>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a04      	ldr	r2, [pc, #16]	@ (800f868 <prvSwitchTimerLists+0xc4>)
 800f856:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f858:	4a04      	ldr	r2, [pc, #16]	@ (800f86c <prvSwitchTimerLists+0xc8>)
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	6013      	str	r3, [r2, #0]
}
 800f85e:	bf00      	nop
 800f860:	3718      	adds	r7, #24
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	20001240 	.word	0x20001240
 800f86c:	20001244 	.word	0x20001244

0800f870 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b082      	sub	sp, #8
 800f874:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f876:	f000 f96f 	bl	800fb58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f87a:	4b15      	ldr	r3, [pc, #84]	@ (800f8d0 <prvCheckForValidListAndQueue+0x60>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d120      	bne.n	800f8c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f882:	4814      	ldr	r0, [pc, #80]	@ (800f8d4 <prvCheckForValidListAndQueue+0x64>)
 800f884:	f7fd fa72 	bl	800cd6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f888:	4813      	ldr	r0, [pc, #76]	@ (800f8d8 <prvCheckForValidListAndQueue+0x68>)
 800f88a:	f7fd fa6f 	bl	800cd6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f88e:	4b13      	ldr	r3, [pc, #76]	@ (800f8dc <prvCheckForValidListAndQueue+0x6c>)
 800f890:	4a10      	ldr	r2, [pc, #64]	@ (800f8d4 <prvCheckForValidListAndQueue+0x64>)
 800f892:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f894:	4b12      	ldr	r3, [pc, #72]	@ (800f8e0 <prvCheckForValidListAndQueue+0x70>)
 800f896:	4a10      	ldr	r2, [pc, #64]	@ (800f8d8 <prvCheckForValidListAndQueue+0x68>)
 800f898:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f89a:	2300      	movs	r3, #0
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	4b11      	ldr	r3, [pc, #68]	@ (800f8e4 <prvCheckForValidListAndQueue+0x74>)
 800f8a0:	4a11      	ldr	r2, [pc, #68]	@ (800f8e8 <prvCheckForValidListAndQueue+0x78>)
 800f8a2:	2110      	movs	r1, #16
 800f8a4:	200a      	movs	r0, #10
 800f8a6:	f7fd fb7f 	bl	800cfa8 <xQueueGenericCreateStatic>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	4a08      	ldr	r2, [pc, #32]	@ (800f8d0 <prvCheckForValidListAndQueue+0x60>)
 800f8ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f8b0:	4b07      	ldr	r3, [pc, #28]	@ (800f8d0 <prvCheckForValidListAndQueue+0x60>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d005      	beq.n	800f8c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f8b8:	4b05      	ldr	r3, [pc, #20]	@ (800f8d0 <prvCheckForValidListAndQueue+0x60>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	490b      	ldr	r1, [pc, #44]	@ (800f8ec <prvCheckForValidListAndQueue+0x7c>)
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe fa42 	bl	800dd48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8c4:	f000 f97a 	bl	800fbbc <vPortExitCritical>
}
 800f8c8:	bf00      	nop
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20001248 	.word	0x20001248
 800f8d4:	20001218 	.word	0x20001218
 800f8d8:	2000122c 	.word	0x2000122c
 800f8dc:	20001240 	.word	0x20001240
 800f8e0:	20001244 	.word	0x20001244
 800f8e4:	200012f4 	.word	0x200012f4
 800f8e8:	20001254 	.word	0x20001254
 800f8ec:	08011c3c 	.word	0x08011c3c

0800f8f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	b085      	sub	sp, #20
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	60f8      	str	r0, [r7, #12]
 800f8f8:	60b9      	str	r1, [r7, #8]
 800f8fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	3b04      	subs	r3, #4
 800f900:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	3b04      	subs	r3, #4
 800f90e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	f023 0201 	bic.w	r2, r3, #1
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	3b04      	subs	r3, #4
 800f91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f920:	4a0c      	ldr	r2, [pc, #48]	@ (800f954 <pxPortInitialiseStack+0x64>)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	3b14      	subs	r3, #20
 800f92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	3b04      	subs	r3, #4
 800f936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	f06f 0202 	mvn.w	r2, #2
 800f93e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	3b20      	subs	r3, #32
 800f944:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f946:	68fb      	ldr	r3, [r7, #12]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3714      	adds	r7, #20
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr
 800f954:	0800f959 	.word	0x0800f959

0800f958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f958:	b480      	push	{r7}
 800f95a:	b085      	sub	sp, #20
 800f95c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f962:	4b13      	ldr	r3, [pc, #76]	@ (800f9b0 <prvTaskExitError+0x58>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f96a:	d00b      	beq.n	800f984 <prvTaskExitError+0x2c>
	__asm volatile
 800f96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f970:	f383 8811 	msr	BASEPRI, r3
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	60fb      	str	r3, [r7, #12]
}
 800f97e:	bf00      	nop
 800f980:	bf00      	nop
 800f982:	e7fd      	b.n	800f980 <prvTaskExitError+0x28>
	__asm volatile
 800f984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f988:	f383 8811 	msr	BASEPRI, r3
 800f98c:	f3bf 8f6f 	isb	sy
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	60bb      	str	r3, [r7, #8]
}
 800f996:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f998:	bf00      	nop
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d0fc      	beq.n	800f99a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9a0:	bf00      	nop
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	200000a8 	.word	0x200000a8
	...

0800f9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f9c0:	4b07      	ldr	r3, [pc, #28]	@ (800f9e0 <pxCurrentTCBConst2>)
 800f9c2:	6819      	ldr	r1, [r3, #0]
 800f9c4:	6808      	ldr	r0, [r1, #0]
 800f9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ca:	f380 8809 	msr	PSP, r0
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f04f 0000 	mov.w	r0, #0
 800f9d6:	f380 8811 	msr	BASEPRI, r0
 800f9da:	4770      	bx	lr
 800f9dc:	f3af 8000 	nop.w

0800f9e0 <pxCurrentTCBConst2>:
 800f9e0:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f9e4:	bf00      	nop
 800f9e6:	bf00      	nop

0800f9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f9e8:	4808      	ldr	r0, [pc, #32]	@ (800fa0c <prvPortStartFirstTask+0x24>)
 800f9ea:	6800      	ldr	r0, [r0, #0]
 800f9ec:	6800      	ldr	r0, [r0, #0]
 800f9ee:	f380 8808 	msr	MSP, r0
 800f9f2:	f04f 0000 	mov.w	r0, #0
 800f9f6:	f380 8814 	msr	CONTROL, r0
 800f9fa:	b662      	cpsie	i
 800f9fc:	b661      	cpsie	f
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	df00      	svc	0
 800fa08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa0a:	bf00      	nop
 800fa0c:	e000ed08 	.word	0xe000ed08

0800fa10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b086      	sub	sp, #24
 800fa14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa16:	4b47      	ldr	r3, [pc, #284]	@ (800fb34 <xPortStartScheduler+0x124>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	4a47      	ldr	r2, [pc, #284]	@ (800fb38 <xPortStartScheduler+0x128>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d10b      	bne.n	800fa38 <xPortStartScheduler+0x28>
	__asm volatile
 800fa20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa24:	f383 8811 	msr	BASEPRI, r3
 800fa28:	f3bf 8f6f 	isb	sy
 800fa2c:	f3bf 8f4f 	dsb	sy
 800fa30:	613b      	str	r3, [r7, #16]
}
 800fa32:	bf00      	nop
 800fa34:	bf00      	nop
 800fa36:	e7fd      	b.n	800fa34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa38:	4b3e      	ldr	r3, [pc, #248]	@ (800fb34 <xPortStartScheduler+0x124>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a3f      	ldr	r2, [pc, #252]	@ (800fb3c <xPortStartScheduler+0x12c>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d10b      	bne.n	800fa5a <xPortStartScheduler+0x4a>
	__asm volatile
 800fa42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa46:	f383 8811 	msr	BASEPRI, r3
 800fa4a:	f3bf 8f6f 	isb	sy
 800fa4e:	f3bf 8f4f 	dsb	sy
 800fa52:	60fb      	str	r3, [r7, #12]
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop
 800fa58:	e7fd      	b.n	800fa56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa5a:	4b39      	ldr	r3, [pc, #228]	@ (800fb40 <xPortStartScheduler+0x130>)
 800fa5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	22ff      	movs	r2, #255	@ 0xff
 800fa6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fa7c:	b2da      	uxtb	r2, r3
 800fa7e:	4b31      	ldr	r3, [pc, #196]	@ (800fb44 <xPortStartScheduler+0x134>)
 800fa80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa82:	4b31      	ldr	r3, [pc, #196]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa84:	2207      	movs	r2, #7
 800fa86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa88:	e009      	b.n	800fa9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fa8a:	4b2f      	ldr	r3, [pc, #188]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	4a2d      	ldr	r2, [pc, #180]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fa92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa94:	78fb      	ldrb	r3, [r7, #3]
 800fa96:	b2db      	uxtb	r3, r3
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa9e:	78fb      	ldrb	r3, [r7, #3]
 800faa0:	b2db      	uxtb	r3, r3
 800faa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800faa6:	2b80      	cmp	r3, #128	@ 0x80
 800faa8:	d0ef      	beq.n	800fa8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800faaa:	4b27      	ldr	r3, [pc, #156]	@ (800fb48 <xPortStartScheduler+0x138>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f1c3 0307 	rsb	r3, r3, #7
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d00b      	beq.n	800face <xPortStartScheduler+0xbe>
	__asm volatile
 800fab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	60bb      	str	r3, [r7, #8]
}
 800fac8:	bf00      	nop
 800faca:	bf00      	nop
 800facc:	e7fd      	b.n	800faca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800face:	4b1e      	ldr	r3, [pc, #120]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	021b      	lsls	r3, r3, #8
 800fad4:	4a1c      	ldr	r2, [pc, #112]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fad8:	4b1b      	ldr	r3, [pc, #108]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fae0:	4a19      	ldr	r2, [pc, #100]	@ (800fb48 <xPortStartScheduler+0x138>)
 800fae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	b2da      	uxtb	r2, r3
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800faec:	4b17      	ldr	r3, [pc, #92]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4a16      	ldr	r2, [pc, #88]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800faf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800faf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800faf8:	4b14      	ldr	r3, [pc, #80]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a13      	ldr	r2, [pc, #76]	@ (800fb4c <xPortStartScheduler+0x13c>)
 800fafe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fb02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb04:	f000 f8da 	bl	800fcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb08:	4b11      	ldr	r3, [pc, #68]	@ (800fb50 <xPortStartScheduler+0x140>)
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb0e:	f000 f8f9 	bl	800fd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb12:	4b10      	ldr	r3, [pc, #64]	@ (800fb54 <xPortStartScheduler+0x144>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	4a0f      	ldr	r2, [pc, #60]	@ (800fb54 <xPortStartScheduler+0x144>)
 800fb18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fb1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb1e:	f7ff ff63 	bl	800f9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb22:	f7fe fd13 	bl	800e54c <vTaskSwitchContext>
	prvTaskExitError();
 800fb26:	f7ff ff17 	bl	800f958 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb2a:	2300      	movs	r3, #0
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	e000ed00 	.word	0xe000ed00
 800fb38:	410fc271 	.word	0x410fc271
 800fb3c:	410fc270 	.word	0x410fc270
 800fb40:	e000e400 	.word	0xe000e400
 800fb44:	20001344 	.word	0x20001344
 800fb48:	20001348 	.word	0x20001348
 800fb4c:	e000ed20 	.word	0xe000ed20
 800fb50:	200000a8 	.word	0x200000a8
 800fb54:	e000ef34 	.word	0xe000ef34

0800fb58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	607b      	str	r3, [r7, #4]
}
 800fb70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb72:	4b10      	ldr	r3, [pc, #64]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3301      	adds	r3, #1
 800fb78:	4a0e      	ldr	r2, [pc, #56]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fbb4 <vPortEnterCritical+0x5c>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d110      	bne.n	800fba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb84:	4b0c      	ldr	r3, [pc, #48]	@ (800fbb8 <vPortEnterCritical+0x60>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d00b      	beq.n	800fba6 <vPortEnterCritical+0x4e>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	603b      	str	r3, [r7, #0]
}
 800fba0:	bf00      	nop
 800fba2:	bf00      	nop
 800fba4:	e7fd      	b.n	800fba2 <vPortEnterCritical+0x4a>
	}
}
 800fba6:	bf00      	nop
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	200000a8 	.word	0x200000a8
 800fbb8:	e000ed04 	.word	0xe000ed04

0800fbbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbc2:	4b12      	ldr	r3, [pc, #72]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d10b      	bne.n	800fbe2 <vPortExitCritical+0x26>
	__asm volatile
 800fbca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	607b      	str	r3, [r7, #4]
}
 800fbdc:	bf00      	nop
 800fbde:	bf00      	nop
 800fbe0:	e7fd      	b.n	800fbde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	3b01      	subs	r3, #1
 800fbe8:	4a08      	ldr	r2, [pc, #32]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbec:	4b07      	ldr	r3, [pc, #28]	@ (800fc0c <vPortExitCritical+0x50>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <vPortExitCritical+0x44>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	f383 8811 	msr	BASEPRI, r3
}
 800fbfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc00:	bf00      	nop
 800fc02:	370c      	adds	r7, #12
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	200000a8 	.word	0x200000a8

0800fc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc10:	f3ef 8009 	mrs	r0, PSP
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	4b15      	ldr	r3, [pc, #84]	@ (800fc70 <pxCurrentTCBConst>)
 800fc1a:	681a      	ldr	r2, [r3, #0]
 800fc1c:	f01e 0f10 	tst.w	lr, #16
 800fc20:	bf08      	it	eq
 800fc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2a:	6010      	str	r0, [r2, #0]
 800fc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fc34:	f380 8811 	msr	BASEPRI, r0
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	f3bf 8f6f 	isb	sy
 800fc40:	f7fe fc84 	bl	800e54c <vTaskSwitchContext>
 800fc44:	f04f 0000 	mov.w	r0, #0
 800fc48:	f380 8811 	msr	BASEPRI, r0
 800fc4c:	bc09      	pop	{r0, r3}
 800fc4e:	6819      	ldr	r1, [r3, #0]
 800fc50:	6808      	ldr	r0, [r1, #0]
 800fc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc56:	f01e 0f10 	tst.w	lr, #16
 800fc5a:	bf08      	it	eq
 800fc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc60:	f380 8809 	msr	PSP, r0
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	4770      	bx	lr
 800fc6a:	bf00      	nop
 800fc6c:	f3af 8000 	nop.w

0800fc70 <pxCurrentTCBConst>:
 800fc70:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc74:	bf00      	nop
 800fc76:	bf00      	nop

0800fc78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	607b      	str	r3, [r7, #4]
}
 800fc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc92:	f7fe fba1 	bl	800e3d8 <xTaskIncrementTick>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d003      	beq.n	800fca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc9c:	4b06      	ldr	r3, [pc, #24]	@ (800fcb8 <xPortSysTickHandler+0x40>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	2300      	movs	r3, #0
 800fca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	f383 8811 	msr	BASEPRI, r3
}
 800fcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	e000ed04 	.word	0xe000ed04

0800fcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcbc:	b480      	push	{r7}
 800fcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcc0:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcc6:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf4 <vPortSetupTimerInterrupt+0x38>)
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fccc:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf8 <vPortSetupTimerInterrupt+0x3c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a0a      	ldr	r2, [pc, #40]	@ (800fcfc <vPortSetupTimerInterrupt+0x40>)
 800fcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd6:	0a1b      	lsrs	r3, r3, #8
 800fcd8:	4a09      	ldr	r2, [pc, #36]	@ (800fd00 <vPortSetupTimerInterrupt+0x44>)
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcde:	4b04      	ldr	r3, [pc, #16]	@ (800fcf0 <vPortSetupTimerInterrupt+0x34>)
 800fce0:	2207      	movs	r2, #7
 800fce2:	601a      	str	r2, [r3, #0]
}
 800fce4:	bf00      	nop
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	e000e010 	.word	0xe000e010
 800fcf4:	e000e018 	.word	0xe000e018
 800fcf8:	20000010 	.word	0x20000010
 800fcfc:	51eb851f 	.word	0x51eb851f
 800fd00:	e000e014 	.word	0xe000e014

0800fd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fd14 <vPortEnableVFP+0x10>
 800fd08:	6801      	ldr	r1, [r0, #0]
 800fd0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fd0e:	6001      	str	r1, [r0, #0]
 800fd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd12:	bf00      	nop
 800fd14:	e000ed88 	.word	0xe000ed88

0800fd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd18:	b480      	push	{r7}
 800fd1a:	b085      	sub	sp, #20
 800fd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd1e:	f3ef 8305 	mrs	r3, IPSR
 800fd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b0f      	cmp	r3, #15
 800fd28:	d915      	bls.n	800fd56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd2a:	4a18      	ldr	r2, [pc, #96]	@ (800fd8c <vPortValidateInterruptPriority+0x74>)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd34:	4b16      	ldr	r3, [pc, #88]	@ (800fd90 <vPortValidateInterruptPriority+0x78>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	7afa      	ldrb	r2, [r7, #11]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d20b      	bcs.n	800fd56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	607b      	str	r3, [r7, #4]
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	e7fd      	b.n	800fd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd56:	4b0f      	ldr	r3, [pc, #60]	@ (800fd94 <vPortValidateInterruptPriority+0x7c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fd5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fd98 <vPortValidateInterruptPriority+0x80>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	429a      	cmp	r2, r3
 800fd64:	d90b      	bls.n	800fd7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	603b      	str	r3, [r7, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	bf00      	nop
 800fd7c:	e7fd      	b.n	800fd7a <vPortValidateInterruptPriority+0x62>
	}
 800fd7e:	bf00      	nop
 800fd80:	3714      	adds	r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr
 800fd8a:	bf00      	nop
 800fd8c:	e000e3f0 	.word	0xe000e3f0
 800fd90:	20001344 	.word	0x20001344
 800fd94:	e000ed0c 	.word	0xe000ed0c
 800fd98:	20001348 	.word	0x20001348

0800fd9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08a      	sub	sp, #40	@ 0x28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fda4:	2300      	movs	r3, #0
 800fda6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fda8:	f7fe fa5a 	bl	800e260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fdac:	4b5c      	ldr	r3, [pc, #368]	@ (800ff20 <pvPortMalloc+0x184>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fdb4:	f000 f924 	bl	8010000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fdb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ff24 <pvPortMalloc+0x188>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	4013      	ands	r3, r2
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f040 8095 	bne.w	800fef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d01e      	beq.n	800fe0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fdcc:	2208      	movs	r2, #8
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d015      	beq.n	800fe0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f023 0307 	bic.w	r3, r3, #7
 800fde4:	3308      	adds	r3, #8
 800fde6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f003 0307 	and.w	r3, r3, #7
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00b      	beq.n	800fe0a <pvPortMalloc+0x6e>
	__asm volatile
 800fdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdf6:	f383 8811 	msr	BASEPRI, r3
 800fdfa:	f3bf 8f6f 	isb	sy
 800fdfe:	f3bf 8f4f 	dsb	sy
 800fe02:	617b      	str	r3, [r7, #20]
}
 800fe04:	bf00      	nop
 800fe06:	bf00      	nop
 800fe08:	e7fd      	b.n	800fe06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d06f      	beq.n	800fef0 <pvPortMalloc+0x154>
 800fe10:	4b45      	ldr	r3, [pc, #276]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d86a      	bhi.n	800fef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe1a:	4b44      	ldr	r3, [pc, #272]	@ (800ff2c <pvPortMalloc+0x190>)
 800fe1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe1e:	4b43      	ldr	r3, [pc, #268]	@ (800ff2c <pvPortMalloc+0x190>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe24:	e004      	b.n	800fe30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fe26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d903      	bls.n	800fe42 <pvPortMalloc+0xa6>
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1f1      	bne.n	800fe26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fe42:	4b37      	ldr	r3, [pc, #220]	@ (800ff20 <pvPortMalloc+0x184>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d051      	beq.n	800fef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2208      	movs	r2, #8
 800fe52:	4413      	add	r3, r2
 800fe54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fe56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	6a3b      	ldr	r3, [r7, #32]
 800fe5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fe5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe60:	685a      	ldr	r2, [r3, #4]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	1ad2      	subs	r2, r2, r3
 800fe66:	2308      	movs	r3, #8
 800fe68:	005b      	lsls	r3, r3, #1
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d920      	bls.n	800feb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fe6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4413      	add	r3, r2
 800fe74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	f003 0307 	and.w	r3, r3, #7
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <pvPortMalloc+0xfc>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	613b      	str	r3, [r7, #16]
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	e7fd      	b.n	800fe94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	1ad2      	subs	r2, r2, r3
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800feaa:	69b8      	ldr	r0, [r7, #24]
 800feac:	f000 f90a 	bl	80100c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800feb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ff28 <pvPortMalloc+0x18c>)
 800feb2:	681a      	ldr	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	4a1b      	ldr	r2, [pc, #108]	@ (800ff28 <pvPortMalloc+0x18c>)
 800febc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800febe:	4b1a      	ldr	r3, [pc, #104]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff30 <pvPortMalloc+0x194>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d203      	bcs.n	800fed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800feca:	4b17      	ldr	r3, [pc, #92]	@ (800ff28 <pvPortMalloc+0x18c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	4a18      	ldr	r2, [pc, #96]	@ (800ff30 <pvPortMalloc+0x194>)
 800fed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fed4:	685a      	ldr	r2, [r3, #4]
 800fed6:	4b13      	ldr	r3, [pc, #76]	@ (800ff24 <pvPortMalloc+0x188>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	431a      	orrs	r2, r3
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fee2:	2200      	movs	r2, #0
 800fee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fee6:	4b13      	ldr	r3, [pc, #76]	@ (800ff34 <pvPortMalloc+0x198>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	3301      	adds	r3, #1
 800feec:	4a11      	ldr	r2, [pc, #68]	@ (800ff34 <pvPortMalloc+0x198>)
 800feee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fef0:	f7fe f9c4 	bl	800e27c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00b      	beq.n	800ff16 <pvPortMalloc+0x17a>
	__asm volatile
 800fefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	60fb      	str	r3, [r7, #12]
}
 800ff10:	bf00      	nop
 800ff12:	bf00      	nop
 800ff14:	e7fd      	b.n	800ff12 <pvPortMalloc+0x176>
	return pvReturn;
 800ff16:	69fb      	ldr	r3, [r7, #28]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3728      	adds	r7, #40	@ 0x28
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	20009354 	.word	0x20009354
 800ff24:	20009368 	.word	0x20009368
 800ff28:	20009358 	.word	0x20009358
 800ff2c:	2000934c 	.word	0x2000934c
 800ff30:	2000935c 	.word	0x2000935c
 800ff34:	20009360 	.word	0x20009360

0800ff38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d04f      	beq.n	800ffea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ff4a:	2308      	movs	r3, #8
 800ff4c:	425b      	negs	r3, r3
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4413      	add	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	685a      	ldr	r2, [r3, #4]
 800ff5c:	4b25      	ldr	r3, [pc, #148]	@ (800fff4 <vPortFree+0xbc>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4013      	ands	r3, r2
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d10b      	bne.n	800ff7e <vPortFree+0x46>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	60fb      	str	r3, [r7, #12]
}
 800ff78:	bf00      	nop
 800ff7a:	bf00      	nop
 800ff7c:	e7fd      	b.n	800ff7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00b      	beq.n	800ff9e <vPortFree+0x66>
	__asm volatile
 800ff86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8a:	f383 8811 	msr	BASEPRI, r3
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	60bb      	str	r3, [r7, #8]
}
 800ff98:	bf00      	nop
 800ff9a:	bf00      	nop
 800ff9c:	e7fd      	b.n	800ff9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <vPortFree+0xbc>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d01e      	beq.n	800ffea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d11a      	bne.n	800ffea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	685a      	ldr	r2, [r3, #4]
 800ffb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fff4 <vPortFree+0xbc>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	43db      	mvns	r3, r3
 800ffbe:	401a      	ands	r2, r3
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ffc4:	f7fe f94c 	bl	800e260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	685a      	ldr	r2, [r3, #4]
 800ffcc:	4b0a      	ldr	r3, [pc, #40]	@ (800fff8 <vPortFree+0xc0>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	4a09      	ldr	r2, [pc, #36]	@ (800fff8 <vPortFree+0xc0>)
 800ffd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ffd6:	6938      	ldr	r0, [r7, #16]
 800ffd8:	f000 f874 	bl	80100c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ffdc:	4b07      	ldr	r3, [pc, #28]	@ (800fffc <vPortFree+0xc4>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	4a06      	ldr	r2, [pc, #24]	@ (800fffc <vPortFree+0xc4>)
 800ffe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ffe6:	f7fe f949 	bl	800e27c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ffea:	bf00      	nop
 800ffec:	3718      	adds	r7, #24
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	20009368 	.word	0x20009368
 800fff8:	20009358 	.word	0x20009358
 800fffc:	20009364 	.word	0x20009364

08010000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801000a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801000c:	4b27      	ldr	r3, [pc, #156]	@ (80100ac <prvHeapInit+0xac>)
 801000e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f003 0307 	and.w	r3, r3, #7
 8010016:	2b00      	cmp	r3, #0
 8010018:	d00c      	beq.n	8010034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3307      	adds	r3, #7
 801001e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f023 0307 	bic.w	r3, r3, #7
 8010026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010028:	68ba      	ldr	r2, [r7, #8]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	1ad3      	subs	r3, r2, r3
 801002e:	4a1f      	ldr	r2, [pc, #124]	@ (80100ac <prvHeapInit+0xac>)
 8010030:	4413      	add	r3, r2
 8010032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010038:	4a1d      	ldr	r2, [pc, #116]	@ (80100b0 <prvHeapInit+0xb0>)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801003e:	4b1c      	ldr	r3, [pc, #112]	@ (80100b0 <prvHeapInit+0xb0>)
 8010040:	2200      	movs	r2, #0
 8010042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	4413      	add	r3, r2
 801004a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801004c:	2208      	movs	r2, #8
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	1a9b      	subs	r3, r3, r2
 8010052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f023 0307 	bic.w	r3, r3, #7
 801005a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4a15      	ldr	r2, [pc, #84]	@ (80100b4 <prvHeapInit+0xb4>)
 8010060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010062:	4b14      	ldr	r3, [pc, #80]	@ (80100b4 <prvHeapInit+0xb4>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2200      	movs	r2, #0
 8010068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801006a:	4b12      	ldr	r3, [pc, #72]	@ (80100b4 <prvHeapInit+0xb4>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	2200      	movs	r2, #0
 8010070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	1ad2      	subs	r2, r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010080:	4b0c      	ldr	r3, [pc, #48]	@ (80100b4 <prvHeapInit+0xb4>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4a0a      	ldr	r2, [pc, #40]	@ (80100b8 <prvHeapInit+0xb8>)
 801008e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	4a09      	ldr	r2, [pc, #36]	@ (80100bc <prvHeapInit+0xbc>)
 8010096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010098:	4b09      	ldr	r3, [pc, #36]	@ (80100c0 <prvHeapInit+0xc0>)
 801009a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801009e:	601a      	str	r2, [r3, #0]
}
 80100a0:	bf00      	nop
 80100a2:	3714      	adds	r7, #20
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	2000134c 	.word	0x2000134c
 80100b0:	2000934c 	.word	0x2000934c
 80100b4:	20009354 	.word	0x20009354
 80100b8:	2000935c 	.word	0x2000935c
 80100bc:	20009358 	.word	0x20009358
 80100c0:	20009368 	.word	0x20009368

080100c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80100c4:	b480      	push	{r7}
 80100c6:	b085      	sub	sp, #20
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80100cc:	4b28      	ldr	r3, [pc, #160]	@ (8010170 <prvInsertBlockIntoFreeList+0xac>)
 80100ce:	60fb      	str	r3, [r7, #12]
 80100d0:	e002      	b.n	80100d8 <prvInsertBlockIntoFreeList+0x14>
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d8f7      	bhi.n	80100d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	685b      	ldr	r3, [r3, #4]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	4413      	add	r3, r2
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d108      	bne.n	8010106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	441a      	add	r2, r3
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	441a      	add	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	429a      	cmp	r2, r3
 8010118:	d118      	bne.n	801014c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	4b15      	ldr	r3, [pc, #84]	@ (8010174 <prvInsertBlockIntoFreeList+0xb0>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d00d      	beq.n	8010142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	685a      	ldr	r2, [r3, #4]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	441a      	add	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	e008      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010142:	4b0c      	ldr	r3, [pc, #48]	@ (8010174 <prvInsertBlockIntoFreeList+0xb0>)
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	e003      	b.n	8010154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681a      	ldr	r2, [r3, #0]
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	429a      	cmp	r2, r3
 801015a:	d002      	beq.n	8010162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010162:	bf00      	nop
 8010164:	3714      	adds	r7, #20
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr
 801016e:	bf00      	nop
 8010170:	2000934c 	.word	0x2000934c
 8010174:	20009354 	.word	0x20009354

08010178 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801017c:	2200      	movs	r2, #0
 801017e:	4912      	ldr	r1, [pc, #72]	@ (80101c8 <MX_USB_Device_Init+0x50>)
 8010180:	4812      	ldr	r0, [pc, #72]	@ (80101cc <MX_USB_Device_Init+0x54>)
 8010182:	f7fa fedb 	bl	800af3c <USBD_Init>
 8010186:	4603      	mov	r3, r0
 8010188:	2b00      	cmp	r3, #0
 801018a:	d001      	beq.n	8010190 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801018c:	f7f0 fd02 	bl	8000b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010190:	490f      	ldr	r1, [pc, #60]	@ (80101d0 <MX_USB_Device_Init+0x58>)
 8010192:	480e      	ldr	r0, [pc, #56]	@ (80101cc <MX_USB_Device_Init+0x54>)
 8010194:	f7fa ff10 	bl	800afb8 <USBD_RegisterClass>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801019e:	f7f0 fcf9 	bl	8000b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80101a2:	490c      	ldr	r1, [pc, #48]	@ (80101d4 <MX_USB_Device_Init+0x5c>)
 80101a4:	4809      	ldr	r0, [pc, #36]	@ (80101cc <MX_USB_Device_Init+0x54>)
 80101a6:	f7fa fdf9 	bl	800ad9c <USBD_CDC_RegisterInterface>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80101b0:	f7f0 fcf0 	bl	8000b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80101b4:	4805      	ldr	r0, [pc, #20]	@ (80101cc <MX_USB_Device_Init+0x54>)
 80101b6:	f7fa ff43 	bl	800b040 <USBD_Start>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80101c0:	f7f0 fce8 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80101c4:	bf00      	nop
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	200000c0 	.word	0x200000c0
 80101cc:	2000936c 	.word	0x2000936c
 80101d0:	20000028 	.word	0x20000028
 80101d4:	200000ac 	.word	0x200000ac

080101d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80101dc:	2200      	movs	r2, #0
 80101de:	4905      	ldr	r1, [pc, #20]	@ (80101f4 <CDC_Init_FS+0x1c>)
 80101e0:	4805      	ldr	r0, [pc, #20]	@ (80101f8 <CDC_Init_FS+0x20>)
 80101e2:	f7fa fdf5 	bl	800add0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80101e6:	4905      	ldr	r1, [pc, #20]	@ (80101fc <CDC_Init_FS+0x24>)
 80101e8:	4803      	ldr	r0, [pc, #12]	@ (80101f8 <CDC_Init_FS+0x20>)
 80101ea:	f7fa fe13 	bl	800ae14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80101ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20009e48 	.word	0x20009e48
 80101f8:	2000936c 	.word	0x2000936c
 80101fc:	20009648 	.word	0x20009648

08010200 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010200:	b480      	push	{r7}
 8010202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010204:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010206:	4618      	mov	r0, r3
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	4603      	mov	r3, r0
 8010218:	6039      	str	r1, [r7, #0]
 801021a:	71fb      	strb	r3, [r7, #7]
 801021c:	4613      	mov	r3, r2
 801021e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010220:	79fb      	ldrb	r3, [r7, #7]
 8010222:	2b23      	cmp	r3, #35	@ 0x23
 8010224:	d84a      	bhi.n	80102bc <CDC_Control_FS+0xac>
 8010226:	a201      	add	r2, pc, #4	@ (adr r2, 801022c <CDC_Control_FS+0x1c>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	080102bd 	.word	0x080102bd
 8010230:	080102bd 	.word	0x080102bd
 8010234:	080102bd 	.word	0x080102bd
 8010238:	080102bd 	.word	0x080102bd
 801023c:	080102bd 	.word	0x080102bd
 8010240:	080102bd 	.word	0x080102bd
 8010244:	080102bd 	.word	0x080102bd
 8010248:	080102bd 	.word	0x080102bd
 801024c:	080102bd 	.word	0x080102bd
 8010250:	080102bd 	.word	0x080102bd
 8010254:	080102bd 	.word	0x080102bd
 8010258:	080102bd 	.word	0x080102bd
 801025c:	080102bd 	.word	0x080102bd
 8010260:	080102bd 	.word	0x080102bd
 8010264:	080102bd 	.word	0x080102bd
 8010268:	080102bd 	.word	0x080102bd
 801026c:	080102bd 	.word	0x080102bd
 8010270:	080102bd 	.word	0x080102bd
 8010274:	080102bd 	.word	0x080102bd
 8010278:	080102bd 	.word	0x080102bd
 801027c:	080102bd 	.word	0x080102bd
 8010280:	080102bd 	.word	0x080102bd
 8010284:	080102bd 	.word	0x080102bd
 8010288:	080102bd 	.word	0x080102bd
 801028c:	080102bd 	.word	0x080102bd
 8010290:	080102bd 	.word	0x080102bd
 8010294:	080102bd 	.word	0x080102bd
 8010298:	080102bd 	.word	0x080102bd
 801029c:	080102bd 	.word	0x080102bd
 80102a0:	080102bd 	.word	0x080102bd
 80102a4:	080102bd 	.word	0x080102bd
 80102a8:	080102bd 	.word	0x080102bd
 80102ac:	080102bd 	.word	0x080102bd
 80102b0:	080102bd 	.word	0x080102bd
 80102b4:	080102bd 	.word	0x080102bd
 80102b8:	080102bd 	.word	0x080102bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102bc:	bf00      	nop
  }

  return (USBD_OK);
 80102be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	4805      	ldr	r0, [pc, #20]	@ (80102f0 <CDC_Receive_FS+0x24>)
 80102da:	f7fa fd9b 	bl	800ae14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80102de:	4804      	ldr	r0, [pc, #16]	@ (80102f0 <CDC_Receive_FS+0x24>)
 80102e0:	f7fa fdf6 	bl	800aed0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80102e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3708      	adds	r7, #8
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	2000936c 	.word	0x2000936c

080102f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	460b      	mov	r3, r1
 80102fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010300:	2300      	movs	r3, #0
 8010302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010304:	4b0d      	ldr	r3, [pc, #52]	@ (801033c <CDC_Transmit_FS+0x48>)
 8010306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801030a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010316:	2301      	movs	r3, #1
 8010318:	e00b      	b.n	8010332 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801031a:	887b      	ldrh	r3, [r7, #2]
 801031c:	461a      	mov	r2, r3
 801031e:	6879      	ldr	r1, [r7, #4]
 8010320:	4806      	ldr	r0, [pc, #24]	@ (801033c <CDC_Transmit_FS+0x48>)
 8010322:	f7fa fd55 	bl	800add0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010326:	4805      	ldr	r0, [pc, #20]	@ (801033c <CDC_Transmit_FS+0x48>)
 8010328:	f7fa fd92 	bl	800ae50 <USBD_CDC_TransmitPacket>
 801032c:	4603      	mov	r3, r0
 801032e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010330:	7bfb      	ldrb	r3, [r7, #15]
}
 8010332:	4618      	mov	r0, r3
 8010334:	3710      	adds	r7, #16
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	2000936c 	.word	0x2000936c

08010340 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010340:	b480      	push	{r7}
 8010342:	b087      	sub	sp, #28
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	4613      	mov	r3, r2
 801034c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010356:	4618      	mov	r0, r3
 8010358:	371c      	adds	r7, #28
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
	...

08010364 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	4603      	mov	r3, r0
 801036c:	6039      	str	r1, [r7, #0]
 801036e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2212      	movs	r2, #18
 8010374:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010376:	4b03      	ldr	r3, [pc, #12]	@ (8010384 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010378:	4618      	mov	r0, r3
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr
 8010384:	200000e0 	.word	0x200000e0

08010388 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010388:	b480      	push	{r7}
 801038a:	b083      	sub	sp, #12
 801038c:	af00      	add	r7, sp, #0
 801038e:	4603      	mov	r3, r0
 8010390:	6039      	str	r1, [r7, #0]
 8010392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2204      	movs	r2, #4
 8010398:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801039a:	4b03      	ldr	r3, [pc, #12]	@ (80103a8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801039c:	4618      	mov	r0, r3
 801039e:	370c      	adds	r7, #12
 80103a0:	46bd      	mov	sp, r7
 80103a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a6:	4770      	bx	lr
 80103a8:	200000f4 	.word	0x200000f4

080103ac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	6039      	str	r1, [r7, #0]
 80103b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80103b8:	79fb      	ldrb	r3, [r7, #7]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d105      	bne.n	80103ca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	4907      	ldr	r1, [pc, #28]	@ (80103e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80103c2:	4808      	ldr	r0, [pc, #32]	@ (80103e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80103c4:	f7fb ff84 	bl	800c2d0 <USBD_GetString>
 80103c8:	e004      	b.n	80103d4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	4904      	ldr	r1, [pc, #16]	@ (80103e0 <USBD_CDC_ProductStrDescriptor+0x34>)
 80103ce:	4805      	ldr	r0, [pc, #20]	@ (80103e4 <USBD_CDC_ProductStrDescriptor+0x38>)
 80103d0:	f7fb ff7e 	bl	800c2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103d4:	4b02      	ldr	r3, [pc, #8]	@ (80103e0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	2000a648 	.word	0x2000a648
 80103e4:	08011c44 	.word	0x08011c44

080103e8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	6039      	str	r1, [r7, #0]
 80103f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	4904      	ldr	r1, [pc, #16]	@ (8010408 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80103f8:	4804      	ldr	r0, [pc, #16]	@ (801040c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80103fa:	f7fb ff69 	bl	800c2d0 <USBD_GetString>
  return USBD_StrDesc;
 80103fe:	4b02      	ldr	r3, [pc, #8]	@ (8010408 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010400:	4618      	mov	r0, r3
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}
 8010408:	2000a648 	.word	0x2000a648
 801040c:	08011c5c 	.word	0x08011c5c

08010410 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	4603      	mov	r3, r0
 8010418:	6039      	str	r1, [r7, #0]
 801041a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	221a      	movs	r2, #26
 8010420:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010422:	f000 f843 	bl	80104ac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010426:	4b02      	ldr	r3, [pc, #8]	@ (8010430 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010428:	4618      	mov	r0, r3
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	200000f8 	.word	0x200000f8

08010434 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b082      	sub	sp, #8
 8010438:	af00      	add	r7, sp, #0
 801043a:	4603      	mov	r3, r0
 801043c:	6039      	str	r1, [r7, #0]
 801043e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010440:	79fb      	ldrb	r3, [r7, #7]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d105      	bne.n	8010452 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010446:	683a      	ldr	r2, [r7, #0]
 8010448:	4907      	ldr	r1, [pc, #28]	@ (8010468 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801044a:	4808      	ldr	r0, [pc, #32]	@ (801046c <USBD_CDC_ConfigStrDescriptor+0x38>)
 801044c:	f7fb ff40 	bl	800c2d0 <USBD_GetString>
 8010450:	e004      	b.n	801045c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010452:	683a      	ldr	r2, [r7, #0]
 8010454:	4904      	ldr	r1, [pc, #16]	@ (8010468 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010456:	4805      	ldr	r0, [pc, #20]	@ (801046c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010458:	f7fb ff3a 	bl	800c2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801045c:	4b02      	ldr	r3, [pc, #8]	@ (8010468 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801045e:	4618      	mov	r0, r3
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	2000a648 	.word	0x2000a648
 801046c:	08011c70 	.word	0x08011c70

08010470 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b082      	sub	sp, #8
 8010474:	af00      	add	r7, sp, #0
 8010476:	4603      	mov	r3, r0
 8010478:	6039      	str	r1, [r7, #0]
 801047a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010482:	683a      	ldr	r2, [r7, #0]
 8010484:	4907      	ldr	r1, [pc, #28]	@ (80104a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010486:	4808      	ldr	r0, [pc, #32]	@ (80104a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010488:	f7fb ff22 	bl	800c2d0 <USBD_GetString>
 801048c:	e004      	b.n	8010498 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	4904      	ldr	r1, [pc, #16]	@ (80104a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010492:	4805      	ldr	r0, [pc, #20]	@ (80104a8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010494:	f7fb ff1c 	bl	800c2d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010498:	4b02      	ldr	r3, [pc, #8]	@ (80104a4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801049a:	4618      	mov	r0, r3
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	2000a648 	.word	0x2000a648
 80104a8:	08011c7c 	.word	0x08011c7c

080104ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80104b2:	4b0f      	ldr	r3, [pc, #60]	@ (80104f0 <Get_SerialNum+0x44>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80104b8:	4b0e      	ldr	r3, [pc, #56]	@ (80104f4 <Get_SerialNum+0x48>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80104be:	4b0e      	ldr	r3, [pc, #56]	@ (80104f8 <Get_SerialNum+0x4c>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	4413      	add	r3, r2
 80104ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d009      	beq.n	80104e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80104d2:	2208      	movs	r2, #8
 80104d4:	4909      	ldr	r1, [pc, #36]	@ (80104fc <Get_SerialNum+0x50>)
 80104d6:	68f8      	ldr	r0, [r7, #12]
 80104d8:	f000 f814 	bl	8010504 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80104dc:	2204      	movs	r2, #4
 80104de:	4908      	ldr	r1, [pc, #32]	@ (8010500 <Get_SerialNum+0x54>)
 80104e0:	68b8      	ldr	r0, [r7, #8]
 80104e2:	f000 f80f 	bl	8010504 <IntToUnicode>
  }
}
 80104e6:	bf00      	nop
 80104e8:	3710      	adds	r7, #16
 80104ea:	46bd      	mov	sp, r7
 80104ec:	bd80      	pop	{r7, pc}
 80104ee:	bf00      	nop
 80104f0:	1fff7590 	.word	0x1fff7590
 80104f4:	1fff7594 	.word	0x1fff7594
 80104f8:	1fff7598 	.word	0x1fff7598
 80104fc:	200000fa 	.word	0x200000fa
 8010500:	2000010a 	.word	0x2000010a

08010504 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010504:	b480      	push	{r7}
 8010506:	b087      	sub	sp, #28
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	4613      	mov	r3, r2
 8010510:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010512:	2300      	movs	r3, #0
 8010514:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010516:	2300      	movs	r3, #0
 8010518:	75fb      	strb	r3, [r7, #23]
 801051a:	e027      	b.n	801056c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	0f1b      	lsrs	r3, r3, #28
 8010520:	2b09      	cmp	r3, #9
 8010522:	d80b      	bhi.n	801053c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	0f1b      	lsrs	r3, r3, #28
 8010528:	b2da      	uxtb	r2, r3
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	005b      	lsls	r3, r3, #1
 801052e:	4619      	mov	r1, r3
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	440b      	add	r3, r1
 8010534:	3230      	adds	r2, #48	@ 0x30
 8010536:	b2d2      	uxtb	r2, r2
 8010538:	701a      	strb	r2, [r3, #0]
 801053a:	e00a      	b.n	8010552 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	0f1b      	lsrs	r3, r3, #28
 8010540:	b2da      	uxtb	r2, r3
 8010542:	7dfb      	ldrb	r3, [r7, #23]
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	4619      	mov	r1, r3
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	440b      	add	r3, r1
 801054c:	3237      	adds	r2, #55	@ 0x37
 801054e:	b2d2      	uxtb	r2, r2
 8010550:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	011b      	lsls	r3, r3, #4
 8010556:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	005b      	lsls	r3, r3, #1
 801055c:	3301      	adds	r3, #1
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	4413      	add	r3, r2
 8010562:	2200      	movs	r2, #0
 8010564:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010566:	7dfb      	ldrb	r3, [r7, #23]
 8010568:	3301      	adds	r3, #1
 801056a:	75fb      	strb	r3, [r7, #23]
 801056c:	7dfa      	ldrb	r2, [r7, #23]
 801056e:	79fb      	ldrb	r3, [r7, #7]
 8010570:	429a      	cmp	r2, r3
 8010572:	d3d3      	bcc.n	801051c <IntToUnicode+0x18>
  }
}
 8010574:	bf00      	nop
 8010576:	bf00      	nop
 8010578:	371c      	adds	r7, #28
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <LL_AHB2_GRP1_EnableClock>:
{
 8010582:	b480      	push	{r7}
 8010584:	b085      	sub	sp, #20
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801058a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801058e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4313      	orrs	r3, r2
 8010598:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801059a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801059e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4013      	ands	r3, r2
 80105a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80105a6:	68fb      	ldr	r3, [r7, #12]
}
 80105a8:	bf00      	nop
 80105aa:	3714      	adds	r7, #20
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <LL_APB1_GRP1_EnableClock>:
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80105bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80105cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80105d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	4013      	ands	r3, r2
 80105d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80105d8:	68fb      	ldr	r3, [r7, #12]
}
 80105da:	bf00      	nop
 80105dc:	3714      	adds	r7, #20
 80105de:	46bd      	mov	sp, r7
 80105e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e4:	4770      	bx	lr
	...

080105e8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b088      	sub	sp, #32
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105f0:	f107 030c 	add.w	r3, r7, #12
 80105f4:	2200      	movs	r2, #0
 80105f6:	601a      	str	r2, [r3, #0]
 80105f8:	605a      	str	r2, [r3, #4]
 80105fa:	609a      	str	r2, [r3, #8]
 80105fc:	60da      	str	r2, [r3, #12]
 80105fe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4a13      	ldr	r2, [pc, #76]	@ (8010654 <HAL_PCD_MspInit+0x6c>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d120      	bne.n	801064c <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801060a:	2001      	movs	r0, #1
 801060c:	f7ff ffb9 	bl	8010582 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8010610:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010614:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010616:	2302      	movs	r3, #2
 8010618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801061a:	2300      	movs	r3, #0
 801061c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801061e:	2300      	movs	r3, #0
 8010620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8010622:	230a      	movs	r3, #10
 8010624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010626:	f107 030c 	add.w	r3, r7, #12
 801062a:	4619      	mov	r1, r3
 801062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010630:	f7f2 fc36 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010634:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8010638:	f7ff ffbc 	bl	80105b4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801063c:	2200      	movs	r2, #0
 801063e:	2105      	movs	r1, #5
 8010640:	2014      	movs	r0, #20
 8010642:	f7f2 f991 	bl	8002968 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010646:	2014      	movs	r0, #20
 8010648:	f7f2 f9a8 	bl	800299c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801064c:	bf00      	nop
 801064e:	3720      	adds	r7, #32
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	40006800 	.word	0x40006800

08010658 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 801066c:	4619      	mov	r1, r3
 801066e:	4610      	mov	r0, r2
 8010670:	f7fa fd33 	bl	800b0da <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	460b      	mov	r3, r1
 8010686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801068e:	78fa      	ldrb	r2, [r7, #3]
 8010690:	6879      	ldr	r1, [r7, #4]
 8010692:	4613      	mov	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	78fb      	ldrb	r3, [r7, #3]
 80106a4:	4619      	mov	r1, r3
 80106a6:	f7fa fd6d 	bl	800b184 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80106aa:	bf00      	nop
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b082      	sub	sp, #8
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	460b      	mov	r3, r1
 80106bc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80106c4:	78fa      	ldrb	r2, [r7, #3]
 80106c6:	6879      	ldr	r1, [r7, #4]
 80106c8:	4613      	mov	r3, r2
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	440b      	add	r3, r1
 80106d2:	3324      	adds	r3, #36	@ 0x24
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	4619      	mov	r1, r3
 80106da:	f7fa fe06 	bl	800b2ea <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80106de:	bf00      	nop
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}

080106e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106e6:	b580      	push	{r7, lr}
 80106e8:	b082      	sub	sp, #8
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fa ff40 	bl	800b57a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80106fa:	bf00      	nop
 80106fc:	3708      	adds	r7, #8
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b084      	sub	sp, #16
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801070a:	2301      	movs	r3, #1
 801070c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	795b      	ldrb	r3, [r3, #5]
 8010712:	2b02      	cmp	r3, #2
 8010714:	d001      	beq.n	801071a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010716:	f7f0 fa3d 	bl	8000b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010720:	7bfa      	ldrb	r2, [r7, #15]
 8010722:	4611      	mov	r1, r2
 8010724:	4618      	mov	r0, r3
 8010726:	f7fa fee4 	bl	800b4f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010730:	4618      	mov	r0, r3
 8010732:	f7fa fe8c 	bl	800b44e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010736:	bf00      	nop
 8010738:	3710      	adds	r7, #16
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801074e:	4618      	mov	r0, r3
 8010750:	f7fa fedf 	bl	800b512 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	7a5b      	ldrb	r3, [r3, #9]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d005      	beq.n	8010768 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801075c:	4b04      	ldr	r3, [pc, #16]	@ (8010770 <HAL_PCD_SuspendCallback+0x30>)
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	4a03      	ldr	r2, [pc, #12]	@ (8010770 <HAL_PCD_SuspendCallback+0x30>)
 8010762:	f043 0306 	orr.w	r3, r3, #6
 8010766:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010768:	bf00      	nop
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	e000ed00 	.word	0xe000ed00

08010774 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7a5b      	ldrb	r3, [r3, #9]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d007      	beq.n	8010794 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010784:	4b08      	ldr	r3, [pc, #32]	@ (80107a8 <HAL_PCD_ResumeCallback+0x34>)
 8010786:	691b      	ldr	r3, [r3, #16]
 8010788:	4a07      	ldr	r2, [pc, #28]	@ (80107a8 <HAL_PCD_ResumeCallback+0x34>)
 801078a:	f023 0306 	bic.w	r3, r3, #6
 801078e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010790:	f000 f9fa 	bl	8010b88 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801079a:	4618      	mov	r0, r3
 801079c:	f7fa fed5 	bl	800b54a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	e000ed00 	.word	0xe000ed00

080107ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80107b4:	4a2c      	ldr	r2, [pc, #176]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4a2a      	ldr	r2, [pc, #168]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107c0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80107c4:	f7f4 fb92 	bl	8004eec <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80107c8:	4b27      	ldr	r3, [pc, #156]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107ca:	4a28      	ldr	r2, [pc, #160]	@ (801086c <USBD_LL_Init+0xc0>)
 80107cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80107ce:	4b26      	ldr	r3, [pc, #152]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107d0:	2208      	movs	r2, #8
 80107d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80107d4:	4b24      	ldr	r3, [pc, #144]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107d6:	2202      	movs	r2, #2
 80107d8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80107da:	4b23      	ldr	r3, [pc, #140]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107dc:	2202      	movs	r2, #2
 80107de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80107e0:	4b21      	ldr	r3, [pc, #132]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80107e6:	4b20      	ldr	r3, [pc, #128]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80107ec:	4b1e      	ldr	r3, [pc, #120]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80107f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80107f8:	481b      	ldr	r0, [pc, #108]	@ (8010868 <USBD_LL_Init+0xbc>)
 80107fa:	f7f2 fe25 	bl	8003448 <HAL_PCD_Init>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010804:	f7f0 f9c6 	bl	8000b94 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801080e:	2318      	movs	r3, #24
 8010810:	2200      	movs	r2, #0
 8010812:	2100      	movs	r1, #0
 8010814:	f7f4 fade 	bl	8004dd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801081e:	2358      	movs	r3, #88	@ 0x58
 8010820:	2200      	movs	r2, #0
 8010822:	2180      	movs	r1, #128	@ 0x80
 8010824:	f7f4 fad6 	bl	8004dd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801082e:	23c0      	movs	r3, #192	@ 0xc0
 8010830:	2200      	movs	r2, #0
 8010832:	2181      	movs	r1, #129	@ 0x81
 8010834:	f7f4 face 	bl	8004dd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801083e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010842:	2200      	movs	r2, #0
 8010844:	2101      	movs	r1, #1
 8010846:	f7f4 fac5 	bl	8004dd4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010854:	2200      	movs	r2, #0
 8010856:	2182      	movs	r1, #130	@ 0x82
 8010858:	f7f4 fabc 	bl	8004dd4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801085c:	2300      	movs	r3, #0
}
 801085e:	4618      	mov	r0, r3
 8010860:	3708      	adds	r7, #8
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	2000a848 	.word	0x2000a848
 801086c:	40006800 	.word	0x40006800

08010870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010886:	4618      	mov	r0, r3
 8010888:	f7f2 feac 	bl	80035e4 <HAL_PCD_Start>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	4618      	mov	r0, r3
 8010894:	f000 f97e 	bl	8010b94 <USBD_Get_USB_Status>
 8010898:	4603      	mov	r3, r0
 801089a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801089c:	7bbb      	ldrb	r3, [r7, #14]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b084      	sub	sp, #16
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	4608      	mov	r0, r1
 80108b0:	4611      	mov	r1, r2
 80108b2:	461a      	mov	r2, r3
 80108b4:	4603      	mov	r3, r0
 80108b6:	70fb      	strb	r3, [r7, #3]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70bb      	strb	r3, [r7, #2]
 80108bc:	4613      	mov	r3, r2
 80108be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108c4:	2300      	movs	r3, #0
 80108c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80108ce:	78bb      	ldrb	r3, [r7, #2]
 80108d0:	883a      	ldrh	r2, [r7, #0]
 80108d2:	78f9      	ldrb	r1, [r7, #3]
 80108d4:	f7f2 fff3 	bl	80038be <HAL_PCD_EP_Open>
 80108d8:	4603      	mov	r3, r0
 80108da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 f958 	bl	8010b94 <USBD_Get_USB_Status>
 80108e4:	4603      	mov	r3, r0
 80108e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108f2:	b580      	push	{r7, lr}
 80108f4:	b084      	sub	sp, #16
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	460b      	mov	r3, r1
 80108fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801090c:	78fa      	ldrb	r2, [r7, #3]
 801090e:	4611      	mov	r1, r2
 8010910:	4618      	mov	r0, r3
 8010912:	f7f3 f831 	bl	8003978 <HAL_PCD_EP_Close>
 8010916:	4603      	mov	r3, r0
 8010918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801091a:	7bfb      	ldrb	r3, [r7, #15]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 f939 	bl	8010b94 <USBD_Get_USB_Status>
 8010922:	4603      	mov	r3, r0
 8010924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010926:	7bbb      	ldrb	r3, [r7, #14]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	460b      	mov	r3, r1
 801093a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801094a:	78fa      	ldrb	r2, [r7, #3]
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7f3 f8da 	bl	8003b08 <HAL_PCD_EP_SetStall>
 8010954:	4603      	mov	r3, r0
 8010956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010958:	7bfb      	ldrb	r3, [r7, #15]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 f91a 	bl	8010b94 <USBD_Get_USB_Status>
 8010960:	4603      	mov	r3, r0
 8010962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010964:	7bbb      	ldrb	r3, [r7, #14]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	460b      	mov	r3, r1
 8010978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801097a:	2300      	movs	r3, #0
 801097c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801097e:	2300      	movs	r3, #0
 8010980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010988:	78fa      	ldrb	r2, [r7, #3]
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7f3 f90d 	bl	8003bac <HAL_PCD_EP_ClrStall>
 8010992:	4603      	mov	r3, r0
 8010994:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	4618      	mov	r0, r3
 801099a:	f000 f8fb 	bl	8010b94 <USBD_Get_USB_Status>
 801099e:	4603      	mov	r3, r0
 80109a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80109a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	460b      	mov	r3, r1
 80109b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80109be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80109c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	da0b      	bge.n	80109e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109ce:	68f9      	ldr	r1, [r7, #12]
 80109d0:	4613      	mov	r3, r2
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	4413      	add	r3, r2
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	440b      	add	r3, r1
 80109da:	3312      	adds	r3, #18
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	e00b      	b.n	80109f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80109e6:	68f9      	ldr	r1, [r7, #12]
 80109e8:	4613      	mov	r3, r2
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	4413      	add	r3, r2
 80109ee:	00db      	lsls	r3, r3, #3
 80109f0:	440b      	add	r3, r1
 80109f2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80109f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3714      	adds	r7, #20
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr

08010a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010a1e:	78fa      	ldrb	r2, [r7, #3]
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f2 ff27 	bl	8003876 <HAL_PCD_SetAddress>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f000 f8b0 	bl	8010b94 <USBD_Get_USB_Status>
 8010a34:	4603      	mov	r3, r0
 8010a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b086      	sub	sp, #24
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	603b      	str	r3, [r7, #0]
 8010a4e:	460b      	mov	r3, r1
 8010a50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a52:	2300      	movs	r3, #0
 8010a54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010a60:	7af9      	ldrb	r1, [r7, #11]
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	f7f3 f818 	bl	8003a9a <HAL_PCD_EP_Transmit>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a6e:	7dfb      	ldrb	r3, [r7, #23]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 f88f 	bl	8010b94 <USBD_Get_USB_Status>
 8010a76:	4603      	mov	r3, r0
 8010a78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010a7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3718      	adds	r7, #24
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	607a      	str	r2, [r7, #4]
 8010a8e:	603b      	str	r3, [r7, #0]
 8010a90:	460b      	mov	r3, r1
 8010a92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a94:	2300      	movs	r3, #0
 8010a96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010aa2:	7af9      	ldrb	r1, [r7, #11]
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	f7f2 ffae 	bl	8003a08 <HAL_PCD_EP_Receive>
 8010aac:	4603      	mov	r3, r0
 8010aae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ab0:	7dfb      	ldrb	r3, [r7, #23]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f000 f86e 	bl	8010b94 <USBD_Get_USB_Status>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010abc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3718      	adds	r7, #24
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b082      	sub	sp, #8
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	460b      	mov	r3, r1
 8010ad0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010ad8:	78fa      	ldrb	r2, [r7, #3]
 8010ada:	4611      	mov	r1, r2
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7f2 ffc4 	bl	8003a6a <HAL_PCD_EP_GetRxCount>
 8010ae2:	4603      	mov	r3, r0
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}

08010aec <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	460b      	mov	r3, r1
 8010af6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010af8:	78fb      	ldrb	r3, [r7, #3]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d002      	beq.n	8010b04 <HAL_PCDEx_LPM_Callback+0x18>
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d013      	beq.n	8010b2a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010b02:	e023      	b.n	8010b4c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	7a5b      	ldrb	r3, [r3, #9]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d007      	beq.n	8010b1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010b0c:	f000 f83c 	bl	8010b88 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b10:	4b10      	ldr	r3, [pc, #64]	@ (8010b54 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b12:	691b      	ldr	r3, [r3, #16]
 8010b14:	4a0f      	ldr	r2, [pc, #60]	@ (8010b54 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b16:	f023 0306 	bic.w	r3, r3, #6
 8010b1a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fa fd11 	bl	800b54a <USBD_LL_Resume>
    break;
 8010b28:	e010      	b.n	8010b4c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fa fcee 	bl	800b512 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	7a5b      	ldrb	r3, [r3, #9]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d005      	beq.n	8010b4a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b3e:	4b05      	ldr	r3, [pc, #20]	@ (8010b54 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b40:	691b      	ldr	r3, [r3, #16]
 8010b42:	4a04      	ldr	r2, [pc, #16]	@ (8010b54 <HAL_PCDEx_LPM_Callback+0x68>)
 8010b44:	f043 0306 	orr.w	r3, r3, #6
 8010b48:	6113      	str	r3, [r2, #16]
    break;
 8010b4a:	bf00      	nop
}
 8010b4c:	bf00      	nop
 8010b4e:	3708      	adds	r7, #8
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	e000ed00 	.word	0xe000ed00

08010b58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b083      	sub	sp, #12
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b60:	4b03      	ldr	r3, [pc, #12]	@ (8010b70 <USBD_static_malloc+0x18>)
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	370c      	adds	r7, #12
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr
 8010b6e:	bf00      	nop
 8010b70:	2000ab24 	.word	0x2000ab24

08010b74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b74:	b480      	push	{r7}
 8010b76:	b083      	sub	sp, #12
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010b7c:	bf00      	nop
 8010b7e:	370c      	adds	r7, #12
 8010b80:	46bd      	mov	sp, r7
 8010b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b86:	4770      	bx	lr

08010b88 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010b8c:	f7ef fd46 	bl	800061c <SystemClock_Config>
}
 8010b90:	bf00      	nop
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010ba2:	79fb      	ldrb	r3, [r7, #7]
 8010ba4:	2b03      	cmp	r3, #3
 8010ba6:	d817      	bhi.n	8010bd8 <USBD_Get_USB_Status+0x44>
 8010ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8010bb0 <USBD_Get_USB_Status+0x1c>)
 8010baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bae:	bf00      	nop
 8010bb0:	08010bc1 	.word	0x08010bc1
 8010bb4:	08010bc7 	.word	0x08010bc7
 8010bb8:	08010bcd 	.word	0x08010bcd
 8010bbc:	08010bd3 	.word	0x08010bd3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8010bc4:	e00b      	b.n	8010bde <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010bc6:	2303      	movs	r3, #3
 8010bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8010bca:	e008      	b.n	8010bde <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd0:	e005      	b.n	8010bde <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010bd2:	2303      	movs	r3, #3
 8010bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8010bd6:	e002      	b.n	8010bde <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010bd8:	2303      	movs	r3, #3
 8010bda:	73fb      	strb	r3, [r7, #15]
    break;
 8010bdc:	bf00      	nop
  }
  return usb_status;
 8010bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3714      	adds	r7, #20
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <std>:
 8010bec:	2300      	movs	r3, #0
 8010bee:	b510      	push	{r4, lr}
 8010bf0:	4604      	mov	r4, r0
 8010bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8010bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bfa:	6083      	str	r3, [r0, #8]
 8010bfc:	8181      	strh	r1, [r0, #12]
 8010bfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010c00:	81c2      	strh	r2, [r0, #14]
 8010c02:	6183      	str	r3, [r0, #24]
 8010c04:	4619      	mov	r1, r3
 8010c06:	2208      	movs	r2, #8
 8010c08:	305c      	adds	r0, #92	@ 0x5c
 8010c0a:	f000 f90e 	bl	8010e2a <memset>
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c44 <std+0x58>)
 8010c10:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c12:	4b0d      	ldr	r3, [pc, #52]	@ (8010c48 <std+0x5c>)
 8010c14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c16:	4b0d      	ldr	r3, [pc, #52]	@ (8010c4c <std+0x60>)
 8010c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <std+0x64>)
 8010c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c54 <std+0x68>)
 8010c20:	6224      	str	r4, [r4, #32]
 8010c22:	429c      	cmp	r4, r3
 8010c24:	d006      	beq.n	8010c34 <std+0x48>
 8010c26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c2a:	4294      	cmp	r4, r2
 8010c2c:	d002      	beq.n	8010c34 <std+0x48>
 8010c2e:	33d0      	adds	r3, #208	@ 0xd0
 8010c30:	429c      	cmp	r4, r3
 8010c32:	d105      	bne.n	8010c40 <std+0x54>
 8010c34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c3c:	f000 b9c4 	b.w	8010fc8 <__retarget_lock_init_recursive>
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	bf00      	nop
 8010c44:	08010da5 	.word	0x08010da5
 8010c48:	08010dc7 	.word	0x08010dc7
 8010c4c:	08010dff 	.word	0x08010dff
 8010c50:	08010e23 	.word	0x08010e23
 8010c54:	2000ad44 	.word	0x2000ad44

08010c58 <stdio_exit_handler>:
 8010c58:	4a02      	ldr	r2, [pc, #8]	@ (8010c64 <stdio_exit_handler+0xc>)
 8010c5a:	4903      	ldr	r1, [pc, #12]	@ (8010c68 <stdio_exit_handler+0x10>)
 8010c5c:	4803      	ldr	r0, [pc, #12]	@ (8010c6c <stdio_exit_handler+0x14>)
 8010c5e:	f000 b869 	b.w	8010d34 <_fwalk_sglue>
 8010c62:	bf00      	nop
 8010c64:	20000114 	.word	0x20000114
 8010c68:	08011885 	.word	0x08011885
 8010c6c:	20000124 	.word	0x20000124

08010c70 <cleanup_stdio>:
 8010c70:	6841      	ldr	r1, [r0, #4]
 8010c72:	4b0c      	ldr	r3, [pc, #48]	@ (8010ca4 <cleanup_stdio+0x34>)
 8010c74:	4299      	cmp	r1, r3
 8010c76:	b510      	push	{r4, lr}
 8010c78:	4604      	mov	r4, r0
 8010c7a:	d001      	beq.n	8010c80 <cleanup_stdio+0x10>
 8010c7c:	f000 fe02 	bl	8011884 <_fflush_r>
 8010c80:	68a1      	ldr	r1, [r4, #8]
 8010c82:	4b09      	ldr	r3, [pc, #36]	@ (8010ca8 <cleanup_stdio+0x38>)
 8010c84:	4299      	cmp	r1, r3
 8010c86:	d002      	beq.n	8010c8e <cleanup_stdio+0x1e>
 8010c88:	4620      	mov	r0, r4
 8010c8a:	f000 fdfb 	bl	8011884 <_fflush_r>
 8010c8e:	68e1      	ldr	r1, [r4, #12]
 8010c90:	4b06      	ldr	r3, [pc, #24]	@ (8010cac <cleanup_stdio+0x3c>)
 8010c92:	4299      	cmp	r1, r3
 8010c94:	d004      	beq.n	8010ca0 <cleanup_stdio+0x30>
 8010c96:	4620      	mov	r0, r4
 8010c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c9c:	f000 bdf2 	b.w	8011884 <_fflush_r>
 8010ca0:	bd10      	pop	{r4, pc}
 8010ca2:	bf00      	nop
 8010ca4:	2000ad44 	.word	0x2000ad44
 8010ca8:	2000adac 	.word	0x2000adac
 8010cac:	2000ae14 	.word	0x2000ae14

08010cb0 <global_stdio_init.part.0>:
 8010cb0:	b510      	push	{r4, lr}
 8010cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ce0 <global_stdio_init.part.0+0x30>)
 8010cb4:	4c0b      	ldr	r4, [pc, #44]	@ (8010ce4 <global_stdio_init.part.0+0x34>)
 8010cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8010ce8 <global_stdio_init.part.0+0x38>)
 8010cb8:	601a      	str	r2, [r3, #0]
 8010cba:	4620      	mov	r0, r4
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	2104      	movs	r1, #4
 8010cc0:	f7ff ff94 	bl	8010bec <std>
 8010cc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010cc8:	2201      	movs	r2, #1
 8010cca:	2109      	movs	r1, #9
 8010ccc:	f7ff ff8e 	bl	8010bec <std>
 8010cd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cd4:	2202      	movs	r2, #2
 8010cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cda:	2112      	movs	r1, #18
 8010cdc:	f7ff bf86 	b.w	8010bec <std>
 8010ce0:	2000ae7c 	.word	0x2000ae7c
 8010ce4:	2000ad44 	.word	0x2000ad44
 8010ce8:	08010c59 	.word	0x08010c59

08010cec <__sfp_lock_acquire>:
 8010cec:	4801      	ldr	r0, [pc, #4]	@ (8010cf4 <__sfp_lock_acquire+0x8>)
 8010cee:	f000 b96c 	b.w	8010fca <__retarget_lock_acquire_recursive>
 8010cf2:	bf00      	nop
 8010cf4:	2000ae85 	.word	0x2000ae85

08010cf8 <__sfp_lock_release>:
 8010cf8:	4801      	ldr	r0, [pc, #4]	@ (8010d00 <__sfp_lock_release+0x8>)
 8010cfa:	f000 b967 	b.w	8010fcc <__retarget_lock_release_recursive>
 8010cfe:	bf00      	nop
 8010d00:	2000ae85 	.word	0x2000ae85

08010d04 <__sinit>:
 8010d04:	b510      	push	{r4, lr}
 8010d06:	4604      	mov	r4, r0
 8010d08:	f7ff fff0 	bl	8010cec <__sfp_lock_acquire>
 8010d0c:	6a23      	ldr	r3, [r4, #32]
 8010d0e:	b11b      	cbz	r3, 8010d18 <__sinit+0x14>
 8010d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d14:	f7ff bff0 	b.w	8010cf8 <__sfp_lock_release>
 8010d18:	4b04      	ldr	r3, [pc, #16]	@ (8010d2c <__sinit+0x28>)
 8010d1a:	6223      	str	r3, [r4, #32]
 8010d1c:	4b04      	ldr	r3, [pc, #16]	@ (8010d30 <__sinit+0x2c>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1f5      	bne.n	8010d10 <__sinit+0xc>
 8010d24:	f7ff ffc4 	bl	8010cb0 <global_stdio_init.part.0>
 8010d28:	e7f2      	b.n	8010d10 <__sinit+0xc>
 8010d2a:	bf00      	nop
 8010d2c:	08010c71 	.word	0x08010c71
 8010d30:	2000ae7c 	.word	0x2000ae7c

08010d34 <_fwalk_sglue>:
 8010d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d38:	4607      	mov	r7, r0
 8010d3a:	4688      	mov	r8, r1
 8010d3c:	4614      	mov	r4, r2
 8010d3e:	2600      	movs	r6, #0
 8010d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d44:	f1b9 0901 	subs.w	r9, r9, #1
 8010d48:	d505      	bpl.n	8010d56 <_fwalk_sglue+0x22>
 8010d4a:	6824      	ldr	r4, [r4, #0]
 8010d4c:	2c00      	cmp	r4, #0
 8010d4e:	d1f7      	bne.n	8010d40 <_fwalk_sglue+0xc>
 8010d50:	4630      	mov	r0, r6
 8010d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d56:	89ab      	ldrh	r3, [r5, #12]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d907      	bls.n	8010d6c <_fwalk_sglue+0x38>
 8010d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d60:	3301      	adds	r3, #1
 8010d62:	d003      	beq.n	8010d6c <_fwalk_sglue+0x38>
 8010d64:	4629      	mov	r1, r5
 8010d66:	4638      	mov	r0, r7
 8010d68:	47c0      	blx	r8
 8010d6a:	4306      	orrs	r6, r0
 8010d6c:	3568      	adds	r5, #104	@ 0x68
 8010d6e:	e7e9      	b.n	8010d44 <_fwalk_sglue+0x10>

08010d70 <iprintf>:
 8010d70:	b40f      	push	{r0, r1, r2, r3}
 8010d72:	b507      	push	{r0, r1, r2, lr}
 8010d74:	4906      	ldr	r1, [pc, #24]	@ (8010d90 <iprintf+0x20>)
 8010d76:	ab04      	add	r3, sp, #16
 8010d78:	6808      	ldr	r0, [r1, #0]
 8010d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7e:	6881      	ldr	r1, [r0, #8]
 8010d80:	9301      	str	r3, [sp, #4]
 8010d82:	f000 fa55 	bl	8011230 <_vfiprintf_r>
 8010d86:	b003      	add	sp, #12
 8010d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d8c:	b004      	add	sp, #16
 8010d8e:	4770      	bx	lr
 8010d90:	20000120 	.word	0x20000120

08010d94 <putchar>:
 8010d94:	4b02      	ldr	r3, [pc, #8]	@ (8010da0 <putchar+0xc>)
 8010d96:	4601      	mov	r1, r0
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	6882      	ldr	r2, [r0, #8]
 8010d9c:	f000 bd9a 	b.w	80118d4 <_putc_r>
 8010da0:	20000120 	.word	0x20000120

08010da4 <__sread>:
 8010da4:	b510      	push	{r4, lr}
 8010da6:	460c      	mov	r4, r1
 8010da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dac:	f000 f8be 	bl	8010f2c <_read_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	bfab      	itete	ge
 8010db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010db6:	89a3      	ldrhlt	r3, [r4, #12]
 8010db8:	181b      	addge	r3, r3, r0
 8010dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010dbe:	bfac      	ite	ge
 8010dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010dc2:	81a3      	strhlt	r3, [r4, #12]
 8010dc4:	bd10      	pop	{r4, pc}

08010dc6 <__swrite>:
 8010dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dca:	461f      	mov	r7, r3
 8010dcc:	898b      	ldrh	r3, [r1, #12]
 8010dce:	05db      	lsls	r3, r3, #23
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	4616      	mov	r6, r2
 8010dd6:	d505      	bpl.n	8010de4 <__swrite+0x1e>
 8010dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ddc:	2302      	movs	r3, #2
 8010dde:	2200      	movs	r2, #0
 8010de0:	f000 f892 	bl	8010f08 <_lseek_r>
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010dee:	81a3      	strh	r3, [r4, #12]
 8010df0:	4632      	mov	r2, r6
 8010df2:	463b      	mov	r3, r7
 8010df4:	4628      	mov	r0, r5
 8010df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfa:	f000 b8a9 	b.w	8010f50 <_write_r>

08010dfe <__sseek>:
 8010dfe:	b510      	push	{r4, lr}
 8010e00:	460c      	mov	r4, r1
 8010e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e06:	f000 f87f 	bl	8010f08 <_lseek_r>
 8010e0a:	1c43      	adds	r3, r0, #1
 8010e0c:	89a3      	ldrh	r3, [r4, #12]
 8010e0e:	bf15      	itete	ne
 8010e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e1a:	81a3      	strheq	r3, [r4, #12]
 8010e1c:	bf18      	it	ne
 8010e1e:	81a3      	strhne	r3, [r4, #12]
 8010e20:	bd10      	pop	{r4, pc}

08010e22 <__sclose>:
 8010e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e26:	f000 b809 	b.w	8010e3c <_close_r>

08010e2a <memset>:
 8010e2a:	4402      	add	r2, r0
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d100      	bne.n	8010e34 <memset+0xa>
 8010e32:	4770      	bx	lr
 8010e34:	f803 1b01 	strb.w	r1, [r3], #1
 8010e38:	e7f9      	b.n	8010e2e <memset+0x4>
	...

08010e3c <_close_r>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	4d06      	ldr	r5, [pc, #24]	@ (8010e58 <_close_r+0x1c>)
 8010e40:	2300      	movs	r3, #0
 8010e42:	4604      	mov	r4, r0
 8010e44:	4608      	mov	r0, r1
 8010e46:	602b      	str	r3, [r5, #0]
 8010e48:	f7f0 f8f7 	bl	800103a <_close>
 8010e4c:	1c43      	adds	r3, r0, #1
 8010e4e:	d102      	bne.n	8010e56 <_close_r+0x1a>
 8010e50:	682b      	ldr	r3, [r5, #0]
 8010e52:	b103      	cbz	r3, 8010e56 <_close_r+0x1a>
 8010e54:	6023      	str	r3, [r4, #0]
 8010e56:	bd38      	pop	{r3, r4, r5, pc}
 8010e58:	2000ae80 	.word	0x2000ae80

08010e5c <_reclaim_reent>:
 8010e5c:	4b29      	ldr	r3, [pc, #164]	@ (8010f04 <_reclaim_reent+0xa8>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	4283      	cmp	r3, r0
 8010e62:	b570      	push	{r4, r5, r6, lr}
 8010e64:	4604      	mov	r4, r0
 8010e66:	d04b      	beq.n	8010f00 <_reclaim_reent+0xa4>
 8010e68:	69c3      	ldr	r3, [r0, #28]
 8010e6a:	b1ab      	cbz	r3, 8010e98 <_reclaim_reent+0x3c>
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	b16b      	cbz	r3, 8010e8c <_reclaim_reent+0x30>
 8010e70:	2500      	movs	r5, #0
 8010e72:	69e3      	ldr	r3, [r4, #28]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	5959      	ldr	r1, [r3, r5]
 8010e78:	2900      	cmp	r1, #0
 8010e7a:	d13b      	bne.n	8010ef4 <_reclaim_reent+0x98>
 8010e7c:	3504      	adds	r5, #4
 8010e7e:	2d80      	cmp	r5, #128	@ 0x80
 8010e80:	d1f7      	bne.n	8010e72 <_reclaim_reent+0x16>
 8010e82:	69e3      	ldr	r3, [r4, #28]
 8010e84:	4620      	mov	r0, r4
 8010e86:	68d9      	ldr	r1, [r3, #12]
 8010e88:	f000 f8b0 	bl	8010fec <_free_r>
 8010e8c:	69e3      	ldr	r3, [r4, #28]
 8010e8e:	6819      	ldr	r1, [r3, #0]
 8010e90:	b111      	cbz	r1, 8010e98 <_reclaim_reent+0x3c>
 8010e92:	4620      	mov	r0, r4
 8010e94:	f000 f8aa 	bl	8010fec <_free_r>
 8010e98:	6961      	ldr	r1, [r4, #20]
 8010e9a:	b111      	cbz	r1, 8010ea2 <_reclaim_reent+0x46>
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f000 f8a5 	bl	8010fec <_free_r>
 8010ea2:	69e1      	ldr	r1, [r4, #28]
 8010ea4:	b111      	cbz	r1, 8010eac <_reclaim_reent+0x50>
 8010ea6:	4620      	mov	r0, r4
 8010ea8:	f000 f8a0 	bl	8010fec <_free_r>
 8010eac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010eae:	b111      	cbz	r1, 8010eb6 <_reclaim_reent+0x5a>
 8010eb0:	4620      	mov	r0, r4
 8010eb2:	f000 f89b 	bl	8010fec <_free_r>
 8010eb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eb8:	b111      	cbz	r1, 8010ec0 <_reclaim_reent+0x64>
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f000 f896 	bl	8010fec <_free_r>
 8010ec0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010ec2:	b111      	cbz	r1, 8010eca <_reclaim_reent+0x6e>
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f000 f891 	bl	8010fec <_free_r>
 8010eca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010ecc:	b111      	cbz	r1, 8010ed4 <_reclaim_reent+0x78>
 8010ece:	4620      	mov	r0, r4
 8010ed0:	f000 f88c 	bl	8010fec <_free_r>
 8010ed4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010ed6:	b111      	cbz	r1, 8010ede <_reclaim_reent+0x82>
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f000 f887 	bl	8010fec <_free_r>
 8010ede:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010ee0:	b111      	cbz	r1, 8010ee8 <_reclaim_reent+0x8c>
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 f882 	bl	8010fec <_free_r>
 8010ee8:	6a23      	ldr	r3, [r4, #32]
 8010eea:	b14b      	cbz	r3, 8010f00 <_reclaim_reent+0xa4>
 8010eec:	4620      	mov	r0, r4
 8010eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ef2:	4718      	bx	r3
 8010ef4:	680e      	ldr	r6, [r1, #0]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f000 f878 	bl	8010fec <_free_r>
 8010efc:	4631      	mov	r1, r6
 8010efe:	e7bb      	b.n	8010e78 <_reclaim_reent+0x1c>
 8010f00:	bd70      	pop	{r4, r5, r6, pc}
 8010f02:	bf00      	nop
 8010f04:	20000120 	.word	0x20000120

08010f08 <_lseek_r>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	4d07      	ldr	r5, [pc, #28]	@ (8010f28 <_lseek_r+0x20>)
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	4608      	mov	r0, r1
 8010f10:	4611      	mov	r1, r2
 8010f12:	2200      	movs	r2, #0
 8010f14:	602a      	str	r2, [r5, #0]
 8010f16:	461a      	mov	r2, r3
 8010f18:	f7f0 f8b6 	bl	8001088 <_lseek>
 8010f1c:	1c43      	adds	r3, r0, #1
 8010f1e:	d102      	bne.n	8010f26 <_lseek_r+0x1e>
 8010f20:	682b      	ldr	r3, [r5, #0]
 8010f22:	b103      	cbz	r3, 8010f26 <_lseek_r+0x1e>
 8010f24:	6023      	str	r3, [r4, #0]
 8010f26:	bd38      	pop	{r3, r4, r5, pc}
 8010f28:	2000ae80 	.word	0x2000ae80

08010f2c <_read_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4d07      	ldr	r5, [pc, #28]	@ (8010f4c <_read_r+0x20>)
 8010f30:	4604      	mov	r4, r0
 8010f32:	4608      	mov	r0, r1
 8010f34:	4611      	mov	r1, r2
 8010f36:	2200      	movs	r2, #0
 8010f38:	602a      	str	r2, [r5, #0]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	f7f0 f844 	bl	8000fc8 <_read>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	d102      	bne.n	8010f4a <_read_r+0x1e>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b103      	cbz	r3, 8010f4a <_read_r+0x1e>
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	2000ae80 	.word	0x2000ae80

08010f50 <_write_r>:
 8010f50:	b538      	push	{r3, r4, r5, lr}
 8010f52:	4d07      	ldr	r5, [pc, #28]	@ (8010f70 <_write_r+0x20>)
 8010f54:	4604      	mov	r4, r0
 8010f56:	4608      	mov	r0, r1
 8010f58:	4611      	mov	r1, r2
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	602a      	str	r2, [r5, #0]
 8010f5e:	461a      	mov	r2, r3
 8010f60:	f7f0 f84f 	bl	8001002 <_write>
 8010f64:	1c43      	adds	r3, r0, #1
 8010f66:	d102      	bne.n	8010f6e <_write_r+0x1e>
 8010f68:	682b      	ldr	r3, [r5, #0]
 8010f6a:	b103      	cbz	r3, 8010f6e <_write_r+0x1e>
 8010f6c:	6023      	str	r3, [r4, #0]
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	2000ae80 	.word	0x2000ae80

08010f74 <__errno>:
 8010f74:	4b01      	ldr	r3, [pc, #4]	@ (8010f7c <__errno+0x8>)
 8010f76:	6818      	ldr	r0, [r3, #0]
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop
 8010f7c:	20000120 	.word	0x20000120

08010f80 <__libc_init_array>:
 8010f80:	b570      	push	{r4, r5, r6, lr}
 8010f82:	4d0d      	ldr	r5, [pc, #52]	@ (8010fb8 <__libc_init_array+0x38>)
 8010f84:	4c0d      	ldr	r4, [pc, #52]	@ (8010fbc <__libc_init_array+0x3c>)
 8010f86:	1b64      	subs	r4, r4, r5
 8010f88:	10a4      	asrs	r4, r4, #2
 8010f8a:	2600      	movs	r6, #0
 8010f8c:	42a6      	cmp	r6, r4
 8010f8e:	d109      	bne.n	8010fa4 <__libc_init_array+0x24>
 8010f90:	4d0b      	ldr	r5, [pc, #44]	@ (8010fc0 <__libc_init_array+0x40>)
 8010f92:	4c0c      	ldr	r4, [pc, #48]	@ (8010fc4 <__libc_init_array+0x44>)
 8010f94:	f000 fdfa 	bl	8011b8c <_init>
 8010f98:	1b64      	subs	r4, r4, r5
 8010f9a:	10a4      	asrs	r4, r4, #2
 8010f9c:	2600      	movs	r6, #0
 8010f9e:	42a6      	cmp	r6, r4
 8010fa0:	d105      	bne.n	8010fae <__libc_init_array+0x2e>
 8010fa2:	bd70      	pop	{r4, r5, r6, pc}
 8010fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fa8:	4798      	blx	r3
 8010faa:	3601      	adds	r6, #1
 8010fac:	e7ee      	b.n	8010f8c <__libc_init_array+0xc>
 8010fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8010fb2:	4798      	blx	r3
 8010fb4:	3601      	adds	r6, #1
 8010fb6:	e7f2      	b.n	8010f9e <__libc_init_array+0x1e>
 8010fb8:	08011ddc 	.word	0x08011ddc
 8010fbc:	08011ddc 	.word	0x08011ddc
 8010fc0:	08011ddc 	.word	0x08011ddc
 8010fc4:	08011de0 	.word	0x08011de0

08010fc8 <__retarget_lock_init_recursive>:
 8010fc8:	4770      	bx	lr

08010fca <__retarget_lock_acquire_recursive>:
 8010fca:	4770      	bx	lr

08010fcc <__retarget_lock_release_recursive>:
 8010fcc:	4770      	bx	lr

08010fce <memcpy>:
 8010fce:	440a      	add	r2, r1
 8010fd0:	4291      	cmp	r1, r2
 8010fd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8010fd6:	d100      	bne.n	8010fda <memcpy+0xc>
 8010fd8:	4770      	bx	lr
 8010fda:	b510      	push	{r4, lr}
 8010fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fe4:	4291      	cmp	r1, r2
 8010fe6:	d1f9      	bne.n	8010fdc <memcpy+0xe>
 8010fe8:	bd10      	pop	{r4, pc}
	...

08010fec <_free_r>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	4605      	mov	r5, r0
 8010ff0:	2900      	cmp	r1, #0
 8010ff2:	d041      	beq.n	8011078 <_free_r+0x8c>
 8010ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff8:	1f0c      	subs	r4, r1, #4
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	bfb8      	it	lt
 8010ffe:	18e4      	addlt	r4, r4, r3
 8011000:	f000 f8e0 	bl	80111c4 <__malloc_lock>
 8011004:	4a1d      	ldr	r2, [pc, #116]	@ (801107c <_free_r+0x90>)
 8011006:	6813      	ldr	r3, [r2, #0]
 8011008:	b933      	cbnz	r3, 8011018 <_free_r+0x2c>
 801100a:	6063      	str	r3, [r4, #4]
 801100c:	6014      	str	r4, [r2, #0]
 801100e:	4628      	mov	r0, r5
 8011010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011014:	f000 b8dc 	b.w	80111d0 <__malloc_unlock>
 8011018:	42a3      	cmp	r3, r4
 801101a:	d908      	bls.n	801102e <_free_r+0x42>
 801101c:	6820      	ldr	r0, [r4, #0]
 801101e:	1821      	adds	r1, r4, r0
 8011020:	428b      	cmp	r3, r1
 8011022:	bf01      	itttt	eq
 8011024:	6819      	ldreq	r1, [r3, #0]
 8011026:	685b      	ldreq	r3, [r3, #4]
 8011028:	1809      	addeq	r1, r1, r0
 801102a:	6021      	streq	r1, [r4, #0]
 801102c:	e7ed      	b.n	801100a <_free_r+0x1e>
 801102e:	461a      	mov	r2, r3
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	b10b      	cbz	r3, 8011038 <_free_r+0x4c>
 8011034:	42a3      	cmp	r3, r4
 8011036:	d9fa      	bls.n	801102e <_free_r+0x42>
 8011038:	6811      	ldr	r1, [r2, #0]
 801103a:	1850      	adds	r0, r2, r1
 801103c:	42a0      	cmp	r0, r4
 801103e:	d10b      	bne.n	8011058 <_free_r+0x6c>
 8011040:	6820      	ldr	r0, [r4, #0]
 8011042:	4401      	add	r1, r0
 8011044:	1850      	adds	r0, r2, r1
 8011046:	4283      	cmp	r3, r0
 8011048:	6011      	str	r1, [r2, #0]
 801104a:	d1e0      	bne.n	801100e <_free_r+0x22>
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	6053      	str	r3, [r2, #4]
 8011052:	4408      	add	r0, r1
 8011054:	6010      	str	r0, [r2, #0]
 8011056:	e7da      	b.n	801100e <_free_r+0x22>
 8011058:	d902      	bls.n	8011060 <_free_r+0x74>
 801105a:	230c      	movs	r3, #12
 801105c:	602b      	str	r3, [r5, #0]
 801105e:	e7d6      	b.n	801100e <_free_r+0x22>
 8011060:	6820      	ldr	r0, [r4, #0]
 8011062:	1821      	adds	r1, r4, r0
 8011064:	428b      	cmp	r3, r1
 8011066:	bf04      	itt	eq
 8011068:	6819      	ldreq	r1, [r3, #0]
 801106a:	685b      	ldreq	r3, [r3, #4]
 801106c:	6063      	str	r3, [r4, #4]
 801106e:	bf04      	itt	eq
 8011070:	1809      	addeq	r1, r1, r0
 8011072:	6021      	streq	r1, [r4, #0]
 8011074:	6054      	str	r4, [r2, #4]
 8011076:	e7ca      	b.n	801100e <_free_r+0x22>
 8011078:	bd38      	pop	{r3, r4, r5, pc}
 801107a:	bf00      	nop
 801107c:	2000ae8c 	.word	0x2000ae8c

08011080 <sbrk_aligned>:
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	4e0f      	ldr	r6, [pc, #60]	@ (80110c0 <sbrk_aligned+0x40>)
 8011084:	460c      	mov	r4, r1
 8011086:	6831      	ldr	r1, [r6, #0]
 8011088:	4605      	mov	r5, r0
 801108a:	b911      	cbnz	r1, 8011092 <sbrk_aligned+0x12>
 801108c:	f000 fcea 	bl	8011a64 <_sbrk_r>
 8011090:	6030      	str	r0, [r6, #0]
 8011092:	4621      	mov	r1, r4
 8011094:	4628      	mov	r0, r5
 8011096:	f000 fce5 	bl	8011a64 <_sbrk_r>
 801109a:	1c43      	adds	r3, r0, #1
 801109c:	d103      	bne.n	80110a6 <sbrk_aligned+0x26>
 801109e:	f04f 34ff 	mov.w	r4, #4294967295
 80110a2:	4620      	mov	r0, r4
 80110a4:	bd70      	pop	{r4, r5, r6, pc}
 80110a6:	1cc4      	adds	r4, r0, #3
 80110a8:	f024 0403 	bic.w	r4, r4, #3
 80110ac:	42a0      	cmp	r0, r4
 80110ae:	d0f8      	beq.n	80110a2 <sbrk_aligned+0x22>
 80110b0:	1a21      	subs	r1, r4, r0
 80110b2:	4628      	mov	r0, r5
 80110b4:	f000 fcd6 	bl	8011a64 <_sbrk_r>
 80110b8:	3001      	adds	r0, #1
 80110ba:	d1f2      	bne.n	80110a2 <sbrk_aligned+0x22>
 80110bc:	e7ef      	b.n	801109e <sbrk_aligned+0x1e>
 80110be:	bf00      	nop
 80110c0:	2000ae88 	.word	0x2000ae88

080110c4 <_malloc_r>:
 80110c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c8:	1ccd      	adds	r5, r1, #3
 80110ca:	f025 0503 	bic.w	r5, r5, #3
 80110ce:	3508      	adds	r5, #8
 80110d0:	2d0c      	cmp	r5, #12
 80110d2:	bf38      	it	cc
 80110d4:	250c      	movcc	r5, #12
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	4606      	mov	r6, r0
 80110da:	db01      	blt.n	80110e0 <_malloc_r+0x1c>
 80110dc:	42a9      	cmp	r1, r5
 80110de:	d904      	bls.n	80110ea <_malloc_r+0x26>
 80110e0:	230c      	movs	r3, #12
 80110e2:	6033      	str	r3, [r6, #0]
 80110e4:	2000      	movs	r0, #0
 80110e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80111c0 <_malloc_r+0xfc>
 80110ee:	f000 f869 	bl	80111c4 <__malloc_lock>
 80110f2:	f8d8 3000 	ldr.w	r3, [r8]
 80110f6:	461c      	mov	r4, r3
 80110f8:	bb44      	cbnz	r4, 801114c <_malloc_r+0x88>
 80110fa:	4629      	mov	r1, r5
 80110fc:	4630      	mov	r0, r6
 80110fe:	f7ff ffbf 	bl	8011080 <sbrk_aligned>
 8011102:	1c43      	adds	r3, r0, #1
 8011104:	4604      	mov	r4, r0
 8011106:	d158      	bne.n	80111ba <_malloc_r+0xf6>
 8011108:	f8d8 4000 	ldr.w	r4, [r8]
 801110c:	4627      	mov	r7, r4
 801110e:	2f00      	cmp	r7, #0
 8011110:	d143      	bne.n	801119a <_malloc_r+0xd6>
 8011112:	2c00      	cmp	r4, #0
 8011114:	d04b      	beq.n	80111ae <_malloc_r+0xea>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	4639      	mov	r1, r7
 801111a:	4630      	mov	r0, r6
 801111c:	eb04 0903 	add.w	r9, r4, r3
 8011120:	f000 fca0 	bl	8011a64 <_sbrk_r>
 8011124:	4581      	cmp	r9, r0
 8011126:	d142      	bne.n	80111ae <_malloc_r+0xea>
 8011128:	6821      	ldr	r1, [r4, #0]
 801112a:	1a6d      	subs	r5, r5, r1
 801112c:	4629      	mov	r1, r5
 801112e:	4630      	mov	r0, r6
 8011130:	f7ff ffa6 	bl	8011080 <sbrk_aligned>
 8011134:	3001      	adds	r0, #1
 8011136:	d03a      	beq.n	80111ae <_malloc_r+0xea>
 8011138:	6823      	ldr	r3, [r4, #0]
 801113a:	442b      	add	r3, r5
 801113c:	6023      	str	r3, [r4, #0]
 801113e:	f8d8 3000 	ldr.w	r3, [r8]
 8011142:	685a      	ldr	r2, [r3, #4]
 8011144:	bb62      	cbnz	r2, 80111a0 <_malloc_r+0xdc>
 8011146:	f8c8 7000 	str.w	r7, [r8]
 801114a:	e00f      	b.n	801116c <_malloc_r+0xa8>
 801114c:	6822      	ldr	r2, [r4, #0]
 801114e:	1b52      	subs	r2, r2, r5
 8011150:	d420      	bmi.n	8011194 <_malloc_r+0xd0>
 8011152:	2a0b      	cmp	r2, #11
 8011154:	d917      	bls.n	8011186 <_malloc_r+0xc2>
 8011156:	1961      	adds	r1, r4, r5
 8011158:	42a3      	cmp	r3, r4
 801115a:	6025      	str	r5, [r4, #0]
 801115c:	bf18      	it	ne
 801115e:	6059      	strne	r1, [r3, #4]
 8011160:	6863      	ldr	r3, [r4, #4]
 8011162:	bf08      	it	eq
 8011164:	f8c8 1000 	streq.w	r1, [r8]
 8011168:	5162      	str	r2, [r4, r5]
 801116a:	604b      	str	r3, [r1, #4]
 801116c:	4630      	mov	r0, r6
 801116e:	f000 f82f 	bl	80111d0 <__malloc_unlock>
 8011172:	f104 000b 	add.w	r0, r4, #11
 8011176:	1d23      	adds	r3, r4, #4
 8011178:	f020 0007 	bic.w	r0, r0, #7
 801117c:	1ac2      	subs	r2, r0, r3
 801117e:	bf1c      	itt	ne
 8011180:	1a1b      	subne	r3, r3, r0
 8011182:	50a3      	strne	r3, [r4, r2]
 8011184:	e7af      	b.n	80110e6 <_malloc_r+0x22>
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	42a3      	cmp	r3, r4
 801118a:	bf0c      	ite	eq
 801118c:	f8c8 2000 	streq.w	r2, [r8]
 8011190:	605a      	strne	r2, [r3, #4]
 8011192:	e7eb      	b.n	801116c <_malloc_r+0xa8>
 8011194:	4623      	mov	r3, r4
 8011196:	6864      	ldr	r4, [r4, #4]
 8011198:	e7ae      	b.n	80110f8 <_malloc_r+0x34>
 801119a:	463c      	mov	r4, r7
 801119c:	687f      	ldr	r7, [r7, #4]
 801119e:	e7b6      	b.n	801110e <_malloc_r+0x4a>
 80111a0:	461a      	mov	r2, r3
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	42a3      	cmp	r3, r4
 80111a6:	d1fb      	bne.n	80111a0 <_malloc_r+0xdc>
 80111a8:	2300      	movs	r3, #0
 80111aa:	6053      	str	r3, [r2, #4]
 80111ac:	e7de      	b.n	801116c <_malloc_r+0xa8>
 80111ae:	230c      	movs	r3, #12
 80111b0:	6033      	str	r3, [r6, #0]
 80111b2:	4630      	mov	r0, r6
 80111b4:	f000 f80c 	bl	80111d0 <__malloc_unlock>
 80111b8:	e794      	b.n	80110e4 <_malloc_r+0x20>
 80111ba:	6005      	str	r5, [r0, #0]
 80111bc:	e7d6      	b.n	801116c <_malloc_r+0xa8>
 80111be:	bf00      	nop
 80111c0:	2000ae8c 	.word	0x2000ae8c

080111c4 <__malloc_lock>:
 80111c4:	4801      	ldr	r0, [pc, #4]	@ (80111cc <__malloc_lock+0x8>)
 80111c6:	f7ff bf00 	b.w	8010fca <__retarget_lock_acquire_recursive>
 80111ca:	bf00      	nop
 80111cc:	2000ae84 	.word	0x2000ae84

080111d0 <__malloc_unlock>:
 80111d0:	4801      	ldr	r0, [pc, #4]	@ (80111d8 <__malloc_unlock+0x8>)
 80111d2:	f7ff befb 	b.w	8010fcc <__retarget_lock_release_recursive>
 80111d6:	bf00      	nop
 80111d8:	2000ae84 	.word	0x2000ae84

080111dc <__sfputc_r>:
 80111dc:	6893      	ldr	r3, [r2, #8]
 80111de:	3b01      	subs	r3, #1
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	b410      	push	{r4}
 80111e4:	6093      	str	r3, [r2, #8]
 80111e6:	da08      	bge.n	80111fa <__sfputc_r+0x1e>
 80111e8:	6994      	ldr	r4, [r2, #24]
 80111ea:	42a3      	cmp	r3, r4
 80111ec:	db01      	blt.n	80111f2 <__sfputc_r+0x16>
 80111ee:	290a      	cmp	r1, #10
 80111f0:	d103      	bne.n	80111fa <__sfputc_r+0x1e>
 80111f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111f6:	f000 bba1 	b.w	801193c <__swbuf_r>
 80111fa:	6813      	ldr	r3, [r2, #0]
 80111fc:	1c58      	adds	r0, r3, #1
 80111fe:	6010      	str	r0, [r2, #0]
 8011200:	7019      	strb	r1, [r3, #0]
 8011202:	4608      	mov	r0, r1
 8011204:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011208:	4770      	bx	lr

0801120a <__sfputs_r>:
 801120a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120c:	4606      	mov	r6, r0
 801120e:	460f      	mov	r7, r1
 8011210:	4614      	mov	r4, r2
 8011212:	18d5      	adds	r5, r2, r3
 8011214:	42ac      	cmp	r4, r5
 8011216:	d101      	bne.n	801121c <__sfputs_r+0x12>
 8011218:	2000      	movs	r0, #0
 801121a:	e007      	b.n	801122c <__sfputs_r+0x22>
 801121c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011220:	463a      	mov	r2, r7
 8011222:	4630      	mov	r0, r6
 8011224:	f7ff ffda 	bl	80111dc <__sfputc_r>
 8011228:	1c43      	adds	r3, r0, #1
 801122a:	d1f3      	bne.n	8011214 <__sfputs_r+0xa>
 801122c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011230 <_vfiprintf_r>:
 8011230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	460d      	mov	r5, r1
 8011236:	b09d      	sub	sp, #116	@ 0x74
 8011238:	4614      	mov	r4, r2
 801123a:	4698      	mov	r8, r3
 801123c:	4606      	mov	r6, r0
 801123e:	b118      	cbz	r0, 8011248 <_vfiprintf_r+0x18>
 8011240:	6a03      	ldr	r3, [r0, #32]
 8011242:	b90b      	cbnz	r3, 8011248 <_vfiprintf_r+0x18>
 8011244:	f7ff fd5e 	bl	8010d04 <__sinit>
 8011248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801124a:	07d9      	lsls	r1, r3, #31
 801124c:	d405      	bmi.n	801125a <_vfiprintf_r+0x2a>
 801124e:	89ab      	ldrh	r3, [r5, #12]
 8011250:	059a      	lsls	r2, r3, #22
 8011252:	d402      	bmi.n	801125a <_vfiprintf_r+0x2a>
 8011254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011256:	f7ff feb8 	bl	8010fca <__retarget_lock_acquire_recursive>
 801125a:	89ab      	ldrh	r3, [r5, #12]
 801125c:	071b      	lsls	r3, r3, #28
 801125e:	d501      	bpl.n	8011264 <_vfiprintf_r+0x34>
 8011260:	692b      	ldr	r3, [r5, #16]
 8011262:	b99b      	cbnz	r3, 801128c <_vfiprintf_r+0x5c>
 8011264:	4629      	mov	r1, r5
 8011266:	4630      	mov	r0, r6
 8011268:	f000 fba6 	bl	80119b8 <__swsetup_r>
 801126c:	b170      	cbz	r0, 801128c <_vfiprintf_r+0x5c>
 801126e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011270:	07dc      	lsls	r4, r3, #31
 8011272:	d504      	bpl.n	801127e <_vfiprintf_r+0x4e>
 8011274:	f04f 30ff 	mov.w	r0, #4294967295
 8011278:	b01d      	add	sp, #116	@ 0x74
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	89ab      	ldrh	r3, [r5, #12]
 8011280:	0598      	lsls	r0, r3, #22
 8011282:	d4f7      	bmi.n	8011274 <_vfiprintf_r+0x44>
 8011284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011286:	f7ff fea1 	bl	8010fcc <__retarget_lock_release_recursive>
 801128a:	e7f3      	b.n	8011274 <_vfiprintf_r+0x44>
 801128c:	2300      	movs	r3, #0
 801128e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011290:	2320      	movs	r3, #32
 8011292:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011296:	f8cd 800c 	str.w	r8, [sp, #12]
 801129a:	2330      	movs	r3, #48	@ 0x30
 801129c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801144c <_vfiprintf_r+0x21c>
 80112a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112a4:	f04f 0901 	mov.w	r9, #1
 80112a8:	4623      	mov	r3, r4
 80112aa:	469a      	mov	sl, r3
 80112ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112b0:	b10a      	cbz	r2, 80112b6 <_vfiprintf_r+0x86>
 80112b2:	2a25      	cmp	r2, #37	@ 0x25
 80112b4:	d1f9      	bne.n	80112aa <_vfiprintf_r+0x7a>
 80112b6:	ebba 0b04 	subs.w	fp, sl, r4
 80112ba:	d00b      	beq.n	80112d4 <_vfiprintf_r+0xa4>
 80112bc:	465b      	mov	r3, fp
 80112be:	4622      	mov	r2, r4
 80112c0:	4629      	mov	r1, r5
 80112c2:	4630      	mov	r0, r6
 80112c4:	f7ff ffa1 	bl	801120a <__sfputs_r>
 80112c8:	3001      	adds	r0, #1
 80112ca:	f000 80a7 	beq.w	801141c <_vfiprintf_r+0x1ec>
 80112ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112d0:	445a      	add	r2, fp
 80112d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80112d4:	f89a 3000 	ldrb.w	r3, [sl]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	f000 809f 	beq.w	801141c <_vfiprintf_r+0x1ec>
 80112de:	2300      	movs	r3, #0
 80112e0:	f04f 32ff 	mov.w	r2, #4294967295
 80112e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112e8:	f10a 0a01 	add.w	sl, sl, #1
 80112ec:	9304      	str	r3, [sp, #16]
 80112ee:	9307      	str	r3, [sp, #28]
 80112f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80112f6:	4654      	mov	r4, sl
 80112f8:	2205      	movs	r2, #5
 80112fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112fe:	4853      	ldr	r0, [pc, #332]	@ (801144c <_vfiprintf_r+0x21c>)
 8011300:	f7ee ff3e 	bl	8000180 <memchr>
 8011304:	9a04      	ldr	r2, [sp, #16]
 8011306:	b9d8      	cbnz	r0, 8011340 <_vfiprintf_r+0x110>
 8011308:	06d1      	lsls	r1, r2, #27
 801130a:	bf44      	itt	mi
 801130c:	2320      	movmi	r3, #32
 801130e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011312:	0713      	lsls	r3, r2, #28
 8011314:	bf44      	itt	mi
 8011316:	232b      	movmi	r3, #43	@ 0x2b
 8011318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801131c:	f89a 3000 	ldrb.w	r3, [sl]
 8011320:	2b2a      	cmp	r3, #42	@ 0x2a
 8011322:	d015      	beq.n	8011350 <_vfiprintf_r+0x120>
 8011324:	9a07      	ldr	r2, [sp, #28]
 8011326:	4654      	mov	r4, sl
 8011328:	2000      	movs	r0, #0
 801132a:	f04f 0c0a 	mov.w	ip, #10
 801132e:	4621      	mov	r1, r4
 8011330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011334:	3b30      	subs	r3, #48	@ 0x30
 8011336:	2b09      	cmp	r3, #9
 8011338:	d94b      	bls.n	80113d2 <_vfiprintf_r+0x1a2>
 801133a:	b1b0      	cbz	r0, 801136a <_vfiprintf_r+0x13a>
 801133c:	9207      	str	r2, [sp, #28]
 801133e:	e014      	b.n	801136a <_vfiprintf_r+0x13a>
 8011340:	eba0 0308 	sub.w	r3, r0, r8
 8011344:	fa09 f303 	lsl.w	r3, r9, r3
 8011348:	4313      	orrs	r3, r2
 801134a:	9304      	str	r3, [sp, #16]
 801134c:	46a2      	mov	sl, r4
 801134e:	e7d2      	b.n	80112f6 <_vfiprintf_r+0xc6>
 8011350:	9b03      	ldr	r3, [sp, #12]
 8011352:	1d19      	adds	r1, r3, #4
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	9103      	str	r1, [sp, #12]
 8011358:	2b00      	cmp	r3, #0
 801135a:	bfbb      	ittet	lt
 801135c:	425b      	neglt	r3, r3
 801135e:	f042 0202 	orrlt.w	r2, r2, #2
 8011362:	9307      	strge	r3, [sp, #28]
 8011364:	9307      	strlt	r3, [sp, #28]
 8011366:	bfb8      	it	lt
 8011368:	9204      	strlt	r2, [sp, #16]
 801136a:	7823      	ldrb	r3, [r4, #0]
 801136c:	2b2e      	cmp	r3, #46	@ 0x2e
 801136e:	d10a      	bne.n	8011386 <_vfiprintf_r+0x156>
 8011370:	7863      	ldrb	r3, [r4, #1]
 8011372:	2b2a      	cmp	r3, #42	@ 0x2a
 8011374:	d132      	bne.n	80113dc <_vfiprintf_r+0x1ac>
 8011376:	9b03      	ldr	r3, [sp, #12]
 8011378:	1d1a      	adds	r2, r3, #4
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	9203      	str	r2, [sp, #12]
 801137e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011382:	3402      	adds	r4, #2
 8011384:	9305      	str	r3, [sp, #20]
 8011386:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801145c <_vfiprintf_r+0x22c>
 801138a:	7821      	ldrb	r1, [r4, #0]
 801138c:	2203      	movs	r2, #3
 801138e:	4650      	mov	r0, sl
 8011390:	f7ee fef6 	bl	8000180 <memchr>
 8011394:	b138      	cbz	r0, 80113a6 <_vfiprintf_r+0x176>
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	eba0 000a 	sub.w	r0, r0, sl
 801139c:	2240      	movs	r2, #64	@ 0x40
 801139e:	4082      	lsls	r2, r0
 80113a0:	4313      	orrs	r3, r2
 80113a2:	3401      	adds	r4, #1
 80113a4:	9304      	str	r3, [sp, #16]
 80113a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113aa:	4829      	ldr	r0, [pc, #164]	@ (8011450 <_vfiprintf_r+0x220>)
 80113ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113b0:	2206      	movs	r2, #6
 80113b2:	f7ee fee5 	bl	8000180 <memchr>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d03f      	beq.n	801143a <_vfiprintf_r+0x20a>
 80113ba:	4b26      	ldr	r3, [pc, #152]	@ (8011454 <_vfiprintf_r+0x224>)
 80113bc:	bb1b      	cbnz	r3, 8011406 <_vfiprintf_r+0x1d6>
 80113be:	9b03      	ldr	r3, [sp, #12]
 80113c0:	3307      	adds	r3, #7
 80113c2:	f023 0307 	bic.w	r3, r3, #7
 80113c6:	3308      	adds	r3, #8
 80113c8:	9303      	str	r3, [sp, #12]
 80113ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113cc:	443b      	add	r3, r7
 80113ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80113d0:	e76a      	b.n	80112a8 <_vfiprintf_r+0x78>
 80113d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80113d6:	460c      	mov	r4, r1
 80113d8:	2001      	movs	r0, #1
 80113da:	e7a8      	b.n	801132e <_vfiprintf_r+0xfe>
 80113dc:	2300      	movs	r3, #0
 80113de:	3401      	adds	r4, #1
 80113e0:	9305      	str	r3, [sp, #20]
 80113e2:	4619      	mov	r1, r3
 80113e4:	f04f 0c0a 	mov.w	ip, #10
 80113e8:	4620      	mov	r0, r4
 80113ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113ee:	3a30      	subs	r2, #48	@ 0x30
 80113f0:	2a09      	cmp	r2, #9
 80113f2:	d903      	bls.n	80113fc <_vfiprintf_r+0x1cc>
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d0c6      	beq.n	8011386 <_vfiprintf_r+0x156>
 80113f8:	9105      	str	r1, [sp, #20]
 80113fa:	e7c4      	b.n	8011386 <_vfiprintf_r+0x156>
 80113fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8011400:	4604      	mov	r4, r0
 8011402:	2301      	movs	r3, #1
 8011404:	e7f0      	b.n	80113e8 <_vfiprintf_r+0x1b8>
 8011406:	ab03      	add	r3, sp, #12
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	462a      	mov	r2, r5
 801140c:	4b12      	ldr	r3, [pc, #72]	@ (8011458 <_vfiprintf_r+0x228>)
 801140e:	a904      	add	r1, sp, #16
 8011410:	4630      	mov	r0, r6
 8011412:	f3af 8000 	nop.w
 8011416:	4607      	mov	r7, r0
 8011418:	1c78      	adds	r0, r7, #1
 801141a:	d1d6      	bne.n	80113ca <_vfiprintf_r+0x19a>
 801141c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801141e:	07d9      	lsls	r1, r3, #31
 8011420:	d405      	bmi.n	801142e <_vfiprintf_r+0x1fe>
 8011422:	89ab      	ldrh	r3, [r5, #12]
 8011424:	059a      	lsls	r2, r3, #22
 8011426:	d402      	bmi.n	801142e <_vfiprintf_r+0x1fe>
 8011428:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801142a:	f7ff fdcf 	bl	8010fcc <__retarget_lock_release_recursive>
 801142e:	89ab      	ldrh	r3, [r5, #12]
 8011430:	065b      	lsls	r3, r3, #25
 8011432:	f53f af1f 	bmi.w	8011274 <_vfiprintf_r+0x44>
 8011436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011438:	e71e      	b.n	8011278 <_vfiprintf_r+0x48>
 801143a:	ab03      	add	r3, sp, #12
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	462a      	mov	r2, r5
 8011440:	4b05      	ldr	r3, [pc, #20]	@ (8011458 <_vfiprintf_r+0x228>)
 8011442:	a904      	add	r1, sp, #16
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f879 	bl	801153c <_printf_i>
 801144a:	e7e4      	b.n	8011416 <_vfiprintf_r+0x1e6>
 801144c:	08011da0 	.word	0x08011da0
 8011450:	08011daa 	.word	0x08011daa
 8011454:	00000000 	.word	0x00000000
 8011458:	0801120b 	.word	0x0801120b
 801145c:	08011da6 	.word	0x08011da6

08011460 <_printf_common>:
 8011460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011464:	4616      	mov	r6, r2
 8011466:	4698      	mov	r8, r3
 8011468:	688a      	ldr	r2, [r1, #8]
 801146a:	690b      	ldr	r3, [r1, #16]
 801146c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011470:	4293      	cmp	r3, r2
 8011472:	bfb8      	it	lt
 8011474:	4613      	movlt	r3, r2
 8011476:	6033      	str	r3, [r6, #0]
 8011478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801147c:	4607      	mov	r7, r0
 801147e:	460c      	mov	r4, r1
 8011480:	b10a      	cbz	r2, 8011486 <_printf_common+0x26>
 8011482:	3301      	adds	r3, #1
 8011484:	6033      	str	r3, [r6, #0]
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	0699      	lsls	r1, r3, #26
 801148a:	bf42      	ittt	mi
 801148c:	6833      	ldrmi	r3, [r6, #0]
 801148e:	3302      	addmi	r3, #2
 8011490:	6033      	strmi	r3, [r6, #0]
 8011492:	6825      	ldr	r5, [r4, #0]
 8011494:	f015 0506 	ands.w	r5, r5, #6
 8011498:	d106      	bne.n	80114a8 <_printf_common+0x48>
 801149a:	f104 0a19 	add.w	sl, r4, #25
 801149e:	68e3      	ldr	r3, [r4, #12]
 80114a0:	6832      	ldr	r2, [r6, #0]
 80114a2:	1a9b      	subs	r3, r3, r2
 80114a4:	42ab      	cmp	r3, r5
 80114a6:	dc26      	bgt.n	80114f6 <_printf_common+0x96>
 80114a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114ac:	6822      	ldr	r2, [r4, #0]
 80114ae:	3b00      	subs	r3, #0
 80114b0:	bf18      	it	ne
 80114b2:	2301      	movne	r3, #1
 80114b4:	0692      	lsls	r2, r2, #26
 80114b6:	d42b      	bmi.n	8011510 <_printf_common+0xb0>
 80114b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114bc:	4641      	mov	r1, r8
 80114be:	4638      	mov	r0, r7
 80114c0:	47c8      	blx	r9
 80114c2:	3001      	adds	r0, #1
 80114c4:	d01e      	beq.n	8011504 <_printf_common+0xa4>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	6922      	ldr	r2, [r4, #16]
 80114ca:	f003 0306 	and.w	r3, r3, #6
 80114ce:	2b04      	cmp	r3, #4
 80114d0:	bf02      	ittt	eq
 80114d2:	68e5      	ldreq	r5, [r4, #12]
 80114d4:	6833      	ldreq	r3, [r6, #0]
 80114d6:	1aed      	subeq	r5, r5, r3
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	bf0c      	ite	eq
 80114dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114e0:	2500      	movne	r5, #0
 80114e2:	4293      	cmp	r3, r2
 80114e4:	bfc4      	itt	gt
 80114e6:	1a9b      	subgt	r3, r3, r2
 80114e8:	18ed      	addgt	r5, r5, r3
 80114ea:	2600      	movs	r6, #0
 80114ec:	341a      	adds	r4, #26
 80114ee:	42b5      	cmp	r5, r6
 80114f0:	d11a      	bne.n	8011528 <_printf_common+0xc8>
 80114f2:	2000      	movs	r0, #0
 80114f4:	e008      	b.n	8011508 <_printf_common+0xa8>
 80114f6:	2301      	movs	r3, #1
 80114f8:	4652      	mov	r2, sl
 80114fa:	4641      	mov	r1, r8
 80114fc:	4638      	mov	r0, r7
 80114fe:	47c8      	blx	r9
 8011500:	3001      	adds	r0, #1
 8011502:	d103      	bne.n	801150c <_printf_common+0xac>
 8011504:	f04f 30ff 	mov.w	r0, #4294967295
 8011508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801150c:	3501      	adds	r5, #1
 801150e:	e7c6      	b.n	801149e <_printf_common+0x3e>
 8011510:	18e1      	adds	r1, r4, r3
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	2030      	movs	r0, #48	@ 0x30
 8011516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801151a:	4422      	add	r2, r4
 801151c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011524:	3302      	adds	r3, #2
 8011526:	e7c7      	b.n	80114b8 <_printf_common+0x58>
 8011528:	2301      	movs	r3, #1
 801152a:	4622      	mov	r2, r4
 801152c:	4641      	mov	r1, r8
 801152e:	4638      	mov	r0, r7
 8011530:	47c8      	blx	r9
 8011532:	3001      	adds	r0, #1
 8011534:	d0e6      	beq.n	8011504 <_printf_common+0xa4>
 8011536:	3601      	adds	r6, #1
 8011538:	e7d9      	b.n	80114ee <_printf_common+0x8e>
	...

0801153c <_printf_i>:
 801153c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011540:	7e0f      	ldrb	r7, [r1, #24]
 8011542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011544:	2f78      	cmp	r7, #120	@ 0x78
 8011546:	4691      	mov	r9, r2
 8011548:	4680      	mov	r8, r0
 801154a:	460c      	mov	r4, r1
 801154c:	469a      	mov	sl, r3
 801154e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011552:	d807      	bhi.n	8011564 <_printf_i+0x28>
 8011554:	2f62      	cmp	r7, #98	@ 0x62
 8011556:	d80a      	bhi.n	801156e <_printf_i+0x32>
 8011558:	2f00      	cmp	r7, #0
 801155a:	f000 80d2 	beq.w	8011702 <_printf_i+0x1c6>
 801155e:	2f58      	cmp	r7, #88	@ 0x58
 8011560:	f000 80b9 	beq.w	80116d6 <_printf_i+0x19a>
 8011564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801156c:	e03a      	b.n	80115e4 <_printf_i+0xa8>
 801156e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011572:	2b15      	cmp	r3, #21
 8011574:	d8f6      	bhi.n	8011564 <_printf_i+0x28>
 8011576:	a101      	add	r1, pc, #4	@ (adr r1, 801157c <_printf_i+0x40>)
 8011578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801157c:	080115d5 	.word	0x080115d5
 8011580:	080115e9 	.word	0x080115e9
 8011584:	08011565 	.word	0x08011565
 8011588:	08011565 	.word	0x08011565
 801158c:	08011565 	.word	0x08011565
 8011590:	08011565 	.word	0x08011565
 8011594:	080115e9 	.word	0x080115e9
 8011598:	08011565 	.word	0x08011565
 801159c:	08011565 	.word	0x08011565
 80115a0:	08011565 	.word	0x08011565
 80115a4:	08011565 	.word	0x08011565
 80115a8:	080116e9 	.word	0x080116e9
 80115ac:	08011613 	.word	0x08011613
 80115b0:	080116a3 	.word	0x080116a3
 80115b4:	08011565 	.word	0x08011565
 80115b8:	08011565 	.word	0x08011565
 80115bc:	0801170b 	.word	0x0801170b
 80115c0:	08011565 	.word	0x08011565
 80115c4:	08011613 	.word	0x08011613
 80115c8:	08011565 	.word	0x08011565
 80115cc:	08011565 	.word	0x08011565
 80115d0:	080116ab 	.word	0x080116ab
 80115d4:	6833      	ldr	r3, [r6, #0]
 80115d6:	1d1a      	adds	r2, r3, #4
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6032      	str	r2, [r6, #0]
 80115dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115e4:	2301      	movs	r3, #1
 80115e6:	e09d      	b.n	8011724 <_printf_i+0x1e8>
 80115e8:	6833      	ldr	r3, [r6, #0]
 80115ea:	6820      	ldr	r0, [r4, #0]
 80115ec:	1d19      	adds	r1, r3, #4
 80115ee:	6031      	str	r1, [r6, #0]
 80115f0:	0606      	lsls	r6, r0, #24
 80115f2:	d501      	bpl.n	80115f8 <_printf_i+0xbc>
 80115f4:	681d      	ldr	r5, [r3, #0]
 80115f6:	e003      	b.n	8011600 <_printf_i+0xc4>
 80115f8:	0645      	lsls	r5, r0, #25
 80115fa:	d5fb      	bpl.n	80115f4 <_printf_i+0xb8>
 80115fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011600:	2d00      	cmp	r5, #0
 8011602:	da03      	bge.n	801160c <_printf_i+0xd0>
 8011604:	232d      	movs	r3, #45	@ 0x2d
 8011606:	426d      	negs	r5, r5
 8011608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801160c:	4859      	ldr	r0, [pc, #356]	@ (8011774 <_printf_i+0x238>)
 801160e:	230a      	movs	r3, #10
 8011610:	e011      	b.n	8011636 <_printf_i+0xfa>
 8011612:	6821      	ldr	r1, [r4, #0]
 8011614:	6833      	ldr	r3, [r6, #0]
 8011616:	0608      	lsls	r0, r1, #24
 8011618:	f853 5b04 	ldr.w	r5, [r3], #4
 801161c:	d402      	bmi.n	8011624 <_printf_i+0xe8>
 801161e:	0649      	lsls	r1, r1, #25
 8011620:	bf48      	it	mi
 8011622:	b2ad      	uxthmi	r5, r5
 8011624:	2f6f      	cmp	r7, #111	@ 0x6f
 8011626:	4853      	ldr	r0, [pc, #332]	@ (8011774 <_printf_i+0x238>)
 8011628:	6033      	str	r3, [r6, #0]
 801162a:	bf14      	ite	ne
 801162c:	230a      	movne	r3, #10
 801162e:	2308      	moveq	r3, #8
 8011630:	2100      	movs	r1, #0
 8011632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011636:	6866      	ldr	r6, [r4, #4]
 8011638:	60a6      	str	r6, [r4, #8]
 801163a:	2e00      	cmp	r6, #0
 801163c:	bfa2      	ittt	ge
 801163e:	6821      	ldrge	r1, [r4, #0]
 8011640:	f021 0104 	bicge.w	r1, r1, #4
 8011644:	6021      	strge	r1, [r4, #0]
 8011646:	b90d      	cbnz	r5, 801164c <_printf_i+0x110>
 8011648:	2e00      	cmp	r6, #0
 801164a:	d04b      	beq.n	80116e4 <_printf_i+0x1a8>
 801164c:	4616      	mov	r6, r2
 801164e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011652:	fb03 5711 	mls	r7, r3, r1, r5
 8011656:	5dc7      	ldrb	r7, [r0, r7]
 8011658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801165c:	462f      	mov	r7, r5
 801165e:	42bb      	cmp	r3, r7
 8011660:	460d      	mov	r5, r1
 8011662:	d9f4      	bls.n	801164e <_printf_i+0x112>
 8011664:	2b08      	cmp	r3, #8
 8011666:	d10b      	bne.n	8011680 <_printf_i+0x144>
 8011668:	6823      	ldr	r3, [r4, #0]
 801166a:	07df      	lsls	r7, r3, #31
 801166c:	d508      	bpl.n	8011680 <_printf_i+0x144>
 801166e:	6923      	ldr	r3, [r4, #16]
 8011670:	6861      	ldr	r1, [r4, #4]
 8011672:	4299      	cmp	r1, r3
 8011674:	bfde      	ittt	le
 8011676:	2330      	movle	r3, #48	@ 0x30
 8011678:	f806 3c01 	strble.w	r3, [r6, #-1]
 801167c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011680:	1b92      	subs	r2, r2, r6
 8011682:	6122      	str	r2, [r4, #16]
 8011684:	f8cd a000 	str.w	sl, [sp]
 8011688:	464b      	mov	r3, r9
 801168a:	aa03      	add	r2, sp, #12
 801168c:	4621      	mov	r1, r4
 801168e:	4640      	mov	r0, r8
 8011690:	f7ff fee6 	bl	8011460 <_printf_common>
 8011694:	3001      	adds	r0, #1
 8011696:	d14a      	bne.n	801172e <_printf_i+0x1f2>
 8011698:	f04f 30ff 	mov.w	r0, #4294967295
 801169c:	b004      	add	sp, #16
 801169e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	f043 0320 	orr.w	r3, r3, #32
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	4833      	ldr	r0, [pc, #204]	@ (8011778 <_printf_i+0x23c>)
 80116ac:	2778      	movs	r7, #120	@ 0x78
 80116ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116b2:	6823      	ldr	r3, [r4, #0]
 80116b4:	6831      	ldr	r1, [r6, #0]
 80116b6:	061f      	lsls	r7, r3, #24
 80116b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80116bc:	d402      	bmi.n	80116c4 <_printf_i+0x188>
 80116be:	065f      	lsls	r7, r3, #25
 80116c0:	bf48      	it	mi
 80116c2:	b2ad      	uxthmi	r5, r5
 80116c4:	6031      	str	r1, [r6, #0]
 80116c6:	07d9      	lsls	r1, r3, #31
 80116c8:	bf44      	itt	mi
 80116ca:	f043 0320 	orrmi.w	r3, r3, #32
 80116ce:	6023      	strmi	r3, [r4, #0]
 80116d0:	b11d      	cbz	r5, 80116da <_printf_i+0x19e>
 80116d2:	2310      	movs	r3, #16
 80116d4:	e7ac      	b.n	8011630 <_printf_i+0xf4>
 80116d6:	4827      	ldr	r0, [pc, #156]	@ (8011774 <_printf_i+0x238>)
 80116d8:	e7e9      	b.n	80116ae <_printf_i+0x172>
 80116da:	6823      	ldr	r3, [r4, #0]
 80116dc:	f023 0320 	bic.w	r3, r3, #32
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	e7f6      	b.n	80116d2 <_printf_i+0x196>
 80116e4:	4616      	mov	r6, r2
 80116e6:	e7bd      	b.n	8011664 <_printf_i+0x128>
 80116e8:	6833      	ldr	r3, [r6, #0]
 80116ea:	6825      	ldr	r5, [r4, #0]
 80116ec:	6961      	ldr	r1, [r4, #20]
 80116ee:	1d18      	adds	r0, r3, #4
 80116f0:	6030      	str	r0, [r6, #0]
 80116f2:	062e      	lsls	r6, r5, #24
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	d501      	bpl.n	80116fc <_printf_i+0x1c0>
 80116f8:	6019      	str	r1, [r3, #0]
 80116fa:	e002      	b.n	8011702 <_printf_i+0x1c6>
 80116fc:	0668      	lsls	r0, r5, #25
 80116fe:	d5fb      	bpl.n	80116f8 <_printf_i+0x1bc>
 8011700:	8019      	strh	r1, [r3, #0]
 8011702:	2300      	movs	r3, #0
 8011704:	6123      	str	r3, [r4, #16]
 8011706:	4616      	mov	r6, r2
 8011708:	e7bc      	b.n	8011684 <_printf_i+0x148>
 801170a:	6833      	ldr	r3, [r6, #0]
 801170c:	1d1a      	adds	r2, r3, #4
 801170e:	6032      	str	r2, [r6, #0]
 8011710:	681e      	ldr	r6, [r3, #0]
 8011712:	6862      	ldr	r2, [r4, #4]
 8011714:	2100      	movs	r1, #0
 8011716:	4630      	mov	r0, r6
 8011718:	f7ee fd32 	bl	8000180 <memchr>
 801171c:	b108      	cbz	r0, 8011722 <_printf_i+0x1e6>
 801171e:	1b80      	subs	r0, r0, r6
 8011720:	6060      	str	r0, [r4, #4]
 8011722:	6863      	ldr	r3, [r4, #4]
 8011724:	6123      	str	r3, [r4, #16]
 8011726:	2300      	movs	r3, #0
 8011728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801172c:	e7aa      	b.n	8011684 <_printf_i+0x148>
 801172e:	6923      	ldr	r3, [r4, #16]
 8011730:	4632      	mov	r2, r6
 8011732:	4649      	mov	r1, r9
 8011734:	4640      	mov	r0, r8
 8011736:	47d0      	blx	sl
 8011738:	3001      	adds	r0, #1
 801173a:	d0ad      	beq.n	8011698 <_printf_i+0x15c>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	079b      	lsls	r3, r3, #30
 8011740:	d413      	bmi.n	801176a <_printf_i+0x22e>
 8011742:	68e0      	ldr	r0, [r4, #12]
 8011744:	9b03      	ldr	r3, [sp, #12]
 8011746:	4298      	cmp	r0, r3
 8011748:	bfb8      	it	lt
 801174a:	4618      	movlt	r0, r3
 801174c:	e7a6      	b.n	801169c <_printf_i+0x160>
 801174e:	2301      	movs	r3, #1
 8011750:	4632      	mov	r2, r6
 8011752:	4649      	mov	r1, r9
 8011754:	4640      	mov	r0, r8
 8011756:	47d0      	blx	sl
 8011758:	3001      	adds	r0, #1
 801175a:	d09d      	beq.n	8011698 <_printf_i+0x15c>
 801175c:	3501      	adds	r5, #1
 801175e:	68e3      	ldr	r3, [r4, #12]
 8011760:	9903      	ldr	r1, [sp, #12]
 8011762:	1a5b      	subs	r3, r3, r1
 8011764:	42ab      	cmp	r3, r5
 8011766:	dcf2      	bgt.n	801174e <_printf_i+0x212>
 8011768:	e7eb      	b.n	8011742 <_printf_i+0x206>
 801176a:	2500      	movs	r5, #0
 801176c:	f104 0619 	add.w	r6, r4, #25
 8011770:	e7f5      	b.n	801175e <_printf_i+0x222>
 8011772:	bf00      	nop
 8011774:	08011db1 	.word	0x08011db1
 8011778:	08011dc2 	.word	0x08011dc2

0801177c <__sflush_r>:
 801177c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011784:	0716      	lsls	r6, r2, #28
 8011786:	4605      	mov	r5, r0
 8011788:	460c      	mov	r4, r1
 801178a:	d454      	bmi.n	8011836 <__sflush_r+0xba>
 801178c:	684b      	ldr	r3, [r1, #4]
 801178e:	2b00      	cmp	r3, #0
 8011790:	dc02      	bgt.n	8011798 <__sflush_r+0x1c>
 8011792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011794:	2b00      	cmp	r3, #0
 8011796:	dd48      	ble.n	801182a <__sflush_r+0xae>
 8011798:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801179a:	2e00      	cmp	r6, #0
 801179c:	d045      	beq.n	801182a <__sflush_r+0xae>
 801179e:	2300      	movs	r3, #0
 80117a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117a4:	682f      	ldr	r7, [r5, #0]
 80117a6:	6a21      	ldr	r1, [r4, #32]
 80117a8:	602b      	str	r3, [r5, #0]
 80117aa:	d030      	beq.n	801180e <__sflush_r+0x92>
 80117ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117ae:	89a3      	ldrh	r3, [r4, #12]
 80117b0:	0759      	lsls	r1, r3, #29
 80117b2:	d505      	bpl.n	80117c0 <__sflush_r+0x44>
 80117b4:	6863      	ldr	r3, [r4, #4]
 80117b6:	1ad2      	subs	r2, r2, r3
 80117b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117ba:	b10b      	cbz	r3, 80117c0 <__sflush_r+0x44>
 80117bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117be:	1ad2      	subs	r2, r2, r3
 80117c0:	2300      	movs	r3, #0
 80117c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117c4:	6a21      	ldr	r1, [r4, #32]
 80117c6:	4628      	mov	r0, r5
 80117c8:	47b0      	blx	r6
 80117ca:	1c43      	adds	r3, r0, #1
 80117cc:	89a3      	ldrh	r3, [r4, #12]
 80117ce:	d106      	bne.n	80117de <__sflush_r+0x62>
 80117d0:	6829      	ldr	r1, [r5, #0]
 80117d2:	291d      	cmp	r1, #29
 80117d4:	d82b      	bhi.n	801182e <__sflush_r+0xb2>
 80117d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011880 <__sflush_r+0x104>)
 80117d8:	410a      	asrs	r2, r1
 80117da:	07d6      	lsls	r6, r2, #31
 80117dc:	d427      	bmi.n	801182e <__sflush_r+0xb2>
 80117de:	2200      	movs	r2, #0
 80117e0:	6062      	str	r2, [r4, #4]
 80117e2:	04d9      	lsls	r1, r3, #19
 80117e4:	6922      	ldr	r2, [r4, #16]
 80117e6:	6022      	str	r2, [r4, #0]
 80117e8:	d504      	bpl.n	80117f4 <__sflush_r+0x78>
 80117ea:	1c42      	adds	r2, r0, #1
 80117ec:	d101      	bne.n	80117f2 <__sflush_r+0x76>
 80117ee:	682b      	ldr	r3, [r5, #0]
 80117f0:	b903      	cbnz	r3, 80117f4 <__sflush_r+0x78>
 80117f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80117f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117f6:	602f      	str	r7, [r5, #0]
 80117f8:	b1b9      	cbz	r1, 801182a <__sflush_r+0xae>
 80117fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117fe:	4299      	cmp	r1, r3
 8011800:	d002      	beq.n	8011808 <__sflush_r+0x8c>
 8011802:	4628      	mov	r0, r5
 8011804:	f7ff fbf2 	bl	8010fec <_free_r>
 8011808:	2300      	movs	r3, #0
 801180a:	6363      	str	r3, [r4, #52]	@ 0x34
 801180c:	e00d      	b.n	801182a <__sflush_r+0xae>
 801180e:	2301      	movs	r3, #1
 8011810:	4628      	mov	r0, r5
 8011812:	47b0      	blx	r6
 8011814:	4602      	mov	r2, r0
 8011816:	1c50      	adds	r0, r2, #1
 8011818:	d1c9      	bne.n	80117ae <__sflush_r+0x32>
 801181a:	682b      	ldr	r3, [r5, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0c6      	beq.n	80117ae <__sflush_r+0x32>
 8011820:	2b1d      	cmp	r3, #29
 8011822:	d001      	beq.n	8011828 <__sflush_r+0xac>
 8011824:	2b16      	cmp	r3, #22
 8011826:	d11e      	bne.n	8011866 <__sflush_r+0xea>
 8011828:	602f      	str	r7, [r5, #0]
 801182a:	2000      	movs	r0, #0
 801182c:	e022      	b.n	8011874 <__sflush_r+0xf8>
 801182e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011832:	b21b      	sxth	r3, r3
 8011834:	e01b      	b.n	801186e <__sflush_r+0xf2>
 8011836:	690f      	ldr	r7, [r1, #16]
 8011838:	2f00      	cmp	r7, #0
 801183a:	d0f6      	beq.n	801182a <__sflush_r+0xae>
 801183c:	0793      	lsls	r3, r2, #30
 801183e:	680e      	ldr	r6, [r1, #0]
 8011840:	bf08      	it	eq
 8011842:	694b      	ldreq	r3, [r1, #20]
 8011844:	600f      	str	r7, [r1, #0]
 8011846:	bf18      	it	ne
 8011848:	2300      	movne	r3, #0
 801184a:	eba6 0807 	sub.w	r8, r6, r7
 801184e:	608b      	str	r3, [r1, #8]
 8011850:	f1b8 0f00 	cmp.w	r8, #0
 8011854:	dde9      	ble.n	801182a <__sflush_r+0xae>
 8011856:	6a21      	ldr	r1, [r4, #32]
 8011858:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801185a:	4643      	mov	r3, r8
 801185c:	463a      	mov	r2, r7
 801185e:	4628      	mov	r0, r5
 8011860:	47b0      	blx	r6
 8011862:	2800      	cmp	r0, #0
 8011864:	dc08      	bgt.n	8011878 <__sflush_r+0xfc>
 8011866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801186a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801186e:	81a3      	strh	r3, [r4, #12]
 8011870:	f04f 30ff 	mov.w	r0, #4294967295
 8011874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011878:	4407      	add	r7, r0
 801187a:	eba8 0800 	sub.w	r8, r8, r0
 801187e:	e7e7      	b.n	8011850 <__sflush_r+0xd4>
 8011880:	dfbffffe 	.word	0xdfbffffe

08011884 <_fflush_r>:
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	690b      	ldr	r3, [r1, #16]
 8011888:	4605      	mov	r5, r0
 801188a:	460c      	mov	r4, r1
 801188c:	b913      	cbnz	r3, 8011894 <_fflush_r+0x10>
 801188e:	2500      	movs	r5, #0
 8011890:	4628      	mov	r0, r5
 8011892:	bd38      	pop	{r3, r4, r5, pc}
 8011894:	b118      	cbz	r0, 801189e <_fflush_r+0x1a>
 8011896:	6a03      	ldr	r3, [r0, #32]
 8011898:	b90b      	cbnz	r3, 801189e <_fflush_r+0x1a>
 801189a:	f7ff fa33 	bl	8010d04 <__sinit>
 801189e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d0f3      	beq.n	801188e <_fflush_r+0xa>
 80118a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118a8:	07d0      	lsls	r0, r2, #31
 80118aa:	d404      	bmi.n	80118b6 <_fflush_r+0x32>
 80118ac:	0599      	lsls	r1, r3, #22
 80118ae:	d402      	bmi.n	80118b6 <_fflush_r+0x32>
 80118b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118b2:	f7ff fb8a 	bl	8010fca <__retarget_lock_acquire_recursive>
 80118b6:	4628      	mov	r0, r5
 80118b8:	4621      	mov	r1, r4
 80118ba:	f7ff ff5f 	bl	801177c <__sflush_r>
 80118be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118c0:	07da      	lsls	r2, r3, #31
 80118c2:	4605      	mov	r5, r0
 80118c4:	d4e4      	bmi.n	8011890 <_fflush_r+0xc>
 80118c6:	89a3      	ldrh	r3, [r4, #12]
 80118c8:	059b      	lsls	r3, r3, #22
 80118ca:	d4e1      	bmi.n	8011890 <_fflush_r+0xc>
 80118cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118ce:	f7ff fb7d 	bl	8010fcc <__retarget_lock_release_recursive>
 80118d2:	e7dd      	b.n	8011890 <_fflush_r+0xc>

080118d4 <_putc_r>:
 80118d4:	b570      	push	{r4, r5, r6, lr}
 80118d6:	460d      	mov	r5, r1
 80118d8:	4614      	mov	r4, r2
 80118da:	4606      	mov	r6, r0
 80118dc:	b118      	cbz	r0, 80118e6 <_putc_r+0x12>
 80118de:	6a03      	ldr	r3, [r0, #32]
 80118e0:	b90b      	cbnz	r3, 80118e6 <_putc_r+0x12>
 80118e2:	f7ff fa0f 	bl	8010d04 <__sinit>
 80118e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118e8:	07d8      	lsls	r0, r3, #31
 80118ea:	d405      	bmi.n	80118f8 <_putc_r+0x24>
 80118ec:	89a3      	ldrh	r3, [r4, #12]
 80118ee:	0599      	lsls	r1, r3, #22
 80118f0:	d402      	bmi.n	80118f8 <_putc_r+0x24>
 80118f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118f4:	f7ff fb69 	bl	8010fca <__retarget_lock_acquire_recursive>
 80118f8:	68a3      	ldr	r3, [r4, #8]
 80118fa:	3b01      	subs	r3, #1
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	60a3      	str	r3, [r4, #8]
 8011900:	da05      	bge.n	801190e <_putc_r+0x3a>
 8011902:	69a2      	ldr	r2, [r4, #24]
 8011904:	4293      	cmp	r3, r2
 8011906:	db12      	blt.n	801192e <_putc_r+0x5a>
 8011908:	b2eb      	uxtb	r3, r5
 801190a:	2b0a      	cmp	r3, #10
 801190c:	d00f      	beq.n	801192e <_putc_r+0x5a>
 801190e:	6823      	ldr	r3, [r4, #0]
 8011910:	1c5a      	adds	r2, r3, #1
 8011912:	6022      	str	r2, [r4, #0]
 8011914:	701d      	strb	r5, [r3, #0]
 8011916:	b2ed      	uxtb	r5, r5
 8011918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801191a:	07da      	lsls	r2, r3, #31
 801191c:	d405      	bmi.n	801192a <_putc_r+0x56>
 801191e:	89a3      	ldrh	r3, [r4, #12]
 8011920:	059b      	lsls	r3, r3, #22
 8011922:	d402      	bmi.n	801192a <_putc_r+0x56>
 8011924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011926:	f7ff fb51 	bl	8010fcc <__retarget_lock_release_recursive>
 801192a:	4628      	mov	r0, r5
 801192c:	bd70      	pop	{r4, r5, r6, pc}
 801192e:	4629      	mov	r1, r5
 8011930:	4622      	mov	r2, r4
 8011932:	4630      	mov	r0, r6
 8011934:	f000 f802 	bl	801193c <__swbuf_r>
 8011938:	4605      	mov	r5, r0
 801193a:	e7ed      	b.n	8011918 <_putc_r+0x44>

0801193c <__swbuf_r>:
 801193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193e:	460e      	mov	r6, r1
 8011940:	4614      	mov	r4, r2
 8011942:	4605      	mov	r5, r0
 8011944:	b118      	cbz	r0, 801194e <__swbuf_r+0x12>
 8011946:	6a03      	ldr	r3, [r0, #32]
 8011948:	b90b      	cbnz	r3, 801194e <__swbuf_r+0x12>
 801194a:	f7ff f9db 	bl	8010d04 <__sinit>
 801194e:	69a3      	ldr	r3, [r4, #24]
 8011950:	60a3      	str	r3, [r4, #8]
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	071a      	lsls	r2, r3, #28
 8011956:	d501      	bpl.n	801195c <__swbuf_r+0x20>
 8011958:	6923      	ldr	r3, [r4, #16]
 801195a:	b943      	cbnz	r3, 801196e <__swbuf_r+0x32>
 801195c:	4621      	mov	r1, r4
 801195e:	4628      	mov	r0, r5
 8011960:	f000 f82a 	bl	80119b8 <__swsetup_r>
 8011964:	b118      	cbz	r0, 801196e <__swbuf_r+0x32>
 8011966:	f04f 37ff 	mov.w	r7, #4294967295
 801196a:	4638      	mov	r0, r7
 801196c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801196e:	6823      	ldr	r3, [r4, #0]
 8011970:	6922      	ldr	r2, [r4, #16]
 8011972:	1a98      	subs	r0, r3, r2
 8011974:	6963      	ldr	r3, [r4, #20]
 8011976:	b2f6      	uxtb	r6, r6
 8011978:	4283      	cmp	r3, r0
 801197a:	4637      	mov	r7, r6
 801197c:	dc05      	bgt.n	801198a <__swbuf_r+0x4e>
 801197e:	4621      	mov	r1, r4
 8011980:	4628      	mov	r0, r5
 8011982:	f7ff ff7f 	bl	8011884 <_fflush_r>
 8011986:	2800      	cmp	r0, #0
 8011988:	d1ed      	bne.n	8011966 <__swbuf_r+0x2a>
 801198a:	68a3      	ldr	r3, [r4, #8]
 801198c:	3b01      	subs	r3, #1
 801198e:	60a3      	str	r3, [r4, #8]
 8011990:	6823      	ldr	r3, [r4, #0]
 8011992:	1c5a      	adds	r2, r3, #1
 8011994:	6022      	str	r2, [r4, #0]
 8011996:	701e      	strb	r6, [r3, #0]
 8011998:	6962      	ldr	r2, [r4, #20]
 801199a:	1c43      	adds	r3, r0, #1
 801199c:	429a      	cmp	r2, r3
 801199e:	d004      	beq.n	80119aa <__swbuf_r+0x6e>
 80119a0:	89a3      	ldrh	r3, [r4, #12]
 80119a2:	07db      	lsls	r3, r3, #31
 80119a4:	d5e1      	bpl.n	801196a <__swbuf_r+0x2e>
 80119a6:	2e0a      	cmp	r6, #10
 80119a8:	d1df      	bne.n	801196a <__swbuf_r+0x2e>
 80119aa:	4621      	mov	r1, r4
 80119ac:	4628      	mov	r0, r5
 80119ae:	f7ff ff69 	bl	8011884 <_fflush_r>
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d0d9      	beq.n	801196a <__swbuf_r+0x2e>
 80119b6:	e7d6      	b.n	8011966 <__swbuf_r+0x2a>

080119b8 <__swsetup_r>:
 80119b8:	b538      	push	{r3, r4, r5, lr}
 80119ba:	4b29      	ldr	r3, [pc, #164]	@ (8011a60 <__swsetup_r+0xa8>)
 80119bc:	4605      	mov	r5, r0
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	460c      	mov	r4, r1
 80119c2:	b118      	cbz	r0, 80119cc <__swsetup_r+0x14>
 80119c4:	6a03      	ldr	r3, [r0, #32]
 80119c6:	b90b      	cbnz	r3, 80119cc <__swsetup_r+0x14>
 80119c8:	f7ff f99c 	bl	8010d04 <__sinit>
 80119cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119d0:	0719      	lsls	r1, r3, #28
 80119d2:	d422      	bmi.n	8011a1a <__swsetup_r+0x62>
 80119d4:	06da      	lsls	r2, r3, #27
 80119d6:	d407      	bmi.n	80119e8 <__swsetup_r+0x30>
 80119d8:	2209      	movs	r2, #9
 80119da:	602a      	str	r2, [r5, #0]
 80119dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119e0:	81a3      	strh	r3, [r4, #12]
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295
 80119e6:	e033      	b.n	8011a50 <__swsetup_r+0x98>
 80119e8:	0758      	lsls	r0, r3, #29
 80119ea:	d512      	bpl.n	8011a12 <__swsetup_r+0x5a>
 80119ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119ee:	b141      	cbz	r1, 8011a02 <__swsetup_r+0x4a>
 80119f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119f4:	4299      	cmp	r1, r3
 80119f6:	d002      	beq.n	80119fe <__swsetup_r+0x46>
 80119f8:	4628      	mov	r0, r5
 80119fa:	f7ff faf7 	bl	8010fec <_free_r>
 80119fe:	2300      	movs	r3, #0
 8011a00:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a02:	89a3      	ldrh	r3, [r4, #12]
 8011a04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a08:	81a3      	strh	r3, [r4, #12]
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	6063      	str	r3, [r4, #4]
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	f043 0308 	orr.w	r3, r3, #8
 8011a18:	81a3      	strh	r3, [r4, #12]
 8011a1a:	6923      	ldr	r3, [r4, #16]
 8011a1c:	b94b      	cbnz	r3, 8011a32 <__swsetup_r+0x7a>
 8011a1e:	89a3      	ldrh	r3, [r4, #12]
 8011a20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a28:	d003      	beq.n	8011a32 <__swsetup_r+0x7a>
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f000 f84f 	bl	8011ad0 <__smakebuf_r>
 8011a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a36:	f013 0201 	ands.w	r2, r3, #1
 8011a3a:	d00a      	beq.n	8011a52 <__swsetup_r+0x9a>
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	60a2      	str	r2, [r4, #8]
 8011a40:	6962      	ldr	r2, [r4, #20]
 8011a42:	4252      	negs	r2, r2
 8011a44:	61a2      	str	r2, [r4, #24]
 8011a46:	6922      	ldr	r2, [r4, #16]
 8011a48:	b942      	cbnz	r2, 8011a5c <__swsetup_r+0xa4>
 8011a4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011a4e:	d1c5      	bne.n	80119dc <__swsetup_r+0x24>
 8011a50:	bd38      	pop	{r3, r4, r5, pc}
 8011a52:	0799      	lsls	r1, r3, #30
 8011a54:	bf58      	it	pl
 8011a56:	6962      	ldrpl	r2, [r4, #20]
 8011a58:	60a2      	str	r2, [r4, #8]
 8011a5a:	e7f4      	b.n	8011a46 <__swsetup_r+0x8e>
 8011a5c:	2000      	movs	r0, #0
 8011a5e:	e7f7      	b.n	8011a50 <__swsetup_r+0x98>
 8011a60:	20000120 	.word	0x20000120

08011a64 <_sbrk_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4d06      	ldr	r5, [pc, #24]	@ (8011a80 <_sbrk_r+0x1c>)
 8011a68:	2300      	movs	r3, #0
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	602b      	str	r3, [r5, #0]
 8011a70:	f7ef fb18 	bl	80010a4 <_sbrk>
 8011a74:	1c43      	adds	r3, r0, #1
 8011a76:	d102      	bne.n	8011a7e <_sbrk_r+0x1a>
 8011a78:	682b      	ldr	r3, [r5, #0]
 8011a7a:	b103      	cbz	r3, 8011a7e <_sbrk_r+0x1a>
 8011a7c:	6023      	str	r3, [r4, #0]
 8011a7e:	bd38      	pop	{r3, r4, r5, pc}
 8011a80:	2000ae80 	.word	0x2000ae80

08011a84 <__swhatbuf_r>:
 8011a84:	b570      	push	{r4, r5, r6, lr}
 8011a86:	460c      	mov	r4, r1
 8011a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a8c:	2900      	cmp	r1, #0
 8011a8e:	b096      	sub	sp, #88	@ 0x58
 8011a90:	4615      	mov	r5, r2
 8011a92:	461e      	mov	r6, r3
 8011a94:	da0d      	bge.n	8011ab2 <__swhatbuf_r+0x2e>
 8011a96:	89a3      	ldrh	r3, [r4, #12]
 8011a98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a9c:	f04f 0100 	mov.w	r1, #0
 8011aa0:	bf14      	ite	ne
 8011aa2:	2340      	movne	r3, #64	@ 0x40
 8011aa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	6031      	str	r1, [r6, #0]
 8011aac:	602b      	str	r3, [r5, #0]
 8011aae:	b016      	add	sp, #88	@ 0x58
 8011ab0:	bd70      	pop	{r4, r5, r6, pc}
 8011ab2:	466a      	mov	r2, sp
 8011ab4:	f000 f848 	bl	8011b48 <_fstat_r>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	dbec      	blt.n	8011a96 <__swhatbuf_r+0x12>
 8011abc:	9901      	ldr	r1, [sp, #4]
 8011abe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011ac2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011ac6:	4259      	negs	r1, r3
 8011ac8:	4159      	adcs	r1, r3
 8011aca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ace:	e7eb      	b.n	8011aa8 <__swhatbuf_r+0x24>

08011ad0 <__smakebuf_r>:
 8011ad0:	898b      	ldrh	r3, [r1, #12]
 8011ad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ad4:	079d      	lsls	r5, r3, #30
 8011ad6:	4606      	mov	r6, r0
 8011ad8:	460c      	mov	r4, r1
 8011ada:	d507      	bpl.n	8011aec <__smakebuf_r+0x1c>
 8011adc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ae0:	6023      	str	r3, [r4, #0]
 8011ae2:	6123      	str	r3, [r4, #16]
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	6163      	str	r3, [r4, #20]
 8011ae8:	b003      	add	sp, #12
 8011aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aec:	ab01      	add	r3, sp, #4
 8011aee:	466a      	mov	r2, sp
 8011af0:	f7ff ffc8 	bl	8011a84 <__swhatbuf_r>
 8011af4:	9f00      	ldr	r7, [sp, #0]
 8011af6:	4605      	mov	r5, r0
 8011af8:	4639      	mov	r1, r7
 8011afa:	4630      	mov	r0, r6
 8011afc:	f7ff fae2 	bl	80110c4 <_malloc_r>
 8011b00:	b948      	cbnz	r0, 8011b16 <__smakebuf_r+0x46>
 8011b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b06:	059a      	lsls	r2, r3, #22
 8011b08:	d4ee      	bmi.n	8011ae8 <__smakebuf_r+0x18>
 8011b0a:	f023 0303 	bic.w	r3, r3, #3
 8011b0e:	f043 0302 	orr.w	r3, r3, #2
 8011b12:	81a3      	strh	r3, [r4, #12]
 8011b14:	e7e2      	b.n	8011adc <__smakebuf_r+0xc>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	6020      	str	r0, [r4, #0]
 8011b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b1e:	81a3      	strh	r3, [r4, #12]
 8011b20:	9b01      	ldr	r3, [sp, #4]
 8011b22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b26:	b15b      	cbz	r3, 8011b40 <__smakebuf_r+0x70>
 8011b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f000 f81d 	bl	8011b6c <_isatty_r>
 8011b32:	b128      	cbz	r0, 8011b40 <__smakebuf_r+0x70>
 8011b34:	89a3      	ldrh	r3, [r4, #12]
 8011b36:	f023 0303 	bic.w	r3, r3, #3
 8011b3a:	f043 0301 	orr.w	r3, r3, #1
 8011b3e:	81a3      	strh	r3, [r4, #12]
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	431d      	orrs	r5, r3
 8011b44:	81a5      	strh	r5, [r4, #12]
 8011b46:	e7cf      	b.n	8011ae8 <__smakebuf_r+0x18>

08011b48 <_fstat_r>:
 8011b48:	b538      	push	{r3, r4, r5, lr}
 8011b4a:	4d07      	ldr	r5, [pc, #28]	@ (8011b68 <_fstat_r+0x20>)
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	4604      	mov	r4, r0
 8011b50:	4608      	mov	r0, r1
 8011b52:	4611      	mov	r1, r2
 8011b54:	602b      	str	r3, [r5, #0]
 8011b56:	f7ef fa7c 	bl	8001052 <_fstat>
 8011b5a:	1c43      	adds	r3, r0, #1
 8011b5c:	d102      	bne.n	8011b64 <_fstat_r+0x1c>
 8011b5e:	682b      	ldr	r3, [r5, #0]
 8011b60:	b103      	cbz	r3, 8011b64 <_fstat_r+0x1c>
 8011b62:	6023      	str	r3, [r4, #0]
 8011b64:	bd38      	pop	{r3, r4, r5, pc}
 8011b66:	bf00      	nop
 8011b68:	2000ae80 	.word	0x2000ae80

08011b6c <_isatty_r>:
 8011b6c:	b538      	push	{r3, r4, r5, lr}
 8011b6e:	4d06      	ldr	r5, [pc, #24]	@ (8011b88 <_isatty_r+0x1c>)
 8011b70:	2300      	movs	r3, #0
 8011b72:	4604      	mov	r4, r0
 8011b74:	4608      	mov	r0, r1
 8011b76:	602b      	str	r3, [r5, #0]
 8011b78:	f7ef fa7b 	bl	8001072 <_isatty>
 8011b7c:	1c43      	adds	r3, r0, #1
 8011b7e:	d102      	bne.n	8011b86 <_isatty_r+0x1a>
 8011b80:	682b      	ldr	r3, [r5, #0]
 8011b82:	b103      	cbz	r3, 8011b86 <_isatty_r+0x1a>
 8011b84:	6023      	str	r3, [r4, #0]
 8011b86:	bd38      	pop	{r3, r4, r5, pc}
 8011b88:	2000ae80 	.word	0x2000ae80

08011b8c <_init>:
 8011b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b8e:	bf00      	nop
 8011b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b92:	bc08      	pop	{r3}
 8011b94:	469e      	mov	lr, r3
 8011b96:	4770      	bx	lr

08011b98 <_fini>:
 8011b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b9a:	bf00      	nop
 8011b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b9e:	bc08      	pop	{r3}
 8011ba0:	469e      	mov	lr, r3
 8011ba2:	4770      	bx	lr
