
ratatouille_audio_in_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011140  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08011280  08011280  00012280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011778  08011778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011780  08011780  00012780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011784  08011784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002c8  20000008  08011788  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d80  200002d0  08011a50  000132d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002050  08011a50  00014050  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000132d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027a42  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000050bf  00000000  00000000  0003ad42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002630  00000000  00000000  0003fe08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d60  00000000  00000000  00042438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007726  00000000  00000000  00044198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a029  00000000  00000000  0004b8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fd897  00000000  00000000  000758e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017317e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b584  00000000  00000000  001731c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000094  00000000  00000000  0017e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08011268 	.word	0x08011268

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	08011268 	.word	0x08011268

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(TIMING_GPIO_Port, TIMING_Pin);
	////this checks the adc reading at specified frequency
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e006      	b.n	8000ec8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		  sample = (uint16_t) rawValues[0];
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d3f3      	bcc.n	8000eba <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]

  }
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	200004e4 	.word	0x200004e4
 8000ee8:	200004e8 	.word	0x200004e8
 8000eec:	200002ec 	.word	0x200002ec
 8000ef0:	200004ea 	.word	0x200004ea

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fdc8 	bl	8001a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f848 	bl	8000f90 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f00:	f000 f8aa 	bl	8001058 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 fa3a 	bl	800137c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f08:	f000 fa26 	bl	8001358 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f0c:	f000 f8d6 	bl	80010bc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f10:	f000 f988 	bl	8001224 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000f14:	f00c fde0 	bl	800dad8 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000f18:	f000 f944 	bl	80011a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f1c:	f000 f9d0 	bl	80012c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f20:	2202      	movs	r2, #2
 8000f22:	4912      	ldr	r1, [pc, #72]	@ (8000f6c <main+0x78>)
 8000f24:	4812      	ldr	r0, [pc, #72]	@ (8000f70 <main+0x7c>)
 8000f26:	f001 f96b 	bl	8002200 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000f2a:	4812      	ldr	r0, [pc, #72]	@ (8000f74 <main+0x80>)
 8000f2c:	f007 f8fc 	bl	8008128 <HAL_TIM_Base_Start_IT>
  {
	  /*TIMO this is main loop. Don't put big functions in the timer callback,
	   *  but rather here, especially when transmitting data. As an example this code will print
	   *  samples via UART. Get PuTTy, set appropriate serial COM port and 115200 bitrate
	   *  and you can see the messages */
	  if(flag == 1){
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <main+0x84>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1fb      	bne.n	8000f30 <main+0x3c>
		  snprintf(msg, sizeof(msg), "new sample: %d \r\n",sample);
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <main+0x88>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <main+0x8c>)
 8000f3e:	2132      	movs	r1, #50	@ 0x32
 8000f40:	4810      	ldr	r0, [pc, #64]	@ (8000f84 <main+0x90>)
 8000f42:	f00e f819 	bl	800ef78 <sniprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000f46:	480f      	ldr	r0, [pc, #60]	@ (8000f84 <main+0x90>)
 8000f48:	f7ff f96a 	bl	8000220 <strlen>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	490b      	ldr	r1, [pc, #44]	@ (8000f84 <main+0x90>)
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <main+0x94>)
 8000f58:	f007 fd26 	bl	80089a8 <HAL_UART_Transmit>
		  HAL_GPIO_TogglePin(BlueLED_GPIO_Port, BlueLED_Pin);
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <main+0x98>)
 8000f60:	f002 fe30 	bl	8003bc4 <HAL_GPIO_TogglePin>
		  flag = 0;
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <main+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
	  if(flag == 1){
 8000f6a:	e7e1      	b.n	8000f30 <main+0x3c>
 8000f6c:	200004e4 	.word	0x200004e4
 8000f70:	200002ec 	.word	0x200002ec
 8000f74:	20000404 	.word	0x20000404
 8000f78:	200004ea 	.word	0x200004ea
 8000f7c:	200004e8 	.word	0x200004e8
 8000f80:	08011280 	.word	0x08011280
 8000f84:	200004ec 	.word	0x200004ec
 8000f88:	20000450 	.word	0x20000450
 8000f8c:	48000400 	.word	0x48000400

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09a      	sub	sp, #104	@ 0x68
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2248      	movs	r2, #72	@ 0x48
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00e f861 	bl	800f066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <SystemClock_Config+0xc4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fbe:	4a25      	ldr	r2, [pc, #148]	@ (8001054 <SystemClock_Config+0xc4>)
 8000fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <SystemClock_Config+0xc4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe2:	2340      	movs	r3, #64	@ 0x40
 8000fe4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	2303      	movs	r3, #3
 8000fec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000fee:	2310      	movs	r3, #16
 8000ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ffc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001000:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001002:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001006:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f005 fdfb 	bl	8006c08 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001018:	f000 f9fe 	bl	8001418 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800101c:	236f      	movs	r3, #111	@ 0x6f
 800101e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2303      	movs	r3, #3
 8001022:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2103      	movs	r1, #3
 800103c:	4618      	mov	r0, r3
 800103e:	f006 f957 	bl	80072f0 <HAL_RCC_ClockConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001048:	f000 f9e6 	bl	8001418 <Error_Handler>
  }
}
 800104c:	bf00      	nop
 800104e:	3768      	adds	r7, #104	@ 0x68
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	58000400 	.word	0x58000400

08001058 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2250      	movs	r2, #80	@ 0x50
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00d fffe 	bl	800f066 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800106a:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800106e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001070:	2306      	movs	r3, #6
 8001072:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001074:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800107a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800107e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001080:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001084:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001086:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800108a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800108c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001090:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001092:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800109c:	2300      	movs	r3, #0
 800109e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 fd61 	bl	8007b6a <HAL_RCCEx_PeriphCLKConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80010ae:	f000 f9b3 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	@ 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	463b      	mov	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d2:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010d4:	4a30      	ldr	r2, [pc, #192]	@ (8001198 <MX_ADC1_Init+0xdc>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b28      	ldr	r3, [pc, #160]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f8:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <MX_ADC1_Init+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fe:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001100:	2201      	movs	r2, #1
 8001102:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001106:	2202      	movs	r2, #2
 8001108:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <MX_ADC1_Init+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_ADC1_Init+0xd8>)
 800111a:	2200      	movs	r2, #0
 800111c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001120:	2201      	movs	r2, #1
 8001122:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <MX_ADC1_Init+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	4817      	ldr	r0, [pc, #92]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001136:	f000 ff17 	bl	8001f68 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001140:	f000 f96a 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_ADC1_Init+0xe0>)
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001148:	2306      	movs	r3, #6
 800114a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800114c:	2306      	movs	r3, #6
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001150:	237f      	movs	r3, #127	@ 0x7f
 8001152:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001154:	2304      	movs	r3, #4
 8001156:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <MX_ADC1_Init+0xd8>)
 8001162:	f001 faaf 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800116c:	f000 f954 	bl	8001418 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <MX_ADC1_Init+0xe4>)
 8001172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001174:	230c      	movs	r3, #12
 8001176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_ADC1_Init+0xd8>)
 800117e:	f001 faa1 	bl	80026c4 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001188:	f000 f946 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002ec 	.word	0x200002ec
 8001198:	50040000 	.word	0x50040000
 800119c:	04300002 	.word	0x04300002
 80011a0:	08600004 	.word	0x08600004

080011a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011aa:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <MX_I2C1_Init+0x78>)
 80011ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <MX_I2C1_Init+0x7c>)
 80011b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011bc:	2201      	movs	r2, #1
 80011be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011de:	480e      	ldr	r0, [pc, #56]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011e0:	f002 fd0a 	bl	8003bf8 <HAL_I2C_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011ea:	f000 f915 	bl	8001418 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ee:	2100      	movs	r1, #0
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <MX_I2C1_Init+0x74>)
 80011f2:	f003 fb9a 	bl	800492a <HAL_I2CEx_ConfigAnalogFilter>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011fc:	f000 f90c 	bl	8001418 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001200:	2100      	movs	r1, #0
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_I2C1_Init+0x74>)
 8001204:	f003 fbdc 	bl	80049c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800120e:	f000 f903 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200003b0 	.word	0x200003b0
 800121c:	40005400 	.word	0x40005400
 8001220:	10b17db5 	.word	0x10b17db5

08001224 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001244:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001248:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800124a:	4b1b      	ldr	r3, [pc, #108]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800124c:	2201      	movs	r2, #1
 800124e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256000-1;
 8001256:	4b18      	ldr	r3, [pc, #96]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001258:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <MX_TIM2_Init+0x98>)
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <MX_TIM2_Init+0x94>)
 800126a:	f006 ff05 	bl	8008078 <HAL_TIM_Base_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001274:	f000 f8d0 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800127c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <MX_TIM2_Init+0x94>)
 8001286:	f007 f8a4 	bl	80083d2 <HAL_TIM_ConfigClockSource>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001290:	f000 f8c2 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001294:	2320      	movs	r3, #32
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_TIM2_Init+0x94>)
 80012a2:	f007 fa93 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012ac:	f000 f8b4 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000404 	.word	0x20000404
 80012bc:	0003e7ff 	.word	0x0003e7ff

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <MX_USART1_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800130a:	f007 fafd 	bl	8008908 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 f880 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800131c:	f008 f852 	bl	80093c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f000 f877 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800132e:	f008 f887 	bl	8009440 <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 f86e 	bl	8001418 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <MX_USART1_UART_Init+0x90>)
 800133e:	f008 f808 	bl	8009352 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 f866 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000450 	.word	0x20000450
 8001354:	40013800 	.word	0x40013800

08001358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800135c:	2004      	movs	r0, #4
 800135e:	f7ff fd73 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff fd70 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	200b      	movs	r0, #11
 800136e:	f001 ff8a 	bl	8003286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001372:	200b      	movs	r0, #11
 8001374:	f001 ffa1 	bl	80032ba <HAL_NVIC_EnableIRQ>

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff fd72 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2002      	movs	r0, #2
 8001398:	f7ff fd6f 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fd6c 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TIMING_Pin|SIGNAL_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2103      	movs	r1, #3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f002 fbf3 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BlueLED_GPIO_Port, BlueLED_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2120      	movs	r1, #32
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <MX_GPIO_Init+0x98>)
 80013b4:	f002 fbee 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 80013b8:	2301      	movs	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013c4:	2301      	movs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4619      	mov	r1, r3
 80013cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d0:	f002 fa70 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SIGNAL_Pin */
  GPIO_InitStruct.Pin = SIGNAL_Pin;
 80013d4:	2302      	movs	r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SIGNAL_GPIO_Port, &GPIO_InitStruct);
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f002 fa62 	bl	80038b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BlueLED_Pin */
  GPIO_InitStruct.Pin = BlueLED_Pin;
 80013f0:	2320      	movs	r3, #32
 80013f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BlueLED_GPIO_Port, &GPIO_InitStruct);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <MX_GPIO_Init+0x98>)
 8001406:	f002 fa55 	bl	80038b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	48000400 	.word	0x48000400

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <Error_Handler+0x8>

08001424 <LL_AHB2_GRP1_EnableClock>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001430:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001440:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001448:	68fb      	ldr	r3, [r7, #12]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001462:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4313      	orrs	r3, r2
 800146c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001472:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a26      	ldr	r2, [pc, #152]	@ (8001580 <HAL_ADC_MspInit+0xb8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d145      	bne.n	8001576 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014ea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014ee:	f7ff ff99 	bl	8001424 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	2004      	movs	r0, #4
 80014f4:	f7ff ff96 	bl	8001424 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f8:	2303      	movs	r3, #3
 80014fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fc:	2303      	movs	r3, #3
 80014fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	481e      	ldr	r0, [pc, #120]	@ (8001584 <HAL_ADC_MspInit+0xbc>)
 800150c:	f002 f9d2 	bl	80038b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001512:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <HAL_ADC_MspInit+0xc4>)
 8001514:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001518:	2205      	movs	r2, #5
 800151a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151c:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001530:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001534:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001538:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001540:	2220      	movs	r2, #32
 8001542:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800154a:	480f      	ldr	r0, [pc, #60]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 800154c:	f001 fed0 	bl	80032f0 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8001556:	f7ff ff5f 	bl	8001418 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0a      	ldr	r2, [pc, #40]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 800155e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001560:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <HAL_ADC_MspInit+0xc0>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2102      	movs	r1, #2
 800156a:	2012      	movs	r0, #18
 800156c:	f001 fe8b 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001570:	2012      	movs	r0, #18
 8001572:	f001 fea2 	bl	80032ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001576:	bf00      	nop
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	50040000 	.word	0x50040000
 8001584:	48000800 	.word	0x48000800
 8001588:	20000350 	.word	0x20000350
 800158c:	40020008 	.word	0x40020008

08001590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b09c      	sub	sp, #112	@ 0x70
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2250      	movs	r2, #80	@ 0x50
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f00d fd58 	bl	800f066 <memset>
  if(hi2c->Instance==I2C1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001638 <HAL_I2C_MspInit+0xa8>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d136      	bne.n	800162e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 facb 	bl	8007b6a <HAL_RCCEx_PeriphCLKConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015da:	f7ff ff1d 	bl	8001418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff ff20 	bl	8001424 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015fe:	4619      	mov	r1, r3
 8001600:	480e      	ldr	r0, [pc, #56]	@ (800163c <HAL_I2C_MspInit+0xac>)
 8001602:	f002 f957 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001606:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800160a:	f7ff ff24 	bl	8001456 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	201e      	movs	r0, #30
 8001614:	f001 fe37 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001618:	201e      	movs	r0, #30
 800161a:	f001 fe4e 	bl	80032ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	201f      	movs	r0, #31
 8001624:	f001 fe2f 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001628:	201f      	movs	r0, #31
 800162a:	f001 fe46 	bl	80032ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800162e:	bf00      	nop
 8001630:	3770      	adds	r7, #112	@ 0x70
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40005400 	.word	0x40005400
 800163c:	48000400 	.word	0x48000400

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001650:	d10a      	bne.n	8001668 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff feff 	bl	8001456 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	201c      	movs	r0, #28
 800165e:	f001 fe12 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001662:	201c      	movs	r0, #28
 8001664:	f001 fe29 	bl	80032ba <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09c      	sub	sp, #112	@ 0x70
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	2250      	movs	r2, #80	@ 0x50
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00d fce8 	bl	800f066 <memset>
  if(huart->Instance==USART1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a16      	ldr	r2, [pc, #88]	@ (80016f4 <HAL_UART_MspInit+0x84>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d124      	bne.n	80016ea <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4618      	mov	r0, r3
 80016ae:	f006 fa5c 	bl	8007b6a <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b8:	f7ff feae 	bl	8001418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016bc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80016c0:	f7ff fee2 	bl	8001488 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fead 	bl	8001424 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ca:	23c0      	movs	r3, #192	@ 0xc0
 80016cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016da:	2307      	movs	r3, #7
 80016dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016e2:	4619      	mov	r1, r3
 80016e4:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <HAL_UART_MspInit+0x88>)
 80016e6:	f002 f8e5 	bl	80038b4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80016ea:	bf00      	nop
 80016ec:	3770      	adds	r7, #112	@ 0x70
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40013800 	.word	0x40013800
 80016f8:	48000400 	.word	0x48000400

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <NMI_Handler+0x4>

08001704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <HardFault_Handler+0x4>

0800170c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <MemManage_Handler+0x4>

08001714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <UsageFault_Handler+0x4>

08001724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001752:	f000 f9f5 	bl	8001b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Channel1_IRQHandler+0x10>)
 8001762:	f001 ff47 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000350 	.word	0x20000350

08001770 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <ADC1_IRQHandler+0x10>)
 8001776:	f000 fdc7 	bl	8002308 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200002ec 	.word	0x200002ec

08001784 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <USB_HP_IRQHandler+0x10>)
 800178a:	f003 fa55 	bl	8004c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20001a08 	.word	0x20001a08

08001798 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <USB_LP_IRQHandler+0x10>)
 800179e:	f003 fa4b 	bl	8004c38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20001a08 	.word	0x20001a08

080017ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <TIM2_IRQHandler+0x10>)
 80017b2:	f006 fd07 	bl	80081c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000404 	.word	0x20000404

080017c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <I2C1_EV_IRQHandler+0x10>)
 80017c6:	f002 fab2 	bl	8003d2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003b0 	.word	0x200003b0

080017d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <I2C1_ER_IRQHandler+0x10>)
 80017da:	f002 fac2 	bl	8003d62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200003b0 	.word	0x200003b0

080017e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return 1;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_kill>:

int _kill(int pid, int sig)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001802:	f00d fc83 	bl	800f10c <__errno>
 8001806:	4603      	mov	r3, r0
 8001808:	2216      	movs	r2, #22
 800180a:	601a      	str	r2, [r3, #0]
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <_exit>:

void _exit (int status)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ffe7 	bl	80017f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800182a:	bf00      	nop
 800182c:	e7fd      	b.n	800182a <_exit+0x12>

0800182e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e00a      	b.n	8001856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001840:	f3af 8000 	nop.w
 8001844:	4601      	mov	r1, r0
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	60ba      	str	r2, [r7, #8]
 800184c:	b2ca      	uxtb	r2, r1
 800184e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbf0      	blt.n	8001840 <_read+0x12>
  }

  return len;
 800185e:	687b      	ldr	r3, [r7, #4]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e009      	b.n	800188e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	60ba      	str	r2, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf1      	blt.n	800187a <_write+0x12>
  }
  return len;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_close>:

int _close(int file)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_isatty>:

int _isatty(int file)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b085      	sub	sp, #20
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	@ (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	@ (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	@ (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f00d fbe8 	bl	800f10c <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20030000 	.word	0x20030000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000520 	.word	0x20000520
 8001970:	20002050 	.word	0x20002050

08001974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001978:	4b24      	ldr	r3, [pc, #144]	@ (8001a0c <SystemInit+0x98>)
 800197a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800197e:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <SystemInit+0x98>)
 8001980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80019a0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <SystemInit+0x9c>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019be:	f023 0305 	bic.w	r3, r3, #5
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <SystemInit+0xa0>)
 80019e0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a14 <SystemInit+0xa0>)
 80019e8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	faf6fefb 	.word	0xfaf6fefb
 8001a14:	22041000 	.word	0x22041000

08001a18 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001a18:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1c:	3304      	adds	r3, #4

08001a1e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a20:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001a22:	d3f9      	bcc.n	8001a18 <CopyDataInit>
  bx lr
 8001a24:	4770      	bx	lr

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001a26:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001a28:	3004      	adds	r0, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001a2a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>
  bx lr
 8001a2e:	4770      	bx	lr

08001a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a34:	f7ff ff9e 	bl	8001974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001a38:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <LoopForever+0x6>)
 8001a3a:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <LoopForever+0xa>)
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <LoopForever+0xe>)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f7ff ffed 	bl	8001a1e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <LoopForever+0x12>)
 8001a46:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <LoopForever+0x16>)
 8001a48:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <LoopForever+0x1a>)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f7ff ffe7 	bl	8001a1e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a50:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <LoopForever+0x1e>)
 8001a52:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <LoopForever+0x22>)
 8001a54:	2300      	movs	r3, #0
 8001a56:	f7ff ffe8 	bl	8001a2a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a5a:	f00d fb5d 	bl	800f118 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a5e:	f7ff fa49 	bl	8000ef4 <main>

08001a62 <LoopForever>:

LoopForever:
  b LoopForever
 8001a62:	e7fe      	b.n	8001a62 <LoopForever>
  ldr   r0, =_estack
 8001a64:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	200002d0 	.word	0x200002d0
 8001a70:	08011788 	.word	0x08011788
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a74:	20030000 	.word	0x20030000
 8001a78:	20030000 	.word	0x20030000
 8001a7c:	08011a50 	.word	0x08011a50
  INIT_BSS _sbss, _ebss
 8001a80:	200002d0 	.word	0x200002d0
 8001a84:	20002050 	.word	0x20002050

08001a88 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a88:	e7fe      	b.n	8001a88 <AES1_IRQHandler>
	...

08001a8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <HAL_Init+0x3c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac8 <HAL_Init+0x3c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f001 fbe4 	bl	8003270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 f80f 	bl	8001acc <HAL_InitTick>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	e001      	b.n	8001abe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aba:	f7ff fcfe 	bl	80014ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58004000 	.word	0x58004000

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001ad8:	4b17      	ldr	r3, [pc, #92]	@ (8001b38 <HAL_InitTick+0x6c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d024      	beq.n	8001b2a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ae0:	f005 fdb2 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b14      	ldr	r3, [pc, #80]	@ (8001b38 <HAL_InitTick+0x6c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fbec 	bl	80032d6 <HAL_SYSTICK_Config>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10f      	bne.n	8001b24 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	d809      	bhi.n	8001b1e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b12:	f001 fbb8 	bl	8003286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b16:	4a09      	ldr	r2, [pc, #36]	@ (8001b3c <HAL_InitTick+0x70>)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e007      	b.n	8001b2e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	e004      	b.n	8001b2e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
 8001b28:	e001      	b.n	8001b2e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_IncTick+0x20>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <HAL_IncTick+0x24>)
 8001b52:	6013      	str	r3, [r2, #0]
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000010 	.word	0x20000010
 8001b64:	20000524 	.word	0x20000524

08001b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <HAL_GetTick+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000524 	.word	0x20000524

08001b80 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <HAL_GetTickPrio+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000000c 	.word	0x2000000c

08001b98 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
 8001c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	3360      	adds	r3, #96	@ 0x60
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b08      	ldr	r3, [pc, #32]	@ (8001c44 <LL_ADC_SetOffset+0x44>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	03fff000 	.word	0x03fff000

08001c48 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3360      	adds	r3, #96	@ 0x60
 8001c56:	461a      	mov	r2, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3360      	adds	r3, #96	@ 0x60
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001cc2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b087      	sub	sp, #28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3330      	adds	r3, #48	@ 0x30
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	4413      	add	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	211f      	movs	r1, #31
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	f003 011f 	and.w	r1, r3, #31
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3314      	adds	r3, #20
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0e5b      	lsrs	r3, r3, #25
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0d1b      	lsrs	r3, r3, #20
 8001d92:	f003 031f 	and.w	r3, r3, #31
 8001d96:	2107      	movs	r1, #7
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	401a      	ands	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0d1b      	lsrs	r3, r3, #20
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001db4:	bf00      	nop
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0318 	and.w	r3, r3, #24
 8001de2:	4908      	ldr	r1, [pc, #32]	@ (8001e04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001de4:	40d9      	lsrs	r1, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	400b      	ands	r3, r1
 8001dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dee:	431a      	orrs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	0007ffff 	.word	0x0007ffff

08001e08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6093      	str	r3, [r2, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e90:	d101      	bne.n	8001e96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_IsEnabled+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_IsEnabled+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d101      	bne.n	8001f32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e12e      	b.n	80021e4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fa97 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff3d 	bl	8001e2c <LL_ADC_IsDeepPowerDownEnabled>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d004      	beq.n	8001fc2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff23 	bl	8001e08 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff58 	bl	8001e7c <LL_ADC_IsInternalRegulatorEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d115      	bne.n	8001ffe <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff3c 	bl	8001e54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fdc:	4b83      	ldr	r3, [pc, #524]	@ (80021ec <HAL_ADC_Init+0x284>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	099b      	lsrs	r3, r3, #6
 8001fe2:	4a83      	ldr	r2, [pc, #524]	@ (80021f0 <HAL_ADC_Init+0x288>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff3a 	bl	8001e7c <LL_ADC_IsInternalRegulatorEnabled>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10d      	bne.n	800202a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff73 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 8002034:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b00      	cmp	r3, #0
 8002040:	f040 80c7 	bne.w	80021d2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80c3 	bne.w	80021d2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002050:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002054:	f043 0202 	orr.w	r2, r3, #2
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff33 	bl	8001ecc <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10b      	bne.n	8002084 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800206c:	4861      	ldr	r0, [pc, #388]	@ (80021f4 <HAL_ADC_Init+0x28c>)
 800206e:	f7ff ff2d 	bl	8001ecc <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4619      	mov	r1, r3
 800207e:	485e      	ldr	r0, [pc, #376]	@ (80021f8 <HAL_ADC_Init+0x290>)
 8002080:	f7ff fd8a 	bl	8001b98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e5b      	ldrb	r3, [r3, #25]
 8002088:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800208e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002094:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800209a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80020a4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	045b      	lsls	r3, r3, #17
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d009      	beq.n	80020e0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4b45      	ldr	r3, [pc, #276]	@ (80021fc <HAL_ADC_Init+0x294>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	69b9      	ldr	r1, [r7, #24]
 80020f0:	430b      	orrs	r3, r1
 80020f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff0e 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 80020fe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff1b 	bl	8001f40 <LL_ADC_INJ_IsConversionOngoing>
 800210a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d13d      	bne.n	800218e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d13a      	bne.n	800218e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800211c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002124:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002134:	f023 0302 	bic.w	r3, r3, #2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	430b      	orrs	r3, r1
 8002140:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002148:	2b01      	cmp	r3, #1
 800214a:	d118      	bne.n	800217e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002156:	f023 0304 	bic.w	r3, r3, #4
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002162:	4311      	orrs	r1, r2
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800216e:	430a      	orrs	r2, r1
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	e007      	b.n	800218e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0201 	bic.w	r2, r2, #1
 800218c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10c      	bne.n	80021b0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219c:	f023 010f 	bic.w	r1, r3, #15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	1e5a      	subs	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80021ae:	e007      	b.n	80021c0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020f 	bic.w	r2, r2, #15
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c4:	f023 0303 	bic.w	r3, r3, #3
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80021d0:	e007      	b.n	80021e2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000008 	.word	0x20000008
 80021f0:	053e2d63 	.word	0x053e2d63
 80021f4:	50040000 	.word	0x50040000
 80021f8:	50040300 	.word	0x50040300
 80021fc:	fff0c007 	.word	0xfff0c007

08002200 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fe82 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d167      	bne.n	80022ec <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_Start_DMA+0x2a>
 8002226:	2302      	movs	r3, #2
 8002228:	e063      	b.n	80022f2 <HAL_ADC_Start_DMA+0xf2>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fe0c 	bl	8002e50 <ADC_Enable>
 8002238:	4603      	mov	r3, r0
 800223a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d14f      	bne.n	80022e2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	f023 0206 	bic.w	r2, r3, #6
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	659a      	str	r2, [r3, #88]	@ 0x58
 800226e:	e002      	b.n	8002276 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_ADC_Start_DMA+0xfc>)
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <HAL_ADC_Start_DMA+0x100>)
 8002284:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228a:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_ADC_Start_DMA+0x104>)
 800228c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	221c      	movs	r2, #28
 8002294:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0210 	orr.w	r2, r2, #16
 80022ac:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3340      	adds	r3, #64	@ 0x40
 80022c8:	4619      	mov	r1, r3
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f001 f8b7 	bl	8003440 <HAL_DMA_Start_IT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fe09 	bl	8001ef2 <LL_ADC_REG_StartConversion>
 80022e0:	e006      	b.n	80022f0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80022ea:	e001      	b.n	80022f0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	08002f45 	.word	0x08002f45
 8002300:	0800301d 	.word	0x0800301d
 8002304:	08003039 	.word	0x08003039

08002308 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d017      	beq.n	800235e <HAL_ADC_IRQHandler+0x56>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 feb3 	bl	80030bc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2202      	movs	r2, #2
 800235c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_ADC_IRQHandler+0x6a>
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002378:	2b00      	cmp	r3, #0
 800237a:	d05d      	beq.n	8002438 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d058      	beq.n	8002438 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002396:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc81 	bl	8001caa <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d03d      	beq.n	800242a <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023bc:	d035      	beq.n	800242a <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d12e      	bne.n	800242a <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fda2 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d11a      	bne.n	8002412 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020c 	bic.w	r2, r2, #12
 80023ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002410:	e00b      	b.n	800242a <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002416:	f043 0210 	orr.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002422:	f043 0201 	orr.w	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f922 	bl	8002674 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	220c      	movs	r2, #12
 8002436:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <HAL_ADC_IRQHandler+0x144>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002452:	2b00      	cmp	r3, #0
 8002454:	d074      	beq.n	8002540 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d06f      	beq.n	8002540 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	d105      	bne.n	8002478 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002470:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff fc61 	bl	8001d44 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002482:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc0e 	bl	8001caa <LL_ADC_REG_IsTriggerSourceSWStart>
 800248e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d049      	beq.n	8002532 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_ADC_IRQHandler+0x1b0>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d041      	beq.n	8002532 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13c      	bne.n	8002532 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c2:	2b40      	cmp	r3, #64	@ 0x40
 80024c4:	d135      	bne.n	8002532 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12e      	bne.n	8002532 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd31 	bl	8001f40 <LL_ADC_INJ_IsConversionOngoing>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11a      	bne.n	800251a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80024f2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d112      	bne.n	8002532 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	@ 0x54
 8002518:	e00b      	b.n	8002532 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251e:	f043 0210 	orr.w	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fd9a 	bl	800306c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2260      	movs	r2, #96	@ 0x60
 800253e:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002546:	2b00      	cmp	r3, #0
 8002548:	d011      	beq.n	800256e <HAL_ADC_IRQHandler+0x266>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00c      	beq.n	800256e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002558:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f89b 	bl	800269c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d012      	beq.n	800259e <HAL_ADC_IRQHandler+0x296>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fd80 	bl	8003094 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d012      	beq.n	80025ce <HAL_ADC_IRQHandler+0x2c6>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fd72 	bl	80030a8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f003 0310 	and.w	r3, r3, #16
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02b      	beq.n	8002630 <HAL_ADC_IRQHandler+0x328>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d026      	beq.n	8002630 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d102      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	e009      	b.n	8002604 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fb97 	bl	8001d28 <LL_ADC_REG_GetDMATransfer>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002600:	2301      	movs	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10e      	bne.n	8002628 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f844 	bl	80026b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <HAL_ADC_IRQHandler+0x364>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	f043 0208 	orr.w	r2, r3, #8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002664:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fd0a 	bl	8003080 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800266c:	bf00      	nop
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0b6      	sub	sp, #216	@ 0xd8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x22>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e39f      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x762>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fc11 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8384 	bne.w	8002e08 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f7ff fadf 	bl	8001cd0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fbff 	bl	8001f1a <LL_ADC_REG_IsConversionOngoing>
 800271c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fc0b 	bl	8001f40 <LL_ADC_INJ_IsConversionOngoing>
 800272a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800272e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 81a6 	bne.w	8002a84 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 81a1 	bne.w	8002a84 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	461a      	mov	r2, r3
 8002750:	f7ff fb0b 	bl	8001d6a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	08db      	lsrs	r3, r3, #3
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d00a      	beq.n	800278c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002786:	f7ff fa3b 	bl	8001c00 <LL_ADC_SetOffset>
 800278a:	e17b      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fa58 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <HAL_ADC_ConfigChannel+0xf4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2100      	movs	r1, #0
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fa4d 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	0e9b      	lsrs	r3, r3, #26
 80027b2:	f003 021f 	and.w	r2, r3, #31
 80027b6:	e01e      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x132>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fa42 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027ce:	fa93 f3a3 	rbit	r3, r3
 80027d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e004      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 80027ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_ADC_ConfigChannel+0x14a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	0e9b      	lsrs	r3, r3, #26
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	e018      	b.n	8002840 <HAL_ADC_ConfigChannel+0x17c>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002816:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800281a:	fa93 f3a3 	rbit	r3, r3
 800281e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800282a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e004      	b.n	8002840 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	429a      	cmp	r2, r3
 8002842:	d106      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fa11 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff f9f5 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_ADC_ConfigChannel+0x1ba>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f9ea 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	e01e      	b.n	80028bc <HAL_ADC_ConfigChannel+0x1f8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f9df 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 800288a:	4603      	mov	r3, r0
 800288c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002890:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800289c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80028ac:	2320      	movs	r3, #32
 80028ae:	e004      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80028b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b4:	fab3 f383 	clz	r3, r3
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x210>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	e018      	b.n	8002906 <HAL_ADC_ConfigChannel+0x242>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80028f8:	2320      	movs	r3, #32
 80028fa:	e004      	b.n	8002906 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80028fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	429a      	cmp	r2, r3
 8002908:	d106      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f9ae 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2102      	movs	r1, #2
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f992 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x280>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2102      	movs	r1, #2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f987 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	e01e      	b.n	8002982 <HAL_ADC_ConfigChannel+0x2be>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2102      	movs	r1, #2
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f97c 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002962:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800296a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002972:	2320      	movs	r3, #32
 8002974:	e004      	b.n	8002980 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002976:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_ADC_ConfigChannel+0x2d6>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0e9b      	lsrs	r3, r3, #26
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	e016      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x304>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e004      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80029be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d106      	bne.n	80029da <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2102      	movs	r1, #2
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f94d 	bl	8001c74 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2103      	movs	r1, #3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f931 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x342>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2103      	movs	r1, #3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f926 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0e9b      	lsrs	r3, r3, #26
 8002a00:	f003 021f 	and.w	r2, r3, #31
 8002a04:	e017      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x372>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff f91b 	bl	8001c48 <LL_ADC_GetOffsetChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a20:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x38a>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	e011      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x3ae>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d106      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f8f8 	bl	8001c74 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fa1f 	bl	8001ecc <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f040 81c2 	bne.w	8002e1a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6819      	ldr	r1, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f7ff f98c 	bl	8001dc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a8e      	ldr	r2, [pc, #568]	@ (8002ce8 <HAL_ADC_ConfigChannel+0x624>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f040 8130 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10b      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x418>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	bf94      	ite	ls
 8002ad4:	2301      	movls	r3, #1
 8002ad6:	2300      	movhi	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e019      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x44c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aec:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002af4:	2320      	movs	r3, #32
 8002af6:	e003      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2b09      	cmp	r3, #9
 8002b08:	bf94      	ite	ls
 8002b0a:	2301      	movls	r3, #1
 8002b0c:	2300      	movhi	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d079      	beq.n	8002c08 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x46c>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	3301      	adds	r3, #1
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b2e:	e015      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x498>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b38:	fa93 f3a3 	rbit	r3, r3
 8002b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e003      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4e:	fab3 f383 	clz	r3, r3
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x4b8>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2101      	movs	r1, #1
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	e017      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4e8>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e003      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f003 031f 	and.w	r3, r3, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bac:	ea42 0103 	orr.w	r1, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10a      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x50e>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	051b      	lsls	r3, r3, #20
 8002bd0:	e018      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x540>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002bee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c04:	430b      	orrs	r3, r1
 8002c06:	e080      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x560>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	069b      	lsls	r3, r3, #26
 8002c1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c22:	e015      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x58c>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002c3c:	2320      	movs	r3, #32
 8002c3e:	e003      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x5ac>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	3301      	adds	r3, #1
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	e017      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x5dc>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	ea42 0103 	orr.w	r1, r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x608>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b1e      	subs	r3, #30
 8002cc4:	051b      	lsls	r3, r3, #20
 8002cc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	e01d      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x644>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	613b      	str	r3, [r7, #16]
  return result;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e005      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x630>
 8002ce8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	051b      	lsls	r3, r3, #20
 8002d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7ff f82b 	bl	8001d6a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <HAL_ADC_ConfigChannel+0x76c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d07c      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d20:	4844      	ldr	r0, [pc, #272]	@ (8002e34 <HAL_ADC_ConfigChannel+0x770>)
 8002d22:	f7fe ff5f 	bl	8001be4 <LL_ADC_GetCommonPathInternalCh>
 8002d26:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d2a:	4843      	ldr	r0, [pc, #268]	@ (8002e38 <HAL_ADC_ConfigChannel+0x774>)
 8002d2c:	f7ff f8ce 	bl	8001ecc <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d15e      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a40      	ldr	r2, [pc, #256]	@ (8002e3c <HAL_ADC_ConfigChannel+0x778>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d127      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x6cc>
 8002d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d121      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a39      	ldr	r2, [pc, #228]	@ (8002e38 <HAL_ADC_ConfigChannel+0x774>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d161      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4834      	ldr	r0, [pc, #208]	@ (8002e34 <HAL_ADC_ConfigChannel+0x770>)
 8002d62:	f7fe ff2c 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d66:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_ADC_ConfigChannel+0x77c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	4a35      	ldr	r2, [pc, #212]	@ (8002e44 <HAL_ADC_ConfigChannel+0x780>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f9      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d8e:	e044      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	@ (8002e48 <HAL_ADC_ConfigChannel+0x784>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d113      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x6fe>
 8002d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <HAL_ADC_ConfigChannel+0x774>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d134      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db8:	4619      	mov	r1, r3
 8002dba:	481e      	ldr	r0, [pc, #120]	@ (8002e34 <HAL_ADC_ConfigChannel+0x770>)
 8002dbc:	f7fe feff 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc0:	e02b      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <HAL_ADC_ConfigChannel+0x788>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d126      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
 8002dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d120      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a16      	ldr	r2, [pc, #88]	@ (8002e38 <HAL_ADC_ConfigChannel+0x774>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d11b      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002de6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dea:	4619      	mov	r1, r3
 8002dec:	4811      	ldr	r0, [pc, #68]	@ (8002e34 <HAL_ADC_ConfigChannel+0x770>)
 8002dee:	f7fe fee6 	bl	8001bbe <LL_ADC_SetCommonPathInternalCh>
 8002df2:	e012      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e06:	e008      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002e22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	37d8      	adds	r7, #216	@ 0xd8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	80080000 	.word	0x80080000
 8002e34:	50040300 	.word	0x50040300
 8002e38:	50040000 	.word	0x50040000
 8002e3c:	c7520000 	.word	0xc7520000
 8002e40:	20000008 	.word	0x20000008
 8002e44:	053e2d63 	.word	0x053e2d63
 8002e48:	cb840000 	.word	0xcb840000
 8002e4c:	80000001 	.word	0x80000001

08002e50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff f833 	bl	8001ecc <LL_ADC_IsEnabled>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d15e      	bne.n	8002f2a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	4b30      	ldr	r3, [pc, #192]	@ (8002f34 <ADC_Enable+0xe4>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7e:	f043 0210 	orr.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8a:	f043 0201 	orr.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e04a      	b.n	8002f2c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f802 	bl	8001ea4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ea0:	4825      	ldr	r0, [pc, #148]	@ (8002f38 <ADC_Enable+0xe8>)
 8002ea2:	f7fe fe9f 	bl	8001be4 <LL_ADC_GetCommonPathInternalCh>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00f      	beq.n	8002ed0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eb0:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <ADC_Enable+0xec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <ADC_Enable+0xf0>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	099b      	lsrs	r3, r3, #6
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002ec2:	e002      	b.n	8002eca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f9      	bne.n	8002ec4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002ed0:	f7fe fe4a 	bl	8001b68 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ed6:	e021      	b.n	8002f1c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fff5 	bl	8001ecc <LL_ADC_IsEnabled>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d104      	bne.n	8002ef2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe ffd9 	bl	8001ea4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ef2:	f7fe fe39 	bl	8001b68 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d90d      	bls.n	8002f1c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d1d6      	bne.n	8002ed8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	8000003f 	.word	0x8000003f
 8002f38:	50040300 	.word	0x50040300
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	053e2d63 	.word	0x053e2d63

08002f44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d14b      	bne.n	8002ff6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d021      	beq.n	8002fbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fe fe94 	bl	8001caa <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d032      	beq.n	8002fee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d12b      	bne.n	8002fee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11f      	bne.n	8002fee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f043 0201 	orr.w	r2, r3, #1
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002fba:	e018      	b.n	8002fee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d111      	bne.n	8002fee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fb40 	bl	8002674 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ff4:	e00e      	b.n	8003014 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fb54 	bl	80026b0 <HAL_ADC_ErrorCallback>
}
 8003008:	e004      	b.n	8003014 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f7ff fb2c 	bl	8002688 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f043 0204 	orr.w	r2, r3, #4
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f7ff fb26 	bl	80026b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	@ (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	@ (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	6039      	str	r1, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	db0a      	blt.n	800319a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	490c      	ldr	r1, [pc, #48]	@ (80031bc <__NVIC_SetPriority+0x4c>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	440b      	add	r3, r1
 8003194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003198:	e00a      	b.n	80031b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4908      	ldr	r1, [pc, #32]	@ (80031c0 <__NVIC_SetPriority+0x50>)
 80031a0:	79fb      	ldrb	r3, [r7, #7]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	3b04      	subs	r3, #4
 80031a8:	0112      	lsls	r2, r2, #4
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	440b      	add	r3, r1
 80031ae:	761a      	strb	r2, [r3, #24]
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100
 80031c0:	e000ed00 	.word	0xe000ed00

080031c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f1c3 0307 	rsb	r3, r3, #7
 80031de:	2b04      	cmp	r3, #4
 80031e0:	bf28      	it	cs
 80031e2:	2304      	movcs	r3, #4
 80031e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3304      	adds	r3, #4
 80031ea:	2b06      	cmp	r3, #6
 80031ec:	d902      	bls.n	80031f4 <NVIC_EncodePriority+0x30>
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3b03      	subs	r3, #3
 80031f2:	e000      	b.n	80031f6 <NVIC_EncodePriority+0x32>
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f8:	f04f 32ff 	mov.w	r2, #4294967295
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	401a      	ands	r2, r3
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800320c:	f04f 31ff 	mov.w	r1, #4294967295
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	43d9      	mvns	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	4313      	orrs	r3, r2
         );
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3b01      	subs	r3, #1
 8003238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800323c:	d301      	bcc.n	8003242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800323e:	2301      	movs	r3, #1
 8003240:	e00f      	b.n	8003262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <SysTick_Config+0x40>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324a:	210f      	movs	r1, #15
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	f7ff ff8e 	bl	8003170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <SysTick_Config+0x40>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325a:	4b04      	ldr	r3, [pc, #16]	@ (800326c <SysTick_Config+0x40>)
 800325c:	2207      	movs	r2, #7
 800325e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	e000e010 	.word	0xe000e010

08003270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff29 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	4603      	mov	r3, r0
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003294:	f7ff ff40 	bl	8003118 <__NVIC_GetPriorityGrouping>
 8003298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6978      	ldr	r0, [r7, #20]
 80032a0:	f7ff ff90 	bl	80031c4 <NVIC_EncodePriority>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff5f 	bl	8003170 <__NVIC_SetPriority>
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff33 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff ffa4 	bl	800322c <SysTick_Config>
 80032e4:	4603      	mov	r3, r0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e08e      	b.n	8003420 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_DMA_Init+0x138>)
 800330a:	429a      	cmp	r2, r3
 800330c:	d80f      	bhi.n	800332e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	4b45      	ldr	r3, [pc, #276]	@ (800342c <HAL_DMA_Init+0x13c>)
 8003316:	4413      	add	r3, r2
 8003318:	4a45      	ldr	r2, [pc, #276]	@ (8003430 <HAL_DMA_Init+0x140>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	009a      	lsls	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a42      	ldr	r2, [pc, #264]	@ (8003434 <HAL_DMA_Init+0x144>)
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40
 800332c:	e00e      	b.n	800334c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <HAL_DMA_Init+0x148>)
 8003336:	4413      	add	r3, r2
 8003338:	4a3d      	ldr	r2, [pc, #244]	@ (8003430 <HAL_DMA_Init+0x140>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	009a      	lsls	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a3c      	ldr	r2, [pc, #240]	@ (800343c <HAL_DMA_Init+0x14c>)
 800334a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa24 	bl	80037ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ac:	d102      	bne.n	80033b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80033c0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033ca:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d010      	beq.n	80033f6 <HAL_DMA_Init+0x106>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d80c      	bhi.n	80033f6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fa43 	bl	8003868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	e008      	b.n	8003408 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40020407 	.word	0x40020407
 800342c:	bffdfff8 	.word	0xbffdfff8
 8003430:	cccccccd 	.word	0xcccccccd
 8003434:	40020000 	.word	0x40020000
 8003438:	bffdfbf8 	.word	0xbffdfbf8
 800343c:	40020400 	.word	0x40020400

08003440 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_DMA_Start_IT+0x20>
 800345c:	2302      	movs	r3, #2
 800345e:	e066      	b.n	800352e <HAL_DMA_Start_IT+0xee>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d155      	bne.n	8003520 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 f968 	bl	800376e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f042 020e 	orr.w	r2, r2, #14
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00f      	b.n	80034d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0204 	bic.w	r2, r2, #4
 80034c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 020a 	orr.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d007      	beq.n	80034f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d007      	beq.n	800350e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800350c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e005      	b.n	800352c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003528:	2302      	movs	r3, #2
 800352a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800352c:	7dfb      	ldrb	r3, [r7, #23]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d005      	beq.n	800355a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e047      	b.n	80035ea <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 020e 	bic.w	r2, r2, #14
 8003568:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003588:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f003 021c 	and.w	r2, r3, #28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	2101      	movs	r1, #1
 8003598:	fa01 f202 	lsl.w	r2, r1, r2
 800359c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00c      	beq.n	80035ca <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035be:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035c8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
    }
  }
  return status;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003610:	f003 031c 	and.w	r3, r3, #28
 8003614:	2204      	movs	r2, #4
 8003616:	409a      	lsls	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d026      	beq.n	800366e <HAL_DMA_IRQHandler+0x7a>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	d021      	beq.n	800366e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	f003 021c 	and.w	r2, r3, #28
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2104      	movs	r1, #4
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	d071      	beq.n	8003748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800366c:	e06c      	b.n	8003748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f003 031c 	and.w	r3, r3, #28
 8003676:	2202      	movs	r2, #2
 8003678:	409a      	lsls	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02e      	beq.n	80036e0 <HAL_DMA_IRQHandler+0xec>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d029      	beq.n	80036e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 020a 	bic.w	r2, r2, #10
 80036a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f003 021c 	and.w	r2, r3, #28
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2102      	movs	r1, #2
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d038      	beq.n	8003748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036de:	e033      	b.n	8003748 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	f003 031c 	and.w	r3, r3, #28
 80036e8:	2208      	movs	r2, #8
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02a      	beq.n	800374a <HAL_DMA_IRQHandler+0x156>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d025      	beq.n	800374a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 020e 	bic.w	r2, r2, #14
 800370c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f003 021c 	and.w	r2, r3, #28
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2101      	movs	r1, #1
 800371c:	fa01 f202 	lsl.w	r2, r1, r2
 8003720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373c:	2b00      	cmp	r3, #0
 800373e:	d004      	beq.n	800374a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003748:	bf00      	nop
 800374a:	bf00      	nop
}
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003760:	b2db      	uxtb	r3, r3
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003784:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	2b00      	cmp	r3, #0
 800378c:	d004      	beq.n	8003798 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003796:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f003 021c 	and.w	r2, r3, #28
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f202 	lsl.w	r2, r1, r2
 80037aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d108      	bne.n	80037ce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037cc:	e007      	b.n	80037de <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	60da      	str	r2, [r3, #12]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d80a      	bhi.n	8003816 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003804:	089b      	lsrs	r3, r3, #2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800380c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6493      	str	r3, [r2, #72]	@ 0x48
 8003814:	e007      	b.n	8003826 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	009a      	lsls	r2, r3, #2
 800381e:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003820:	4413      	add	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	3b08      	subs	r3, #8
 800382e:	4a0c      	ldr	r2, [pc, #48]	@ (8003860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003830:	fba2 2303 	umull	r2, r3, r2, r3
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0a      	ldr	r2, [pc, #40]	@ (8003864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800383c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2201      	movs	r2, #1
 8003846:	409a      	lsls	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40020407 	.word	0x40020407
 800385c:	4002081c 	.word	0x4002081c
 8003860:	cccccccd 	.word	0xcccccccd
 8003864:	40020880 	.word	0x40020880

08003868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003878:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	461a      	mov	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800388c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2201      	movs	r2, #1
 8003898:	409a      	lsls	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800389e:	bf00      	nop
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	1000823f 	.word	0x1000823f
 80038b0:	40020940 	.word	0x40020940

080038b4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	e14c      	b.n	8003b5e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 813e 	beq.w	8003b58 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d005      	beq.n	80038f4 <HAL_GPIO_Init+0x40>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d130      	bne.n	8003956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800392a:	2201      	movs	r2, #1
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0201 	and.w	r2, r3, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d017      	beq.n	8003992 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d123      	bne.n	80039e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	6939      	ldr	r1, [r7, #16]
 80039e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0203 	and.w	r2, r3, #3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8098 	beq.w	8003b58 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_GPIO_Init+0x2c8>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	220f      	movs	r2, #15
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a52:	d019      	beq.n	8003a88 <HAL_GPIO_Init+0x1d4>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a4a      	ldr	r2, [pc, #296]	@ (8003b80 <HAL_GPIO_Init+0x2cc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_GPIO_Init+0x1d0>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a49      	ldr	r2, [pc, #292]	@ (8003b84 <HAL_GPIO_Init+0x2d0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00d      	beq.n	8003a80 <HAL_GPIO_Init+0x1cc>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a48      	ldr	r2, [pc, #288]	@ (8003b88 <HAL_GPIO_Init+0x2d4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <HAL_GPIO_Init+0x1c8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a47      	ldr	r2, [pc, #284]	@ (8003b8c <HAL_GPIO_Init+0x2d8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_GPIO_Init+0x1c4>
 8003a74:	2304      	movs	r3, #4
 8003a76:	e008      	b.n	8003a8a <HAL_GPIO_Init+0x1d6>
 8003a78:	2307      	movs	r3, #7
 8003a7a:	e006      	b.n	8003a8a <HAL_GPIO_Init+0x1d6>
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e004      	b.n	8003a8a <HAL_GPIO_Init+0x1d6>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e002      	b.n	8003a8a <HAL_GPIO_Init+0x1d6>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <HAL_GPIO_Init+0x1d6>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	f002 0203 	and.w	r2, r2, #3
 8003a90:	0092      	lsls	r2, r2, #2
 8003a92:	4093      	lsls	r3, r2
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a9a:	4938      	ldr	r1, [pc, #224]	@ (8003b7c <HAL_GPIO_Init+0x2c8>)
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	3302      	adds	r3, #2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa8:	4b39      	ldr	r3, [pc, #228]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003acc:	4a30      	ldr	r2, [pc, #192]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af6:	4a26      	ldr	r2, [pc, #152]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b22:	4a1b      	ldr	r2, [pc, #108]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003b2a:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b50:	4a0f      	ldr	r2, [pc, #60]	@ (8003b90 <HAL_GPIO_Init+0x2dc>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f aeab 	bne.w	80038c4 <HAL_GPIO_Init+0x10>
  }
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	48000400 	.word	0x48000400
 8003b84:	48000800 	.word	0x48000800
 8003b88:	48000c00 	.word	0x48000c00
 8003b8c:	48001000 	.word	0x48001000
 8003b90:	58000800 	.word	0x58000800

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43d9      	mvns	r1, r3
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	400b      	ands	r3, r1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e08d      	b.n	8003d26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fcb6 	bl	8001590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	@ 0x24
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e006      	b.n	8003c80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d108      	bne.n	8003c9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e007      	b.n	8003caa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ca8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ccc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69d9      	ldr	r1, [r3, #28]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00f      	beq.n	8003da4 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f043 0201 	orr.w	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003da2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00f      	beq.n	8003dce <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dbc:	f043 0208 	orr.w	r2, r3, #8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dcc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003df6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 030b 	and.w	r3, r3, #11
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fbd6 	bl	80045bc <I2C_ITError>
  }
}
 8003e10:	bf00      	nop
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <I2C_Slave_ISR_IT+0x24>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0e2      	b.n	8004082 <I2C_Slave_ISR_IT+0x1ea>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d004      	beq.n	8003ee2 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f9b6 	bl	800424c <I2C_ITSlaveCplt>
 8003ee0:	e0ca      	b.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d04b      	beq.n	8003f84 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d046      	beq.n	8003f84 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d128      	bne.n	8003f52 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b28      	cmp	r3, #40	@ 0x28
 8003f0a:	d108      	bne.n	8003f1e <I2C_Slave_ISR_IT+0x86>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f12:	d104      	bne.n	8003f1e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f14:	6939      	ldr	r1, [r7, #16]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fafc 	bl	8004514 <I2C_ITListenCplt>
 8003f1c:	e031      	b.n	8003f82 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b29      	cmp	r3, #41	@ 0x29
 8003f28:	d10e      	bne.n	8003f48 <I2C_Slave_ISR_IT+0xb0>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f30:	d00a      	beq.n	8003f48 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2210      	movs	r2, #16
 8003f38:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fc55 	bl	80047ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f926 	bl	8004192 <I2C_ITSlaveSeqCplt>
 8003f46:	e01c      	b.n	8003f82 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f50:	e08f      	b.n	8004072 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2210      	movs	r2, #16
 8003f58:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <I2C_Slave_ISR_IT+0xdc>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f72:	d17e      	bne.n	8004072 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f78:	4619      	mov	r1, r3
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fb1e 	bl	80045bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f80:	e077      	b.n	8004072 <I2C_Slave_ISR_IT+0x1da>
 8003f82:	e076      	b.n	8004072 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d02f      	beq.n	8003fee <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02a      	beq.n	8003fee <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d018      	beq.n	8003fd4 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d14b      	bne.n	8004076 <I2C_Slave_ISR_IT+0x1de>
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fe4:	d047      	beq.n	8004076 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f8d3 	bl	8004192 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003fec:	e043      	b.n	8004076 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004002:	6939      	ldr	r1, [r7, #16]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f840 	bl	800408a <I2C_ITAddrCplt>
 800400a:	e035      	b.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d030      	beq.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02b      	beq.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	781a      	ldrb	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
 800405a:	e00d      	b.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004062:	d002      	beq.n	800406a <I2C_Slave_ISR_IT+0x1d2>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f891 	bl	8004192 <I2C_ITSlaveSeqCplt>
 8004070:	e002      	b.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004076:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040a0:	2b28      	cmp	r3, #40	@ 0x28
 80040a2:	d16a      	bne.n	800417a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80040c2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040d0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80040de:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d138      	bne.n	800415a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80040e8:	897b      	ldrh	r3, [r7, #10]
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	89bb      	ldrh	r3, [r7, #12]
 80040f0:	4053      	eors	r3, r2
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f003 0306 	and.w	r3, r3, #6
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11c      	bne.n	8004136 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80040fc:	897b      	ldrh	r3, [r7, #10]
 80040fe:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410e:	2b02      	cmp	r3, #2
 8004110:	d13b      	bne.n	800418a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2208      	movs	r2, #8
 800411e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004128:	89ba      	ldrh	r2, [r7, #12]
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff fe86 	bl	8003e40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004134:	e029      	b.n	800418a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004136:	893b      	ldrh	r3, [r7, #8]
 8004138:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800413a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fb95 	bl	800486e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800414c:	89ba      	ldrh	r2, [r7, #12]
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fe74 	bl	8003e40 <HAL_I2C_AddrCallback>
}
 8004158:	e017      	b.n	800418a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800415a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb85 	bl	800486e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800416c:	89ba      	ldrh	r2, [r7, #12]
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff fe64 	bl	8003e40 <HAL_I2C_AddrCallback>
}
 8004178:	e007      	b.n	800418a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2208      	movs	r2, #8
 8004180:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e00c      	b.n	80041e0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b29      	cmp	r3, #41	@ 0x29
 80041ea:	d112      	bne.n	8004212 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2228      	movs	r2, #40	@ 0x28
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2221      	movs	r2, #33	@ 0x21
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041fa:	2101      	movs	r1, #1
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb36 	bl	800486e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff fe04 	bl	8003e18 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004210:	e017      	b.n	8004242 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b2a      	cmp	r3, #42	@ 0x2a
 800421c:	d111      	bne.n	8004242 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2228      	movs	r2, #40	@ 0x28
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2222      	movs	r2, #34	@ 0x22
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800422c:	2102      	movs	r1, #2
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fb1d 	bl	800486e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fdf5 	bl	8003e2c <HAL_I2C_SlaveRxCpltCallback>
}
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2220      	movs	r2, #32
 8004276:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004278:	7afb      	ldrb	r3, [r7, #11]
 800427a:	2b21      	cmp	r3, #33	@ 0x21
 800427c:	d002      	beq.n	8004284 <I2C_ITSlaveCplt+0x38>
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	2b29      	cmp	r3, #41	@ 0x29
 8004282:	d108      	bne.n	8004296 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004284:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 faf0 	bl	800486e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2221      	movs	r2, #33	@ 0x21
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30
 8004294:	e019      	b.n	80042ca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	2b22      	cmp	r3, #34	@ 0x22
 800429a:	d002      	beq.n	80042a2 <I2C_ITSlaveCplt+0x56>
 800429c:	7afb      	ldrb	r3, [r7, #11]
 800429e:	2b2a      	cmp	r3, #42	@ 0x2a
 80042a0:	d108      	bne.n	80042b4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042a2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fae1 	bl	800486e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2222      	movs	r2, #34	@ 0x22
 80042b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b2:	e00a      	b.n	80042ca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80042b4:	7afb      	ldrb	r3, [r7, #11]
 80042b6:	2b28      	cmp	r3, #40	@ 0x28
 80042b8:	d107      	bne.n	80042ca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80042ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fad5 	bl	800486e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6859      	ldr	r1, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b89      	ldr	r3, [pc, #548]	@ (800450c <I2C_ITSlaveCplt+0x2c0>)
 80042e6:	400b      	ands	r3, r1
 80042e8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fa7d 	bl	80047ea <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d013      	beq.n	8004322 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004308:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004320:	e017      	b.n	8004352 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d012      	beq.n	8004352 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800433a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0304 	bic.w	r3, r3, #4
 8004362:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00c      	beq.n	800439e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	f043 0204 	orr.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d049      	beq.n	8004452 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d044      	beq.n	8004452 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d128      	bne.n	8004424 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b28      	cmp	r3, #40	@ 0x28
 80043dc:	d108      	bne.n	80043f0 <I2C_ITSlaveCplt+0x1a4>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043e4:	d104      	bne.n	80043f0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80043e6:	6979      	ldr	r1, [r7, #20]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f893 	bl	8004514 <I2C_ITListenCplt>
 80043ee:	e030      	b.n	8004452 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b29      	cmp	r3, #41	@ 0x29
 80043fa:	d10e      	bne.n	800441a <I2C_ITSlaveCplt+0x1ce>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004402:	d00a      	beq.n	800441a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f9ec 	bl	80047ea <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff febd 	bl	8004192 <I2C_ITSlaveSeqCplt>
 8004418:	e01b      	b.n	8004452 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	e016      	b.n	8004452 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2210      	movs	r2, #16
 800442a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	f043 0204 	orr.w	r2, r3, #4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <I2C_ITSlaveCplt+0x1fa>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004444:	d105      	bne.n	8004452 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f8b5 	bl	80045bc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8a4 	bl	80045bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b28      	cmp	r3, #40	@ 0x28
 800447e:	d141      	bne.n	8004504 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004480:	6979      	ldr	r1, [r7, #20]
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f846 	bl	8004514 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004488:	e03c      	b.n	8004504 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004492:	d014      	beq.n	80044be <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff fe7c 	bl	8004192 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1c      	ldr	r2, [pc, #112]	@ (8004510 <I2C_ITSlaveCplt+0x2c4>)
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fcd0 	bl	8003e5c <HAL_I2C_ListenCpltCallback>
}
 80044bc:	e022      	b.n	8004504 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b22      	cmp	r3, #34	@ 0x22
 80044c8:	d10e      	bne.n	80044e8 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7ff fca3 	bl	8003e2c <HAL_I2C_SlaveRxCpltCallback>
}
 80044e6:	e00d      	b.n	8004504 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fc8a 	bl	8003e18 <HAL_I2C_SlaveTxCpltCallback>
}
 8004504:	bf00      	nop
 8004506:	3718      	adds	r7, #24
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	fe00e800 	.word	0xfe00e800
 8004510:	ffff0000 	.word	0xffff0000

08004514 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a25      	ldr	r2, [pc, #148]	@ (80045b8 <I2C_ITListenCplt+0xa4>)
 8004522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d022      	beq.n	8004590 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d012      	beq.n	8004590 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004588:	f043 0204 	orr.w	r2, r3, #4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004590:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f96a 	bl	800486e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff fc56 	bl	8003e5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	ffff0000 	.word	0xffff0000

080045bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045cc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004790 <I2C_ITError+0x1d4>)
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
 80045f0:	2b28      	cmp	r3, #40	@ 0x28
 80045f2:	d005      	beq.n	8004600 <I2C_ITError+0x44>
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b29      	cmp	r3, #41	@ 0x29
 80045f8:	d002      	beq.n	8004600 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fe:	d10b      	bne.n	8004618 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004600:	2103      	movs	r1, #3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f933 	bl	800486e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2228      	movs	r2, #40	@ 0x28
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a60      	ldr	r2, [pc, #384]	@ (8004794 <I2C_ITError+0x1d8>)
 8004614:	635a      	str	r2, [r3, #52]	@ 0x34
 8004616:	e030      	b.n	800467a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004618:	f248 0103 	movw	r1, #32771	@ 0x8003
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f926 	bl	800486e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8e1 	bl	80047ea <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b60      	cmp	r3, #96	@ 0x60
 8004632:	d01f      	beq.n	8004674 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0320 	and.w	r3, r3, #32
 8004646:	2b20      	cmp	r3, #32
 8004648:	d114      	bne.n	8004674 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b10      	cmp	r3, #16
 8004656:	d109      	bne.n	800466c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2210      	movs	r2, #16
 800465e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	f043 0204 	orr.w	r2, r3, #4
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2220      	movs	r2, #32
 8004672:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d039      	beq.n	80046fc <I2C_ITError+0x140>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2b11      	cmp	r3, #17
 800468c:	d002      	beq.n	8004694 <I2C_ITError+0xd8>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b21      	cmp	r3, #33	@ 0x21
 8004692:	d133      	bne.n	80046fc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800469e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046a2:	d107      	bne.n	80046b4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff f84a 	bl	8003752 <HAL_DMA_GetState>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d017      	beq.n	80046f4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	4a33      	ldr	r2, [pc, #204]	@ (8004798 <I2C_ITError+0x1dc>)
 80046ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe ff2c 	bl	8003536 <HAL_DMA_Abort_IT>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d04d      	beq.n	8004780 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046ee:	4610      	mov	r0, r2
 80046f0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f2:	e045      	b.n	8004780 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f851 	bl	800479c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046fa:	e041      	b.n	8004780 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d039      	beq.n	8004778 <I2C_ITError+0x1bc>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b12      	cmp	r3, #18
 8004708:	d002      	beq.n	8004710 <I2C_ITError+0x154>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b22      	cmp	r3, #34	@ 0x22
 800470e:	d133      	bne.n	8004778 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800471e:	d107      	bne.n	8004730 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800472e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f80c 	bl	8003752 <HAL_DMA_GetState>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d017      	beq.n	8004770 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004744:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <I2C_ITError+0x1dc>)
 8004746:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe feee 	bl	8003536 <HAL_DMA_Abort_IT>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d011      	beq.n	8004784 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800476a:	4610      	mov	r0, r2
 800476c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800476e:	e009      	b.n	8004784 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f813 	bl	800479c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004776:	e005      	b.n	8004784 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f80f 	bl	800479c <I2C_TreatErrorCallback>
  }
}
 800477e:	e002      	b.n	8004786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004780:	bf00      	nop
 8004782:	e000      	b.n	8004786 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004784:	bf00      	nop
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	ffff0000 	.word	0xffff0000
 8004794:	08003e99 	.word	0x08003e99
 8004798:	08004833 	.word	0x08004833

0800479c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b60      	cmp	r3, #96	@ 0x60
 80047ae:	d10e      	bne.n	80047ce <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fb5c 	bl	8003e84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047cc:	e009      	b.n	80047e2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fb47 	bl	8003e70 <HAL_I2C_ErrorCallback>
}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d103      	bne.n	8004808 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2200      	movs	r2, #0
 8004806:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d007      	beq.n	8004826 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699a      	ldr	r2, [r3, #24]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	619a      	str	r2, [r3, #24]
  }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	2200      	movs	r2, #0
 800484e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	2200      	movs	r2, #0
 800485e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ff9b 	bl	800479c <I2C_TreatErrorCallback>
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800487e:	887b      	ldrh	r3, [r7, #2]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00f      	beq.n	80048a8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800488e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800489c:	2b28      	cmp	r3, #40	@ 0x28
 800489e:	d003      	beq.n	80048a8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80048a6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048a8:	887b      	ldrh	r3, [r7, #2]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00f      	beq.n	80048d2 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80048b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048c6:	2b28      	cmp	r3, #40	@ 0x28
 80048c8:	d003      	beq.n	80048d2 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80048d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da03      	bge.n	80048e2 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	2b10      	cmp	r3, #16
 80048e6:	d103      	bne.n	80048f0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048f0:	887b      	ldrh	r3, [r7, #2]
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d103      	bne.n	80048fe <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f043 0320 	orr.w	r3, r3, #32
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d103      	bne.n	800490c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800490a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	43da      	mvns	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	400a      	ands	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	d138      	bne.n	80049b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800494a:	2302      	movs	r3, #2
 800494c:	e032      	b.n	80049b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2224      	movs	r2, #36	@ 0x24
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800497c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e000      	b.n	80049b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d139      	bne.n	8004a4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e033      	b.n	8004a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2224      	movs	r2, #36	@ 0x24
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e0c0      	b.n	8004bec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f009 fa3c 	bl	800defc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2203      	movs	r2, #3
 8004a88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fd78 	bl	8009586 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	e03e      	b.n	8004b1a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3311      	adds	r3, #17
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ab0:	7bfa      	ldrb	r2, [r7, #15]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	440b      	add	r3, r1
 8004abe:	3310      	adds	r3, #16
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3313      	adds	r3, #19
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3320      	adds	r3, #32
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	440b      	add	r3, r1
 8004afa:	3324      	adds	r3, #36	@ 0x24
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	440b      	add	r3, r1
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	3301      	adds	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3bb      	bcc.n	8004a9c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b24:	2300      	movs	r3, #0
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e044      	b.n	8004bb4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b40:	7bfa      	ldrb	r2, [r7, #15]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b56:	7bfa      	ldrb	r2, [r7, #15]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	440b      	add	r3, r1
 8004b64:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b6c:	7bfa      	ldrb	r2, [r7, #15]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	440b      	add	r3, r1
 8004b7a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b82:	7bfa      	ldrb	r2, [r7, #15]
 8004b84:	6879      	ldr	r1, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	440b      	add	r3, r1
 8004b90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b98:	7bfa      	ldrb	r2, [r7, #15]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	440b      	add	r3, r1
 8004ba6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	791b      	ldrb	r3, [r3, #4]
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3b5      	bcc.n	8004b2a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004bca:	f004 fcf7 	bl	80095bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7a9b      	ldrb	r3, [r3, #10]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d102      	bne.n	8004bea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fc40 	bl	800646a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_PCD_Start+0x16>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e012      	b.n	8004c30 <HAL_PCD_Start+0x3c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f004 fc9e 	bl	8009558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f006 ff5e 	bl	800bae2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f006 ff63 	bl	800bb10 <USB_ReadInterrupts>
 8004c4a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb04 	bl	8005264 <PCD_EP_ISR_Handler>

    return;
 8004c5c:	e110      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f009 f9d0 	bl	800e026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004c86:	2100      	movs	r1, #0
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8fc 	bl	8004e86 <HAL_PCD_SetAddress>

    return;
 8004c8e:	e0f7      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cac:	b292      	uxth	r2, r2
 8004cae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cb2:	e0e5      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004cd6:	e0d3      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d034      	beq.n	8004d4c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0204 	bic.w	r2, r2, #4
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0208 	bic.w	r2, r2, #8
 8004d0c:	b292      	uxth	r2, r2
 8004d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d24:	2100      	movs	r1, #0
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f009 fb72 	bl	800e410 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f009 f9b3 	bl	800e098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d44:	b292      	uxth	r2, r2
 8004d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d4a:	e099      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d027      	beq.n	8004da6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0208 	orr.w	r2, r2, #8
 8004d68:	b292      	uxth	r2, r2
 8004d6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d80:	b292      	uxth	r2, r2
 8004d82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0204 	orr.w	r2, r2, #4
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f009 f960 	bl	800e064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004da4:	e06c      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d040      	beq.n	8004e32 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dc2:	b292      	uxth	r2, r2
 8004dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d12b      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0204 	orr.w	r2, r2, #4
 8004de4:	b292      	uxth	r2, r2
 8004de6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	b292      	uxth	r2, r2
 8004dfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	089b      	lsrs	r3, r3, #2
 8004e16:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004e20:	2101      	movs	r1, #1
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f009 faf4 	bl	800e410 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004e28:	e02a      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f009 f91a 	bl	800e064 <HAL_PCD_SuspendCallback>
    return;
 8004e30:	e026      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00f      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f009 f8d8 	bl	800e00a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004e5a:	e011      	b.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00c      	beq.n	8004e80 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004e7e:	bf00      	nop
  }
}
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_PCD_SetAddress+0x1a>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e012      	b.n	8004ec6 <HAL_PCD_SetAddress+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	78fa      	ldrb	r2, [r7, #3]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f006 fdff 	bl	800baba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	4611      	mov	r1, r2
 8004eda:	461a      	mov	r2, r3
 8004edc:	4603      	mov	r3, r0
 8004ede:	70fb      	strb	r3, [r7, #3]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	803b      	strh	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da0e      	bge.n	8004f12 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	f003 0207 	and.w	r2, r3, #7
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	3310      	adds	r3, #16
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	705a      	strb	r2, [r3, #1]
 8004f10:	e00e      	b.n	8004f30 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	f003 0207 	and.w	r2, r3, #7
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	4413      	add	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004f3c:	883a      	ldrh	r2, [r7, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	78ba      	ldrb	r2, [r7, #2]
 8004f46:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004f48:	78bb      	ldrb	r3, [r7, #2]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d102      	bne.n	8004f54 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_PCD_EP_Open+0x94>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e00e      	b.n	8004f80 <HAL_PCD_EP_Open+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 fb41 	bl	80095f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	da0e      	bge.n	8004fba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	f003 0207 	and.w	r2, r3, #7
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	3310      	adds	r3, #16
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4413      	add	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	705a      	strb	r2, [r3, #1]
 8004fb8:	e00e      	b.n	8004fd8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 0207 	and.w	r2, r3, #7
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d101      	bne.n	8004ff2 <HAL_PCD_EP_Close+0x6a>
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e00e      	b.n	8005010 <HAL_PCD_EP_Close+0x88>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	4618      	mov	r0, r3
 8005002:	f004 febd 	bl	8009d80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3710      	adds	r7, #16
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607a      	str	r2, [r7, #4]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	460b      	mov	r3, r1
 8005026:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005028:	7afb      	ldrb	r3, [r7, #11]
 800502a:	f003 0207 	and.w	r2, r3, #7
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2200      	movs	r2, #0
 8005050:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005058:	7afb      	ldrb	r3, [r7, #11]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	b2da      	uxtb	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	4618      	mov	r0, r3
 800506c:	f005 f875 	bl	800a15a <USB_EPStartXfer>

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	f003 0207 	and.w	r2, r3, #7
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	440b      	add	r3, r1
 8005098:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800509c:	681b      	ldr	r3, [r3, #0]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	460b      	mov	r3, r1
 80050b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ba:	7afb      	ldrb	r3, [r7, #11]
 80050bc:	f003 0207 	and.w	r2, r3, #7
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3310      	adds	r3, #16
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2201      	movs	r2, #1
 80050f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	4618      	mov	r0, r3
 800510a:	f005 f826 	bl	800a15a <USB_EPStartXfer>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005124:	78fb      	ldrb	r3, [r7, #3]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	7912      	ldrb	r2, [r2, #4]
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e03e      	b.n	80051b4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	da0e      	bge.n	800515c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	f003 0207 	and.w	r2, r3, #7
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3310      	adds	r3, #16
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	705a      	strb	r2, [r3, #1]
 800515a:	e00c      	b.n	8005176 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_PCD_EP_SetStall+0x7e>
 8005192:	2302      	movs	r3, #2
 8005194:	e00e      	b.n	80051b4 <HAL_PCD_EP_SetStall+0x9c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f006 fb89 	bl	800b8bc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	7912      	ldrb	r2, [r2, #4]
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e040      	b.n	800525c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da0e      	bge.n	8005200 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	f003 0207 	and.w	r2, r3, #7
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	3310      	adds	r3, #16
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	705a      	strb	r2, [r3, #1]
 80051fe:	e00e      	b.n	800521e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	f003 0207 	and.w	r2, r3, #7
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_PCD_EP_ClrStall+0x82>
 800523a:	2302      	movs	r3, #2
 800523c:	e00e      	b.n	800525c <HAL_PCD_EP_ClrStall+0xa0>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	4618      	mov	r0, r3
 800524e:	f006 fb86 	bl	800b95e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b096      	sub	sp, #88	@ 0x58
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800526c:	e3ad      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005276:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800527a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005288:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 816f 	bne.w	8005570 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d14c      	bne.n	8005338 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80052aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ae:	81fb      	strh	r3, [r7, #14]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	89fb      	ldrh	r3, [r7, #14]
 80052b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3310      	adds	r3, #16
 80052c6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4413      	add	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80052f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	441a      	add	r2, r3
 80052fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f008 fe68 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7b1b      	ldrb	r3, [r3, #12]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 835c 	beq.w	80059ca <PCD_EP_ISR_Handler+0x766>
 8005312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f040 8357 	bne.w	80059ca <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7b1b      	ldrb	r3, [r3, #12]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005326:	b2da      	uxtb	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	731a      	strb	r2, [r3, #12]
 8005336:	e348      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800533e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800534a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800534e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005352:	2b00      	cmp	r3, #0
 8005354:	d032      	beq.n	80053bc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	4413      	add	r3, r2
 8005370:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800538c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005390:	b29b      	uxth	r3, r3
 8005392:	f006 fc0f 	bl	800bbb4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29a      	uxth	r2, r3
 800539e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053a2:	4013      	ands	r3, r2
 80053a4:	823b      	strh	r3, [r7, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	8a3a      	ldrh	r2, [r7, #16]
 80053ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053b0:	b292      	uxth	r2, r2
 80053b2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f008 fde1 	bl	800df7c <HAL_PCD_SetupStageCallback>
 80053ba:	e306      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80053bc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f280 8302 	bge.w	80059ca <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80053d2:	4013      	ands	r3, r2
 80053d4:	83fb      	strh	r3, [r7, #30]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	8bfa      	ldrh	r2, [r7, #30]
 80053dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80053e0:	b292      	uxth	r2, r2
 80053e2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	461a      	mov	r2, r3
 80053f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800540c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d019      	beq.n	8005448 <PCD_EP_ISR_Handler+0x1e4>
 8005414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d015      	beq.n	8005448 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005422:	6959      	ldr	r1, [r3, #20]
 8005424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005426:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800542c:	b29b      	uxth	r3, r3
 800542e:	f006 fbc1 	bl	800bbb4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005434:	695a      	ldr	r2, [r3, #20]
 8005436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	441a      	add	r2, r3
 800543c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005440:	2100      	movs	r1, #0
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f008 fdac 	bl	800dfa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005452:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 82b5 	bne.w	80059ca <PCD_EP_ISR_Handler+0x766>
 8005460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005464:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005468:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800546c:	f000 82ad 	beq.w	80059ca <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	4413      	add	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800549a:	b29a      	uxth	r2, r3
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	801a      	strh	r2, [r3, #0]
 80054a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80054a6:	d91d      	bls.n	80054e4 <PCD_EP_ISR_Handler+0x280>
 80054a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 031f 	and.w	r3, r3, #31
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <PCD_EP_ISR_Handler+0x25e>
 80054bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054be:	3b01      	subs	r3, #1
 80054c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	4313      	orrs	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054dc:	b29a      	uxth	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	801a      	strh	r2, [r3, #0]
 80054e2:	e026      	b.n	8005532 <PCD_EP_ISR_Handler+0x2ce>
 80054e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <PCD_EP_ISR_Handler+0x29e>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	e017      	b.n	8005532 <PCD_EP_ISR_Handler+0x2ce>
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	647b      	str	r3, [r7, #68]	@ 0x44
 800550a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <PCD_EP_ISR_Handler+0x2b8>
 8005516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005518:	3301      	adds	r3, #1
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29a      	uxth	r2, r3
 8005522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005524:	b29b      	uxth	r3, r3
 8005526:	029b      	lsls	r3, r3, #10
 8005528:	b29b      	uxth	r3, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	b29a      	uxth	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800553e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005542:	827b      	strh	r3, [r7, #18]
 8005544:	8a7b      	ldrh	r3, [r7, #18]
 8005546:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800554a:	827b      	strh	r3, [r7, #18]
 800554c:	8a7b      	ldrh	r3, [r7, #18]
 800554e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005552:	827b      	strh	r3, [r7, #18]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	8a7b      	ldrh	r3, [r7, #18]
 800555a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800555e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800556a:	b29b      	uxth	r3, r3
 800556c:	8013      	strh	r3, [r2, #0]
 800556e:	e22c      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005584:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005588:	2b00      	cmp	r3, #0
 800558a:	f280 80f6 	bge.w	800577a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80055a4:	4013      	ands	r3, r2
 80055a6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80055bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055c0:	b292      	uxth	r2, r2
 80055c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80055c4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80055da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055dc:	7b1b      	ldrb	r3, [r3, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d123      	bne.n	800562a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4413      	add	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800560a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 808e 	beq.w	8005730 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	6959      	ldr	r1, [r3, #20]
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	88da      	ldrh	r2, [r3, #6]
 8005620:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005624:	f006 fac6 	bl	800bbb4 <USB_ReadPMA>
 8005628:	e082      	b.n	8005730 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800562a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562c:	78db      	ldrb	r3, [r3, #3]
 800562e:	2b02      	cmp	r3, #2
 8005630:	d10a      	bne.n	8005648 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005632:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005636:	461a      	mov	r2, r3
 8005638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9d3 	bl	80059e6 <HAL_PCD_EP_DB_Receive>
 8005640:	4603      	mov	r3, r0
 8005642:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005646:	e073      	b.n	8005730 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800565e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005662:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	441a      	add	r2, r3
 8005674:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800567c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005688:	b29b      	uxth	r3, r3
 800568a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d022      	beq.n	80056ec <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	461a      	mov	r2, r3
 80056b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4413      	add	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	4413      	add	r3, r2
 80056c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80056ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02c      	beq.n	8005730 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056dc:	6959      	ldr	r1, [r3, #20]
 80056de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e0:	891a      	ldrh	r2, [r3, #8]
 80056e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80056e6:	f006 fa65 	bl	800bbb4 <USB_ReadPMA>
 80056ea:	e021      	b.n	8005730 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	4413      	add	r3, r2
 8005706:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005710:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005714:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005722:	6959      	ldr	r1, [r3, #20]
 8005724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005726:	895a      	ldrh	r2, [r3, #10]
 8005728:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800572c:	f006 fa42 	bl	800bbb4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005738:	441a      	add	r2, r3
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005746:	441a      	add	r2, r3
 8005748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800574c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d005      	beq.n	8005760 <PCD_EP_ISR_Handler+0x4fc>
 8005754:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	429a      	cmp	r2, r3
 800575e:	d206      	bcs.n	800576e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f008 fc1a 	bl	800dfa0 <HAL_PCD_DataOutStageCallback>
 800576c:	e005      	b.n	800577a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005774:	4618      	mov	r0, r3
 8005776:	f004 fcf0 	bl	800a15a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800577a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800577e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8121 	beq.w	80059ca <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005788:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	3310      	adds	r3, #16
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80057cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80057d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057da:	78db      	ldrb	r3, [r3, #3]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	f040 80a2 	bne.w	8005926 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80057e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e4:	2200      	movs	r2, #0
 80057e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80057e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ea:	7b1b      	ldrb	r3, [r3, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8093 	beq.w	8005918 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80057f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d046      	beq.n	800588c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005800:	785b      	ldrb	r3, [r3, #1]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d126      	bne.n	8005854 <PCD_EP_ISR_Handler+0x5f0>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	4413      	add	r3, r2
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
 800581e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	00da      	lsls	r2, r3, #3
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	4413      	add	r3, r2
 8005828:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005838:	b29a      	uxth	r2, r3
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e061      	b.n	8005918 <PCD_EP_ISR_Handler+0x6b4>
 8005854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d15d      	bne.n	8005918 <PCD_EP_ISR_Handler+0x6b4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	4413      	add	r3, r2
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	00da      	lsls	r2, r3, #3
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	4413      	add	r3, r2
 800587e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2200      	movs	r2, #0
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e045      	b.n	8005918 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d126      	bne.n	80058e8 <PCD_EP_ISR_Handler+0x684>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	637b      	str	r3, [r7, #52]	@ 0x34
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	461a      	mov	r2, r3
 80058ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ae:	4413      	add	r3, r2
 80058b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80058b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	00da      	lsls	r2, r3, #3
 80058b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e017      	b.n	8005918 <PCD_EP_ISR_Handler+0x6b4>
 80058e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d113      	bne.n	8005918 <PCD_EP_ISR_Handler+0x6b4>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058fe:	4413      	add	r3, r2
 8005900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	00da      	lsls	r2, r3, #3
 8005908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590a:	4413      	add	r3, r2
 800590c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005910:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	2200      	movs	r2, #0
 8005916:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f008 fb59 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
 8005924:	e051      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005926:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800592a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d144      	bne.n	80059bc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4413      	add	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	4413      	add	r3, r2
 800594c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005956:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800595a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005962:	429a      	cmp	r2, r3
 8005964:	d907      	bls.n	8005976 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800596e:	1ad2      	subs	r2, r2, r3
 8005970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005972:	619a      	str	r2, [r3, #24]
 8005974:	e002      	b.n	800597c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005978:	2200      	movs	r2, #0
 800597a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800597c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f008 fb23 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
 8005990:	e01b      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800599a:	441a      	add	r2, r3
 800599c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80059a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80059a8:	441a      	add	r2, r3
 80059aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059b4:	4618      	mov	r0, r3
 80059b6:	f004 fbd0 	bl	800a15a <USB_EPStartXfer>
 80059ba:	e006      	b.n	80059ca <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80059bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059c0:	461a      	mov	r2, r3
 80059c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f917 	bl	8005bf8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f6ff ac49 	blt.w	800526e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3758      	adds	r7, #88	@ 0x58
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b088      	sub	sp, #32
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	4613      	mov	r3, r2
 80059f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d07c      	beq.n	8005af8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4413      	add	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	6812      	ldr	r2, [r2, #0]
 8005a16:	4413      	add	r3, r2
 8005a18:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	8b7b      	ldrh	r3, [r7, #26]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d306      	bcc.n	8005a3c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	8b7b      	ldrh	r3, [r7, #26]
 8005a34:	1ad2      	subs	r2, r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	619a      	str	r2, [r3, #24]
 8005a3a:	e002      	b.n	8005a42 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d123      	bne.n	8005a92 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a64:	833b      	strh	r3, [r7, #24]
 8005a66:	8b3b      	ldrh	r3, [r7, #24]
 8005a68:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a6c:	833b      	strh	r3, [r7, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	8b3b      	ldrh	r3, [r7, #24]
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01f      	beq.n	8005adc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	82fb      	strh	r3, [r7, #22]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	8afb      	ldrh	r3, [r7, #22]
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005adc:	8b7b      	ldrh	r3, [r7, #26]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8085 	beq.w	8005bee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	6959      	ldr	r1, [r3, #20]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	891a      	ldrh	r2, [r3, #8]
 8005af0:	8b7b      	ldrh	r3, [r7, #26]
 8005af2:	f006 f85f 	bl	800bbb4 <USB_ReadPMA>
 8005af6:	e07a      	b.n	8005bee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	699a      	ldr	r2, [r3, #24]
 8005b22:	8b7b      	ldrh	r3, [r7, #26]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d306      	bcc.n	8005b36 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	8b7b      	ldrh	r3, [r7, #26]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	619a      	str	r2, [r3, #24]
 8005b34:	e002      	b.n	8005b3c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d123      	bne.n	8005b8c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5e:	83fb      	strh	r3, [r7, #30]
 8005b60:	8bfb      	ldrh	r3, [r7, #30]
 8005b62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b66:	83fb      	strh	r3, [r7, #30]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	441a      	add	r2, r3
 8005b76:	8bfb      	ldrh	r3, [r7, #30]
 8005b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b8c:	88fb      	ldrh	r3, [r7, #6]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11f      	bne.n	8005bd6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bb0:	83bb      	strh	r3, [r7, #28]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	441a      	add	r2, r3
 8005bc0:	8bbb      	ldrh	r3, [r7, #28]
 8005bc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005bd6:	8b7b      	ldrh	r3, [r7, #26]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	6959      	ldr	r1, [r3, #20]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	895a      	ldrh	r2, [r3, #10]
 8005be8:	8b7b      	ldrh	r3, [r7, #26]
 8005bea:	f005 ffe3 	bl	800bbb4 <USB_ReadPMA>
    }
  }

  return count;
 8005bee:	8b7b      	ldrh	r3, [r7, #26]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3720      	adds	r7, #32
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b0a4      	sub	sp, #144	@ 0x90
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 81db 	beq.w	8005fc8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	4413      	add	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c36:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d907      	bls.n	8005c56 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	619a      	str	r2, [r3, #24]
 8005c54:	e002      	b.n	8005c5c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 80b9 	bne.w	8005dd8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d126      	bne.n	8005cbc <HAL_PCD_EP_DB_Transmit+0xc4>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	4413      	add	r3, r2
 8005c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	00da      	lsls	r2, r3, #3
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	4413      	add	r3, r2
 8005c90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e01a      	b.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	785b      	ldrb	r3, [r3, #1]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d116      	bne.n	8005cf2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd8:	4413      	add	r3, r2
 8005cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	00da      	lsls	r2, r3, #3
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d126      	bne.n	8005d4e <HAL_PCD_EP_DB_Transmit+0x156>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	4413      	add	r3, r2
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	e017      	b.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x186>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d113      	bne.n	8005d7e <HAL_PCD_EP_DB_Transmit+0x186>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	4413      	add	r3, r2
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	00da      	lsls	r2, r3, #3
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	4413      	add	r3, r2
 8005d72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d76:	623b      	str	r3, [r7, #32]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f008 f926 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 82fa 	beq.w	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db0:	82fb      	strh	r3, [r7, #22]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	8afb      	ldrh	r3, [r7, #22]
 8005dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8013      	strh	r3, [r2, #0]
 8005dd6:	e2d8      	b.n	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dd8:	88fb      	ldrh	r3, [r7, #6]
 8005dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d021      	beq.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	f040 82ac 	bne.w	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e3a:	441a      	add	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e48:	441a      	add	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d30b      	bcc.n	8005e72 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6a1a      	ldr	r2, [r3, #32]
 8005e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	621a      	str	r2, [r3, #32]
 8005e70:	e017      	b.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005e7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005e8a:	e00a      	b.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d165      	bne.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebe:	4413      	add	r3, r2
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eca:	4413      	add	r3, r2
 8005ecc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ee6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ee8:	d91d      	bls.n	8005f26 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f00:	3b01      	subs	r3, #1
 8005f02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f22:	801a      	strh	r2, [r3, #0]
 8005f24:	e044      	b.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10a      	bne.n	8005f44 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	e035      	b.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_PCD_EP_DB_Transmit+0x366>
 8005f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e01c      	b.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d118      	bne.n	8005fb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f92:	4413      	add	r3, r2
 8005f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	00da      	lsls	r2, r3, #3
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	6959      	ldr	r1, [r3, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	891a      	ldrh	r2, [r3, #8]
 8005fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	f005 fdb5 	bl	800bb30 <USB_WritePMA>
 8005fc6:	e1e0      	b.n	800638a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4413      	add	r3, r2
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fe6:	881b      	ldrh	r3, [r3, #0]
 8005fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fec:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d307      	bcc.n	800600c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006004:	1ad2      	subs	r2, r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	619a      	str	r2, [r3, #24]
 800600a:	e002      	b.n	8006012 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2200      	movs	r2, #0
 8006010:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f040 80c0 	bne.w	800619c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d126      	bne.n	8006072 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006032:	b29b      	uxth	r3, r3
 8006034:	461a      	mov	r2, r3
 8006036:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006038:	4413      	add	r3, r2
 800603a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	00da      	lsls	r2, r3, #3
 8006042:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006044:	4413      	add	r3, r2
 8006046:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800604a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800604c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006056:	b29a      	uxth	r2, r3
 8006058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	e01a      	b.n	80060a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	785b      	ldrb	r3, [r3, #1]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d116      	bne.n	80060a8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800608e:	4413      	add	r3, r2
 8006090:	667b      	str	r3, [r7, #100]	@ 0x64
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	00da      	lsls	r2, r3, #3
 8006098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800609a:	4413      	add	r3, r2
 800609c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060a4:	2200      	movs	r2, #0
 80060a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d12b      	bne.n	800610e <HAL_PCD_EP_DB_Transmit+0x516>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ca:	4413      	add	r3, r2
 80060cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	00da      	lsls	r2, r3, #3
 80060d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d6:	4413      	add	r3, r2
 80060d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006104:	b29a      	uxth	r2, r3
 8006106:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e017      	b.n	800613e <HAL_PCD_EP_DB_Transmit+0x546>
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d113      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x546>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800611e:	b29b      	uxth	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006124:	4413      	add	r3, r2
 8006126:	677b      	str	r3, [r7, #116]	@ 0x74
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	00da      	lsls	r2, r3, #3
 800612e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006130:	4413      	add	r3, r2
 8006132:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006136:	673b      	str	r3, [r7, #112]	@ 0x70
 8006138:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800613a:	2200      	movs	r2, #0
 800613c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4619      	mov	r1, r3
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f007 ff46 	bl	800dfd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 811a 	bne.w	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006170:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	441a      	add	r2, r3
 8006182:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
 800619a:	e0f6      	b.n	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800619c:	88fb      	ldrh	r3, [r7, #6]
 800619e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d121      	bne.n	80061ea <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	461a      	mov	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	461a      	mov	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	f040 80ca 	bne.w	800638a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061fe:	441a      	add	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800620c:	441a      	add	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	429a      	cmp	r2, r3
 800621c:	d30b      	bcc.n	8006236 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	6a1a      	ldr	r2, [r3, #32]
 800622a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	621a      	str	r2, [r3, #32]
 8006234:	e017      	b.n	8006266 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d108      	bne.n	8006250 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800623e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800624e:	e00a      	b.n	8006266 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2200      	movs	r2, #0
 800625c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	657b      	str	r3, [r7, #84]	@ 0x54
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	785b      	ldrb	r3, [r3, #1]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d165      	bne.n	8006340 <HAL_PCD_EP_DB_Transmit+0x748>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006288:	4413      	add	r3, r2
 800628a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	00da      	lsls	r2, r3, #3
 8006292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006294:	4413      	add	r3, r2
 8006296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800629a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800629c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800629e:	881b      	ldrh	r3, [r3, #0]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062aa:	801a      	strh	r2, [r3, #0]
 80062ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062b2:	d91d      	bls.n	80062f0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80062b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <HAL_PCD_EP_DB_Transmit+0x6d6>
 80062c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062ca:	3b01      	subs	r3, #1
 80062cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	029b      	lsls	r3, r3, #10
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	e041      	b.n	8006374 <HAL_PCD_EP_DB_Transmit+0x77c>
 80062f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <HAL_PCD_EP_DB_Transmit+0x716>
 80062f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006306:	b29a      	uxth	r2, r3
 8006308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e032      	b.n	8006374 <HAL_PCD_EP_DB_Transmit+0x77c>
 800630e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_PCD_EP_DB_Transmit+0x730>
 8006322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006324:	3301      	adds	r3, #1
 8006326:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29a      	uxth	r2, r3
 800632e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006330:	b29b      	uxth	r3, r3
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	b29b      	uxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b29a      	uxth	r2, r3
 800633a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e019      	b.n	8006374 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d115      	bne.n	8006374 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006350:	b29b      	uxth	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006356:	4413      	add	r3, r2
 8006358:	657b      	str	r3, [r7, #84]	@ 0x54
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	00da      	lsls	r2, r3, #3
 8006360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006362:	4413      	add	r3, r2
 8006364:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006368:	653b      	str	r3, [r7, #80]	@ 0x50
 800636a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800636e:	b29a      	uxth	r2, r3
 8006370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006372:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6959      	ldr	r1, [r3, #20]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	895a      	ldrh	r2, [r3, #10]
 8006380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006384:	b29b      	uxth	r3, r3
 8006386:	f005 fbd3 	bl	800bb30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a4:	82bb      	strh	r3, [r7, #20]
 80063a6:	8abb      	ldrh	r3, [r7, #20]
 80063a8:	f083 0310 	eor.w	r3, r3, #16
 80063ac:	82bb      	strh	r3, [r7, #20]
 80063ae:	8abb      	ldrh	r3, [r7, #20]
 80063b0:	f083 0320 	eor.w	r3, r3, #32
 80063b4:	82bb      	strh	r3, [r7, #20]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	441a      	add	r2, r3
 80063c4:	8abb      	ldrh	r3, [r7, #20]
 80063c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3790      	adds	r7, #144	@ 0x90
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	817b      	strh	r3, [r7, #10]
 80063f2:	4613      	mov	r3, r2
 80063f4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063f6:	897b      	ldrh	r3, [r7, #10]
 80063f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006402:	897b      	ldrh	r3, [r7, #10]
 8006404:	f003 0207 	and.w	r2, r3, #7
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	00db      	lsls	r3, r3, #3
 8006410:	3310      	adds	r3, #16
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e009      	b.n	800642e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800641a:	897a      	ldrh	r2, [r7, #10]
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800642e:	893b      	ldrh	r3, [r7, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d107      	bne.n	8006444 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2200      	movs	r2, #0
 8006438:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	b29a      	uxth	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	80da      	strh	r2, [r3, #6]
 8006442:	e00b      	b.n	800645c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2201      	movs	r2, #1
 8006448:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	b29a      	uxth	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	b29a      	uxth	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800648e:	b29b      	uxth	r3, r3
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a04      	ldr	r2, [pc, #16]	@ (80064dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ce:	6013      	str	r3, [r2, #0]
}
 80064d0:	bf00      	nop
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	58000400 	.word	0x58000400

080064e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80064e4:	4b04      	ldr	r3, [pc, #16]	@ (80064f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	58000400 	.word	0x58000400

080064fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006500:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	4a04      	ldr	r2, [pc, #16]	@ (8006518 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800650a:	6053      	str	r3, [r2, #4]
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	58000400 	.word	0x58000400

0800651c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800652a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800652e:	d101      	bne.n	8006534 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800654e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006552:	6013      	str	r3, [r2, #0]
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800655e:	b480      	push	{r7}
 8006560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800656c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006570:	6013      	str	r3, [r2, #0]
}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800658e:	d101      	bne.n	8006594 <LL_RCC_HSE_IsReady+0x18>
 8006590:	2301      	movs	r3, #1
 8006592:	e000      	b.n	8006596 <LL_RCC_HSE_IsReady+0x1a>
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80065a0:	b480      	push	{r7}
 80065a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80065a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065b2:	6013      	str	r3, [r2, #0]
}
 80065b4:	bf00      	nop
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80065be:	b480      	push	{r7}
 80065c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80065c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	6013      	str	r3, [r2, #0]
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80065e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ee:	d101      	bne.n	80065f4 <LL_RCC_HSI_IsReady+0x18>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <LL_RCC_HSI_IsReady+0x1a>
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800661a:	4313      	orrs	r3, r2
 800661c:	604b      	str	r3, [r1, #4]
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800662e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006632:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006642:	bf00      	nop
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006654:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006658:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800665c:	f023 0301 	bic.w	r3, r3, #1
 8006660:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b02      	cmp	r3, #2
 8006680:	d101      	bne.n	8006686 <LL_RCC_HSI48_IsReady+0x18>
 8006682:	2301      	movs	r3, #1
 8006684:	e000      	b.n	8006688 <LL_RCC_HSI48_IsReady+0x1a>
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800669e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066aa:	bf00      	nop
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80066b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066c4:	f023 0301 	bic.w	r3, r3, #1
 80066c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066cc:	bf00      	nop
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80066d6:	b480      	push	{r7}
 80066d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066e6:	f043 0304 	orr.w	r3, r3, #4
 80066ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80066fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006708:	f023 0304 	bic.w	r3, r3, #4
 800670c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006710:	bf00      	nop
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800671a:	b480      	push	{r7}
 800671c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800671e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b02      	cmp	r3, #2
 800672c:	d101      	bne.n	8006732 <LL_RCC_LSE_IsReady+0x18>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <LL_RCC_LSE_IsReady+0x1a>
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800674a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006756:	bf00      	nop
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006768:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800676c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006778:	bf00      	nop
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006782:	b480      	push	{r7}
 8006784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800678a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d101      	bne.n	800679a <LL_RCC_LSI1_IsReady+0x18>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <LL_RCC_LSI1_IsReady+0x1a>
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80067a6:	b480      	push	{r7}
 80067a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80067aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b6:	f043 0304 	orr.w	r3, r3, #4
 80067ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80067be:	bf00      	nop
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80067e0:	bf00      	nop
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80067ea:	b480      	push	{r7}
 80067ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80067ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d101      	bne.n	8006802 <LL_RCC_LSI2_IsReady+0x18>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <LL_RCC_LSI2_IsReady+0x1a>
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800681a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800681e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	6013      	str	r3, [r2, #0]
}
 8006850:	bf00      	nop
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800685a:	b480      	push	{r7}
 800685c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800685e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	6013      	str	r3, [r2, #0]
}
 800686e:	bf00      	nop
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800687c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d101      	bne.n	800688e <LL_RCC_MSI_IsReady+0x16>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <LL_RCC_MSI_IsReady+0x18>
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80068a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	600b      	str	r3, [r1, #0]
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80068c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2bb0      	cmp	r3, #176	@ 0xb0
 80068d8:	d901      	bls.n	80068de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80068da:	23b0      	movs	r3, #176	@ 0xb0
 80068dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80068de:	687b      	ldr	r3, [r7, #4]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80068f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006906:	4313      	orrs	r3, r2
 8006908:	604b      	str	r3, [r1, #4]
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800691e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 0203 	bic.w	r2, r3, #3
 8006928:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4313      	orrs	r3, r2
 8006930:	608b      	str	r3, [r1, #8]
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800693e:	b480      	push	{r7}
 8006940:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 030c 	and.w	r3, r3, #12
}
 800694c:	4618      	mov	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4313      	orrs	r3, r2
 8006970:	608b      	str	r3, [r1, #8]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006986:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800698a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800698e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80069b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80069ba:	f023 020f 	bic.w	r2, r3, #15
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	608b      	str	r3, [r1, #8]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	608b      	str	r3, [r1, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a48:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a9e:	6013      	str	r3, [r2, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ab8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006abc:	6013      	str	r3, [r2, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ada:	d101      	bne.n	8006ae0 <LL_RCC_PLL_IsReady+0x18>
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <LL_RCC_PLL_IsReady+0x1a>
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006b06:	b480      	push	{r7}
 8006b08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006b22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006b36:	b480      	push	{r7}
 8006b38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006b3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0303 	and.w	r3, r3, #3
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b60:	d101      	bne.n	8006b66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b86:	d101      	bne.n	8006b8c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bac:	d101      	bne.n	8006bb2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bd0:	d101      	bne.n	8006bd6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006be2:	b480      	push	{r7}
 8006be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006bf4:	d101      	bne.n	8006bfa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b08d      	sub	sp, #52	@ 0x34
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e363      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 808d 	beq.w	8006d42 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c28:	f7ff fe89 	bl	800693e <LL_RCC_GetSysClkSource>
 8006c2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c2e:	f7ff ff82 	bl	8006b36 <LL_RCC_PLL_GetMainSource>
 8006c32:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d005      	beq.n	8006c46 <HAL_RCC_OscConfig+0x3e>
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	2b0c      	cmp	r3, #12
 8006c3e:	d147      	bne.n	8006cd0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d144      	bne.n	8006cd0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e347      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006c56:	f7ff fe34 	bl	80068c2 <LL_RCC_MSI_GetRange>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	429c      	cmp	r4, r3
 8006c5e:	d914      	bls.n	8006c8a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fd2f 	bl	80076c8 <RCC_SetFlashLatencyFromMSIRange>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e336      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fe0e 	bl	800689a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff fe32 	bl	80068ec <LL_RCC_MSI_SetCalibTrimming>
 8006c88:	e013      	b.n	8006cb2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fe03 	bl	800689a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff fe27 	bl	80068ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fd10 	bl	80076c8 <RCC_SetFlashLatencyFromMSIRange>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e317      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006cb2:	f000 fcc9 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4aa4      	ldr	r2, [pc, #656]	@ (8006f4c <HAL_RCC_OscConfig+0x344>)
 8006cba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006cbc:	4ba4      	ldr	r3, [pc, #656]	@ (8006f50 <HAL_RCC_OscConfig+0x348>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fa ff03 	bl	8001acc <HAL_InitTick>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d039      	beq.n	8006d40 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e308      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01e      	beq.n	8006d16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006cd8:	f7ff fdb0 	bl	800683c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cdc:	f7fa ff44 	bl	8001b68 <HAL_GetTick>
 8006ce0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ce4:	f7fa ff40 	bl	8001b68 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e2f5      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006cf6:	f7ff fdbf 	bl	8006878 <LL_RCC_MSI_IsReady>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f1      	beq.n	8006ce4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fdc8 	bl	800689a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fdec 	bl	80068ec <LL_RCC_MSI_SetCalibTrimming>
 8006d14:	e015      	b.n	8006d42 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006d16:	f7ff fda0 	bl	800685a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006d1a:	f7fa ff25 	bl	8001b68 <HAL_GetTick>
 8006d1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d22:	f7fa ff21 	bl	8001b68 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e2d6      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006d34:	f7ff fda0 	bl	8006878 <LL_RCC_MSI_IsReady>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f1      	bne.n	8006d22 <HAL_RCC_OscConfig+0x11a>
 8006d3e:	e000      	b.n	8006d42 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006d40:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d047      	beq.n	8006dde <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d4e:	f7ff fdf6 	bl	800693e <LL_RCC_GetSysClkSource>
 8006d52:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d54:	f7ff feef 	bl	8006b36 <LL_RCC_PLL_GetMainSource>
 8006d58:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCC_OscConfig+0x164>
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	2b0c      	cmp	r3, #12
 8006d64:	d108      	bne.n	8006d78 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d105      	bne.n	8006d78 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d134      	bne.n	8006dde <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e2b4      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d102      	bne.n	8006d88 <HAL_RCC_OscConfig+0x180>
 8006d82:	f7ff fbdd 	bl	8006540 <LL_RCC_HSE_Enable>
 8006d86:	e001      	b.n	8006d8c <HAL_RCC_OscConfig+0x184>
 8006d88:	f7ff fbe9 	bl	800655e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d012      	beq.n	8006dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d94:	f7fa fee8 	bl	8001b68 <HAL_GetTick>
 8006d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d9c:	f7fa fee4 	bl	8001b68 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b64      	cmp	r3, #100	@ 0x64
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e299      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006dae:	f7ff fbe5 	bl	800657c <LL_RCC_HSE_IsReady>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f1      	beq.n	8006d9c <HAL_RCC_OscConfig+0x194>
 8006db8:	e011      	b.n	8006dde <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dba:	f7fa fed5 	bl	8001b68 <HAL_GetTick>
 8006dbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006dc0:	e008      	b.n	8006dd4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dc2:	f7fa fed1 	bl	8001b68 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	2b64      	cmp	r3, #100	@ 0x64
 8006dce:	d901      	bls.n	8006dd4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e286      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006dd4:	f7ff fbd2 	bl	800657c <LL_RCC_HSE_IsReady>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1f1      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d04c      	beq.n	8006e84 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dea:	f7ff fda8 	bl	800693e <LL_RCC_GetSysClkSource>
 8006dee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006df0:	f7ff fea1 	bl	8006b36 <LL_RCC_PLL_GetMainSource>
 8006df4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCC_OscConfig+0x200>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	2b0c      	cmp	r3, #12
 8006e00:	d10e      	bne.n	8006e20 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d10b      	bne.n	8006e20 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e266      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fbf1 	bl	8006600 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006e1e:	e031      	b.n	8006e84 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d019      	beq.n	8006e5c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e28:	f7ff fbba 	bl	80065a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fa fe9c 	bl	8001b68 <HAL_GetTick>
 8006e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e34:	f7fa fe98 	bl	8001b68 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e24d      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006e46:	f7ff fbc9 	bl	80065dc <LL_RCC_HSI_IsReady>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0f1      	beq.n	8006e34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fbd3 	bl	8006600 <LL_RCC_HSI_SetCalibTrimming>
 8006e5a:	e013      	b.n	8006e84 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5c:	f7ff fbaf 	bl	80065be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fa fe82 	bl	8001b68 <HAL_GetTick>
 8006e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e68:	f7fa fe7e 	bl	8001b68 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e233      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006e7a:	f7ff fbaf 	bl	80065dc <LL_RCC_HSI_IsReady>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1f1      	bne.n	8006e68 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80a3 	beq.w	8006fe4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d076      	beq.n	8006f94 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d046      	beq.n	8006f40 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006eb2:	f7ff fc66 	bl	8006782 <LL_RCC_LSI1_IsReady>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d113      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006ebc:	f7ff fc3f 	bl	800673e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ec0:	f7fa fe52 	bl	8001b68 <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006ec6:	e008      	b.n	8006eda <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ec8:	f7fa fe4e 	bl	8001b68 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e203      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006eda:	f7ff fc52 	bl	8006782 <LL_RCC_LSI1_IsReady>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0f1      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006ee4:	f7ff fc5f 	bl	80067a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee8:	f7fa fe3e 	bl	8001b68 <HAL_GetTick>
 8006eec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006ef0:	f7fa fe3a 	bl	8001b68 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e1ef      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006f02:	f7ff fc72 	bl	80067ea <LL_RCC_LSI2_IsReady>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0f1      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff fc7c 	bl	800680e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006f16:	f7ff fc23 	bl	8006760 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1a:	f7fa fe25 	bl	8001b68 <HAL_GetTick>
 8006f1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006f20:	e008      	b.n	8006f34 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006f22:	f7fa fe21 	bl	8001b68 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d901      	bls.n	8006f34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e1d6      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006f34:	f7ff fc25 	bl	8006782 <LL_RCC_LSI1_IsReady>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f1      	bne.n	8006f22 <HAL_RCC_OscConfig+0x31a>
 8006f3e:	e051      	b.n	8006fe4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006f40:	f7ff fbfd 	bl	800673e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fa fe10 	bl	8001b68 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006f4a:	e00c      	b.n	8006f66 <HAL_RCC_OscConfig+0x35e>
 8006f4c:	20000008 	.word	0x20000008
 8006f50:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006f54:	f7fa fe08 	bl	8001b68 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e1bd      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006f66:	f7ff fc0c 	bl	8006782 <LL_RCC_LSI1_IsReady>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0f1      	beq.n	8006f54 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006f70:	f7ff fc2a 	bl	80067c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006f76:	f7fa fdf7 	bl	8001b68 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e1ac      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006f88:	f7ff fc2f 	bl	80067ea <LL_RCC_LSI2_IsReady>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f1      	bne.n	8006f76 <HAL_RCC_OscConfig+0x36e>
 8006f92:	e027      	b.n	8006fe4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006f94:	f7ff fc18 	bl	80067c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f98:	f7fa fde6 	bl	8001b68 <HAL_GetTick>
 8006f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006fa0:	f7fa fde2 	bl	8001b68 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e197      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006fb2:	f7ff fc1a 	bl	80067ea <LL_RCC_LSI2_IsReady>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f1      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006fbc:	f7ff fbd0 	bl	8006760 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc0:	f7fa fdd2 	bl	8001b68 <HAL_GetTick>
 8006fc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006fc8:	f7fa fdce 	bl	8001b68 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e183      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006fda:	f7ff fbd2 	bl	8006782 <LL_RCC_LSI1_IsReady>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f1      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d05b      	beq.n	80070a8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff0:	4ba7      	ldr	r3, [pc, #668]	@ (8007290 <HAL_RCC_OscConfig+0x688>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d114      	bne.n	8007026 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ffc:	f7ff fa60 	bl	80064c0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007000:	f7fa fdb2 	bl	8001b68 <HAL_GetTick>
 8007004:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007006:	e008      	b.n	800701a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007008:	f7fa fdae 	bl	8001b68 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	2b02      	cmp	r3, #2
 8007014:	d901      	bls.n	800701a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e163      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800701a:	4b9d      	ldr	r3, [pc, #628]	@ (8007290 <HAL_RCC_OscConfig+0x688>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d0f0      	beq.n	8007008 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d102      	bne.n	8007034 <HAL_RCC_OscConfig+0x42c>
 800702e:	f7ff fb30 	bl	8006692 <LL_RCC_LSE_Enable>
 8007032:	e00c      	b.n	800704e <HAL_RCC_OscConfig+0x446>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	2b05      	cmp	r3, #5
 800703a:	d104      	bne.n	8007046 <HAL_RCC_OscConfig+0x43e>
 800703c:	f7ff fb4b 	bl	80066d6 <LL_RCC_LSE_EnableBypass>
 8007040:	f7ff fb27 	bl	8006692 <LL_RCC_LSE_Enable>
 8007044:	e003      	b.n	800704e <HAL_RCC_OscConfig+0x446>
 8007046:	f7ff fb35 	bl	80066b4 <LL_RCC_LSE_Disable>
 800704a:	f7ff fb55 	bl	80066f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d014      	beq.n	8007080 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007056:	f7fa fd87 	bl	8001b68 <HAL_GetTick>
 800705a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800705c:	e00a      	b.n	8007074 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705e:	f7fa fd83 	bl	8001b68 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706c:	4293      	cmp	r3, r2
 800706e:	d901      	bls.n	8007074 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e136      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007074:	f7ff fb51 	bl	800671a <LL_RCC_LSE_IsReady>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0ef      	beq.n	800705e <HAL_RCC_OscConfig+0x456>
 800707e:	e013      	b.n	80070a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007080:	f7fa fd72 	bl	8001b68 <HAL_GetTick>
 8007084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007086:	e00a      	b.n	800709e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007088:	f7fa fd6e 	bl	8001b68 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e121      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800709e:	f7ff fb3c 	bl	800671a <LL_RCC_LSE_IsReady>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ef      	bne.n	8007088 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02c      	beq.n	800710e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d014      	beq.n	80070e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070bc:	f7ff fab5 	bl	800662a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c0:	f7fa fd52 	bl	8001b68 <HAL_GetTick>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070c8:	f7fa fd4e 	bl	8001b68 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e103      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80070da:	f7ff fac8 	bl	800666e <LL_RCC_HSI48_IsReady>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f1      	beq.n	80070c8 <HAL_RCC_OscConfig+0x4c0>
 80070e4:	e013      	b.n	800710e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80070e6:	f7ff fab1 	bl	800664c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ea:	f7fa fd3d 	bl	8001b68 <HAL_GetTick>
 80070ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070f2:	f7fa fd39 	bl	8001b68 <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e0ee      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007104:	f7ff fab3 	bl	800666e <LL_RCC_HSI48_IsReady>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f1      	bne.n	80070f2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80e4 	beq.w	80072e0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007118:	f7ff fc11 	bl	800693e <LL_RCC_GetSysClkSource>
 800711c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800711e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	2b02      	cmp	r3, #2
 800712c:	f040 80b4 	bne.w	8007298 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0203 	and.w	r2, r3, #3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713a:	429a      	cmp	r2, r3
 800713c:	d123      	bne.n	8007186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007148:	429a      	cmp	r2, r3
 800714a:	d11c      	bne.n	8007186 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	0a1b      	lsrs	r3, r3, #8
 8007150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007158:	429a      	cmp	r2, r3
 800715a:	d114      	bne.n	8007186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007166:	429a      	cmp	r2, r3
 8007168:	d10d      	bne.n	8007186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007174:	429a      	cmp	r2, r3
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007182:	429a      	cmp	r2, r3
 8007184:	d05d      	beq.n	8007242 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b0c      	cmp	r3, #12
 800718a:	d058      	beq.n	800723e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e0a1      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800719e:	f7ff fc84 	bl	8006aaa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071a2:	f7fa fce1 	bl	8001b68 <HAL_GetTick>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071aa:	f7fa fcdd 	bl	8001b68 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e092      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1ef      	bne.n	80071aa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	4b30      	ldr	r3, [pc, #192]	@ (8007294 <HAL_RCC_OscConfig+0x68c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80071dc:	4311      	orrs	r1, r2
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80071e2:	0212      	lsls	r2, r2, #8
 80071e4:	4311      	orrs	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071ea:	4311      	orrs	r1, r2
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80071f0:	4311      	orrs	r1, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80071f6:	430a      	orrs	r2, r1
 80071f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071fc:	4313      	orrs	r3, r2
 80071fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007200:	f7ff fc44 	bl	8006a8c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800720e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007212:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007214:	f7fa fca8 	bl	8001b68 <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800721c:	f7fa fca4 	bl	8001b68 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e059      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800722e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0ef      	beq.n	800721c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800723c:	e050      	b.n	80072e0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e04f      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d147      	bne.n	80072e0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007250:	f7ff fc1c 	bl	8006a8c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007262:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007264:	f7fa fc80 	bl	8001b68 <HAL_GetTick>
 8007268:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800726c:	f7fa fc7c 	bl	8001b68 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e031      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ef      	beq.n	800726c <HAL_RCC_OscConfig+0x664>
 800728c:	e028      	b.n	80072e0 <HAL_RCC_OscConfig+0x6d8>
 800728e:	bf00      	nop
 8007290:	58000400 	.word	0x58000400
 8007294:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	2b0c      	cmp	r3, #12
 800729c:	d01e      	beq.n	80072dc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729e:	f7ff fc04 	bl	8006aaa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a2:	f7fa fc61 	bl	8001b68 <HAL_GetTick>
 80072a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072a8:	e008      	b.n	80072bc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072aa:	f7fa fc5d 	bl	8001b68 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d901      	bls.n	80072bc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e012      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1ef      	bne.n	80072aa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80072ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d4:	4b05      	ldr	r3, [pc, #20]	@ (80072ec <HAL_RCC_OscConfig+0x6e4>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	60cb      	str	r3, [r1, #12]
 80072da:	e001      	b.n	80072e0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3734      	adds	r7, #52	@ 0x34
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd90      	pop	{r4, r7, pc}
 80072ea:	bf00      	nop
 80072ec:	eefefffc 	.word	0xeefefffc

080072f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e12d      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007304:	4b98      	ldr	r3, [pc, #608]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d91b      	bls.n	800734a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007312:	4b95      	ldr	r3, [pc, #596]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f023 0207 	bic.w	r2, r3, #7
 800731a:	4993      	ldr	r1, [pc, #588]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	4313      	orrs	r3, r2
 8007320:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fa fc21 	bl	8001b68 <HAL_GetTick>
 8007326:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007328:	e008      	b.n	800733c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800732a:	f7fa fc1d 	bl	8001b68 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d901      	bls.n	800733c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e111      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733c:	4b8a      	ldr	r3, [pc, #552]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d1ef      	bne.n	800732a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fafb 	bl	8006956 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007360:	f7fa fc02 	bl	8001b68 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007368:	f7fa fbfe 	bl	8001b68 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e0f2      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800737a:	f7ff fbe8 	bl	8006b4e <LL_RCC_IsActiveFlag_HPRE>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f1      	beq.n	8007368 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0320 	and.w	r3, r3, #32
 800738c:	2b00      	cmp	r3, #0
 800738e:	d016      	beq.n	80073be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff faf2 	bl	800697e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800739a:	f7fa fbe5 	bl	8001b68 <HAL_GetTick>
 800739e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80073a0:	e008      	b.n	80073b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073a2:	f7fa fbe1 	bl	8001b68 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e0d5      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80073b4:	f7ff fbdd 	bl	8006b72 <LL_RCC_IsActiveFlag_C2HPRE>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f1      	beq.n	80073a2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff faeb 	bl	80069aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80073d4:	f7fa fbc8 	bl	8001b68 <HAL_GetTick>
 80073d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80073da:	e008      	b.n	80073ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80073dc:	f7fa fbc4 	bl	8001b68 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e0b8      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80073ee:	f7ff fbd3 	bl	8006b98 <LL_RCC_IsActiveFlag_SHDHPRE>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f1      	beq.n	80073dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0304 	and.w	r3, r3, #4
 8007400:	2b00      	cmp	r3, #0
 8007402:	d016      	beq.n	8007432 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff fae5 	bl	80069d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800740e:	f7fa fbab 	bl	8001b68 <HAL_GetTick>
 8007412:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007414:	e008      	b.n	8007428 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007416:	f7fa fba7 	bl	8001b68 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	2b02      	cmp	r3, #2
 8007422:	d901      	bls.n	8007428 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e09b      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007428:	f7ff fbc9 	bl	8006bbe <LL_RCC_IsActiveFlag_PPRE1>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f1      	beq.n	8007416 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0308 	and.w	r3, r3, #8
 800743a:	2b00      	cmp	r3, #0
 800743c:	d017      	beq.n	800746e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fadb 	bl	8006a00 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800744a:	f7fa fb8d 	bl	8001b68 <HAL_GetTick>
 800744e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007450:	e008      	b.n	8007464 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007452:	f7fa fb89 	bl	8001b68 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d901      	bls.n	8007464 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e07d      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007464:	f7ff fbbd 	bl	8006be2 <LL_RCC_IsActiveFlag_PPRE2>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f1      	beq.n	8007452 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d043      	beq.n	8007502 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d106      	bne.n	8007490 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007482:	f7ff f87b 	bl	800657c <LL_RCC_HSE_IsReady>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11e      	bne.n	80074ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e067      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b03      	cmp	r3, #3
 8007496:	d106      	bne.n	80074a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007498:	f7ff fb16 	bl	8006ac8 <LL_RCC_PLL_IsReady>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d113      	bne.n	80074ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e05c      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80074ae:	f7ff f9e3 	bl	8006878 <LL_RCC_MSI_IsReady>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d108      	bne.n	80074ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e051      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80074bc:	f7ff f88e 	bl	80065dc <LL_RCC_HSI_IsReady>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e04a      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff fa21 	bl	8006916 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d4:	f7fa fb48 	bl	8001b68 <HAL_GetTick>
 80074d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074da:	e00a      	b.n	80074f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074dc:	f7fa fb44 	bl	8001b68 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e036      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f2:	f7ff fa24 	bl	800693e <LL_RCC_GetSysClkSource>
 80074f6:	4602      	mov	r2, r0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	429a      	cmp	r2, r3
 8007500:	d1ec      	bne.n	80074dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007502:	4b19      	ldr	r3, [pc, #100]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d21b      	bcs.n	8007548 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007510:	4b15      	ldr	r3, [pc, #84]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f023 0207 	bic.w	r2, r3, #7
 8007518:	4913      	ldr	r1, [pc, #76]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	4313      	orrs	r3, r2
 800751e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007520:	f7fa fb22 	bl	8001b68 <HAL_GetTick>
 8007524:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007526:	e008      	b.n	800753a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007528:	f7fa fb1e 	bl	8001b68 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e012      	b.n	8007560 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800753a:	4b0b      	ldr	r3, [pc, #44]	@ (8007568 <HAL_RCC_ClockConfig+0x278>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d1ef      	bne.n	8007528 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007548:	f000 f87e 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 800754c:	4603      	mov	r3, r0
 800754e:	4a07      	ldr	r2, [pc, #28]	@ (800756c <HAL_RCC_ClockConfig+0x27c>)
 8007550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007552:	f7fa fb15 	bl	8001b80 <HAL_GetTickPrio>
 8007556:	4603      	mov	r3, r0
 8007558:	4618      	mov	r0, r3
 800755a:	f7fa fab7 	bl	8001acc <HAL_InitTick>
 800755e:	4603      	mov	r3, r0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	58004000 	.word	0x58004000
 800756c:	20000008 	.word	0x20000008

08007570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007570:	b590      	push	{r4, r7, lr}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007576:	f7ff f9e2 	bl	800693e <LL_RCC_GetSysClkSource>
 800757a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007582:	f7ff f99e 	bl	80068c2 <LL_RCC_MSI_GetRange>
 8007586:	4603      	mov	r3, r0
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 030f 	and.w	r3, r3, #15
 800758e:	4a2b      	ldr	r2, [pc, #172]	@ (800763c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	e04b      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b04      	cmp	r3, #4
 800759c:	d102      	bne.n	80075a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800759e:	4b28      	ldr	r3, [pc, #160]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e045      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d10a      	bne.n	80075c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80075aa:	f7fe ffb7 	bl	800651c <LL_RCC_HSE_IsEnabledDiv2>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d102      	bne.n	80075ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80075b4:	4b22      	ldr	r3, [pc, #136]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e03a      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80075ba:	4b22      	ldr	r3, [pc, #136]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	e037      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80075c0:	f7ff fab9 	bl	8006b36 <LL_RCC_PLL_GetMainSource>
 80075c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d003      	beq.n	80075d4 <HAL_RCC_GetSysClockFreq+0x64>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d003      	beq.n	80075da <HAL_RCC_GetSysClockFreq+0x6a>
 80075d2:	e00d      	b.n	80075f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80075d4:	4b1a      	ldr	r3, [pc, #104]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80075d6:	60bb      	str	r3, [r7, #8]
        break;
 80075d8:	e015      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80075da:	f7fe ff9f 	bl	800651c <LL_RCC_HSE_IsEnabledDiv2>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80075e4:	4b16      	ldr	r3, [pc, #88]	@ (8007640 <HAL_RCC_GetSysClockFreq+0xd0>)
 80075e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80075e8:	e00d      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80075ea:	4b16      	ldr	r3, [pc, #88]	@ (8007644 <HAL_RCC_GetSysClockFreq+0xd4>)
 80075ec:	60bb      	str	r3, [r7, #8]
        break;
 80075ee:	e00a      	b.n	8007606 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80075f0:	f7ff f967 	bl	80068c2 <LL_RCC_MSI_GetRange>
 80075f4:	4603      	mov	r3, r0
 80075f6:	091b      	lsrs	r3, r3, #4
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	4a0f      	ldr	r2, [pc, #60]	@ (800763c <HAL_RCC_GetSysClockFreq+0xcc>)
 80075fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007602:	60bb      	str	r3, [r7, #8]
        break;
 8007604:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007606:	f7ff fa71 	bl	8006aec <LL_RCC_PLL_GetN>
 800760a:	4602      	mov	r2, r0
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	fb03 f402 	mul.w	r4, r3, r2
 8007612:	f7ff fa84 	bl	8006b1e <LL_RCC_PLL_GetDivider>
 8007616:	4603      	mov	r3, r0
 8007618:	091b      	lsrs	r3, r3, #4
 800761a:	3301      	adds	r3, #1
 800761c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007620:	f7ff fa71 	bl	8006b06 <LL_RCC_PLL_GetR>
 8007624:	4603      	mov	r3, r0
 8007626:	0f5b      	lsrs	r3, r3, #29
 8007628:	3301      	adds	r3, #1
 800762a:	fbb4 f3f3 	udiv	r3, r4, r3
 800762e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	bd90      	pop	{r4, r7, pc}
 800763a:	bf00      	nop
 800763c:	080113a0 	.word	0x080113a0
 8007640:	00f42400 	.word	0x00f42400
 8007644:	01e84800 	.word	0x01e84800

08007648 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007648:	b598      	push	{r3, r4, r7, lr}
 800764a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800764c:	f7ff ff90 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8007650:	4604      	mov	r4, r0
 8007652:	f7ff f9e9 	bl	8006a28 <LL_RCC_GetAHBPrescaler>
 8007656:	4603      	mov	r3, r0
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	4a03      	ldr	r2, [pc, #12]	@ (800766c <HAL_RCC_GetHCLKFreq+0x24>)
 8007660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007664:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd98      	pop	{r3, r4, r7, pc}
 800766c:	08011340 	.word	0x08011340

08007670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007670:	b598      	push	{r3, r4, r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007674:	f7ff ffe8 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 8007678:	4604      	mov	r4, r0
 800767a:	f7ff f9ef 	bl	8006a5c <LL_RCC_GetAPB1Prescaler>
 800767e:	4603      	mov	r3, r0
 8007680:	0a1b      	lsrs	r3, r3, #8
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	4a04      	ldr	r2, [pc, #16]	@ (8007698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800768c:	f003 031f 	and.w	r3, r3, #31
 8007690:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007694:	4618      	mov	r0, r3
 8007696:	bd98      	pop	{r3, r4, r7, pc}
 8007698:	08011380 	.word	0x08011380

0800769c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800769c:	b598      	push	{r3, r4, r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80076a0:	f7ff ffd2 	bl	8007648 <HAL_RCC_GetHCLKFreq>
 80076a4:	4604      	mov	r4, r0
 80076a6:	f7ff f9e5 	bl	8006a74 <LL_RCC_GetAPB2Prescaler>
 80076aa:	4603      	mov	r3, r0
 80076ac:	0adb      	lsrs	r3, r3, #11
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	4a04      	ldr	r2, [pc, #16]	@ (80076c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076b8:	f003 031f 	and.w	r3, r3, #31
 80076bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	bd98      	pop	{r3, r4, r7, pc}
 80076c4:	08011380 	.word	0x08011380

080076c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2bb0      	cmp	r3, #176	@ 0xb0
 80076d4:	d903      	bls.n	80076de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80076d6:	4b15      	ldr	r3, [pc, #84]	@ (800772c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	e007      	b.n	80076ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	4a11      	ldr	r2, [pc, #68]	@ (800772c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80076e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80076ee:	f7ff f9a7 	bl	8006a40 <LL_RCC_GetAHB4Prescaler>
 80076f2:	4603      	mov	r3, r0
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007730 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80076fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	fbb2 f3f3 	udiv	r3, r2, r3
 8007706:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4a0a      	ldr	r2, [pc, #40]	@ (8007734 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	0c9c      	lsrs	r4, r3, #18
 8007712:	f7fe fee5 	bl	80064e0 <HAL_PWREx_GetVoltageRange>
 8007716:	4603      	mov	r3, r0
 8007718:	4619      	mov	r1, r3
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f80c 	bl	8007738 <RCC_SetFlashLatency>
 8007720:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	bd90      	pop	{r4, r7, pc}
 800772a:	bf00      	nop
 800772c:	080113a0 	.word	0x080113a0
 8007730:	08011340 	.word	0x08011340
 8007734:	431bde83 	.word	0x431bde83

08007738 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b093      	sub	sp, #76	@ 0x4c
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007742:	4b37      	ldr	r3, [pc, #220]	@ (8007820 <RCC_SetFlashLatency+0xe8>)
 8007744:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800774a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800774e:	4a35      	ldr	r2, [pc, #212]	@ (8007824 <RCC_SetFlashLatency+0xec>)
 8007750:	f107 031c 	add.w	r3, r7, #28
 8007754:	ca07      	ldmia	r2, {r0, r1, r2}
 8007756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800775a:	4b33      	ldr	r3, [pc, #204]	@ (8007828 <RCC_SetFlashLatency+0xf0>)
 800775c:	f107 040c 	add.w	r4, r7, #12
 8007760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007766:	2300      	movs	r3, #0
 8007768:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007770:	d11a      	bne.n	80077a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007772:	2300      	movs	r3, #0
 8007774:	643b      	str	r3, [r7, #64]	@ 0x40
 8007776:	e013      	b.n	80077a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	3348      	adds	r3, #72	@ 0x48
 800777e:	443b      	add	r3, r7
 8007780:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	429a      	cmp	r2, r3
 8007788:	d807      	bhi.n	800779a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800778a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	3348      	adds	r3, #72	@ 0x48
 8007790:	443b      	add	r3, r7
 8007792:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007796:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007798:	e020      	b.n	80077dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800779a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800779c:	3301      	adds	r3, #1
 800779e:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d9e8      	bls.n	8007778 <RCC_SetFlashLatency+0x40>
 80077a6:	e019      	b.n	80077dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077ac:	e013      	b.n	80077d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80077ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	3348      	adds	r3, #72	@ 0x48
 80077b4:	443b      	add	r3, r7
 80077b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d807      	bhi.n	80077d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80077c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	3348      	adds	r3, #72	@ 0x48
 80077c6:	443b      	add	r3, r7
 80077c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80077cc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80077ce:	e005      	b.n	80077dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80077d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d2:	3301      	adds	r3, #1
 80077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077d8:	2b02      	cmp	r3, #2
 80077da:	d9e8      	bls.n	80077ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80077dc:	4b13      	ldr	r3, [pc, #76]	@ (800782c <RCC_SetFlashLatency+0xf4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f023 0207 	bic.w	r2, r3, #7
 80077e4:	4911      	ldr	r1, [pc, #68]	@ (800782c <RCC_SetFlashLatency+0xf4>)
 80077e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80077ec:	f7fa f9bc 	bl	8001b68 <HAL_GetTick>
 80077f0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80077f2:	e008      	b.n	8007806 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80077f4:	f7fa f9b8 	bl	8001b68 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e007      	b.n	8007816 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007806:	4b09      	ldr	r3, [pc, #36]	@ (800782c <RCC_SetFlashLatency+0xf4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007810:	429a      	cmp	r2, r3
 8007812:	d1ef      	bne.n	80077f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	374c      	adds	r7, #76	@ 0x4c
 800781a:	46bd      	mov	sp, r7
 800781c:	bd90      	pop	{r4, r7, pc}
 800781e:	bf00      	nop
 8007820:	08011294 	.word	0x08011294
 8007824:	080112a4 	.word	0x080112a4
 8007828:	080112b0 	.word	0x080112b0
 800782c:	58004000 	.word	0x58004000

08007830 <LL_RCC_LSE_IsEnabled>:
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d101      	bne.n	8007848 <LL_RCC_LSE_IsEnabled+0x18>
 8007844:	2301      	movs	r3, #1
 8007846:	e000      	b.n	800784a <LL_RCC_LSE_IsEnabled+0x1a>
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <LL_RCC_LSE_IsReady>:
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b02      	cmp	r3, #2
 8007866:	d101      	bne.n	800786c <LL_RCC_LSE_IsReady+0x18>
 8007868:	2301      	movs	r3, #1
 800786a:	e000      	b.n	800786e <LL_RCC_LSE_IsReady+0x1a>
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <LL_RCC_SetRFWKPClockSource>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007888:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800788c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4313      	orrs	r3, r2
 8007894:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <LL_RCC_SetSMPSClockSource>:
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80078ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b2:	f023 0203 	bic.w	r2, r3, #3
 80078b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4313      	orrs	r3, r2
 80078be:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <LL_RCC_SetSMPSPrescaler>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80078d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80078de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <LL_RCC_SetUSARTClockSource>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80078fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007904:	f023 0203 	bic.w	r2, r3, #3
 8007908:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <LL_RCC_SetLPUARTClockSource>:
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007930:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4313      	orrs	r3, r2
 800793c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <LL_RCC_SetI2CClockSource>:
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007958:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	091b      	lsrs	r3, r3, #4
 8007960:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007964:	43db      	mvns	r3, r3
 8007966:	401a      	ands	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	011b      	lsls	r3, r3, #4
 800796c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007970:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <LL_RCC_SetLPTIMClockSource>:
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800798e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007992:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	0c1b      	lsrs	r3, r3, #16
 800799a:	041b      	lsls	r3, r3, #16
 800799c:	43db      	mvns	r3, r3
 800799e:	401a      	ands	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	041b      	lsls	r3, r3, #16
 80079a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <LL_RCC_SetSAIClockSource>:
{
 80079ba:	b480      	push	{r7}
 80079bc:	b083      	sub	sp, #12
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80079c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <LL_RCC_SetRNGClockSource>:
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80079ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80079fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <LL_RCC_SetCLK48ClockSource>:
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a32:	bf00      	nop
 8007a34:	370c      	adds	r7, #12
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <LL_RCC_SetUSBClockSource>:
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b082      	sub	sp, #8
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff ffe3 	bl	8007a12 <LL_RCC_SetCLK48ClockSource>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <LL_RCC_SetADCClockSource>:
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a64:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <LL_RCC_SetRTCClockSource>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <LL_RCC_GetRTCClockSource>:
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ab8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <LL_RCC_ForceBackupDomainReset>:
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007aca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ade:	bf00      	nop
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007b00:	bf00      	nop
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <LL_RCC_PLLSAI1_Enable>:
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b18:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b1c:	6013      	str	r3, [r2, #0]
}
 8007b1e:	bf00      	nop
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <LL_RCC_PLLSAI1_Disable>:
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b3a:	6013      	str	r3, [r2, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <LL_RCC_PLLSAI1_IsReady>:
{
 8007b46:	b480      	push	{r7}
 8007b48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b58:	d101      	bne.n	8007b5e <LL_RCC_PLLSAI1_IsReady+0x18>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e000      	b.n	8007b60 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b088      	sub	sp, #32
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007b72:	2300      	movs	r3, #0
 8007b74:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007b76:	2300      	movs	r3, #0
 8007b78:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d034      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b8e:	d021      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007b90:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b94:	d81b      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b9a:	d01d      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007b9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ba0:	d815      	bhi.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00b      	beq.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ba6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007baa:	d110      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bbc:	e00d      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f947 	bl	8007e56 <RCCEx_PLLSAI1_ConfigNP>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007bcc:	e005      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	77fb      	strb	r3, [r7, #31]
        break;
 8007bd2:	e002      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bda:	7ffb      	ldrb	r3, [r7, #31]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d105      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fee8 	bl	80079ba <LL_RCC_SetSAIClockSource>
 8007bea:	e001      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bec:	7ffb      	ldrb	r3, [r7, #31]
 8007bee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d046      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007bfc:	f7ff ff56 	bl	8007aac <LL_RCC_GetRTCClockSource>
 8007c00:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d03c      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007c0c:	f7fe fc58 	bl	80064c0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d105      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7ff ff30 	bl	8007a80 <LL_RCC_SetRTCClockSource>
 8007c20:	e02e      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007c2c:	f7ff ff4b 	bl	8007ac6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007c30:	f7ff ff5a 	bl	8007ae8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007c4c:	f7ff fdf0 	bl	8007830 <LL_RCC_LSE_IsEnabled>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d114      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c56:	f7f9 ff87 	bl	8001b68 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c5c:	e00b      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c5e:	f7f9 ff83 	bl	8001b68 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d902      	bls.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	77fb      	strb	r3, [r7, #31]
              break;
 8007c74:	e004      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007c76:	f7ff fded 	bl	8007854 <LL_RCC_LSE_IsReady>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d1ee      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007c80:	7ffb      	ldrb	r3, [r7, #31]
 8007c82:	77bb      	strb	r3, [r7, #30]
 8007c84:	e001      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fe2a 	bl	80078f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0302 	and.w	r3, r3, #2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fe35 	bl	8007920 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fe5d 	bl	8007986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fe52 	bl	8007986 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0304 	and.w	r3, r3, #4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff fe2a 	bl	800794c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d004      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fe1f 	bl	800794c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d022      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fe8d 	bl	8007a3e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d2c:	d107      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d3c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d46:	d10b      	bne.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 f8dd 	bl	8007f0c <RCCEx_PLLSAI1_ConfigNQ>
 8007d52:	4603      	mov	r3, r0
 8007d54:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007d56:	7ffb      	ldrb	r3, [r7, #31]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007d5c:	7ffb      	ldrb	r3, [r7, #31]
 8007d5e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d02b      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d008      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d7e:	d003      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff fe2a 	bl	80079e6 <LL_RCC_SetRNGClockSource>
 8007d92:	e00a      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f7ff fe21 	bl	80079e6 <LL_RCC_SetRNGClockSource>
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff fe34 	bl	8007a12 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007db2:	d107      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d022      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fe3d 	bl	8007a54 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007df2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dfc:	d10b      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8dd 	bl	8007fc2 <RCCEx_PLLSAI1_ConfigNR>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007e0c:	7ffb      	ldrb	r3, [r7, #31]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007e12:	7ffb      	ldrb	r3, [r7, #31]
 8007e14:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fd26 	bl	8007878 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7ff fd45 	bl	80078cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fd2c 	bl	80078a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007e4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3720      	adds	r7, #32
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e62:	f7ff fe61 	bl	8007b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e66:	f7f9 fe7f 	bl	8001b68 <HAL_GetTick>
 8007e6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e6c:	e009      	b.n	8007e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e6e:	f7f9 fe7b 	bl	8001b68 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d902      	bls.n	8007e82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e004      	b.n	8007e8c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e82:	f7ff fe60 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d137      	bne.n	8007f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	021b      	lsls	r3, r3, #8
 8007ea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007ec0:	f7ff fe23 	bl	8007b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec4:	f7f9 fe50 	bl	8001b68 <HAL_GetTick>
 8007ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007eca:	e009      	b.n	8007ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ecc:	f7f9 fe4c 	bl	8001b68 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d902      	bls.n	8007ee0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	73fb      	strb	r3, [r7, #15]
        break;
 8007ede:	e004      	b.n	8007eea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ee0:	f7ff fe31 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d1f0      	bne.n	8007ecc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d108      	bne.n	8007f02 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ef4:	691a      	ldr	r2, [r3, #16]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007efe:	4313      	orrs	r3, r2
 8007f00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007f18:	f7ff fe06 	bl	8007b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f1c:	f7f9 fe24 	bl	8001b68 <HAL_GetTick>
 8007f20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f22:	e009      	b.n	8007f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f24:	f7f9 fe20 	bl	8001b68 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d902      	bls.n	8007f38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	73fb      	strb	r3, [r7, #15]
      break;
 8007f36:	e004      	b.n	8007f42 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f38:	f7ff fe05 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1f0      	bne.n	8007f24 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007f42:	7bfb      	ldrb	r3, [r7, #15]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d137      	bne.n	8007fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	021b      	lsls	r3, r3, #8
 8007f58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f72:	4313      	orrs	r3, r2
 8007f74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007f76:	f7ff fdc8 	bl	8007b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7a:	f7f9 fdf5 	bl	8001b68 <HAL_GetTick>
 8007f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f80:	e009      	b.n	8007f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f82:	f7f9 fdf1 	bl	8001b68 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d902      	bls.n	8007f96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	73fb      	strb	r3, [r7, #15]
        break;
 8007f94:	e004      	b.n	8007fa0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f96:	f7ff fdd6 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d1f0      	bne.n	8007f82 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d108      	bne.n	8007fb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007fce:	f7ff fdab 	bl	8007b28 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fd2:	f7f9 fdc9 	bl	8001b68 <HAL_GetTick>
 8007fd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007fd8:	e009      	b.n	8007fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fda:	f7f9 fdc5 	bl	8001b68 <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d902      	bls.n	8007fee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e004      	b.n	8007ff8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007fee:	f7ff fdaa 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f0      	bne.n	8007fda <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d137      	bne.n	800806e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008012:	4313      	orrs	r3, r2
 8008014:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008028:	4313      	orrs	r3, r2
 800802a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800802c:	f7ff fd6d 	bl	8007b0a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008030:	f7f9 fd9a 	bl	8001b68 <HAL_GetTick>
 8008034:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008036:	e009      	b.n	800804c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008038:	f7f9 fd96 	bl	8001b68 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d902      	bls.n	800804c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
        break;
 800804a:	e004      	b.n	8008056 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800804c:	f7ff fd7b 	bl	8007b46 <LL_RCC_PLLSAI1_IsReady>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d1f0      	bne.n	8008038 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d108      	bne.n	800806e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800805c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008060:	691a      	ldr	r2, [r3, #16]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800806a:	4313      	orrs	r3, r2
 800806c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e049      	b.n	800811e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 face 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 fa7c 	bl	80085b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b01      	cmp	r3, #1
 800813a:	d001      	beq.n	8008140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e036      	b.n	80081ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68da      	ldr	r2, [r3, #12]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f042 0201 	orr.w	r2, r2, #1
 8008156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a17      	ldr	r2, [pc, #92]	@ (80081bc <HAL_TIM_Base_Start_IT+0x94>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIM_Base_Start_IT+0x44>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816a:	d115      	bne.n	8008198 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	4b13      	ldr	r3, [pc, #76]	@ (80081c0 <HAL_TIM_Base_Start_IT+0x98>)
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b06      	cmp	r3, #6
 800817c:	d015      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x82>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008184:	d011      	beq.n	80081aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f042 0201 	orr.w	r2, r2, #1
 8008194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008196:	e008      	b.n	80081aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e000      	b.n	80081ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	40012c00 	.word	0x40012c00
 80081c0:	00010007 	.word	0x00010007

080081c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d020      	beq.n	8008228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01b      	beq.n	8008228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f06f 0202 	mvn.w	r2, #2
 80081f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f9b2 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 8008214:	e005      	b.n	8008222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9a4 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f9b5 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f003 0304 	and.w	r3, r3, #4
 800822e:	2b00      	cmp	r3, #0
 8008230:	d020      	beq.n	8008274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d01b      	beq.n	8008274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f06f 0204 	mvn.w	r2, #4
 8008244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2202      	movs	r2, #2
 800824a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699b      	ldr	r3, [r3, #24]
 8008252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f98c 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 8008260:	e005      	b.n	800826e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f97e 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f98f 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d020      	beq.n	80082c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01b      	beq.n	80082c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f06f 0208 	mvn.w	r2, #8
 8008290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2204      	movs	r2, #4
 8008296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f966 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 80082ac:	e005      	b.n	80082ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f958 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f969 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f003 0310 	and.w	r3, r3, #16
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d020      	beq.n	800830c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01b      	beq.n	800830c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f06f 0210 	mvn.w	r2, #16
 80082dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2208      	movs	r2, #8
 80082e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f940 	bl	8008578 <HAL_TIM_IC_CaptureCallback>
 80082f8:	e005      	b.n	8008306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f932 	bl	8008564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f943 	bl	800858c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00c      	beq.n	8008330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f06f 0201 	mvn.w	r2, #1
 8008328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7f8 fdbe 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00c      	beq.n	800835e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834a:	2b00      	cmp	r3, #0
 800834c:	d007      	beq.n	800835e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 faa1 	bl	80088a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00c      	beq.n	8008382 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800837a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fa99 	bl	80088b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00c      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800839e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8fd 	bl	80085a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f003 0320 	and.w	r3, r3, #32
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00c      	beq.n	80083ca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f06f 0220 	mvn.w	r2, #32
 80083c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fa61 	bl	800888c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_ConfigClockSource+0x1c>
 80083ea:	2302      	movs	r3, #2
 80083ec:	e0b6      	b.n	800855c <HAL_TIM_ConfigClockSource+0x18a>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800840c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008410:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008418:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800842a:	d03e      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0xd8>
 800842c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008430:	f200 8087 	bhi.w	8008542 <HAL_TIM_ConfigClockSource+0x170>
 8008434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008438:	f000 8086 	beq.w	8008548 <HAL_TIM_ConfigClockSource+0x176>
 800843c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008440:	d87f      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 8008442:	2b70      	cmp	r3, #112	@ 0x70
 8008444:	d01a      	beq.n	800847c <HAL_TIM_ConfigClockSource+0xaa>
 8008446:	2b70      	cmp	r3, #112	@ 0x70
 8008448:	d87b      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 800844a:	2b60      	cmp	r3, #96	@ 0x60
 800844c:	d050      	beq.n	80084f0 <HAL_TIM_ConfigClockSource+0x11e>
 800844e:	2b60      	cmp	r3, #96	@ 0x60
 8008450:	d877      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 8008452:	2b50      	cmp	r3, #80	@ 0x50
 8008454:	d03c      	beq.n	80084d0 <HAL_TIM_ConfigClockSource+0xfe>
 8008456:	2b50      	cmp	r3, #80	@ 0x50
 8008458:	d873      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 800845a:	2b40      	cmp	r3, #64	@ 0x40
 800845c:	d058      	beq.n	8008510 <HAL_TIM_ConfigClockSource+0x13e>
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d86f      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 8008462:	2b30      	cmp	r3, #48	@ 0x30
 8008464:	d064      	beq.n	8008530 <HAL_TIM_ConfigClockSource+0x15e>
 8008466:	2b30      	cmp	r3, #48	@ 0x30
 8008468:	d86b      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 800846a:	2b20      	cmp	r3, #32
 800846c:	d060      	beq.n	8008530 <HAL_TIM_ConfigClockSource+0x15e>
 800846e:	2b20      	cmp	r3, #32
 8008470:	d867      	bhi.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d05c      	beq.n	8008530 <HAL_TIM_ConfigClockSource+0x15e>
 8008476:	2b10      	cmp	r3, #16
 8008478:	d05a      	beq.n	8008530 <HAL_TIM_ConfigClockSource+0x15e>
 800847a:	e062      	b.n	8008542 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800848c:	f000 f97e 	bl	800878c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800849e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	609a      	str	r2, [r3, #8]
      break;
 80084a8:	e04f      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	f000 f967 	bl	800878c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084cc:	609a      	str	r2, [r3, #8]
      break;
 80084ce:	e03c      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084dc:	461a      	mov	r2, r3
 80084de:	f000 f8d9 	bl	8008694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2150      	movs	r1, #80	@ 0x50
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 f932 	bl	8008752 <TIM_ITRx_SetConfig>
      break;
 80084ee:	e02c      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084fc:	461a      	mov	r2, r3
 80084fe:	f000 f8f8 	bl	80086f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2160      	movs	r1, #96	@ 0x60
 8008508:	4618      	mov	r0, r3
 800850a:	f000 f922 	bl	8008752 <TIM_ITRx_SetConfig>
      break;
 800850e:	e01c      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851c:	461a      	mov	r2, r3
 800851e:	f000 f8b9 	bl	8008694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2140      	movs	r1, #64	@ 0x40
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f912 	bl	8008752 <TIM_ITRx_SetConfig>
      break;
 800852e:	e00c      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f000 f909 	bl	8008752 <TIM_ITRx_SetConfig>
      break;
 8008540:	e003      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]
      break;
 8008546:	e000      	b.n	800854a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008548:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a30      	ldr	r2, [pc, #192]	@ (8008688 <TIM_Base_SetConfig+0xd4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d003      	beq.n	80085d4 <TIM_Base_SetConfig+0x20>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085d2:	d108      	bne.n	80085e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a27      	ldr	r2, [pc, #156]	@ (8008688 <TIM_Base_SetConfig+0xd4>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d00b      	beq.n	8008606 <TIM_Base_SetConfig+0x52>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f4:	d007      	beq.n	8008606 <TIM_Base_SetConfig+0x52>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a24      	ldr	r2, [pc, #144]	@ (800868c <TIM_Base_SetConfig+0xd8>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <TIM_Base_SetConfig+0x52>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a23      	ldr	r2, [pc, #140]	@ (8008690 <TIM_Base_SetConfig+0xdc>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d108      	bne.n	8008618 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800860c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <TIM_Base_SetConfig+0xd4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d007      	beq.n	8008654 <TIM_Base_SetConfig+0xa0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a11      	ldr	r2, [pc, #68]	@ (800868c <TIM_Base_SetConfig+0xd8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d003      	beq.n	8008654 <TIM_Base_SetConfig+0xa0>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4a10      	ldr	r2, [pc, #64]	@ (8008690 <TIM_Base_SetConfig+0xdc>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d103      	bne.n	800865c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	691a      	ldr	r2, [r3, #16]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b01      	cmp	r3, #1
 800866c:	d105      	bne.n	800867a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	611a      	str	r2, [r3, #16]
  }
}
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40012c00 	.word	0x40012c00
 800868c:	40014400 	.word	0x40014400
 8008690:	40014800 	.word	0x40014800

08008694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	f023 0201 	bic.w	r2, r3, #1
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	011b      	lsls	r3, r3, #4
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f023 030a 	bic.w	r3, r3, #10
 80086d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	621a      	str	r2, [r3, #32]
}
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b087      	sub	sp, #28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	f023 0210 	bic.w	r2, r3, #16
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800871c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	031b      	lsls	r3, r3, #12
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800872e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	621a      	str	r2, [r3, #32]
}
 8008746:	bf00      	nop
 8008748:	371c      	adds	r7, #28
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800876c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4313      	orrs	r3, r2
 8008774:	f043 0307 	orr.w	r3, r3, #7
 8008778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	609a      	str	r2, [r3, #8]
}
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	021a      	lsls	r2, r3, #8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	431a      	orrs	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	609a      	str	r2, [r3, #8]
}
 80087c0:	bf00      	nop
 80087c2:	371c      	adds	r7, #28
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e04a      	b.n	800887a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1f      	ldr	r2, [pc, #124]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d108      	bne.n	8008820 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008814:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	4313      	orrs	r3, r2
 800881e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a12      	ldr	r2, [pc, #72]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884c:	d10c      	bne.n	8008868 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	4313      	orrs	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40012c00 	.word	0x40012c00

0800888c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <LL_RCC_GetUSARTClockSource>:
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80088d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4013      	ands	r3, r2
}
 80088dc:	4618      	mov	r0, r3
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <LL_RCC_GetLPUARTClockSource>:
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80088f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4013      	ands	r3, r2
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e042      	b.n	80089a0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7f8 fe9f 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2224      	movs	r2, #36	@ 0x24
 8008936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0201 	bic.w	r2, r2, #1
 8008948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fade 	bl	8008f14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8b3 	bl	8008ac4 <UART_SetConfig>
 800895e:	4603      	mov	r3, r0
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e01b      	b.n	80089a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689a      	ldr	r2, [r3, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fb5d 	bl	8009058 <UART_CheckIdleState>
 800899e:	4603      	mov	r3, r0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	@ 0x28
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	4613      	mov	r3, r2
 80089b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089be:	2b20      	cmp	r3, #32
 80089c0:	d17b      	bne.n	8008aba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_UART_Transmit+0x26>
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e074      	b.n	8008abc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2221      	movs	r2, #33	@ 0x21
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089e2:	f7f9 f8c1 	bl	8001b68 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	88fa      	ldrh	r2, [r7, #6]
 80089ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	88fa      	ldrh	r2, [r7, #6]
 80089f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a00:	d108      	bne.n	8008a14 <HAL_UART_Transmit+0x6c>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d104      	bne.n	8008a14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e003      	b.n	8008a1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a1c:	e030      	b.n	8008a80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 fbbf 	bl	80091ac <UART_WaitOnFlagUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e03d      	b.n	8008abc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	3302      	adds	r3, #2
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	e007      	b.n	8008a6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	3b01      	subs	r3, #1
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1c8      	bne.n	8008a1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2200      	movs	r2, #0
 8008a94:	2140      	movs	r1, #64	@ 0x40
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fb88 	bl	80091ac <UART_WaitOnFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e006      	b.n	8008abc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e000      	b.n	8008abc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008aba:	2302      	movs	r3, #2
  }
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ac8:	b08c      	sub	sp, #48	@ 0x30
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	689a      	ldr	r2, [r3, #8]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	431a      	orrs	r2, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	4baf      	ldr	r3, [pc, #700]	@ (8008db0 <UART_SetConfig+0x2ec>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4aa4      	ldr	r2, [pc, #656]	@ (8008db4 <UART_SetConfig+0x2f0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d004      	beq.n	8008b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008b3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	6812      	ldr	r2, [r2, #0]
 8008b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b44:	430b      	orrs	r3, r1
 8008b46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4e:	f023 010f 	bic.w	r1, r3, #15
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a95      	ldr	r2, [pc, #596]	@ (8008db8 <UART_SetConfig+0x2f4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d125      	bne.n	8008bb4 <UART_SetConfig+0xf0>
 8008b68:	2003      	movs	r0, #3
 8008b6a:	f7ff fead 	bl	80088c8 <LL_RCC_GetUSARTClockSource>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d81b      	bhi.n	8008bac <UART_SetConfig+0xe8>
 8008b74:	a201      	add	r2, pc, #4	@ (adr r2, 8008b7c <UART_SetConfig+0xb8>)
 8008b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7a:	bf00      	nop
 8008b7c:	08008b8d 	.word	0x08008b8d
 8008b80:	08008b9d 	.word	0x08008b9d
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008ba5 	.word	0x08008ba5
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b92:	e042      	b.n	8008c1a <UART_SetConfig+0x156>
 8008b94:	2302      	movs	r3, #2
 8008b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b9a:	e03e      	b.n	8008c1a <UART_SetConfig+0x156>
 8008b9c:	2304      	movs	r3, #4
 8008b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba2:	e03a      	b.n	8008c1a <UART_SetConfig+0x156>
 8008ba4:	2308      	movs	r3, #8
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008baa:	e036      	b.n	8008c1a <UART_SetConfig+0x156>
 8008bac:	2310      	movs	r3, #16
 8008bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bb2:	e032      	b.n	8008c1a <UART_SetConfig+0x156>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a7e      	ldr	r2, [pc, #504]	@ (8008db4 <UART_SetConfig+0x2f0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d12a      	bne.n	8008c14 <UART_SetConfig+0x150>
 8008bbe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008bc2:	f7ff fe91 	bl	80088e8 <LL_RCC_GetLPUARTClockSource>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bcc:	d01a      	beq.n	8008c04 <UART_SetConfig+0x140>
 8008bce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008bd2:	d81b      	bhi.n	8008c0c <UART_SetConfig+0x148>
 8008bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bd8:	d00c      	beq.n	8008bf4 <UART_SetConfig+0x130>
 8008bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008bde:	d815      	bhi.n	8008c0c <UART_SetConfig+0x148>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d003      	beq.n	8008bec <UART_SetConfig+0x128>
 8008be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be8:	d008      	beq.n	8008bfc <UART_SetConfig+0x138>
 8008bea:	e00f      	b.n	8008c0c <UART_SetConfig+0x148>
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf2:	e012      	b.n	8008c1a <UART_SetConfig+0x156>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfa:	e00e      	b.n	8008c1a <UART_SetConfig+0x156>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e00a      	b.n	8008c1a <UART_SetConfig+0x156>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e006      	b.n	8008c1a <UART_SetConfig+0x156>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e002      	b.n	8008c1a <UART_SetConfig+0x156>
 8008c14:	2310      	movs	r3, #16
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a65      	ldr	r2, [pc, #404]	@ (8008db4 <UART_SetConfig+0x2f0>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	f040 8097 	bne.w	8008d54 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	d823      	bhi.n	8008c76 <UART_SetConfig+0x1b2>
 8008c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <UART_SetConfig+0x170>)
 8008c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c34:	08008c59 	.word	0x08008c59
 8008c38:	08008c77 	.word	0x08008c77
 8008c3c:	08008c61 	.word	0x08008c61
 8008c40:	08008c77 	.word	0x08008c77
 8008c44:	08008c67 	.word	0x08008c67
 8008c48:	08008c77 	.word	0x08008c77
 8008c4c:	08008c77 	.word	0x08008c77
 8008c50:	08008c77 	.word	0x08008c77
 8008c54:	08008c6f 	.word	0x08008c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c58:	f7fe fd0a 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 8008c5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c5e:	e010      	b.n	8008c82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c60:	4b56      	ldr	r3, [pc, #344]	@ (8008dbc <UART_SetConfig+0x2f8>)
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c64:	e00d      	b.n	8008c82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c66:	f7fe fc83 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8008c6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008c6c:	e009      	b.n	8008c82 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008c74:	e005      	b.n	8008c82 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 812b 	beq.w	8008ee0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8e:	4a4c      	ldr	r2, [pc, #304]	@ (8008dc0 <UART_SetConfig+0x2fc>)
 8008c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c94:	461a      	mov	r2, r3
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d305      	bcc.n	8008cba <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d903      	bls.n	8008cc2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008cc0:	e10e      	b.n	8008ee0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	60bb      	str	r3, [r7, #8]
 8008cc8:	60fa      	str	r2, [r7, #12]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cce:	4a3c      	ldr	r2, [pc, #240]	@ (8008dc0 <UART_SetConfig+0x2fc>)
 8008cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ce0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ce4:	f7f7 ff38 	bl	8000b58 <__aeabi_uldivmod>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	4610      	mov	r0, r2
 8008cee:	4619      	mov	r1, r3
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	020b      	lsls	r3, r1, #8
 8008cfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cfe:	0202      	lsls	r2, r0, #8
 8008d00:	6979      	ldr	r1, [r7, #20]
 8008d02:	6849      	ldr	r1, [r1, #4]
 8008d04:	0849      	lsrs	r1, r1, #1
 8008d06:	2000      	movs	r0, #0
 8008d08:	460c      	mov	r4, r1
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	eb12 0804 	adds.w	r8, r2, r4
 8008d10:	eb43 0905 	adc.w	r9, r3, r5
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	469a      	mov	sl, r3
 8008d1c:	4693      	mov	fp, r2
 8008d1e:	4652      	mov	r2, sl
 8008d20:	465b      	mov	r3, fp
 8008d22:	4640      	mov	r0, r8
 8008d24:	4649      	mov	r1, r9
 8008d26:	f7f7 ff17 	bl	8000b58 <__aeabi_uldivmod>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4613      	mov	r3, r2
 8008d30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d32:	6a3b      	ldr	r3, [r7, #32]
 8008d34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d38:	d308      	bcc.n	8008d4c <UART_SetConfig+0x288>
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d40:	d204      	bcs.n	8008d4c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	e0c9      	b.n	8008ee0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008d52:	e0c5      	b.n	8008ee0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d5c:	d16d      	bne.n	8008e3a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b07      	cmp	r3, #7
 8008d66:	d82d      	bhi.n	8008dc4 <UART_SetConfig+0x300>
 8008d68:	a201      	add	r2, pc, #4	@ (adr r2, 8008d70 <UART_SetConfig+0x2ac>)
 8008d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6e:	bf00      	nop
 8008d70:	08008d91 	.word	0x08008d91
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008dc5 	.word	0x08008dc5
 8008d7c:	08008d9f 	.word	0x08008d9f
 8008d80:	08008dc5 	.word	0x08008dc5
 8008d84:	08008dc5 	.word	0x08008dc5
 8008d88:	08008dc5 	.word	0x08008dc5
 8008d8c:	08008da7 	.word	0x08008da7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d90:	f7fe fc84 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8008d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008d96:	e01b      	b.n	8008dd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d98:	4b08      	ldr	r3, [pc, #32]	@ (8008dbc <UART_SetConfig+0x2f8>)
 8008d9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008d9c:	e018      	b.n	8008dd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d9e:	f7fe fbe7 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8008da2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008da4:	e014      	b.n	8008dd0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008dac:	e010      	b.n	8008dd0 <UART_SetConfig+0x30c>
 8008dae:	bf00      	nop
 8008db0:	cfff69f3 	.word	0xcfff69f3
 8008db4:	40008000 	.word	0x40008000
 8008db8:	40013800 	.word	0x40013800
 8008dbc:	00f42400 	.word	0x00f42400
 8008dc0:	080113e0 	.word	0x080113e0
      default:
        pclk = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8084 	beq.w	8008ee0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8008f0c <UART_SetConfig+0x448>)
 8008dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dea:	005a      	lsls	r2, r3, #1
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	085b      	lsrs	r3, r3, #1
 8008df2:	441a      	add	r2, r3
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	2b0f      	cmp	r3, #15
 8008e02:	d916      	bls.n	8008e32 <UART_SetConfig+0x36e>
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e0a:	d212      	bcs.n	8008e32 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f023 030f 	bic.w	r3, r3, #15
 8008e14:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	f003 0307 	and.w	r3, r3, #7
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	8bfb      	ldrh	r3, [r7, #30]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	8bfa      	ldrh	r2, [r7, #30]
 8008e2e:	60da      	str	r2, [r3, #12]
 8008e30:	e056      	b.n	8008ee0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e38:	e052      	b.n	8008ee0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b07      	cmp	r3, #7
 8008e42:	d822      	bhi.n	8008e8a <UART_SetConfig+0x3c6>
 8008e44:	a201      	add	r2, pc, #4	@ (adr r2, 8008e4c <UART_SetConfig+0x388>)
 8008e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4a:	bf00      	nop
 8008e4c:	08008e6d 	.word	0x08008e6d
 8008e50:	08008e75 	.word	0x08008e75
 8008e54:	08008e8b 	.word	0x08008e8b
 8008e58:	08008e7b 	.word	0x08008e7b
 8008e5c:	08008e8b 	.word	0x08008e8b
 8008e60:	08008e8b 	.word	0x08008e8b
 8008e64:	08008e8b 	.word	0x08008e8b
 8008e68:	08008e83 	.word	0x08008e83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e6c:	f7fe fc16 	bl	800769c <HAL_RCC_GetPCLK2Freq>
 8008e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e72:	e010      	b.n	8008e96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e74:	4b26      	ldr	r3, [pc, #152]	@ (8008f10 <UART_SetConfig+0x44c>)
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e78:	e00d      	b.n	8008e96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e7a:	f7fe fb79 	bl	8007570 <HAL_RCC_GetSysClockFreq>
 8008e7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e80:	e009      	b.n	8008e96 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e88:	e005      	b.n	8008e96 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e94:	bf00      	nop
    }

    if (pclk != 0U)
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d021      	beq.n	8008ee0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8008f0c <UART_SetConfig+0x448>)
 8008ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	441a      	add	r2, r3
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	2b0f      	cmp	r3, #15
 8008ec4:	d909      	bls.n	8008eda <UART_SetConfig+0x416>
 8008ec6:	6a3b      	ldr	r3, [r7, #32]
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ecc:	d205      	bcs.n	8008eda <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	e002      	b.n	8008ee0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008efc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3730      	adds	r7, #48	@ 0x30
 8008f04:	46bd      	mov	sp, r7
 8008f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0a:	bf00      	nop
 8008f0c:	080113e0 	.word	0x080113e0
 8008f10:	00f42400 	.word	0x00f42400

08008f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f20:	f003 0308 	and.w	r3, r3, #8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00a      	beq.n	8008f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00a      	beq.n	8008f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00a      	beq.n	8008fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa8:	f003 0310 	and.w	r3, r3, #16
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d00a      	beq.n	8008fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	430a      	orrs	r2, r1
 8008fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	430a      	orrs	r2, r1
 8008fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d01a      	beq.n	800902a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009012:	d10a      	bne.n	800902a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	605a      	str	r2, [r3, #4]
  }
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b098      	sub	sp, #96	@ 0x60
 800905c:	af02      	add	r7, sp, #8
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009068:	f7f8 fd7e 	bl	8001b68 <HAL_GetTick>
 800906c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b08      	cmp	r3, #8
 800907a:	d12f      	bne.n	80090dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800907c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009084:	2200      	movs	r2, #0
 8009086:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f88e 	bl	80091ac <UART_WaitOnFlagUntilTimeout>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d022      	beq.n	80090dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090bc:	e841 2300 	strex	r3, r2, [r1]
 80090c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1e6      	bne.n	8009096 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e063      	b.n	80091a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d149      	bne.n	800917e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090f2:	2200      	movs	r2, #0
 80090f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f857 	bl	80091ac <UART_WaitOnFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d03c      	beq.n	800917e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	623b      	str	r3, [r7, #32]
   return(result);
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009118:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009122:	633b      	str	r3, [r7, #48]	@ 0x30
 8009124:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e6      	bne.n	8009104 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	3308      	adds	r3, #8
 800913c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	60fb      	str	r3, [r7, #12]
   return(result);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3308      	adds	r3, #8
 8009154:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009156:	61fa      	str	r2, [r7, #28]
 8009158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	69b9      	ldr	r1, [r7, #24]
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	617b      	str	r3, [r7, #20]
   return(result);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e5      	bne.n	8009136 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e012      	b.n	80091a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2220      	movs	r2, #32
 8009182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2220      	movs	r2, #32
 800918a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3758      	adds	r7, #88	@ 0x58
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	4613      	mov	r3, r2
 80091ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091bc:	e04f      	b.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c4:	d04b      	beq.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091c6:	f7f8 fccf 	bl	8001b68 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	69ba      	ldr	r2, [r7, #24]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d302      	bcc.n	80091dc <UART_WaitOnFlagUntilTimeout+0x30>
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e04e      	b.n	800927e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 0304 	and.w	r3, r3, #4
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d037      	beq.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b80      	cmp	r3, #128	@ 0x80
 80091f2:	d034      	beq.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b40      	cmp	r3, #64	@ 0x40
 80091f8:	d031      	beq.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	69db      	ldr	r3, [r3, #28]
 8009200:	f003 0308 	and.w	r3, r3, #8
 8009204:	2b08      	cmp	r3, #8
 8009206:	d110      	bne.n	800922a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2208      	movs	r2, #8
 800920e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 f838 	bl	8009286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2208      	movs	r2, #8
 800921a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e029      	b.n	800927e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009238:	d111      	bne.n	800925e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009242:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f81e 	bl	8009286 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e00f      	b.n	800927e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	69da      	ldr	r2, [r3, #28]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4013      	ands	r3, r2
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	429a      	cmp	r2, r3
 800926c:	bf0c      	ite	eq
 800926e:	2301      	moveq	r3, #1
 8009270:	2300      	movne	r3, #0
 8009272:	b2db      	uxtb	r3, r3
 8009274:	461a      	mov	r2, r3
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	429a      	cmp	r2, r3
 800927a:	d0a0      	beq.n	80091be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009286:	b480      	push	{r7}
 8009288:	b095      	sub	sp, #84	@ 0x54
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009296:	e853 3f00 	ldrex	r3, [r3]
 800929a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800929c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80092ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092b4:	e841 2300 	strex	r3, r2, [r1]
 80092b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1e6      	bne.n	800928e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3308      	adds	r3, #8
 80092c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	e853 3f00 	ldrex	r3, [r3]
 80092ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3308      	adds	r3, #8
 80092e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e3      	bne.n	80092c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d118      	bne.n	8009332 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	60bb      	str	r3, [r7, #8]
   return(result);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f023 0310 	bic.w	r3, r3, #16
 8009314:	647b      	str	r3, [r7, #68]	@ 0x44
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800931e:	61bb      	str	r3, [r7, #24]
 8009320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	6979      	ldr	r1, [r7, #20]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	613b      	str	r3, [r7, #16]
   return(result);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e6      	bne.n	8009300 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009346:	bf00      	nop
 8009348:	3754      	adds	r7, #84	@ 0x54
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009360:	2b01      	cmp	r3, #1
 8009362:	d101      	bne.n	8009368 <HAL_UARTEx_DisableFifoMode+0x16>
 8009364:	2302      	movs	r3, #2
 8009366:	e027      	b.n	80093b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2224      	movs	r2, #36	@ 0x24
 8009374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0201 	bic.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009396:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d101      	bne.n	80093dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093d8:	2302      	movs	r3, #2
 80093da:	e02d      	b.n	8009438 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2224      	movs	r2, #36	@ 0x24
 80093e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0201 	bic.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	430a      	orrs	r2, r1
 8009416:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f84f 	bl	80094bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009450:	2b01      	cmp	r3, #1
 8009452:	d101      	bne.n	8009458 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009454:	2302      	movs	r3, #2
 8009456:	e02d      	b.n	80094b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2224      	movs	r2, #36	@ 0x24
 8009464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0201 	bic.w	r2, r2, #1
 800947e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f811 	bl	80094bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d108      	bne.n	80094de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094dc:	e031      	b.n	8009542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094de:	2308      	movs	r3, #8
 80094e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094e2:	2308      	movs	r3, #8
 80094e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	0e5b      	lsrs	r3, r3, #25
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	0f5b      	lsrs	r3, r3, #29
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	7b3a      	ldrb	r2, [r7, #12]
 800950a:	4911      	ldr	r1, [pc, #68]	@ (8009550 <UARTEx_SetNbDataToProcess+0x94>)
 800950c:	5c8a      	ldrb	r2, [r1, r2]
 800950e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009512:	7b3a      	ldrb	r2, [r7, #12]
 8009514:	490f      	ldr	r1, [pc, #60]	@ (8009554 <UARTEx_SetNbDataToProcess+0x98>)
 8009516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009518:	fb93 f3f2 	sdiv	r3, r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	7b7a      	ldrb	r2, [r7, #13]
 8009528:	4909      	ldr	r1, [pc, #36]	@ (8009550 <UARTEx_SetNbDataToProcess+0x94>)
 800952a:	5c8a      	ldrb	r2, [r1, r2]
 800952c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009530:	7b7a      	ldrb	r2, [r7, #13]
 8009532:	4908      	ldr	r1, [pc, #32]	@ (8009554 <UARTEx_SetNbDataToProcess+0x98>)
 8009534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009536:	fb93 f3f2 	sdiv	r3, r3, r2
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009542:	bf00      	nop
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	080113f8 	.word	0x080113f8
 8009554:	08011400 	.word	0x08011400

08009558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009568:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800956c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009586:	b480      	push	{r7}
 8009588:	b085      	sub	sp, #20
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800958e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009592:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800959a:	b29a      	uxth	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	43db      	mvns	r3, r3
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	4013      	ands	r3, r2
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	1d3b      	adds	r3, r7, #4
 80095c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b09d      	sub	sp, #116	@ 0x74
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	b29b      	uxth	r3, r3
 8009616:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800961a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	78db      	ldrb	r3, [r3, #3]
 8009626:	2b03      	cmp	r3, #3
 8009628:	d81f      	bhi.n	800966a <USB_ActivateEndpoint+0x72>
 800962a:	a201      	add	r2, pc, #4	@ (adr r2, 8009630 <USB_ActivateEndpoint+0x38>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009641 	.word	0x08009641
 8009634:	0800965d 	.word	0x0800965d
 8009638:	08009673 	.word	0x08009673
 800963c:	0800964f 	.word	0x0800964f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009640:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009644:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009648:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800964c:	e012      	b.n	8009674 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800964e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009652:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009656:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800965a:	e00b      	b.n	8009674 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800965c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009660:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009664:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009668:	e004      	b.n	8009674 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009670:	e000      	b.n	8009674 <USB_ActivateEndpoint+0x7c>
      break;
 8009672:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	441a      	add	r2, r3
 800967e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800968a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009692:	b29b      	uxth	r3, r3
 8009694:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	b21b      	sxth	r3, r3
 80096a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ae:	b21a      	sxth	r2, r3
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	b21b      	sxth	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	441a      	add	r2, r3
 80096c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80096cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096dc:	b29b      	uxth	r3, r3
 80096de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	7b1b      	ldrb	r3, [r3, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f040 8178 	bne.w	80099da <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	785b      	ldrb	r3, [r3, #1]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 8084 	beq.w	80097fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096fe:	b29b      	uxth	r3, r3
 8009700:	461a      	mov	r2, r3
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	4413      	add	r3, r2
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	00da      	lsls	r2, r3, #3
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	88db      	ldrh	r3, [r3, #6]
 800971c:	085b      	lsrs	r3, r3, #1
 800971e:	b29b      	uxth	r3, r3
 8009720:	005b      	lsls	r3, r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	827b      	strh	r3, [r7, #18]
 8009736:	8a7b      	ldrh	r3, [r7, #18]
 8009738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01b      	beq.n	8009778 <USB_ActivateEndpoint+0x180>
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	b29b      	uxth	r3, r3
 800974e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009756:	823b      	strh	r3, [r7, #16]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	441a      	add	r2, r3
 8009762:	8a3b      	ldrh	r3, [r7, #16]
 8009764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800976c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009770:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009774:	b29b      	uxth	r3, r3
 8009776:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	78db      	ldrb	r3, [r3, #3]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d020      	beq.n	80097c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	4413      	add	r3, r2
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b29b      	uxth	r3, r3
 800978e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009792:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009796:	81bb      	strh	r3, [r7, #12]
 8009798:	89bb      	ldrh	r3, [r7, #12]
 800979a:	f083 0320 	eor.w	r3, r3, #32
 800979e:	81bb      	strh	r3, [r7, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	441a      	add	r2, r3
 80097aa:	89bb      	ldrh	r3, [r7, #12]
 80097ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]
 80097c0:	e2d5      	b.n	8009d6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d8:	81fb      	strh	r3, [r7, #14]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	441a      	add	r2, r3
 80097e4:	89fb      	ldrh	r3, [r7, #14]
 80097e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	8013      	strh	r3, [r2, #0]
 80097fa:	e2b8      	b.n	8009d6e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009806:	b29b      	uxth	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980c:	4413      	add	r3, r2
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	00da      	lsls	r2, r3, #3
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	4413      	add	r3, r2
 800981a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800981e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	88db      	ldrh	r3, [r3, #6]
 8009824:	085b      	lsrs	r3, r3, #1
 8009826:	b29b      	uxth	r3, r3
 8009828:	005b      	lsls	r3, r3, #1
 800982a:	b29a      	uxth	r2, r3
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009840:	4413      	add	r3, r2
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00da      	lsls	r2, r3, #3
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	4413      	add	r3, r2
 800984e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009852:	627b      	str	r3, [r7, #36]	@ 0x24
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800985e:	b29a      	uxth	r2, r3
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	2b3e      	cmp	r3, #62	@ 0x3e
 800986a:	d91d      	bls.n	80098a8 <USB_ActivateEndpoint+0x2b0>
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	095b      	lsrs	r3, r3, #5
 8009872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <USB_ActivateEndpoint+0x28e>
 8009880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009882:	3b01      	subs	r3, #1
 8009884:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29a      	uxth	r2, r3
 800988c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800988e:	b29b      	uxth	r3, r3
 8009890:	029b      	lsls	r3, r3, #10
 8009892:	b29b      	uxth	r3, r3
 8009894:	4313      	orrs	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	801a      	strh	r2, [r3, #0]
 80098a6:	e026      	b.n	80098f6 <USB_ActivateEndpoint+0x2fe>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d10a      	bne.n	80098c6 <USB_ActivateEndpoint+0x2ce>
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098be:	b29a      	uxth	r2, r3
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	e017      	b.n	80098f6 <USB_ActivateEndpoint+0x2fe>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	085b      	lsrs	r3, r3, #1
 80098cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <USB_ActivateEndpoint+0x2e8>
 80098da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098dc:	3301      	adds	r3, #1
 80098de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29a      	uxth	r2, r3
 80098e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	029b      	lsls	r3, r3, #10
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	4313      	orrs	r3, r2
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009904:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d01b      	beq.n	8009946 <USB_ActivateEndpoint+0x34e>
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009920:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009924:	843b      	strh	r3, [r7, #32]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	8c3b      	ldrh	r3, [r7, #32]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800993a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800993e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d124      	bne.n	8009998 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009964:	83bb      	strh	r3, [r7, #28]
 8009966:	8bbb      	ldrh	r3, [r7, #28]
 8009968:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800996c:	83bb      	strh	r3, [r7, #28]
 800996e:	8bbb      	ldrh	r3, [r7, #28]
 8009970:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009974:	83bb      	strh	r3, [r7, #28]
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	441a      	add	r2, r3
 8009980:	8bbb      	ldrh	r3, [r7, #28]
 8009982:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009986:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800998a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800998e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009992:	b29b      	uxth	r3, r3
 8009994:	8013      	strh	r3, [r2, #0]
 8009996:	e1ea      	b.n	8009d6e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099ae:	83fb      	strh	r3, [r7, #30]
 80099b0:	8bfb      	ldrh	r3, [r7, #30]
 80099b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80099b6:	83fb      	strh	r3, [r7, #30]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	441a      	add	r2, r3
 80099c2:	8bfb      	ldrh	r3, [r7, #30]
 80099c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	8013      	strh	r3, [r2, #0]
 80099d8:	e1c9      	b.n	8009d6e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	78db      	ldrb	r3, [r3, #3]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d11e      	bne.n	8009a20 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80099f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099f8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	441a      	add	r2, r3
 8009a06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a12:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	8013      	strh	r3, [r2, #0]
 8009a1e:	e01d      	b.n	8009a5c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a36:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	441a      	add	r2, r3
 8009a44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009a48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a6c:	4413      	add	r3, r2
 8009a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	00da      	lsls	r2, r3, #3
 8009a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	891b      	ldrh	r3, [r3, #8]
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009a8e:	801a      	strh	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aa0:	4413      	add	r3, r2
 8009aa2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	00da      	lsls	r2, r3, #3
 8009aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	895b      	ldrh	r3, [r3, #10]
 8009ab8:	085b      	lsrs	r3, r3, #1
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ac2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785b      	ldrb	r3, [r3, #1]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f040 8093 	bne.w	8009bf4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009ade:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d01b      	beq.n	8009b22 <USB_ActivateEndpoint+0x52a>
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	441a      	add	r2, r3
 8009b0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009b30:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01b      	beq.n	8009b72 <USB_ActivateEndpoint+0x57a>
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4413      	add	r3, r2
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b50:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	441a      	add	r2, r3
 8009b5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009b5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b88:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009b8a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009b8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b90:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009b92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009b94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b98:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	441a      	add	r2, r3
 8009ba4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4413      	add	r3, r2
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	441a      	add	r2, r3
 8009bdc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	8013      	strh	r3, [r2, #0]
 8009bf2:	e0bc      	b.n	8009d6e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	881b      	ldrh	r3, [r3, #0]
 8009c00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d01d      	beq.n	8009c4c <USB_ActivateEndpoint+0x654>
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c26:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	441a      	add	r2, r3
 8009c34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009c38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009c5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01d      	beq.n	8009ca4 <USB_ActivateEndpoint+0x6ac>
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	881b      	ldrh	r3, [r3, #0]
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c7e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	441a      	add	r2, r3
 8009c8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009c90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	78db      	ldrb	r3, [r3, #3]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d024      	beq.n	8009cf6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4413      	add	r3, r2
 8009cb6:	881b      	ldrh	r3, [r3, #0]
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009cc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009cca:	f083 0320 	eor.w	r3, r3, #32
 8009cce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	441a      	add	r2, r3
 8009cdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	8013      	strh	r3, [r2, #0]
 8009cf4:	e01d      	b.n	8009d32 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d0c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	441a      	add	r2, r3
 8009d1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009d1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d6e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3774      	adds	r7, #116	@ 0x74
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop

08009d80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b08d      	sub	sp, #52	@ 0x34
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	7b1b      	ldrb	r3, [r3, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f040 808e 	bne.w	8009eb0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d044      	beq.n	8009e26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	81bb      	strh	r3, [r7, #12]
 8009daa:	89bb      	ldrh	r3, [r7, #12]
 8009dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01b      	beq.n	8009dec <USB_DeactivateEndpoint+0x6c>
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dca:	817b      	strh	r3, [r7, #10]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	441a      	add	r2, r3
 8009dd6:	897b      	ldrh	r3, [r7, #10]
 8009dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009de4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e02:	813b      	strh	r3, [r7, #8]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	441a      	add	r2, r3
 8009e0e:	893b      	ldrh	r3, [r7, #8]
 8009e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]
 8009e24:	e192      	b.n	800a14c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	827b      	strh	r3, [r7, #18]
 8009e34:	8a7b      	ldrh	r3, [r7, #18]
 8009e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01b      	beq.n	8009e76 <USB_DeactivateEndpoint+0xf6>
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e54:	823b      	strh	r3, [r7, #16]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	441a      	add	r2, r3
 8009e60:	8a3b      	ldrh	r3, [r7, #16]
 8009e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e8c:	81fb      	strh	r3, [r7, #14]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	441a      	add	r2, r3
 8009e98:	89fb      	ldrh	r3, [r7, #14]
 8009e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	8013      	strh	r3, [r2, #0]
 8009eae:	e14d      	b.n	800a14c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 80a5 	bne.w	800a004 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	843b      	strh	r3, [r7, #32]
 8009ec8:	8c3b      	ldrh	r3, [r7, #32]
 8009eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01b      	beq.n	8009f0a <USB_DeactivateEndpoint+0x18a>
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ee4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ee8:	83fb      	strh	r3, [r7, #30]
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	441a      	add	r2, r3
 8009ef4:	8bfb      	ldrh	r3, [r7, #30]
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	83bb      	strh	r3, [r7, #28]
 8009f18:	8bbb      	ldrh	r3, [r7, #28]
 8009f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d01b      	beq.n	8009f5a <USB_DeactivateEndpoint+0x1da>
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f38:	837b      	strh	r3, [r7, #26]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	441a      	add	r2, r3
 8009f44:	8b7b      	ldrh	r3, [r7, #26]
 8009f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f70:	833b      	strh	r3, [r7, #24]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	441a      	add	r2, r3
 8009f7c:	8b3b      	ldrh	r3, [r7, #24]
 8009f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fa8:	82fb      	strh	r3, [r7, #22]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	441a      	add	r2, r3
 8009fb4:	8afb      	ldrh	r3, [r7, #22]
 8009fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fe0:	82bb      	strh	r3, [r7, #20]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	441a      	add	r2, r3
 8009fec:	8abb      	ldrh	r3, [r7, #20]
 8009fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	8013      	strh	r3, [r2, #0]
 800a002:	e0a3      	b.n	800a14c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a012:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01b      	beq.n	800a054 <USB_DeactivateEndpoint+0x2d4>
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a02e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a032:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	441a      	add	r2, r3
 800a03e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a048:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a04c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a050:	b29b      	uxth	r3, r3
 800a052:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a062:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01b      	beq.n	800a0a4 <USB_DeactivateEndpoint+0x324>
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a082:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a09c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	441a      	add	r2, r3
 800a0c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a10c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a110:	b29b      	uxth	r3, r3
 800a112:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a12a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	441a      	add	r2, r3
 800a136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a13c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a148:	b29b      	uxth	r3, r3
 800a14a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3734      	adds	r7, #52	@ 0x34
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b0c2      	sub	sp, #264	@ 0x108
 800a15e:	af00      	add	r7, sp, #0
 800a160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a168:	6018      	str	r0, [r3, #0]
 800a16a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a172:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	785b      	ldrb	r3, [r3, #1]
 800a180:	2b01      	cmp	r3, #1
 800a182:	f040 86b7 	bne.w	800aef4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d908      	bls.n	800a1b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a1b2:	e007      	b.n	800a1c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	7b1b      	ldrb	r3, [r3, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d13a      	bne.n	800a24a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6959      	ldr	r1, [r3, #20]
 800a1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	88da      	ldrh	r2, [r3, #6]
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a1f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	f001 fc98 	bl	800bb30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a210:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	4413      	add	r3, r2
 800a222:	613b      	str	r3, [r7, #16]
 800a224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	00da      	lsls	r2, r3, #3
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	4413      	add	r3, r2
 800a236:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	b29a      	uxth	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	801a      	strh	r2, [r3, #0]
 800a246:	f000 be1f 	b.w	800ae88 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a24a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a24e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	78db      	ldrb	r3, [r3, #3]
 800a256:	2b02      	cmp	r3, #2
 800a258:	f040 8462 	bne.w	800ab20 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6a1a      	ldr	r2, [r3, #32]
 800a268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	429a      	cmp	r2, r3
 800a276:	f240 83df 	bls.w	800aa38 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a29c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	441a      	add	r2, r3
 800a2be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6a1a      	ldr	r2, [r3, #32]
 800a2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 81c7 	beq.w	800a6aa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	633b      	str	r3, [r7, #48]	@ 0x30
 800a328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d177      	bne.n	800a428 <USB_EPStartXfer+0x2ce>
 800a338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a352:	b29b      	uxth	r3, r3
 800a354:	461a      	mov	r2, r3
 800a356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a358:	4413      	add	r3, r2
 800a35a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	00da      	lsls	r2, r3, #3
 800a36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a36c:	4413      	add	r3, r2
 800a36e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a372:	627b      	str	r3, [r7, #36]	@ 0x24
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	b29b      	uxth	r3, r3
 800a37a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a37e:	b29a      	uxth	r2, r3
 800a380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a388:	2b3e      	cmp	r3, #62	@ 0x3e
 800a38a:	d921      	bls.n	800a3d0 <USB_EPStartXfer+0x276>
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a390:	095b      	lsrs	r3, r3, #5
 800a392:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <USB_EPStartXfer+0x252>
 800a3a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	029b      	lsls	r3, r3, #10
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	e050      	b.n	800a472 <USB_EPStartXfer+0x318>
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10a      	bne.n	800a3ee <USB_EPStartXfer+0x294>
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ea:	801a      	strh	r2, [r3, #0]
 800a3ec:	e041      	b.n	800a472 <USB_EPStartXfer+0x318>
 800a3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f2:	085b      	lsrs	r3, r3, #1
 800a3f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <USB_EPStartXfer+0x2b4>
 800a404:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a408:	3301      	adds	r3, #1
 800a40a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29a      	uxth	r2, r3
 800a414:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a418:	b29b      	uxth	r3, r3
 800a41a:	029b      	lsls	r3, r3, #10
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	4313      	orrs	r3, r2
 800a420:	b29a      	uxth	r2, r3
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	801a      	strh	r2, [r3, #0]
 800a426:	e024      	b.n	800a472 <USB_EPStartXfer+0x318>
 800a428:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d11c      	bne.n	800a472 <USB_EPStartXfer+0x318>
 800a438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a446:	b29b      	uxth	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44c:	4413      	add	r3, r2
 800a44e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	00da      	lsls	r2, r3, #3
 800a45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a460:	4413      	add	r3, r2
 800a462:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a46c:	b29a      	uxth	r2, r3
 800a46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a470:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	895b      	ldrh	r3, [r3, #10]
 800a47e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6959      	ldr	r1, [r3, #20]
 800a48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a492:	b29b      	uxth	r3, r3
 800a494:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a498:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a49c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a4a0:	6800      	ldr	r0, [r0, #0]
 800a4a2:	f001 fb45 	bl	800bb30 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695a      	ldr	r2, [r3, #20]
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b6:	441a      	add	r2, r3
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6a1a      	ldr	r2, [r3, #32]
 800a4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d90f      	bls.n	800a500 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a4e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6a1a      	ldr	r2, [r3, #32]
 800a4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4f0:	1ad2      	subs	r2, r2, r3
 800a4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	621a      	str	r2, [r3, #32]
 800a4fe:	e00e      	b.n	800a51e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2200      	movs	r2, #0
 800a51c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d177      	bne.n	800a61e <USB_EPStartXfer+0x4c4>
 800a52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a548:	b29b      	uxth	r3, r3
 800a54a:	461a      	mov	r2, r3
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	4413      	add	r3, r2
 800a550:	61bb      	str	r3, [r7, #24]
 800a552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	00da      	lsls	r2, r3, #3
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	4413      	add	r3, r2
 800a564:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	b29b      	uxth	r3, r3
 800a570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a574:	b29a      	uxth	r2, r3
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	801a      	strh	r2, [r3, #0]
 800a57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a580:	d921      	bls.n	800a5c6 <USB_EPStartXfer+0x46c>
 800a582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a586:	095b      	lsrs	r3, r3, #5
 800a588:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a590:	f003 031f 	and.w	r3, r3, #31
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <USB_EPStartXfer+0x448>
 800a598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a59c:	3b01      	subs	r3, #1
 800a59e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	029b      	lsls	r3, r3, #10
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	801a      	strh	r2, [r3, #0]
 800a5c4:	e056      	b.n	800a674 <USB_EPStartXfer+0x51a>
 800a5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <USB_EPStartXfer+0x48a>
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	801a      	strh	r2, [r3, #0]
 800a5e2:	e047      	b.n	800a674 <USB_EPStartXfer+0x51a>
 800a5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e8:	085b      	lsrs	r3, r3, #1
 800a5ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d004      	beq.n	800a604 <USB_EPStartXfer+0x4aa>
 800a5fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5fe:	3301      	adds	r3, #1
 800a600:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29a      	uxth	r2, r3
 800a60a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a60e:	b29b      	uxth	r3, r3
 800a610:	029b      	lsls	r3, r3, #10
 800a612:	b29b      	uxth	r3, r3
 800a614:	4313      	orrs	r3, r2
 800a616:	b29a      	uxth	r2, r3
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	e02a      	b.n	800a674 <USB_EPStartXfer+0x51a>
 800a61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d122      	bne.n	800a674 <USB_EPStartXfer+0x51a>
 800a62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	623b      	str	r3, [r7, #32]
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a648:	b29b      	uxth	r3, r3
 800a64a:	461a      	mov	r2, r3
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	4413      	add	r3, r2
 800a650:	623b      	str	r3, [r7, #32]
 800a652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	00da      	lsls	r2, r3, #3
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	4413      	add	r3, r2
 800a664:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a668:	61fb      	str	r3, [r7, #28]
 800a66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a66e:	b29a      	uxth	r2, r3
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	891b      	ldrh	r3, [r3, #8]
 800a680:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6959      	ldr	r1, [r3, #20]
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a694:	b29b      	uxth	r3, r3
 800a696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a69a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a69e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	f001 fa44 	bl	800bb30 <USB_WritePMA>
 800a6a8:	e3ee      	b.n	800ae88 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	785b      	ldrb	r3, [r3, #1]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d177      	bne.n	800a7aa <USB_EPStartXfer+0x650>
 800a6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6da:	4413      	add	r3, r2
 800a6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	00da      	lsls	r2, r3, #3
 800a6ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a700:	b29a      	uxth	r2, r3
 800a702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a70a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a70c:	d921      	bls.n	800a752 <USB_EPStartXfer+0x5f8>
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a712:	095b      	lsrs	r3, r3, #5
 800a714:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a71c:	f003 031f 	and.w	r3, r3, #31
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <USB_EPStartXfer+0x5d4>
 800a724:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a728:	3b01      	subs	r3, #1
 800a72a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29a      	uxth	r2, r3
 800a734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a738:	b29b      	uxth	r3, r3
 800a73a:	029b      	lsls	r3, r3, #10
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	4313      	orrs	r3, r2
 800a740:	b29b      	uxth	r3, r3
 800a742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	e056      	b.n	800a800 <USB_EPStartXfer+0x6a6>
 800a752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <USB_EPStartXfer+0x616>
 800a75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a768:	b29a      	uxth	r2, r3
 800a76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a76c:	801a      	strh	r2, [r3, #0]
 800a76e:	e047      	b.n	800a800 <USB_EPStartXfer+0x6a6>
 800a770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a774:	085b      	lsrs	r3, r3, #1
 800a776:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <USB_EPStartXfer+0x636>
 800a786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a78a:	3301      	adds	r3, #1
 800a78c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	b29a      	uxth	r2, r3
 800a796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	029b      	lsls	r3, r3, #10
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7a6:	801a      	strh	r2, [r3, #0]
 800a7a8:	e02a      	b.n	800a800 <USB_EPStartXfer+0x6a6>
 800a7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	785b      	ldrb	r3, [r3, #1]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d122      	bne.n	800a800 <USB_EPStartXfer+0x6a6>
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7da:	4413      	add	r3, r2
 800a7dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	00da      	lsls	r2, r3, #3
 800a7ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	891b      	ldrh	r3, [r3, #8]
 800a80c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	6959      	ldr	r1, [r3, #20]
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a820:	b29b      	uxth	r3, r3
 800a822:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a826:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a82a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a82e:	6800      	ldr	r0, [r0, #0]
 800a830:	f001 f97e 	bl	800bb30 <USB_WritePMA>
            ep->xfer_buff += len;
 800a834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	695a      	ldr	r2, [r3, #20]
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a844:	441a      	add	r2, r3
 800a846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6a1a      	ldr	r2, [r3, #32]
 800a85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d90f      	bls.n	800a88e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6a1a      	ldr	r2, [r3, #32]
 800a87a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a87e:	1ad2      	subs	r2, r2, r3
 800a880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	621a      	str	r2, [r3, #32]
 800a88c:	e00e      	b.n	800a8ac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a89e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a8ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	785b      	ldrb	r3, [r3, #1]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d177      	bne.n	800a9b8 <USB_EPStartXfer+0x85e>
 800a8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	4413      	add	r3, r2
 800a8ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	00da      	lsls	r2, r3, #3
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a902:	637b      	str	r3, [r7, #52]	@ 0x34
 800a904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
 800a90a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a90e:	b29a      	uxth	r2, r3
 800a910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a912:	801a      	strh	r2, [r3, #0]
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	2b3e      	cmp	r3, #62	@ 0x3e
 800a91a:	d921      	bls.n	800a960 <USB_EPStartXfer+0x806>
 800a91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a920:	095b      	lsrs	r3, r3, #5
 800a922:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <USB_EPStartXfer+0x7e2>
 800a932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a936:	3b01      	subs	r3, #1
 800a938:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	b29a      	uxth	r2, r3
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a946:	b29b      	uxth	r3, r3
 800a948:	029b      	lsls	r3, r3, #10
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	4313      	orrs	r3, r2
 800a94e:	b29b      	uxth	r3, r3
 800a950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a958:	b29a      	uxth	r2, r3
 800a95a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95c:	801a      	strh	r2, [r3, #0]
 800a95e:	e050      	b.n	800aa02 <USB_EPStartXfer+0x8a8>
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10a      	bne.n	800a97e <USB_EPStartXfer+0x824>
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	881b      	ldrh	r3, [r3, #0]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a976:	b29a      	uxth	r2, r3
 800a978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97a:	801a      	strh	r2, [r3, #0]
 800a97c:	e041      	b.n	800aa02 <USB_EPStartXfer+0x8a8>
 800a97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <USB_EPStartXfer+0x844>
 800a994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a998:	3301      	adds	r3, #1
 800a99a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	029b      	lsls	r3, r3, #10
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	801a      	strh	r2, [r3, #0]
 800a9b6:	e024      	b.n	800aa02 <USB_EPStartXfer+0x8a8>
 800a9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	785b      	ldrb	r3, [r3, #1]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d11c      	bne.n	800aa02 <USB_EPStartXfer+0x8a8>
 800a9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9dc:	4413      	add	r3, r2
 800a9de:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	00da      	lsls	r2, r3, #3
 800a9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800aa02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	895b      	ldrh	r3, [r3, #10]
 800aa0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6959      	ldr	r1, [r3, #20]
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800aa28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800aa2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800aa30:	6800      	ldr	r0, [r0, #0]
 800aa32:	f001 f87d 	bl	800bb30 <USB_WritePMA>
 800aa36:	e227      	b.n	800ae88 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800aa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aa6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa6e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800aa72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa7a:	681a      	ldr	r2, [r3, #0]
 800aa7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	441a      	add	r2, r3
 800aa8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800aa90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aaa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	461a      	mov	r2, r3
 800aac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aac4:	4413      	add	r3, r2
 800aac6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	00da      	lsls	r2, r3, #3
 800aad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aad8:	4413      	add	r3, r2
 800aada:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aade:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aae8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aaea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	891b      	ldrh	r3, [r3, #8]
 800aaf6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6959      	ldr	r1, [r3, #20]
 800ab06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ab18:	6800      	ldr	r0, [r0, #0]
 800ab1a:	f001 f809 	bl	800bb30 <USB_WritePMA>
 800ab1e:	e1b3      	b.n	800ae88 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ab20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6a1a      	ldr	r2, [r3, #32]
 800ab2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab30:	1ad2      	subs	r2, r2, r3
 800ab32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ab3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	881b      	ldrh	r3, [r3, #0]
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 80c6 	beq.w	800acf2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	673b      	str	r3, [r7, #112]	@ 0x70
 800ab72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	785b      	ldrb	r3, [r3, #1]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d177      	bne.n	800ac72 <USB_EPStartXfer+0xb18>
 800ab82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	461a      	mov	r2, r3
 800aba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aba2:	4413      	add	r3, r2
 800aba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	00da      	lsls	r2, r3, #3
 800abb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800abb6:	4413      	add	r3, r2
 800abb8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abbc:	667b      	str	r3, [r7, #100]	@ 0x64
 800abbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc8:	b29a      	uxth	r2, r3
 800abca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abcc:	801a      	strh	r2, [r3, #0]
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd2:	2b3e      	cmp	r3, #62	@ 0x3e
 800abd4:	d921      	bls.n	800ac1a <USB_EPStartXfer+0xac0>
 800abd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abda:	095b      	lsrs	r3, r3, #5
 800abdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800abe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe4:	f003 031f 	and.w	r3, r3, #31
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d104      	bne.n	800abf6 <USB_EPStartXfer+0xa9c>
 800abec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800abf0:	3b01      	subs	r3, #1
 800abf2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800abf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	029b      	lsls	r3, r3, #10
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	4313      	orrs	r3, r2
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac16:	801a      	strh	r2, [r3, #0]
 800ac18:	e050      	b.n	800acbc <USB_EPStartXfer+0xb62>
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10a      	bne.n	800ac38 <USB_EPStartXfer+0xade>
 800ac22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac34:	801a      	strh	r2, [r3, #0]
 800ac36:	e041      	b.n	800acbc <USB_EPStartXfer+0xb62>
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3c:	085b      	lsrs	r3, r3, #1
 800ac3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <USB_EPStartXfer+0xafe>
 800ac4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ac52:	3301      	adds	r3, #1
 800ac54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ac58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	029b      	lsls	r3, r3, #10
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ac6e:	801a      	strh	r2, [r3, #0]
 800ac70:	e024      	b.n	800acbc <USB_EPStartXfer+0xb62>
 800ac72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d11c      	bne.n	800acbc <USB_EPStartXfer+0xb62>
 800ac82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	461a      	mov	r2, r3
 800ac94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac96:	4413      	add	r3, r2
 800ac98:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	00da      	lsls	r2, r3, #3
 800aca8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acaa:	4413      	add	r3, r2
 800acac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800acbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	895b      	ldrh	r3, [r3, #10]
 800acc8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800accc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	6959      	ldr	r1, [r3, #20]
 800acd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acdc:	b29b      	uxth	r3, r3
 800acde:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ace2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ace6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800acea:	6800      	ldr	r0, [r0, #0]
 800acec:	f000 ff20 	bl	800bb30 <USB_WritePMA>
 800acf0:	e0ca      	b.n	800ae88 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800acf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	785b      	ldrb	r3, [r3, #1]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d177      	bne.n	800adf2 <USB_EPStartXfer+0xc98>
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad22:	4413      	add	r3, r2
 800ad24:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ad26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	00da      	lsls	r2, r3, #3
 800ad34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad36:	4413      	add	r3, r2
 800ad38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad4c:	801a      	strh	r2, [r3, #0]
 800ad4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad52:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad54:	d921      	bls.n	800ad9a <USB_EPStartXfer+0xc40>
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <USB_EPStartXfer+0xc1c>
 800ad6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ad70:	3b01      	subs	r3, #1
 800ad72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	029b      	lsls	r3, r3, #10
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	4313      	orrs	r3, r2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	e05c      	b.n	800ae54 <USB_EPStartXfer+0xcfa>
 800ad9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <USB_EPStartXfer+0xc5e>
 800ada2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	e04d      	b.n	800ae54 <USB_EPStartXfer+0xcfa>
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <USB_EPStartXfer+0xc7e>
 800adce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800add8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29a      	uxth	r2, r3
 800adde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	029b      	lsls	r3, r3, #10
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b29a      	uxth	r2, r3
 800adec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adee:	801a      	strh	r2, [r3, #0]
 800adf0:	e030      	b.n	800ae54 <USB_EPStartXfer+0xcfa>
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d128      	bne.n	800ae54 <USB_EPStartXfer+0xcfa>
 800ae02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae26:	4413      	add	r3, r2
 800ae28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	00da      	lsls	r2, r3, #3
 800ae3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae3e:	4413      	add	r3, r2
 800ae40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ae52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6959      	ldr	r1, [r3, #20]
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae82:	6800      	ldr	r0, [r0, #0]
 800ae84:	f000 fe54 	bl	800bb30 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae90:	681a      	ldr	r2, [r3, #0]
 800ae92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeae:	817b      	strh	r3, [r7, #10]
 800aeb0:	897b      	ldrh	r3, [r7, #10]
 800aeb2:	f083 0310 	eor.w	r3, r3, #16
 800aeb6:	817b      	strh	r3, [r7, #10]
 800aeb8:	897b      	ldrh	r3, [r7, #10]
 800aeba:	f083 0320 	eor.w	r3, r3, #32
 800aebe:	817b      	strh	r3, [r7, #10]
 800aec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	441a      	add	r2, r3
 800aeda:	897b      	ldrh	r3, [r7, #10]
 800aedc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	8013      	strh	r3, [r2, #0]
 800aef0:	f000 bcde 	b.w	800b8b0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800aef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	7b1b      	ldrb	r3, [r3, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f040 80bb 	bne.w	800b07c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800af06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	699a      	ldr	r2, [r3, #24]
 800af12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d917      	bls.n	800af52 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800af22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800af32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	699a      	ldr	r2, [r3, #24]
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af42:	1ad2      	subs	r2, r2, r3
 800af44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	619a      	str	r2, [r3, #24]
 800af50:	e00e      	b.n	800af70 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800af52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800af62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2200      	movs	r2, #0
 800af6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800af94:	4413      	add	r3, r2
 800af96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	00da      	lsls	r2, r3, #3
 800afa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800afac:	4413      	add	r3, r2
 800afae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800afb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800afb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800afc8:	801a      	strh	r2, [r3, #0]
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afce:	2b3e      	cmp	r3, #62	@ 0x3e
 800afd0:	d924      	bls.n	800b01c <USB_EPStartXfer+0xec2>
 800afd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afd6:	095b      	lsrs	r3, r3, #5
 800afd8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d104      	bne.n	800aff2 <USB_EPStartXfer+0xe98>
 800afe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800afec:	3b01      	subs	r3, #1
 800afee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	b29a      	uxth	r2, r3
 800affa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800affe:	b29b      	uxth	r3, r3
 800b000:	029b      	lsls	r3, r3, #10
 800b002:	b29b      	uxth	r3, r3
 800b004:	4313      	orrs	r3, r2
 800b006:	b29b      	uxth	r3, r3
 800b008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b010:	b29a      	uxth	r2, r3
 800b012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b016:	801a      	strh	r2, [r3, #0]
 800b018:	f000 bc10 	b.w	800b83c <USB_EPStartXfer+0x16e2>
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10c      	bne.n	800b03e <USB_EPStartXfer+0xee4>
 800b024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b034:	b29a      	uxth	r2, r3
 800b036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b03a:	801a      	strh	r2, [r3, #0]
 800b03c:	e3fe      	b.n	800b83c <USB_EPStartXfer+0x16e2>
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	d004      	beq.n	800b05e <USB_EPStartXfer+0xf04>
 800b054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b058:	3301      	adds	r3, #1
 800b05a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29a      	uxth	r2, r3
 800b066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	029b      	lsls	r3, r3, #10
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4313      	orrs	r3, r2
 800b072:	b29a      	uxth	r2, r3
 800b074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b078:	801a      	strh	r2, [r3, #0]
 800b07a:	e3df      	b.n	800b83c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	78db      	ldrb	r3, [r3, #3]
 800b088:	2b02      	cmp	r3, #2
 800b08a:	f040 8218 	bne.w	800b4be <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	785b      	ldrb	r3, [r3, #1]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f040 809d 	bne.w	800b1da <USB_EPStartXfer+0x1080>
 800b0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	00da      	lsls	r2, r3, #3
 800b0d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b0dc:	4413      	add	r3, r2
 800b0de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b0e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0f2:	b29a      	uxth	r2, r3
 800b0f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b0f8:	801a      	strh	r2, [r3, #0]
 800b0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b3e      	cmp	r3, #62	@ 0x3e
 800b108:	d92b      	bls.n	800b162 <USB_EPStartXfer+0x1008>
 800b10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	095b      	lsrs	r3, r3, #5
 800b118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b120:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	f003 031f 	and.w	r3, r3, #31
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <USB_EPStartXfer+0xfe0>
 800b130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b134:	3b01      	subs	r3, #1
 800b136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b13a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b13e:	881b      	ldrh	r3, [r3, #0]
 800b140:	b29a      	uxth	r2, r3
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b146:	b29b      	uxth	r3, r3
 800b148:	029b      	lsls	r3, r3, #10
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	4313      	orrs	r3, r2
 800b14e:	b29b      	uxth	r3, r3
 800b150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b158:	b29a      	uxth	r2, r3
 800b15a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b15e:	801a      	strh	r2, [r3, #0]
 800b160:	e070      	b.n	800b244 <USB_EPStartXfer+0x10ea>
 800b162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10c      	bne.n	800b18c <USB_EPStartXfer+0x1032>
 800b172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	b29b      	uxth	r3, r3
 800b17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b182:	b29a      	uxth	r2, r3
 800b184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b188:	801a      	strh	r2, [r3, #0]
 800b18a:	e05b      	b.n	800b244 <USB_EPStartXfer+0x10ea>
 800b18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0301 	and.w	r3, r3, #1
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d004      	beq.n	800b1bc <USB_EPStartXfer+0x1062>
 800b1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b1bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	029b      	lsls	r3, r3, #10
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	b29a      	uxth	r2, r3
 800b1d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b1d6:	801a      	strh	r2, [r3, #0]
 800b1d8:	e034      	b.n	800b244 <USB_EPStartXfer+0x10ea>
 800b1da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d12c      	bne.n	800b244 <USB_EPStartXfer+0x10ea>
 800b1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b206:	b29b      	uxth	r3, r3
 800b208:	461a      	mov	r2, r3
 800b20a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b20e:	4413      	add	r3, r2
 800b210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	00da      	lsls	r2, r3, #3
 800b222:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b226:	4413      	add	r3, r2
 800b228:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b22c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	b29a      	uxth	r2, r3
 800b23e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b242:	801a      	strh	r2, [r3, #0]
 800b244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	785b      	ldrb	r3, [r3, #1]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 809d 	bne.w	800b39e <USB_EPStartXfer+0x1244>
 800b264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b280:	b29b      	uxth	r3, r3
 800b282:	461a      	mov	r2, r3
 800b284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b288:	4413      	add	r3, r2
 800b28a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	00da      	lsls	r2, r3, #3
 800b29c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b2aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2ae:	881b      	ldrh	r3, [r3, #0]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2bc:	801a      	strh	r2, [r3, #0]
 800b2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2cc:	d92b      	bls.n	800b326 <USB_EPStartXfer+0x11cc>
 800b2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	f003 031f 	and.w	r3, r3, #31
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d104      	bne.n	800b2fe <USB_EPStartXfer+0x11a4>
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	b29a      	uxth	r2, r3
 800b306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	029b      	lsls	r3, r3, #10
 800b30e:	b29b      	uxth	r3, r3
 800b310:	4313      	orrs	r3, r2
 800b312:	b29b      	uxth	r3, r3
 800b314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b322:	801a      	strh	r2, [r3, #0]
 800b324:	e069      	b.n	800b3fa <USB_EPStartXfer+0x12a0>
 800b326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10c      	bne.n	800b350 <USB_EPStartXfer+0x11f6>
 800b336:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b346:	b29a      	uxth	r2, r3
 800b348:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b34c:	801a      	strh	r2, [r3, #0]
 800b34e:	e054      	b.n	800b3fa <USB_EPStartXfer+0x12a0>
 800b350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	085b      	lsrs	r3, r3, #1
 800b35e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <USB_EPStartXfer+0x1226>
 800b376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b37a:	3301      	adds	r3, #1
 800b37c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b384:	881b      	ldrh	r3, [r3, #0]
 800b386:	b29a      	uxth	r2, r3
 800b388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	029b      	lsls	r3, r3, #10
 800b390:	b29b      	uxth	r3, r3
 800b392:	4313      	orrs	r3, r2
 800b394:	b29a      	uxth	r2, r3
 800b396:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b39a:	801a      	strh	r2, [r3, #0]
 800b39c:	e02d      	b.n	800b3fa <USB_EPStartXfer+0x12a0>
 800b39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	785b      	ldrb	r3, [r3, #1]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d125      	bne.n	800b3fa <USB_EPStartXfer+0x12a0>
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	00da      	lsls	r2, r3, #3
 800b3d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b3e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	691b      	ldr	r3, [r3, #16]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b3f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	69db      	ldr	r3, [r3, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	f000 8218 	beq.w	800b83c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b410:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b41a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b42c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <USB_EPStartXfer+0x12ea>
 800b438:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b43c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10d      	bne.n	800b460 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b444:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f040 81f5 	bne.w	800b83c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b452:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f040 81ee 	bne.w	800b83c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b486:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b48e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	441a      	add	r2, r3
 800b4a4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b4a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	8013      	strh	r3, [r2, #0]
 800b4bc:	e1be      	b.n	800b83c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	78db      	ldrb	r3, [r3, #3]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	f040 81b4 	bne.w	800b838 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	699a      	ldr	r2, [r3, #24]
 800b4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d917      	bls.n	800b51c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b4fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	699a      	ldr	r2, [r3, #24]
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b50c:	1ad2      	subs	r2, r2, r3
 800b50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	619a      	str	r2, [r3, #24]
 800b51a:	e00e      	b.n	800b53a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2200      	movs	r2, #0
 800b538:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b53a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f040 8085 	bne.w	800b656 <USB_EPStartXfer+0x14fc>
 800b54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b550:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b55a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b55e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b568:	b29b      	uxth	r3, r3
 800b56a:	461a      	mov	r2, r3
 800b56c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b570:	4413      	add	r3, r2
 800b572:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	00da      	lsls	r2, r3, #3
 800b584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b588:	4413      	add	r3, r2
 800b58a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b58e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5a4:	801a      	strh	r2, [r3, #0]
 800b5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5ac:	d923      	bls.n	800b5f6 <USB_EPStartXfer+0x149c>
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b2:	095b      	lsrs	r3, r3, #5
 800b5b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5bc:	f003 031f 	and.w	r3, r3, #31
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <USB_EPStartXfer+0x1474>
 800b5c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b5ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	029b      	lsls	r3, r3, #10
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b5f2:	801a      	strh	r2, [r3, #0]
 800b5f4:	e060      	b.n	800b6b8 <USB_EPStartXfer+0x155e>
 800b5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10c      	bne.n	800b618 <USB_EPStartXfer+0x14be>
 800b5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	b29b      	uxth	r3, r3
 800b606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b60a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b60e:	b29a      	uxth	r2, r3
 800b610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	e04f      	b.n	800b6b8 <USB_EPStartXfer+0x155e>
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	085b      	lsrs	r3, r3, #1
 800b61e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <USB_EPStartXfer+0x14de>
 800b62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b632:	3301      	adds	r3, #1
 800b634:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b638:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29a      	uxth	r2, r3
 800b640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b644:	b29b      	uxth	r3, r3
 800b646:	029b      	lsls	r3, r3, #10
 800b648:	b29b      	uxth	r3, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b652:	801a      	strh	r2, [r3, #0]
 800b654:	e030      	b.n	800b6b8 <USB_EPStartXfer+0x155e>
 800b656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	785b      	ldrb	r3, [r3, #1]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d128      	bne.n	800b6b8 <USB_EPStartXfer+0x155e>
 800b666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b682:	b29b      	uxth	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b68a:	4413      	add	r3, r2
 800b68c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	00da      	lsls	r2, r3, #3
 800b69e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b6b6:	801a      	strh	r2, [r3, #0]
 800b6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	785b      	ldrb	r3, [r3, #1]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 8085 	bne.w	800b7e2 <USB_EPStartXfer+0x1688>
 800b6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	00da      	lsls	r2, r3, #3
 800b710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b714:	4413      	add	r3, r2
 800b716:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b71a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b71e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b730:	801a      	strh	r2, [r3, #0]
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b736:	2b3e      	cmp	r3, #62	@ 0x3e
 800b738:	d923      	bls.n	800b782 <USB_EPStartXfer+0x1628>
 800b73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b73e:	095b      	lsrs	r3, r3, #5
 800b740:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b748:	f003 031f 	and.w	r3, r3, #31
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d104      	bne.n	800b75a <USB_EPStartXfer+0x1600>
 800b750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b754:	3b01      	subs	r3, #1
 800b756:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b75a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b75e:	881b      	ldrh	r3, [r3, #0]
 800b760:	b29a      	uxth	r2, r3
 800b762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b766:	b29b      	uxth	r3, r3
 800b768:	029b      	lsls	r3, r3, #10
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4313      	orrs	r3, r2
 800b76e:	b29b      	uxth	r3, r3
 800b770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b778:	b29a      	uxth	r2, r3
 800b77a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b77e:	801a      	strh	r2, [r3, #0]
 800b780:	e05c      	b.n	800b83c <USB_EPStartXfer+0x16e2>
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10c      	bne.n	800b7a4 <USB_EPStartXfer+0x164a>
 800b78a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	b29b      	uxth	r3, r3
 800b792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b79a:	b29a      	uxth	r2, r3
 800b79c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7a0:	801a      	strh	r2, [r3, #0]
 800b7a2:	e04b      	b.n	800b83c <USB_EPStartXfer+0x16e2>
 800b7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d004      	beq.n	800b7c4 <USB_EPStartXfer+0x166a>
 800b7ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7be:	3301      	adds	r3, #1
 800b7c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b7c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	029b      	lsls	r3, r3, #10
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7de:	801a      	strh	r2, [r3, #0]
 800b7e0:	e02c      	b.n	800b83c <USB_EPStartXfer+0x16e2>
 800b7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d124      	bne.n	800b83c <USB_EPStartXfer+0x16e2>
 800b7f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b800:	b29b      	uxth	r3, r3
 800b802:	461a      	mov	r2, r3
 800b804:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b808:	4413      	add	r3, r2
 800b80a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b80e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	00da      	lsls	r2, r3, #3
 800b81c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b820:	4413      	add	r3, r2
 800b822:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82e:	b29a      	uxth	r2, r3
 800b830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b834:	801a      	strh	r2, [r3, #0]
 800b836:	e001      	b.n	800b83c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e03a      	b.n	800b8b2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b83c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	b29b      	uxth	r3, r3
 800b85a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b85e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b862:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b866:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b86a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b86e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b872:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b876:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b87a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b882:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	441a      	add	r2, r3
 800b898:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b89c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	785b      	ldrb	r3, [r3, #1]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d020      	beq.n	800b910 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8e4:	81bb      	strh	r3, [r7, #12]
 800b8e6:	89bb      	ldrh	r3, [r7, #12]
 800b8e8:	f083 0310 	eor.w	r3, r3, #16
 800b8ec:	81bb      	strh	r3, [r7, #12]
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	441a      	add	r2, r3
 800b8f8:	89bb      	ldrh	r3, [r7, #12]
 800b8fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	8013      	strh	r3, [r2, #0]
 800b90e:	e01f      	b.n	800b950 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b926:	81fb      	strh	r3, [r7, #14]
 800b928:	89fb      	ldrh	r3, [r7, #14]
 800b92a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b92e:	81fb      	strh	r3, [r7, #14]
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	441a      	add	r2, r3
 800b93a:	89fb      	ldrh	r3, [r7, #14]
 800b93c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b940:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3714      	adds	r7, #20
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b95e:	b480      	push	{r7}
 800b960:	b087      	sub	sp, #28
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	7b1b      	ldrb	r3, [r3, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 809d 	bne.w	800baac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	785b      	ldrb	r3, [r3, #1]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d04c      	beq.n	800ba14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	823b      	strh	r3, [r7, #16]
 800b988:	8a3b      	ldrh	r3, [r7, #16]
 800b98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d01b      	beq.n	800b9ca <USB_EPClearStall+0x6c>
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9a8:	81fb      	strh	r3, [r7, #14]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	441a      	add	r2, r3
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
 800b9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	78db      	ldrb	r3, [r3, #3]
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d06c      	beq.n	800baac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9e8:	81bb      	strh	r3, [r7, #12]
 800b9ea:	89bb      	ldrh	r3, [r7, #12]
 800b9ec:	f083 0320 	eor.w	r3, r3, #32
 800b9f0:	81bb      	strh	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	441a      	add	r2, r3
 800b9fc:	89bb      	ldrh	r3, [r7, #12]
 800b9fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	8013      	strh	r3, [r2, #0]
 800ba12:	e04b      	b.n	800baac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	82fb      	strh	r3, [r7, #22]
 800ba22:	8afb      	ldrh	r3, [r7, #22]
 800ba24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01b      	beq.n	800ba64 <USB_EPClearStall+0x106>
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba42:	82bb      	strh	r3, [r7, #20]
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	441a      	add	r2, r3
 800ba4e:	8abb      	ldrh	r3, [r7, #20]
 800ba50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba7a:	827b      	strh	r3, [r7, #18]
 800ba7c:	8a7b      	ldrh	r3, [r7, #18]
 800ba7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba82:	827b      	strh	r3, [r7, #18]
 800ba84:	8a7b      	ldrh	r3, [r7, #18]
 800ba86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba8a:	827b      	strh	r3, [r7, #18]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	441a      	add	r2, r3
 800ba96:	8a7b      	ldrh	r3, [r7, #18]
 800ba98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	460b      	mov	r3, r1
 800bac4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d103      	bne.n	800bad4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2280      	movs	r2, #128	@ 0x80
 800bad0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bae2:	b480      	push	{r7}
 800bae4:	b083      	sub	sp, #12
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bb22:	68fb      	ldr	r3, [r7, #12]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b08b      	sub	sp, #44	@ 0x2c
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	460b      	mov	r3, r1
 800bb40:	80fb      	strh	r3, [r7, #6]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bb46:	88bb      	ldrh	r3, [r7, #4]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	085b      	lsrs	r3, r3, #1
 800bb4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb56:	88fa      	ldrh	r2, [r7, #6]
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb60:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb66:	e01b      	b.n	800bba0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	3301      	adds	r3, #1
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	021b      	lsls	r3, r3, #8
 800bb76:	b21a      	sxth	r2, r3
 800bb78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	b21b      	sxth	r3, r3
 800bb80:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bb82:	6a3b      	ldr	r3, [r7, #32]
 800bb84:	8a7a      	ldrh	r2, [r7, #18]
 800bb86:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bb88:	6a3b      	ldr	r3, [r7, #32]
 800bb8a:	3302      	adds	r3, #2
 800bb8c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	3301      	adds	r3, #1
 800bb92:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	3301      	adds	r3, #1
 800bb98:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e0      	bne.n	800bb68 <USB_WritePMA+0x38>
  }
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	372c      	adds	r7, #44	@ 0x2c
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b08b      	sub	sp, #44	@ 0x2c
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	80fb      	strh	r3, [r7, #6]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bbca:	88bb      	ldrh	r3, [r7, #4]
 800bbcc:	085b      	lsrs	r3, r3, #1
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bbda:	88fa      	ldrh	r2, [r7, #6]
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bbe4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbea:	e018      	b.n	800bc1e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	881b      	ldrh	r3, [r3, #0]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	3302      	adds	r3, #2
 800bbf8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	3301      	adds	r3, #1
 800bc06:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	3301      	adds	r3, #1
 800bc16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bc18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e3      	bne.n	800bbec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bc24:	88bb      	ldrh	r3, [r7, #4]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d007      	beq.n	800bc40 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	881b      	ldrh	r3, [r3, #0]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	701a      	strb	r2, [r3, #0]
  }
}
 800bc40:	bf00      	nop
 800bc42:	372c      	adds	r7, #44	@ 0x2c
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc58:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bc5c:	f002 fc0e 	bl	800e47c <USBD_static_malloc>
 800bc60:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	32b0      	adds	r2, #176	@ 0xb0
 800bc72:	2100      	movs	r1, #0
 800bc74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bc78:	2302      	movs	r3, #2
 800bc7a:	e0d4      	b.n	800be26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bc7c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bc80:	2100      	movs	r1, #0
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f003 f9ef 	bl	800f066 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	32b0      	adds	r2, #176	@ 0xb0
 800bc92:	68f9      	ldr	r1, [r7, #12]
 800bc94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	32b0      	adds	r2, #176	@ 0xb0
 800bca2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	7c1b      	ldrb	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d138      	bne.n	800bd26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bcb4:	4b5e      	ldr	r3, [pc, #376]	@ (800be30 <USBD_CDC_Init+0x1e4>)
 800bcb6:	7819      	ldrb	r1, [r3, #0]
 800bcb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcbc:	2202      	movs	r2, #2
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f002 fa83 	bl	800e1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcc4:	4b5a      	ldr	r3, [pc, #360]	@ (800be30 <USBD_CDC_Init+0x1e4>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 020f 	and.w	r2, r3, #15
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3324      	adds	r3, #36	@ 0x24
 800bcda:	2201      	movs	r2, #1
 800bcdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bcde:	4b55      	ldr	r3, [pc, #340]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800bce0:	7819      	ldrb	r1, [r3, #0]
 800bce2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bce6:	2202      	movs	r2, #2
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f002 fa6e 	bl	800e1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bcee:	4b51      	ldr	r3, [pc, #324]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	f003 020f 	and.w	r2, r3, #15
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	440b      	add	r3, r1
 800bd02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd06:	2201      	movs	r2, #1
 800bd08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd0a:	4b4b      	ldr	r3, [pc, #300]	@ (800be38 <USBD_CDC_Init+0x1ec>)
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	f003 020f 	and.w	r2, r3, #15
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	3326      	adds	r3, #38	@ 0x26
 800bd20:	2210      	movs	r2, #16
 800bd22:	801a      	strh	r2, [r3, #0]
 800bd24:	e035      	b.n	800bd92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd26:	4b42      	ldr	r3, [pc, #264]	@ (800be30 <USBD_CDC_Init+0x1e4>)
 800bd28:	7819      	ldrb	r1, [r3, #0]
 800bd2a:	2340      	movs	r3, #64	@ 0x40
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f002 fa4b 	bl	800e1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd34:	4b3e      	ldr	r3, [pc, #248]	@ (800be30 <USBD_CDC_Init+0x1e4>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f003 020f 	and.w	r2, r3, #15
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	440b      	add	r3, r1
 800bd48:	3324      	adds	r3, #36	@ 0x24
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd4e:	4b39      	ldr	r3, [pc, #228]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800bd50:	7819      	ldrb	r1, [r3, #0]
 800bd52:	2340      	movs	r3, #64	@ 0x40
 800bd54:	2202      	movs	r2, #2
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f002 fa37 	bl	800e1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd5c:	4b35      	ldr	r3, [pc, #212]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 020f 	and.w	r2, r3, #15
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	4613      	mov	r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	440b      	add	r3, r1
 800bd70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd74:	2201      	movs	r2, #1
 800bd76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd78:	4b2f      	ldr	r3, [pc, #188]	@ (800be38 <USBD_CDC_Init+0x1ec>)
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	f003 020f 	and.w	r2, r3, #15
 800bd80:	6879      	ldr	r1, [r7, #4]
 800bd82:	4613      	mov	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	440b      	add	r3, r1
 800bd8c:	3326      	adds	r3, #38	@ 0x26
 800bd8e:	2210      	movs	r2, #16
 800bd90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd92:	4b29      	ldr	r3, [pc, #164]	@ (800be38 <USBD_CDC_Init+0x1ec>)
 800bd94:	7819      	ldrb	r1, [r3, #0]
 800bd96:	2308      	movs	r3, #8
 800bd98:	2203      	movs	r2, #3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f002 fa15 	bl	800e1ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bda0:	4b25      	ldr	r3, [pc, #148]	@ (800be38 <USBD_CDC_Init+0x1ec>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	f003 020f 	and.w	r2, r3, #15
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	440b      	add	r3, r1
 800bdb4:	3324      	adds	r3, #36	@ 0x24
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	33b0      	adds	r3, #176	@ 0xb0
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e018      	b.n	800be26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7c1b      	ldrb	r3, [r3, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d10a      	bne.n	800be12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800bdfe:	7819      	ldrb	r1, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f002 facc 	bl	800e3a8 <USBD_LL_PrepareReceive>
 800be10:	e008      	b.n	800be24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be12:	4b08      	ldr	r3, [pc, #32]	@ (800be34 <USBD_CDC_Init+0x1e8>)
 800be14:	7819      	ldrb	r1, [r3, #0]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be1c:	2340      	movs	r3, #64	@ 0x40
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f002 fac2 	bl	800e3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	2000009b 	.word	0x2000009b
 800be34:	2000009c 	.word	0x2000009c
 800be38:	2000009d 	.word	0x2000009d

0800be3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be48:	4b3a      	ldr	r3, [pc, #232]	@ (800bf34 <USBD_CDC_DeInit+0xf8>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 f9e1 	bl	800e216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be54:	4b37      	ldr	r3, [pc, #220]	@ (800bf34 <USBD_CDC_DeInit+0xf8>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 020f 	and.w	r2, r3, #15
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	3324      	adds	r3, #36	@ 0x24
 800be6a:	2200      	movs	r2, #0
 800be6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be6e:	4b32      	ldr	r3, [pc, #200]	@ (800bf38 <USBD_CDC_DeInit+0xfc>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	4619      	mov	r1, r3
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f002 f9ce 	bl	800e216 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800be7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf38 <USBD_CDC_DeInit+0xfc>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f003 020f 	and.w	r2, r3, #15
 800be82:	6879      	ldr	r1, [r7, #4]
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	440b      	add	r3, r1
 800be8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be92:	2200      	movs	r2, #0
 800be94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800be96:	4b29      	ldr	r3, [pc, #164]	@ (800bf3c <USBD_CDC_DeInit+0x100>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	4619      	mov	r1, r3
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f002 f9ba 	bl	800e216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bea2:	4b26      	ldr	r3, [pc, #152]	@ (800bf3c <USBD_CDC_DeInit+0x100>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	f003 020f 	and.w	r2, r3, #15
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	4613      	mov	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	440b      	add	r3, r1
 800beb6:	3324      	adds	r3, #36	@ 0x24
 800beb8:	2200      	movs	r2, #0
 800beba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bebc:	4b1f      	ldr	r3, [pc, #124]	@ (800bf3c <USBD_CDC_DeInit+0x100>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 020f 	and.w	r2, r3, #15
 800bec4:	6879      	ldr	r1, [r7, #4]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	3326      	adds	r3, #38	@ 0x26
 800bed2:	2200      	movs	r2, #0
 800bed4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	32b0      	adds	r2, #176	@ 0xb0
 800bee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01f      	beq.n	800bf28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	33b0      	adds	r3, #176	@ 0xb0
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	4413      	add	r3, r2
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	32b0      	adds	r2, #176	@ 0xb0
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f002 fac4 	bl	800e498 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	32b0      	adds	r2, #176	@ 0xb0
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	2000009b 	.word	0x2000009b
 800bf38:	2000009c 	.word	0x2000009c
 800bf3c:	2000009d 	.word	0x2000009d

0800bf40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	32b0      	adds	r2, #176	@ 0xb0
 800bf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf6c:	2303      	movs	r3, #3
 800bf6e:	e0bf      	b.n	800c0f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d050      	beq.n	800c01e <USBD_CDC_Setup+0xde>
 800bf7c:	2b20      	cmp	r3, #32
 800bf7e:	f040 80af 	bne.w	800c0e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	88db      	ldrh	r3, [r3, #6]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d03a      	beq.n	800c000 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da1b      	bge.n	800bfcc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	33b0      	adds	r3, #176	@ 0xb0
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	689b      	ldr	r3, [r3, #8]
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bfaa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	88d2      	ldrh	r2, [r2, #6]
 800bfb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	88db      	ldrh	r3, [r3, #6]
 800bfb6:	2b07      	cmp	r3, #7
 800bfb8:	bf28      	it	cs
 800bfba:	2307      	movcs	r3, #7
 800bfbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	89fa      	ldrh	r2, [r7, #14]
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f001 fd07 	bl	800d9d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bfca:	e090      	b.n	800c0ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	785a      	ldrb	r2, [r3, #1]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	88db      	ldrh	r3, [r3, #6]
 800bfda:	2b3f      	cmp	r3, #63	@ 0x3f
 800bfdc:	d803      	bhi.n	800bfe6 <USBD_CDC_Setup+0xa6>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	88db      	ldrh	r3, [r3, #6]
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	e000      	b.n	800bfe8 <USBD_CDC_Setup+0xa8>
 800bfe6:	2240      	movs	r2, #64	@ 0x40
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bfee:	6939      	ldr	r1, [r7, #16]
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bff6:	461a      	mov	r2, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 fd19 	bl	800da30 <USBD_CtlPrepareRx>
      break;
 800bffe:	e076      	b.n	800c0ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	33b0      	adds	r3, #176	@ 0xb0
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	7850      	ldrb	r0, [r2, #1]
 800c016:	2200      	movs	r2, #0
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	4798      	blx	r3
      break;
 800c01c:	e067      	b.n	800c0ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	785b      	ldrb	r3, [r3, #1]
 800c022:	2b0b      	cmp	r3, #11
 800c024:	d851      	bhi.n	800c0ca <USBD_CDC_Setup+0x18a>
 800c026:	a201      	add	r2, pc, #4	@ (adr r2, 800c02c <USBD_CDC_Setup+0xec>)
 800c028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c02c:	0800c05d 	.word	0x0800c05d
 800c030:	0800c0d9 	.word	0x0800c0d9
 800c034:	0800c0cb 	.word	0x0800c0cb
 800c038:	0800c0cb 	.word	0x0800c0cb
 800c03c:	0800c0cb 	.word	0x0800c0cb
 800c040:	0800c0cb 	.word	0x0800c0cb
 800c044:	0800c0cb 	.word	0x0800c0cb
 800c048:	0800c0cb 	.word	0x0800c0cb
 800c04c:	0800c0cb 	.word	0x0800c0cb
 800c050:	0800c0cb 	.word	0x0800c0cb
 800c054:	0800c087 	.word	0x0800c087
 800c058:	0800c0b1 	.word	0x0800c0b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c062:	b2db      	uxtb	r3, r3
 800c064:	2b03      	cmp	r3, #3
 800c066:	d107      	bne.n	800c078 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c068:	f107 030a 	add.w	r3, r7, #10
 800c06c:	2202      	movs	r2, #2
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 fcb1 	bl	800d9d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c076:	e032      	b.n	800c0de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f001 fc2f 	bl	800d8de <USBD_CtlError>
            ret = USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	75fb      	strb	r3, [r7, #23]
          break;
 800c084:	e02b      	b.n	800c0de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d107      	bne.n	800c0a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c092:	f107 030d 	add.w	r3, r7, #13
 800c096:	2201      	movs	r2, #1
 800c098:	4619      	mov	r1, r3
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f001 fc9c 	bl	800d9d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0a0:	e01d      	b.n	800c0de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0a2:	6839      	ldr	r1, [r7, #0]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 fc1a 	bl	800d8de <USBD_CtlError>
            ret = USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	75fb      	strb	r3, [r7, #23]
          break;
 800c0ae:	e016      	b.n	800c0de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	2b03      	cmp	r3, #3
 800c0ba:	d00f      	beq.n	800c0dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 fc0d 	bl	800d8de <USBD_CtlError>
            ret = USBD_FAIL;
 800c0c4:	2303      	movs	r3, #3
 800c0c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0c8:	e008      	b.n	800c0dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f001 fc06 	bl	800d8de <USBD_CtlError>
          ret = USBD_FAIL;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c0d6:	e002      	b.n	800c0de <USBD_CDC_Setup+0x19e>
          break;
 800c0d8:	bf00      	nop
 800c0da:	e008      	b.n	800c0ee <USBD_CDC_Setup+0x1ae>
          break;
 800c0dc:	bf00      	nop
      }
      break;
 800c0de:	e006      	b.n	800c0ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f001 fbfb 	bl	800d8de <USBD_CtlError>
      ret = USBD_FAIL;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	460b      	mov	r3, r1
 800c102:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c10a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	32b0      	adds	r2, #176	@ 0xb0
 800c116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c11e:	2303      	movs	r3, #3
 800c120:	e065      	b.n	800c1ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	32b0      	adds	r2, #176	@ 0xb0
 800c12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c130:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	f003 020f 	and.w	r2, r3, #15
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	440b      	add	r3, r1
 800c144:	3318      	adds	r3, #24
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d02f      	beq.n	800c1ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	f003 020f 	and.w	r2, r3, #15
 800c152:	6879      	ldr	r1, [r7, #4]
 800c154:	4613      	mov	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	440b      	add	r3, r1
 800c15e:	3318      	adds	r3, #24
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	78fb      	ldrb	r3, [r7, #3]
 800c164:	f003 010f 	and.w	r1, r3, #15
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	460b      	mov	r3, r1
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	440b      	add	r3, r1
 800c170:	00db      	lsls	r3, r3, #3
 800c172:	4403      	add	r3, r0
 800c174:	3320      	adds	r3, #32
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	fbb2 f1f3 	udiv	r1, r2, r3
 800c17c:	fb01 f303 	mul.w	r3, r1, r3
 800c180:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c182:	2b00      	cmp	r3, #0
 800c184:	d112      	bne.n	800c1ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c186:	78fb      	ldrb	r3, [r7, #3]
 800c188:	f003 020f 	and.w	r2, r3, #15
 800c18c:	6879      	ldr	r1, [r7, #4]
 800c18e:	4613      	mov	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	440b      	add	r3, r1
 800c198:	3318      	adds	r3, #24
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c19e:	78f9      	ldrb	r1, [r7, #3]
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f002 f8de 	bl	800e366 <USBD_LL_Transmit>
 800c1aa:	e01f      	b.n	800c1ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	33b0      	adds	r3, #176	@ 0xb0
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d010      	beq.n	800c1ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	33b0      	adds	r3, #176	@ 0xb0
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	4413      	add	r3, r2
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c1e8:	78fa      	ldrb	r2, [r7, #3]
 800c1ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c1ec:	2300      	movs	r3, #0
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	460b      	mov	r3, r1
 800c200:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	32b0      	adds	r2, #176	@ 0xb0
 800c20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c210:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	32b0      	adds	r2, #176	@ 0xb0
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	e01a      	b.n	800c25e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c228:	78fb      	ldrb	r3, [r7, #3]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f002 f8dc 	bl	800e3ea <USBD_LL_GetRxDataSize>
 800c232:	4602      	mov	r2, r0
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	33b0      	adds	r3, #176	@ 0xb0
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c258:	4611      	mov	r1, r2
 800c25a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b084      	sub	sp, #16
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	32b0      	adds	r2, #176	@ 0xb0
 800c278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c27c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c284:	2303      	movs	r3, #3
 800c286:	e024      	b.n	800c2d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	33b0      	adds	r3, #176	@ 0xb0
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d019      	beq.n	800c2d0 <USBD_CDC_EP0_RxReady+0x6a>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c2a2:	2bff      	cmp	r3, #255	@ 0xff
 800c2a4:	d014      	beq.n	800c2d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	33b0      	adds	r3, #176	@ 0xb0
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	689b      	ldr	r3, [r3, #8]
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	22ff      	movs	r2, #255	@ 0xff
 800c2cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2e4:	2182      	movs	r1, #130	@ 0x82
 800c2e6:	4818      	ldr	r0, [pc, #96]	@ (800c348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2e8:	f000 fc99 	bl	800cc1e <USBD_GetEpDesc>
 800c2ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2ee:	2101      	movs	r1, #1
 800c2f0:	4815      	ldr	r0, [pc, #84]	@ (800c348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2f2:	f000 fc94 	bl	800cc1e <USBD_GetEpDesc>
 800c2f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2f8:	2181      	movs	r1, #129	@ 0x81
 800c2fa:	4813      	ldr	r0, [pc, #76]	@ (800c348 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2fc:	f000 fc8f 	bl	800cc1e <USBD_GetEpDesc>
 800c300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2210      	movs	r2, #16
 800c30c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d006      	beq.n	800c322 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2200      	movs	r2, #0
 800c318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c31c:	711a      	strb	r2, [r3, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d006      	beq.n	800c336 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c330:	711a      	strb	r2, [r3, #4]
 800c332:	2200      	movs	r2, #0
 800c334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2243      	movs	r2, #67	@ 0x43
 800c33a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c33c:	4b02      	ldr	r3, [pc, #8]	@ (800c348 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	20000058 	.word	0x20000058

0800c34c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c354:	2182      	movs	r1, #130	@ 0x82
 800c356:	4818      	ldr	r0, [pc, #96]	@ (800c3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c358:	f000 fc61 	bl	800cc1e <USBD_GetEpDesc>
 800c35c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c35e:	2101      	movs	r1, #1
 800c360:	4815      	ldr	r0, [pc, #84]	@ (800c3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c362:	f000 fc5c 	bl	800cc1e <USBD_GetEpDesc>
 800c366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c368:	2181      	movs	r1, #129	@ 0x81
 800c36a:	4813      	ldr	r0, [pc, #76]	@ (800c3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c36c:	f000 fc57 	bl	800cc1e <USBD_GetEpDesc>
 800c370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2210      	movs	r2, #16
 800c37c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d006      	beq.n	800c392 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	2200      	movs	r2, #0
 800c388:	711a      	strb	r2, [r3, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f042 0202 	orr.w	r2, r2, #2
 800c390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d006      	beq.n	800c3a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	711a      	strb	r2, [r3, #4]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f042 0202 	orr.w	r2, r2, #2
 800c3a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2243      	movs	r2, #67	@ 0x43
 800c3aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3ac:	4b02      	ldr	r3, [pc, #8]	@ (800c3b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20000058 	.word	0x20000058

0800c3bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b086      	sub	sp, #24
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3c4:	2182      	movs	r1, #130	@ 0x82
 800c3c6:	4818      	ldr	r0, [pc, #96]	@ (800c428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3c8:	f000 fc29 	bl	800cc1e <USBD_GetEpDesc>
 800c3cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	4815      	ldr	r0, [pc, #84]	@ (800c428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3d2:	f000 fc24 	bl	800cc1e <USBD_GetEpDesc>
 800c3d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3d8:	2181      	movs	r1, #129	@ 0x81
 800c3da:	4813      	ldr	r0, [pc, #76]	@ (800c428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3dc:	f000 fc1f 	bl	800cc1e <USBD_GetEpDesc>
 800c3e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d006      	beq.n	800c402 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3fc:	711a      	strb	r2, [r3, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d006      	beq.n	800c416 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c410:	711a      	strb	r2, [r3, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2243      	movs	r2, #67	@ 0x43
 800c41a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c41c:	4b02      	ldr	r3, [pc, #8]	@ (800c428 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3718      	adds	r7, #24
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20000058 	.word	0x20000058

0800c42c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	220a      	movs	r2, #10
 800c438:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c43a:	4b03      	ldr	r3, [pc, #12]	@ (800c448 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	20000014 	.word	0x20000014

0800c44c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e009      	b.n	800c474 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	33b0      	adds	r3, #176	@ 0xb0
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	4413      	add	r3, r2
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	32b0      	adds	r2, #176	@ 0xb0
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	e008      	b.n	800c4b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	32b0      	adds	r2, #176	@ 0xb0
 800c4d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e004      	b.n	800c4f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	683a      	ldr	r2, [r7, #0]
 800c4ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr
	...

0800c500 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	32b0      	adds	r2, #176	@ 0xb0
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	32b0      	adds	r2, #176	@ 0xb0
 800c522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e018      	b.n	800c560 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7c1b      	ldrb	r3, [r3, #16]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10a      	bne.n	800c54c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c536:	4b0c      	ldr	r3, [pc, #48]	@ (800c568 <USBD_CDC_ReceivePacket+0x68>)
 800c538:	7819      	ldrb	r1, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f001 ff2f 	bl	800e3a8 <USBD_LL_PrepareReceive>
 800c54a:	e008      	b.n	800c55e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c54c:	4b06      	ldr	r3, [pc, #24]	@ (800c568 <USBD_CDC_ReceivePacket+0x68>)
 800c54e:	7819      	ldrb	r1, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c556:	2340      	movs	r3, #64	@ 0x40
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f001 ff25 	bl	800e3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	2000009c 	.word	0x2000009c

0800c56c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4613      	mov	r3, r2
 800c578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c580:	4817      	ldr	r0, [pc, #92]	@ (800c5e0 <USBD_Init+0x74>)
 800c582:	f002 fcdf 	bl	800ef44 <iprintf>
 800c586:	4817      	ldr	r0, [pc, #92]	@ (800c5e4 <USBD_Init+0x78>)
 800c588:	f002 fcdc 	bl	800ef44 <iprintf>
 800c58c:	200a      	movs	r0, #10
 800c58e:	f002 fceb 	bl	800ef68 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	e01f      	b.n	800c5d6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	79fa      	ldrb	r2, [r7, #7]
 800c5c8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f001 fd80 	bl	800e0d0 <USBD_LL_Init>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3718      	adds	r7, #24
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	080112c0 	.word	0x080112c0
 800c5e4:	080112c8 	.word	0x080112c8

0800c5e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c5fc:	481a      	ldr	r0, [pc, #104]	@ (800c668 <USBD_RegisterClass+0x80>)
 800c5fe:	f002 fca1 	bl	800ef44 <iprintf>
 800c602:	481a      	ldr	r0, [pc, #104]	@ (800c66c <USBD_RegisterClass+0x84>)
 800c604:	f002 fc9e 	bl	800ef44 <iprintf>
 800c608:	200a      	movs	r0, #10
 800c60a:	f002 fcad 	bl	800ef68 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c60e:	2303      	movs	r3, #3
 800c610:	e025      	b.n	800c65e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	32ae      	adds	r2, #174	@ 0xae
 800c624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00f      	beq.n	800c64e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	32ae      	adds	r2, #174	@ 0xae
 800c638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63e:	f107 020e 	add.w	r2, r7, #14
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
 800c646:	4602      	mov	r2, r0
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3710      	adds	r7, #16
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	080112c0 	.word	0x080112c0
 800c66c:	080112e0 	.word	0x080112e0

0800c670 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 fd8b 	bl	800e194 <USBD_LL_Start>
 800c67e:	4603      	mov	r3, r0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c688:	b480      	push	{r7}
 800c68a:	b083      	sub	sp, #12
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c690:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b084      	sub	sp, #16
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	78fa      	ldrb	r2, [r7, #3]
 800c6c2:	4611      	mov	r1, r2
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	4798      	blx	r3
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3710      	adds	r7, #16
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b084      	sub	sp, #16
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	460b      	mov	r3, r1
 800c6e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	4798      	blx	r3
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c700:	7bfb      	ldrb	r3, [r7, #15]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f001 f8a4 	bl	800d86a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c730:	461a      	mov	r2, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c73e:	f003 031f 	and.w	r3, r3, #31
 800c742:	2b02      	cmp	r3, #2
 800c744:	d01a      	beq.n	800c77c <USBD_LL_SetupStage+0x72>
 800c746:	2b02      	cmp	r3, #2
 800c748:	d822      	bhi.n	800c790 <USBD_LL_SetupStage+0x86>
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d002      	beq.n	800c754 <USBD_LL_SetupStage+0x4a>
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d00a      	beq.n	800c768 <USBD_LL_SetupStage+0x5e>
 800c752:	e01d      	b.n	800c790 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 fad1 	bl	800cd04 <USBD_StdDevReq>
 800c762:	4603      	mov	r3, r0
 800c764:	73fb      	strb	r3, [r7, #15]
      break;
 800c766:	e020      	b.n	800c7aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 fb39 	bl	800cde8 <USBD_StdItfReq>
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
      break;
 800c77a:	e016      	b.n	800c7aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 fb9b 	bl	800cec0 <USBD_StdEPReq>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]
      break;
 800c78e:	e00c      	b.n	800c7aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c796:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 fd58 	bl	800e254 <USBD_LL_StallEP>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a8:	bf00      	nop
  }

  return ret;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b086      	sub	sp, #24
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	607a      	str	r2, [r7, #4]
 800c7c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c7c6:	7afb      	ldrb	r3, [r7, #11]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d16e      	bne.n	800c8aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c7d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	f040 8098 	bne.w	800c910 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	689a      	ldr	r2, [r3, #8]
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d913      	bls.n	800c814 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	68db      	ldr	r3, [r3, #12]
 800c7f4:	1ad2      	subs	r2, r2, r3
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	4293      	cmp	r3, r2
 800c804:	bf28      	it	cs
 800c806:	4613      	movcs	r3, r2
 800c808:	461a      	mov	r2, r3
 800c80a:	6879      	ldr	r1, [r7, #4]
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f001 f92c 	bl	800da6a <USBD_CtlContinueRx>
 800c812:	e07d      	b.n	800c910 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c81a:	f003 031f 	and.w	r3, r3, #31
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d014      	beq.n	800c84c <USBD_LL_DataOutStage+0x98>
 800c822:	2b02      	cmp	r3, #2
 800c824:	d81d      	bhi.n	800c862 <USBD_LL_DataOutStage+0xae>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d002      	beq.n	800c830 <USBD_LL_DataOutStage+0x7c>
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d003      	beq.n	800c836 <USBD_LL_DataOutStage+0x82>
 800c82e:	e018      	b.n	800c862 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c830:	2300      	movs	r3, #0
 800c832:	75bb      	strb	r3, [r7, #22]
            break;
 800c834:	e018      	b.n	800c868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f9d2 	bl	800cbea <USBD_CoreFindIF>
 800c846:	4603      	mov	r3, r0
 800c848:	75bb      	strb	r3, [r7, #22]
            break;
 800c84a:	e00d      	b.n	800c868 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c852:	b2db      	uxtb	r3, r3
 800c854:	4619      	mov	r1, r3
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f000 f9d4 	bl	800cc04 <USBD_CoreFindEP>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75bb      	strb	r3, [r7, #22]
            break;
 800c860:	e002      	b.n	800c868 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c862:	2300      	movs	r3, #0
 800c864:	75bb      	strb	r3, [r7, #22]
            break;
 800c866:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c868:	7dbb      	ldrb	r3, [r7, #22]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d119      	bne.n	800c8a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b03      	cmp	r3, #3
 800c878:	d113      	bne.n	800c8a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c87a:	7dba      	ldrb	r2, [r7, #22]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	32ae      	adds	r2, #174	@ 0xae
 800c880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00b      	beq.n	800c8a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c88a:	7dba      	ldrb	r2, [r7, #22]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c892:	7dba      	ldrb	r2, [r7, #22]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	32ae      	adds	r2, #174	@ 0xae
 800c898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f001 f8f2 	bl	800da8c <USBD_CtlSendStatus>
 800c8a8:	e032      	b.n	800c910 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8aa:	7afb      	ldrb	r3, [r7, #11]
 800c8ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 f9a5 	bl	800cc04 <USBD_CoreFindEP>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8be:	7dbb      	ldrb	r3, [r7, #22]
 800c8c0:	2bff      	cmp	r3, #255	@ 0xff
 800c8c2:	d025      	beq.n	800c910 <USBD_LL_DataOutStage+0x15c>
 800c8c4:	7dbb      	ldrb	r3, [r7, #22]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d122      	bne.n	800c910 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d117      	bne.n	800c906 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c8d6:	7dba      	ldrb	r2, [r7, #22]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	32ae      	adds	r2, #174	@ 0xae
 800c8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e0:	699b      	ldr	r3, [r3, #24]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00f      	beq.n	800c906 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c8e6:	7dba      	ldrb	r2, [r7, #22]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c8ee:	7dba      	ldrb	r2, [r7, #22]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	32ae      	adds	r2, #174	@ 0xae
 800c8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	7afa      	ldrb	r2, [r7, #11]
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	4798      	blx	r3
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	e000      	b.n	800c912 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b086      	sub	sp, #24
 800c91e:	af00      	add	r7, sp, #0
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	460b      	mov	r3, r1
 800c924:	607a      	str	r2, [r7, #4]
 800c926:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c928:	7afb      	ldrb	r3, [r7, #11]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d16f      	bne.n	800ca0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3314      	adds	r3, #20
 800c932:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d15a      	bne.n	800c9f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	689a      	ldr	r2, [r3, #8]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	429a      	cmp	r2, r3
 800c948:	d914      	bls.n	800c974 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	689a      	ldr	r2, [r3, #8]
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	1ad2      	subs	r2, r2, r3
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	461a      	mov	r2, r3
 800c95e:	6879      	ldr	r1, [r7, #4]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f001 f854 	bl	800da0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c966:	2300      	movs	r3, #0
 800c968:	2200      	movs	r2, #0
 800c96a:	2100      	movs	r1, #0
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f001 fd1b 	bl	800e3a8 <USBD_LL_PrepareReceive>
 800c972:	e03f      	b.n	800c9f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	68da      	ldr	r2, [r3, #12]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	689b      	ldr	r3, [r3, #8]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d11c      	bne.n	800c9ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c988:	429a      	cmp	r2, r3
 800c98a:	d316      	bcc.n	800c9ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c996:	429a      	cmp	r2, r3
 800c998:	d20f      	bcs.n	800c9ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c99a:	2200      	movs	r2, #0
 800c99c:	2100      	movs	r1, #0
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f001 f835 	bl	800da0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f001 fcf8 	bl	800e3a8 <USBD_LL_PrepareReceive>
 800c9b8:	e01c      	b.n	800c9f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d10f      	bne.n	800c9e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d009      	beq.n	800c9e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9e6:	2180      	movs	r1, #128	@ 0x80
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f001 fc33 	bl	800e254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f001 f85f 	bl	800dab2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d03a      	beq.n	800ca74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7ff fe42 	bl	800c688 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ca0c:	e032      	b.n	800ca74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca0e:	7afb      	ldrb	r3, [r7, #11]
 800ca10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	4619      	mov	r1, r3
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 f8f3 	bl	800cc04 <USBD_CoreFindEP>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	2bff      	cmp	r3, #255	@ 0xff
 800ca26:	d025      	beq.n	800ca74 <USBD_LL_DataInStage+0x15a>
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d122      	bne.n	800ca74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	2b03      	cmp	r3, #3
 800ca38:	d11c      	bne.n	800ca74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca3a:	7dfa      	ldrb	r2, [r7, #23]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	32ae      	adds	r2, #174	@ 0xae
 800ca40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca44:	695b      	ldr	r3, [r3, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d014      	beq.n	800ca74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca4a:	7dfa      	ldrb	r2, [r7, #23]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca52:	7dfa      	ldrb	r2, [r7, #23]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	32ae      	adds	r2, #174	@ 0xae
 800ca58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	7afa      	ldrb	r2, [r7, #11]
 800ca60:	4611      	mov	r1, r2
 800ca62:	68f8      	ldr	r0, [r7, #12]
 800ca64:	4798      	blx	r3
 800ca66:	4603      	mov	r3, r0
 800ca68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ca6a:	7dbb      	ldrb	r3, [r7, #22]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ca70:	7dbb      	ldrb	r3, [r7, #22]
 800ca72:	e000      	b.n	800ca76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3718      	adds	r7, #24
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d014      	beq.n	800cae4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00e      	beq.n	800cae4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6852      	ldr	r2, [r2, #4]
 800cad2:	b2d2      	uxtb	r2, r2
 800cad4:	4611      	mov	r1, r2
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	4798      	blx	r3
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cae0:	2303      	movs	r3, #3
 800cae2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cae4:	2340      	movs	r3, #64	@ 0x40
 800cae6:	2200      	movs	r2, #0
 800cae8:	2100      	movs	r1, #0
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 fb6d 	bl	800e1ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2240      	movs	r2, #64	@ 0x40
 800cafc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb00:	2340      	movs	r3, #64	@ 0x40
 800cb02:	2200      	movs	r2, #0
 800cb04:	2180      	movs	r1, #128	@ 0x80
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f001 fb5f 	bl	800e1ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2240      	movs	r2, #64	@ 0x40
 800cb16:	621a      	str	r2, [r3, #32]

  return ret;
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	460b      	mov	r3, r1
 800cb2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	78fa      	ldrb	r2, [r7, #3]
 800cb32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b083      	sub	sp, #12
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d006      	beq.n	800cb64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2204      	movs	r2, #4
 800cb68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	370c      	adds	r7, #12
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb7a:	b480      	push	{r7}
 800cb7c:	b083      	sub	sp, #12
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2b04      	cmp	r3, #4
 800cb8c:	d106      	bne.n	800cb9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	370c      	adds	r7, #12
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b082      	sub	sp, #8
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d110      	bne.n	800cbe0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00b      	beq.n	800cbe0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbce:	69db      	ldr	r3, [r3, #28]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbda:	69db      	ldr	r3, [r3, #28]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b083      	sub	sp, #12
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cbf6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b086      	sub	sp, #24
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	460b      	mov	r3, r1
 800cc28:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	885b      	ldrh	r3, [r3, #2]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	7812      	ldrb	r2, [r2, #0]
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d91f      	bls.n	800cc84 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc4a:	e013      	b.n	800cc74 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc4c:	f107 030a 	add.w	r3, r7, #10
 800cc50:	4619      	mov	r1, r3
 800cc52:	6978      	ldr	r0, [r7, #20]
 800cc54:	f000 f81b 	bl	800cc8e <USBD_GetNextDesc>
 800cc58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	785b      	ldrb	r3, [r3, #1]
 800cc5e:	2b05      	cmp	r3, #5
 800cc60:	d108      	bne.n	800cc74 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	789b      	ldrb	r3, [r3, #2]
 800cc6a:	78fa      	ldrb	r2, [r7, #3]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d008      	beq.n	800cc82 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	885b      	ldrh	r3, [r3, #2]
 800cc78:	b29a      	uxth	r2, r3
 800cc7a:	897b      	ldrh	r3, [r7, #10]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d8e5      	bhi.n	800cc4c <USBD_GetEpDesc+0x2e>
 800cc80:	e000      	b.n	800cc84 <USBD_GetEpDesc+0x66>
          break;
 800cc82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cc84:	693b      	ldr	r3, [r7, #16]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3718      	adds	r7, #24
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b085      	sub	sp, #20
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	7812      	ldrb	r2, [r2, #0]
 800cca4:	4413      	add	r3, r2
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3714      	adds	r7, #20
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b087      	sub	sp, #28
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cce4:	8a3b      	ldrh	r3, [r7, #16]
 800cce6:	021b      	lsls	r3, r3, #8
 800cce8:	b21a      	sxth	r2, r3
 800ccea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	b21b      	sxth	r3, r3
 800ccf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ccf4:	89fb      	ldrh	r3, [r7, #14]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
	...

0800cd04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd1a:	2b40      	cmp	r3, #64	@ 0x40
 800cd1c:	d005      	beq.n	800cd2a <USBD_StdDevReq+0x26>
 800cd1e:	2b40      	cmp	r3, #64	@ 0x40
 800cd20:	d857      	bhi.n	800cdd2 <USBD_StdDevReq+0xce>
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00f      	beq.n	800cd46 <USBD_StdDevReq+0x42>
 800cd26:	2b20      	cmp	r3, #32
 800cd28:	d153      	bne.n	800cdd2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	32ae      	adds	r2, #174	@ 0xae
 800cd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	4798      	blx	r3
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
      break;
 800cd44:	e04a      	b.n	800cddc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	785b      	ldrb	r3, [r3, #1]
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	d83b      	bhi.n	800cdc6 <USBD_StdDevReq+0xc2>
 800cd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <USBD_StdDevReq+0x50>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800cda9 	.word	0x0800cda9
 800cd58:	0800cdbd 	.word	0x0800cdbd
 800cd5c:	0800cdc7 	.word	0x0800cdc7
 800cd60:	0800cdb3 	.word	0x0800cdb3
 800cd64:	0800cdc7 	.word	0x0800cdc7
 800cd68:	0800cd87 	.word	0x0800cd87
 800cd6c:	0800cd7d 	.word	0x0800cd7d
 800cd70:	0800cdc7 	.word	0x0800cdc7
 800cd74:	0800cd9f 	.word	0x0800cd9f
 800cd78:	0800cd91 	.word	0x0800cd91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa3c 	bl	800d1fc <USBD_GetDescriptor>
          break;
 800cd84:	e024      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cd86:	6839      	ldr	r1, [r7, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 fbcb 	bl	800d524 <USBD_SetAddress>
          break;
 800cd8e:	e01f      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fc0a 	bl	800d5ac <USBD_SetConfig>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	73fb      	strb	r3, [r7, #15]
          break;
 800cd9c:	e018      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fcad 	bl	800d700 <USBD_GetConfig>
          break;
 800cda6:	e013      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fcde 	bl	800d76c <USBD_GetStatus>
          break;
 800cdb0:	e00e      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fd0d 	bl	800d7d4 <USBD_SetFeature>
          break;
 800cdba:	e009      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fd31 	bl	800d826 <USBD_ClrFeature>
          break;
 800cdc4:	e004      	b.n	800cdd0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdc6:	6839      	ldr	r1, [r7, #0]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fd88 	bl	800d8de <USBD_CtlError>
          break;
 800cdce:	bf00      	nop
      }
      break;
 800cdd0:	e004      	b.n	800cddc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdd2:	6839      	ldr	r1, [r7, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 fd82 	bl	800d8de <USBD_CtlError>
      break;
 800cdda:	bf00      	nop
  }

  return ret;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3710      	adds	r7, #16
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop

0800cde8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdfe:	2b40      	cmp	r3, #64	@ 0x40
 800ce00:	d005      	beq.n	800ce0e <USBD_StdItfReq+0x26>
 800ce02:	2b40      	cmp	r3, #64	@ 0x40
 800ce04:	d852      	bhi.n	800ceac <USBD_StdItfReq+0xc4>
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <USBD_StdItfReq+0x26>
 800ce0a:	2b20      	cmp	r3, #32
 800ce0c:	d14e      	bne.n	800ceac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	3b01      	subs	r3, #1
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d840      	bhi.n	800ce9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	889b      	ldrh	r3, [r3, #4]
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d836      	bhi.n	800ce94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	889b      	ldrh	r3, [r3, #4]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7ff fedb 	bl	800cbea <USBD_CoreFindIF>
 800ce34:	4603      	mov	r3, r0
 800ce36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce38:	7bbb      	ldrb	r3, [r7, #14]
 800ce3a:	2bff      	cmp	r3, #255	@ 0xff
 800ce3c:	d01d      	beq.n	800ce7a <USBD_StdItfReq+0x92>
 800ce3e:	7bbb      	ldrb	r3, [r7, #14]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d11a      	bne.n	800ce7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce44:	7bba      	ldrb	r2, [r7, #14]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	32ae      	adds	r2, #174	@ 0xae
 800ce4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00f      	beq.n	800ce74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce54:	7bba      	ldrb	r2, [r7, #14]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce5c:	7bba      	ldrb	r2, [r7, #14]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	32ae      	adds	r2, #174	@ 0xae
 800ce62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	4798      	blx	r3
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce72:	e004      	b.n	800ce7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ce74:	2303      	movs	r3, #3
 800ce76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce78:	e001      	b.n	800ce7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	88db      	ldrh	r3, [r3, #6]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d110      	bne.n	800cea8 <USBD_StdItfReq+0xc0>
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d10d      	bne.n	800cea8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fdfd 	bl	800da8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce92:	e009      	b.n	800cea8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fd21 	bl	800d8de <USBD_CtlError>
          break;
 800ce9c:	e004      	b.n	800cea8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fd1c 	bl	800d8de <USBD_CtlError>
          break;
 800cea6:	e000      	b.n	800ceaa <USBD_StdItfReq+0xc2>
          break;
 800cea8:	bf00      	nop
      }
      break;
 800ceaa:	e004      	b.n	800ceb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fd15 	bl	800d8de <USBD_CtlError>
      break;
 800ceb4:	bf00      	nop
  }

  return ret;
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3710      	adds	r7, #16
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	889b      	ldrh	r3, [r3, #4]
 800ced2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cedc:	2b40      	cmp	r3, #64	@ 0x40
 800cede:	d007      	beq.n	800cef0 <USBD_StdEPReq+0x30>
 800cee0:	2b40      	cmp	r3, #64	@ 0x40
 800cee2:	f200 817f 	bhi.w	800d1e4 <USBD_StdEPReq+0x324>
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d02a      	beq.n	800cf40 <USBD_StdEPReq+0x80>
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	f040 817a 	bne.w	800d1e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff fe85 	bl	800cc04 <USBD_CoreFindEP>
 800cefa:	4603      	mov	r3, r0
 800cefc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cefe:	7b7b      	ldrb	r3, [r7, #13]
 800cf00:	2bff      	cmp	r3, #255	@ 0xff
 800cf02:	f000 8174 	beq.w	800d1ee <USBD_StdEPReq+0x32e>
 800cf06:	7b7b      	ldrb	r3, [r7, #13]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f040 8170 	bne.w	800d1ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf0e:	7b7a      	ldrb	r2, [r7, #13]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf16:	7b7a      	ldrb	r2, [r7, #13]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	32ae      	adds	r2, #174	@ 0xae
 800cf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 8163 	beq.w	800d1ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf28:	7b7a      	ldrb	r2, [r7, #13]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	32ae      	adds	r2, #174	@ 0xae
 800cf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	4798      	blx	r3
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf3e:	e156      	b.n	800d1ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d008      	beq.n	800cf5a <USBD_StdEPReq+0x9a>
 800cf48:	2b03      	cmp	r3, #3
 800cf4a:	f300 8145 	bgt.w	800d1d8 <USBD_StdEPReq+0x318>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f000 809b 	beq.w	800d08a <USBD_StdEPReq+0x1ca>
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d03c      	beq.n	800cfd2 <USBD_StdEPReq+0x112>
 800cf58:	e13e      	b.n	800d1d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2b02      	cmp	r3, #2
 800cf64:	d002      	beq.n	800cf6c <USBD_StdEPReq+0xac>
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d016      	beq.n	800cf98 <USBD_StdEPReq+0xd8>
 800cf6a:	e02c      	b.n	800cfc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf6c:	7bbb      	ldrb	r3, [r7, #14]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00d      	beq.n	800cf8e <USBD_StdEPReq+0xce>
 800cf72:	7bbb      	ldrb	r3, [r7, #14]
 800cf74:	2b80      	cmp	r3, #128	@ 0x80
 800cf76:	d00a      	beq.n	800cf8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f001 f969 	bl	800e254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf82:	2180      	movs	r1, #128	@ 0x80
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f001 f965 	bl	800e254 <USBD_LL_StallEP>
 800cf8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf8c:	e020      	b.n	800cfd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fca4 	bl	800d8de <USBD_CtlError>
              break;
 800cf96:	e01b      	b.n	800cfd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	885b      	ldrh	r3, [r3, #2]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10e      	bne.n	800cfbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfa0:	7bbb      	ldrb	r3, [r7, #14]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00b      	beq.n	800cfbe <USBD_StdEPReq+0xfe>
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
 800cfa8:	2b80      	cmp	r3, #128	@ 0x80
 800cfaa:	d008      	beq.n	800cfbe <USBD_StdEPReq+0xfe>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	88db      	ldrh	r3, [r3, #6]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d104      	bne.n	800cfbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f001 f94b 	bl	800e254 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 fd64 	bl	800da8c <USBD_CtlSendStatus>

              break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fc88 	bl	800d8de <USBD_CtlError>
              break;
 800cfce:	bf00      	nop
          }
          break;
 800cfd0:	e107      	b.n	800d1e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d002      	beq.n	800cfe4 <USBD_StdEPReq+0x124>
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d016      	beq.n	800d010 <USBD_StdEPReq+0x150>
 800cfe2:	e04b      	b.n	800d07c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfe4:	7bbb      	ldrb	r3, [r7, #14]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00d      	beq.n	800d006 <USBD_StdEPReq+0x146>
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	2b80      	cmp	r3, #128	@ 0x80
 800cfee:	d00a      	beq.n	800d006 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	4619      	mov	r1, r3
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f001 f92d 	bl	800e254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cffa:	2180      	movs	r1, #128	@ 0x80
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 f929 	bl	800e254 <USBD_LL_StallEP>
 800d002:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d004:	e040      	b.n	800d088 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fc68 	bl	800d8de <USBD_CtlError>
              break;
 800d00e:	e03b      	b.n	800d088 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	885b      	ldrh	r3, [r3, #2]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d136      	bne.n	800d086 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d018:	7bbb      	ldrb	r3, [r7, #14]
 800d01a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d004      	beq.n	800d02c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d022:	7bbb      	ldrb	r3, [r7, #14]
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f001 f933 	bl	800e292 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f000 fd2d 	bl	800da8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff fde4 	bl	800cc04 <USBD_CoreFindEP>
 800d03c:	4603      	mov	r3, r0
 800d03e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d040:	7b7b      	ldrb	r3, [r7, #13]
 800d042:	2bff      	cmp	r3, #255	@ 0xff
 800d044:	d01f      	beq.n	800d086 <USBD_StdEPReq+0x1c6>
 800d046:	7b7b      	ldrb	r3, [r7, #13]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d11c      	bne.n	800d086 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d04c:	7b7a      	ldrb	r2, [r7, #13]
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d054:	7b7a      	ldrb	r2, [r7, #13]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	32ae      	adds	r2, #174	@ 0xae
 800d05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d010      	beq.n	800d086 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d064:	7b7a      	ldrb	r2, [r7, #13]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	32ae      	adds	r2, #174	@ 0xae
 800d06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	4798      	blx	r3
 800d076:	4603      	mov	r3, r0
 800d078:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d07a:	e004      	b.n	800d086 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 fc2d 	bl	800d8de <USBD_CtlError>
              break;
 800d084:	e000      	b.n	800d088 <USBD_StdEPReq+0x1c8>
              break;
 800d086:	bf00      	nop
          }
          break;
 800d088:	e0ab      	b.n	800d1e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d090:	b2db      	uxtb	r3, r3
 800d092:	2b02      	cmp	r3, #2
 800d094:	d002      	beq.n	800d09c <USBD_StdEPReq+0x1dc>
 800d096:	2b03      	cmp	r3, #3
 800d098:	d032      	beq.n	800d100 <USBD_StdEPReq+0x240>
 800d09a:	e097      	b.n	800d1cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d09c:	7bbb      	ldrb	r3, [r7, #14]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d007      	beq.n	800d0b2 <USBD_StdEPReq+0x1f2>
 800d0a2:	7bbb      	ldrb	r3, [r7, #14]
 800d0a4:	2b80      	cmp	r3, #128	@ 0x80
 800d0a6:	d004      	beq.n	800d0b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fc17 	bl	800d8de <USBD_CtlError>
                break;
 800d0b0:	e091      	b.n	800d1d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	da0b      	bge.n	800d0d2 <USBD_StdEPReq+0x212>
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	3310      	adds	r3, #16
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	3304      	adds	r3, #4
 800d0d0:	e00b      	b.n	800d0ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 fc6d 	bl	800d9d8 <USBD_CtlSendData>
              break;
 800d0fe:	e06a      	b.n	800d1d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d104:	2b00      	cmp	r3, #0
 800d106:	da11      	bge.n	800d12c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d108:	7bbb      	ldrb	r3, [r7, #14]
 800d10a:	f003 020f 	and.w	r2, r3, #15
 800d10e:	6879      	ldr	r1, [r7, #4]
 800d110:	4613      	mov	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	440b      	add	r3, r1
 800d11a:	3324      	adds	r3, #36	@ 0x24
 800d11c:	881b      	ldrh	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d117      	bne.n	800d152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fbda 	bl	800d8de <USBD_CtlError>
                  break;
 800d12a:	e054      	b.n	800d1d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d12c:	7bbb      	ldrb	r3, [r7, #14]
 800d12e:	f003 020f 	and.w	r2, r3, #15
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	440b      	add	r3, r1
 800d13e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d104      	bne.n	800d152 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fbc7 	bl	800d8de <USBD_CtlError>
                  break;
 800d150:	e041      	b.n	800d1d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d156:	2b00      	cmp	r3, #0
 800d158:	da0b      	bge.n	800d172 <USBD_StdEPReq+0x2b2>
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	3310      	adds	r3, #16
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	4413      	add	r3, r2
 800d16e:	3304      	adds	r3, #4
 800d170:	e00b      	b.n	800d18a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d172:	7bbb      	ldrb	r3, [r7, #14]
 800d174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	4413      	add	r3, r2
 800d188:	3304      	adds	r3, #4
 800d18a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d18c:	7bbb      	ldrb	r3, [r7, #14]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d002      	beq.n	800d198 <USBD_StdEPReq+0x2d8>
 800d192:	7bbb      	ldrb	r3, [r7, #14]
 800d194:	2b80      	cmp	r3, #128	@ 0x80
 800d196:	d103      	bne.n	800d1a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	e00e      	b.n	800d1be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f001 f893 	bl	800e2d0 <USBD_LL_IsStallEP>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d003      	beq.n	800d1b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	e002      	b.n	800d1be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	2202      	movs	r2, #2
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fc07 	bl	800d9d8 <USBD_CtlSendData>
              break;
 800d1ca:	e004      	b.n	800d1d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fb85 	bl	800d8de <USBD_CtlError>
              break;
 800d1d4:	bf00      	nop
          }
          break;
 800d1d6:	e004      	b.n	800d1e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fb7f 	bl	800d8de <USBD_CtlError>
          break;
 800d1e0:	bf00      	nop
      }
      break;
 800d1e2:	e005      	b.n	800d1f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fb79 	bl	800d8de <USBD_CtlError>
      break;
 800d1ec:	e000      	b.n	800d1f0 <USBD_StdEPReq+0x330>
      break;
 800d1ee:	bf00      	nop
  }

  return ret;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
	...

0800d1fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d20e:	2300      	movs	r3, #0
 800d210:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	885b      	ldrh	r3, [r3, #2]
 800d216:	0a1b      	lsrs	r3, r3, #8
 800d218:	b29b      	uxth	r3, r3
 800d21a:	3b01      	subs	r3, #1
 800d21c:	2b0e      	cmp	r3, #14
 800d21e:	f200 8152 	bhi.w	800d4c6 <USBD_GetDescriptor+0x2ca>
 800d222:	a201      	add	r2, pc, #4	@ (adr r2, 800d228 <USBD_GetDescriptor+0x2c>)
 800d224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d228:	0800d299 	.word	0x0800d299
 800d22c:	0800d2b1 	.word	0x0800d2b1
 800d230:	0800d2f1 	.word	0x0800d2f1
 800d234:	0800d4c7 	.word	0x0800d4c7
 800d238:	0800d4c7 	.word	0x0800d4c7
 800d23c:	0800d467 	.word	0x0800d467
 800d240:	0800d493 	.word	0x0800d493
 800d244:	0800d4c7 	.word	0x0800d4c7
 800d248:	0800d4c7 	.word	0x0800d4c7
 800d24c:	0800d4c7 	.word	0x0800d4c7
 800d250:	0800d4c7 	.word	0x0800d4c7
 800d254:	0800d4c7 	.word	0x0800d4c7
 800d258:	0800d4c7 	.word	0x0800d4c7
 800d25c:	0800d4c7 	.word	0x0800d4c7
 800d260:	0800d265 	.word	0x0800d265
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d00b      	beq.n	800d288 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d276:	69db      	ldr	r3, [r3, #28]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	7c12      	ldrb	r2, [r2, #16]
 800d27c:	f107 0108 	add.w	r1, r7, #8
 800d280:	4610      	mov	r0, r2
 800d282:	4798      	blx	r3
 800d284:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d286:	e126      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fb27 	bl	800d8de <USBD_CtlError>
        err++;
 800d290:	7afb      	ldrb	r3, [r7, #11]
 800d292:	3301      	adds	r3, #1
 800d294:	72fb      	strb	r3, [r7, #11]
      break;
 800d296:	e11e      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	7c12      	ldrb	r2, [r2, #16]
 800d2a4:	f107 0108 	add.w	r1, r7, #8
 800d2a8:	4610      	mov	r0, r2
 800d2aa:	4798      	blx	r3
 800d2ac:	60f8      	str	r0, [r7, #12]
      break;
 800d2ae:	e112      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	7c1b      	ldrb	r3, [r3, #16]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d10d      	bne.n	800d2d4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2c0:	f107 0208 	add.w	r2, r7, #8
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	4798      	blx	r3
 800d2c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	2202      	movs	r2, #2
 800d2d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2d2:	e100      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2dc:	f107 0208 	add.w	r2, r7, #8
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
 800d2e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	3301      	adds	r3, #1
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	701a      	strb	r2, [r3, #0]
      break;
 800d2ee:	e0f2      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	885b      	ldrh	r3, [r3, #2]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b05      	cmp	r3, #5
 800d2f8:	f200 80ac 	bhi.w	800d454 <USBD_GetDescriptor+0x258>
 800d2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <USBD_GetDescriptor+0x108>)
 800d2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d302:	bf00      	nop
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d351 	.word	0x0800d351
 800d30c:	0800d385 	.word	0x0800d385
 800d310:	0800d3b9 	.word	0x0800d3b9
 800d314:	0800d3ed 	.word	0x0800d3ed
 800d318:	0800d421 	.word	0x0800d421
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00b      	beq.n	800d340 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	7c12      	ldrb	r2, [r2, #16]
 800d334:	f107 0108 	add.w	r1, r7, #8
 800d338:	4610      	mov	r0, r2
 800d33a:	4798      	blx	r3
 800d33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d33e:	e091      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 facb 	bl	800d8de <USBD_CtlError>
            err++;
 800d348:	7afb      	ldrb	r3, [r7, #11]
 800d34a:	3301      	adds	r3, #1
 800d34c:	72fb      	strb	r3, [r7, #11]
          break;
 800d34e:	e089      	b.n	800d464 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00b      	beq.n	800d374 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	7c12      	ldrb	r2, [r2, #16]
 800d368:	f107 0108 	add.w	r1, r7, #8
 800d36c:	4610      	mov	r0, r2
 800d36e:	4798      	blx	r3
 800d370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d372:	e077      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d374:	6839      	ldr	r1, [r7, #0]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f000 fab1 	bl	800d8de <USBD_CtlError>
            err++;
 800d37c:	7afb      	ldrb	r3, [r7, #11]
 800d37e:	3301      	adds	r3, #1
 800d380:	72fb      	strb	r3, [r7, #11]
          break;
 800d382:	e06f      	b.n	800d464 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d38a:	68db      	ldr	r3, [r3, #12]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00b      	beq.n	800d3a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	7c12      	ldrb	r2, [r2, #16]
 800d39c:	f107 0108 	add.w	r1, r7, #8
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4798      	blx	r3
 800d3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3a6:	e05d      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fa97 	bl	800d8de <USBD_CtlError>
            err++;
 800d3b0:	7afb      	ldrb	r3, [r7, #11]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3b6:	e055      	b.n	800d464 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00b      	beq.n	800d3dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	7c12      	ldrb	r2, [r2, #16]
 800d3d0:	f107 0108 	add.w	r1, r7, #8
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4798      	blx	r3
 800d3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3da:	e043      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3dc:	6839      	ldr	r1, [r7, #0]
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fa7d 	bl	800d8de <USBD_CtlError>
            err++;
 800d3e4:	7afb      	ldrb	r3, [r7, #11]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ea:	e03b      	b.n	800d464 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3f2:	695b      	ldr	r3, [r3, #20]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00b      	beq.n	800d410 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3fe:	695b      	ldr	r3, [r3, #20]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	7c12      	ldrb	r2, [r2, #16]
 800d404:	f107 0108 	add.w	r1, r7, #8
 800d408:	4610      	mov	r0, r2
 800d40a:	4798      	blx	r3
 800d40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d40e:	e029      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fa63 	bl	800d8de <USBD_CtlError>
            err++;
 800d418:	7afb      	ldrb	r3, [r7, #11]
 800d41a:	3301      	adds	r3, #1
 800d41c:	72fb      	strb	r3, [r7, #11]
          break;
 800d41e:	e021      	b.n	800d464 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00b      	beq.n	800d444 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	7c12      	ldrb	r2, [r2, #16]
 800d438:	f107 0108 	add.w	r1, r7, #8
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d442:	e00f      	b.n	800d464 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fa49 	bl	800d8de <USBD_CtlError>
            err++;
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	3301      	adds	r3, #1
 800d450:	72fb      	strb	r3, [r7, #11]
          break;
 800d452:	e007      	b.n	800d464 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fa41 	bl	800d8de <USBD_CtlError>
          err++;
 800d45c:	7afb      	ldrb	r3, [r7, #11]
 800d45e:	3301      	adds	r3, #1
 800d460:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d462:	bf00      	nop
      }
      break;
 800d464:	e037      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7c1b      	ldrb	r3, [r3, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d109      	bne.n	800d482 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d476:	f107 0208 	add.w	r2, r7, #8
 800d47a:	4610      	mov	r0, r2
 800d47c:	4798      	blx	r3
 800d47e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d480:	e029      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fa2a 	bl	800d8de <USBD_CtlError>
        err++;
 800d48a:	7afb      	ldrb	r3, [r7, #11]
 800d48c:	3301      	adds	r3, #1
 800d48e:	72fb      	strb	r3, [r7, #11]
      break;
 800d490:	e021      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	7c1b      	ldrb	r3, [r3, #16]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10d      	bne.n	800d4b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a2:	f107 0208 	add.w	r2, r7, #8
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	4798      	blx	r3
 800d4aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	2207      	movs	r2, #7
 800d4b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4b4:	e00f      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fa10 	bl	800d8de <USBD_CtlError>
        err++;
 800d4be:	7afb      	ldrb	r3, [r7, #11]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	72fb      	strb	r3, [r7, #11]
      break;
 800d4c4:	e007      	b.n	800d4d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fa08 	bl	800d8de <USBD_CtlError>
      err++;
 800d4ce:	7afb      	ldrb	r3, [r7, #11]
 800d4d0:	3301      	adds	r3, #1
 800d4d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d4d4:	bf00      	nop
  }

  if (err != 0U)
 800d4d6:	7afb      	ldrb	r3, [r7, #11]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d11e      	bne.n	800d51a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	88db      	ldrh	r3, [r3, #6]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d016      	beq.n	800d512 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d4e4:	893b      	ldrh	r3, [r7, #8]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00e      	beq.n	800d508 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	88da      	ldrh	r2, [r3, #6]
 800d4ee:	893b      	ldrh	r3, [r7, #8]
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	bf28      	it	cs
 800d4f4:	4613      	movcs	r3, r2
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d4fa:	893b      	ldrh	r3, [r7, #8]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	68f9      	ldr	r1, [r7, #12]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fa69 	bl	800d9d8 <USBD_CtlSendData>
 800d506:	e009      	b.n	800d51c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f9e7 	bl	800d8de <USBD_CtlError>
 800d510:	e004      	b.n	800d51c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 faba 	bl	800da8c <USBD_CtlSendStatus>
 800d518:	e000      	b.n	800d51c <USBD_GetDescriptor+0x320>
    return;
 800d51a:	bf00      	nop
  }
}
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop

0800d524 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	889b      	ldrh	r3, [r3, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d131      	bne.n	800d59a <USBD_SetAddress+0x76>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	88db      	ldrh	r3, [r3, #6]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d12d      	bne.n	800d59a <USBD_SetAddress+0x76>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	885b      	ldrh	r3, [r3, #2]
 800d542:	2b7f      	cmp	r3, #127	@ 0x7f
 800d544:	d829      	bhi.n	800d59a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	885b      	ldrh	r3, [r3, #2]
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d104      	bne.n	800d568 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d55e:	6839      	ldr	r1, [r7, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 f9bc 	bl	800d8de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d566:	e01d      	b.n	800d5a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	7bfa      	ldrb	r2, [r7, #15]
 800d56c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d570:	7bfb      	ldrb	r3, [r7, #15]
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fed7 	bl	800e328 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 fa86 	bl	800da8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d004      	beq.n	800d590 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2202      	movs	r2, #2
 800d58a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d58e:	e009      	b.n	800d5a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d598:	e004      	b.n	800d5a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f99e 	bl	800d8de <USBD_CtlError>
  }
}
 800d5a2:	bf00      	nop
 800d5a4:	bf00      	nop
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	885b      	ldrh	r3, [r3, #2]
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	4b4e      	ldr	r3, [pc, #312]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d5c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5c4:	4b4d      	ldr	r3, [pc, #308]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d905      	bls.n	800d5d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f985 	bl	800d8de <USBD_CtlError>
    return USBD_FAIL;
 800d5d4:	2303      	movs	r3, #3
 800d5d6:	e08c      	b.n	800d6f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d002      	beq.n	800d5ea <USBD_SetConfig+0x3e>
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d029      	beq.n	800d63c <USBD_SetConfig+0x90>
 800d5e8:	e075      	b.n	800d6d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d5ea:	4b44      	ldr	r3, [pc, #272]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d020      	beq.n	800d634 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d5f2:	4b42      	ldr	r3, [pc, #264]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5fc:	4b3f      	ldr	r3, [pc, #252]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff f84b 	bl	800c69e <USBD_SetClassConfig>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d008      	beq.n	800d624 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f962 	bl	800d8de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2202      	movs	r2, #2
 800d61e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d622:	e065      	b.n	800d6f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fa31 	bl	800da8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2203      	movs	r2, #3
 800d62e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d632:	e05d      	b.n	800d6f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fa29 	bl	800da8c <USBD_CtlSendStatus>
      break;
 800d63a:	e059      	b.n	800d6f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d63c:	4b2f      	ldr	r3, [pc, #188]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d112      	bne.n	800d66a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2202      	movs	r2, #2
 800d648:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d64c:	4b2b      	ldr	r3, [pc, #172]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	461a      	mov	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d656:	4b29      	ldr	r3, [pc, #164]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff f83a 	bl	800c6d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa12 	bl	800da8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d668:	e042      	b.n	800d6f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d66a:	4b24      	ldr	r3, [pc, #144]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	429a      	cmp	r2, r3
 800d676:	d02a      	beq.n	800d6ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff f828 	bl	800c6d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d686:	4b1d      	ldr	r3, [pc, #116]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	461a      	mov	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d690:	4b1a      	ldr	r3, [pc, #104]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff f801 	bl	800c69e <USBD_SetClassConfig>
 800d69c:	4603      	mov	r3, r0
 800d69e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00f      	beq.n	800d6c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d6a6:	6839      	ldr	r1, [r7, #0]
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f000 f918 	bl	800d8de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7ff f80d 	bl	800c6d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d6c4:	e014      	b.n	800d6f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f9e0 	bl	800da8c <USBD_CtlSendStatus>
      break;
 800d6cc:	e010      	b.n	800d6f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 f9dc 	bl	800da8c <USBD_CtlSendStatus>
      break;
 800d6d4:	e00c      	b.n	800d6f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f900 	bl	800d8de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6de:	4b07      	ldr	r3, [pc, #28]	@ (800d6fc <USBD_SetConfig+0x150>)
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7fe fff6 	bl	800c6d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d6ee:	bf00      	nop
  }

  return ret;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20000528 	.word	0x20000528

0800d700 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	88db      	ldrh	r3, [r3, #6]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	d004      	beq.n	800d71c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f8e2 	bl	800d8de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d71a:	e023      	b.n	800d764 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d722:	b2db      	uxtb	r3, r3
 800d724:	2b02      	cmp	r3, #2
 800d726:	dc02      	bgt.n	800d72e <USBD_GetConfig+0x2e>
 800d728:	2b00      	cmp	r3, #0
 800d72a:	dc03      	bgt.n	800d734 <USBD_GetConfig+0x34>
 800d72c:	e015      	b.n	800d75a <USBD_GetConfig+0x5a>
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d00b      	beq.n	800d74a <USBD_GetConfig+0x4a>
 800d732:	e012      	b.n	800d75a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3308      	adds	r3, #8
 800d73e:	2201      	movs	r2, #1
 800d740:	4619      	mov	r1, r3
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 f948 	bl	800d9d8 <USBD_CtlSendData>
        break;
 800d748:	e00c      	b.n	800d764 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	3304      	adds	r3, #4
 800d74e:	2201      	movs	r2, #1
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f940 	bl	800d9d8 <USBD_CtlSendData>
        break;
 800d758:	e004      	b.n	800d764 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d75a:	6839      	ldr	r1, [r7, #0]
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f8be 	bl	800d8de <USBD_CtlError>
        break;
 800d762:	bf00      	nop
}
 800d764:	bf00      	nop
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	3b01      	subs	r3, #1
 800d780:	2b02      	cmp	r3, #2
 800d782:	d81e      	bhi.n	800d7c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	88db      	ldrh	r3, [r3, #6]
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d004      	beq.n	800d796 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f8a5 	bl	800d8de <USBD_CtlError>
        break;
 800d794:	e01a      	b.n	800d7cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2201      	movs	r2, #1
 800d79a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d005      	beq.n	800d7b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68db      	ldr	r3, [r3, #12]
 800d7aa:	f043 0202 	orr.w	r2, r3, #2
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	330c      	adds	r3, #12
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f90c 	bl	800d9d8 <USBD_CtlSendData>
      break;
 800d7c0:	e004      	b.n	800d7cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f88a 	bl	800d8de <USBD_CtlError>
      break;
 800d7ca:	bf00      	nop
  }
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	885b      	ldrh	r3, [r3, #2]
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d107      	bne.n	800d7f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f94c 	bl	800da8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d7f4:	e013      	b.n	800d81e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	885b      	ldrh	r3, [r3, #2]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d10b      	bne.n	800d816 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	889b      	ldrh	r3, [r3, #4]
 800d802:	0a1b      	lsrs	r3, r3, #8
 800d804:	b29b      	uxth	r3, r3
 800d806:	b2da      	uxtb	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f93c 	bl	800da8c <USBD_CtlSendStatus>
}
 800d814:	e003      	b.n	800d81e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d816:	6839      	ldr	r1, [r7, #0]
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f000 f860 	bl	800d8de <USBD_CtlError>
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d836:	b2db      	uxtb	r3, r3
 800d838:	3b01      	subs	r3, #1
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	d80b      	bhi.n	800d856 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	885b      	ldrh	r3, [r3, #2]
 800d842:	2b01      	cmp	r3, #1
 800d844:	d10c      	bne.n	800d860 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 f91c 	bl	800da8c <USBD_CtlSendStatus>
      }
      break;
 800d854:	e004      	b.n	800d860 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f840 	bl	800d8de <USBD_CtlError>
      break;
 800d85e:	e000      	b.n	800d862 <USBD_ClrFeature+0x3c>
      break;
 800d860:	bf00      	nop
  }
}
 800d862:	bf00      	nop
 800d864:	3708      	adds	r7, #8
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	781a      	ldrb	r2, [r3, #0]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	3301      	adds	r3, #1
 800d884:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	781a      	ldrb	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	3301      	adds	r3, #1
 800d892:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7ff fa16 	bl	800ccc6 <SWAPBYTE>
 800d89a:	4603      	mov	r3, r0
 800d89c:	461a      	mov	r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f7ff fa09 	bl	800ccc6 <SWAPBYTE>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff f9fc 	bl	800ccc6 <SWAPBYTE>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	80da      	strh	r2, [r3, #6]
}
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b082      	sub	sp, #8
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
 800d8e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8e8:	2180      	movs	r1, #128	@ 0x80
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fcb2 	bl	800e254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fcae 	bl	800e254 <USBD_LL_StallEP>
}
 800d8f8:	bf00      	nop
 800d8fa:	3708      	adds	r7, #8
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d042      	beq.n	800d99c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d91a:	6938      	ldr	r0, [r7, #16]
 800d91c:	f000 f842 	bl	800d9a4 <USBD_GetLen>
 800d920:	4603      	mov	r3, r0
 800d922:	3301      	adds	r3, #1
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d92a:	d808      	bhi.n	800d93e <USBD_GetString+0x3e>
 800d92c:	6938      	ldr	r0, [r7, #16]
 800d92e:	f000 f839 	bl	800d9a4 <USBD_GetLen>
 800d932:	4603      	mov	r3, r0
 800d934:	3301      	adds	r3, #1
 800d936:	b29b      	uxth	r3, r3
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	e001      	b.n	800d942 <USBD_GetString+0x42>
 800d93e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d946:	7dfb      	ldrb	r3, [r7, #23]
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	4413      	add	r3, r2
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	7812      	ldrb	r2, [r2, #0]
 800d950:	701a      	strb	r2, [r3, #0]
  idx++;
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	3301      	adds	r3, #1
 800d956:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d958:	7dfb      	ldrb	r3, [r7, #23]
 800d95a:	68ba      	ldr	r2, [r7, #8]
 800d95c:	4413      	add	r3, r2
 800d95e:	2203      	movs	r2, #3
 800d960:	701a      	strb	r2, [r3, #0]
  idx++;
 800d962:	7dfb      	ldrb	r3, [r7, #23]
 800d964:	3301      	adds	r3, #1
 800d966:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d968:	e013      	b.n	800d992 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d96a:	7dfb      	ldrb	r3, [r7, #23]
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	7812      	ldrb	r2, [r2, #0]
 800d974:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	3301      	adds	r3, #1
 800d97a:	613b      	str	r3, [r7, #16]
    idx++;
 800d97c:	7dfb      	ldrb	r3, [r7, #23]
 800d97e:	3301      	adds	r3, #1
 800d980:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	2200      	movs	r2, #0
 800d98a:	701a      	strb	r2, [r3, #0]
    idx++;
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
 800d98e:	3301      	adds	r3, #1
 800d990:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1e7      	bne.n	800d96a <USBD_GetString+0x6a>
 800d99a:	e000      	b.n	800d99e <USBD_GetString+0x9e>
    return;
 800d99c:	bf00      	nop
  }
}
 800d99e:	3718      	adds	r7, #24
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d9b4:	e005      	b.n	800d9c2 <USBD_GetLen+0x1e>
  {
    len++;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1f5      	bne.n	800d9b6 <USBD_GetLen+0x12>
  }

  return len;
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	60b9      	str	r1, [r7, #8]
 800d9e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	687a      	ldr	r2, [r7, #4]
 800d9f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	68ba      	ldr	r2, [r7, #8]
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f000 fcb1 	bl	800e366 <USBD_LL_Transmit>

  return USBD_OK;
 800da04:	2300      	movs	r3, #0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800da0e:	b580      	push	{r7, lr}
 800da10:	b084      	sub	sp, #16
 800da12:	af00      	add	r7, sp, #0
 800da14:	60f8      	str	r0, [r7, #12]
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	2100      	movs	r1, #0
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 fca0 	bl	800e366 <USBD_LL_Transmit>

  return USBD_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2203      	movs	r2, #3
 800da40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	687a      	ldr	r2, [r7, #4]
 800da48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	2100      	movs	r1, #0
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f000 fca4 	bl	800e3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68ba      	ldr	r2, [r7, #8]
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 fc93 	bl	800e3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da82:	2300      	movs	r3, #0
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2204      	movs	r2, #4
 800da98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800da9c:	2300      	movs	r3, #0
 800da9e:	2200      	movs	r2, #0
 800daa0:	2100      	movs	r1, #0
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fc5f 	bl	800e366 <USBD_LL_Transmit>

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2205      	movs	r2, #5
 800dabe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dac2:	2300      	movs	r3, #0
 800dac4:	2200      	movs	r2, #0
 800dac6:	2100      	movs	r1, #0
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fc6d 	bl	800e3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dadc:	2200      	movs	r2, #0
 800dade:	4912      	ldr	r1, [pc, #72]	@ (800db28 <MX_USB_Device_Init+0x50>)
 800dae0:	4812      	ldr	r0, [pc, #72]	@ (800db2c <MX_USB_Device_Init+0x54>)
 800dae2:	f7fe fd43 	bl	800c56c <USBD_Init>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d001      	beq.n	800daf0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800daec:	f7f3 fc94 	bl	8001418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800daf0:	490f      	ldr	r1, [pc, #60]	@ (800db30 <MX_USB_Device_Init+0x58>)
 800daf2:	480e      	ldr	r0, [pc, #56]	@ (800db2c <MX_USB_Device_Init+0x54>)
 800daf4:	f7fe fd78 	bl	800c5e8 <USBD_RegisterClass>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dafe:	f7f3 fc8b 	bl	8001418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800db02:	490c      	ldr	r1, [pc, #48]	@ (800db34 <MX_USB_Device_Init+0x5c>)
 800db04:	4809      	ldr	r0, [pc, #36]	@ (800db2c <MX_USB_Device_Init+0x54>)
 800db06:	f7fe fca1 	bl	800c44c <USBD_CDC_RegisterInterface>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800db10:	f7f3 fc82 	bl	8001418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800db14:	4805      	ldr	r0, [pc, #20]	@ (800db2c <MX_USB_Device_Init+0x54>)
 800db16:	f7fe fdab 	bl	800c670 <USBD_Start>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800db20:	f7f3 fc7a 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800db24:	bf00      	nop
 800db26:	bd80      	pop	{r7, pc}
 800db28:	200000b4 	.word	0x200000b4
 800db2c:	2000052c 	.word	0x2000052c
 800db30:	20000020 	.word	0x20000020
 800db34:	200000a0 	.word	0x200000a0

0800db38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db3c:	2200      	movs	r2, #0
 800db3e:	4905      	ldr	r1, [pc, #20]	@ (800db54 <CDC_Init_FS+0x1c>)
 800db40:	4805      	ldr	r0, [pc, #20]	@ (800db58 <CDC_Init_FS+0x20>)
 800db42:	f7fe fc9d 	bl	800c480 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db46:	4905      	ldr	r1, [pc, #20]	@ (800db5c <CDC_Init_FS+0x24>)
 800db48:	4803      	ldr	r0, [pc, #12]	@ (800db58 <CDC_Init_FS+0x20>)
 800db4a:	f7fe fcbb 	bl	800c4c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db50:	4618      	mov	r0, r3
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20001008 	.word	0x20001008
 800db58:	2000052c 	.word	0x2000052c
 800db5c:	20000808 	.word	0x20000808

0800db60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db60:	b480      	push	{r7}
 800db62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db66:	4618      	mov	r0, r3
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	6039      	str	r1, [r7, #0]
 800db7a:	71fb      	strb	r3, [r7, #7]
 800db7c:	4613      	mov	r3, r2
 800db7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	2b23      	cmp	r3, #35	@ 0x23
 800db84:	d84a      	bhi.n	800dc1c <CDC_Control_FS+0xac>
 800db86:	a201      	add	r2, pc, #4	@ (adr r2, 800db8c <CDC_Control_FS+0x1c>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800dc1d 	.word	0x0800dc1d
 800db90:	0800dc1d 	.word	0x0800dc1d
 800db94:	0800dc1d 	.word	0x0800dc1d
 800db98:	0800dc1d 	.word	0x0800dc1d
 800db9c:	0800dc1d 	.word	0x0800dc1d
 800dba0:	0800dc1d 	.word	0x0800dc1d
 800dba4:	0800dc1d 	.word	0x0800dc1d
 800dba8:	0800dc1d 	.word	0x0800dc1d
 800dbac:	0800dc1d 	.word	0x0800dc1d
 800dbb0:	0800dc1d 	.word	0x0800dc1d
 800dbb4:	0800dc1d 	.word	0x0800dc1d
 800dbb8:	0800dc1d 	.word	0x0800dc1d
 800dbbc:	0800dc1d 	.word	0x0800dc1d
 800dbc0:	0800dc1d 	.word	0x0800dc1d
 800dbc4:	0800dc1d 	.word	0x0800dc1d
 800dbc8:	0800dc1d 	.word	0x0800dc1d
 800dbcc:	0800dc1d 	.word	0x0800dc1d
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc1d 	.word	0x0800dc1d
 800dbd8:	0800dc1d 	.word	0x0800dc1d
 800dbdc:	0800dc1d 	.word	0x0800dc1d
 800dbe0:	0800dc1d 	.word	0x0800dc1d
 800dbe4:	0800dc1d 	.word	0x0800dc1d
 800dbe8:	0800dc1d 	.word	0x0800dc1d
 800dbec:	0800dc1d 	.word	0x0800dc1d
 800dbf0:	0800dc1d 	.word	0x0800dc1d
 800dbf4:	0800dc1d 	.word	0x0800dc1d
 800dbf8:	0800dc1d 	.word	0x0800dc1d
 800dbfc:	0800dc1d 	.word	0x0800dc1d
 800dc00:	0800dc1d 	.word	0x0800dc1d
 800dc04:	0800dc1d 	.word	0x0800dc1d
 800dc08:	0800dc1d 	.word	0x0800dc1d
 800dc0c:	0800dc1d 	.word	0x0800dc1d
 800dc10:	0800dc1d 	.word	0x0800dc1d
 800dc14:	0800dc1d 	.word	0x0800dc1d
 800dc18:	0800dc1d 	.word	0x0800dc1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc1c:	bf00      	nop
  }

  return (USBD_OK);
 800dc1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	4805      	ldr	r0, [pc, #20]	@ (800dc50 <CDC_Receive_FS+0x24>)
 800dc3a:	f7fe fc43 	bl	800c4c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc3e:	4804      	ldr	r0, [pc, #16]	@ (800dc50 <CDC_Receive_FS+0x24>)
 800dc40:	f7fe fc5e 	bl	800c500 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	2000052c 	.word	0x2000052c

0800dc54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dc66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
	...

0800dc78 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b083      	sub	sp, #12
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	6039      	str	r1, [r7, #0]
 800dc82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2212      	movs	r2, #18
 800dc88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800dc8a:	4b03      	ldr	r3, [pc, #12]	@ (800dc98 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr
 800dc98:	200000d4 	.word	0x200000d4

0800dc9c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	4603      	mov	r3, r0
 800dca4:	6039      	str	r1, [r7, #0]
 800dca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	2204      	movs	r2, #4
 800dcac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dcae:	4b03      	ldr	r3, [pc, #12]	@ (800dcbc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr
 800dcbc:	200000e8 	.word	0x200000e8

0800dcc0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	6039      	str	r1, [r7, #0]
 800dcca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dccc:	79fb      	ldrb	r3, [r7, #7]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d105      	bne.n	800dcde <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	4907      	ldr	r1, [pc, #28]	@ (800dcf4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dcd6:	4808      	ldr	r0, [pc, #32]	@ (800dcf8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dcd8:	f7ff fe12 	bl	800d900 <USBD_GetString>
 800dcdc:	e004      	b.n	800dce8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	4904      	ldr	r1, [pc, #16]	@ (800dcf4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dce2:	4805      	ldr	r0, [pc, #20]	@ (800dcf8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dce4:	f7ff fe0c 	bl	800d900 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dce8:	4b02      	ldr	r3, [pc, #8]	@ (800dcf4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	20001808 	.word	0x20001808
 800dcf8:	080112f8 	.word	0x080112f8

0800dcfc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	6039      	str	r1, [r7, #0]
 800dd06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	4904      	ldr	r1, [pc, #16]	@ (800dd1c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800dd0c:	4804      	ldr	r0, [pc, #16]	@ (800dd20 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dd0e:	f7ff fdf7 	bl	800d900 <USBD_GetString>
  return USBD_StrDesc;
 800dd12:	4b02      	ldr	r3, [pc, #8]	@ (800dd1c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	20001808 	.word	0x20001808
 800dd20:	08011310 	.word	0x08011310

0800dd24 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	6039      	str	r1, [r7, #0]
 800dd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	221a      	movs	r2, #26
 800dd34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd36:	f000 f843 	bl	800ddc0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dd3a:	4b02      	ldr	r3, [pc, #8]	@ (800dd44 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	200000ec 	.word	0x200000ec

0800dd48 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	6039      	str	r1, [r7, #0]
 800dd52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d105      	bne.n	800dd66 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	4907      	ldr	r1, [pc, #28]	@ (800dd7c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dd5e:	4808      	ldr	r0, [pc, #32]	@ (800dd80 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dd60:	f7ff fdce 	bl	800d900 <USBD_GetString>
 800dd64:	e004      	b.n	800dd70 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	4904      	ldr	r1, [pc, #16]	@ (800dd7c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dd6a:	4805      	ldr	r0, [pc, #20]	@ (800dd80 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dd6c:	f7ff fdc8 	bl	800d900 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd70:	4b02      	ldr	r3, [pc, #8]	@ (800dd7c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20001808 	.word	0x20001808
 800dd80:	08011324 	.word	0x08011324

0800dd84 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	6039      	str	r1, [r7, #0]
 800dd8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d105      	bne.n	800dda2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	4907      	ldr	r1, [pc, #28]	@ (800ddb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dd9a:	4808      	ldr	r0, [pc, #32]	@ (800ddbc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dd9c:	f7ff fdb0 	bl	800d900 <USBD_GetString>
 800dda0:	e004      	b.n	800ddac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dda2:	683a      	ldr	r2, [r7, #0]
 800dda4:	4904      	ldr	r1, [pc, #16]	@ (800ddb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dda6:	4805      	ldr	r0, [pc, #20]	@ (800ddbc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dda8:	f7ff fdaa 	bl	800d900 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddac:	4b02      	ldr	r3, [pc, #8]	@ (800ddb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20001808 	.word	0x20001808
 800ddbc:	08011330 	.word	0x08011330

0800ddc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ddc6:	4b0f      	ldr	r3, [pc, #60]	@ (800de04 <Get_SerialNum+0x44>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ddcc:	4b0e      	ldr	r3, [pc, #56]	@ (800de08 <Get_SerialNum+0x48>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ddd2:	4b0e      	ldr	r3, [pc, #56]	@ (800de0c <Get_SerialNum+0x4c>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4413      	add	r3, r2
 800ddde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d009      	beq.n	800ddfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dde6:	2208      	movs	r2, #8
 800dde8:	4909      	ldr	r1, [pc, #36]	@ (800de10 <Get_SerialNum+0x50>)
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f000 f814 	bl	800de18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddf0:	2204      	movs	r2, #4
 800ddf2:	4908      	ldr	r1, [pc, #32]	@ (800de14 <Get_SerialNum+0x54>)
 800ddf4:	68b8      	ldr	r0, [r7, #8]
 800ddf6:	f000 f80f 	bl	800de18 <IntToUnicode>
  }
}
 800ddfa:	bf00      	nop
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	1fff7590 	.word	0x1fff7590
 800de08:	1fff7594 	.word	0x1fff7594
 800de0c:	1fff7598 	.word	0x1fff7598
 800de10:	200000ee 	.word	0x200000ee
 800de14:	200000fe 	.word	0x200000fe

0800de18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de18:	b480      	push	{r7}
 800de1a:	b087      	sub	sp, #28
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	4613      	mov	r3, r2
 800de24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800de2a:	2300      	movs	r3, #0
 800de2c:	75fb      	strb	r3, [r7, #23]
 800de2e:	e027      	b.n	800de80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	0f1b      	lsrs	r3, r3, #28
 800de34:	2b09      	cmp	r3, #9
 800de36:	d80b      	bhi.n	800de50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	0f1b      	lsrs	r3, r3, #28
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	005b      	lsls	r3, r3, #1
 800de42:	4619      	mov	r1, r3
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	440b      	add	r3, r1
 800de48:	3230      	adds	r2, #48	@ 0x30
 800de4a:	b2d2      	uxtb	r2, r2
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	e00a      	b.n	800de66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	0f1b      	lsrs	r3, r3, #28
 800de54:	b2da      	uxtb	r2, r3
 800de56:	7dfb      	ldrb	r3, [r7, #23]
 800de58:	005b      	lsls	r3, r3, #1
 800de5a:	4619      	mov	r1, r3
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	440b      	add	r3, r1
 800de60:	3237      	adds	r2, #55	@ 0x37
 800de62:	b2d2      	uxtb	r2, r2
 800de64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	011b      	lsls	r3, r3, #4
 800de6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de6c:	7dfb      	ldrb	r3, [r7, #23]
 800de6e:	005b      	lsls	r3, r3, #1
 800de70:	3301      	adds	r3, #1
 800de72:	68ba      	ldr	r2, [r7, #8]
 800de74:	4413      	add	r3, r2
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de7a:	7dfb      	ldrb	r3, [r7, #23]
 800de7c:	3301      	adds	r3, #1
 800de7e:	75fb      	strb	r3, [r7, #23]
 800de80:	7dfa      	ldrb	r2, [r7, #23]
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	429a      	cmp	r2, r3
 800de86:	d3d3      	bcc.n	800de30 <IntToUnicode+0x18>
  }
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	371c      	adds	r7, #28
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <LL_AHB2_GRP1_EnableClock>:
{
 800de96:	b480      	push	{r7}
 800de98:	b085      	sub	sp, #20
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800de9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4313      	orrs	r3, r2
 800deac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800deae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4013      	ands	r3, r2
 800deb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800deba:	68fb      	ldr	r3, [r7, #12]
}
 800debc:	bf00      	nop
 800debe:	3714      	adds	r7, #20
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <LL_APB1_GRP1_EnableClock>:
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ded0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ded4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ded6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4313      	orrs	r3, r2
 800dede:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800dee0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dee4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4013      	ands	r3, r2
 800deea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800deec:	68fb      	ldr	r3, [r7, #12]
}
 800deee:	bf00      	nop
 800def0:	3714      	adds	r7, #20
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
	...

0800defc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df04:	f107 030c 	add.w	r3, r7, #12
 800df08:	2200      	movs	r2, #0
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	605a      	str	r2, [r3, #4]
 800df0e:	609a      	str	r2, [r3, #8]
 800df10:	60da      	str	r2, [r3, #12]
 800df12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a17      	ldr	r2, [pc, #92]	@ (800df78 <HAL_PCD_MspInit+0x7c>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d128      	bne.n	800df70 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df1e:	2001      	movs	r0, #1
 800df20:	f7ff ffb9 	bl	800de96 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800df24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800df28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df2a:	2302      	movs	r3, #2
 800df2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df32:	2300      	movs	r3, #0
 800df34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800df36:	230a      	movs	r3, #10
 800df38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df3a:	f107 030c 	add.w	r3, r7, #12
 800df3e:	4619      	mov	r1, r3
 800df40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800df44:	f7f5 fcb6 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800df48:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800df4c:	f7ff ffbc 	bl	800dec8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800df50:	2200      	movs	r2, #0
 800df52:	2100      	movs	r1, #0
 800df54:	2013      	movs	r0, #19
 800df56:	f7f5 f996 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800df5a:	2013      	movs	r0, #19
 800df5c:	f7f5 f9ad 	bl	80032ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800df60:	2200      	movs	r2, #0
 800df62:	2100      	movs	r1, #0
 800df64:	2014      	movs	r0, #20
 800df66:	f7f5 f98e 	bl	8003286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800df6a:	2014      	movs	r0, #20
 800df6c:	f7f5 f9a5 	bl	80032ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800df70:	bf00      	nop
 800df72:	3720      	adds	r7, #32
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}
 800df78:	40006800 	.word	0x40006800

0800df7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f7fe fbb9 	bl	800c70a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800df98:	bf00      	nop
 800df9a:	3708      	adds	r7, #8
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dfb2:	78fa      	ldrb	r2, [r7, #3]
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	f7fe fbf3 	bl	800c7b4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dfce:	bf00      	nop
 800dfd0:	3708      	adds	r7, #8
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	b082      	sub	sp, #8
 800dfda:	af00      	add	r7, sp, #0
 800dfdc:	6078      	str	r0, [r7, #4]
 800dfde:	460b      	mov	r3, r1
 800dfe0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800dfe8:	78fa      	ldrb	r2, [r7, #3]
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4613      	mov	r3, r2
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	00db      	lsls	r3, r3, #3
 800dff4:	440b      	add	r3, r1
 800dff6:	3324      	adds	r3, #36	@ 0x24
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	78fb      	ldrb	r3, [r7, #3]
 800dffc:	4619      	mov	r1, r3
 800dffe:	f7fe fc8c 	bl	800c91a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e002:	bf00      	nop
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b082      	sub	sp, #8
 800e00e:	af00      	add	r7, sp, #0
 800e010:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e018:	4618      	mov	r0, r3
 800e01a:	f7fe fdc6 	bl	800cbaa <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e01e:	bf00      	nop
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}

0800e026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e026:	b580      	push	{r7, lr}
 800e028:	b084      	sub	sp, #16
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e02e:	2301      	movs	r3, #1
 800e030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	795b      	ldrb	r3, [r3, #5]
 800e036:	2b02      	cmp	r3, #2
 800e038:	d001      	beq.n	800e03e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e03a:	f7f3 f9ed 	bl	8001418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e044:	7bfa      	ldrb	r2, [r7, #15]
 800e046:	4611      	mov	r1, r2
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe fd6a 	bl	800cb22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e054:	4618      	mov	r0, r3
 800e056:	f7fe fd12 	bl	800ca7e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e05a:	bf00      	nop
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e072:	4618      	mov	r0, r3
 800e074:	f7fe fd65 	bl	800cb42 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7a5b      	ldrb	r3, [r3, #9]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d005      	beq.n	800e08c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e080:	4b04      	ldr	r3, [pc, #16]	@ (800e094 <HAL_PCD_SuspendCallback+0x30>)
 800e082:	691b      	ldr	r3, [r3, #16]
 800e084:	4a03      	ldr	r2, [pc, #12]	@ (800e094 <HAL_PCD_SuspendCallback+0x30>)
 800e086:	f043 0306 	orr.w	r3, r3, #6
 800e08a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	e000ed00 	.word	0xe000ed00

0800e098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	7a5b      	ldrb	r3, [r3, #9]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d007      	beq.n	800e0b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0a8:	4b08      	ldr	r3, [pc, #32]	@ (800e0cc <HAL_PCD_ResumeCallback+0x34>)
 800e0aa:	691b      	ldr	r3, [r3, #16]
 800e0ac:	4a07      	ldr	r2, [pc, #28]	@ (800e0cc <HAL_PCD_ResumeCallback+0x34>)
 800e0ae:	f023 0306 	bic.w	r3, r3, #6
 800e0b2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e0b4:	f000 f9fa 	bl	800e4ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7fe fd5b 	bl	800cb7a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	e000ed00 	.word	0xe000ed00

0800e0d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e0d8:	4a2c      	ldr	r2, [pc, #176]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a2a      	ldr	r2, [pc, #168]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e0e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e0e8:	f7f8 fa08 	bl	80064fc <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e0ec:	4b27      	ldr	r3, [pc, #156]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e0ee:	4a28      	ldr	r2, [pc, #160]	@ (800e190 <USBD_LL_Init+0xc0>)
 800e0f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e0f2:	4b26      	ldr	r3, [pc, #152]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e0f4:	2208      	movs	r2, #8
 800e0f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e0f8:	4b24      	ldr	r3, [pc, #144]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e0fa:	2202      	movs	r2, #2
 800e0fc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e0fe:	4b23      	ldr	r3, [pc, #140]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e100:	2202      	movs	r2, #2
 800e102:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e104:	4b21      	ldr	r3, [pc, #132]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e106:	2200      	movs	r2, #0
 800e108:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e10a:	4b20      	ldr	r3, [pc, #128]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e110:	4b1e      	ldr	r3, [pc, #120]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e112:	2200      	movs	r2, #0
 800e114:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e116:	4b1d      	ldr	r3, [pc, #116]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e118:	2200      	movs	r2, #0
 800e11a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e11c:	481b      	ldr	r0, [pc, #108]	@ (800e18c <USBD_LL_Init+0xbc>)
 800e11e:	f7f6 fc9b 	bl	8004a58 <HAL_PCD_Init>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e128:	f7f3 f976 	bl	8001418 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e132:	2318      	movs	r3, #24
 800e134:	2200      	movs	r2, #0
 800e136:	2100      	movs	r1, #0
 800e138:	f7f8 f954 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e142:	2358      	movs	r3, #88	@ 0x58
 800e144:	2200      	movs	r2, #0
 800e146:	2180      	movs	r1, #128	@ 0x80
 800e148:	f7f8 f94c 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e152:	23c0      	movs	r3, #192	@ 0xc0
 800e154:	2200      	movs	r2, #0
 800e156:	2181      	movs	r1, #129	@ 0x81
 800e158:	f7f8 f944 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e162:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e166:	2200      	movs	r2, #0
 800e168:	2101      	movs	r1, #1
 800e16a:	f7f8 f93b 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e178:	2200      	movs	r2, #0
 800e17a:	2182      	movs	r1, #130	@ 0x82
 800e17c:	f7f8 f932 	bl	80063e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	20001a08 	.word	0x20001a08
 800e190:	40006800 	.word	0x40006800

0800e194 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f7f6 fd22 	bl	8004bf4 <HAL_PCD_Start>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f97e 	bl	800e4b8 <USBD_Get_USB_Status>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3710      	adds	r7, #16
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b084      	sub	sp, #16
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	4603      	mov	r3, r0
 800e1da:	70fb      	strb	r3, [r7, #3]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	70bb      	strb	r3, [r7, #2]
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1f2:	78bb      	ldrb	r3, [r7, #2]
 800e1f4:	883a      	ldrh	r2, [r7, #0]
 800e1f6:	78f9      	ldrb	r1, [r7, #3]
 800e1f8:	f7f6 fe69 	bl	8004ece <HAL_PCD_EP_Open>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f958 	bl	800e4b8 <USBD_Get_USB_Status>
 800e208:	4603      	mov	r3, r0
 800e20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}

0800e216 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e216:	b580      	push	{r7, lr}
 800e218:	b084      	sub	sp, #16
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e226:	2300      	movs	r3, #0
 800e228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e230:	78fa      	ldrb	r2, [r7, #3]
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f7f6 fea7 	bl	8004f88 <HAL_PCD_EP_Close>
 800e23a:	4603      	mov	r3, r0
 800e23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	4618      	mov	r0, r3
 800e242:	f000 f939 	bl	800e4b8 <USBD_Get_USB_Status>
 800e246:	4603      	mov	r3, r0
 800e248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	460b      	mov	r3, r1
 800e25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e260:	2300      	movs	r3, #0
 800e262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e264:	2300      	movs	r3, #0
 800e266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e26e:	78fa      	ldrb	r2, [r7, #3]
 800e270:	4611      	mov	r1, r2
 800e272:	4618      	mov	r0, r3
 800e274:	f7f6 ff50 	bl	8005118 <HAL_PCD_EP_SetStall>
 800e278:	4603      	mov	r3, r0
 800e27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 f91a 	bl	800e4b8 <USBD_Get_USB_Status>
 800e284:	4603      	mov	r3, r0
 800e286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e288:	7bbb      	ldrb	r3, [r7, #14]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	460b      	mov	r3, r1
 800e29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2ac:	78fa      	ldrb	r2, [r7, #3]
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7f6 ff83 	bl	80051bc <HAL_PCD_EP_ClrStall>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ba:	7bfb      	ldrb	r3, [r7, #15]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 f8fb 	bl	800e4b8 <USBD_Get_USB_Status>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	460b      	mov	r3, r1
 800e2da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da0b      	bge.n	800e304 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2f2:	68f9      	ldr	r1, [r7, #12]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	440b      	add	r3, r1
 800e2fe:	3312      	adds	r3, #18
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	e00b      	b.n	800e31c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e304:	78fb      	ldrb	r3, [r7, #3]
 800e306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	440b      	add	r3, r1
 800e316:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	460b      	mov	r3, r1
 800e332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e342:	78fa      	ldrb	r2, [r7, #3]
 800e344:	4611      	mov	r1, r2
 800e346:	4618      	mov	r0, r3
 800e348:	f7f6 fd9d 	bl	8004e86 <HAL_PCD_SetAddress>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e350:	7bfb      	ldrb	r3, [r7, #15]
 800e352:	4618      	mov	r0, r3
 800e354:	f000 f8b0 	bl	800e4b8 <USBD_Get_USB_Status>
 800e358:	4603      	mov	r3, r0
 800e35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b086      	sub	sp, #24
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	60f8      	str	r0, [r7, #12]
 800e36e:	607a      	str	r2, [r7, #4]
 800e370:	603b      	str	r3, [r7, #0]
 800e372:	460b      	mov	r3, r1
 800e374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e384:	7af9      	ldrb	r1, [r7, #11]
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	f7f6 fe8e 	bl	80050aa <HAL_PCD_EP_Transmit>
 800e38e:	4603      	mov	r3, r0
 800e390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e392:	7dfb      	ldrb	r3, [r7, #23]
 800e394:	4618      	mov	r0, r3
 800e396:	f000 f88f 	bl	800e4b8 <USBD_Get_USB_Status>
 800e39a:	4603      	mov	r3, r0
 800e39c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e39e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3718      	adds	r7, #24
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}

0800e3a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	607a      	str	r2, [r7, #4]
 800e3b2:	603b      	str	r3, [r7, #0]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3c6:	7af9      	ldrb	r1, [r7, #11]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	f7f6 fe24 	bl	8005018 <HAL_PCD_EP_Receive>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3d4:	7dfb      	ldrb	r3, [r7, #23]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f000 f86e 	bl	800e4b8 <USBD_Get_USB_Status>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3718      	adds	r7, #24
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b082      	sub	sp, #8
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3fc:	78fa      	ldrb	r2, [r7, #3]
 800e3fe:	4611      	mov	r1, r2
 800e400:	4618      	mov	r0, r3
 800e402:	f7f6 fe3a 	bl	800507a <HAL_PCD_EP_GetRxCount>
 800e406:	4603      	mov	r3, r0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d002      	beq.n	800e428 <HAL_PCDEx_LPM_Callback+0x18>
 800e422:	2b01      	cmp	r3, #1
 800e424:	d013      	beq.n	800e44e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e426:	e023      	b.n	800e470 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	7a5b      	ldrb	r3, [r3, #9]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d007      	beq.n	800e440 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e430:	f000 f83c 	bl	800e4ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e434:	4b10      	ldr	r3, [pc, #64]	@ (800e478 <HAL_PCDEx_LPM_Callback+0x68>)
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	4a0f      	ldr	r2, [pc, #60]	@ (800e478 <HAL_PCDEx_LPM_Callback+0x68>)
 800e43a:	f023 0306 	bic.w	r3, r3, #6
 800e43e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e446:	4618      	mov	r0, r3
 800e448:	f7fe fb97 	bl	800cb7a <USBD_LL_Resume>
    break;
 800e44c:	e010      	b.n	800e470 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e454:	4618      	mov	r0, r3
 800e456:	f7fe fb74 	bl	800cb42 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	7a5b      	ldrb	r3, [r3, #9]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d005      	beq.n	800e46e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e462:	4b05      	ldr	r3, [pc, #20]	@ (800e478 <HAL_PCDEx_LPM_Callback+0x68>)
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	4a04      	ldr	r2, [pc, #16]	@ (800e478 <HAL_PCDEx_LPM_Callback+0x68>)
 800e468:	f043 0306 	orr.w	r3, r3, #6
 800e46c:	6113      	str	r3, [r2, #16]
    break;
 800e46e:	bf00      	nop
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	e000ed00 	.word	0xe000ed00

0800e47c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e484:	4b03      	ldr	r3, [pc, #12]	@ (800e494 <USBD_static_malloc+0x18>)
}
 800e486:	4618      	mov	r0, r3
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	20001ce4 	.word	0x20001ce4

0800e498 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e4b0:	f7f2 fd6e 	bl	8000f90 <SystemClock_Config>
}
 800e4b4:	bf00      	nop
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b085      	sub	sp, #20
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	2b03      	cmp	r3, #3
 800e4ca:	d817      	bhi.n	800e4fc <USBD_Get_USB_Status+0x44>
 800e4cc:	a201      	add	r2, pc, #4	@ (adr r2, 800e4d4 <USBD_Get_USB_Status+0x1c>)
 800e4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d2:	bf00      	nop
 800e4d4:	0800e4e5 	.word	0x0800e4e5
 800e4d8:	0800e4eb 	.word	0x0800e4eb
 800e4dc:	0800e4f1 	.word	0x0800e4f1
 800e4e0:	0800e4f7 	.word	0x0800e4f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4e8:	e00b      	b.n	800e502 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ee:	e008      	b.n	800e502 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e4f4:	e005      	b.n	800e502 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4f6:	2303      	movs	r3, #3
 800e4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800e4fa:	e002      	b.n	800e502 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e4fc:	2303      	movs	r3, #3
 800e4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800e500:	bf00      	nop
  }
  return usb_status;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <__cvt>:
 800e510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e514:	ec57 6b10 	vmov	r6, r7, d0
 800e518:	2f00      	cmp	r7, #0
 800e51a:	460c      	mov	r4, r1
 800e51c:	4619      	mov	r1, r3
 800e51e:	463b      	mov	r3, r7
 800e520:	bfbb      	ittet	lt
 800e522:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e526:	461f      	movlt	r7, r3
 800e528:	2300      	movge	r3, #0
 800e52a:	232d      	movlt	r3, #45	@ 0x2d
 800e52c:	700b      	strb	r3, [r1, #0]
 800e52e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e530:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e534:	4691      	mov	r9, r2
 800e536:	f023 0820 	bic.w	r8, r3, #32
 800e53a:	bfbc      	itt	lt
 800e53c:	4632      	movlt	r2, r6
 800e53e:	4616      	movlt	r6, r2
 800e540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e544:	d005      	beq.n	800e552 <__cvt+0x42>
 800e546:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e54a:	d100      	bne.n	800e54e <__cvt+0x3e>
 800e54c:	3401      	adds	r4, #1
 800e54e:	2102      	movs	r1, #2
 800e550:	e000      	b.n	800e554 <__cvt+0x44>
 800e552:	2103      	movs	r1, #3
 800e554:	ab03      	add	r3, sp, #12
 800e556:	9301      	str	r3, [sp, #4]
 800e558:	ab02      	add	r3, sp, #8
 800e55a:	9300      	str	r3, [sp, #0]
 800e55c:	ec47 6b10 	vmov	d0, r6, r7
 800e560:	4653      	mov	r3, sl
 800e562:	4622      	mov	r2, r4
 800e564:	f000 fe98 	bl	800f298 <_dtoa_r>
 800e568:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e56c:	4605      	mov	r5, r0
 800e56e:	d119      	bne.n	800e5a4 <__cvt+0x94>
 800e570:	f019 0f01 	tst.w	r9, #1
 800e574:	d00e      	beq.n	800e594 <__cvt+0x84>
 800e576:	eb00 0904 	add.w	r9, r0, r4
 800e57a:	2200      	movs	r2, #0
 800e57c:	2300      	movs	r3, #0
 800e57e:	4630      	mov	r0, r6
 800e580:	4639      	mov	r1, r7
 800e582:	f7f2 fa79 	bl	8000a78 <__aeabi_dcmpeq>
 800e586:	b108      	cbz	r0, 800e58c <__cvt+0x7c>
 800e588:	f8cd 900c 	str.w	r9, [sp, #12]
 800e58c:	2230      	movs	r2, #48	@ 0x30
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	454b      	cmp	r3, r9
 800e592:	d31e      	bcc.n	800e5d2 <__cvt+0xc2>
 800e594:	9b03      	ldr	r3, [sp, #12]
 800e596:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e598:	1b5b      	subs	r3, r3, r5
 800e59a:	4628      	mov	r0, r5
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	b004      	add	sp, #16
 800e5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e5a8:	eb00 0904 	add.w	r9, r0, r4
 800e5ac:	d1e5      	bne.n	800e57a <__cvt+0x6a>
 800e5ae:	7803      	ldrb	r3, [r0, #0]
 800e5b0:	2b30      	cmp	r3, #48	@ 0x30
 800e5b2:	d10a      	bne.n	800e5ca <__cvt+0xba>
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	f7f2 fa5c 	bl	8000a78 <__aeabi_dcmpeq>
 800e5c0:	b918      	cbnz	r0, 800e5ca <__cvt+0xba>
 800e5c2:	f1c4 0401 	rsb	r4, r4, #1
 800e5c6:	f8ca 4000 	str.w	r4, [sl]
 800e5ca:	f8da 3000 	ldr.w	r3, [sl]
 800e5ce:	4499      	add	r9, r3
 800e5d0:	e7d3      	b.n	800e57a <__cvt+0x6a>
 800e5d2:	1c59      	adds	r1, r3, #1
 800e5d4:	9103      	str	r1, [sp, #12]
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	e7d9      	b.n	800e58e <__cvt+0x7e>

0800e5da <__exponent>:
 800e5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5dc:	2900      	cmp	r1, #0
 800e5de:	bfba      	itte	lt
 800e5e0:	4249      	neglt	r1, r1
 800e5e2:	232d      	movlt	r3, #45	@ 0x2d
 800e5e4:	232b      	movge	r3, #43	@ 0x2b
 800e5e6:	2909      	cmp	r1, #9
 800e5e8:	7002      	strb	r2, [r0, #0]
 800e5ea:	7043      	strb	r3, [r0, #1]
 800e5ec:	dd29      	ble.n	800e642 <__exponent+0x68>
 800e5ee:	f10d 0307 	add.w	r3, sp, #7
 800e5f2:	461d      	mov	r5, r3
 800e5f4:	270a      	movs	r7, #10
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e5fc:	fb07 1416 	mls	r4, r7, r6, r1
 800e600:	3430      	adds	r4, #48	@ 0x30
 800e602:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e606:	460c      	mov	r4, r1
 800e608:	2c63      	cmp	r4, #99	@ 0x63
 800e60a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e60e:	4631      	mov	r1, r6
 800e610:	dcf1      	bgt.n	800e5f6 <__exponent+0x1c>
 800e612:	3130      	adds	r1, #48	@ 0x30
 800e614:	1e94      	subs	r4, r2, #2
 800e616:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e61a:	1c41      	adds	r1, r0, #1
 800e61c:	4623      	mov	r3, r4
 800e61e:	42ab      	cmp	r3, r5
 800e620:	d30a      	bcc.n	800e638 <__exponent+0x5e>
 800e622:	f10d 0309 	add.w	r3, sp, #9
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	42ac      	cmp	r4, r5
 800e62a:	bf88      	it	hi
 800e62c:	2300      	movhi	r3, #0
 800e62e:	3302      	adds	r3, #2
 800e630:	4403      	add	r3, r0
 800e632:	1a18      	subs	r0, r3, r0
 800e634:	b003      	add	sp, #12
 800e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e638:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e63c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e640:	e7ed      	b.n	800e61e <__exponent+0x44>
 800e642:	2330      	movs	r3, #48	@ 0x30
 800e644:	3130      	adds	r1, #48	@ 0x30
 800e646:	7083      	strb	r3, [r0, #2]
 800e648:	70c1      	strb	r1, [r0, #3]
 800e64a:	1d03      	adds	r3, r0, #4
 800e64c:	e7f1      	b.n	800e632 <__exponent+0x58>
	...

0800e650 <_printf_float>:
 800e650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e654:	b08d      	sub	sp, #52	@ 0x34
 800e656:	460c      	mov	r4, r1
 800e658:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e65c:	4616      	mov	r6, r2
 800e65e:	461f      	mov	r7, r3
 800e660:	4605      	mov	r5, r0
 800e662:	f000 fd09 	bl	800f078 <_localeconv_r>
 800e666:	6803      	ldr	r3, [r0, #0]
 800e668:	9304      	str	r3, [sp, #16]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7f1 fdd8 	bl	8000220 <strlen>
 800e670:	2300      	movs	r3, #0
 800e672:	930a      	str	r3, [sp, #40]	@ 0x28
 800e674:	f8d8 3000 	ldr.w	r3, [r8]
 800e678:	9005      	str	r0, [sp, #20]
 800e67a:	3307      	adds	r3, #7
 800e67c:	f023 0307 	bic.w	r3, r3, #7
 800e680:	f103 0208 	add.w	r2, r3, #8
 800e684:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e688:	f8d4 b000 	ldr.w	fp, [r4]
 800e68c:	f8c8 2000 	str.w	r2, [r8]
 800e690:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e694:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e698:	9307      	str	r3, [sp, #28]
 800e69a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e69e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e6a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6a6:	4b9c      	ldr	r3, [pc, #624]	@ (800e918 <_printf_float+0x2c8>)
 800e6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ac:	f7f2 fa16 	bl	8000adc <__aeabi_dcmpun>
 800e6b0:	bb70      	cbnz	r0, 800e710 <_printf_float+0xc0>
 800e6b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6b6:	4b98      	ldr	r3, [pc, #608]	@ (800e918 <_printf_float+0x2c8>)
 800e6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e6bc:	f7f2 f9f0 	bl	8000aa0 <__aeabi_dcmple>
 800e6c0:	bb30      	cbnz	r0, 800e710 <_printf_float+0xc0>
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f2 f9df 	bl	8000a8c <__aeabi_dcmplt>
 800e6ce:	b110      	cbz	r0, 800e6d6 <_printf_float+0x86>
 800e6d0:	232d      	movs	r3, #45	@ 0x2d
 800e6d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6d6:	4a91      	ldr	r2, [pc, #580]	@ (800e91c <_printf_float+0x2cc>)
 800e6d8:	4b91      	ldr	r3, [pc, #580]	@ (800e920 <_printf_float+0x2d0>)
 800e6da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e6de:	bf94      	ite	ls
 800e6e0:	4690      	movls	r8, r2
 800e6e2:	4698      	movhi	r8, r3
 800e6e4:	2303      	movs	r3, #3
 800e6e6:	6123      	str	r3, [r4, #16]
 800e6e8:	f02b 0304 	bic.w	r3, fp, #4
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	f04f 0900 	mov.w	r9, #0
 800e6f2:	9700      	str	r7, [sp, #0]
 800e6f4:	4633      	mov	r3, r6
 800e6f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e6f8:	4621      	mov	r1, r4
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	f000 f9d2 	bl	800eaa4 <_printf_common>
 800e700:	3001      	adds	r0, #1
 800e702:	f040 808d 	bne.w	800e820 <_printf_float+0x1d0>
 800e706:	f04f 30ff 	mov.w	r0, #4294967295
 800e70a:	b00d      	add	sp, #52	@ 0x34
 800e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e710:	4642      	mov	r2, r8
 800e712:	464b      	mov	r3, r9
 800e714:	4640      	mov	r0, r8
 800e716:	4649      	mov	r1, r9
 800e718:	f7f2 f9e0 	bl	8000adc <__aeabi_dcmpun>
 800e71c:	b140      	cbz	r0, 800e730 <_printf_float+0xe0>
 800e71e:	464b      	mov	r3, r9
 800e720:	2b00      	cmp	r3, #0
 800e722:	bfbc      	itt	lt
 800e724:	232d      	movlt	r3, #45	@ 0x2d
 800e726:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e72a:	4a7e      	ldr	r2, [pc, #504]	@ (800e924 <_printf_float+0x2d4>)
 800e72c:	4b7e      	ldr	r3, [pc, #504]	@ (800e928 <_printf_float+0x2d8>)
 800e72e:	e7d4      	b.n	800e6da <_printf_float+0x8a>
 800e730:	6863      	ldr	r3, [r4, #4]
 800e732:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e736:	9206      	str	r2, [sp, #24]
 800e738:	1c5a      	adds	r2, r3, #1
 800e73a:	d13b      	bne.n	800e7b4 <_printf_float+0x164>
 800e73c:	2306      	movs	r3, #6
 800e73e:	6063      	str	r3, [r4, #4]
 800e740:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e744:	2300      	movs	r3, #0
 800e746:	6022      	str	r2, [r4, #0]
 800e748:	9303      	str	r3, [sp, #12]
 800e74a:	ab0a      	add	r3, sp, #40	@ 0x28
 800e74c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e750:	ab09      	add	r3, sp, #36	@ 0x24
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	6861      	ldr	r1, [r4, #4]
 800e756:	ec49 8b10 	vmov	d0, r8, r9
 800e75a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e75e:	4628      	mov	r0, r5
 800e760:	f7ff fed6 	bl	800e510 <__cvt>
 800e764:	9b06      	ldr	r3, [sp, #24]
 800e766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e768:	2b47      	cmp	r3, #71	@ 0x47
 800e76a:	4680      	mov	r8, r0
 800e76c:	d129      	bne.n	800e7c2 <_printf_float+0x172>
 800e76e:	1cc8      	adds	r0, r1, #3
 800e770:	db02      	blt.n	800e778 <_printf_float+0x128>
 800e772:	6863      	ldr	r3, [r4, #4]
 800e774:	4299      	cmp	r1, r3
 800e776:	dd41      	ble.n	800e7fc <_printf_float+0x1ac>
 800e778:	f1aa 0a02 	sub.w	sl, sl, #2
 800e77c:	fa5f fa8a 	uxtb.w	sl, sl
 800e780:	3901      	subs	r1, #1
 800e782:	4652      	mov	r2, sl
 800e784:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e788:	9109      	str	r1, [sp, #36]	@ 0x24
 800e78a:	f7ff ff26 	bl	800e5da <__exponent>
 800e78e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e790:	1813      	adds	r3, r2, r0
 800e792:	2a01      	cmp	r2, #1
 800e794:	4681      	mov	r9, r0
 800e796:	6123      	str	r3, [r4, #16]
 800e798:	dc02      	bgt.n	800e7a0 <_printf_float+0x150>
 800e79a:	6822      	ldr	r2, [r4, #0]
 800e79c:	07d2      	lsls	r2, r2, #31
 800e79e:	d501      	bpl.n	800e7a4 <_printf_float+0x154>
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	6123      	str	r3, [r4, #16]
 800e7a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0a2      	beq.n	800e6f2 <_printf_float+0xa2>
 800e7ac:	232d      	movs	r3, #45	@ 0x2d
 800e7ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7b2:	e79e      	b.n	800e6f2 <_printf_float+0xa2>
 800e7b4:	9a06      	ldr	r2, [sp, #24]
 800e7b6:	2a47      	cmp	r2, #71	@ 0x47
 800e7b8:	d1c2      	bne.n	800e740 <_printf_float+0xf0>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1c0      	bne.n	800e740 <_printf_float+0xf0>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e7bd      	b.n	800e73e <_printf_float+0xee>
 800e7c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e7c6:	d9db      	bls.n	800e780 <_printf_float+0x130>
 800e7c8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e7cc:	d118      	bne.n	800e800 <_printf_float+0x1b0>
 800e7ce:	2900      	cmp	r1, #0
 800e7d0:	6863      	ldr	r3, [r4, #4]
 800e7d2:	dd0b      	ble.n	800e7ec <_printf_float+0x19c>
 800e7d4:	6121      	str	r1, [r4, #16]
 800e7d6:	b913      	cbnz	r3, 800e7de <_printf_float+0x18e>
 800e7d8:	6822      	ldr	r2, [r4, #0]
 800e7da:	07d0      	lsls	r0, r2, #31
 800e7dc:	d502      	bpl.n	800e7e4 <_printf_float+0x194>
 800e7de:	3301      	adds	r3, #1
 800e7e0:	440b      	add	r3, r1
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e7e6:	f04f 0900 	mov.w	r9, #0
 800e7ea:	e7db      	b.n	800e7a4 <_printf_float+0x154>
 800e7ec:	b913      	cbnz	r3, 800e7f4 <_printf_float+0x1a4>
 800e7ee:	6822      	ldr	r2, [r4, #0]
 800e7f0:	07d2      	lsls	r2, r2, #31
 800e7f2:	d501      	bpl.n	800e7f8 <_printf_float+0x1a8>
 800e7f4:	3302      	adds	r3, #2
 800e7f6:	e7f4      	b.n	800e7e2 <_printf_float+0x192>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e7f2      	b.n	800e7e2 <_printf_float+0x192>
 800e7fc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e802:	4299      	cmp	r1, r3
 800e804:	db05      	blt.n	800e812 <_printf_float+0x1c2>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	6121      	str	r1, [r4, #16]
 800e80a:	07d8      	lsls	r0, r3, #31
 800e80c:	d5ea      	bpl.n	800e7e4 <_printf_float+0x194>
 800e80e:	1c4b      	adds	r3, r1, #1
 800e810:	e7e7      	b.n	800e7e2 <_printf_float+0x192>
 800e812:	2900      	cmp	r1, #0
 800e814:	bfd4      	ite	le
 800e816:	f1c1 0202 	rsble	r2, r1, #2
 800e81a:	2201      	movgt	r2, #1
 800e81c:	4413      	add	r3, r2
 800e81e:	e7e0      	b.n	800e7e2 <_printf_float+0x192>
 800e820:	6823      	ldr	r3, [r4, #0]
 800e822:	055a      	lsls	r2, r3, #21
 800e824:	d407      	bmi.n	800e836 <_printf_float+0x1e6>
 800e826:	6923      	ldr	r3, [r4, #16]
 800e828:	4642      	mov	r2, r8
 800e82a:	4631      	mov	r1, r6
 800e82c:	4628      	mov	r0, r5
 800e82e:	47b8      	blx	r7
 800e830:	3001      	adds	r0, #1
 800e832:	d12b      	bne.n	800e88c <_printf_float+0x23c>
 800e834:	e767      	b.n	800e706 <_printf_float+0xb6>
 800e836:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e83a:	f240 80dd 	bls.w	800e9f8 <_printf_float+0x3a8>
 800e83e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e842:	2200      	movs	r2, #0
 800e844:	2300      	movs	r3, #0
 800e846:	f7f2 f917 	bl	8000a78 <__aeabi_dcmpeq>
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d033      	beq.n	800e8b6 <_printf_float+0x266>
 800e84e:	4a37      	ldr	r2, [pc, #220]	@ (800e92c <_printf_float+0x2dc>)
 800e850:	2301      	movs	r3, #1
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f af54 	beq.w	800e706 <_printf_float+0xb6>
 800e85e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e862:	4543      	cmp	r3, r8
 800e864:	db02      	blt.n	800e86c <_printf_float+0x21c>
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	07d8      	lsls	r0, r3, #31
 800e86a:	d50f      	bpl.n	800e88c <_printf_float+0x23c>
 800e86c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e870:	4631      	mov	r1, r6
 800e872:	4628      	mov	r0, r5
 800e874:	47b8      	blx	r7
 800e876:	3001      	adds	r0, #1
 800e878:	f43f af45 	beq.w	800e706 <_printf_float+0xb6>
 800e87c:	f04f 0900 	mov.w	r9, #0
 800e880:	f108 38ff 	add.w	r8, r8, #4294967295
 800e884:	f104 0a1a 	add.w	sl, r4, #26
 800e888:	45c8      	cmp	r8, r9
 800e88a:	dc09      	bgt.n	800e8a0 <_printf_float+0x250>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	079b      	lsls	r3, r3, #30
 800e890:	f100 8103 	bmi.w	800ea9a <_printf_float+0x44a>
 800e894:	68e0      	ldr	r0, [r4, #12]
 800e896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e898:	4298      	cmp	r0, r3
 800e89a:	bfb8      	it	lt
 800e89c:	4618      	movlt	r0, r3
 800e89e:	e734      	b.n	800e70a <_printf_float+0xba>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4652      	mov	r2, sl
 800e8a4:	4631      	mov	r1, r6
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	47b8      	blx	r7
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	f43f af2b 	beq.w	800e706 <_printf_float+0xb6>
 800e8b0:	f109 0901 	add.w	r9, r9, #1
 800e8b4:	e7e8      	b.n	800e888 <_printf_float+0x238>
 800e8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dc39      	bgt.n	800e930 <_printf_float+0x2e0>
 800e8bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e92c <_printf_float+0x2dc>)
 800e8be:	2301      	movs	r3, #1
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f43f af1d 	beq.w	800e706 <_printf_float+0xb6>
 800e8cc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e8d0:	ea59 0303 	orrs.w	r3, r9, r3
 800e8d4:	d102      	bne.n	800e8dc <_printf_float+0x28c>
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	07d9      	lsls	r1, r3, #31
 800e8da:	d5d7      	bpl.n	800e88c <_printf_float+0x23c>
 800e8dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	47b8      	blx	r7
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	f43f af0d 	beq.w	800e706 <_printf_float+0xb6>
 800e8ec:	f04f 0a00 	mov.w	sl, #0
 800e8f0:	f104 0b1a 	add.w	fp, r4, #26
 800e8f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f6:	425b      	negs	r3, r3
 800e8f8:	4553      	cmp	r3, sl
 800e8fa:	dc01      	bgt.n	800e900 <_printf_float+0x2b0>
 800e8fc:	464b      	mov	r3, r9
 800e8fe:	e793      	b.n	800e828 <_printf_float+0x1d8>
 800e900:	2301      	movs	r3, #1
 800e902:	465a      	mov	r2, fp
 800e904:	4631      	mov	r1, r6
 800e906:	4628      	mov	r0, r5
 800e908:	47b8      	blx	r7
 800e90a:	3001      	adds	r0, #1
 800e90c:	f43f aefb 	beq.w	800e706 <_printf_float+0xb6>
 800e910:	f10a 0a01 	add.w	sl, sl, #1
 800e914:	e7ee      	b.n	800e8f4 <_printf_float+0x2a4>
 800e916:	bf00      	nop
 800e918:	7fefffff 	.word	0x7fefffff
 800e91c:	08011408 	.word	0x08011408
 800e920:	0801140c 	.word	0x0801140c
 800e924:	08011410 	.word	0x08011410
 800e928:	08011414 	.word	0x08011414
 800e92c:	08011418 	.word	0x08011418
 800e930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e932:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e936:	4553      	cmp	r3, sl
 800e938:	bfa8      	it	ge
 800e93a:	4653      	movge	r3, sl
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	4699      	mov	r9, r3
 800e940:	dc36      	bgt.n	800e9b0 <_printf_float+0x360>
 800e942:	f04f 0b00 	mov.w	fp, #0
 800e946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e94a:	f104 021a 	add.w	r2, r4, #26
 800e94e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e950:	9306      	str	r3, [sp, #24]
 800e952:	eba3 0309 	sub.w	r3, r3, r9
 800e956:	455b      	cmp	r3, fp
 800e958:	dc31      	bgt.n	800e9be <_printf_float+0x36e>
 800e95a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e95c:	459a      	cmp	sl, r3
 800e95e:	dc3a      	bgt.n	800e9d6 <_printf_float+0x386>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07da      	lsls	r2, r3, #31
 800e964:	d437      	bmi.n	800e9d6 <_printf_float+0x386>
 800e966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e968:	ebaa 0903 	sub.w	r9, sl, r3
 800e96c:	9b06      	ldr	r3, [sp, #24]
 800e96e:	ebaa 0303 	sub.w	r3, sl, r3
 800e972:	4599      	cmp	r9, r3
 800e974:	bfa8      	it	ge
 800e976:	4699      	movge	r9, r3
 800e978:	f1b9 0f00 	cmp.w	r9, #0
 800e97c:	dc33      	bgt.n	800e9e6 <_printf_float+0x396>
 800e97e:	f04f 0800 	mov.w	r8, #0
 800e982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e986:	f104 0b1a 	add.w	fp, r4, #26
 800e98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e98c:	ebaa 0303 	sub.w	r3, sl, r3
 800e990:	eba3 0309 	sub.w	r3, r3, r9
 800e994:	4543      	cmp	r3, r8
 800e996:	f77f af79 	ble.w	800e88c <_printf_float+0x23c>
 800e99a:	2301      	movs	r3, #1
 800e99c:	465a      	mov	r2, fp
 800e99e:	4631      	mov	r1, r6
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	47b8      	blx	r7
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f43f aeae 	beq.w	800e706 <_printf_float+0xb6>
 800e9aa:	f108 0801 	add.w	r8, r8, #1
 800e9ae:	e7ec      	b.n	800e98a <_printf_float+0x33a>
 800e9b0:	4642      	mov	r2, r8
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	47b8      	blx	r7
 800e9b8:	3001      	adds	r0, #1
 800e9ba:	d1c2      	bne.n	800e942 <_printf_float+0x2f2>
 800e9bc:	e6a3      	b.n	800e706 <_printf_float+0xb6>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	9206      	str	r2, [sp, #24]
 800e9c6:	47b8      	blx	r7
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	f43f ae9c 	beq.w	800e706 <_printf_float+0xb6>
 800e9ce:	9a06      	ldr	r2, [sp, #24]
 800e9d0:	f10b 0b01 	add.w	fp, fp, #1
 800e9d4:	e7bb      	b.n	800e94e <_printf_float+0x2fe>
 800e9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4628      	mov	r0, r5
 800e9de:	47b8      	blx	r7
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	d1c0      	bne.n	800e966 <_printf_float+0x316>
 800e9e4:	e68f      	b.n	800e706 <_printf_float+0xb6>
 800e9e6:	9a06      	ldr	r2, [sp, #24]
 800e9e8:	464b      	mov	r3, r9
 800e9ea:	4442      	add	r2, r8
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	47b8      	blx	r7
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	d1c3      	bne.n	800e97e <_printf_float+0x32e>
 800e9f6:	e686      	b.n	800e706 <_printf_float+0xb6>
 800e9f8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e9fc:	f1ba 0f01 	cmp.w	sl, #1
 800ea00:	dc01      	bgt.n	800ea06 <_printf_float+0x3b6>
 800ea02:	07db      	lsls	r3, r3, #31
 800ea04:	d536      	bpl.n	800ea74 <_printf_float+0x424>
 800ea06:	2301      	movs	r3, #1
 800ea08:	4642      	mov	r2, r8
 800ea0a:	4631      	mov	r1, r6
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	47b8      	blx	r7
 800ea10:	3001      	adds	r0, #1
 800ea12:	f43f ae78 	beq.w	800e706 <_printf_float+0xb6>
 800ea16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea1a:	4631      	mov	r1, r6
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	47b8      	blx	r7
 800ea20:	3001      	adds	r0, #1
 800ea22:	f43f ae70 	beq.w	800e706 <_printf_float+0xb6>
 800ea26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea32:	f7f2 f821 	bl	8000a78 <__aeabi_dcmpeq>
 800ea36:	b9c0      	cbnz	r0, 800ea6a <_printf_float+0x41a>
 800ea38:	4653      	mov	r3, sl
 800ea3a:	f108 0201 	add.w	r2, r8, #1
 800ea3e:	4631      	mov	r1, r6
 800ea40:	4628      	mov	r0, r5
 800ea42:	47b8      	blx	r7
 800ea44:	3001      	adds	r0, #1
 800ea46:	d10c      	bne.n	800ea62 <_printf_float+0x412>
 800ea48:	e65d      	b.n	800e706 <_printf_float+0xb6>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	465a      	mov	r2, fp
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	f43f ae56 	beq.w	800e706 <_printf_float+0xb6>
 800ea5a:	f108 0801 	add.w	r8, r8, #1
 800ea5e:	45d0      	cmp	r8, sl
 800ea60:	dbf3      	blt.n	800ea4a <_printf_float+0x3fa>
 800ea62:	464b      	mov	r3, r9
 800ea64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ea68:	e6df      	b.n	800e82a <_printf_float+0x1da>
 800ea6a:	f04f 0800 	mov.w	r8, #0
 800ea6e:	f104 0b1a 	add.w	fp, r4, #26
 800ea72:	e7f4      	b.n	800ea5e <_printf_float+0x40e>
 800ea74:	2301      	movs	r3, #1
 800ea76:	4642      	mov	r2, r8
 800ea78:	e7e1      	b.n	800ea3e <_printf_float+0x3ee>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	464a      	mov	r2, r9
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	f43f ae3e 	beq.w	800e706 <_printf_float+0xb6>
 800ea8a:	f108 0801 	add.w	r8, r8, #1
 800ea8e:	68e3      	ldr	r3, [r4, #12]
 800ea90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ea92:	1a5b      	subs	r3, r3, r1
 800ea94:	4543      	cmp	r3, r8
 800ea96:	dcf0      	bgt.n	800ea7a <_printf_float+0x42a>
 800ea98:	e6fc      	b.n	800e894 <_printf_float+0x244>
 800ea9a:	f04f 0800 	mov.w	r8, #0
 800ea9e:	f104 0919 	add.w	r9, r4, #25
 800eaa2:	e7f4      	b.n	800ea8e <_printf_float+0x43e>

0800eaa4 <_printf_common>:
 800eaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa8:	4616      	mov	r6, r2
 800eaaa:	4698      	mov	r8, r3
 800eaac:	688a      	ldr	r2, [r1, #8]
 800eaae:	690b      	ldr	r3, [r1, #16]
 800eab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eab4:	4293      	cmp	r3, r2
 800eab6:	bfb8      	it	lt
 800eab8:	4613      	movlt	r3, r2
 800eaba:	6033      	str	r3, [r6, #0]
 800eabc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eac0:	4607      	mov	r7, r0
 800eac2:	460c      	mov	r4, r1
 800eac4:	b10a      	cbz	r2, 800eaca <_printf_common+0x26>
 800eac6:	3301      	adds	r3, #1
 800eac8:	6033      	str	r3, [r6, #0]
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	0699      	lsls	r1, r3, #26
 800eace:	bf42      	ittt	mi
 800ead0:	6833      	ldrmi	r3, [r6, #0]
 800ead2:	3302      	addmi	r3, #2
 800ead4:	6033      	strmi	r3, [r6, #0]
 800ead6:	6825      	ldr	r5, [r4, #0]
 800ead8:	f015 0506 	ands.w	r5, r5, #6
 800eadc:	d106      	bne.n	800eaec <_printf_common+0x48>
 800eade:	f104 0a19 	add.w	sl, r4, #25
 800eae2:	68e3      	ldr	r3, [r4, #12]
 800eae4:	6832      	ldr	r2, [r6, #0]
 800eae6:	1a9b      	subs	r3, r3, r2
 800eae8:	42ab      	cmp	r3, r5
 800eaea:	dc26      	bgt.n	800eb3a <_printf_common+0x96>
 800eaec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eaf0:	6822      	ldr	r2, [r4, #0]
 800eaf2:	3b00      	subs	r3, #0
 800eaf4:	bf18      	it	ne
 800eaf6:	2301      	movne	r3, #1
 800eaf8:	0692      	lsls	r2, r2, #26
 800eafa:	d42b      	bmi.n	800eb54 <_printf_common+0xb0>
 800eafc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb00:	4641      	mov	r1, r8
 800eb02:	4638      	mov	r0, r7
 800eb04:	47c8      	blx	r9
 800eb06:	3001      	adds	r0, #1
 800eb08:	d01e      	beq.n	800eb48 <_printf_common+0xa4>
 800eb0a:	6823      	ldr	r3, [r4, #0]
 800eb0c:	6922      	ldr	r2, [r4, #16]
 800eb0e:	f003 0306 	and.w	r3, r3, #6
 800eb12:	2b04      	cmp	r3, #4
 800eb14:	bf02      	ittt	eq
 800eb16:	68e5      	ldreq	r5, [r4, #12]
 800eb18:	6833      	ldreq	r3, [r6, #0]
 800eb1a:	1aed      	subeq	r5, r5, r3
 800eb1c:	68a3      	ldr	r3, [r4, #8]
 800eb1e:	bf0c      	ite	eq
 800eb20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb24:	2500      	movne	r5, #0
 800eb26:	4293      	cmp	r3, r2
 800eb28:	bfc4      	itt	gt
 800eb2a:	1a9b      	subgt	r3, r3, r2
 800eb2c:	18ed      	addgt	r5, r5, r3
 800eb2e:	2600      	movs	r6, #0
 800eb30:	341a      	adds	r4, #26
 800eb32:	42b5      	cmp	r5, r6
 800eb34:	d11a      	bne.n	800eb6c <_printf_common+0xc8>
 800eb36:	2000      	movs	r0, #0
 800eb38:	e008      	b.n	800eb4c <_printf_common+0xa8>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	4652      	mov	r2, sl
 800eb3e:	4641      	mov	r1, r8
 800eb40:	4638      	mov	r0, r7
 800eb42:	47c8      	blx	r9
 800eb44:	3001      	adds	r0, #1
 800eb46:	d103      	bne.n	800eb50 <_printf_common+0xac>
 800eb48:	f04f 30ff 	mov.w	r0, #4294967295
 800eb4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb50:	3501      	adds	r5, #1
 800eb52:	e7c6      	b.n	800eae2 <_printf_common+0x3e>
 800eb54:	18e1      	adds	r1, r4, r3
 800eb56:	1c5a      	adds	r2, r3, #1
 800eb58:	2030      	movs	r0, #48	@ 0x30
 800eb5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eb5e:	4422      	add	r2, r4
 800eb60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eb64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb68:	3302      	adds	r3, #2
 800eb6a:	e7c7      	b.n	800eafc <_printf_common+0x58>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	4622      	mov	r2, r4
 800eb70:	4641      	mov	r1, r8
 800eb72:	4638      	mov	r0, r7
 800eb74:	47c8      	blx	r9
 800eb76:	3001      	adds	r0, #1
 800eb78:	d0e6      	beq.n	800eb48 <_printf_common+0xa4>
 800eb7a:	3601      	adds	r6, #1
 800eb7c:	e7d9      	b.n	800eb32 <_printf_common+0x8e>
	...

0800eb80 <_printf_i>:
 800eb80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb84:	7e0f      	ldrb	r7, [r1, #24]
 800eb86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb88:	2f78      	cmp	r7, #120	@ 0x78
 800eb8a:	4691      	mov	r9, r2
 800eb8c:	4680      	mov	r8, r0
 800eb8e:	460c      	mov	r4, r1
 800eb90:	469a      	mov	sl, r3
 800eb92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb96:	d807      	bhi.n	800eba8 <_printf_i+0x28>
 800eb98:	2f62      	cmp	r7, #98	@ 0x62
 800eb9a:	d80a      	bhi.n	800ebb2 <_printf_i+0x32>
 800eb9c:	2f00      	cmp	r7, #0
 800eb9e:	f000 80d2 	beq.w	800ed46 <_printf_i+0x1c6>
 800eba2:	2f58      	cmp	r7, #88	@ 0x58
 800eba4:	f000 80b9 	beq.w	800ed1a <_printf_i+0x19a>
 800eba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ebb0:	e03a      	b.n	800ec28 <_printf_i+0xa8>
 800ebb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ebb6:	2b15      	cmp	r3, #21
 800ebb8:	d8f6      	bhi.n	800eba8 <_printf_i+0x28>
 800ebba:	a101      	add	r1, pc, #4	@ (adr r1, 800ebc0 <_printf_i+0x40>)
 800ebbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ebc0:	0800ec19 	.word	0x0800ec19
 800ebc4:	0800ec2d 	.word	0x0800ec2d
 800ebc8:	0800eba9 	.word	0x0800eba9
 800ebcc:	0800eba9 	.word	0x0800eba9
 800ebd0:	0800eba9 	.word	0x0800eba9
 800ebd4:	0800eba9 	.word	0x0800eba9
 800ebd8:	0800ec2d 	.word	0x0800ec2d
 800ebdc:	0800eba9 	.word	0x0800eba9
 800ebe0:	0800eba9 	.word	0x0800eba9
 800ebe4:	0800eba9 	.word	0x0800eba9
 800ebe8:	0800eba9 	.word	0x0800eba9
 800ebec:	0800ed2d 	.word	0x0800ed2d
 800ebf0:	0800ec57 	.word	0x0800ec57
 800ebf4:	0800ece7 	.word	0x0800ece7
 800ebf8:	0800eba9 	.word	0x0800eba9
 800ebfc:	0800eba9 	.word	0x0800eba9
 800ec00:	0800ed4f 	.word	0x0800ed4f
 800ec04:	0800eba9 	.word	0x0800eba9
 800ec08:	0800ec57 	.word	0x0800ec57
 800ec0c:	0800eba9 	.word	0x0800eba9
 800ec10:	0800eba9 	.word	0x0800eba9
 800ec14:	0800ecef 	.word	0x0800ecef
 800ec18:	6833      	ldr	r3, [r6, #0]
 800ec1a:	1d1a      	adds	r2, r3, #4
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6032      	str	r2, [r6, #0]
 800ec20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e09d      	b.n	800ed68 <_printf_i+0x1e8>
 800ec2c:	6833      	ldr	r3, [r6, #0]
 800ec2e:	6820      	ldr	r0, [r4, #0]
 800ec30:	1d19      	adds	r1, r3, #4
 800ec32:	6031      	str	r1, [r6, #0]
 800ec34:	0606      	lsls	r6, r0, #24
 800ec36:	d501      	bpl.n	800ec3c <_printf_i+0xbc>
 800ec38:	681d      	ldr	r5, [r3, #0]
 800ec3a:	e003      	b.n	800ec44 <_printf_i+0xc4>
 800ec3c:	0645      	lsls	r5, r0, #25
 800ec3e:	d5fb      	bpl.n	800ec38 <_printf_i+0xb8>
 800ec40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ec44:	2d00      	cmp	r5, #0
 800ec46:	da03      	bge.n	800ec50 <_printf_i+0xd0>
 800ec48:	232d      	movs	r3, #45	@ 0x2d
 800ec4a:	426d      	negs	r5, r5
 800ec4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec50:	4859      	ldr	r0, [pc, #356]	@ (800edb8 <_printf_i+0x238>)
 800ec52:	230a      	movs	r3, #10
 800ec54:	e011      	b.n	800ec7a <_printf_i+0xfa>
 800ec56:	6821      	ldr	r1, [r4, #0]
 800ec58:	6833      	ldr	r3, [r6, #0]
 800ec5a:	0608      	lsls	r0, r1, #24
 800ec5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ec60:	d402      	bmi.n	800ec68 <_printf_i+0xe8>
 800ec62:	0649      	lsls	r1, r1, #25
 800ec64:	bf48      	it	mi
 800ec66:	b2ad      	uxthmi	r5, r5
 800ec68:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec6a:	4853      	ldr	r0, [pc, #332]	@ (800edb8 <_printf_i+0x238>)
 800ec6c:	6033      	str	r3, [r6, #0]
 800ec6e:	bf14      	ite	ne
 800ec70:	230a      	movne	r3, #10
 800ec72:	2308      	moveq	r3, #8
 800ec74:	2100      	movs	r1, #0
 800ec76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec7a:	6866      	ldr	r6, [r4, #4]
 800ec7c:	60a6      	str	r6, [r4, #8]
 800ec7e:	2e00      	cmp	r6, #0
 800ec80:	bfa2      	ittt	ge
 800ec82:	6821      	ldrge	r1, [r4, #0]
 800ec84:	f021 0104 	bicge.w	r1, r1, #4
 800ec88:	6021      	strge	r1, [r4, #0]
 800ec8a:	b90d      	cbnz	r5, 800ec90 <_printf_i+0x110>
 800ec8c:	2e00      	cmp	r6, #0
 800ec8e:	d04b      	beq.n	800ed28 <_printf_i+0x1a8>
 800ec90:	4616      	mov	r6, r2
 800ec92:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec96:	fb03 5711 	mls	r7, r3, r1, r5
 800ec9a:	5dc7      	ldrb	r7, [r0, r7]
 800ec9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eca0:	462f      	mov	r7, r5
 800eca2:	42bb      	cmp	r3, r7
 800eca4:	460d      	mov	r5, r1
 800eca6:	d9f4      	bls.n	800ec92 <_printf_i+0x112>
 800eca8:	2b08      	cmp	r3, #8
 800ecaa:	d10b      	bne.n	800ecc4 <_printf_i+0x144>
 800ecac:	6823      	ldr	r3, [r4, #0]
 800ecae:	07df      	lsls	r7, r3, #31
 800ecb0:	d508      	bpl.n	800ecc4 <_printf_i+0x144>
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	6861      	ldr	r1, [r4, #4]
 800ecb6:	4299      	cmp	r1, r3
 800ecb8:	bfde      	ittt	le
 800ecba:	2330      	movle	r3, #48	@ 0x30
 800ecbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ecc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ecc4:	1b92      	subs	r2, r2, r6
 800ecc6:	6122      	str	r2, [r4, #16]
 800ecc8:	f8cd a000 	str.w	sl, [sp]
 800eccc:	464b      	mov	r3, r9
 800ecce:	aa03      	add	r2, sp, #12
 800ecd0:	4621      	mov	r1, r4
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	f7ff fee6 	bl	800eaa4 <_printf_common>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d14a      	bne.n	800ed72 <_printf_i+0x1f2>
 800ecdc:	f04f 30ff 	mov.w	r0, #4294967295
 800ece0:	b004      	add	sp, #16
 800ece2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece6:	6823      	ldr	r3, [r4, #0]
 800ece8:	f043 0320 	orr.w	r3, r3, #32
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	4833      	ldr	r0, [pc, #204]	@ (800edbc <_printf_i+0x23c>)
 800ecf0:	2778      	movs	r7, #120	@ 0x78
 800ecf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	6831      	ldr	r1, [r6, #0]
 800ecfa:	061f      	lsls	r7, r3, #24
 800ecfc:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed00:	d402      	bmi.n	800ed08 <_printf_i+0x188>
 800ed02:	065f      	lsls	r7, r3, #25
 800ed04:	bf48      	it	mi
 800ed06:	b2ad      	uxthmi	r5, r5
 800ed08:	6031      	str	r1, [r6, #0]
 800ed0a:	07d9      	lsls	r1, r3, #31
 800ed0c:	bf44      	itt	mi
 800ed0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ed12:	6023      	strmi	r3, [r4, #0]
 800ed14:	b11d      	cbz	r5, 800ed1e <_printf_i+0x19e>
 800ed16:	2310      	movs	r3, #16
 800ed18:	e7ac      	b.n	800ec74 <_printf_i+0xf4>
 800ed1a:	4827      	ldr	r0, [pc, #156]	@ (800edb8 <_printf_i+0x238>)
 800ed1c:	e7e9      	b.n	800ecf2 <_printf_i+0x172>
 800ed1e:	6823      	ldr	r3, [r4, #0]
 800ed20:	f023 0320 	bic.w	r3, r3, #32
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	e7f6      	b.n	800ed16 <_printf_i+0x196>
 800ed28:	4616      	mov	r6, r2
 800ed2a:	e7bd      	b.n	800eca8 <_printf_i+0x128>
 800ed2c:	6833      	ldr	r3, [r6, #0]
 800ed2e:	6825      	ldr	r5, [r4, #0]
 800ed30:	6961      	ldr	r1, [r4, #20]
 800ed32:	1d18      	adds	r0, r3, #4
 800ed34:	6030      	str	r0, [r6, #0]
 800ed36:	062e      	lsls	r6, r5, #24
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	d501      	bpl.n	800ed40 <_printf_i+0x1c0>
 800ed3c:	6019      	str	r1, [r3, #0]
 800ed3e:	e002      	b.n	800ed46 <_printf_i+0x1c6>
 800ed40:	0668      	lsls	r0, r5, #25
 800ed42:	d5fb      	bpl.n	800ed3c <_printf_i+0x1bc>
 800ed44:	8019      	strh	r1, [r3, #0]
 800ed46:	2300      	movs	r3, #0
 800ed48:	6123      	str	r3, [r4, #16]
 800ed4a:	4616      	mov	r6, r2
 800ed4c:	e7bc      	b.n	800ecc8 <_printf_i+0x148>
 800ed4e:	6833      	ldr	r3, [r6, #0]
 800ed50:	1d1a      	adds	r2, r3, #4
 800ed52:	6032      	str	r2, [r6, #0]
 800ed54:	681e      	ldr	r6, [r3, #0]
 800ed56:	6862      	ldr	r2, [r4, #4]
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	f7f1 fa10 	bl	8000180 <memchr>
 800ed60:	b108      	cbz	r0, 800ed66 <_printf_i+0x1e6>
 800ed62:	1b80      	subs	r0, r0, r6
 800ed64:	6060      	str	r0, [r4, #4]
 800ed66:	6863      	ldr	r3, [r4, #4]
 800ed68:	6123      	str	r3, [r4, #16]
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed70:	e7aa      	b.n	800ecc8 <_printf_i+0x148>
 800ed72:	6923      	ldr	r3, [r4, #16]
 800ed74:	4632      	mov	r2, r6
 800ed76:	4649      	mov	r1, r9
 800ed78:	4640      	mov	r0, r8
 800ed7a:	47d0      	blx	sl
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d0ad      	beq.n	800ecdc <_printf_i+0x15c>
 800ed80:	6823      	ldr	r3, [r4, #0]
 800ed82:	079b      	lsls	r3, r3, #30
 800ed84:	d413      	bmi.n	800edae <_printf_i+0x22e>
 800ed86:	68e0      	ldr	r0, [r4, #12]
 800ed88:	9b03      	ldr	r3, [sp, #12]
 800ed8a:	4298      	cmp	r0, r3
 800ed8c:	bfb8      	it	lt
 800ed8e:	4618      	movlt	r0, r3
 800ed90:	e7a6      	b.n	800ece0 <_printf_i+0x160>
 800ed92:	2301      	movs	r3, #1
 800ed94:	4632      	mov	r2, r6
 800ed96:	4649      	mov	r1, r9
 800ed98:	4640      	mov	r0, r8
 800ed9a:	47d0      	blx	sl
 800ed9c:	3001      	adds	r0, #1
 800ed9e:	d09d      	beq.n	800ecdc <_printf_i+0x15c>
 800eda0:	3501      	adds	r5, #1
 800eda2:	68e3      	ldr	r3, [r4, #12]
 800eda4:	9903      	ldr	r1, [sp, #12]
 800eda6:	1a5b      	subs	r3, r3, r1
 800eda8:	42ab      	cmp	r3, r5
 800edaa:	dcf2      	bgt.n	800ed92 <_printf_i+0x212>
 800edac:	e7eb      	b.n	800ed86 <_printf_i+0x206>
 800edae:	2500      	movs	r5, #0
 800edb0:	f104 0619 	add.w	r6, r4, #25
 800edb4:	e7f5      	b.n	800eda2 <_printf_i+0x222>
 800edb6:	bf00      	nop
 800edb8:	0801141a 	.word	0x0801141a
 800edbc:	0801142b 	.word	0x0801142b

0800edc0 <std>:
 800edc0:	2300      	movs	r3, #0
 800edc2:	b510      	push	{r4, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	e9c0 3300 	strd	r3, r3, [r0]
 800edca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edce:	6083      	str	r3, [r0, #8]
 800edd0:	8181      	strh	r1, [r0, #12]
 800edd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800edd4:	81c2      	strh	r2, [r0, #14]
 800edd6:	6183      	str	r3, [r0, #24]
 800edd8:	4619      	mov	r1, r3
 800edda:	2208      	movs	r2, #8
 800eddc:	305c      	adds	r0, #92	@ 0x5c
 800edde:	f000 f942 	bl	800f066 <memset>
 800ede2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee18 <std+0x58>)
 800ede4:	6263      	str	r3, [r4, #36]	@ 0x24
 800ede6:	4b0d      	ldr	r3, [pc, #52]	@ (800ee1c <std+0x5c>)
 800ede8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800edea:	4b0d      	ldr	r3, [pc, #52]	@ (800ee20 <std+0x60>)
 800edec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800edee:	4b0d      	ldr	r3, [pc, #52]	@ (800ee24 <std+0x64>)
 800edf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800edf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee28 <std+0x68>)
 800edf4:	6224      	str	r4, [r4, #32]
 800edf6:	429c      	cmp	r4, r3
 800edf8:	d006      	beq.n	800ee08 <std+0x48>
 800edfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800edfe:	4294      	cmp	r4, r2
 800ee00:	d002      	beq.n	800ee08 <std+0x48>
 800ee02:	33d0      	adds	r3, #208	@ 0xd0
 800ee04:	429c      	cmp	r4, r3
 800ee06:	d105      	bne.n	800ee14 <std+0x54>
 800ee08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee10:	f000 b9a6 	b.w	800f160 <__retarget_lock_init_recursive>
 800ee14:	bd10      	pop	{r4, pc}
 800ee16:	bf00      	nop
 800ee18:	0800efe1 	.word	0x0800efe1
 800ee1c:	0800f003 	.word	0x0800f003
 800ee20:	0800f03b 	.word	0x0800f03b
 800ee24:	0800f05f 	.word	0x0800f05f
 800ee28:	20001f04 	.word	0x20001f04

0800ee2c <stdio_exit_handler>:
 800ee2c:	4a02      	ldr	r2, [pc, #8]	@ (800ee38 <stdio_exit_handler+0xc>)
 800ee2e:	4903      	ldr	r1, [pc, #12]	@ (800ee3c <stdio_exit_handler+0x10>)
 800ee30:	4803      	ldr	r0, [pc, #12]	@ (800ee40 <stdio_exit_handler+0x14>)
 800ee32:	f000 b869 	b.w	800ef08 <_fwalk_sglue>
 800ee36:	bf00      	nop
 800ee38:	20000108 	.word	0x20000108
 800ee3c:	08010d61 	.word	0x08010d61
 800ee40:	20000118 	.word	0x20000118

0800ee44 <cleanup_stdio>:
 800ee44:	6841      	ldr	r1, [r0, #4]
 800ee46:	4b0c      	ldr	r3, [pc, #48]	@ (800ee78 <cleanup_stdio+0x34>)
 800ee48:	4299      	cmp	r1, r3
 800ee4a:	b510      	push	{r4, lr}
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	d001      	beq.n	800ee54 <cleanup_stdio+0x10>
 800ee50:	f001 ff86 	bl	8010d60 <_fflush_r>
 800ee54:	68a1      	ldr	r1, [r4, #8]
 800ee56:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <cleanup_stdio+0x38>)
 800ee58:	4299      	cmp	r1, r3
 800ee5a:	d002      	beq.n	800ee62 <cleanup_stdio+0x1e>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f001 ff7f 	bl	8010d60 <_fflush_r>
 800ee62:	68e1      	ldr	r1, [r4, #12]
 800ee64:	4b06      	ldr	r3, [pc, #24]	@ (800ee80 <cleanup_stdio+0x3c>)
 800ee66:	4299      	cmp	r1, r3
 800ee68:	d004      	beq.n	800ee74 <cleanup_stdio+0x30>
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee70:	f001 bf76 	b.w	8010d60 <_fflush_r>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	bf00      	nop
 800ee78:	20001f04 	.word	0x20001f04
 800ee7c:	20001f6c 	.word	0x20001f6c
 800ee80:	20001fd4 	.word	0x20001fd4

0800ee84 <global_stdio_init.part.0>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	4b0b      	ldr	r3, [pc, #44]	@ (800eeb4 <global_stdio_init.part.0+0x30>)
 800ee88:	4c0b      	ldr	r4, [pc, #44]	@ (800eeb8 <global_stdio_init.part.0+0x34>)
 800ee8a:	4a0c      	ldr	r2, [pc, #48]	@ (800eebc <global_stdio_init.part.0+0x38>)
 800ee8c:	601a      	str	r2, [r3, #0]
 800ee8e:	4620      	mov	r0, r4
 800ee90:	2200      	movs	r2, #0
 800ee92:	2104      	movs	r1, #4
 800ee94:	f7ff ff94 	bl	800edc0 <std>
 800ee98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	2109      	movs	r1, #9
 800eea0:	f7ff ff8e 	bl	800edc0 <std>
 800eea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eea8:	2202      	movs	r2, #2
 800eeaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eeae:	2112      	movs	r1, #18
 800eeb0:	f7ff bf86 	b.w	800edc0 <std>
 800eeb4:	2000203c 	.word	0x2000203c
 800eeb8:	20001f04 	.word	0x20001f04
 800eebc:	0800ee2d 	.word	0x0800ee2d

0800eec0 <__sfp_lock_acquire>:
 800eec0:	4801      	ldr	r0, [pc, #4]	@ (800eec8 <__sfp_lock_acquire+0x8>)
 800eec2:	f000 b94e 	b.w	800f162 <__retarget_lock_acquire_recursive>
 800eec6:	bf00      	nop
 800eec8:	20002045 	.word	0x20002045

0800eecc <__sfp_lock_release>:
 800eecc:	4801      	ldr	r0, [pc, #4]	@ (800eed4 <__sfp_lock_release+0x8>)
 800eece:	f000 b949 	b.w	800f164 <__retarget_lock_release_recursive>
 800eed2:	bf00      	nop
 800eed4:	20002045 	.word	0x20002045

0800eed8 <__sinit>:
 800eed8:	b510      	push	{r4, lr}
 800eeda:	4604      	mov	r4, r0
 800eedc:	f7ff fff0 	bl	800eec0 <__sfp_lock_acquire>
 800eee0:	6a23      	ldr	r3, [r4, #32]
 800eee2:	b11b      	cbz	r3, 800eeec <__sinit+0x14>
 800eee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eee8:	f7ff bff0 	b.w	800eecc <__sfp_lock_release>
 800eeec:	4b04      	ldr	r3, [pc, #16]	@ (800ef00 <__sinit+0x28>)
 800eeee:	6223      	str	r3, [r4, #32]
 800eef0:	4b04      	ldr	r3, [pc, #16]	@ (800ef04 <__sinit+0x2c>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d1f5      	bne.n	800eee4 <__sinit+0xc>
 800eef8:	f7ff ffc4 	bl	800ee84 <global_stdio_init.part.0>
 800eefc:	e7f2      	b.n	800eee4 <__sinit+0xc>
 800eefe:	bf00      	nop
 800ef00:	0800ee45 	.word	0x0800ee45
 800ef04:	2000203c 	.word	0x2000203c

0800ef08 <_fwalk_sglue>:
 800ef08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef0c:	4607      	mov	r7, r0
 800ef0e:	4688      	mov	r8, r1
 800ef10:	4614      	mov	r4, r2
 800ef12:	2600      	movs	r6, #0
 800ef14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef18:	f1b9 0901 	subs.w	r9, r9, #1
 800ef1c:	d505      	bpl.n	800ef2a <_fwalk_sglue+0x22>
 800ef1e:	6824      	ldr	r4, [r4, #0]
 800ef20:	2c00      	cmp	r4, #0
 800ef22:	d1f7      	bne.n	800ef14 <_fwalk_sglue+0xc>
 800ef24:	4630      	mov	r0, r6
 800ef26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2a:	89ab      	ldrh	r3, [r5, #12]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d907      	bls.n	800ef40 <_fwalk_sglue+0x38>
 800ef30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef34:	3301      	adds	r3, #1
 800ef36:	d003      	beq.n	800ef40 <_fwalk_sglue+0x38>
 800ef38:	4629      	mov	r1, r5
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	47c0      	blx	r8
 800ef3e:	4306      	orrs	r6, r0
 800ef40:	3568      	adds	r5, #104	@ 0x68
 800ef42:	e7e9      	b.n	800ef18 <_fwalk_sglue+0x10>

0800ef44 <iprintf>:
 800ef44:	b40f      	push	{r0, r1, r2, r3}
 800ef46:	b507      	push	{r0, r1, r2, lr}
 800ef48:	4906      	ldr	r1, [pc, #24]	@ (800ef64 <iprintf+0x20>)
 800ef4a:	ab04      	add	r3, sp, #16
 800ef4c:	6808      	ldr	r0, [r1, #0]
 800ef4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef52:	6881      	ldr	r1, [r0, #8]
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	f001 fd67 	bl	8010a28 <_vfiprintf_r>
 800ef5a:	b003      	add	sp, #12
 800ef5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef60:	b004      	add	sp, #16
 800ef62:	4770      	bx	lr
 800ef64:	20000114 	.word	0x20000114

0800ef68 <putchar>:
 800ef68:	4b02      	ldr	r3, [pc, #8]	@ (800ef74 <putchar+0xc>)
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	6818      	ldr	r0, [r3, #0]
 800ef6e:	6882      	ldr	r2, [r0, #8]
 800ef70:	f001 bf1e 	b.w	8010db0 <_putc_r>
 800ef74:	20000114 	.word	0x20000114

0800ef78 <sniprintf>:
 800ef78:	b40c      	push	{r2, r3}
 800ef7a:	b530      	push	{r4, r5, lr}
 800ef7c:	4b17      	ldr	r3, [pc, #92]	@ (800efdc <sniprintf+0x64>)
 800ef7e:	1e0c      	subs	r4, r1, #0
 800ef80:	681d      	ldr	r5, [r3, #0]
 800ef82:	b09d      	sub	sp, #116	@ 0x74
 800ef84:	da08      	bge.n	800ef98 <sniprintf+0x20>
 800ef86:	238b      	movs	r3, #139	@ 0x8b
 800ef88:	602b      	str	r3, [r5, #0]
 800ef8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8e:	b01d      	add	sp, #116	@ 0x74
 800ef90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef94:	b002      	add	sp, #8
 800ef96:	4770      	bx	lr
 800ef98:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ef9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800efa0:	bf14      	ite	ne
 800efa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800efa6:	4623      	moveq	r3, r4
 800efa8:	9304      	str	r3, [sp, #16]
 800efaa:	9307      	str	r3, [sp, #28]
 800efac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efb0:	9002      	str	r0, [sp, #8]
 800efb2:	9006      	str	r0, [sp, #24]
 800efb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efb8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800efba:	ab21      	add	r3, sp, #132	@ 0x84
 800efbc:	a902      	add	r1, sp, #8
 800efbe:	4628      	mov	r0, r5
 800efc0:	9301      	str	r3, [sp, #4]
 800efc2:	f001 fc0b 	bl	80107dc <_svfiprintf_r>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	bfbc      	itt	lt
 800efca:	238b      	movlt	r3, #139	@ 0x8b
 800efcc:	602b      	strlt	r3, [r5, #0]
 800efce:	2c00      	cmp	r4, #0
 800efd0:	d0dd      	beq.n	800ef8e <sniprintf+0x16>
 800efd2:	9b02      	ldr	r3, [sp, #8]
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
 800efd8:	e7d9      	b.n	800ef8e <sniprintf+0x16>
 800efda:	bf00      	nop
 800efdc:	20000114 	.word	0x20000114

0800efe0 <__sread>:
 800efe0:	b510      	push	{r4, lr}
 800efe2:	460c      	mov	r4, r1
 800efe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efe8:	f000 f86c 	bl	800f0c4 <_read_r>
 800efec:	2800      	cmp	r0, #0
 800efee:	bfab      	itete	ge
 800eff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eff2:	89a3      	ldrhlt	r3, [r4, #12]
 800eff4:	181b      	addge	r3, r3, r0
 800eff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800effa:	bfac      	ite	ge
 800effc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800effe:	81a3      	strhlt	r3, [r4, #12]
 800f000:	bd10      	pop	{r4, pc}

0800f002 <__swrite>:
 800f002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f006:	461f      	mov	r7, r3
 800f008:	898b      	ldrh	r3, [r1, #12]
 800f00a:	05db      	lsls	r3, r3, #23
 800f00c:	4605      	mov	r5, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4616      	mov	r6, r2
 800f012:	d505      	bpl.n	800f020 <__swrite+0x1e>
 800f014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f018:	2302      	movs	r3, #2
 800f01a:	2200      	movs	r2, #0
 800f01c:	f000 f840 	bl	800f0a0 <_lseek_r>
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f02a:	81a3      	strh	r3, [r4, #12]
 800f02c:	4632      	mov	r2, r6
 800f02e:	463b      	mov	r3, r7
 800f030:	4628      	mov	r0, r5
 800f032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f036:	f000 b857 	b.w	800f0e8 <_write_r>

0800f03a <__sseek>:
 800f03a:	b510      	push	{r4, lr}
 800f03c:	460c      	mov	r4, r1
 800f03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f042:	f000 f82d 	bl	800f0a0 <_lseek_r>
 800f046:	1c43      	adds	r3, r0, #1
 800f048:	89a3      	ldrh	r3, [r4, #12]
 800f04a:	bf15      	itete	ne
 800f04c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f04e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f056:	81a3      	strheq	r3, [r4, #12]
 800f058:	bf18      	it	ne
 800f05a:	81a3      	strhne	r3, [r4, #12]
 800f05c:	bd10      	pop	{r4, pc}

0800f05e <__sclose>:
 800f05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f062:	f000 b80d 	b.w	800f080 <_close_r>

0800f066 <memset>:
 800f066:	4402      	add	r2, r0
 800f068:	4603      	mov	r3, r0
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d100      	bne.n	800f070 <memset+0xa>
 800f06e:	4770      	bx	lr
 800f070:	f803 1b01 	strb.w	r1, [r3], #1
 800f074:	e7f9      	b.n	800f06a <memset+0x4>
	...

0800f078 <_localeconv_r>:
 800f078:	4800      	ldr	r0, [pc, #0]	@ (800f07c <_localeconv_r+0x4>)
 800f07a:	4770      	bx	lr
 800f07c:	20000254 	.word	0x20000254

0800f080 <_close_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4d06      	ldr	r5, [pc, #24]	@ (800f09c <_close_r+0x1c>)
 800f084:	2300      	movs	r3, #0
 800f086:	4604      	mov	r4, r0
 800f088:	4608      	mov	r0, r1
 800f08a:	602b      	str	r3, [r5, #0]
 800f08c:	f7f2 fc08 	bl	80018a0 <_close>
 800f090:	1c43      	adds	r3, r0, #1
 800f092:	d102      	bne.n	800f09a <_close_r+0x1a>
 800f094:	682b      	ldr	r3, [r5, #0]
 800f096:	b103      	cbz	r3, 800f09a <_close_r+0x1a>
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	bd38      	pop	{r3, r4, r5, pc}
 800f09c:	20002040 	.word	0x20002040

0800f0a0 <_lseek_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4d07      	ldr	r5, [pc, #28]	@ (800f0c0 <_lseek_r+0x20>)
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	4608      	mov	r0, r1
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	602a      	str	r2, [r5, #0]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	f7f2 fc1d 	bl	80018ee <_lseek>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d102      	bne.n	800f0be <_lseek_r+0x1e>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	b103      	cbz	r3, 800f0be <_lseek_r+0x1e>
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	20002040 	.word	0x20002040

0800f0c4 <_read_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4d07      	ldr	r5, [pc, #28]	@ (800f0e4 <_read_r+0x20>)
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	602a      	str	r2, [r5, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f7f2 fbab 	bl	800182e <_read>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_read_r+0x1e>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_read_r+0x1e>
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	20002040 	.word	0x20002040

0800f0e8 <_write_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4d07      	ldr	r5, [pc, #28]	@ (800f108 <_write_r+0x20>)
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	4608      	mov	r0, r1
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	602a      	str	r2, [r5, #0]
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	f7f2 fbb6 	bl	8001868 <_write>
 800f0fc:	1c43      	adds	r3, r0, #1
 800f0fe:	d102      	bne.n	800f106 <_write_r+0x1e>
 800f100:	682b      	ldr	r3, [r5, #0]
 800f102:	b103      	cbz	r3, 800f106 <_write_r+0x1e>
 800f104:	6023      	str	r3, [r4, #0]
 800f106:	bd38      	pop	{r3, r4, r5, pc}
 800f108:	20002040 	.word	0x20002040

0800f10c <__errno>:
 800f10c:	4b01      	ldr	r3, [pc, #4]	@ (800f114 <__errno+0x8>)
 800f10e:	6818      	ldr	r0, [r3, #0]
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	20000114 	.word	0x20000114

0800f118 <__libc_init_array>:
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	4d0d      	ldr	r5, [pc, #52]	@ (800f150 <__libc_init_array+0x38>)
 800f11c:	4c0d      	ldr	r4, [pc, #52]	@ (800f154 <__libc_init_array+0x3c>)
 800f11e:	1b64      	subs	r4, r4, r5
 800f120:	10a4      	asrs	r4, r4, #2
 800f122:	2600      	movs	r6, #0
 800f124:	42a6      	cmp	r6, r4
 800f126:	d109      	bne.n	800f13c <__libc_init_array+0x24>
 800f128:	4d0b      	ldr	r5, [pc, #44]	@ (800f158 <__libc_init_array+0x40>)
 800f12a:	4c0c      	ldr	r4, [pc, #48]	@ (800f15c <__libc_init_array+0x44>)
 800f12c:	f002 f89c 	bl	8011268 <_init>
 800f130:	1b64      	subs	r4, r4, r5
 800f132:	10a4      	asrs	r4, r4, #2
 800f134:	2600      	movs	r6, #0
 800f136:	42a6      	cmp	r6, r4
 800f138:	d105      	bne.n	800f146 <__libc_init_array+0x2e>
 800f13a:	bd70      	pop	{r4, r5, r6, pc}
 800f13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f140:	4798      	blx	r3
 800f142:	3601      	adds	r6, #1
 800f144:	e7ee      	b.n	800f124 <__libc_init_array+0xc>
 800f146:	f855 3b04 	ldr.w	r3, [r5], #4
 800f14a:	4798      	blx	r3
 800f14c:	3601      	adds	r6, #1
 800f14e:	e7f2      	b.n	800f136 <__libc_init_array+0x1e>
 800f150:	08011780 	.word	0x08011780
 800f154:	08011780 	.word	0x08011780
 800f158:	08011780 	.word	0x08011780
 800f15c:	08011784 	.word	0x08011784

0800f160 <__retarget_lock_init_recursive>:
 800f160:	4770      	bx	lr

0800f162 <__retarget_lock_acquire_recursive>:
 800f162:	4770      	bx	lr

0800f164 <__retarget_lock_release_recursive>:
 800f164:	4770      	bx	lr

0800f166 <memcpy>:
 800f166:	440a      	add	r2, r1
 800f168:	4291      	cmp	r1, r2
 800f16a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f16e:	d100      	bne.n	800f172 <memcpy+0xc>
 800f170:	4770      	bx	lr
 800f172:	b510      	push	{r4, lr}
 800f174:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f178:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f17c:	4291      	cmp	r1, r2
 800f17e:	d1f9      	bne.n	800f174 <memcpy+0xe>
 800f180:	bd10      	pop	{r4, pc}

0800f182 <quorem>:
 800f182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f186:	6903      	ldr	r3, [r0, #16]
 800f188:	690c      	ldr	r4, [r1, #16]
 800f18a:	42a3      	cmp	r3, r4
 800f18c:	4607      	mov	r7, r0
 800f18e:	db7e      	blt.n	800f28e <quorem+0x10c>
 800f190:	3c01      	subs	r4, #1
 800f192:	f101 0814 	add.w	r8, r1, #20
 800f196:	00a3      	lsls	r3, r4, #2
 800f198:	f100 0514 	add.w	r5, r0, #20
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f1a2:	9301      	str	r3, [sp, #4]
 800f1a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f1a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f1b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f1b8:	d32e      	bcc.n	800f218 <quorem+0x96>
 800f1ba:	f04f 0a00 	mov.w	sl, #0
 800f1be:	46c4      	mov	ip, r8
 800f1c0:	46ae      	mov	lr, r5
 800f1c2:	46d3      	mov	fp, sl
 800f1c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1c8:	b298      	uxth	r0, r3
 800f1ca:	fb06 a000 	mla	r0, r6, r0, sl
 800f1ce:	0c02      	lsrs	r2, r0, #16
 800f1d0:	0c1b      	lsrs	r3, r3, #16
 800f1d2:	fb06 2303 	mla	r3, r6, r3, r2
 800f1d6:	f8de 2000 	ldr.w	r2, [lr]
 800f1da:	b280      	uxth	r0, r0
 800f1dc:	b292      	uxth	r2, r2
 800f1de:	1a12      	subs	r2, r2, r0
 800f1e0:	445a      	add	r2, fp
 800f1e2:	f8de 0000 	ldr.w	r0, [lr]
 800f1e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f1f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f1f4:	b292      	uxth	r2, r2
 800f1f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f1fa:	45e1      	cmp	r9, ip
 800f1fc:	f84e 2b04 	str.w	r2, [lr], #4
 800f200:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f204:	d2de      	bcs.n	800f1c4 <quorem+0x42>
 800f206:	9b00      	ldr	r3, [sp, #0]
 800f208:	58eb      	ldr	r3, [r5, r3]
 800f20a:	b92b      	cbnz	r3, 800f218 <quorem+0x96>
 800f20c:	9b01      	ldr	r3, [sp, #4]
 800f20e:	3b04      	subs	r3, #4
 800f210:	429d      	cmp	r5, r3
 800f212:	461a      	mov	r2, r3
 800f214:	d32f      	bcc.n	800f276 <quorem+0xf4>
 800f216:	613c      	str	r4, [r7, #16]
 800f218:	4638      	mov	r0, r7
 800f21a:	f001 f97b 	bl	8010514 <__mcmp>
 800f21e:	2800      	cmp	r0, #0
 800f220:	db25      	blt.n	800f26e <quorem+0xec>
 800f222:	4629      	mov	r1, r5
 800f224:	2000      	movs	r0, #0
 800f226:	f858 2b04 	ldr.w	r2, [r8], #4
 800f22a:	f8d1 c000 	ldr.w	ip, [r1]
 800f22e:	fa1f fe82 	uxth.w	lr, r2
 800f232:	fa1f f38c 	uxth.w	r3, ip
 800f236:	eba3 030e 	sub.w	r3, r3, lr
 800f23a:	4403      	add	r3, r0
 800f23c:	0c12      	lsrs	r2, r2, #16
 800f23e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f242:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f246:	b29b      	uxth	r3, r3
 800f248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f24c:	45c1      	cmp	r9, r8
 800f24e:	f841 3b04 	str.w	r3, [r1], #4
 800f252:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f256:	d2e6      	bcs.n	800f226 <quorem+0xa4>
 800f258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f25c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f260:	b922      	cbnz	r2, 800f26c <quorem+0xea>
 800f262:	3b04      	subs	r3, #4
 800f264:	429d      	cmp	r5, r3
 800f266:	461a      	mov	r2, r3
 800f268:	d30b      	bcc.n	800f282 <quorem+0x100>
 800f26a:	613c      	str	r4, [r7, #16]
 800f26c:	3601      	adds	r6, #1
 800f26e:	4630      	mov	r0, r6
 800f270:	b003      	add	sp, #12
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	6812      	ldr	r2, [r2, #0]
 800f278:	3b04      	subs	r3, #4
 800f27a:	2a00      	cmp	r2, #0
 800f27c:	d1cb      	bne.n	800f216 <quorem+0x94>
 800f27e:	3c01      	subs	r4, #1
 800f280:	e7c6      	b.n	800f210 <quorem+0x8e>
 800f282:	6812      	ldr	r2, [r2, #0]
 800f284:	3b04      	subs	r3, #4
 800f286:	2a00      	cmp	r2, #0
 800f288:	d1ef      	bne.n	800f26a <quorem+0xe8>
 800f28a:	3c01      	subs	r4, #1
 800f28c:	e7ea      	b.n	800f264 <quorem+0xe2>
 800f28e:	2000      	movs	r0, #0
 800f290:	e7ee      	b.n	800f270 <quorem+0xee>
 800f292:	0000      	movs	r0, r0
 800f294:	0000      	movs	r0, r0
	...

0800f298 <_dtoa_r>:
 800f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	69c7      	ldr	r7, [r0, #28]
 800f29e:	b099      	sub	sp, #100	@ 0x64
 800f2a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f2a4:	ec55 4b10 	vmov	r4, r5, d0
 800f2a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f2aa:	9109      	str	r1, [sp, #36]	@ 0x24
 800f2ac:	4683      	mov	fp, r0
 800f2ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2b2:	b97f      	cbnz	r7, 800f2d4 <_dtoa_r+0x3c>
 800f2b4:	2010      	movs	r0, #16
 800f2b6:	f000 fdfd 	bl	800feb4 <malloc>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	f8cb 001c 	str.w	r0, [fp, #28]
 800f2c0:	b920      	cbnz	r0, 800f2cc <_dtoa_r+0x34>
 800f2c2:	4ba7      	ldr	r3, [pc, #668]	@ (800f560 <_dtoa_r+0x2c8>)
 800f2c4:	21ef      	movs	r1, #239	@ 0xef
 800f2c6:	48a7      	ldr	r0, [pc, #668]	@ (800f564 <_dtoa_r+0x2cc>)
 800f2c8:	f001 fe64 	bl	8010f94 <__assert_func>
 800f2cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f2d0:	6007      	str	r7, [r0, #0]
 800f2d2:	60c7      	str	r7, [r0, #12]
 800f2d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2d8:	6819      	ldr	r1, [r3, #0]
 800f2da:	b159      	cbz	r1, 800f2f4 <_dtoa_r+0x5c>
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	604a      	str	r2, [r1, #4]
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	4093      	lsls	r3, r2
 800f2e4:	608b      	str	r3, [r1, #8]
 800f2e6:	4658      	mov	r0, fp
 800f2e8:	f000 feda 	bl	80100a0 <_Bfree>
 800f2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	1e2b      	subs	r3, r5, #0
 800f2f6:	bfb9      	ittee	lt
 800f2f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f2fc:	9303      	strlt	r3, [sp, #12]
 800f2fe:	2300      	movge	r3, #0
 800f300:	6033      	strge	r3, [r6, #0]
 800f302:	9f03      	ldr	r7, [sp, #12]
 800f304:	4b98      	ldr	r3, [pc, #608]	@ (800f568 <_dtoa_r+0x2d0>)
 800f306:	bfbc      	itt	lt
 800f308:	2201      	movlt	r2, #1
 800f30a:	6032      	strlt	r2, [r6, #0]
 800f30c:	43bb      	bics	r3, r7
 800f30e:	d112      	bne.n	800f336 <_dtoa_r+0x9e>
 800f310:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f312:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f316:	6013      	str	r3, [r2, #0]
 800f318:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f31c:	4323      	orrs	r3, r4
 800f31e:	f000 854d 	beq.w	800fdbc <_dtoa_r+0xb24>
 800f322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f324:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f57c <_dtoa_r+0x2e4>
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f000 854f 	beq.w	800fdcc <_dtoa_r+0xb34>
 800f32e:	f10a 0303 	add.w	r3, sl, #3
 800f332:	f000 bd49 	b.w	800fdc8 <_dtoa_r+0xb30>
 800f336:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f33a:	2200      	movs	r2, #0
 800f33c:	ec51 0b17 	vmov	r0, r1, d7
 800f340:	2300      	movs	r3, #0
 800f342:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f346:	f7f1 fb97 	bl	8000a78 <__aeabi_dcmpeq>
 800f34a:	4680      	mov	r8, r0
 800f34c:	b158      	cbz	r0, 800f366 <_dtoa_r+0xce>
 800f34e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f350:	2301      	movs	r3, #1
 800f352:	6013      	str	r3, [r2, #0]
 800f354:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f356:	b113      	cbz	r3, 800f35e <_dtoa_r+0xc6>
 800f358:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f35a:	4b84      	ldr	r3, [pc, #528]	@ (800f56c <_dtoa_r+0x2d4>)
 800f35c:	6013      	str	r3, [r2, #0]
 800f35e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f580 <_dtoa_r+0x2e8>
 800f362:	f000 bd33 	b.w	800fdcc <_dtoa_r+0xb34>
 800f366:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f36a:	aa16      	add	r2, sp, #88	@ 0x58
 800f36c:	a917      	add	r1, sp, #92	@ 0x5c
 800f36e:	4658      	mov	r0, fp
 800f370:	f001 f980 	bl	8010674 <__d2b>
 800f374:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f378:	4681      	mov	r9, r0
 800f37a:	2e00      	cmp	r6, #0
 800f37c:	d077      	beq.n	800f46e <_dtoa_r+0x1d6>
 800f37e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f380:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f38c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f390:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f394:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f398:	4619      	mov	r1, r3
 800f39a:	2200      	movs	r2, #0
 800f39c:	4b74      	ldr	r3, [pc, #464]	@ (800f570 <_dtoa_r+0x2d8>)
 800f39e:	f7f0 ff4b 	bl	8000238 <__aeabi_dsub>
 800f3a2:	a369      	add	r3, pc, #420	@ (adr r3, 800f548 <_dtoa_r+0x2b0>)
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f7f1 f8fe 	bl	80005a8 <__aeabi_dmul>
 800f3ac:	a368      	add	r3, pc, #416	@ (adr r3, 800f550 <_dtoa_r+0x2b8>)
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	f7f0 ff43 	bl	800023c <__adddf3>
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	f7f1 f88a 	bl	80004d4 <__aeabi_i2d>
 800f3c0:	a365      	add	r3, pc, #404	@ (adr r3, 800f558 <_dtoa_r+0x2c0>)
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f7f1 f8ef 	bl	80005a8 <__aeabi_dmul>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	4629      	mov	r1, r5
 800f3d2:	f7f0 ff33 	bl	800023c <__adddf3>
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	460d      	mov	r5, r1
 800f3da:	f7f1 fb95 	bl	8000b08 <__aeabi_d2iz>
 800f3de:	2200      	movs	r2, #0
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4620      	mov	r0, r4
 800f3e6:	4629      	mov	r1, r5
 800f3e8:	f7f1 fb50 	bl	8000a8c <__aeabi_dcmplt>
 800f3ec:	b140      	cbz	r0, 800f400 <_dtoa_r+0x168>
 800f3ee:	4638      	mov	r0, r7
 800f3f0:	f7f1 f870 	bl	80004d4 <__aeabi_i2d>
 800f3f4:	4622      	mov	r2, r4
 800f3f6:	462b      	mov	r3, r5
 800f3f8:	f7f1 fb3e 	bl	8000a78 <__aeabi_dcmpeq>
 800f3fc:	b900      	cbnz	r0, 800f400 <_dtoa_r+0x168>
 800f3fe:	3f01      	subs	r7, #1
 800f400:	2f16      	cmp	r7, #22
 800f402:	d851      	bhi.n	800f4a8 <_dtoa_r+0x210>
 800f404:	4b5b      	ldr	r3, [pc, #364]	@ (800f574 <_dtoa_r+0x2dc>)
 800f406:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f40e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f412:	f7f1 fb3b 	bl	8000a8c <__aeabi_dcmplt>
 800f416:	2800      	cmp	r0, #0
 800f418:	d048      	beq.n	800f4ac <_dtoa_r+0x214>
 800f41a:	3f01      	subs	r7, #1
 800f41c:	2300      	movs	r3, #0
 800f41e:	9312      	str	r3, [sp, #72]	@ 0x48
 800f420:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f422:	1b9b      	subs	r3, r3, r6
 800f424:	1e5a      	subs	r2, r3, #1
 800f426:	bf44      	itt	mi
 800f428:	f1c3 0801 	rsbmi	r8, r3, #1
 800f42c:	2300      	movmi	r3, #0
 800f42e:	9208      	str	r2, [sp, #32]
 800f430:	bf54      	ite	pl
 800f432:	f04f 0800 	movpl.w	r8, #0
 800f436:	9308      	strmi	r3, [sp, #32]
 800f438:	2f00      	cmp	r7, #0
 800f43a:	db39      	blt.n	800f4b0 <_dtoa_r+0x218>
 800f43c:	9b08      	ldr	r3, [sp, #32]
 800f43e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f440:	443b      	add	r3, r7
 800f442:	9308      	str	r3, [sp, #32]
 800f444:	2300      	movs	r3, #0
 800f446:	930a      	str	r3, [sp, #40]	@ 0x28
 800f448:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f44a:	2b09      	cmp	r3, #9
 800f44c:	d864      	bhi.n	800f518 <_dtoa_r+0x280>
 800f44e:	2b05      	cmp	r3, #5
 800f450:	bfc4      	itt	gt
 800f452:	3b04      	subgt	r3, #4
 800f454:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f458:	f1a3 0302 	sub.w	r3, r3, #2
 800f45c:	bfcc      	ite	gt
 800f45e:	2400      	movgt	r4, #0
 800f460:	2401      	movle	r4, #1
 800f462:	2b03      	cmp	r3, #3
 800f464:	d863      	bhi.n	800f52e <_dtoa_r+0x296>
 800f466:	e8df f003 	tbb	[pc, r3]
 800f46a:	372a      	.short	0x372a
 800f46c:	5535      	.short	0x5535
 800f46e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f472:	441e      	add	r6, r3
 800f474:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f478:	2b20      	cmp	r3, #32
 800f47a:	bfc1      	itttt	gt
 800f47c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f480:	409f      	lslgt	r7, r3
 800f482:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f486:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f48a:	bfd6      	itet	le
 800f48c:	f1c3 0320 	rsble	r3, r3, #32
 800f490:	ea47 0003 	orrgt.w	r0, r7, r3
 800f494:	fa04 f003 	lslle.w	r0, r4, r3
 800f498:	f7f1 f80c 	bl	80004b4 <__aeabi_ui2d>
 800f49c:	2201      	movs	r2, #1
 800f49e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f4a2:	3e01      	subs	r6, #1
 800f4a4:	9214      	str	r2, [sp, #80]	@ 0x50
 800f4a6:	e777      	b.n	800f398 <_dtoa_r+0x100>
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	e7b8      	b.n	800f41e <_dtoa_r+0x186>
 800f4ac:	9012      	str	r0, [sp, #72]	@ 0x48
 800f4ae:	e7b7      	b.n	800f420 <_dtoa_r+0x188>
 800f4b0:	427b      	negs	r3, r7
 800f4b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	eba8 0807 	sub.w	r8, r8, r7
 800f4ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f4bc:	e7c4      	b.n	800f448 <_dtoa_r+0x1b0>
 800f4be:	2300      	movs	r3, #0
 800f4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	dc35      	bgt.n	800f534 <_dtoa_r+0x29c>
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	9307      	str	r3, [sp, #28]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f4d2:	e00b      	b.n	800f4ec <_dtoa_r+0x254>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e7f3      	b.n	800f4c0 <_dtoa_r+0x228>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f4dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4de:	18fb      	adds	r3, r7, r3
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	9307      	str	r3, [sp, #28]
 800f4e8:	bfb8      	it	lt
 800f4ea:	2301      	movlt	r3, #1
 800f4ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f4f0:	2100      	movs	r1, #0
 800f4f2:	2204      	movs	r2, #4
 800f4f4:	f102 0514 	add.w	r5, r2, #20
 800f4f8:	429d      	cmp	r5, r3
 800f4fa:	d91f      	bls.n	800f53c <_dtoa_r+0x2a4>
 800f4fc:	6041      	str	r1, [r0, #4]
 800f4fe:	4658      	mov	r0, fp
 800f500:	f000 fd8e 	bl	8010020 <_Balloc>
 800f504:	4682      	mov	sl, r0
 800f506:	2800      	cmp	r0, #0
 800f508:	d13c      	bne.n	800f584 <_dtoa_r+0x2ec>
 800f50a:	4b1b      	ldr	r3, [pc, #108]	@ (800f578 <_dtoa_r+0x2e0>)
 800f50c:	4602      	mov	r2, r0
 800f50e:	f240 11af 	movw	r1, #431	@ 0x1af
 800f512:	e6d8      	b.n	800f2c6 <_dtoa_r+0x2e>
 800f514:	2301      	movs	r3, #1
 800f516:	e7e0      	b.n	800f4da <_dtoa_r+0x242>
 800f518:	2401      	movs	r4, #1
 800f51a:	2300      	movs	r3, #0
 800f51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f51e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f520:	f04f 33ff 	mov.w	r3, #4294967295
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	9307      	str	r3, [sp, #28]
 800f528:	2200      	movs	r2, #0
 800f52a:	2312      	movs	r3, #18
 800f52c:	e7d0      	b.n	800f4d0 <_dtoa_r+0x238>
 800f52e:	2301      	movs	r3, #1
 800f530:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f532:	e7f5      	b.n	800f520 <_dtoa_r+0x288>
 800f534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f536:	9300      	str	r3, [sp, #0]
 800f538:	9307      	str	r3, [sp, #28]
 800f53a:	e7d7      	b.n	800f4ec <_dtoa_r+0x254>
 800f53c:	3101      	adds	r1, #1
 800f53e:	0052      	lsls	r2, r2, #1
 800f540:	e7d8      	b.n	800f4f4 <_dtoa_r+0x25c>
 800f542:	bf00      	nop
 800f544:	f3af 8000 	nop.w
 800f548:	636f4361 	.word	0x636f4361
 800f54c:	3fd287a7 	.word	0x3fd287a7
 800f550:	8b60c8b3 	.word	0x8b60c8b3
 800f554:	3fc68a28 	.word	0x3fc68a28
 800f558:	509f79fb 	.word	0x509f79fb
 800f55c:	3fd34413 	.word	0x3fd34413
 800f560:	08011449 	.word	0x08011449
 800f564:	08011460 	.word	0x08011460
 800f568:	7ff00000 	.word	0x7ff00000
 800f56c:	08011419 	.word	0x08011419
 800f570:	3ff80000 	.word	0x3ff80000
 800f574:	08011558 	.word	0x08011558
 800f578:	080114b8 	.word	0x080114b8
 800f57c:	08011445 	.word	0x08011445
 800f580:	08011418 	.word	0x08011418
 800f584:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f588:	6018      	str	r0, [r3, #0]
 800f58a:	9b07      	ldr	r3, [sp, #28]
 800f58c:	2b0e      	cmp	r3, #14
 800f58e:	f200 80a4 	bhi.w	800f6da <_dtoa_r+0x442>
 800f592:	2c00      	cmp	r4, #0
 800f594:	f000 80a1 	beq.w	800f6da <_dtoa_r+0x442>
 800f598:	2f00      	cmp	r7, #0
 800f59a:	dd33      	ble.n	800f604 <_dtoa_r+0x36c>
 800f59c:	4bad      	ldr	r3, [pc, #692]	@ (800f854 <_dtoa_r+0x5bc>)
 800f59e:	f007 020f 	and.w	r2, r7, #15
 800f5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5a6:	ed93 7b00 	vldr	d7, [r3]
 800f5aa:	05f8      	lsls	r0, r7, #23
 800f5ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f5b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f5b4:	d516      	bpl.n	800f5e4 <_dtoa_r+0x34c>
 800f5b6:	4ba8      	ldr	r3, [pc, #672]	@ (800f858 <_dtoa_r+0x5c0>)
 800f5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f5c0:	f7f1 f91c 	bl	80007fc <__aeabi_ddiv>
 800f5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5c8:	f004 040f 	and.w	r4, r4, #15
 800f5cc:	2603      	movs	r6, #3
 800f5ce:	4da2      	ldr	r5, [pc, #648]	@ (800f858 <_dtoa_r+0x5c0>)
 800f5d0:	b954      	cbnz	r4, 800f5e8 <_dtoa_r+0x350>
 800f5d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5da:	f7f1 f90f 	bl	80007fc <__aeabi_ddiv>
 800f5de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5e2:	e028      	b.n	800f636 <_dtoa_r+0x39e>
 800f5e4:	2602      	movs	r6, #2
 800f5e6:	e7f2      	b.n	800f5ce <_dtoa_r+0x336>
 800f5e8:	07e1      	lsls	r1, r4, #31
 800f5ea:	d508      	bpl.n	800f5fe <_dtoa_r+0x366>
 800f5ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5f4:	f7f0 ffd8 	bl	80005a8 <__aeabi_dmul>
 800f5f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5fc:	3601      	adds	r6, #1
 800f5fe:	1064      	asrs	r4, r4, #1
 800f600:	3508      	adds	r5, #8
 800f602:	e7e5      	b.n	800f5d0 <_dtoa_r+0x338>
 800f604:	f000 80d2 	beq.w	800f7ac <_dtoa_r+0x514>
 800f608:	427c      	negs	r4, r7
 800f60a:	4b92      	ldr	r3, [pc, #584]	@ (800f854 <_dtoa_r+0x5bc>)
 800f60c:	4d92      	ldr	r5, [pc, #584]	@ (800f858 <_dtoa_r+0x5c0>)
 800f60e:	f004 020f 	and.w	r2, r4, #15
 800f612:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f61e:	f7f0 ffc3 	bl	80005a8 <__aeabi_dmul>
 800f622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f626:	1124      	asrs	r4, r4, #4
 800f628:	2300      	movs	r3, #0
 800f62a:	2602      	movs	r6, #2
 800f62c:	2c00      	cmp	r4, #0
 800f62e:	f040 80b2 	bne.w	800f796 <_dtoa_r+0x4fe>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d1d3      	bne.n	800f5de <_dtoa_r+0x346>
 800f636:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f638:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f000 80b7 	beq.w	800f7b0 <_dtoa_r+0x518>
 800f642:	4b86      	ldr	r3, [pc, #536]	@ (800f85c <_dtoa_r+0x5c4>)
 800f644:	2200      	movs	r2, #0
 800f646:	4620      	mov	r0, r4
 800f648:	4629      	mov	r1, r5
 800f64a:	f7f1 fa1f 	bl	8000a8c <__aeabi_dcmplt>
 800f64e:	2800      	cmp	r0, #0
 800f650:	f000 80ae 	beq.w	800f7b0 <_dtoa_r+0x518>
 800f654:	9b07      	ldr	r3, [sp, #28]
 800f656:	2b00      	cmp	r3, #0
 800f658:	f000 80aa 	beq.w	800f7b0 <_dtoa_r+0x518>
 800f65c:	9b00      	ldr	r3, [sp, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	dd37      	ble.n	800f6d2 <_dtoa_r+0x43a>
 800f662:	1e7b      	subs	r3, r7, #1
 800f664:	9304      	str	r3, [sp, #16]
 800f666:	4620      	mov	r0, r4
 800f668:	4b7d      	ldr	r3, [pc, #500]	@ (800f860 <_dtoa_r+0x5c8>)
 800f66a:	2200      	movs	r2, #0
 800f66c:	4629      	mov	r1, r5
 800f66e:	f7f0 ff9b 	bl	80005a8 <__aeabi_dmul>
 800f672:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f676:	9c00      	ldr	r4, [sp, #0]
 800f678:	3601      	adds	r6, #1
 800f67a:	4630      	mov	r0, r6
 800f67c:	f7f0 ff2a 	bl	80004d4 <__aeabi_i2d>
 800f680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f684:	f7f0 ff90 	bl	80005a8 <__aeabi_dmul>
 800f688:	4b76      	ldr	r3, [pc, #472]	@ (800f864 <_dtoa_r+0x5cc>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	f7f0 fdd6 	bl	800023c <__adddf3>
 800f690:	4605      	mov	r5, r0
 800f692:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f696:	2c00      	cmp	r4, #0
 800f698:	f040 808d 	bne.w	800f7b6 <_dtoa_r+0x51e>
 800f69c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a0:	4b71      	ldr	r3, [pc, #452]	@ (800f868 <_dtoa_r+0x5d0>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f7f0 fdc8 	bl	8000238 <__aeabi_dsub>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6b0:	462a      	mov	r2, r5
 800f6b2:	4633      	mov	r3, r6
 800f6b4:	f7f1 fa08 	bl	8000ac8 <__aeabi_dcmpgt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f040 828b 	bne.w	800fbd4 <_dtoa_r+0x93c>
 800f6be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6c2:	462a      	mov	r2, r5
 800f6c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f6c8:	f7f1 f9e0 	bl	8000a8c <__aeabi_dcmplt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	f040 8128 	bne.w	800f922 <_dtoa_r+0x68a>
 800f6d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f6d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f6da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f2c0 815a 	blt.w	800f996 <_dtoa_r+0x6fe>
 800f6e2:	2f0e      	cmp	r7, #14
 800f6e4:	f300 8157 	bgt.w	800f996 <_dtoa_r+0x6fe>
 800f6e8:	4b5a      	ldr	r3, [pc, #360]	@ (800f854 <_dtoa_r+0x5bc>)
 800f6ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6ee:	ed93 7b00 	vldr	d7, [r3]
 800f6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	ed8d 7b00 	vstr	d7, [sp]
 800f6fa:	da03      	bge.n	800f704 <_dtoa_r+0x46c>
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	f340 8101 	ble.w	800f906 <_dtoa_r+0x66e>
 800f704:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f708:	4656      	mov	r6, sl
 800f70a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f70e:	4620      	mov	r0, r4
 800f710:	4629      	mov	r1, r5
 800f712:	f7f1 f873 	bl	80007fc <__aeabi_ddiv>
 800f716:	f7f1 f9f7 	bl	8000b08 <__aeabi_d2iz>
 800f71a:	4680      	mov	r8, r0
 800f71c:	f7f0 feda 	bl	80004d4 <__aeabi_i2d>
 800f720:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f724:	f7f0 ff40 	bl	80005a8 <__aeabi_dmul>
 800f728:	4602      	mov	r2, r0
 800f72a:	460b      	mov	r3, r1
 800f72c:	4620      	mov	r0, r4
 800f72e:	4629      	mov	r1, r5
 800f730:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f734:	f7f0 fd80 	bl	8000238 <__aeabi_dsub>
 800f738:	f806 4b01 	strb.w	r4, [r6], #1
 800f73c:	9d07      	ldr	r5, [sp, #28]
 800f73e:	eba6 040a 	sub.w	r4, r6, sl
 800f742:	42a5      	cmp	r5, r4
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	f040 8117 	bne.w	800f97a <_dtoa_r+0x6e2>
 800f74c:	f7f0 fd76 	bl	800023c <__adddf3>
 800f750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f754:	4604      	mov	r4, r0
 800f756:	460d      	mov	r5, r1
 800f758:	f7f1 f9b6 	bl	8000ac8 <__aeabi_dcmpgt>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	f040 80f9 	bne.w	800f954 <_dtoa_r+0x6bc>
 800f762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f766:	4620      	mov	r0, r4
 800f768:	4629      	mov	r1, r5
 800f76a:	f7f1 f985 	bl	8000a78 <__aeabi_dcmpeq>
 800f76e:	b118      	cbz	r0, 800f778 <_dtoa_r+0x4e0>
 800f770:	f018 0f01 	tst.w	r8, #1
 800f774:	f040 80ee 	bne.w	800f954 <_dtoa_r+0x6bc>
 800f778:	4649      	mov	r1, r9
 800f77a:	4658      	mov	r0, fp
 800f77c:	f000 fc90 	bl	80100a0 <_Bfree>
 800f780:	2300      	movs	r3, #0
 800f782:	7033      	strb	r3, [r6, #0]
 800f784:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f786:	3701      	adds	r7, #1
 800f788:	601f      	str	r7, [r3, #0]
 800f78a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 831d 	beq.w	800fdcc <_dtoa_r+0xb34>
 800f792:	601e      	str	r6, [r3, #0]
 800f794:	e31a      	b.n	800fdcc <_dtoa_r+0xb34>
 800f796:	07e2      	lsls	r2, r4, #31
 800f798:	d505      	bpl.n	800f7a6 <_dtoa_r+0x50e>
 800f79a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f79e:	f7f0 ff03 	bl	80005a8 <__aeabi_dmul>
 800f7a2:	3601      	adds	r6, #1
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	1064      	asrs	r4, r4, #1
 800f7a8:	3508      	adds	r5, #8
 800f7aa:	e73f      	b.n	800f62c <_dtoa_r+0x394>
 800f7ac:	2602      	movs	r6, #2
 800f7ae:	e742      	b.n	800f636 <_dtoa_r+0x39e>
 800f7b0:	9c07      	ldr	r4, [sp, #28]
 800f7b2:	9704      	str	r7, [sp, #16]
 800f7b4:	e761      	b.n	800f67a <_dtoa_r+0x3e2>
 800f7b6:	4b27      	ldr	r3, [pc, #156]	@ (800f854 <_dtoa_r+0x5bc>)
 800f7b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f7ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f7c2:	4454      	add	r4, sl
 800f7c4:	2900      	cmp	r1, #0
 800f7c6:	d053      	beq.n	800f870 <_dtoa_r+0x5d8>
 800f7c8:	4928      	ldr	r1, [pc, #160]	@ (800f86c <_dtoa_r+0x5d4>)
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	f7f1 f816 	bl	80007fc <__aeabi_ddiv>
 800f7d0:	4633      	mov	r3, r6
 800f7d2:	462a      	mov	r2, r5
 800f7d4:	f7f0 fd30 	bl	8000238 <__aeabi_dsub>
 800f7d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f7dc:	4656      	mov	r6, sl
 800f7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7e2:	f7f1 f991 	bl	8000b08 <__aeabi_d2iz>
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	f7f0 fe74 	bl	80004d4 <__aeabi_i2d>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7f4:	f7f0 fd20 	bl	8000238 <__aeabi_dsub>
 800f7f8:	3530      	adds	r5, #48	@ 0x30
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f802:	f806 5b01 	strb.w	r5, [r6], #1
 800f806:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f80a:	f7f1 f93f 	bl	8000a8c <__aeabi_dcmplt>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d171      	bne.n	800f8f6 <_dtoa_r+0x65e>
 800f812:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f816:	4911      	ldr	r1, [pc, #68]	@ (800f85c <_dtoa_r+0x5c4>)
 800f818:	2000      	movs	r0, #0
 800f81a:	f7f0 fd0d 	bl	8000238 <__aeabi_dsub>
 800f81e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f822:	f7f1 f933 	bl	8000a8c <__aeabi_dcmplt>
 800f826:	2800      	cmp	r0, #0
 800f828:	f040 8095 	bne.w	800f956 <_dtoa_r+0x6be>
 800f82c:	42a6      	cmp	r6, r4
 800f82e:	f43f af50 	beq.w	800f6d2 <_dtoa_r+0x43a>
 800f832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f836:	4b0a      	ldr	r3, [pc, #40]	@ (800f860 <_dtoa_r+0x5c8>)
 800f838:	2200      	movs	r2, #0
 800f83a:	f7f0 feb5 	bl	80005a8 <__aeabi_dmul>
 800f83e:	4b08      	ldr	r3, [pc, #32]	@ (800f860 <_dtoa_r+0x5c8>)
 800f840:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f844:	2200      	movs	r2, #0
 800f846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f84a:	f7f0 fead 	bl	80005a8 <__aeabi_dmul>
 800f84e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f852:	e7c4      	b.n	800f7de <_dtoa_r+0x546>
 800f854:	08011558 	.word	0x08011558
 800f858:	08011530 	.word	0x08011530
 800f85c:	3ff00000 	.word	0x3ff00000
 800f860:	40240000 	.word	0x40240000
 800f864:	401c0000 	.word	0x401c0000
 800f868:	40140000 	.word	0x40140000
 800f86c:	3fe00000 	.word	0x3fe00000
 800f870:	4631      	mov	r1, r6
 800f872:	4628      	mov	r0, r5
 800f874:	f7f0 fe98 	bl	80005a8 <__aeabi_dmul>
 800f878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f87c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f87e:	4656      	mov	r6, sl
 800f880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f884:	f7f1 f940 	bl	8000b08 <__aeabi_d2iz>
 800f888:	4605      	mov	r5, r0
 800f88a:	f7f0 fe23 	bl	80004d4 <__aeabi_i2d>
 800f88e:	4602      	mov	r2, r0
 800f890:	460b      	mov	r3, r1
 800f892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f896:	f7f0 fccf 	bl	8000238 <__aeabi_dsub>
 800f89a:	3530      	adds	r5, #48	@ 0x30
 800f89c:	f806 5b01 	strb.w	r5, [r6], #1
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	42a6      	cmp	r6, r4
 800f8a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8aa:	f04f 0200 	mov.w	r2, #0
 800f8ae:	d124      	bne.n	800f8fa <_dtoa_r+0x662>
 800f8b0:	4bac      	ldr	r3, [pc, #688]	@ (800fb64 <_dtoa_r+0x8cc>)
 800f8b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f8b6:	f7f0 fcc1 	bl	800023c <__adddf3>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8c2:	f7f1 f901 	bl	8000ac8 <__aeabi_dcmpgt>
 800f8c6:	2800      	cmp	r0, #0
 800f8c8:	d145      	bne.n	800f956 <_dtoa_r+0x6be>
 800f8ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f8ce:	49a5      	ldr	r1, [pc, #660]	@ (800fb64 <_dtoa_r+0x8cc>)
 800f8d0:	2000      	movs	r0, #0
 800f8d2:	f7f0 fcb1 	bl	8000238 <__aeabi_dsub>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	460b      	mov	r3, r1
 800f8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8de:	f7f1 f8d5 	bl	8000a8c <__aeabi_dcmplt>
 800f8e2:	2800      	cmp	r0, #0
 800f8e4:	f43f aef5 	beq.w	800f6d2 <_dtoa_r+0x43a>
 800f8e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f8ea:	1e73      	subs	r3, r6, #1
 800f8ec:	9315      	str	r3, [sp, #84]	@ 0x54
 800f8ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f8f2:	2b30      	cmp	r3, #48	@ 0x30
 800f8f4:	d0f8      	beq.n	800f8e8 <_dtoa_r+0x650>
 800f8f6:	9f04      	ldr	r7, [sp, #16]
 800f8f8:	e73e      	b.n	800f778 <_dtoa_r+0x4e0>
 800f8fa:	4b9b      	ldr	r3, [pc, #620]	@ (800fb68 <_dtoa_r+0x8d0>)
 800f8fc:	f7f0 fe54 	bl	80005a8 <__aeabi_dmul>
 800f900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f904:	e7bc      	b.n	800f880 <_dtoa_r+0x5e8>
 800f906:	d10c      	bne.n	800f922 <_dtoa_r+0x68a>
 800f908:	4b98      	ldr	r3, [pc, #608]	@ (800fb6c <_dtoa_r+0x8d4>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f910:	f7f0 fe4a 	bl	80005a8 <__aeabi_dmul>
 800f914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f918:	f7f1 f8cc 	bl	8000ab4 <__aeabi_dcmpge>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	f000 8157 	beq.w	800fbd0 <_dtoa_r+0x938>
 800f922:	2400      	movs	r4, #0
 800f924:	4625      	mov	r5, r4
 800f926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f928:	43db      	mvns	r3, r3
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	4656      	mov	r6, sl
 800f92e:	2700      	movs	r7, #0
 800f930:	4621      	mov	r1, r4
 800f932:	4658      	mov	r0, fp
 800f934:	f000 fbb4 	bl	80100a0 <_Bfree>
 800f938:	2d00      	cmp	r5, #0
 800f93a:	d0dc      	beq.n	800f8f6 <_dtoa_r+0x65e>
 800f93c:	b12f      	cbz	r7, 800f94a <_dtoa_r+0x6b2>
 800f93e:	42af      	cmp	r7, r5
 800f940:	d003      	beq.n	800f94a <_dtoa_r+0x6b2>
 800f942:	4639      	mov	r1, r7
 800f944:	4658      	mov	r0, fp
 800f946:	f000 fbab 	bl	80100a0 <_Bfree>
 800f94a:	4629      	mov	r1, r5
 800f94c:	4658      	mov	r0, fp
 800f94e:	f000 fba7 	bl	80100a0 <_Bfree>
 800f952:	e7d0      	b.n	800f8f6 <_dtoa_r+0x65e>
 800f954:	9704      	str	r7, [sp, #16]
 800f956:	4633      	mov	r3, r6
 800f958:	461e      	mov	r6, r3
 800f95a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f95e:	2a39      	cmp	r2, #57	@ 0x39
 800f960:	d107      	bne.n	800f972 <_dtoa_r+0x6da>
 800f962:	459a      	cmp	sl, r3
 800f964:	d1f8      	bne.n	800f958 <_dtoa_r+0x6c0>
 800f966:	9a04      	ldr	r2, [sp, #16]
 800f968:	3201      	adds	r2, #1
 800f96a:	9204      	str	r2, [sp, #16]
 800f96c:	2230      	movs	r2, #48	@ 0x30
 800f96e:	f88a 2000 	strb.w	r2, [sl]
 800f972:	781a      	ldrb	r2, [r3, #0]
 800f974:	3201      	adds	r2, #1
 800f976:	701a      	strb	r2, [r3, #0]
 800f978:	e7bd      	b.n	800f8f6 <_dtoa_r+0x65e>
 800f97a:	4b7b      	ldr	r3, [pc, #492]	@ (800fb68 <_dtoa_r+0x8d0>)
 800f97c:	2200      	movs	r2, #0
 800f97e:	f7f0 fe13 	bl	80005a8 <__aeabi_dmul>
 800f982:	2200      	movs	r2, #0
 800f984:	2300      	movs	r3, #0
 800f986:	4604      	mov	r4, r0
 800f988:	460d      	mov	r5, r1
 800f98a:	f7f1 f875 	bl	8000a78 <__aeabi_dcmpeq>
 800f98e:	2800      	cmp	r0, #0
 800f990:	f43f aebb 	beq.w	800f70a <_dtoa_r+0x472>
 800f994:	e6f0      	b.n	800f778 <_dtoa_r+0x4e0>
 800f996:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f998:	2a00      	cmp	r2, #0
 800f99a:	f000 80db 	beq.w	800fb54 <_dtoa_r+0x8bc>
 800f99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9a0:	2a01      	cmp	r2, #1
 800f9a2:	f300 80bf 	bgt.w	800fb24 <_dtoa_r+0x88c>
 800f9a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f9a8:	2a00      	cmp	r2, #0
 800f9aa:	f000 80b7 	beq.w	800fb1c <_dtoa_r+0x884>
 800f9ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f9b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f9b4:	4646      	mov	r6, r8
 800f9b6:	9a08      	ldr	r2, [sp, #32]
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	441a      	add	r2, r3
 800f9bc:	4658      	mov	r0, fp
 800f9be:	4498      	add	r8, r3
 800f9c0:	9208      	str	r2, [sp, #32]
 800f9c2:	f000 fc21 	bl	8010208 <__i2b>
 800f9c6:	4605      	mov	r5, r0
 800f9c8:	b15e      	cbz	r6, 800f9e2 <_dtoa_r+0x74a>
 800f9ca:	9b08      	ldr	r3, [sp, #32]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	dd08      	ble.n	800f9e2 <_dtoa_r+0x74a>
 800f9d0:	42b3      	cmp	r3, r6
 800f9d2:	9a08      	ldr	r2, [sp, #32]
 800f9d4:	bfa8      	it	ge
 800f9d6:	4633      	movge	r3, r6
 800f9d8:	eba8 0803 	sub.w	r8, r8, r3
 800f9dc:	1af6      	subs	r6, r6, r3
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	9308      	str	r3, [sp, #32]
 800f9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e4:	b1f3      	cbz	r3, 800fa24 <_dtoa_r+0x78c>
 800f9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f000 80b7 	beq.w	800fb5c <_dtoa_r+0x8c4>
 800f9ee:	b18c      	cbz	r4, 800fa14 <_dtoa_r+0x77c>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	4622      	mov	r2, r4
 800f9f4:	4658      	mov	r0, fp
 800f9f6:	f000 fcc7 	bl	8010388 <__pow5mult>
 800f9fa:	464a      	mov	r2, r9
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	4605      	mov	r5, r0
 800fa00:	4658      	mov	r0, fp
 800fa02:	f000 fc17 	bl	8010234 <__multiply>
 800fa06:	4649      	mov	r1, r9
 800fa08:	9004      	str	r0, [sp, #16]
 800fa0a:	4658      	mov	r0, fp
 800fa0c:	f000 fb48 	bl	80100a0 <_Bfree>
 800fa10:	9b04      	ldr	r3, [sp, #16]
 800fa12:	4699      	mov	r9, r3
 800fa14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa16:	1b1a      	subs	r2, r3, r4
 800fa18:	d004      	beq.n	800fa24 <_dtoa_r+0x78c>
 800fa1a:	4649      	mov	r1, r9
 800fa1c:	4658      	mov	r0, fp
 800fa1e:	f000 fcb3 	bl	8010388 <__pow5mult>
 800fa22:	4681      	mov	r9, r0
 800fa24:	2101      	movs	r1, #1
 800fa26:	4658      	mov	r0, fp
 800fa28:	f000 fbee 	bl	8010208 <__i2b>
 800fa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa2e:	4604      	mov	r4, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f000 81cf 	beq.w	800fdd4 <_dtoa_r+0xb3c>
 800fa36:	461a      	mov	r2, r3
 800fa38:	4601      	mov	r1, r0
 800fa3a:	4658      	mov	r0, fp
 800fa3c:	f000 fca4 	bl	8010388 <__pow5mult>
 800fa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	4604      	mov	r4, r0
 800fa46:	f300 8095 	bgt.w	800fb74 <_dtoa_r+0x8dc>
 800fa4a:	9b02      	ldr	r3, [sp, #8]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f040 8087 	bne.w	800fb60 <_dtoa_r+0x8c8>
 800fa52:	9b03      	ldr	r3, [sp, #12]
 800fa54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f040 8089 	bne.w	800fb70 <_dtoa_r+0x8d8>
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fa64:	0d1b      	lsrs	r3, r3, #20
 800fa66:	051b      	lsls	r3, r3, #20
 800fa68:	b12b      	cbz	r3, 800fa76 <_dtoa_r+0x7de>
 800fa6a:	9b08      	ldr	r3, [sp, #32]
 800fa6c:	3301      	adds	r3, #1
 800fa6e:	9308      	str	r3, [sp, #32]
 800fa70:	f108 0801 	add.w	r8, r8, #1
 800fa74:	2301      	movs	r3, #1
 800fa76:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f000 81b0 	beq.w	800fde0 <_dtoa_r+0xb48>
 800fa80:	6923      	ldr	r3, [r4, #16]
 800fa82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fa86:	6918      	ldr	r0, [r3, #16]
 800fa88:	f000 fb72 	bl	8010170 <__hi0bits>
 800fa8c:	f1c0 0020 	rsb	r0, r0, #32
 800fa90:	9b08      	ldr	r3, [sp, #32]
 800fa92:	4418      	add	r0, r3
 800fa94:	f010 001f 	ands.w	r0, r0, #31
 800fa98:	d077      	beq.n	800fb8a <_dtoa_r+0x8f2>
 800fa9a:	f1c0 0320 	rsb	r3, r0, #32
 800fa9e:	2b04      	cmp	r3, #4
 800faa0:	dd6b      	ble.n	800fb7a <_dtoa_r+0x8e2>
 800faa2:	9b08      	ldr	r3, [sp, #32]
 800faa4:	f1c0 001c 	rsb	r0, r0, #28
 800faa8:	4403      	add	r3, r0
 800faaa:	4480      	add	r8, r0
 800faac:	4406      	add	r6, r0
 800faae:	9308      	str	r3, [sp, #32]
 800fab0:	f1b8 0f00 	cmp.w	r8, #0
 800fab4:	dd05      	ble.n	800fac2 <_dtoa_r+0x82a>
 800fab6:	4649      	mov	r1, r9
 800fab8:	4642      	mov	r2, r8
 800faba:	4658      	mov	r0, fp
 800fabc:	f000 fcbe 	bl	801043c <__lshift>
 800fac0:	4681      	mov	r9, r0
 800fac2:	9b08      	ldr	r3, [sp, #32]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd05      	ble.n	800fad4 <_dtoa_r+0x83c>
 800fac8:	4621      	mov	r1, r4
 800faca:	461a      	mov	r2, r3
 800facc:	4658      	mov	r0, fp
 800face:	f000 fcb5 	bl	801043c <__lshift>
 800fad2:	4604      	mov	r4, r0
 800fad4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d059      	beq.n	800fb8e <_dtoa_r+0x8f6>
 800fada:	4621      	mov	r1, r4
 800fadc:	4648      	mov	r0, r9
 800fade:	f000 fd19 	bl	8010514 <__mcmp>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	da53      	bge.n	800fb8e <_dtoa_r+0x8f6>
 800fae6:	1e7b      	subs	r3, r7, #1
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	4649      	mov	r1, r9
 800faec:	2300      	movs	r3, #0
 800faee:	220a      	movs	r2, #10
 800faf0:	4658      	mov	r0, fp
 800faf2:	f000 faf7 	bl	80100e4 <__multadd>
 800faf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800faf8:	4681      	mov	r9, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 8172 	beq.w	800fde4 <_dtoa_r+0xb4c>
 800fb00:	2300      	movs	r3, #0
 800fb02:	4629      	mov	r1, r5
 800fb04:	220a      	movs	r2, #10
 800fb06:	4658      	mov	r0, fp
 800fb08:	f000 faec 	bl	80100e4 <__multadd>
 800fb0c:	9b00      	ldr	r3, [sp, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	4605      	mov	r5, r0
 800fb12:	dc67      	bgt.n	800fbe4 <_dtoa_r+0x94c>
 800fb14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb16:	2b02      	cmp	r3, #2
 800fb18:	dc41      	bgt.n	800fb9e <_dtoa_r+0x906>
 800fb1a:	e063      	b.n	800fbe4 <_dtoa_r+0x94c>
 800fb1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fb1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fb22:	e746      	b.n	800f9b2 <_dtoa_r+0x71a>
 800fb24:	9b07      	ldr	r3, [sp, #28]
 800fb26:	1e5c      	subs	r4, r3, #1
 800fb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb2a:	42a3      	cmp	r3, r4
 800fb2c:	bfbf      	itttt	lt
 800fb2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fb30:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fb32:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fb34:	1ae3      	sublt	r3, r4, r3
 800fb36:	bfb4      	ite	lt
 800fb38:	18d2      	addlt	r2, r2, r3
 800fb3a:	1b1c      	subge	r4, r3, r4
 800fb3c:	9b07      	ldr	r3, [sp, #28]
 800fb3e:	bfbc      	itt	lt
 800fb40:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fb42:	2400      	movlt	r4, #0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	bfb5      	itete	lt
 800fb48:	eba8 0603 	sublt.w	r6, r8, r3
 800fb4c:	9b07      	ldrge	r3, [sp, #28]
 800fb4e:	2300      	movlt	r3, #0
 800fb50:	4646      	movge	r6, r8
 800fb52:	e730      	b.n	800f9b6 <_dtoa_r+0x71e>
 800fb54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb56:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fb58:	4646      	mov	r6, r8
 800fb5a:	e735      	b.n	800f9c8 <_dtoa_r+0x730>
 800fb5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb5e:	e75c      	b.n	800fa1a <_dtoa_r+0x782>
 800fb60:	2300      	movs	r3, #0
 800fb62:	e788      	b.n	800fa76 <_dtoa_r+0x7de>
 800fb64:	3fe00000 	.word	0x3fe00000
 800fb68:	40240000 	.word	0x40240000
 800fb6c:	40140000 	.word	0x40140000
 800fb70:	9b02      	ldr	r3, [sp, #8]
 800fb72:	e780      	b.n	800fa76 <_dtoa_r+0x7de>
 800fb74:	2300      	movs	r3, #0
 800fb76:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb78:	e782      	b.n	800fa80 <_dtoa_r+0x7e8>
 800fb7a:	d099      	beq.n	800fab0 <_dtoa_r+0x818>
 800fb7c:	9a08      	ldr	r2, [sp, #32]
 800fb7e:	331c      	adds	r3, #28
 800fb80:	441a      	add	r2, r3
 800fb82:	4498      	add	r8, r3
 800fb84:	441e      	add	r6, r3
 800fb86:	9208      	str	r2, [sp, #32]
 800fb88:	e792      	b.n	800fab0 <_dtoa_r+0x818>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	e7f6      	b.n	800fb7c <_dtoa_r+0x8e4>
 800fb8e:	9b07      	ldr	r3, [sp, #28]
 800fb90:	9704      	str	r7, [sp, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	dc20      	bgt.n	800fbd8 <_dtoa_r+0x940>
 800fb96:	9300      	str	r3, [sp, #0]
 800fb98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	dd1e      	ble.n	800fbdc <_dtoa_r+0x944>
 800fb9e:	9b00      	ldr	r3, [sp, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	f47f aec0 	bne.w	800f926 <_dtoa_r+0x68e>
 800fba6:	4621      	mov	r1, r4
 800fba8:	2205      	movs	r2, #5
 800fbaa:	4658      	mov	r0, fp
 800fbac:	f000 fa9a 	bl	80100e4 <__multadd>
 800fbb0:	4601      	mov	r1, r0
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4648      	mov	r0, r9
 800fbb6:	f000 fcad 	bl	8010514 <__mcmp>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f77f aeb3 	ble.w	800f926 <_dtoa_r+0x68e>
 800fbc0:	4656      	mov	r6, sl
 800fbc2:	2331      	movs	r3, #49	@ 0x31
 800fbc4:	f806 3b01 	strb.w	r3, [r6], #1
 800fbc8:	9b04      	ldr	r3, [sp, #16]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	e6ae      	b.n	800f92e <_dtoa_r+0x696>
 800fbd0:	9c07      	ldr	r4, [sp, #28]
 800fbd2:	9704      	str	r7, [sp, #16]
 800fbd4:	4625      	mov	r5, r4
 800fbd6:	e7f3      	b.n	800fbc0 <_dtoa_r+0x928>
 800fbd8:	9b07      	ldr	r3, [sp, #28]
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 8104 	beq.w	800fdec <_dtoa_r+0xb54>
 800fbe4:	2e00      	cmp	r6, #0
 800fbe6:	dd05      	ble.n	800fbf4 <_dtoa_r+0x95c>
 800fbe8:	4629      	mov	r1, r5
 800fbea:	4632      	mov	r2, r6
 800fbec:	4658      	mov	r0, fp
 800fbee:	f000 fc25 	bl	801043c <__lshift>
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d05a      	beq.n	800fcb0 <_dtoa_r+0xa18>
 800fbfa:	6869      	ldr	r1, [r5, #4]
 800fbfc:	4658      	mov	r0, fp
 800fbfe:	f000 fa0f 	bl	8010020 <_Balloc>
 800fc02:	4606      	mov	r6, r0
 800fc04:	b928      	cbnz	r0, 800fc12 <_dtoa_r+0x97a>
 800fc06:	4b84      	ldr	r3, [pc, #528]	@ (800fe18 <_dtoa_r+0xb80>)
 800fc08:	4602      	mov	r2, r0
 800fc0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fc0e:	f7ff bb5a 	b.w	800f2c6 <_dtoa_r+0x2e>
 800fc12:	692a      	ldr	r2, [r5, #16]
 800fc14:	3202      	adds	r2, #2
 800fc16:	0092      	lsls	r2, r2, #2
 800fc18:	f105 010c 	add.w	r1, r5, #12
 800fc1c:	300c      	adds	r0, #12
 800fc1e:	f7ff faa2 	bl	800f166 <memcpy>
 800fc22:	2201      	movs	r2, #1
 800fc24:	4631      	mov	r1, r6
 800fc26:	4658      	mov	r0, fp
 800fc28:	f000 fc08 	bl	801043c <__lshift>
 800fc2c:	f10a 0301 	add.w	r3, sl, #1
 800fc30:	9307      	str	r3, [sp, #28]
 800fc32:	9b00      	ldr	r3, [sp, #0]
 800fc34:	4453      	add	r3, sl
 800fc36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc38:	9b02      	ldr	r3, [sp, #8]
 800fc3a:	f003 0301 	and.w	r3, r3, #1
 800fc3e:	462f      	mov	r7, r5
 800fc40:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc42:	4605      	mov	r5, r0
 800fc44:	9b07      	ldr	r3, [sp, #28]
 800fc46:	4621      	mov	r1, r4
 800fc48:	3b01      	subs	r3, #1
 800fc4a:	4648      	mov	r0, r9
 800fc4c:	9300      	str	r3, [sp, #0]
 800fc4e:	f7ff fa98 	bl	800f182 <quorem>
 800fc52:	4639      	mov	r1, r7
 800fc54:	9002      	str	r0, [sp, #8]
 800fc56:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc5a:	4648      	mov	r0, r9
 800fc5c:	f000 fc5a 	bl	8010514 <__mcmp>
 800fc60:	462a      	mov	r2, r5
 800fc62:	9008      	str	r0, [sp, #32]
 800fc64:	4621      	mov	r1, r4
 800fc66:	4658      	mov	r0, fp
 800fc68:	f000 fc70 	bl	801054c <__mdiff>
 800fc6c:	68c2      	ldr	r2, [r0, #12]
 800fc6e:	4606      	mov	r6, r0
 800fc70:	bb02      	cbnz	r2, 800fcb4 <_dtoa_r+0xa1c>
 800fc72:	4601      	mov	r1, r0
 800fc74:	4648      	mov	r0, r9
 800fc76:	f000 fc4d 	bl	8010514 <__mcmp>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	4631      	mov	r1, r6
 800fc7e:	4658      	mov	r0, fp
 800fc80:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc82:	f000 fa0d 	bl	80100a0 <_Bfree>
 800fc86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc8a:	9e07      	ldr	r6, [sp, #28]
 800fc8c:	ea43 0102 	orr.w	r1, r3, r2
 800fc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fc92:	4319      	orrs	r1, r3
 800fc94:	d110      	bne.n	800fcb8 <_dtoa_r+0xa20>
 800fc96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fc9a:	d029      	beq.n	800fcf0 <_dtoa_r+0xa58>
 800fc9c:	9b08      	ldr	r3, [sp, #32]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	dd02      	ble.n	800fca8 <_dtoa_r+0xa10>
 800fca2:	9b02      	ldr	r3, [sp, #8]
 800fca4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fca8:	9b00      	ldr	r3, [sp, #0]
 800fcaa:	f883 8000 	strb.w	r8, [r3]
 800fcae:	e63f      	b.n	800f930 <_dtoa_r+0x698>
 800fcb0:	4628      	mov	r0, r5
 800fcb2:	e7bb      	b.n	800fc2c <_dtoa_r+0x994>
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	e7e1      	b.n	800fc7c <_dtoa_r+0x9e4>
 800fcb8:	9b08      	ldr	r3, [sp, #32]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	db04      	blt.n	800fcc8 <_dtoa_r+0xa30>
 800fcbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcc0:	430b      	orrs	r3, r1
 800fcc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fcc4:	430b      	orrs	r3, r1
 800fcc6:	d120      	bne.n	800fd0a <_dtoa_r+0xa72>
 800fcc8:	2a00      	cmp	r2, #0
 800fcca:	dded      	ble.n	800fca8 <_dtoa_r+0xa10>
 800fccc:	4649      	mov	r1, r9
 800fcce:	2201      	movs	r2, #1
 800fcd0:	4658      	mov	r0, fp
 800fcd2:	f000 fbb3 	bl	801043c <__lshift>
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	4681      	mov	r9, r0
 800fcda:	f000 fc1b 	bl	8010514 <__mcmp>
 800fcde:	2800      	cmp	r0, #0
 800fce0:	dc03      	bgt.n	800fcea <_dtoa_r+0xa52>
 800fce2:	d1e1      	bne.n	800fca8 <_dtoa_r+0xa10>
 800fce4:	f018 0f01 	tst.w	r8, #1
 800fce8:	d0de      	beq.n	800fca8 <_dtoa_r+0xa10>
 800fcea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fcee:	d1d8      	bne.n	800fca2 <_dtoa_r+0xa0a>
 800fcf0:	9a00      	ldr	r2, [sp, #0]
 800fcf2:	2339      	movs	r3, #57	@ 0x39
 800fcf4:	7013      	strb	r3, [r2, #0]
 800fcf6:	4633      	mov	r3, r6
 800fcf8:	461e      	mov	r6, r3
 800fcfa:	3b01      	subs	r3, #1
 800fcfc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fd00:	2a39      	cmp	r2, #57	@ 0x39
 800fd02:	d052      	beq.n	800fdaa <_dtoa_r+0xb12>
 800fd04:	3201      	adds	r2, #1
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	e612      	b.n	800f930 <_dtoa_r+0x698>
 800fd0a:	2a00      	cmp	r2, #0
 800fd0c:	dd07      	ble.n	800fd1e <_dtoa_r+0xa86>
 800fd0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fd12:	d0ed      	beq.n	800fcf0 <_dtoa_r+0xa58>
 800fd14:	9a00      	ldr	r2, [sp, #0]
 800fd16:	f108 0301 	add.w	r3, r8, #1
 800fd1a:	7013      	strb	r3, [r2, #0]
 800fd1c:	e608      	b.n	800f930 <_dtoa_r+0x698>
 800fd1e:	9b07      	ldr	r3, [sp, #28]
 800fd20:	9a07      	ldr	r2, [sp, #28]
 800fd22:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d028      	beq.n	800fd7e <_dtoa_r+0xae6>
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	2300      	movs	r3, #0
 800fd30:	220a      	movs	r2, #10
 800fd32:	4658      	mov	r0, fp
 800fd34:	f000 f9d6 	bl	80100e4 <__multadd>
 800fd38:	42af      	cmp	r7, r5
 800fd3a:	4681      	mov	r9, r0
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	f04f 020a 	mov.w	r2, #10
 800fd44:	4639      	mov	r1, r7
 800fd46:	4658      	mov	r0, fp
 800fd48:	d107      	bne.n	800fd5a <_dtoa_r+0xac2>
 800fd4a:	f000 f9cb 	bl	80100e4 <__multadd>
 800fd4e:	4607      	mov	r7, r0
 800fd50:	4605      	mov	r5, r0
 800fd52:	9b07      	ldr	r3, [sp, #28]
 800fd54:	3301      	adds	r3, #1
 800fd56:	9307      	str	r3, [sp, #28]
 800fd58:	e774      	b.n	800fc44 <_dtoa_r+0x9ac>
 800fd5a:	f000 f9c3 	bl	80100e4 <__multadd>
 800fd5e:	4629      	mov	r1, r5
 800fd60:	4607      	mov	r7, r0
 800fd62:	2300      	movs	r3, #0
 800fd64:	220a      	movs	r2, #10
 800fd66:	4658      	mov	r0, fp
 800fd68:	f000 f9bc 	bl	80100e4 <__multadd>
 800fd6c:	4605      	mov	r5, r0
 800fd6e:	e7f0      	b.n	800fd52 <_dtoa_r+0xaba>
 800fd70:	9b00      	ldr	r3, [sp, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	bfcc      	ite	gt
 800fd76:	461e      	movgt	r6, r3
 800fd78:	2601      	movle	r6, #1
 800fd7a:	4456      	add	r6, sl
 800fd7c:	2700      	movs	r7, #0
 800fd7e:	4649      	mov	r1, r9
 800fd80:	2201      	movs	r2, #1
 800fd82:	4658      	mov	r0, fp
 800fd84:	f000 fb5a 	bl	801043c <__lshift>
 800fd88:	4621      	mov	r1, r4
 800fd8a:	4681      	mov	r9, r0
 800fd8c:	f000 fbc2 	bl	8010514 <__mcmp>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	dcb0      	bgt.n	800fcf6 <_dtoa_r+0xa5e>
 800fd94:	d102      	bne.n	800fd9c <_dtoa_r+0xb04>
 800fd96:	f018 0f01 	tst.w	r8, #1
 800fd9a:	d1ac      	bne.n	800fcf6 <_dtoa_r+0xa5e>
 800fd9c:	4633      	mov	r3, r6
 800fd9e:	461e      	mov	r6, r3
 800fda0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fda4:	2a30      	cmp	r2, #48	@ 0x30
 800fda6:	d0fa      	beq.n	800fd9e <_dtoa_r+0xb06>
 800fda8:	e5c2      	b.n	800f930 <_dtoa_r+0x698>
 800fdaa:	459a      	cmp	sl, r3
 800fdac:	d1a4      	bne.n	800fcf8 <_dtoa_r+0xa60>
 800fdae:	9b04      	ldr	r3, [sp, #16]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	9304      	str	r3, [sp, #16]
 800fdb4:	2331      	movs	r3, #49	@ 0x31
 800fdb6:	f88a 3000 	strb.w	r3, [sl]
 800fdba:	e5b9      	b.n	800f930 <_dtoa_r+0x698>
 800fdbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fdbe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fe1c <_dtoa_r+0xb84>
 800fdc2:	b11b      	cbz	r3, 800fdcc <_dtoa_r+0xb34>
 800fdc4:	f10a 0308 	add.w	r3, sl, #8
 800fdc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fdca:	6013      	str	r3, [r2, #0]
 800fdcc:	4650      	mov	r0, sl
 800fdce:	b019      	add	sp, #100	@ 0x64
 800fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	f77f ae37 	ble.w	800fa4a <_dtoa_r+0x7b2>
 800fddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fdde:	930a      	str	r3, [sp, #40]	@ 0x28
 800fde0:	2001      	movs	r0, #1
 800fde2:	e655      	b.n	800fa90 <_dtoa_r+0x7f8>
 800fde4:	9b00      	ldr	r3, [sp, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	f77f aed6 	ble.w	800fb98 <_dtoa_r+0x900>
 800fdec:	4656      	mov	r6, sl
 800fdee:	4621      	mov	r1, r4
 800fdf0:	4648      	mov	r0, r9
 800fdf2:	f7ff f9c6 	bl	800f182 <quorem>
 800fdf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fdfa:	f806 8b01 	strb.w	r8, [r6], #1
 800fdfe:	9b00      	ldr	r3, [sp, #0]
 800fe00:	eba6 020a 	sub.w	r2, r6, sl
 800fe04:	4293      	cmp	r3, r2
 800fe06:	ddb3      	ble.n	800fd70 <_dtoa_r+0xad8>
 800fe08:	4649      	mov	r1, r9
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	220a      	movs	r2, #10
 800fe0e:	4658      	mov	r0, fp
 800fe10:	f000 f968 	bl	80100e4 <__multadd>
 800fe14:	4681      	mov	r9, r0
 800fe16:	e7ea      	b.n	800fdee <_dtoa_r+0xb56>
 800fe18:	080114b8 	.word	0x080114b8
 800fe1c:	0801143c 	.word	0x0801143c

0800fe20 <_free_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4605      	mov	r5, r0
 800fe24:	2900      	cmp	r1, #0
 800fe26:	d041      	beq.n	800feac <_free_r+0x8c>
 800fe28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2c:	1f0c      	subs	r4, r1, #4
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	bfb8      	it	lt
 800fe32:	18e4      	addlt	r4, r4, r3
 800fe34:	f000 f8e8 	bl	8010008 <__malloc_lock>
 800fe38:	4a1d      	ldr	r2, [pc, #116]	@ (800feb0 <_free_r+0x90>)
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	b933      	cbnz	r3, 800fe4c <_free_r+0x2c>
 800fe3e:	6063      	str	r3, [r4, #4]
 800fe40:	6014      	str	r4, [r2, #0]
 800fe42:	4628      	mov	r0, r5
 800fe44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe48:	f000 b8e4 	b.w	8010014 <__malloc_unlock>
 800fe4c:	42a3      	cmp	r3, r4
 800fe4e:	d908      	bls.n	800fe62 <_free_r+0x42>
 800fe50:	6820      	ldr	r0, [r4, #0]
 800fe52:	1821      	adds	r1, r4, r0
 800fe54:	428b      	cmp	r3, r1
 800fe56:	bf01      	itttt	eq
 800fe58:	6819      	ldreq	r1, [r3, #0]
 800fe5a:	685b      	ldreq	r3, [r3, #4]
 800fe5c:	1809      	addeq	r1, r1, r0
 800fe5e:	6021      	streq	r1, [r4, #0]
 800fe60:	e7ed      	b.n	800fe3e <_free_r+0x1e>
 800fe62:	461a      	mov	r2, r3
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	b10b      	cbz	r3, 800fe6c <_free_r+0x4c>
 800fe68:	42a3      	cmp	r3, r4
 800fe6a:	d9fa      	bls.n	800fe62 <_free_r+0x42>
 800fe6c:	6811      	ldr	r1, [r2, #0]
 800fe6e:	1850      	adds	r0, r2, r1
 800fe70:	42a0      	cmp	r0, r4
 800fe72:	d10b      	bne.n	800fe8c <_free_r+0x6c>
 800fe74:	6820      	ldr	r0, [r4, #0]
 800fe76:	4401      	add	r1, r0
 800fe78:	1850      	adds	r0, r2, r1
 800fe7a:	4283      	cmp	r3, r0
 800fe7c:	6011      	str	r1, [r2, #0]
 800fe7e:	d1e0      	bne.n	800fe42 <_free_r+0x22>
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	6053      	str	r3, [r2, #4]
 800fe86:	4408      	add	r0, r1
 800fe88:	6010      	str	r0, [r2, #0]
 800fe8a:	e7da      	b.n	800fe42 <_free_r+0x22>
 800fe8c:	d902      	bls.n	800fe94 <_free_r+0x74>
 800fe8e:	230c      	movs	r3, #12
 800fe90:	602b      	str	r3, [r5, #0]
 800fe92:	e7d6      	b.n	800fe42 <_free_r+0x22>
 800fe94:	6820      	ldr	r0, [r4, #0]
 800fe96:	1821      	adds	r1, r4, r0
 800fe98:	428b      	cmp	r3, r1
 800fe9a:	bf04      	itt	eq
 800fe9c:	6819      	ldreq	r1, [r3, #0]
 800fe9e:	685b      	ldreq	r3, [r3, #4]
 800fea0:	6063      	str	r3, [r4, #4]
 800fea2:	bf04      	itt	eq
 800fea4:	1809      	addeq	r1, r1, r0
 800fea6:	6021      	streq	r1, [r4, #0]
 800fea8:	6054      	str	r4, [r2, #4]
 800feaa:	e7ca      	b.n	800fe42 <_free_r+0x22>
 800feac:	bd38      	pop	{r3, r4, r5, pc}
 800feae:	bf00      	nop
 800feb0:	2000204c 	.word	0x2000204c

0800feb4 <malloc>:
 800feb4:	4b02      	ldr	r3, [pc, #8]	@ (800fec0 <malloc+0xc>)
 800feb6:	4601      	mov	r1, r0
 800feb8:	6818      	ldr	r0, [r3, #0]
 800feba:	f000 b825 	b.w	800ff08 <_malloc_r>
 800febe:	bf00      	nop
 800fec0:	20000114 	.word	0x20000114

0800fec4 <sbrk_aligned>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	4e0f      	ldr	r6, [pc, #60]	@ (800ff04 <sbrk_aligned+0x40>)
 800fec8:	460c      	mov	r4, r1
 800feca:	6831      	ldr	r1, [r6, #0]
 800fecc:	4605      	mov	r5, r0
 800fece:	b911      	cbnz	r1, 800fed6 <sbrk_aligned+0x12>
 800fed0:	f001 f850 	bl	8010f74 <_sbrk_r>
 800fed4:	6030      	str	r0, [r6, #0]
 800fed6:	4621      	mov	r1, r4
 800fed8:	4628      	mov	r0, r5
 800feda:	f001 f84b 	bl	8010f74 <_sbrk_r>
 800fede:	1c43      	adds	r3, r0, #1
 800fee0:	d103      	bne.n	800feea <sbrk_aligned+0x26>
 800fee2:	f04f 34ff 	mov.w	r4, #4294967295
 800fee6:	4620      	mov	r0, r4
 800fee8:	bd70      	pop	{r4, r5, r6, pc}
 800feea:	1cc4      	adds	r4, r0, #3
 800feec:	f024 0403 	bic.w	r4, r4, #3
 800fef0:	42a0      	cmp	r0, r4
 800fef2:	d0f8      	beq.n	800fee6 <sbrk_aligned+0x22>
 800fef4:	1a21      	subs	r1, r4, r0
 800fef6:	4628      	mov	r0, r5
 800fef8:	f001 f83c 	bl	8010f74 <_sbrk_r>
 800fefc:	3001      	adds	r0, #1
 800fefe:	d1f2      	bne.n	800fee6 <sbrk_aligned+0x22>
 800ff00:	e7ef      	b.n	800fee2 <sbrk_aligned+0x1e>
 800ff02:	bf00      	nop
 800ff04:	20002048 	.word	0x20002048

0800ff08 <_malloc_r>:
 800ff08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff0c:	1ccd      	adds	r5, r1, #3
 800ff0e:	f025 0503 	bic.w	r5, r5, #3
 800ff12:	3508      	adds	r5, #8
 800ff14:	2d0c      	cmp	r5, #12
 800ff16:	bf38      	it	cc
 800ff18:	250c      	movcc	r5, #12
 800ff1a:	2d00      	cmp	r5, #0
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	db01      	blt.n	800ff24 <_malloc_r+0x1c>
 800ff20:	42a9      	cmp	r1, r5
 800ff22:	d904      	bls.n	800ff2e <_malloc_r+0x26>
 800ff24:	230c      	movs	r3, #12
 800ff26:	6033      	str	r3, [r6, #0]
 800ff28:	2000      	movs	r0, #0
 800ff2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010004 <_malloc_r+0xfc>
 800ff32:	f000 f869 	bl	8010008 <__malloc_lock>
 800ff36:	f8d8 3000 	ldr.w	r3, [r8]
 800ff3a:	461c      	mov	r4, r3
 800ff3c:	bb44      	cbnz	r4, 800ff90 <_malloc_r+0x88>
 800ff3e:	4629      	mov	r1, r5
 800ff40:	4630      	mov	r0, r6
 800ff42:	f7ff ffbf 	bl	800fec4 <sbrk_aligned>
 800ff46:	1c43      	adds	r3, r0, #1
 800ff48:	4604      	mov	r4, r0
 800ff4a:	d158      	bne.n	800fffe <_malloc_r+0xf6>
 800ff4c:	f8d8 4000 	ldr.w	r4, [r8]
 800ff50:	4627      	mov	r7, r4
 800ff52:	2f00      	cmp	r7, #0
 800ff54:	d143      	bne.n	800ffde <_malloc_r+0xd6>
 800ff56:	2c00      	cmp	r4, #0
 800ff58:	d04b      	beq.n	800fff2 <_malloc_r+0xea>
 800ff5a:	6823      	ldr	r3, [r4, #0]
 800ff5c:	4639      	mov	r1, r7
 800ff5e:	4630      	mov	r0, r6
 800ff60:	eb04 0903 	add.w	r9, r4, r3
 800ff64:	f001 f806 	bl	8010f74 <_sbrk_r>
 800ff68:	4581      	cmp	r9, r0
 800ff6a:	d142      	bne.n	800fff2 <_malloc_r+0xea>
 800ff6c:	6821      	ldr	r1, [r4, #0]
 800ff6e:	1a6d      	subs	r5, r5, r1
 800ff70:	4629      	mov	r1, r5
 800ff72:	4630      	mov	r0, r6
 800ff74:	f7ff ffa6 	bl	800fec4 <sbrk_aligned>
 800ff78:	3001      	adds	r0, #1
 800ff7a:	d03a      	beq.n	800fff2 <_malloc_r+0xea>
 800ff7c:	6823      	ldr	r3, [r4, #0]
 800ff7e:	442b      	add	r3, r5
 800ff80:	6023      	str	r3, [r4, #0]
 800ff82:	f8d8 3000 	ldr.w	r3, [r8]
 800ff86:	685a      	ldr	r2, [r3, #4]
 800ff88:	bb62      	cbnz	r2, 800ffe4 <_malloc_r+0xdc>
 800ff8a:	f8c8 7000 	str.w	r7, [r8]
 800ff8e:	e00f      	b.n	800ffb0 <_malloc_r+0xa8>
 800ff90:	6822      	ldr	r2, [r4, #0]
 800ff92:	1b52      	subs	r2, r2, r5
 800ff94:	d420      	bmi.n	800ffd8 <_malloc_r+0xd0>
 800ff96:	2a0b      	cmp	r2, #11
 800ff98:	d917      	bls.n	800ffca <_malloc_r+0xc2>
 800ff9a:	1961      	adds	r1, r4, r5
 800ff9c:	42a3      	cmp	r3, r4
 800ff9e:	6025      	str	r5, [r4, #0]
 800ffa0:	bf18      	it	ne
 800ffa2:	6059      	strne	r1, [r3, #4]
 800ffa4:	6863      	ldr	r3, [r4, #4]
 800ffa6:	bf08      	it	eq
 800ffa8:	f8c8 1000 	streq.w	r1, [r8]
 800ffac:	5162      	str	r2, [r4, r5]
 800ffae:	604b      	str	r3, [r1, #4]
 800ffb0:	4630      	mov	r0, r6
 800ffb2:	f000 f82f 	bl	8010014 <__malloc_unlock>
 800ffb6:	f104 000b 	add.w	r0, r4, #11
 800ffba:	1d23      	adds	r3, r4, #4
 800ffbc:	f020 0007 	bic.w	r0, r0, #7
 800ffc0:	1ac2      	subs	r2, r0, r3
 800ffc2:	bf1c      	itt	ne
 800ffc4:	1a1b      	subne	r3, r3, r0
 800ffc6:	50a3      	strne	r3, [r4, r2]
 800ffc8:	e7af      	b.n	800ff2a <_malloc_r+0x22>
 800ffca:	6862      	ldr	r2, [r4, #4]
 800ffcc:	42a3      	cmp	r3, r4
 800ffce:	bf0c      	ite	eq
 800ffd0:	f8c8 2000 	streq.w	r2, [r8]
 800ffd4:	605a      	strne	r2, [r3, #4]
 800ffd6:	e7eb      	b.n	800ffb0 <_malloc_r+0xa8>
 800ffd8:	4623      	mov	r3, r4
 800ffda:	6864      	ldr	r4, [r4, #4]
 800ffdc:	e7ae      	b.n	800ff3c <_malloc_r+0x34>
 800ffde:	463c      	mov	r4, r7
 800ffe0:	687f      	ldr	r7, [r7, #4]
 800ffe2:	e7b6      	b.n	800ff52 <_malloc_r+0x4a>
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	42a3      	cmp	r3, r4
 800ffea:	d1fb      	bne.n	800ffe4 <_malloc_r+0xdc>
 800ffec:	2300      	movs	r3, #0
 800ffee:	6053      	str	r3, [r2, #4]
 800fff0:	e7de      	b.n	800ffb0 <_malloc_r+0xa8>
 800fff2:	230c      	movs	r3, #12
 800fff4:	6033      	str	r3, [r6, #0]
 800fff6:	4630      	mov	r0, r6
 800fff8:	f000 f80c 	bl	8010014 <__malloc_unlock>
 800fffc:	e794      	b.n	800ff28 <_malloc_r+0x20>
 800fffe:	6005      	str	r5, [r0, #0]
 8010000:	e7d6      	b.n	800ffb0 <_malloc_r+0xa8>
 8010002:	bf00      	nop
 8010004:	2000204c 	.word	0x2000204c

08010008 <__malloc_lock>:
 8010008:	4801      	ldr	r0, [pc, #4]	@ (8010010 <__malloc_lock+0x8>)
 801000a:	f7ff b8aa 	b.w	800f162 <__retarget_lock_acquire_recursive>
 801000e:	bf00      	nop
 8010010:	20002044 	.word	0x20002044

08010014 <__malloc_unlock>:
 8010014:	4801      	ldr	r0, [pc, #4]	@ (801001c <__malloc_unlock+0x8>)
 8010016:	f7ff b8a5 	b.w	800f164 <__retarget_lock_release_recursive>
 801001a:	bf00      	nop
 801001c:	20002044 	.word	0x20002044

08010020 <_Balloc>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	69c6      	ldr	r6, [r0, #28]
 8010024:	4604      	mov	r4, r0
 8010026:	460d      	mov	r5, r1
 8010028:	b976      	cbnz	r6, 8010048 <_Balloc+0x28>
 801002a:	2010      	movs	r0, #16
 801002c:	f7ff ff42 	bl	800feb4 <malloc>
 8010030:	4602      	mov	r2, r0
 8010032:	61e0      	str	r0, [r4, #28]
 8010034:	b920      	cbnz	r0, 8010040 <_Balloc+0x20>
 8010036:	4b18      	ldr	r3, [pc, #96]	@ (8010098 <_Balloc+0x78>)
 8010038:	4818      	ldr	r0, [pc, #96]	@ (801009c <_Balloc+0x7c>)
 801003a:	216b      	movs	r1, #107	@ 0x6b
 801003c:	f000 ffaa 	bl	8010f94 <__assert_func>
 8010040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010044:	6006      	str	r6, [r0, #0]
 8010046:	60c6      	str	r6, [r0, #12]
 8010048:	69e6      	ldr	r6, [r4, #28]
 801004a:	68f3      	ldr	r3, [r6, #12]
 801004c:	b183      	cbz	r3, 8010070 <_Balloc+0x50>
 801004e:	69e3      	ldr	r3, [r4, #28]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010056:	b9b8      	cbnz	r0, 8010088 <_Balloc+0x68>
 8010058:	2101      	movs	r1, #1
 801005a:	fa01 f605 	lsl.w	r6, r1, r5
 801005e:	1d72      	adds	r2, r6, #5
 8010060:	0092      	lsls	r2, r2, #2
 8010062:	4620      	mov	r0, r4
 8010064:	f000 ffb4 	bl	8010fd0 <_calloc_r>
 8010068:	b160      	cbz	r0, 8010084 <_Balloc+0x64>
 801006a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801006e:	e00e      	b.n	801008e <_Balloc+0x6e>
 8010070:	2221      	movs	r2, #33	@ 0x21
 8010072:	2104      	movs	r1, #4
 8010074:	4620      	mov	r0, r4
 8010076:	f000 ffab 	bl	8010fd0 <_calloc_r>
 801007a:	69e3      	ldr	r3, [r4, #28]
 801007c:	60f0      	str	r0, [r6, #12]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1e4      	bne.n	801004e <_Balloc+0x2e>
 8010084:	2000      	movs	r0, #0
 8010086:	bd70      	pop	{r4, r5, r6, pc}
 8010088:	6802      	ldr	r2, [r0, #0]
 801008a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801008e:	2300      	movs	r3, #0
 8010090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010094:	e7f7      	b.n	8010086 <_Balloc+0x66>
 8010096:	bf00      	nop
 8010098:	08011449 	.word	0x08011449
 801009c:	080114c9 	.word	0x080114c9

080100a0 <_Bfree>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	69c6      	ldr	r6, [r0, #28]
 80100a4:	4605      	mov	r5, r0
 80100a6:	460c      	mov	r4, r1
 80100a8:	b976      	cbnz	r6, 80100c8 <_Bfree+0x28>
 80100aa:	2010      	movs	r0, #16
 80100ac:	f7ff ff02 	bl	800feb4 <malloc>
 80100b0:	4602      	mov	r2, r0
 80100b2:	61e8      	str	r0, [r5, #28]
 80100b4:	b920      	cbnz	r0, 80100c0 <_Bfree+0x20>
 80100b6:	4b09      	ldr	r3, [pc, #36]	@ (80100dc <_Bfree+0x3c>)
 80100b8:	4809      	ldr	r0, [pc, #36]	@ (80100e0 <_Bfree+0x40>)
 80100ba:	218f      	movs	r1, #143	@ 0x8f
 80100bc:	f000 ff6a 	bl	8010f94 <__assert_func>
 80100c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100c4:	6006      	str	r6, [r0, #0]
 80100c6:	60c6      	str	r6, [r0, #12]
 80100c8:	b13c      	cbz	r4, 80100da <_Bfree+0x3a>
 80100ca:	69eb      	ldr	r3, [r5, #28]
 80100cc:	6862      	ldr	r2, [r4, #4]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100d4:	6021      	str	r1, [r4, #0]
 80100d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	08011449 	.word	0x08011449
 80100e0:	080114c9 	.word	0x080114c9

080100e4 <__multadd>:
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	690d      	ldr	r5, [r1, #16]
 80100ea:	4607      	mov	r7, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	461e      	mov	r6, r3
 80100f0:	f101 0c14 	add.w	ip, r1, #20
 80100f4:	2000      	movs	r0, #0
 80100f6:	f8dc 3000 	ldr.w	r3, [ip]
 80100fa:	b299      	uxth	r1, r3
 80100fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010100:	0c1e      	lsrs	r6, r3, #16
 8010102:	0c0b      	lsrs	r3, r1, #16
 8010104:	fb02 3306 	mla	r3, r2, r6, r3
 8010108:	b289      	uxth	r1, r1
 801010a:	3001      	adds	r0, #1
 801010c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010110:	4285      	cmp	r5, r0
 8010112:	f84c 1b04 	str.w	r1, [ip], #4
 8010116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801011a:	dcec      	bgt.n	80100f6 <__multadd+0x12>
 801011c:	b30e      	cbz	r6, 8010162 <__multadd+0x7e>
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	42ab      	cmp	r3, r5
 8010122:	dc19      	bgt.n	8010158 <__multadd+0x74>
 8010124:	6861      	ldr	r1, [r4, #4]
 8010126:	4638      	mov	r0, r7
 8010128:	3101      	adds	r1, #1
 801012a:	f7ff ff79 	bl	8010020 <_Balloc>
 801012e:	4680      	mov	r8, r0
 8010130:	b928      	cbnz	r0, 801013e <__multadd+0x5a>
 8010132:	4602      	mov	r2, r0
 8010134:	4b0c      	ldr	r3, [pc, #48]	@ (8010168 <__multadd+0x84>)
 8010136:	480d      	ldr	r0, [pc, #52]	@ (801016c <__multadd+0x88>)
 8010138:	21ba      	movs	r1, #186	@ 0xba
 801013a:	f000 ff2b 	bl	8010f94 <__assert_func>
 801013e:	6922      	ldr	r2, [r4, #16]
 8010140:	3202      	adds	r2, #2
 8010142:	f104 010c 	add.w	r1, r4, #12
 8010146:	0092      	lsls	r2, r2, #2
 8010148:	300c      	adds	r0, #12
 801014a:	f7ff f80c 	bl	800f166 <memcpy>
 801014e:	4621      	mov	r1, r4
 8010150:	4638      	mov	r0, r7
 8010152:	f7ff ffa5 	bl	80100a0 <_Bfree>
 8010156:	4644      	mov	r4, r8
 8010158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801015c:	3501      	adds	r5, #1
 801015e:	615e      	str	r6, [r3, #20]
 8010160:	6125      	str	r5, [r4, #16]
 8010162:	4620      	mov	r0, r4
 8010164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010168:	080114b8 	.word	0x080114b8
 801016c:	080114c9 	.word	0x080114c9

08010170 <__hi0bits>:
 8010170:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010174:	4603      	mov	r3, r0
 8010176:	bf36      	itet	cc
 8010178:	0403      	lslcc	r3, r0, #16
 801017a:	2000      	movcs	r0, #0
 801017c:	2010      	movcc	r0, #16
 801017e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010182:	bf3c      	itt	cc
 8010184:	021b      	lslcc	r3, r3, #8
 8010186:	3008      	addcc	r0, #8
 8010188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801018c:	bf3c      	itt	cc
 801018e:	011b      	lslcc	r3, r3, #4
 8010190:	3004      	addcc	r0, #4
 8010192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010196:	bf3c      	itt	cc
 8010198:	009b      	lslcc	r3, r3, #2
 801019a:	3002      	addcc	r0, #2
 801019c:	2b00      	cmp	r3, #0
 801019e:	db05      	blt.n	80101ac <__hi0bits+0x3c>
 80101a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80101a4:	f100 0001 	add.w	r0, r0, #1
 80101a8:	bf08      	it	eq
 80101aa:	2020      	moveq	r0, #32
 80101ac:	4770      	bx	lr

080101ae <__lo0bits>:
 80101ae:	6803      	ldr	r3, [r0, #0]
 80101b0:	4602      	mov	r2, r0
 80101b2:	f013 0007 	ands.w	r0, r3, #7
 80101b6:	d00b      	beq.n	80101d0 <__lo0bits+0x22>
 80101b8:	07d9      	lsls	r1, r3, #31
 80101ba:	d421      	bmi.n	8010200 <__lo0bits+0x52>
 80101bc:	0798      	lsls	r0, r3, #30
 80101be:	bf49      	itett	mi
 80101c0:	085b      	lsrmi	r3, r3, #1
 80101c2:	089b      	lsrpl	r3, r3, #2
 80101c4:	2001      	movmi	r0, #1
 80101c6:	6013      	strmi	r3, [r2, #0]
 80101c8:	bf5c      	itt	pl
 80101ca:	6013      	strpl	r3, [r2, #0]
 80101cc:	2002      	movpl	r0, #2
 80101ce:	4770      	bx	lr
 80101d0:	b299      	uxth	r1, r3
 80101d2:	b909      	cbnz	r1, 80101d8 <__lo0bits+0x2a>
 80101d4:	0c1b      	lsrs	r3, r3, #16
 80101d6:	2010      	movs	r0, #16
 80101d8:	b2d9      	uxtb	r1, r3
 80101da:	b909      	cbnz	r1, 80101e0 <__lo0bits+0x32>
 80101dc:	3008      	adds	r0, #8
 80101de:	0a1b      	lsrs	r3, r3, #8
 80101e0:	0719      	lsls	r1, r3, #28
 80101e2:	bf04      	itt	eq
 80101e4:	091b      	lsreq	r3, r3, #4
 80101e6:	3004      	addeq	r0, #4
 80101e8:	0799      	lsls	r1, r3, #30
 80101ea:	bf04      	itt	eq
 80101ec:	089b      	lsreq	r3, r3, #2
 80101ee:	3002      	addeq	r0, #2
 80101f0:	07d9      	lsls	r1, r3, #31
 80101f2:	d403      	bmi.n	80101fc <__lo0bits+0x4e>
 80101f4:	085b      	lsrs	r3, r3, #1
 80101f6:	f100 0001 	add.w	r0, r0, #1
 80101fa:	d003      	beq.n	8010204 <__lo0bits+0x56>
 80101fc:	6013      	str	r3, [r2, #0]
 80101fe:	4770      	bx	lr
 8010200:	2000      	movs	r0, #0
 8010202:	4770      	bx	lr
 8010204:	2020      	movs	r0, #32
 8010206:	4770      	bx	lr

08010208 <__i2b>:
 8010208:	b510      	push	{r4, lr}
 801020a:	460c      	mov	r4, r1
 801020c:	2101      	movs	r1, #1
 801020e:	f7ff ff07 	bl	8010020 <_Balloc>
 8010212:	4602      	mov	r2, r0
 8010214:	b928      	cbnz	r0, 8010222 <__i2b+0x1a>
 8010216:	4b05      	ldr	r3, [pc, #20]	@ (801022c <__i2b+0x24>)
 8010218:	4805      	ldr	r0, [pc, #20]	@ (8010230 <__i2b+0x28>)
 801021a:	f240 1145 	movw	r1, #325	@ 0x145
 801021e:	f000 feb9 	bl	8010f94 <__assert_func>
 8010222:	2301      	movs	r3, #1
 8010224:	6144      	str	r4, [r0, #20]
 8010226:	6103      	str	r3, [r0, #16]
 8010228:	bd10      	pop	{r4, pc}
 801022a:	bf00      	nop
 801022c:	080114b8 	.word	0x080114b8
 8010230:	080114c9 	.word	0x080114c9

08010234 <__multiply>:
 8010234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010238:	4614      	mov	r4, r2
 801023a:	690a      	ldr	r2, [r1, #16]
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	429a      	cmp	r2, r3
 8010240:	bfa8      	it	ge
 8010242:	4623      	movge	r3, r4
 8010244:	460f      	mov	r7, r1
 8010246:	bfa4      	itt	ge
 8010248:	460c      	movge	r4, r1
 801024a:	461f      	movge	r7, r3
 801024c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010250:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010254:	68a3      	ldr	r3, [r4, #8]
 8010256:	6861      	ldr	r1, [r4, #4]
 8010258:	eb0a 0609 	add.w	r6, sl, r9
 801025c:	42b3      	cmp	r3, r6
 801025e:	b085      	sub	sp, #20
 8010260:	bfb8      	it	lt
 8010262:	3101      	addlt	r1, #1
 8010264:	f7ff fedc 	bl	8010020 <_Balloc>
 8010268:	b930      	cbnz	r0, 8010278 <__multiply+0x44>
 801026a:	4602      	mov	r2, r0
 801026c:	4b44      	ldr	r3, [pc, #272]	@ (8010380 <__multiply+0x14c>)
 801026e:	4845      	ldr	r0, [pc, #276]	@ (8010384 <__multiply+0x150>)
 8010270:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010274:	f000 fe8e 	bl	8010f94 <__assert_func>
 8010278:	f100 0514 	add.w	r5, r0, #20
 801027c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010280:	462b      	mov	r3, r5
 8010282:	2200      	movs	r2, #0
 8010284:	4543      	cmp	r3, r8
 8010286:	d321      	bcc.n	80102cc <__multiply+0x98>
 8010288:	f107 0114 	add.w	r1, r7, #20
 801028c:	f104 0214 	add.w	r2, r4, #20
 8010290:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010294:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010298:	9302      	str	r3, [sp, #8]
 801029a:	1b13      	subs	r3, r2, r4
 801029c:	3b15      	subs	r3, #21
 801029e:	f023 0303 	bic.w	r3, r3, #3
 80102a2:	3304      	adds	r3, #4
 80102a4:	f104 0715 	add.w	r7, r4, #21
 80102a8:	42ba      	cmp	r2, r7
 80102aa:	bf38      	it	cc
 80102ac:	2304      	movcc	r3, #4
 80102ae:	9301      	str	r3, [sp, #4]
 80102b0:	9b02      	ldr	r3, [sp, #8]
 80102b2:	9103      	str	r1, [sp, #12]
 80102b4:	428b      	cmp	r3, r1
 80102b6:	d80c      	bhi.n	80102d2 <__multiply+0x9e>
 80102b8:	2e00      	cmp	r6, #0
 80102ba:	dd03      	ble.n	80102c4 <__multiply+0x90>
 80102bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d05b      	beq.n	801037c <__multiply+0x148>
 80102c4:	6106      	str	r6, [r0, #16]
 80102c6:	b005      	add	sp, #20
 80102c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102cc:	f843 2b04 	str.w	r2, [r3], #4
 80102d0:	e7d8      	b.n	8010284 <__multiply+0x50>
 80102d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80102d6:	f1ba 0f00 	cmp.w	sl, #0
 80102da:	d024      	beq.n	8010326 <__multiply+0xf2>
 80102dc:	f104 0e14 	add.w	lr, r4, #20
 80102e0:	46a9      	mov	r9, r5
 80102e2:	f04f 0c00 	mov.w	ip, #0
 80102e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80102ea:	f8d9 3000 	ldr.w	r3, [r9]
 80102ee:	fa1f fb87 	uxth.w	fp, r7
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80102f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80102fc:	f8d9 7000 	ldr.w	r7, [r9]
 8010300:	4463      	add	r3, ip
 8010302:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010306:	fb0a c70b 	mla	r7, sl, fp, ip
 801030a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801030e:	b29b      	uxth	r3, r3
 8010310:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010314:	4572      	cmp	r2, lr
 8010316:	f849 3b04 	str.w	r3, [r9], #4
 801031a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801031e:	d8e2      	bhi.n	80102e6 <__multiply+0xb2>
 8010320:	9b01      	ldr	r3, [sp, #4]
 8010322:	f845 c003 	str.w	ip, [r5, r3]
 8010326:	9b03      	ldr	r3, [sp, #12]
 8010328:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801032c:	3104      	adds	r1, #4
 801032e:	f1b9 0f00 	cmp.w	r9, #0
 8010332:	d021      	beq.n	8010378 <__multiply+0x144>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	f104 0c14 	add.w	ip, r4, #20
 801033a:	46ae      	mov	lr, r5
 801033c:	f04f 0a00 	mov.w	sl, #0
 8010340:	f8bc b000 	ldrh.w	fp, [ip]
 8010344:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010348:	fb09 770b 	mla	r7, r9, fp, r7
 801034c:	4457      	add	r7, sl
 801034e:	b29b      	uxth	r3, r3
 8010350:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010354:	f84e 3b04 	str.w	r3, [lr], #4
 8010358:	f85c 3b04 	ldr.w	r3, [ip], #4
 801035c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010360:	f8be 3000 	ldrh.w	r3, [lr]
 8010364:	fb09 330a 	mla	r3, r9, sl, r3
 8010368:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801036c:	4562      	cmp	r2, ip
 801036e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010372:	d8e5      	bhi.n	8010340 <__multiply+0x10c>
 8010374:	9f01      	ldr	r7, [sp, #4]
 8010376:	51eb      	str	r3, [r5, r7]
 8010378:	3504      	adds	r5, #4
 801037a:	e799      	b.n	80102b0 <__multiply+0x7c>
 801037c:	3e01      	subs	r6, #1
 801037e:	e79b      	b.n	80102b8 <__multiply+0x84>
 8010380:	080114b8 	.word	0x080114b8
 8010384:	080114c9 	.word	0x080114c9

08010388 <__pow5mult>:
 8010388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801038c:	4615      	mov	r5, r2
 801038e:	f012 0203 	ands.w	r2, r2, #3
 8010392:	4607      	mov	r7, r0
 8010394:	460e      	mov	r6, r1
 8010396:	d007      	beq.n	80103a8 <__pow5mult+0x20>
 8010398:	4c25      	ldr	r4, [pc, #148]	@ (8010430 <__pow5mult+0xa8>)
 801039a:	3a01      	subs	r2, #1
 801039c:	2300      	movs	r3, #0
 801039e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103a2:	f7ff fe9f 	bl	80100e4 <__multadd>
 80103a6:	4606      	mov	r6, r0
 80103a8:	10ad      	asrs	r5, r5, #2
 80103aa:	d03d      	beq.n	8010428 <__pow5mult+0xa0>
 80103ac:	69fc      	ldr	r4, [r7, #28]
 80103ae:	b97c      	cbnz	r4, 80103d0 <__pow5mult+0x48>
 80103b0:	2010      	movs	r0, #16
 80103b2:	f7ff fd7f 	bl	800feb4 <malloc>
 80103b6:	4602      	mov	r2, r0
 80103b8:	61f8      	str	r0, [r7, #28]
 80103ba:	b928      	cbnz	r0, 80103c8 <__pow5mult+0x40>
 80103bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010434 <__pow5mult+0xac>)
 80103be:	481e      	ldr	r0, [pc, #120]	@ (8010438 <__pow5mult+0xb0>)
 80103c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80103c4:	f000 fde6 	bl	8010f94 <__assert_func>
 80103c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103cc:	6004      	str	r4, [r0, #0]
 80103ce:	60c4      	str	r4, [r0, #12]
 80103d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80103d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103d8:	b94c      	cbnz	r4, 80103ee <__pow5mult+0x66>
 80103da:	f240 2171 	movw	r1, #625	@ 0x271
 80103de:	4638      	mov	r0, r7
 80103e0:	f7ff ff12 	bl	8010208 <__i2b>
 80103e4:	2300      	movs	r3, #0
 80103e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80103ea:	4604      	mov	r4, r0
 80103ec:	6003      	str	r3, [r0, #0]
 80103ee:	f04f 0900 	mov.w	r9, #0
 80103f2:	07eb      	lsls	r3, r5, #31
 80103f4:	d50a      	bpl.n	801040c <__pow5mult+0x84>
 80103f6:	4631      	mov	r1, r6
 80103f8:	4622      	mov	r2, r4
 80103fa:	4638      	mov	r0, r7
 80103fc:	f7ff ff1a 	bl	8010234 <__multiply>
 8010400:	4631      	mov	r1, r6
 8010402:	4680      	mov	r8, r0
 8010404:	4638      	mov	r0, r7
 8010406:	f7ff fe4b 	bl	80100a0 <_Bfree>
 801040a:	4646      	mov	r6, r8
 801040c:	106d      	asrs	r5, r5, #1
 801040e:	d00b      	beq.n	8010428 <__pow5mult+0xa0>
 8010410:	6820      	ldr	r0, [r4, #0]
 8010412:	b938      	cbnz	r0, 8010424 <__pow5mult+0x9c>
 8010414:	4622      	mov	r2, r4
 8010416:	4621      	mov	r1, r4
 8010418:	4638      	mov	r0, r7
 801041a:	f7ff ff0b 	bl	8010234 <__multiply>
 801041e:	6020      	str	r0, [r4, #0]
 8010420:	f8c0 9000 	str.w	r9, [r0]
 8010424:	4604      	mov	r4, r0
 8010426:	e7e4      	b.n	80103f2 <__pow5mult+0x6a>
 8010428:	4630      	mov	r0, r6
 801042a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801042e:	bf00      	nop
 8010430:	08011524 	.word	0x08011524
 8010434:	08011449 	.word	0x08011449
 8010438:	080114c9 	.word	0x080114c9

0801043c <__lshift>:
 801043c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010440:	460c      	mov	r4, r1
 8010442:	6849      	ldr	r1, [r1, #4]
 8010444:	6923      	ldr	r3, [r4, #16]
 8010446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	4607      	mov	r7, r0
 801044e:	4691      	mov	r9, r2
 8010450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010454:	f108 0601 	add.w	r6, r8, #1
 8010458:	42b3      	cmp	r3, r6
 801045a:	db0b      	blt.n	8010474 <__lshift+0x38>
 801045c:	4638      	mov	r0, r7
 801045e:	f7ff fddf 	bl	8010020 <_Balloc>
 8010462:	4605      	mov	r5, r0
 8010464:	b948      	cbnz	r0, 801047a <__lshift+0x3e>
 8010466:	4602      	mov	r2, r0
 8010468:	4b28      	ldr	r3, [pc, #160]	@ (801050c <__lshift+0xd0>)
 801046a:	4829      	ldr	r0, [pc, #164]	@ (8010510 <__lshift+0xd4>)
 801046c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010470:	f000 fd90 	bl	8010f94 <__assert_func>
 8010474:	3101      	adds	r1, #1
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	e7ee      	b.n	8010458 <__lshift+0x1c>
 801047a:	2300      	movs	r3, #0
 801047c:	f100 0114 	add.w	r1, r0, #20
 8010480:	f100 0210 	add.w	r2, r0, #16
 8010484:	4618      	mov	r0, r3
 8010486:	4553      	cmp	r3, sl
 8010488:	db33      	blt.n	80104f2 <__lshift+0xb6>
 801048a:	6920      	ldr	r0, [r4, #16]
 801048c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010490:	f104 0314 	add.w	r3, r4, #20
 8010494:	f019 091f 	ands.w	r9, r9, #31
 8010498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801049c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104a0:	d02b      	beq.n	80104fa <__lshift+0xbe>
 80104a2:	f1c9 0e20 	rsb	lr, r9, #32
 80104a6:	468a      	mov	sl, r1
 80104a8:	2200      	movs	r2, #0
 80104aa:	6818      	ldr	r0, [r3, #0]
 80104ac:	fa00 f009 	lsl.w	r0, r0, r9
 80104b0:	4310      	orrs	r0, r2
 80104b2:	f84a 0b04 	str.w	r0, [sl], #4
 80104b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ba:	459c      	cmp	ip, r3
 80104bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80104c0:	d8f3      	bhi.n	80104aa <__lshift+0x6e>
 80104c2:	ebac 0304 	sub.w	r3, ip, r4
 80104c6:	3b15      	subs	r3, #21
 80104c8:	f023 0303 	bic.w	r3, r3, #3
 80104cc:	3304      	adds	r3, #4
 80104ce:	f104 0015 	add.w	r0, r4, #21
 80104d2:	4584      	cmp	ip, r0
 80104d4:	bf38      	it	cc
 80104d6:	2304      	movcc	r3, #4
 80104d8:	50ca      	str	r2, [r1, r3]
 80104da:	b10a      	cbz	r2, 80104e0 <__lshift+0xa4>
 80104dc:	f108 0602 	add.w	r6, r8, #2
 80104e0:	3e01      	subs	r6, #1
 80104e2:	4638      	mov	r0, r7
 80104e4:	612e      	str	r6, [r5, #16]
 80104e6:	4621      	mov	r1, r4
 80104e8:	f7ff fdda 	bl	80100a0 <_Bfree>
 80104ec:	4628      	mov	r0, r5
 80104ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80104f6:	3301      	adds	r3, #1
 80104f8:	e7c5      	b.n	8010486 <__lshift+0x4a>
 80104fa:	3904      	subs	r1, #4
 80104fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010500:	f841 2f04 	str.w	r2, [r1, #4]!
 8010504:	459c      	cmp	ip, r3
 8010506:	d8f9      	bhi.n	80104fc <__lshift+0xc0>
 8010508:	e7ea      	b.n	80104e0 <__lshift+0xa4>
 801050a:	bf00      	nop
 801050c:	080114b8 	.word	0x080114b8
 8010510:	080114c9 	.word	0x080114c9

08010514 <__mcmp>:
 8010514:	690a      	ldr	r2, [r1, #16]
 8010516:	4603      	mov	r3, r0
 8010518:	6900      	ldr	r0, [r0, #16]
 801051a:	1a80      	subs	r0, r0, r2
 801051c:	b530      	push	{r4, r5, lr}
 801051e:	d10e      	bne.n	801053e <__mcmp+0x2a>
 8010520:	3314      	adds	r3, #20
 8010522:	3114      	adds	r1, #20
 8010524:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010528:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801052c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010530:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010534:	4295      	cmp	r5, r2
 8010536:	d003      	beq.n	8010540 <__mcmp+0x2c>
 8010538:	d205      	bcs.n	8010546 <__mcmp+0x32>
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	bd30      	pop	{r4, r5, pc}
 8010540:	42a3      	cmp	r3, r4
 8010542:	d3f3      	bcc.n	801052c <__mcmp+0x18>
 8010544:	e7fb      	b.n	801053e <__mcmp+0x2a>
 8010546:	2001      	movs	r0, #1
 8010548:	e7f9      	b.n	801053e <__mcmp+0x2a>
	...

0801054c <__mdiff>:
 801054c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010550:	4689      	mov	r9, r1
 8010552:	4606      	mov	r6, r0
 8010554:	4611      	mov	r1, r2
 8010556:	4648      	mov	r0, r9
 8010558:	4614      	mov	r4, r2
 801055a:	f7ff ffdb 	bl	8010514 <__mcmp>
 801055e:	1e05      	subs	r5, r0, #0
 8010560:	d112      	bne.n	8010588 <__mdiff+0x3c>
 8010562:	4629      	mov	r1, r5
 8010564:	4630      	mov	r0, r6
 8010566:	f7ff fd5b 	bl	8010020 <_Balloc>
 801056a:	4602      	mov	r2, r0
 801056c:	b928      	cbnz	r0, 801057a <__mdiff+0x2e>
 801056e:	4b3f      	ldr	r3, [pc, #252]	@ (801066c <__mdiff+0x120>)
 8010570:	f240 2137 	movw	r1, #567	@ 0x237
 8010574:	483e      	ldr	r0, [pc, #248]	@ (8010670 <__mdiff+0x124>)
 8010576:	f000 fd0d 	bl	8010f94 <__assert_func>
 801057a:	2301      	movs	r3, #1
 801057c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010580:	4610      	mov	r0, r2
 8010582:	b003      	add	sp, #12
 8010584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010588:	bfbc      	itt	lt
 801058a:	464b      	movlt	r3, r9
 801058c:	46a1      	movlt	r9, r4
 801058e:	4630      	mov	r0, r6
 8010590:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010594:	bfba      	itte	lt
 8010596:	461c      	movlt	r4, r3
 8010598:	2501      	movlt	r5, #1
 801059a:	2500      	movge	r5, #0
 801059c:	f7ff fd40 	bl	8010020 <_Balloc>
 80105a0:	4602      	mov	r2, r0
 80105a2:	b918      	cbnz	r0, 80105ac <__mdiff+0x60>
 80105a4:	4b31      	ldr	r3, [pc, #196]	@ (801066c <__mdiff+0x120>)
 80105a6:	f240 2145 	movw	r1, #581	@ 0x245
 80105aa:	e7e3      	b.n	8010574 <__mdiff+0x28>
 80105ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80105b0:	6926      	ldr	r6, [r4, #16]
 80105b2:	60c5      	str	r5, [r0, #12]
 80105b4:	f109 0310 	add.w	r3, r9, #16
 80105b8:	f109 0514 	add.w	r5, r9, #20
 80105bc:	f104 0e14 	add.w	lr, r4, #20
 80105c0:	f100 0b14 	add.w	fp, r0, #20
 80105c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80105c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	46d9      	mov	r9, fp
 80105d0:	f04f 0c00 	mov.w	ip, #0
 80105d4:	9b01      	ldr	r3, [sp, #4]
 80105d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80105da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80105de:	9301      	str	r3, [sp, #4]
 80105e0:	fa1f f38a 	uxth.w	r3, sl
 80105e4:	4619      	mov	r1, r3
 80105e6:	b283      	uxth	r3, r0
 80105e8:	1acb      	subs	r3, r1, r3
 80105ea:	0c00      	lsrs	r0, r0, #16
 80105ec:	4463      	add	r3, ip
 80105ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80105f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80105fc:	4576      	cmp	r6, lr
 80105fe:	f849 3b04 	str.w	r3, [r9], #4
 8010602:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010606:	d8e5      	bhi.n	80105d4 <__mdiff+0x88>
 8010608:	1b33      	subs	r3, r6, r4
 801060a:	3b15      	subs	r3, #21
 801060c:	f023 0303 	bic.w	r3, r3, #3
 8010610:	3415      	adds	r4, #21
 8010612:	3304      	adds	r3, #4
 8010614:	42a6      	cmp	r6, r4
 8010616:	bf38      	it	cc
 8010618:	2304      	movcc	r3, #4
 801061a:	441d      	add	r5, r3
 801061c:	445b      	add	r3, fp
 801061e:	461e      	mov	r6, r3
 8010620:	462c      	mov	r4, r5
 8010622:	4544      	cmp	r4, r8
 8010624:	d30e      	bcc.n	8010644 <__mdiff+0xf8>
 8010626:	f108 0103 	add.w	r1, r8, #3
 801062a:	1b49      	subs	r1, r1, r5
 801062c:	f021 0103 	bic.w	r1, r1, #3
 8010630:	3d03      	subs	r5, #3
 8010632:	45a8      	cmp	r8, r5
 8010634:	bf38      	it	cc
 8010636:	2100      	movcc	r1, #0
 8010638:	440b      	add	r3, r1
 801063a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801063e:	b191      	cbz	r1, 8010666 <__mdiff+0x11a>
 8010640:	6117      	str	r7, [r2, #16]
 8010642:	e79d      	b.n	8010580 <__mdiff+0x34>
 8010644:	f854 1b04 	ldr.w	r1, [r4], #4
 8010648:	46e6      	mov	lr, ip
 801064a:	0c08      	lsrs	r0, r1, #16
 801064c:	fa1c fc81 	uxtah	ip, ip, r1
 8010650:	4471      	add	r1, lr
 8010652:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010656:	b289      	uxth	r1, r1
 8010658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801065c:	f846 1b04 	str.w	r1, [r6], #4
 8010660:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010664:	e7dd      	b.n	8010622 <__mdiff+0xd6>
 8010666:	3f01      	subs	r7, #1
 8010668:	e7e7      	b.n	801063a <__mdiff+0xee>
 801066a:	bf00      	nop
 801066c:	080114b8 	.word	0x080114b8
 8010670:	080114c9 	.word	0x080114c9

08010674 <__d2b>:
 8010674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010678:	460f      	mov	r7, r1
 801067a:	2101      	movs	r1, #1
 801067c:	ec59 8b10 	vmov	r8, r9, d0
 8010680:	4616      	mov	r6, r2
 8010682:	f7ff fccd 	bl	8010020 <_Balloc>
 8010686:	4604      	mov	r4, r0
 8010688:	b930      	cbnz	r0, 8010698 <__d2b+0x24>
 801068a:	4602      	mov	r2, r0
 801068c:	4b23      	ldr	r3, [pc, #140]	@ (801071c <__d2b+0xa8>)
 801068e:	4824      	ldr	r0, [pc, #144]	@ (8010720 <__d2b+0xac>)
 8010690:	f240 310f 	movw	r1, #783	@ 0x30f
 8010694:	f000 fc7e 	bl	8010f94 <__assert_func>
 8010698:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801069c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106a0:	b10d      	cbz	r5, 80106a6 <__d2b+0x32>
 80106a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	f1b8 0300 	subs.w	r3, r8, #0
 80106ac:	d023      	beq.n	80106f6 <__d2b+0x82>
 80106ae:	4668      	mov	r0, sp
 80106b0:	9300      	str	r3, [sp, #0]
 80106b2:	f7ff fd7c 	bl	80101ae <__lo0bits>
 80106b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80106ba:	b1d0      	cbz	r0, 80106f2 <__d2b+0x7e>
 80106bc:	f1c0 0320 	rsb	r3, r0, #32
 80106c0:	fa02 f303 	lsl.w	r3, r2, r3
 80106c4:	430b      	orrs	r3, r1
 80106c6:	40c2      	lsrs	r2, r0
 80106c8:	6163      	str	r3, [r4, #20]
 80106ca:	9201      	str	r2, [sp, #4]
 80106cc:	9b01      	ldr	r3, [sp, #4]
 80106ce:	61a3      	str	r3, [r4, #24]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	bf0c      	ite	eq
 80106d4:	2201      	moveq	r2, #1
 80106d6:	2202      	movne	r2, #2
 80106d8:	6122      	str	r2, [r4, #16]
 80106da:	b1a5      	cbz	r5, 8010706 <__d2b+0x92>
 80106dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80106e0:	4405      	add	r5, r0
 80106e2:	603d      	str	r5, [r7, #0]
 80106e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80106e8:	6030      	str	r0, [r6, #0]
 80106ea:	4620      	mov	r0, r4
 80106ec:	b003      	add	sp, #12
 80106ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106f2:	6161      	str	r1, [r4, #20]
 80106f4:	e7ea      	b.n	80106cc <__d2b+0x58>
 80106f6:	a801      	add	r0, sp, #4
 80106f8:	f7ff fd59 	bl	80101ae <__lo0bits>
 80106fc:	9b01      	ldr	r3, [sp, #4]
 80106fe:	6163      	str	r3, [r4, #20]
 8010700:	3020      	adds	r0, #32
 8010702:	2201      	movs	r2, #1
 8010704:	e7e8      	b.n	80106d8 <__d2b+0x64>
 8010706:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801070a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801070e:	6038      	str	r0, [r7, #0]
 8010710:	6918      	ldr	r0, [r3, #16]
 8010712:	f7ff fd2d 	bl	8010170 <__hi0bits>
 8010716:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801071a:	e7e5      	b.n	80106e8 <__d2b+0x74>
 801071c:	080114b8 	.word	0x080114b8
 8010720:	080114c9 	.word	0x080114c9

08010724 <__ssputs_r>:
 8010724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010728:	688e      	ldr	r6, [r1, #8]
 801072a:	461f      	mov	r7, r3
 801072c:	42be      	cmp	r6, r7
 801072e:	680b      	ldr	r3, [r1, #0]
 8010730:	4682      	mov	sl, r0
 8010732:	460c      	mov	r4, r1
 8010734:	4690      	mov	r8, r2
 8010736:	d82d      	bhi.n	8010794 <__ssputs_r+0x70>
 8010738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801073c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010740:	d026      	beq.n	8010790 <__ssputs_r+0x6c>
 8010742:	6965      	ldr	r5, [r4, #20]
 8010744:	6909      	ldr	r1, [r1, #16]
 8010746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801074a:	eba3 0901 	sub.w	r9, r3, r1
 801074e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010752:	1c7b      	adds	r3, r7, #1
 8010754:	444b      	add	r3, r9
 8010756:	106d      	asrs	r5, r5, #1
 8010758:	429d      	cmp	r5, r3
 801075a:	bf38      	it	cc
 801075c:	461d      	movcc	r5, r3
 801075e:	0553      	lsls	r3, r2, #21
 8010760:	d527      	bpl.n	80107b2 <__ssputs_r+0x8e>
 8010762:	4629      	mov	r1, r5
 8010764:	f7ff fbd0 	bl	800ff08 <_malloc_r>
 8010768:	4606      	mov	r6, r0
 801076a:	b360      	cbz	r0, 80107c6 <__ssputs_r+0xa2>
 801076c:	6921      	ldr	r1, [r4, #16]
 801076e:	464a      	mov	r2, r9
 8010770:	f7fe fcf9 	bl	800f166 <memcpy>
 8010774:	89a3      	ldrh	r3, [r4, #12]
 8010776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801077a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801077e:	81a3      	strh	r3, [r4, #12]
 8010780:	6126      	str	r6, [r4, #16]
 8010782:	6165      	str	r5, [r4, #20]
 8010784:	444e      	add	r6, r9
 8010786:	eba5 0509 	sub.w	r5, r5, r9
 801078a:	6026      	str	r6, [r4, #0]
 801078c:	60a5      	str	r5, [r4, #8]
 801078e:	463e      	mov	r6, r7
 8010790:	42be      	cmp	r6, r7
 8010792:	d900      	bls.n	8010796 <__ssputs_r+0x72>
 8010794:	463e      	mov	r6, r7
 8010796:	6820      	ldr	r0, [r4, #0]
 8010798:	4632      	mov	r2, r6
 801079a:	4641      	mov	r1, r8
 801079c:	f000 fbd0 	bl	8010f40 <memmove>
 80107a0:	68a3      	ldr	r3, [r4, #8]
 80107a2:	1b9b      	subs	r3, r3, r6
 80107a4:	60a3      	str	r3, [r4, #8]
 80107a6:	6823      	ldr	r3, [r4, #0]
 80107a8:	4433      	add	r3, r6
 80107aa:	6023      	str	r3, [r4, #0]
 80107ac:	2000      	movs	r0, #0
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	462a      	mov	r2, r5
 80107b4:	f000 fc32 	bl	801101c <_realloc_r>
 80107b8:	4606      	mov	r6, r0
 80107ba:	2800      	cmp	r0, #0
 80107bc:	d1e0      	bne.n	8010780 <__ssputs_r+0x5c>
 80107be:	6921      	ldr	r1, [r4, #16]
 80107c0:	4650      	mov	r0, sl
 80107c2:	f7ff fb2d 	bl	800fe20 <_free_r>
 80107c6:	230c      	movs	r3, #12
 80107c8:	f8ca 3000 	str.w	r3, [sl]
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107d2:	81a3      	strh	r3, [r4, #12]
 80107d4:	f04f 30ff 	mov.w	r0, #4294967295
 80107d8:	e7e9      	b.n	80107ae <__ssputs_r+0x8a>
	...

080107dc <_svfiprintf_r>:
 80107dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e0:	4698      	mov	r8, r3
 80107e2:	898b      	ldrh	r3, [r1, #12]
 80107e4:	061b      	lsls	r3, r3, #24
 80107e6:	b09d      	sub	sp, #116	@ 0x74
 80107e8:	4607      	mov	r7, r0
 80107ea:	460d      	mov	r5, r1
 80107ec:	4614      	mov	r4, r2
 80107ee:	d510      	bpl.n	8010812 <_svfiprintf_r+0x36>
 80107f0:	690b      	ldr	r3, [r1, #16]
 80107f2:	b973      	cbnz	r3, 8010812 <_svfiprintf_r+0x36>
 80107f4:	2140      	movs	r1, #64	@ 0x40
 80107f6:	f7ff fb87 	bl	800ff08 <_malloc_r>
 80107fa:	6028      	str	r0, [r5, #0]
 80107fc:	6128      	str	r0, [r5, #16]
 80107fe:	b930      	cbnz	r0, 801080e <_svfiprintf_r+0x32>
 8010800:	230c      	movs	r3, #12
 8010802:	603b      	str	r3, [r7, #0]
 8010804:	f04f 30ff 	mov.w	r0, #4294967295
 8010808:	b01d      	add	sp, #116	@ 0x74
 801080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080e:	2340      	movs	r3, #64	@ 0x40
 8010810:	616b      	str	r3, [r5, #20]
 8010812:	2300      	movs	r3, #0
 8010814:	9309      	str	r3, [sp, #36]	@ 0x24
 8010816:	2320      	movs	r3, #32
 8010818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801081c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010820:	2330      	movs	r3, #48	@ 0x30
 8010822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80109c0 <_svfiprintf_r+0x1e4>
 8010826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801082a:	f04f 0901 	mov.w	r9, #1
 801082e:	4623      	mov	r3, r4
 8010830:	469a      	mov	sl, r3
 8010832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010836:	b10a      	cbz	r2, 801083c <_svfiprintf_r+0x60>
 8010838:	2a25      	cmp	r2, #37	@ 0x25
 801083a:	d1f9      	bne.n	8010830 <_svfiprintf_r+0x54>
 801083c:	ebba 0b04 	subs.w	fp, sl, r4
 8010840:	d00b      	beq.n	801085a <_svfiprintf_r+0x7e>
 8010842:	465b      	mov	r3, fp
 8010844:	4622      	mov	r2, r4
 8010846:	4629      	mov	r1, r5
 8010848:	4638      	mov	r0, r7
 801084a:	f7ff ff6b 	bl	8010724 <__ssputs_r>
 801084e:	3001      	adds	r0, #1
 8010850:	f000 80a7 	beq.w	80109a2 <_svfiprintf_r+0x1c6>
 8010854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010856:	445a      	add	r2, fp
 8010858:	9209      	str	r2, [sp, #36]	@ 0x24
 801085a:	f89a 3000 	ldrb.w	r3, [sl]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 809f 	beq.w	80109a2 <_svfiprintf_r+0x1c6>
 8010864:	2300      	movs	r3, #0
 8010866:	f04f 32ff 	mov.w	r2, #4294967295
 801086a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801086e:	f10a 0a01 	add.w	sl, sl, #1
 8010872:	9304      	str	r3, [sp, #16]
 8010874:	9307      	str	r3, [sp, #28]
 8010876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801087a:	931a      	str	r3, [sp, #104]	@ 0x68
 801087c:	4654      	mov	r4, sl
 801087e:	2205      	movs	r2, #5
 8010880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010884:	484e      	ldr	r0, [pc, #312]	@ (80109c0 <_svfiprintf_r+0x1e4>)
 8010886:	f7ef fc7b 	bl	8000180 <memchr>
 801088a:	9a04      	ldr	r2, [sp, #16]
 801088c:	b9d8      	cbnz	r0, 80108c6 <_svfiprintf_r+0xea>
 801088e:	06d0      	lsls	r0, r2, #27
 8010890:	bf44      	itt	mi
 8010892:	2320      	movmi	r3, #32
 8010894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010898:	0711      	lsls	r1, r2, #28
 801089a:	bf44      	itt	mi
 801089c:	232b      	movmi	r3, #43	@ 0x2b
 801089e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108a2:	f89a 3000 	ldrb.w	r3, [sl]
 80108a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80108a8:	d015      	beq.n	80108d6 <_svfiprintf_r+0xfa>
 80108aa:	9a07      	ldr	r2, [sp, #28]
 80108ac:	4654      	mov	r4, sl
 80108ae:	2000      	movs	r0, #0
 80108b0:	f04f 0c0a 	mov.w	ip, #10
 80108b4:	4621      	mov	r1, r4
 80108b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108ba:	3b30      	subs	r3, #48	@ 0x30
 80108bc:	2b09      	cmp	r3, #9
 80108be:	d94b      	bls.n	8010958 <_svfiprintf_r+0x17c>
 80108c0:	b1b0      	cbz	r0, 80108f0 <_svfiprintf_r+0x114>
 80108c2:	9207      	str	r2, [sp, #28]
 80108c4:	e014      	b.n	80108f0 <_svfiprintf_r+0x114>
 80108c6:	eba0 0308 	sub.w	r3, r0, r8
 80108ca:	fa09 f303 	lsl.w	r3, r9, r3
 80108ce:	4313      	orrs	r3, r2
 80108d0:	9304      	str	r3, [sp, #16]
 80108d2:	46a2      	mov	sl, r4
 80108d4:	e7d2      	b.n	801087c <_svfiprintf_r+0xa0>
 80108d6:	9b03      	ldr	r3, [sp, #12]
 80108d8:	1d19      	adds	r1, r3, #4
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	9103      	str	r1, [sp, #12]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	bfbb      	ittet	lt
 80108e2:	425b      	neglt	r3, r3
 80108e4:	f042 0202 	orrlt.w	r2, r2, #2
 80108e8:	9307      	strge	r3, [sp, #28]
 80108ea:	9307      	strlt	r3, [sp, #28]
 80108ec:	bfb8      	it	lt
 80108ee:	9204      	strlt	r2, [sp, #16]
 80108f0:	7823      	ldrb	r3, [r4, #0]
 80108f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80108f4:	d10a      	bne.n	801090c <_svfiprintf_r+0x130>
 80108f6:	7863      	ldrb	r3, [r4, #1]
 80108f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80108fa:	d132      	bne.n	8010962 <_svfiprintf_r+0x186>
 80108fc:	9b03      	ldr	r3, [sp, #12]
 80108fe:	1d1a      	adds	r2, r3, #4
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	9203      	str	r2, [sp, #12]
 8010904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010908:	3402      	adds	r4, #2
 801090a:	9305      	str	r3, [sp, #20]
 801090c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80109d0 <_svfiprintf_r+0x1f4>
 8010910:	7821      	ldrb	r1, [r4, #0]
 8010912:	2203      	movs	r2, #3
 8010914:	4650      	mov	r0, sl
 8010916:	f7ef fc33 	bl	8000180 <memchr>
 801091a:	b138      	cbz	r0, 801092c <_svfiprintf_r+0x150>
 801091c:	9b04      	ldr	r3, [sp, #16]
 801091e:	eba0 000a 	sub.w	r0, r0, sl
 8010922:	2240      	movs	r2, #64	@ 0x40
 8010924:	4082      	lsls	r2, r0
 8010926:	4313      	orrs	r3, r2
 8010928:	3401      	adds	r4, #1
 801092a:	9304      	str	r3, [sp, #16]
 801092c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010930:	4824      	ldr	r0, [pc, #144]	@ (80109c4 <_svfiprintf_r+0x1e8>)
 8010932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010936:	2206      	movs	r2, #6
 8010938:	f7ef fc22 	bl	8000180 <memchr>
 801093c:	2800      	cmp	r0, #0
 801093e:	d036      	beq.n	80109ae <_svfiprintf_r+0x1d2>
 8010940:	4b21      	ldr	r3, [pc, #132]	@ (80109c8 <_svfiprintf_r+0x1ec>)
 8010942:	bb1b      	cbnz	r3, 801098c <_svfiprintf_r+0x1b0>
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	3307      	adds	r3, #7
 8010948:	f023 0307 	bic.w	r3, r3, #7
 801094c:	3308      	adds	r3, #8
 801094e:	9303      	str	r3, [sp, #12]
 8010950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010952:	4433      	add	r3, r6
 8010954:	9309      	str	r3, [sp, #36]	@ 0x24
 8010956:	e76a      	b.n	801082e <_svfiprintf_r+0x52>
 8010958:	fb0c 3202 	mla	r2, ip, r2, r3
 801095c:	460c      	mov	r4, r1
 801095e:	2001      	movs	r0, #1
 8010960:	e7a8      	b.n	80108b4 <_svfiprintf_r+0xd8>
 8010962:	2300      	movs	r3, #0
 8010964:	3401      	adds	r4, #1
 8010966:	9305      	str	r3, [sp, #20]
 8010968:	4619      	mov	r1, r3
 801096a:	f04f 0c0a 	mov.w	ip, #10
 801096e:	4620      	mov	r0, r4
 8010970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010974:	3a30      	subs	r2, #48	@ 0x30
 8010976:	2a09      	cmp	r2, #9
 8010978:	d903      	bls.n	8010982 <_svfiprintf_r+0x1a6>
 801097a:	2b00      	cmp	r3, #0
 801097c:	d0c6      	beq.n	801090c <_svfiprintf_r+0x130>
 801097e:	9105      	str	r1, [sp, #20]
 8010980:	e7c4      	b.n	801090c <_svfiprintf_r+0x130>
 8010982:	fb0c 2101 	mla	r1, ip, r1, r2
 8010986:	4604      	mov	r4, r0
 8010988:	2301      	movs	r3, #1
 801098a:	e7f0      	b.n	801096e <_svfiprintf_r+0x192>
 801098c:	ab03      	add	r3, sp, #12
 801098e:	9300      	str	r3, [sp, #0]
 8010990:	462a      	mov	r2, r5
 8010992:	4b0e      	ldr	r3, [pc, #56]	@ (80109cc <_svfiprintf_r+0x1f0>)
 8010994:	a904      	add	r1, sp, #16
 8010996:	4638      	mov	r0, r7
 8010998:	f7fd fe5a 	bl	800e650 <_printf_float>
 801099c:	1c42      	adds	r2, r0, #1
 801099e:	4606      	mov	r6, r0
 80109a0:	d1d6      	bne.n	8010950 <_svfiprintf_r+0x174>
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	065b      	lsls	r3, r3, #25
 80109a6:	f53f af2d 	bmi.w	8010804 <_svfiprintf_r+0x28>
 80109aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109ac:	e72c      	b.n	8010808 <_svfiprintf_r+0x2c>
 80109ae:	ab03      	add	r3, sp, #12
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	462a      	mov	r2, r5
 80109b4:	4b05      	ldr	r3, [pc, #20]	@ (80109cc <_svfiprintf_r+0x1f0>)
 80109b6:	a904      	add	r1, sp, #16
 80109b8:	4638      	mov	r0, r7
 80109ba:	f7fe f8e1 	bl	800eb80 <_printf_i>
 80109be:	e7ed      	b.n	801099c <_svfiprintf_r+0x1c0>
 80109c0:	08011620 	.word	0x08011620
 80109c4:	0801162a 	.word	0x0801162a
 80109c8:	0800e651 	.word	0x0800e651
 80109cc:	08010725 	.word	0x08010725
 80109d0:	08011626 	.word	0x08011626

080109d4 <__sfputc_r>:
 80109d4:	6893      	ldr	r3, [r2, #8]
 80109d6:	3b01      	subs	r3, #1
 80109d8:	2b00      	cmp	r3, #0
 80109da:	b410      	push	{r4}
 80109dc:	6093      	str	r3, [r2, #8]
 80109de:	da08      	bge.n	80109f2 <__sfputc_r+0x1e>
 80109e0:	6994      	ldr	r4, [r2, #24]
 80109e2:	42a3      	cmp	r3, r4
 80109e4:	db01      	blt.n	80109ea <__sfputc_r+0x16>
 80109e6:	290a      	cmp	r1, #10
 80109e8:	d103      	bne.n	80109f2 <__sfputc_r+0x1e>
 80109ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ee:	f000 ba13 	b.w	8010e18 <__swbuf_r>
 80109f2:	6813      	ldr	r3, [r2, #0]
 80109f4:	1c58      	adds	r0, r3, #1
 80109f6:	6010      	str	r0, [r2, #0]
 80109f8:	7019      	strb	r1, [r3, #0]
 80109fa:	4608      	mov	r0, r1
 80109fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a00:	4770      	bx	lr

08010a02 <__sfputs_r>:
 8010a02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a04:	4606      	mov	r6, r0
 8010a06:	460f      	mov	r7, r1
 8010a08:	4614      	mov	r4, r2
 8010a0a:	18d5      	adds	r5, r2, r3
 8010a0c:	42ac      	cmp	r4, r5
 8010a0e:	d101      	bne.n	8010a14 <__sfputs_r+0x12>
 8010a10:	2000      	movs	r0, #0
 8010a12:	e007      	b.n	8010a24 <__sfputs_r+0x22>
 8010a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a18:	463a      	mov	r2, r7
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f7ff ffda 	bl	80109d4 <__sfputc_r>
 8010a20:	1c43      	adds	r3, r0, #1
 8010a22:	d1f3      	bne.n	8010a0c <__sfputs_r+0xa>
 8010a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010a28 <_vfiprintf_r>:
 8010a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	b09d      	sub	sp, #116	@ 0x74
 8010a30:	4614      	mov	r4, r2
 8010a32:	4698      	mov	r8, r3
 8010a34:	4606      	mov	r6, r0
 8010a36:	b118      	cbz	r0, 8010a40 <_vfiprintf_r+0x18>
 8010a38:	6a03      	ldr	r3, [r0, #32]
 8010a3a:	b90b      	cbnz	r3, 8010a40 <_vfiprintf_r+0x18>
 8010a3c:	f7fe fa4c 	bl	800eed8 <__sinit>
 8010a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a42:	07d9      	lsls	r1, r3, #31
 8010a44:	d405      	bmi.n	8010a52 <_vfiprintf_r+0x2a>
 8010a46:	89ab      	ldrh	r3, [r5, #12]
 8010a48:	059a      	lsls	r2, r3, #22
 8010a4a:	d402      	bmi.n	8010a52 <_vfiprintf_r+0x2a>
 8010a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a4e:	f7fe fb88 	bl	800f162 <__retarget_lock_acquire_recursive>
 8010a52:	89ab      	ldrh	r3, [r5, #12]
 8010a54:	071b      	lsls	r3, r3, #28
 8010a56:	d501      	bpl.n	8010a5c <_vfiprintf_r+0x34>
 8010a58:	692b      	ldr	r3, [r5, #16]
 8010a5a:	b99b      	cbnz	r3, 8010a84 <_vfiprintf_r+0x5c>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4630      	mov	r0, r6
 8010a60:	f000 fa18 	bl	8010e94 <__swsetup_r>
 8010a64:	b170      	cbz	r0, 8010a84 <_vfiprintf_r+0x5c>
 8010a66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a68:	07dc      	lsls	r4, r3, #31
 8010a6a:	d504      	bpl.n	8010a76 <_vfiprintf_r+0x4e>
 8010a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a70:	b01d      	add	sp, #116	@ 0x74
 8010a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a76:	89ab      	ldrh	r3, [r5, #12]
 8010a78:	0598      	lsls	r0, r3, #22
 8010a7a:	d4f7      	bmi.n	8010a6c <_vfiprintf_r+0x44>
 8010a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a7e:	f7fe fb71 	bl	800f164 <__retarget_lock_release_recursive>
 8010a82:	e7f3      	b.n	8010a6c <_vfiprintf_r+0x44>
 8010a84:	2300      	movs	r3, #0
 8010a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a88:	2320      	movs	r3, #32
 8010a8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a92:	2330      	movs	r3, #48	@ 0x30
 8010a94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010c44 <_vfiprintf_r+0x21c>
 8010a98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a9c:	f04f 0901 	mov.w	r9, #1
 8010aa0:	4623      	mov	r3, r4
 8010aa2:	469a      	mov	sl, r3
 8010aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aa8:	b10a      	cbz	r2, 8010aae <_vfiprintf_r+0x86>
 8010aaa:	2a25      	cmp	r2, #37	@ 0x25
 8010aac:	d1f9      	bne.n	8010aa2 <_vfiprintf_r+0x7a>
 8010aae:	ebba 0b04 	subs.w	fp, sl, r4
 8010ab2:	d00b      	beq.n	8010acc <_vfiprintf_r+0xa4>
 8010ab4:	465b      	mov	r3, fp
 8010ab6:	4622      	mov	r2, r4
 8010ab8:	4629      	mov	r1, r5
 8010aba:	4630      	mov	r0, r6
 8010abc:	f7ff ffa1 	bl	8010a02 <__sfputs_r>
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	f000 80a7 	beq.w	8010c14 <_vfiprintf_r+0x1ec>
 8010ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ac8:	445a      	add	r2, fp
 8010aca:	9209      	str	r2, [sp, #36]	@ 0x24
 8010acc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f000 809f 	beq.w	8010c14 <_vfiprintf_r+0x1ec>
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8010adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ae0:	f10a 0a01 	add.w	sl, sl, #1
 8010ae4:	9304      	str	r3, [sp, #16]
 8010ae6:	9307      	str	r3, [sp, #28]
 8010ae8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010aec:	931a      	str	r3, [sp, #104]	@ 0x68
 8010aee:	4654      	mov	r4, sl
 8010af0:	2205      	movs	r2, #5
 8010af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af6:	4853      	ldr	r0, [pc, #332]	@ (8010c44 <_vfiprintf_r+0x21c>)
 8010af8:	f7ef fb42 	bl	8000180 <memchr>
 8010afc:	9a04      	ldr	r2, [sp, #16]
 8010afe:	b9d8      	cbnz	r0, 8010b38 <_vfiprintf_r+0x110>
 8010b00:	06d1      	lsls	r1, r2, #27
 8010b02:	bf44      	itt	mi
 8010b04:	2320      	movmi	r3, #32
 8010b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b0a:	0713      	lsls	r3, r2, #28
 8010b0c:	bf44      	itt	mi
 8010b0e:	232b      	movmi	r3, #43	@ 0x2b
 8010b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b14:	f89a 3000 	ldrb.w	r3, [sl]
 8010b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b1a:	d015      	beq.n	8010b48 <_vfiprintf_r+0x120>
 8010b1c:	9a07      	ldr	r2, [sp, #28]
 8010b1e:	4654      	mov	r4, sl
 8010b20:	2000      	movs	r0, #0
 8010b22:	f04f 0c0a 	mov.w	ip, #10
 8010b26:	4621      	mov	r1, r4
 8010b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b2c:	3b30      	subs	r3, #48	@ 0x30
 8010b2e:	2b09      	cmp	r3, #9
 8010b30:	d94b      	bls.n	8010bca <_vfiprintf_r+0x1a2>
 8010b32:	b1b0      	cbz	r0, 8010b62 <_vfiprintf_r+0x13a>
 8010b34:	9207      	str	r2, [sp, #28]
 8010b36:	e014      	b.n	8010b62 <_vfiprintf_r+0x13a>
 8010b38:	eba0 0308 	sub.w	r3, r0, r8
 8010b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8010b40:	4313      	orrs	r3, r2
 8010b42:	9304      	str	r3, [sp, #16]
 8010b44:	46a2      	mov	sl, r4
 8010b46:	e7d2      	b.n	8010aee <_vfiprintf_r+0xc6>
 8010b48:	9b03      	ldr	r3, [sp, #12]
 8010b4a:	1d19      	adds	r1, r3, #4
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	9103      	str	r1, [sp, #12]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	bfbb      	ittet	lt
 8010b54:	425b      	neglt	r3, r3
 8010b56:	f042 0202 	orrlt.w	r2, r2, #2
 8010b5a:	9307      	strge	r3, [sp, #28]
 8010b5c:	9307      	strlt	r3, [sp, #28]
 8010b5e:	bfb8      	it	lt
 8010b60:	9204      	strlt	r2, [sp, #16]
 8010b62:	7823      	ldrb	r3, [r4, #0]
 8010b64:	2b2e      	cmp	r3, #46	@ 0x2e
 8010b66:	d10a      	bne.n	8010b7e <_vfiprintf_r+0x156>
 8010b68:	7863      	ldrb	r3, [r4, #1]
 8010b6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b6c:	d132      	bne.n	8010bd4 <_vfiprintf_r+0x1ac>
 8010b6e:	9b03      	ldr	r3, [sp, #12]
 8010b70:	1d1a      	adds	r2, r3, #4
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	9203      	str	r2, [sp, #12]
 8010b76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b7a:	3402      	adds	r4, #2
 8010b7c:	9305      	str	r3, [sp, #20]
 8010b7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010c54 <_vfiprintf_r+0x22c>
 8010b82:	7821      	ldrb	r1, [r4, #0]
 8010b84:	2203      	movs	r2, #3
 8010b86:	4650      	mov	r0, sl
 8010b88:	f7ef fafa 	bl	8000180 <memchr>
 8010b8c:	b138      	cbz	r0, 8010b9e <_vfiprintf_r+0x176>
 8010b8e:	9b04      	ldr	r3, [sp, #16]
 8010b90:	eba0 000a 	sub.w	r0, r0, sl
 8010b94:	2240      	movs	r2, #64	@ 0x40
 8010b96:	4082      	lsls	r2, r0
 8010b98:	4313      	orrs	r3, r2
 8010b9a:	3401      	adds	r4, #1
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba2:	4829      	ldr	r0, [pc, #164]	@ (8010c48 <_vfiprintf_r+0x220>)
 8010ba4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ba8:	2206      	movs	r2, #6
 8010baa:	f7ef fae9 	bl	8000180 <memchr>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d03f      	beq.n	8010c32 <_vfiprintf_r+0x20a>
 8010bb2:	4b26      	ldr	r3, [pc, #152]	@ (8010c4c <_vfiprintf_r+0x224>)
 8010bb4:	bb1b      	cbnz	r3, 8010bfe <_vfiprintf_r+0x1d6>
 8010bb6:	9b03      	ldr	r3, [sp, #12]
 8010bb8:	3307      	adds	r3, #7
 8010bba:	f023 0307 	bic.w	r3, r3, #7
 8010bbe:	3308      	adds	r3, #8
 8010bc0:	9303      	str	r3, [sp, #12]
 8010bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bc4:	443b      	add	r3, r7
 8010bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010bc8:	e76a      	b.n	8010aa0 <_vfiprintf_r+0x78>
 8010bca:	fb0c 3202 	mla	r2, ip, r2, r3
 8010bce:	460c      	mov	r4, r1
 8010bd0:	2001      	movs	r0, #1
 8010bd2:	e7a8      	b.n	8010b26 <_vfiprintf_r+0xfe>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	3401      	adds	r4, #1
 8010bd8:	9305      	str	r3, [sp, #20]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	f04f 0c0a 	mov.w	ip, #10
 8010be0:	4620      	mov	r0, r4
 8010be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010be6:	3a30      	subs	r2, #48	@ 0x30
 8010be8:	2a09      	cmp	r2, #9
 8010bea:	d903      	bls.n	8010bf4 <_vfiprintf_r+0x1cc>
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d0c6      	beq.n	8010b7e <_vfiprintf_r+0x156>
 8010bf0:	9105      	str	r1, [sp, #20]
 8010bf2:	e7c4      	b.n	8010b7e <_vfiprintf_r+0x156>
 8010bf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010bf8:	4604      	mov	r4, r0
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e7f0      	b.n	8010be0 <_vfiprintf_r+0x1b8>
 8010bfe:	ab03      	add	r3, sp, #12
 8010c00:	9300      	str	r3, [sp, #0]
 8010c02:	462a      	mov	r2, r5
 8010c04:	4b12      	ldr	r3, [pc, #72]	@ (8010c50 <_vfiprintf_r+0x228>)
 8010c06:	a904      	add	r1, sp, #16
 8010c08:	4630      	mov	r0, r6
 8010c0a:	f7fd fd21 	bl	800e650 <_printf_float>
 8010c0e:	4607      	mov	r7, r0
 8010c10:	1c78      	adds	r0, r7, #1
 8010c12:	d1d6      	bne.n	8010bc2 <_vfiprintf_r+0x19a>
 8010c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c16:	07d9      	lsls	r1, r3, #31
 8010c18:	d405      	bmi.n	8010c26 <_vfiprintf_r+0x1fe>
 8010c1a:	89ab      	ldrh	r3, [r5, #12]
 8010c1c:	059a      	lsls	r2, r3, #22
 8010c1e:	d402      	bmi.n	8010c26 <_vfiprintf_r+0x1fe>
 8010c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c22:	f7fe fa9f 	bl	800f164 <__retarget_lock_release_recursive>
 8010c26:	89ab      	ldrh	r3, [r5, #12]
 8010c28:	065b      	lsls	r3, r3, #25
 8010c2a:	f53f af1f 	bmi.w	8010a6c <_vfiprintf_r+0x44>
 8010c2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c30:	e71e      	b.n	8010a70 <_vfiprintf_r+0x48>
 8010c32:	ab03      	add	r3, sp, #12
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	462a      	mov	r2, r5
 8010c38:	4b05      	ldr	r3, [pc, #20]	@ (8010c50 <_vfiprintf_r+0x228>)
 8010c3a:	a904      	add	r1, sp, #16
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7fd ff9f 	bl	800eb80 <_printf_i>
 8010c42:	e7e4      	b.n	8010c0e <_vfiprintf_r+0x1e6>
 8010c44:	08011620 	.word	0x08011620
 8010c48:	0801162a 	.word	0x0801162a
 8010c4c:	0800e651 	.word	0x0800e651
 8010c50:	08010a03 	.word	0x08010a03
 8010c54:	08011626 	.word	0x08011626

08010c58 <__sflush_r>:
 8010c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c60:	0716      	lsls	r6, r2, #28
 8010c62:	4605      	mov	r5, r0
 8010c64:	460c      	mov	r4, r1
 8010c66:	d454      	bmi.n	8010d12 <__sflush_r+0xba>
 8010c68:	684b      	ldr	r3, [r1, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	dc02      	bgt.n	8010c74 <__sflush_r+0x1c>
 8010c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	dd48      	ble.n	8010d06 <__sflush_r+0xae>
 8010c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c76:	2e00      	cmp	r6, #0
 8010c78:	d045      	beq.n	8010d06 <__sflush_r+0xae>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010c80:	682f      	ldr	r7, [r5, #0]
 8010c82:	6a21      	ldr	r1, [r4, #32]
 8010c84:	602b      	str	r3, [r5, #0]
 8010c86:	d030      	beq.n	8010cea <__sflush_r+0x92>
 8010c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010c8a:	89a3      	ldrh	r3, [r4, #12]
 8010c8c:	0759      	lsls	r1, r3, #29
 8010c8e:	d505      	bpl.n	8010c9c <__sflush_r+0x44>
 8010c90:	6863      	ldr	r3, [r4, #4]
 8010c92:	1ad2      	subs	r2, r2, r3
 8010c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c96:	b10b      	cbz	r3, 8010c9c <__sflush_r+0x44>
 8010c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c9a:	1ad2      	subs	r2, r2, r3
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ca0:	6a21      	ldr	r1, [r4, #32]
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	47b0      	blx	r6
 8010ca6:	1c43      	adds	r3, r0, #1
 8010ca8:	89a3      	ldrh	r3, [r4, #12]
 8010caa:	d106      	bne.n	8010cba <__sflush_r+0x62>
 8010cac:	6829      	ldr	r1, [r5, #0]
 8010cae:	291d      	cmp	r1, #29
 8010cb0:	d82b      	bhi.n	8010d0a <__sflush_r+0xb2>
 8010cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8010d5c <__sflush_r+0x104>)
 8010cb4:	410a      	asrs	r2, r1
 8010cb6:	07d6      	lsls	r6, r2, #31
 8010cb8:	d427      	bmi.n	8010d0a <__sflush_r+0xb2>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	6062      	str	r2, [r4, #4]
 8010cbe:	04d9      	lsls	r1, r3, #19
 8010cc0:	6922      	ldr	r2, [r4, #16]
 8010cc2:	6022      	str	r2, [r4, #0]
 8010cc4:	d504      	bpl.n	8010cd0 <__sflush_r+0x78>
 8010cc6:	1c42      	adds	r2, r0, #1
 8010cc8:	d101      	bne.n	8010cce <__sflush_r+0x76>
 8010cca:	682b      	ldr	r3, [r5, #0]
 8010ccc:	b903      	cbnz	r3, 8010cd0 <__sflush_r+0x78>
 8010cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8010cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cd2:	602f      	str	r7, [r5, #0]
 8010cd4:	b1b9      	cbz	r1, 8010d06 <__sflush_r+0xae>
 8010cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	d002      	beq.n	8010ce4 <__sflush_r+0x8c>
 8010cde:	4628      	mov	r0, r5
 8010ce0:	f7ff f89e 	bl	800fe20 <_free_r>
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ce8:	e00d      	b.n	8010d06 <__sflush_r+0xae>
 8010cea:	2301      	movs	r3, #1
 8010cec:	4628      	mov	r0, r5
 8010cee:	47b0      	blx	r6
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	1c50      	adds	r0, r2, #1
 8010cf4:	d1c9      	bne.n	8010c8a <__sflush_r+0x32>
 8010cf6:	682b      	ldr	r3, [r5, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d0c6      	beq.n	8010c8a <__sflush_r+0x32>
 8010cfc:	2b1d      	cmp	r3, #29
 8010cfe:	d001      	beq.n	8010d04 <__sflush_r+0xac>
 8010d00:	2b16      	cmp	r3, #22
 8010d02:	d11e      	bne.n	8010d42 <__sflush_r+0xea>
 8010d04:	602f      	str	r7, [r5, #0]
 8010d06:	2000      	movs	r0, #0
 8010d08:	e022      	b.n	8010d50 <__sflush_r+0xf8>
 8010d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d0e:	b21b      	sxth	r3, r3
 8010d10:	e01b      	b.n	8010d4a <__sflush_r+0xf2>
 8010d12:	690f      	ldr	r7, [r1, #16]
 8010d14:	2f00      	cmp	r7, #0
 8010d16:	d0f6      	beq.n	8010d06 <__sflush_r+0xae>
 8010d18:	0793      	lsls	r3, r2, #30
 8010d1a:	680e      	ldr	r6, [r1, #0]
 8010d1c:	bf08      	it	eq
 8010d1e:	694b      	ldreq	r3, [r1, #20]
 8010d20:	600f      	str	r7, [r1, #0]
 8010d22:	bf18      	it	ne
 8010d24:	2300      	movne	r3, #0
 8010d26:	eba6 0807 	sub.w	r8, r6, r7
 8010d2a:	608b      	str	r3, [r1, #8]
 8010d2c:	f1b8 0f00 	cmp.w	r8, #0
 8010d30:	dde9      	ble.n	8010d06 <__sflush_r+0xae>
 8010d32:	6a21      	ldr	r1, [r4, #32]
 8010d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010d36:	4643      	mov	r3, r8
 8010d38:	463a      	mov	r2, r7
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	47b0      	blx	r6
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	dc08      	bgt.n	8010d54 <__sflush_r+0xfc>
 8010d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d4a:	81a3      	strh	r3, [r4, #12]
 8010d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d54:	4407      	add	r7, r0
 8010d56:	eba8 0800 	sub.w	r8, r8, r0
 8010d5a:	e7e7      	b.n	8010d2c <__sflush_r+0xd4>
 8010d5c:	dfbffffe 	.word	0xdfbffffe

08010d60 <_fflush_r>:
 8010d60:	b538      	push	{r3, r4, r5, lr}
 8010d62:	690b      	ldr	r3, [r1, #16]
 8010d64:	4605      	mov	r5, r0
 8010d66:	460c      	mov	r4, r1
 8010d68:	b913      	cbnz	r3, 8010d70 <_fflush_r+0x10>
 8010d6a:	2500      	movs	r5, #0
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	bd38      	pop	{r3, r4, r5, pc}
 8010d70:	b118      	cbz	r0, 8010d7a <_fflush_r+0x1a>
 8010d72:	6a03      	ldr	r3, [r0, #32]
 8010d74:	b90b      	cbnz	r3, 8010d7a <_fflush_r+0x1a>
 8010d76:	f7fe f8af 	bl	800eed8 <__sinit>
 8010d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d0f3      	beq.n	8010d6a <_fflush_r+0xa>
 8010d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010d84:	07d0      	lsls	r0, r2, #31
 8010d86:	d404      	bmi.n	8010d92 <_fflush_r+0x32>
 8010d88:	0599      	lsls	r1, r3, #22
 8010d8a:	d402      	bmi.n	8010d92 <_fflush_r+0x32>
 8010d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d8e:	f7fe f9e8 	bl	800f162 <__retarget_lock_acquire_recursive>
 8010d92:	4628      	mov	r0, r5
 8010d94:	4621      	mov	r1, r4
 8010d96:	f7ff ff5f 	bl	8010c58 <__sflush_r>
 8010d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d9c:	07da      	lsls	r2, r3, #31
 8010d9e:	4605      	mov	r5, r0
 8010da0:	d4e4      	bmi.n	8010d6c <_fflush_r+0xc>
 8010da2:	89a3      	ldrh	r3, [r4, #12]
 8010da4:	059b      	lsls	r3, r3, #22
 8010da6:	d4e1      	bmi.n	8010d6c <_fflush_r+0xc>
 8010da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010daa:	f7fe f9db 	bl	800f164 <__retarget_lock_release_recursive>
 8010dae:	e7dd      	b.n	8010d6c <_fflush_r+0xc>

08010db0 <_putc_r>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	460d      	mov	r5, r1
 8010db4:	4614      	mov	r4, r2
 8010db6:	4606      	mov	r6, r0
 8010db8:	b118      	cbz	r0, 8010dc2 <_putc_r+0x12>
 8010dba:	6a03      	ldr	r3, [r0, #32]
 8010dbc:	b90b      	cbnz	r3, 8010dc2 <_putc_r+0x12>
 8010dbe:	f7fe f88b 	bl	800eed8 <__sinit>
 8010dc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010dc4:	07d8      	lsls	r0, r3, #31
 8010dc6:	d405      	bmi.n	8010dd4 <_putc_r+0x24>
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	0599      	lsls	r1, r3, #22
 8010dcc:	d402      	bmi.n	8010dd4 <_putc_r+0x24>
 8010dce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010dd0:	f7fe f9c7 	bl	800f162 <__retarget_lock_acquire_recursive>
 8010dd4:	68a3      	ldr	r3, [r4, #8]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	60a3      	str	r3, [r4, #8]
 8010ddc:	da05      	bge.n	8010dea <_putc_r+0x3a>
 8010dde:	69a2      	ldr	r2, [r4, #24]
 8010de0:	4293      	cmp	r3, r2
 8010de2:	db12      	blt.n	8010e0a <_putc_r+0x5a>
 8010de4:	b2eb      	uxtb	r3, r5
 8010de6:	2b0a      	cmp	r3, #10
 8010de8:	d00f      	beq.n	8010e0a <_putc_r+0x5a>
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	1c5a      	adds	r2, r3, #1
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	701d      	strb	r5, [r3, #0]
 8010df2:	b2ed      	uxtb	r5, r5
 8010df4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010df6:	07da      	lsls	r2, r3, #31
 8010df8:	d405      	bmi.n	8010e06 <_putc_r+0x56>
 8010dfa:	89a3      	ldrh	r3, [r4, #12]
 8010dfc:	059b      	lsls	r3, r3, #22
 8010dfe:	d402      	bmi.n	8010e06 <_putc_r+0x56>
 8010e00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e02:	f7fe f9af 	bl	800f164 <__retarget_lock_release_recursive>
 8010e06:	4628      	mov	r0, r5
 8010e08:	bd70      	pop	{r4, r5, r6, pc}
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	4622      	mov	r2, r4
 8010e0e:	4630      	mov	r0, r6
 8010e10:	f000 f802 	bl	8010e18 <__swbuf_r>
 8010e14:	4605      	mov	r5, r0
 8010e16:	e7ed      	b.n	8010df4 <_putc_r+0x44>

08010e18 <__swbuf_r>:
 8010e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e1a:	460e      	mov	r6, r1
 8010e1c:	4614      	mov	r4, r2
 8010e1e:	4605      	mov	r5, r0
 8010e20:	b118      	cbz	r0, 8010e2a <__swbuf_r+0x12>
 8010e22:	6a03      	ldr	r3, [r0, #32]
 8010e24:	b90b      	cbnz	r3, 8010e2a <__swbuf_r+0x12>
 8010e26:	f7fe f857 	bl	800eed8 <__sinit>
 8010e2a:	69a3      	ldr	r3, [r4, #24]
 8010e2c:	60a3      	str	r3, [r4, #8]
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	071a      	lsls	r2, r3, #28
 8010e32:	d501      	bpl.n	8010e38 <__swbuf_r+0x20>
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	b943      	cbnz	r3, 8010e4a <__swbuf_r+0x32>
 8010e38:	4621      	mov	r1, r4
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f000 f82a 	bl	8010e94 <__swsetup_r>
 8010e40:	b118      	cbz	r0, 8010e4a <__swbuf_r+0x32>
 8010e42:	f04f 37ff 	mov.w	r7, #4294967295
 8010e46:	4638      	mov	r0, r7
 8010e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e4a:	6823      	ldr	r3, [r4, #0]
 8010e4c:	6922      	ldr	r2, [r4, #16]
 8010e4e:	1a98      	subs	r0, r3, r2
 8010e50:	6963      	ldr	r3, [r4, #20]
 8010e52:	b2f6      	uxtb	r6, r6
 8010e54:	4283      	cmp	r3, r0
 8010e56:	4637      	mov	r7, r6
 8010e58:	dc05      	bgt.n	8010e66 <__swbuf_r+0x4e>
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	f7ff ff7f 	bl	8010d60 <_fflush_r>
 8010e62:	2800      	cmp	r0, #0
 8010e64:	d1ed      	bne.n	8010e42 <__swbuf_r+0x2a>
 8010e66:	68a3      	ldr	r3, [r4, #8]
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	60a3      	str	r3, [r4, #8]
 8010e6c:	6823      	ldr	r3, [r4, #0]
 8010e6e:	1c5a      	adds	r2, r3, #1
 8010e70:	6022      	str	r2, [r4, #0]
 8010e72:	701e      	strb	r6, [r3, #0]
 8010e74:	6962      	ldr	r2, [r4, #20]
 8010e76:	1c43      	adds	r3, r0, #1
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d004      	beq.n	8010e86 <__swbuf_r+0x6e>
 8010e7c:	89a3      	ldrh	r3, [r4, #12]
 8010e7e:	07db      	lsls	r3, r3, #31
 8010e80:	d5e1      	bpl.n	8010e46 <__swbuf_r+0x2e>
 8010e82:	2e0a      	cmp	r6, #10
 8010e84:	d1df      	bne.n	8010e46 <__swbuf_r+0x2e>
 8010e86:	4621      	mov	r1, r4
 8010e88:	4628      	mov	r0, r5
 8010e8a:	f7ff ff69 	bl	8010d60 <_fflush_r>
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d0d9      	beq.n	8010e46 <__swbuf_r+0x2e>
 8010e92:	e7d6      	b.n	8010e42 <__swbuf_r+0x2a>

08010e94 <__swsetup_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4b29      	ldr	r3, [pc, #164]	@ (8010f3c <__swsetup_r+0xa8>)
 8010e98:	4605      	mov	r5, r0
 8010e9a:	6818      	ldr	r0, [r3, #0]
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	b118      	cbz	r0, 8010ea8 <__swsetup_r+0x14>
 8010ea0:	6a03      	ldr	r3, [r0, #32]
 8010ea2:	b90b      	cbnz	r3, 8010ea8 <__swsetup_r+0x14>
 8010ea4:	f7fe f818 	bl	800eed8 <__sinit>
 8010ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eac:	0719      	lsls	r1, r3, #28
 8010eae:	d422      	bmi.n	8010ef6 <__swsetup_r+0x62>
 8010eb0:	06da      	lsls	r2, r3, #27
 8010eb2:	d407      	bmi.n	8010ec4 <__swsetup_r+0x30>
 8010eb4:	2209      	movs	r2, #9
 8010eb6:	602a      	str	r2, [r5, #0]
 8010eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ebc:	81a3      	strh	r3, [r4, #12]
 8010ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec2:	e033      	b.n	8010f2c <__swsetup_r+0x98>
 8010ec4:	0758      	lsls	r0, r3, #29
 8010ec6:	d512      	bpl.n	8010eee <__swsetup_r+0x5a>
 8010ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eca:	b141      	cbz	r1, 8010ede <__swsetup_r+0x4a>
 8010ecc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ed0:	4299      	cmp	r1, r3
 8010ed2:	d002      	beq.n	8010eda <__swsetup_r+0x46>
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f7fe ffa3 	bl	800fe20 <_free_r>
 8010eda:	2300      	movs	r3, #0
 8010edc:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ede:	89a3      	ldrh	r3, [r4, #12]
 8010ee0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010ee4:	81a3      	strh	r3, [r4, #12]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	6063      	str	r3, [r4, #4]
 8010eea:	6923      	ldr	r3, [r4, #16]
 8010eec:	6023      	str	r3, [r4, #0]
 8010eee:	89a3      	ldrh	r3, [r4, #12]
 8010ef0:	f043 0308 	orr.w	r3, r3, #8
 8010ef4:	81a3      	strh	r3, [r4, #12]
 8010ef6:	6923      	ldr	r3, [r4, #16]
 8010ef8:	b94b      	cbnz	r3, 8010f0e <__swsetup_r+0x7a>
 8010efa:	89a3      	ldrh	r3, [r4, #12]
 8010efc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010f04:	d003      	beq.n	8010f0e <__swsetup_r+0x7a>
 8010f06:	4621      	mov	r1, r4
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f000 f8fb 	bl	8011104 <__smakebuf_r>
 8010f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f12:	f013 0201 	ands.w	r2, r3, #1
 8010f16:	d00a      	beq.n	8010f2e <__swsetup_r+0x9a>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	60a2      	str	r2, [r4, #8]
 8010f1c:	6962      	ldr	r2, [r4, #20]
 8010f1e:	4252      	negs	r2, r2
 8010f20:	61a2      	str	r2, [r4, #24]
 8010f22:	6922      	ldr	r2, [r4, #16]
 8010f24:	b942      	cbnz	r2, 8010f38 <__swsetup_r+0xa4>
 8010f26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010f2a:	d1c5      	bne.n	8010eb8 <__swsetup_r+0x24>
 8010f2c:	bd38      	pop	{r3, r4, r5, pc}
 8010f2e:	0799      	lsls	r1, r3, #30
 8010f30:	bf58      	it	pl
 8010f32:	6962      	ldrpl	r2, [r4, #20]
 8010f34:	60a2      	str	r2, [r4, #8]
 8010f36:	e7f4      	b.n	8010f22 <__swsetup_r+0x8e>
 8010f38:	2000      	movs	r0, #0
 8010f3a:	e7f7      	b.n	8010f2c <__swsetup_r+0x98>
 8010f3c:	20000114 	.word	0x20000114

08010f40 <memmove>:
 8010f40:	4288      	cmp	r0, r1
 8010f42:	b510      	push	{r4, lr}
 8010f44:	eb01 0402 	add.w	r4, r1, r2
 8010f48:	d902      	bls.n	8010f50 <memmove+0x10>
 8010f4a:	4284      	cmp	r4, r0
 8010f4c:	4623      	mov	r3, r4
 8010f4e:	d807      	bhi.n	8010f60 <memmove+0x20>
 8010f50:	1e43      	subs	r3, r0, #1
 8010f52:	42a1      	cmp	r1, r4
 8010f54:	d008      	beq.n	8010f68 <memmove+0x28>
 8010f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010f5e:	e7f8      	b.n	8010f52 <memmove+0x12>
 8010f60:	4402      	add	r2, r0
 8010f62:	4601      	mov	r1, r0
 8010f64:	428a      	cmp	r2, r1
 8010f66:	d100      	bne.n	8010f6a <memmove+0x2a>
 8010f68:	bd10      	pop	{r4, pc}
 8010f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010f72:	e7f7      	b.n	8010f64 <memmove+0x24>

08010f74 <_sbrk_r>:
 8010f74:	b538      	push	{r3, r4, r5, lr}
 8010f76:	4d06      	ldr	r5, [pc, #24]	@ (8010f90 <_sbrk_r+0x1c>)
 8010f78:	2300      	movs	r3, #0
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	4608      	mov	r0, r1
 8010f7e:	602b      	str	r3, [r5, #0]
 8010f80:	f7f0 fcc2 	bl	8001908 <_sbrk>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d102      	bne.n	8010f8e <_sbrk_r+0x1a>
 8010f88:	682b      	ldr	r3, [r5, #0]
 8010f8a:	b103      	cbz	r3, 8010f8e <_sbrk_r+0x1a>
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	bd38      	pop	{r3, r4, r5, pc}
 8010f90:	20002040 	.word	0x20002040

08010f94 <__assert_func>:
 8010f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f96:	4614      	mov	r4, r2
 8010f98:	461a      	mov	r2, r3
 8010f9a:	4b09      	ldr	r3, [pc, #36]	@ (8010fc0 <__assert_func+0x2c>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	4605      	mov	r5, r0
 8010fa0:	68d8      	ldr	r0, [r3, #12]
 8010fa2:	b954      	cbnz	r4, 8010fba <__assert_func+0x26>
 8010fa4:	4b07      	ldr	r3, [pc, #28]	@ (8010fc4 <__assert_func+0x30>)
 8010fa6:	461c      	mov	r4, r3
 8010fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010fac:	9100      	str	r1, [sp, #0]
 8010fae:	462b      	mov	r3, r5
 8010fb0:	4905      	ldr	r1, [pc, #20]	@ (8010fc8 <__assert_func+0x34>)
 8010fb2:	f000 f86f 	bl	8011094 <fiprintf>
 8010fb6:	f000 f903 	bl	80111c0 <abort>
 8010fba:	4b04      	ldr	r3, [pc, #16]	@ (8010fcc <__assert_func+0x38>)
 8010fbc:	e7f4      	b.n	8010fa8 <__assert_func+0x14>
 8010fbe:	bf00      	nop
 8010fc0:	20000114 	.word	0x20000114
 8010fc4:	08011676 	.word	0x08011676
 8010fc8:	08011648 	.word	0x08011648
 8010fcc:	0801163b 	.word	0x0801163b

08010fd0 <_calloc_r>:
 8010fd0:	b570      	push	{r4, r5, r6, lr}
 8010fd2:	fba1 5402 	umull	r5, r4, r1, r2
 8010fd6:	b93c      	cbnz	r4, 8010fe8 <_calloc_r+0x18>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	f7fe ff95 	bl	800ff08 <_malloc_r>
 8010fde:	4606      	mov	r6, r0
 8010fe0:	b928      	cbnz	r0, 8010fee <_calloc_r+0x1e>
 8010fe2:	2600      	movs	r6, #0
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	220c      	movs	r2, #12
 8010fea:	6002      	str	r2, [r0, #0]
 8010fec:	e7f9      	b.n	8010fe2 <_calloc_r+0x12>
 8010fee:	462a      	mov	r2, r5
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	f7fe f838 	bl	800f066 <memset>
 8010ff6:	e7f5      	b.n	8010fe4 <_calloc_r+0x14>

08010ff8 <__ascii_mbtowc>:
 8010ff8:	b082      	sub	sp, #8
 8010ffa:	b901      	cbnz	r1, 8010ffe <__ascii_mbtowc+0x6>
 8010ffc:	a901      	add	r1, sp, #4
 8010ffe:	b142      	cbz	r2, 8011012 <__ascii_mbtowc+0x1a>
 8011000:	b14b      	cbz	r3, 8011016 <__ascii_mbtowc+0x1e>
 8011002:	7813      	ldrb	r3, [r2, #0]
 8011004:	600b      	str	r3, [r1, #0]
 8011006:	7812      	ldrb	r2, [r2, #0]
 8011008:	1e10      	subs	r0, r2, #0
 801100a:	bf18      	it	ne
 801100c:	2001      	movne	r0, #1
 801100e:	b002      	add	sp, #8
 8011010:	4770      	bx	lr
 8011012:	4610      	mov	r0, r2
 8011014:	e7fb      	b.n	801100e <__ascii_mbtowc+0x16>
 8011016:	f06f 0001 	mvn.w	r0, #1
 801101a:	e7f8      	b.n	801100e <__ascii_mbtowc+0x16>

0801101c <_realloc_r>:
 801101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011020:	4680      	mov	r8, r0
 8011022:	4615      	mov	r5, r2
 8011024:	460c      	mov	r4, r1
 8011026:	b921      	cbnz	r1, 8011032 <_realloc_r+0x16>
 8011028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801102c:	4611      	mov	r1, r2
 801102e:	f7fe bf6b 	b.w	800ff08 <_malloc_r>
 8011032:	b92a      	cbnz	r2, 8011040 <_realloc_r+0x24>
 8011034:	f7fe fef4 	bl	800fe20 <_free_r>
 8011038:	2400      	movs	r4, #0
 801103a:	4620      	mov	r0, r4
 801103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011040:	f000 f8c5 	bl	80111ce <_malloc_usable_size_r>
 8011044:	4285      	cmp	r5, r0
 8011046:	4606      	mov	r6, r0
 8011048:	d802      	bhi.n	8011050 <_realloc_r+0x34>
 801104a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801104e:	d8f4      	bhi.n	801103a <_realloc_r+0x1e>
 8011050:	4629      	mov	r1, r5
 8011052:	4640      	mov	r0, r8
 8011054:	f7fe ff58 	bl	800ff08 <_malloc_r>
 8011058:	4607      	mov	r7, r0
 801105a:	2800      	cmp	r0, #0
 801105c:	d0ec      	beq.n	8011038 <_realloc_r+0x1c>
 801105e:	42b5      	cmp	r5, r6
 8011060:	462a      	mov	r2, r5
 8011062:	4621      	mov	r1, r4
 8011064:	bf28      	it	cs
 8011066:	4632      	movcs	r2, r6
 8011068:	f7fe f87d 	bl	800f166 <memcpy>
 801106c:	4621      	mov	r1, r4
 801106e:	4640      	mov	r0, r8
 8011070:	f7fe fed6 	bl	800fe20 <_free_r>
 8011074:	463c      	mov	r4, r7
 8011076:	e7e0      	b.n	801103a <_realloc_r+0x1e>

08011078 <__ascii_wctomb>:
 8011078:	4603      	mov	r3, r0
 801107a:	4608      	mov	r0, r1
 801107c:	b141      	cbz	r1, 8011090 <__ascii_wctomb+0x18>
 801107e:	2aff      	cmp	r2, #255	@ 0xff
 8011080:	d904      	bls.n	801108c <__ascii_wctomb+0x14>
 8011082:	228a      	movs	r2, #138	@ 0x8a
 8011084:	601a      	str	r2, [r3, #0]
 8011086:	f04f 30ff 	mov.w	r0, #4294967295
 801108a:	4770      	bx	lr
 801108c:	700a      	strb	r2, [r1, #0]
 801108e:	2001      	movs	r0, #1
 8011090:	4770      	bx	lr
	...

08011094 <fiprintf>:
 8011094:	b40e      	push	{r1, r2, r3}
 8011096:	b503      	push	{r0, r1, lr}
 8011098:	4601      	mov	r1, r0
 801109a:	ab03      	add	r3, sp, #12
 801109c:	4805      	ldr	r0, [pc, #20]	@ (80110b4 <fiprintf+0x20>)
 801109e:	f853 2b04 	ldr.w	r2, [r3], #4
 80110a2:	6800      	ldr	r0, [r0, #0]
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	f7ff fcbf 	bl	8010a28 <_vfiprintf_r>
 80110aa:	b002      	add	sp, #8
 80110ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80110b0:	b003      	add	sp, #12
 80110b2:	4770      	bx	lr
 80110b4:	20000114 	.word	0x20000114

080110b8 <__swhatbuf_r>:
 80110b8:	b570      	push	{r4, r5, r6, lr}
 80110ba:	460c      	mov	r4, r1
 80110bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110c0:	2900      	cmp	r1, #0
 80110c2:	b096      	sub	sp, #88	@ 0x58
 80110c4:	4615      	mov	r5, r2
 80110c6:	461e      	mov	r6, r3
 80110c8:	da0d      	bge.n	80110e6 <__swhatbuf_r+0x2e>
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80110d0:	f04f 0100 	mov.w	r1, #0
 80110d4:	bf14      	ite	ne
 80110d6:	2340      	movne	r3, #64	@ 0x40
 80110d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80110dc:	2000      	movs	r0, #0
 80110de:	6031      	str	r1, [r6, #0]
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	b016      	add	sp, #88	@ 0x58
 80110e4:	bd70      	pop	{r4, r5, r6, pc}
 80110e6:	466a      	mov	r2, sp
 80110e8:	f000 f848 	bl	801117c <_fstat_r>
 80110ec:	2800      	cmp	r0, #0
 80110ee:	dbec      	blt.n	80110ca <__swhatbuf_r+0x12>
 80110f0:	9901      	ldr	r1, [sp, #4]
 80110f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80110f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80110fa:	4259      	negs	r1, r3
 80110fc:	4159      	adcs	r1, r3
 80110fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011102:	e7eb      	b.n	80110dc <__swhatbuf_r+0x24>

08011104 <__smakebuf_r>:
 8011104:	898b      	ldrh	r3, [r1, #12]
 8011106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011108:	079d      	lsls	r5, r3, #30
 801110a:	4606      	mov	r6, r0
 801110c:	460c      	mov	r4, r1
 801110e:	d507      	bpl.n	8011120 <__smakebuf_r+0x1c>
 8011110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011114:	6023      	str	r3, [r4, #0]
 8011116:	6123      	str	r3, [r4, #16]
 8011118:	2301      	movs	r3, #1
 801111a:	6163      	str	r3, [r4, #20]
 801111c:	b003      	add	sp, #12
 801111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011120:	ab01      	add	r3, sp, #4
 8011122:	466a      	mov	r2, sp
 8011124:	f7ff ffc8 	bl	80110b8 <__swhatbuf_r>
 8011128:	9f00      	ldr	r7, [sp, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	4639      	mov	r1, r7
 801112e:	4630      	mov	r0, r6
 8011130:	f7fe feea 	bl	800ff08 <_malloc_r>
 8011134:	b948      	cbnz	r0, 801114a <__smakebuf_r+0x46>
 8011136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801113a:	059a      	lsls	r2, r3, #22
 801113c:	d4ee      	bmi.n	801111c <__smakebuf_r+0x18>
 801113e:	f023 0303 	bic.w	r3, r3, #3
 8011142:	f043 0302 	orr.w	r3, r3, #2
 8011146:	81a3      	strh	r3, [r4, #12]
 8011148:	e7e2      	b.n	8011110 <__smakebuf_r+0xc>
 801114a:	89a3      	ldrh	r3, [r4, #12]
 801114c:	6020      	str	r0, [r4, #0]
 801114e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011152:	81a3      	strh	r3, [r4, #12]
 8011154:	9b01      	ldr	r3, [sp, #4]
 8011156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801115a:	b15b      	cbz	r3, 8011174 <__smakebuf_r+0x70>
 801115c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011160:	4630      	mov	r0, r6
 8011162:	f000 f81d 	bl	80111a0 <_isatty_r>
 8011166:	b128      	cbz	r0, 8011174 <__smakebuf_r+0x70>
 8011168:	89a3      	ldrh	r3, [r4, #12]
 801116a:	f023 0303 	bic.w	r3, r3, #3
 801116e:	f043 0301 	orr.w	r3, r3, #1
 8011172:	81a3      	strh	r3, [r4, #12]
 8011174:	89a3      	ldrh	r3, [r4, #12]
 8011176:	431d      	orrs	r5, r3
 8011178:	81a5      	strh	r5, [r4, #12]
 801117a:	e7cf      	b.n	801111c <__smakebuf_r+0x18>

0801117c <_fstat_r>:
 801117c:	b538      	push	{r3, r4, r5, lr}
 801117e:	4d07      	ldr	r5, [pc, #28]	@ (801119c <_fstat_r+0x20>)
 8011180:	2300      	movs	r3, #0
 8011182:	4604      	mov	r4, r0
 8011184:	4608      	mov	r0, r1
 8011186:	4611      	mov	r1, r2
 8011188:	602b      	str	r3, [r5, #0]
 801118a:	f7f0 fb95 	bl	80018b8 <_fstat>
 801118e:	1c43      	adds	r3, r0, #1
 8011190:	d102      	bne.n	8011198 <_fstat_r+0x1c>
 8011192:	682b      	ldr	r3, [r5, #0]
 8011194:	b103      	cbz	r3, 8011198 <_fstat_r+0x1c>
 8011196:	6023      	str	r3, [r4, #0]
 8011198:	bd38      	pop	{r3, r4, r5, pc}
 801119a:	bf00      	nop
 801119c:	20002040 	.word	0x20002040

080111a0 <_isatty_r>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	4d06      	ldr	r5, [pc, #24]	@ (80111bc <_isatty_r+0x1c>)
 80111a4:	2300      	movs	r3, #0
 80111a6:	4604      	mov	r4, r0
 80111a8:	4608      	mov	r0, r1
 80111aa:	602b      	str	r3, [r5, #0]
 80111ac:	f7f0 fb94 	bl	80018d8 <_isatty>
 80111b0:	1c43      	adds	r3, r0, #1
 80111b2:	d102      	bne.n	80111ba <_isatty_r+0x1a>
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	b103      	cbz	r3, 80111ba <_isatty_r+0x1a>
 80111b8:	6023      	str	r3, [r4, #0]
 80111ba:	bd38      	pop	{r3, r4, r5, pc}
 80111bc:	20002040 	.word	0x20002040

080111c0 <abort>:
 80111c0:	b508      	push	{r3, lr}
 80111c2:	2006      	movs	r0, #6
 80111c4:	f000 f834 	bl	8011230 <raise>
 80111c8:	2001      	movs	r0, #1
 80111ca:	f7f0 fb25 	bl	8001818 <_exit>

080111ce <_malloc_usable_size_r>:
 80111ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111d2:	1f18      	subs	r0, r3, #4
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	bfbc      	itt	lt
 80111d8:	580b      	ldrlt	r3, [r1, r0]
 80111da:	18c0      	addlt	r0, r0, r3
 80111dc:	4770      	bx	lr

080111de <_raise_r>:
 80111de:	291f      	cmp	r1, #31
 80111e0:	b538      	push	{r3, r4, r5, lr}
 80111e2:	4605      	mov	r5, r0
 80111e4:	460c      	mov	r4, r1
 80111e6:	d904      	bls.n	80111f2 <_raise_r+0x14>
 80111e8:	2316      	movs	r3, #22
 80111ea:	6003      	str	r3, [r0, #0]
 80111ec:	f04f 30ff 	mov.w	r0, #4294967295
 80111f0:	bd38      	pop	{r3, r4, r5, pc}
 80111f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80111f4:	b112      	cbz	r2, 80111fc <_raise_r+0x1e>
 80111f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80111fa:	b94b      	cbnz	r3, 8011210 <_raise_r+0x32>
 80111fc:	4628      	mov	r0, r5
 80111fe:	f000 f831 	bl	8011264 <_getpid_r>
 8011202:	4622      	mov	r2, r4
 8011204:	4601      	mov	r1, r0
 8011206:	4628      	mov	r0, r5
 8011208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801120c:	f000 b818 	b.w	8011240 <_kill_r>
 8011210:	2b01      	cmp	r3, #1
 8011212:	d00a      	beq.n	801122a <_raise_r+0x4c>
 8011214:	1c59      	adds	r1, r3, #1
 8011216:	d103      	bne.n	8011220 <_raise_r+0x42>
 8011218:	2316      	movs	r3, #22
 801121a:	6003      	str	r3, [r0, #0]
 801121c:	2001      	movs	r0, #1
 801121e:	e7e7      	b.n	80111f0 <_raise_r+0x12>
 8011220:	2100      	movs	r1, #0
 8011222:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011226:	4620      	mov	r0, r4
 8011228:	4798      	blx	r3
 801122a:	2000      	movs	r0, #0
 801122c:	e7e0      	b.n	80111f0 <_raise_r+0x12>
	...

08011230 <raise>:
 8011230:	4b02      	ldr	r3, [pc, #8]	@ (801123c <raise+0xc>)
 8011232:	4601      	mov	r1, r0
 8011234:	6818      	ldr	r0, [r3, #0]
 8011236:	f7ff bfd2 	b.w	80111de <_raise_r>
 801123a:	bf00      	nop
 801123c:	20000114 	.word	0x20000114

08011240 <_kill_r>:
 8011240:	b538      	push	{r3, r4, r5, lr}
 8011242:	4d07      	ldr	r5, [pc, #28]	@ (8011260 <_kill_r+0x20>)
 8011244:	2300      	movs	r3, #0
 8011246:	4604      	mov	r4, r0
 8011248:	4608      	mov	r0, r1
 801124a:	4611      	mov	r1, r2
 801124c:	602b      	str	r3, [r5, #0]
 801124e:	f7f0 fad3 	bl	80017f8 <_kill>
 8011252:	1c43      	adds	r3, r0, #1
 8011254:	d102      	bne.n	801125c <_kill_r+0x1c>
 8011256:	682b      	ldr	r3, [r5, #0]
 8011258:	b103      	cbz	r3, 801125c <_kill_r+0x1c>
 801125a:	6023      	str	r3, [r4, #0]
 801125c:	bd38      	pop	{r3, r4, r5, pc}
 801125e:	bf00      	nop
 8011260:	20002040 	.word	0x20002040

08011264 <_getpid_r>:
 8011264:	f7f0 bac0 	b.w	80017e8 <_getpid>

08011268 <_init>:
 8011268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801126a:	bf00      	nop
 801126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801126e:	bc08      	pop	{r3}
 8011270:	469e      	mov	lr, r3
 8011272:	4770      	bx	lr

08011274 <_fini>:
 8011274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011276:	bf00      	nop
 8011278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801127a:	bc08      	pop	{r3}
 801127c:	469e      	mov	lr, r3
 801127e:	4770      	bx	lr
