
Rattatouille_Transfer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8c0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800ea00  0800ea00  0000fa00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ebac  0800ebac  0000fbac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ebb4  0800ebb4  0000fbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ebb8  0800ebb8  0000fbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000178  20000008  0800ebbc  00010008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d5c  20000180  0800ed34  00010180  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20001edc  0800ed34  00010edc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010180  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026053  00000000  00000000  000101b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004eb1  00000000  00000000  00036203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024a0  00000000  00000000  0003b0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c0a  00000000  00000000  0003d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002903e  00000000  00000000  0003f162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000276c8  00000000  00000000  000681a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fa04e  00000000  00000000  0008f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001898b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a3c0  00000000  00000000  001898fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  00193cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000180 	.word	0x20000180
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e9e8 	.word	0x0800e9e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000184 	.word	0x20000184
 800017c:	0800e9e8 	.word	0x0800e9e8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000542:	b480      	push	{r7}
 8000544:	b085      	sub	sp, #20
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800054a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800054e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4313      	orrs	r3, r2
 8000558:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800055a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800055e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e00a      	b.n	8000598 <HAL_TIM_PeriodElapsedCallback+0x24>
		  Xaxis = (uint16_t) rawValues[0];
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000584:	881a      	ldrh	r2, [r3, #0]
 8000586:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000588:	801a      	strh	r2, [r3, #0]
		  Yaxis = (uint16_t) rawValues[1];
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800058c:	885a      	ldrh	r2, [r3, #2]
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000590:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	3301      	adds	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d3ef      	bcc.n	8000582 <HAL_TIM_PeriodElapsedCallback+0xe>
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20000310 	.word	0x20000310
 80005b4:	2000030c 	.word	0x2000030c
 80005b8:	2000030e 	.word	0x2000030e
 80005bc:	200001ac 	.word	0x200001ac

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fe96 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f850 	bl	800066c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005cc:	f000 f8b2 	bl	8000734 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f9f8 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f9e4 	bl	80009a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005d8:	f000 f8de 	bl	8000798 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005dc:	f000 f992 	bl	8000904 <MX_TIM2_Init>
  MX_USB_Device_Init();
 80005e0:	f00c fd7a 	bl	800d0d8 <MX_USB_Device_Init>
  MX_I2C1_SMBUS_Init();
 80005e4:	f000 f94c 	bl	8000880 <MX_I2C1_SMBUS_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80005e8:	2202      	movs	r2, #2
 80005ea:	491c      	ldr	r1, [pc, #112]	@ (800065c <main+0x9c>)
 80005ec:	481c      	ldr	r0, [pc, #112]	@ (8000660 <main+0xa0>)
 80005ee:	f001 fa5f 	bl	8001ab0 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 80005f2:	481c      	ldr	r0, [pc, #112]	@ (8000664 <main+0xa4>)
 80005f4:	f007 f990 	bl	8007918 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fd23 	bl	8001044 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fd20 	bl	8001044 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fd1d 	bl	8001044 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800060a:	2101      	movs	r1, #1
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fd53 	bl	80010b8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000612:	2101      	movs	r1, #1
 8000614:	2001      	movs	r0, #1
 8000616:	f000 fd4f 	bl	80010b8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800061a:	2101      	movs	r1, #1
 800061c:	2002      	movs	r0, #2
 800061e:	f000 fd4b 	bl	80010b8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <main+0xa8>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000628:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <main+0xa8>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <main+0xa8>)
 8000632:	2200      	movs	r2, #0
 8000634:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <main+0xa8>)
 8000638:	2200      	movs	r2, #0
 800063a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <main+0xa8>)
 800063e:	2200      	movs	r2, #0
 8000640:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000642:	4909      	ldr	r1, [pc, #36]	@ (8000668 <main+0xa8>)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 fda7 	bl	8001198 <BSP_COM_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <main+0x96>
  {
    Error_Handler();
 8000650:	f000 f9e4 	bl	8000a1c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  while (1)
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x96>
 800065a:	bf00      	nop
 800065c:	20000310 	.word	0x20000310
 8000660:	200001ac 	.word	0x200001ac
 8000664:	200002c0 	.word	0x200002c0
 8000668:	2000019c 	.word	0x2000019c

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09a      	sub	sp, #104	@ 0x68
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2248      	movs	r2, #72	@ 0x48
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f00d fb67 	bl	800dd4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xc4>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800069a:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <SystemClock_Config+0xc4>)
 800069c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006a0:	6013      	str	r3, [r2, #0]
 80006a2:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <SystemClock_Config+0xc4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006ae:	2303      	movs	r3, #3
 80006b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2340      	movs	r3, #64	@ 0x40
 80006c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	2303      	movs	r3, #3
 80006c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80006ca:	2310      	movs	r3, #16
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ce:	2308      	movs	r3, #8
 80006d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80006d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006e2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 ff4f 	bl	800558c <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006f4:	f000 f992 	bl	8000a1c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006f8:	236f      	movs	r3, #111	@ 0x6f
 80006fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2303      	movs	r3, #3
 80006fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f005 faab 	bl	8005c74 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000724:	f000 f97a 	bl	8000a1c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3768      	adds	r7, #104	@ 0x68
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	58000400 	.word	0x58000400

08000734 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2250      	movs	r2, #80	@ 0x50
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f00d fb04 	bl	800dd4e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8000746:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800074a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800074c:	2306      	movs	r3, #6
 800074e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000750:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800075c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000760:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000762:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8000766:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000768:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800076c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800076e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000778:	2300      	movs	r3, #0
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4618      	mov	r0, r3
 8000780:	f005 feb5 	bl	80064ee <HAL_RCCEx_PeriphCLKConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800078a:	f000 f947 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ae:	4b30      	ldr	r3, [pc, #192]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007b0:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <MX_ADC1_Init+0xdc>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80007b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b28      	ldr	r3, [pc, #160]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007e2:	2202      	movs	r2, #2
 80007e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_ADC1_Init+0xd8>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_ADC1_Init+0xd8>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_ADC1_Init+0xd8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	4817      	ldr	r0, [pc, #92]	@ (8000870 <MX_ADC1_Init+0xd8>)
 8000812:	f001 f801 	bl	8001818 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800081c:	f000 f8fe 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000820:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_ADC1_Init+0xe0>)
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2306      	movs	r3, #6
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000828:	2306      	movs	r3, #6
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082c:	237f      	movs	r3, #127	@ 0x7f
 800082e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000830:	2304      	movs	r3, #4
 8000832:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	480c      	ldr	r0, [pc, #48]	@ (8000870 <MX_ADC1_Init+0xd8>)
 800083e:	f001 fb99 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000848:	f000 f8e8 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_ADC1_Init+0xe4>)
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000850:	230c      	movs	r3, #12
 8000852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_ADC1_Init+0xd8>)
 800085a:	f001 fb8b 	bl	8001f74 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000864:	f000 f8da 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001ac 	.word	0x200001ac
 8000874:	50040000 	.word	0x50040000
 8000878:	04300002 	.word	0x04300002
 800087c:	08600004 	.word	0x08600004

08000880 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 8000886:	4a1d      	ldr	r2, [pc, #116]	@ (80008fc <MX_I2C1_SMBUS_Init+0x7c>)
 8000888:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10B17DB5;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 800088c:	4a1c      	ldr	r2, [pc, #112]	@ (8000900 <MX_I2C1_SMBUS_Init+0x80>)
 800088e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 800089e:	2201      	movs	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x0000830D;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008ce:	f248 320d 	movw	r2, #33549	@ 0x830d
 80008d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008d6:	f006 f891 	bl	80069fc <HAL_SMBUS_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 80008e0:	f000 f89c 	bl	8000a1c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_I2C1_SMBUS_Init+0x78>)
 80008e6:	f006 f941 	bl	8006b6c <HAL_SMBUS_EnableAlert_IT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_SMBUS_Init+0x74>
  {
    Error_Handler();
 80008f0:	f000 f894 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000270 	.word	0x20000270
 80008fc:	40005400 	.word	0x40005400
 8000900:	10b17db5 	.word	0x10b17db5

08000904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_TIM2_Init+0x98>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_TIM2_Init+0x98>)
 800092c:	220a      	movs	r2, #10
 800092e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_TIM2_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32000-1;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_TIM2_Init+0x98>)
 8000938:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800093c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_TIM2_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_TIM2_Init+0x98>)
 8000946:	2280      	movs	r2, #128	@ 0x80
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	@ (800099c <MX_TIM2_Init+0x98>)
 800094c:	f006 ff8c 	bl	8007868 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 f861 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_TIM2_Init+0x98>)
 8000968:	f007 f92b 	bl	8007bc2 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000972:	f000 f853 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000976:	2320      	movs	r3, #32
 8000978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <MX_TIM2_Init+0x98>)
 8000984:	f007 fb1a 	bl	8007fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800098e:	f000 f845 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002c0 	.word	0x200002c0

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009a4:	2004      	movs	r0, #4
 80009a6:	f7ff fdb3 	bl	8000510 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009aa:	2001      	movs	r0, #1
 80009ac:	f7ff fdb0 	bl	8000510 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	200b      	movs	r0, #11
 80009b6:	f002 f8be 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009ba:	200b      	movs	r0, #11
 80009bc:	f002 f8d5 	bl	8002b6a <HAL_NVIC_EnableIRQ>

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	2004      	movs	r0, #4
 80009da:	f7ff fdb2 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff fdaf 	bl	8000542 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff fdac 	bl	8000542 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2103      	movs	r1, #3
 80009ee:	480a      	ldr	r0, [pc, #40]	@ (8000a18 <MX_GPIO_Init+0x54>)
 80009f0:	f002 fcba 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009f4:	2303      	movs	r3, #3
 80009f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4803      	ldr	r0, [pc, #12]	@ (8000a18 <MX_GPIO_Init+0x54>)
 8000a0a:	f002 fb3d 	bl	8003088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0e:	bf00      	nop
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	48000400 	.word	0x48000400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <LL_AHB2_GRP1_EnableClock>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a26      	ldr	r2, [pc, #152]	@ (8000b54 <HAL_ADC_MspInit+0xb8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d145      	bne.n	8000b4a <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000abe:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ac2:	f7ff ffb1 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2004      	movs	r0, #4
 8000ac8:	f7ff ffae 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	4619      	mov	r1, r3
 8000ade:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <HAL_ADC_MspInit+0xbc>)
 8000ae0:	f002 fad2 	bl	8003088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_ADC_MspInit+0xc4>)
 8000ae8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000aec:	2205      	movs	r2, #5
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b14:	2220      	movs	r2, #32
 8000b16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b1e:	480f      	ldr	r0, [pc, #60]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b20:	f002 f83e 	bl	8002ba0 <HAL_DMA_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8000b2a:	f7ff ff77 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b32:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b34:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <HAL_ADC_MspInit+0xc0>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	2012      	movs	r0, #18
 8000b40:	f001 fff9 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000b44:	2012      	movs	r0, #18
 8000b46:	f002 f810 	bl	8002b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	50040000 	.word	0x50040000
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	20000210 	.word	0x20000210
 8000b60:	40020008 	.word	0x40020008

08000b64 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	@ 0x70
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2250      	movs	r2, #80	@ 0x50
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00d f8e2 	bl	800dd4e <memset>
  if(hsmbus->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a29      	ldr	r2, [pc, #164]	@ (8000c34 <HAL_SMBUS_MspInit+0xd0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d14a      	bne.n	8000c2a <HAL_SMBUS_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	2304      	movs	r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b98:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fca3 	bl	80064ee <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 8000bae:	f7ff ff35 	bl	8000a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff ff38 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff35 	bl	8000a28 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    PA1     ------> I2C1_SMBA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc4:	2312      	movs	r3, #18
 8000bc6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <HAL_SMBUS_MspInit+0xd4>)
 8000bdc:	f002 fa54 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000be0:	2302      	movs	r3, #2
 8000be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be4:	2312      	movs	r3, #18
 8000be6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfe:	f002 fa43 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000c06:	f7ff ff28 	bl	8000a5a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	201e      	movs	r0, #30
 8000c10:	f001 ff91 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c14:	201e      	movs	r0, #30
 8000c16:	f001 ffa8 	bl	8002b6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	201f      	movs	r0, #31
 8000c20:	f001 ff89 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c24:	201f      	movs	r0, #31
 8000c26:	f001 ffa0 	bl	8002b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3770      	adds	r7, #112	@ 0x70
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	48000400 	.word	0x48000400

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c4c:	d10a      	bne.n	8000c64 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff03 	bl	8000a5a <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	201c      	movs	r0, #28
 8000c5a:	f001 ff6c 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c5e:	201c      	movs	r0, #28
 8000c60:	f001 ff83 	bl	8002b6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <NMI_Handler+0x4>

08000c74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <MemManage_Handler+0x4>

08000c84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc2:	f000 fb71 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f002 fb62 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f002 fb5b 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8000cea:	2010      	movs	r0, #16
 8000cec:	f002 fb54 	bl	8003398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <DMA1_Channel1_IRQHandler+0x10>)
 8000cfa:	f002 f874 	bl	8002de6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000210 	.word	0x20000210

08000d08 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <ADC1_IRQHandler+0x10>)
 8000d0e:	f000 ff53 	bl	8001bb8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001ac 	.word	0x200001ac

08000d1c <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d20:	4802      	ldr	r0, [pc, #8]	@ (8000d2c <USB_HP_IRQHandler+0x10>)
 8000d22:	f002 fc4c 	bl	80035be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20001894 	.word	0x20001894

08000d30 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <USB_LP_IRQHandler+0x10>)
 8000d36:	f002 fc42 	bl	80035be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20001894 	.word	0x20001894

08000d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <TIM2_IRQHandler+0x10>)
 8000d4a:	f006 fe33 	bl	80079b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200002c0 	.word	0x200002c0

08000d58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	@ (8000d68 <I2C1_EV_IRQHandler+0x10>)
 8000d5e:	f005 ff1f 	bl	8006ba0 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000270 	.word	0x20000270

08000d6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus1);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <I2C1_ER_IRQHandler+0x10>)
 8000d72:	f005 ffb3 	bl	8006cdc <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000270 	.word	0x20000270

08000d80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	e00a      	b.n	8000da8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d92:	f3af 8000 	nop.w
 8000d96:	4601      	mov	r1, r0
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	60ba      	str	r2, [r7, #8]
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf0      	blt.n	8000d92 <_read+0x12>
  }

  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	60f8      	str	r0, [r7, #12]
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	e009      	b.n	8000de0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fa41 	bl	800125c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf1      	blt.n	8000dcc <_write+0x12>
  }
  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_close>:

int _close(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
 8000e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_isatty>:

int _isatty(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f00c ffae 	bl	800ddec <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	@ (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20030000 	.word	0x20030000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000314 	.word	0x20000314
 8000ec4:	20001ee0 	.word	0x20001ee0

08000ec8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <SystemInit+0x98>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed2:	4a23      	ldr	r2, [pc, #140]	@ (8000f60 <SystemInit+0x98>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ef0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000ef4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <SystemInit+0x9c>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f12:	f023 0305 	bic.w	r3, r3, #5
 8000f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f32:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <SystemInit+0xa0>)
 8000f34:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <SystemInit+0xa0>)
 8000f3c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	faf6fefb 	.word	0xfaf6fefb
 8000f68:	22041000 	.word	0x22041000

08000f6c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f6c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f6e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f70:	3304      	adds	r3, #4

08000f72 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f72:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f74:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f76:	d3f9      	bcc.n	8000f6c <CopyDataInit>
  bx lr
 8000f78:	4770      	bx	lr

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f7a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f7c:	3004      	adds	r0, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f7e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>
  bx lr
 8000f82:	4770      	bx	lr

08000f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f84:	480c      	ldr	r0, [pc, #48]	@ (8000fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f88:	f7ff ff9e 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <LoopForever+0x6>)
 8000f8e:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <LoopForever+0xa>)
 8000f90:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <LoopForever+0xe>)
 8000f92:	2300      	movs	r3, #0
 8000f94:	f7ff ffed 	bl	8000f72 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f98:	480b      	ldr	r0, [pc, #44]	@ (8000fc8 <LoopForever+0x12>)
 8000f9a:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <LoopForever+0x16>)
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <LoopForever+0x1a>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f7ff ffe7 	bl	8000f72 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fa4:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <LoopForever+0x1e>)
 8000fa6:	490c      	ldr	r1, [pc, #48]	@ (8000fd8 <LoopForever+0x22>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f7ff ffe8 	bl	8000f7e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fae:	f00c ff23 	bl	800ddf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fb2:	f7ff fb05 	bl	80005c0 <main>

08000fb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   r0, =_estack
 8000fb8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000180 	.word	0x20000180
 8000fc4:	0800ebbc 	.word	0x0800ebbc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fc8:	20030000 	.word	0x20030000
 8000fcc:	20030000 	.word	0x20030000
 8000fd0:	0800ed34 	.word	0x0800ed34
  INIT_BSS _sbss, _ebss
 8000fd4:	20000180 	.word	0x20000180
 8000fd8:	20001edc 	.word	0x20001edc

08000fdc <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <AES1_IRQHandler>

08000fde <LL_AHB2_GRP1_EnableClock>:
{
 8000fde:	b480      	push	{r7}
 8000fe0:	b085      	sub	sp, #20
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4013      	ands	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800101c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800101e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800102c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff ffbd 	bl	8000fde <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <BSP_LED_Init+0x6c>)
 8001068:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800106c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <BSP_LED_Init+0x70>)
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	f107 020c 	add.w	r2, r7, #12
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fffd 	bl	8003088 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <BSP_LED_Init+0x70>)
 8001092:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <BSP_LED_Init+0x6c>)
 800109a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	f002 f961 	bl	8003368 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800eb4c 	.word	0x0800eb4c
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <BSP_PB_Init+0x2e>
 80010de:	2004      	movs	r0, #4
 80010e0:	f7ff ff7d 	bl	8000fde <LL_AHB2_GRP1_EnableClock>
 80010e4:	e00c      	b.n	8001100 <BSP_PB_Init+0x48>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d103      	bne.n	80010f4 <BSP_PB_Init+0x3c>
 80010ec:	2008      	movs	r0, #8
 80010ee:	f7ff ff76 	bl	8000fde <LL_AHB2_GRP1_EnableClock>
 80010f2:	e005      	b.n	8001100 <BSP_PB_Init+0x48>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d102      	bne.n	8001100 <BSP_PB_Init+0x48>
 80010fa:	2008      	movs	r0, #8
 80010fc:	f7ff ff6f 	bl	8000fde <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001100:	79bb      	ldrb	r3, [r7, #6]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d117      	bne.n	8001136 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4a20      	ldr	r2, [pc, #128]	@ (800118c <BSP_PB_Init+0xd4>)
 800110a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <BSP_PB_Init+0xd8>)
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	f107 020c 	add.w	r2, r7, #12
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 ffac 	bl	8003088 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 f965 	bl	8001400 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d123      	bne.n	8001184 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	4a13      	ldr	r2, [pc, #76]	@ (800118c <BSP_PB_Init+0xd4>)
 8001140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001144:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001146:	2301      	movs	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800114a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800114e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <BSP_PB_Init+0xd8>)
 8001154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001158:	f107 020c 	add.w	r2, r7, #12
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 ff92 	bl	8003088 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4a0b      	ldr	r2, [pc, #44]	@ (8001194 <BSP_PB_Init+0xdc>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	2200      	movs	r2, #0
 800116e:	210f      	movs	r1, #15
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fce0 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <BSP_PB_Init+0xdc>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	b25b      	sxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fcf3 	bl	8002b6a <HAL_NVIC_EnableIRQ>
  }
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0800eb54 	.word	0x0800eb54
 8001190:	20000018 	.word	0x20000018
 8001194:	0800eb5c 	.word	0x0800eb5c

08001198 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d903      	bls.n	80011b6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011ae:	f06f 0301 	mvn.w	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e018      	b.n	80011e8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2294      	movs	r2, #148	@ 0x94
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <BSP_COM_Init+0x5c>)
 80011c0:	4413      	add	r3, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f866 	bl	8001294 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2294      	movs	r2, #148	@ 0x94
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	4a08      	ldr	r2, [pc, #32]	@ (80011f4 <BSP_COM_Init+0x5c>)
 80011d2:	4413      	add	r3, r2
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f80e 	bl	80011f8 <MX_LPUART1_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80011e2:	f06f 0303 	mvn.w	r3, #3
 80011e6:	e000      	b.n	80011ea <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000318 	.word	0x20000318

080011f8 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_LPUART1_Init+0x60>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	220c      	movs	r2, #12
 8001216:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	895b      	ldrh	r3, [r3, #10]
 800121c:	461a      	mov	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	891b      	ldrh	r3, [r3, #8]
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	899b      	ldrh	r3, [r3, #12]
 8001238:	461a      	mov	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001244:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f006 ff56 	bl	80080f8 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000024 	.word	0x20000024

0800125c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <__io_putchar+0x30>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	2394      	movs	r3, #148	@ 0x94
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <__io_putchar+0x34>)
 8001272:	1898      	adds	r0, r3, r2
 8001274:	1d39      	adds	r1, r7, #4
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	2201      	movs	r2, #1
 800127c:	f006 ff96 	bl	80081ac <HAL_UART_Transmit>
  return ch;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200003ac 	.word	0x200003ac
 8001290:	20000318 	.word	0x20000318

08001294 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fe9e 	bl	8000fde <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 80012a2:	2002      	movs	r0, #2
 80012a4:	f7ff fe9b 	bl	8000fde <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80012a8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80012ac:	f7ff feb0 	bl	8001010 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80012c0:	2307      	movs	r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <COM1_MspInit+0x5c>)
 80012cc:	f001 fedc 	bl	8003088 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80012d8:	2307      	movs	r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	4803      	ldr	r0, [pc, #12]	@ (80012f0 <COM1_MspInit+0x5c>)
 80012e4:	f001 fed0 	bl	8003088 <HAL_GPIO_Init>
}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	48000400 	.word	0x48000400

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <HAL_Init+0x3c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0b      	ldr	r2, [pc, #44]	@ (8001330 <HAL_Init+0x3c>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001308:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f001 fc08 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f80f 	bl	8001334 <HAL_InitTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	e001      	b.n	8001326 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001322:	f7ff fbb3 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001326:	79fb      	ldrb	r3, [r7, #7]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58004000 	.word	0x58004000

08001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_InitTick+0x6c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d024      	beq.n	8001392 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001348:	f004 fe40 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 800134c:	4602      	mov	r2, r0
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_InitTick+0x6c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001358:	fbb3 f3f1 	udiv	r3, r3, r1
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fc10 	bl	8002b86 <HAL_SYSTICK_Config>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10f      	bne.n	800138c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	d809      	bhi.n	8001386 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001372:	2200      	movs	r2, #0
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	f04f 30ff 	mov.w	r0, #4294967295
 800137a:	f001 fbdc 	bl	8002b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <HAL_InitTick+0x70>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e007      	b.n	8001396 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	e004      	b.n	8001396 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000002c 	.word	0x2000002c
 80013a4:	20000028 	.word	0x20000028

080013a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2000002c 	.word	0x2000002c
 80013cc:	200003b0 	.word	0x200003b0

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200003b0 	.word	0x200003b0

080013e8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80013ec:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <HAL_GetTickPrio+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000028 	.word	0x20000028

08001400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff ffe2 	bl	80013d0 <HAL_GetTick>
 800140c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d005      	beq.n	8001426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <HAL_Delay+0x44>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001426:	bf00      	nop
 8001428:	f7ff ffd2 	bl	80013d0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	429a      	cmp	r2, r3
 8001436:	d8f7      	bhi.n	8001428 <HAL_Delay+0x28>
  {
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000002c 	.word	0x2000002c

08001448 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	431a      	orrs	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	609a      	str	r2, [r3, #8]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3360      	adds	r3, #96	@ 0x60
 80014c2:	461a      	mov	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <LL_ADC_SetOffset+0x44>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	03fff000 	.word	0x03fff000

080014f8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3360      	adds	r3, #96	@ 0x60
 8001506:	461a      	mov	r2, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001518:	4618      	mov	r0, r3
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001524:	b480      	push	{r7}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3360      	adds	r3, #96	@ 0x60
 8001534:	461a      	mov	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	431a      	orrs	r2, r3
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001572:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3330      	adds	r3, #48	@ 0x30
 8001590:	461a      	mov	r2, r3
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	4413      	add	r3, r2
 800159e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	211f      	movs	r1, #31
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	0e9b      	lsrs	r3, r3, #26
 80015b8:	f003 011f 	and.w	r1, r3, #31
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f003 031f 	and.w	r3, r3, #31
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80015cc:	bf00      	nop
 80015ce:	371c      	adds	r7, #28
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001600:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800161a:	b480      	push	{r7}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3314      	adds	r3, #20
 800162a:	461a      	mov	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	0e5b      	lsrs	r3, r3, #25
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	4413      	add	r3, r2
 8001638:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	0d1b      	lsrs	r3, r3, #20
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	2107      	movs	r1, #7
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	0d1b      	lsrs	r3, r3, #20
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001664:	bf00      	nop
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0318 	and.w	r3, r3, #24
 8001692:	4908      	ldr	r1, [pc, #32]	@ (80016b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001694:	40d9      	lsrs	r1, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	400b      	ands	r3, r1
 800169a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800169e:	431a      	orrs	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	0007ffff 	.word	0x0007ffff

080016b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6093      	str	r3, [r2, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016f0:	d101      	bne.n	80016f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001714:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001718:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001740:	d101      	bne.n	8001746 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <LL_ADC_IsEnabled+0x18>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <LL_ADC_IsEnabled+0x1a>
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d101      	bne.n	80017e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b08      	cmp	r3, #8
 8001802:	d101      	bne.n	8001808 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e12e      	b.n	8001a94 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff f929 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff3d 	bl	80016dc <LL_ADC_IsDeepPowerDownEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff23 	bl	80016b8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff58 	bl	800172c <LL_ADC_IsInternalRegulatorEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff3c 	bl	8001704 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800188c:	4b83      	ldr	r3, [pc, #524]	@ (8001a9c <HAL_ADC_Init+0x284>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	4a83      	ldr	r2, [pc, #524]	@ (8001aa0 <HAL_ADC_Init+0x288>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a0:	e002      	b.n	80018a8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f9      	bne.n	80018a2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff3a 	bl	800172c <LL_ADC_IsInternalRegulatorEnabled>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c2:	f043 0210 	orr.w	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff73 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 80018e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80c7 	bne.w	8001a82 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80c3 	bne.w	8001a82 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff33 	bl	800177c <LL_ADC_IsEnabled>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800191c:	4861      	ldr	r0, [pc, #388]	@ (8001aa4 <HAL_ADC_Init+0x28c>)
 800191e:	f7ff ff2d 	bl	800177c <LL_ADC_IsEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4619      	mov	r1, r3
 800192e:	485e      	ldr	r0, [pc, #376]	@ (8001aa8 <HAL_ADC_Init+0x290>)
 8001930:	f7ff fd8a 	bl	8001448 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	7e5b      	ldrb	r3, [r3, #25]
 8001938:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800193e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001944:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800194a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001952:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8001954:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	3b01      	subs	r3, #1
 800196c:	045b      	lsls	r3, r3, #17
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001980:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001988:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	4b45      	ldr	r3, [pc, #276]	@ (8001aac <HAL_ADC_Init+0x294>)
 8001998:	4013      	ands	r3, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	430b      	orrs	r3, r1
 80019a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff0e 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 80019ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff1b 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 80019ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d13d      	bne.n	8001a3e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d13a      	bne.n	8001a3e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019cc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019d4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	69b9      	ldr	r1, [r7, #24]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d118      	bne.n	8001a2e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a12:	4311      	orrs	r1, r2
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a18:	4311      	orrs	r1, r2
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	e007      	b.n	8001a3e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0201 	bic.w	r2, r2, #1
 8001a3c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d10c      	bne.n	8001a60 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4c:	f023 010f 	bic.w	r1, r3, #15
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	1e5a      	subs	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5e:	e007      	b.n	8001a70 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 020f 	bic.w	r2, r2, #15
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a74:	f023 0303 	bic.w	r3, r3, #3
 8001a78:	f043 0201 	orr.w	r2, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a80:	e007      	b.n	8001a92 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a86:	f043 0210 	orr.w	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	053e2d63 	.word	0x053e2d63
 8001aa4:	50040000 	.word	0x50040000
 8001aa8:	50040300 	.word	0x50040300
 8001aac:	fff0c007 	.word	0xfff0c007

08001ab0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fe82 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d167      	bne.n	8001b9c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Start_DMA+0x2a>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e063      	b.n	8001ba2 <HAL_ADC_Start_DMA+0xf2>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fe0c 	bl	8002700 <ADC_Enable>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d14f      	bne.n	8001b92 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f023 0206 	bic.w	r2, r3, #6
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b1e:	e002      	b.n	8001b26 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	4a20      	ldr	r2, [pc, #128]	@ (8001bac <HAL_ADC_Start_DMA+0xfc>)
 8001b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <HAL_ADC_Start_DMA+0x100>)
 8001b34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb4 <HAL_ADC_Start_DMA+0x104>)
 8001b3c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	221c      	movs	r2, #28
 8001b44:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0210 	orr.w	r2, r2, #16
 8001b5c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3340      	adds	r3, #64	@ 0x40
 8001b78:	4619      	mov	r1, r3
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f001 f8b7 	bl	8002cf0 <HAL_DMA_Start_IT>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fe09 	bl	80017a2 <LL_ADC_REG_StartConversion>
 8001b90:	e006      	b.n	8001ba0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001b9a:	e001      	b.n	8001ba0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	080027f5 	.word	0x080027f5
 8001bb0:	080028cd 	.word	0x080028cd
 8001bb4:	080028e9 	.word	0x080028e9

08001bb8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d017      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x56>
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 feb3 	bl	800296c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_ADC_IRQHandler+0x6a>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d05d      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d058      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fc81 	bl	800155a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d03d      	beq.n	8001cda <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c6c:	d035      	beq.n	8001cda <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d12e      	bne.n	8001cda <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fda2 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d11a      	bne.n	8001cc2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020c 	bic.w	r2, r2, #12
 8001c9a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d112      	bne.n	8001cda <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cc0:	e00b      	b.n	8001cda <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc6:	f043 0210 	orr.w	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f922 	bl	8001f24 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	220c      	movs	r2, #12
 8001ce6:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x144>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d074      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d06f      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d20:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fc61 	bl	80015f4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d32:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fc0e 	bl	800155a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d3e:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d049      	beq.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_ADC_IRQHandler+0x1b0>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d041      	beq.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d13c      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d135      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d12e      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd31 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d11a      	bne.n	8001dca <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001da2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d112      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc0:	f043 0201 	orr.w	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dc8:	e00b      	b.n	8001de2 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fd9a 	bl	800291c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2260      	movs	r2, #96	@ 0x60
 8001dee:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d011      	beq.n	8001e1e <HAL_ADC_IRQHandler+0x266>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00c      	beq.n	8001e1e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f89b 	bl	8001f4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x296>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00d      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fd80 	bl	8002944 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d012      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2c6>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00d      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fd72 	bl	8002958 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d02b      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x328>
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d026      	beq.n	8001ee0 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	e009      	b.n	8001eb4 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fb97 	bl	80015d8 <LL_ADC_REG_GetDMATransfer>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	f043 0202 	orr.w	r2, r3, #2
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f844 	bl	8001f60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2210      	movs	r2, #16
 8001ede:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d018      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x364>
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f043 0208 	orr.w	r2, r3, #8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f14:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fd0a 	bl	8002930 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8001f1c:	bf00      	nop
 8001f1e:	3720      	adds	r7, #32
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0b6      	sub	sp, #216	@ 0xd8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x22>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e39f      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x762>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc11 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 8384 	bne.w	80026b8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	6859      	ldr	r1, [r3, #4]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f7ff fadf 	bl	8001580 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fbff 	bl	80017ca <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fc0b 	bl	80017f0 <LL_ADC_INJ_IsConversionOngoing>
 8001fda:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 81a6 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 81a1 	bne.w	8002334 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6819      	ldr	r1, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f7ff fb0b 	bl	800161a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	08db      	lsrs	r3, r3, #3
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00a      	beq.n	800203c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6919      	ldr	r1, [r3, #16]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002036:	f7ff fa3b 	bl	80014b0 <LL_ADC_SetOffset>
 800203a:	e17b      	b.n	8002334 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fa58 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_ADC_ConfigChannel+0xf4>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fa4d 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	0e9b      	lsrs	r3, r3, #26
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	e01e      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x132>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fa42 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800208a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800208e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e004      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 800209a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	461a      	mov	r2, r3
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_ConfigChannel+0x14a>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0e9b      	lsrs	r3, r3, #26
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	e018      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x17c>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80020d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80020da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e004      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80020e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d106      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa11 	bl	8001524 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff f9f5 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10a      	bne.n	800212e <HAL_ADC_ConfigChannel+0x1ba>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2101      	movs	r1, #1
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff f9ea 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	0e9b      	lsrs	r3, r3, #26
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	e01e      	b.n	800216c <HAL_ADC_ConfigChannel+0x1f8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2101      	movs	r1, #1
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f9df 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800214c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 800215c:	2320      	movs	r3, #32
 800215e:	e004      	b.n	800216a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x210>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	e018      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x242>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002198:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800219c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80021a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e004      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80021ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d106      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f9ae 	bl	8001524 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2102      	movs	r1, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f992 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x280>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff f987 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 021f 	and.w	r2, r3, #31
 80021f2:	e01e      	b.n	8002232 <HAL_ADC_ConfigChannel+0x2be>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2102      	movs	r1, #2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f97c 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 8002200:	4603      	mov	r3, r0
 8002202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800221a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e004      	b.n	8002230 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d105      	bne.n	800224a <HAL_ADC_ConfigChannel+0x2d6>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	e016      	b.n	8002278 <HAL_ADC_ConfigChannel+0x304>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800225c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800225e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e004      	b.n	8002278 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800226e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	429a      	cmp	r2, r3
 800227a:	d106      	bne.n	800228a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	2102      	movs	r1, #2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f94d 	bl	8001524 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2103      	movs	r1, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff f931 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x342>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2103      	movs	r1, #3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f926 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	f003 021f 	and.w	r2, r3, #31
 80022b4:	e017      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x372>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2103      	movs	r1, #3
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f91b 	bl	80014f8 <LL_ADC_GetOffsetChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80022d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80022d8:	2320      	movs	r3, #32
 80022da:	e003      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80022dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x38a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0e9b      	lsrs	r3, r3, #26
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	e011      	b.n	8002322 <HAL_ADC_ConfigChannel+0x3ae>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800230c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800230e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002316:	2320      	movs	r3, #32
 8002318:	e003      	b.n	8002322 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800231a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800231c:	fab3 f383 	clz	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	429a      	cmp	r2, r3
 8002324:	d106      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2200      	movs	r2, #0
 800232c:	2103      	movs	r1, #3
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f8f8 	bl	8001524 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fa1f 	bl	800177c <LL_ADC_IsEnabled>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 81c2 	bne.w	80026ca <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	6819      	ldr	r1, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	461a      	mov	r2, r3
 8002354:	f7ff f98c 	bl	8001670 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a8e      	ldr	r2, [pc, #568]	@ (8002598 <HAL_ADC_ConfigChannel+0x624>)
 800235e:	4293      	cmp	r3, r2
 8002360:	f040 8130 	bne.w	80025c4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10b      	bne.n	800238c <HAL_ADC_ConfigChannel+0x418>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	3301      	adds	r3, #1
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2b09      	cmp	r3, #9
 8002382:	bf94      	ite	ls
 8002384:	2301      	movls	r3, #1
 8002386:	2300      	movhi	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e019      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x44c>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800239a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800239c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800239e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80023a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	bf94      	ite	ls
 80023ba:	2301      	movls	r3, #1
 80023bc:	2300      	movhi	r3, #0
 80023be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d079      	beq.n	80024b8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x46c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	069b      	lsls	r3, r3, #26
 80023da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023de:	e015      	b.n	800240c <HAL_ADC_ConfigChannel+0x498>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80023ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80023f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80023fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_ADC_ConfigChannel+0x4b8>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	3301      	adds	r3, #1
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	e017      	b.n	800245c <HAL_ADC_ConfigChannel+0x4e8>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800243a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800243e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x50e>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	051b      	lsls	r3, r3, #20
 8002480:	e018      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x540>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800249e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024b4:	430b      	orrs	r3, r1
 80024b6:	e080      	b.n	80025ba <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d107      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x560>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	3301      	adds	r3, #1
 80024cc:	069b      	lsls	r3, r3, #26
 80024ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024d2:	e015      	b.n	8002500 <HAL_ADC_ConfigChannel+0x58c>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80024e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e003      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	fab3 f383 	clz	r3, r3
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	069b      	lsls	r3, r3, #26
 80024fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x5ac>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	3301      	adds	r3, #1
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	2101      	movs	r1, #1
 800251a:	fa01 f303 	lsl.w	r3, r1, r3
 800251e:	e017      	b.n	8002550 <HAL_ADC_ConfigChannel+0x5dc>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	61fb      	str	r3, [r7, #28]
  return result;
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002538:	2320      	movs	r3, #32
 800253a:	e003      	b.n	8002544 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2101      	movs	r1, #1
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	ea42 0103 	orr.w	r1, r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_ADC_ConfigChannel+0x608>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0e9b      	lsrs	r3, r3, #26
 8002566:	3301      	adds	r3, #1
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4613      	mov	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4413      	add	r3, r2
 8002572:	3b1e      	subs	r3, #30
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800257a:	e01d      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x644>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	613b      	str	r3, [r7, #16]
  return result;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002594:	2320      	movs	r3, #32
 8002596:	e005      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x630>
 8002598:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 021f 	and.w	r2, r3, #31
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	3b1e      	subs	r3, #30
 80025b2:	051b      	lsls	r3, r3, #20
 80025b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff f82b 	bl	800161a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b45      	ldr	r3, [pc, #276]	@ (80026e0 <HAL_ADC_ConfigChannel+0x76c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d07c      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025d0:	4844      	ldr	r0, [pc, #272]	@ (80026e4 <HAL_ADC_ConfigChannel+0x770>)
 80025d2:	f7fe ff5f 	bl	8001494 <LL_ADC_GetCommonPathInternalCh>
 80025d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025da:	4843      	ldr	r0, [pc, #268]	@ (80026e8 <HAL_ADC_ConfigChannel+0x774>)
 80025dc:	f7ff f8ce 	bl	800177c <LL_ADC_IsEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d15e      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_ADC_ConfigChannel+0x778>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d127      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x6cc>
 80025f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d121      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a39      	ldr	r2, [pc, #228]	@ (80026e8 <HAL_ADC_ConfigChannel+0x774>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d161      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800260a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800260e:	4619      	mov	r1, r3
 8002610:	4834      	ldr	r0, [pc, #208]	@ (80026e4 <HAL_ADC_ConfigChannel+0x770>)
 8002612:	f7fe ff2c 	bl	800146e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002616:	4b36      	ldr	r3, [pc, #216]	@ (80026f0 <HAL_ADC_ConfigChannel+0x77c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	099b      	lsrs	r3, r3, #6
 800261c:	4a35      	ldr	r2, [pc, #212]	@ (80026f4 <HAL_ADC_ConfigChannel+0x780>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	099b      	lsrs	r3, r3, #6
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002630:	e002      	b.n	8002638 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	3b01      	subs	r3, #1
 8002636:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800263e:	e044      	b.n	80026ca <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2c      	ldr	r2, [pc, #176]	@ (80026f8 <HAL_ADC_ConfigChannel+0x784>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d113      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x6fe>
 800264a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800264e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <HAL_ADC_ConfigChannel+0x774>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d134      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002668:	4619      	mov	r1, r3
 800266a:	481e      	ldr	r0, [pc, #120]	@ (80026e4 <HAL_ADC_ConfigChannel+0x770>)
 800266c:	f7fe feff 	bl	800146e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002670:	e02b      	b.n	80026ca <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <HAL_ADC_ConfigChannel+0x788>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d126      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x756>
 800267c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d120      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <HAL_ADC_ConfigChannel+0x774>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d11b      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002692:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002696:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800269a:	4619      	mov	r1, r3
 800269c:	4811      	ldr	r0, [pc, #68]	@ (80026e4 <HAL_ADC_ConfigChannel+0x770>)
 800269e:	f7fe fee6 	bl	800146e <LL_ADC_SetCommonPathInternalCh>
 80026a2:	e012      	b.n	80026ca <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026b6:	e008      	b.n	80026ca <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80026d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	37d8      	adds	r7, #216	@ 0xd8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	80080000 	.word	0x80080000
 80026e4:	50040300 	.word	0x50040300
 80026e8:	50040000 	.word	0x50040000
 80026ec:	c7520000 	.word	0xc7520000
 80026f0:	20000008 	.word	0x20000008
 80026f4:	053e2d63 	.word	0x053e2d63
 80026f8:	cb840000 	.word	0xcb840000
 80026fc:	80000001 	.word	0x80000001

08002700 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f833 	bl	800177c <LL_ADC_IsEnabled>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d15e      	bne.n	80027da <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <ADC_Enable+0xe4>)
 8002724:	4013      	ands	r3, r2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e04a      	b.n	80027dc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f802 	bl	8001754 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002750:	4825      	ldr	r0, [pc, #148]	@ (80027e8 <ADC_Enable+0xe8>)
 8002752:	f7fe fe9f 	bl	8001494 <LL_ADC_GetCommonPathInternalCh>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00f      	beq.n	8002780 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <ADC_Enable+0xec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	099b      	lsrs	r3, r3, #6
 8002766:	4a22      	ldr	r2, [pc, #136]	@ (80027f0 <ADC_Enable+0xf0>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	099b      	lsrs	r3, r3, #6
 800276e:	3301      	adds	r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002772:	e002      	b.n	800277a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3b01      	subs	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002780:	f7fe fe26 	bl	80013d0 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002786:	e021      	b.n	80027cc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7fe fff5 	bl	800177c <LL_ADC_IsEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d104      	bne.n	80027a2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe ffd9 	bl	8001754 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a2:	f7fe fe15 	bl	80013d0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d90d      	bls.n	80027cc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	f043 0210 	orr.w	r2, r3, #16
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e007      	b.n	80027dc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d1d6      	bne.n	8002788 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	8000003f 	.word	0x8000003f
 80027e8:	50040300 	.word	0x50040300
 80027ec:	20000008 	.word	0x20000008
 80027f0:	053e2d63 	.word	0x053e2d63

080027f4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14b      	bne.n	80028a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002812:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe fe94 	bl	800155a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d032      	beq.n	800289e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d12b      	bne.n	800289e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d11f      	bne.n	800289e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
 800286a:	e018      	b.n	800289e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d111      	bne.n	800289e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fb40 	bl	8001f24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028a4:	e00e      	b.n	80028c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff fb54 	bl	8001f60 <HAL_ADC_ErrorCallback>
}
 80028b8:	e004      	b.n	80028c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff fb2c 	bl	8001f38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f043 0204 	orr.w	r2, r3, #4
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f7ff fb26 	bl	8001f60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	@ (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	@ (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	@ (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff40 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff90 	bl	8002a74 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5f 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff33 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffa4 	bl	8002adc <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e08e      	b.n	8002cd0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_DMA_Init+0x138>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d80f      	bhi.n	8002bde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <HAL_DMA_Init+0x13c>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a45      	ldr	r2, [pc, #276]	@ (8002ce0 <HAL_DMA_Init+0x140>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a42      	ldr	r2, [pc, #264]	@ (8002ce4 <HAL_DMA_Init+0x144>)
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_DMA_Init+0x148>)
 8002be6:	4413      	add	r3, r2
 8002be8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <HAL_DMA_Init+0x140>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <HAL_DMA_Init+0x14c>)
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f9b6 	bl	8002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c5c:	d102      	bne.n	8002c64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8002c70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_DMA_Init+0x106>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d80c      	bhi.n	8002ca6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9d5 	bl	800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40020407 	.word	0x40020407
 8002cdc:	bffdfff8 	.word	0xbffdfff8
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	bffdfbf8 	.word	0xbffdfbf8
 8002cec:	40020400 	.word	0x40020400

08002cf0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Start_IT+0x20>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e066      	b.n	8002dde <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d155      	bne.n	8002dd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f8fb 	bl	8002f44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 020e 	orr.w	r2, r2, #14
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00f      	b.n	8002d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 020a 	orr.w	r2, r2, #10
 8002d86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e005      	b.n	8002ddc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f003 031c 	and.w	r3, r3, #28
 8002e06:	2204      	movs	r2, #4
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d026      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7a>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d021      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0320 	and.w	r3, r3, #32
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d107      	bne.n	8002e3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0204 	bic.w	r2, r2, #4
 8002e38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f003 021c 	and.w	r2, r3, #28
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2104      	movs	r1, #4
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d071      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e5e:	e06c      	b.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e64:	f003 031c 	and.w	r3, r3, #28
 8002e68:	2202      	movs	r2, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d02e      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xec>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d029      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 020a 	bic.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea8:	f003 021c 	and.w	r2, r3, #28
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d038      	beq.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ed0:	e033      	b.n	8002f3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f003 031c 	and.w	r3, r3, #28
 8002eda:	2208      	movs	r2, #8
 8002edc:	409a      	lsls	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d02a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d025      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	f003 021c 	and.w	r2, r3, #28
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
}
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
 8002f50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f003 021c 	and.w	r2, r3, #28
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d108      	bne.n	8002fa4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fa2:	e007      	b.n	8002fb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
}
 8002fb4:	bf00      	nop
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d80a      	bhi.n	8002fea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fe0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6493      	str	r3, [r2, #72]	@ 0x48
 8002fe8:	e007      	b.n	8002ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	009a      	lsls	r2, r3, #2
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002ff4:	4413      	add	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3b08      	subs	r3, #8
 8003002:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003004:	fba2 2303 	umull	r2, r3, r2, r3
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003010:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40020407 	.word	0x40020407
 8003030:	4002081c 	.word	0x4002081c
 8003034:	cccccccd 	.word	0xcccccccd
 8003038:	40020880 	.word	0x40020880

0800303c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800304c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003060:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b01      	subs	r3, #1
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2201      	movs	r2, #1
 800306c:	409a      	lsls	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	1000823f 	.word	0x1000823f
 8003084:	40020940 	.word	0x40020940

08003088 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	e14c      	b.n	8003332 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	2101      	movs	r1, #1
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 813e 	beq.w	800332c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d005      	beq.n	80030c8 <HAL_GPIO_Init+0x40>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d130      	bne.n	800312a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fe:	2201      	movs	r2, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0201 	and.w	r2, r3, #1
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b03      	cmp	r3, #3
 8003134:	d017      	beq.n	8003166 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d123      	bne.n	80031ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3208      	adds	r2, #8
 800317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	6939      	ldr	r1, [r7, #16]
 80031b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0203 	and.w	r2, r3, #3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8098 	beq.w	800332c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80031fc:	4a54      	ldr	r2, [pc, #336]	@ (8003350 <HAL_GPIO_Init+0x2c8>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	220f      	movs	r2, #15
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003226:	d019      	beq.n	800325c <HAL_GPIO_Init+0x1d4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a4a      	ldr	r2, [pc, #296]	@ (8003354 <HAL_GPIO_Init+0x2cc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_GPIO_Init+0x1d0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a49      	ldr	r2, [pc, #292]	@ (8003358 <HAL_GPIO_Init+0x2d0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00d      	beq.n	8003254 <HAL_GPIO_Init+0x1cc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a48      	ldr	r2, [pc, #288]	@ (800335c <HAL_GPIO_Init+0x2d4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <HAL_GPIO_Init+0x1c8>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a47      	ldr	r2, [pc, #284]	@ (8003360 <HAL_GPIO_Init+0x2d8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_GPIO_Init+0x1c4>
 8003248:	2304      	movs	r3, #4
 800324a:	e008      	b.n	800325e <HAL_GPIO_Init+0x1d6>
 800324c:	2307      	movs	r3, #7
 800324e:	e006      	b.n	800325e <HAL_GPIO_Init+0x1d6>
 8003250:	2303      	movs	r3, #3
 8003252:	e004      	b.n	800325e <HAL_GPIO_Init+0x1d6>
 8003254:	2302      	movs	r3, #2
 8003256:	e002      	b.n	800325e <HAL_GPIO_Init+0x1d6>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_GPIO_Init+0x1d6>
 800325c:	2300      	movs	r3, #0
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	f002 0203 	and.w	r2, r2, #3
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	4093      	lsls	r3, r2
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800326e:	4938      	ldr	r1, [pc, #224]	@ (8003350 <HAL_GPIO_Init+0x2c8>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800327c:	4b39      	ldr	r3, [pc, #228]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ca:	4a26      	ldr	r2, [pc, #152]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 80032d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 8003300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003324:	4a0f      	ldr	r2, [pc, #60]	@ (8003364 <HAL_GPIO_Init+0x2dc>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	f47f aeab 	bne.w	8003098 <HAL_GPIO_Init+0x10>
  }
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	40010000 	.word	0x40010000
 8003354:	48000400 	.word	0x48000400
 8003358:	48000800 	.word	0x48000800
 800335c:	48000c00 	.word	0x48000c00
 8003360:	48001000 	.word	0x48001000
 8003364:	58000800 	.word	0x58000800

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003384:	e002      	b.n	800338c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033a2:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ae:	4a05      	ldr	r2, [pc, #20]	@ (80033c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	88fb      	ldrh	r3, [r7, #6]
 80033b2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f806 	bl	80033c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58000800 	.word	0x58000800

080033c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0c0      	b.n	8003572 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f00a f879 	bl	800d4fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2203      	movs	r2, #3
 800340e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f005 fbb4 	bl	8008b84 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	e03e      	b.n	80034a0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	440b      	add	r3, r1
 8003430:	3311      	adds	r3, #17
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	3310      	adds	r3, #16
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800344a:	7bfa      	ldrb	r2, [r7, #15]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	440b      	add	r3, r1
 8003458:	3313      	adds	r3, #19
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3320      	adds	r3, #32
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	440b      	add	r3, r1
 8003480:	3324      	adds	r3, #36	@ 0x24
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	3301      	adds	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	791b      	ldrb	r3, [r3, #4]
 80034a4:	7bfa      	ldrb	r2, [r7, #15]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3bb      	bcc.n	8003422 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	e044      	b.n	800353a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	440b      	add	r3, r1
 80034be:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800351e:	7bfa      	ldrb	r2, [r7, #15]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	3301      	adds	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	791b      	ldrb	r3, [r3, #4]
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	429a      	cmp	r2, r3
 8003542:	d3b5      	bcc.n	80034b0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003550:	f005 fb33 	bl	8008bba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	7a9b      	ldrb	r3, [r3, #10]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d102      	bne.n	8003570 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f001 fc40 	bl	8004df0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_Start+0x16>
 800358c:	2302      	movs	r3, #2
 800358e:	e012      	b.n	80035b6 <HAL_PCD_Start+0x3c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f005 fada 	bl	8008b56 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f007 fd9b 	bl	800b0e2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f007 fda0 	bl	800b110 <USB_ReadInterrupts>
 80035d0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fb04 	bl	8003bea <PCD_EP_ISR_Handler>

    return;
 80035e2:	e110      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d013      	beq.n	8003616 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003600:	b292      	uxth	r2, r2
 8003602:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f00a f80d 	bl	800d626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8fc 	bl	800380c <HAL_PCD_SetAddress>

    return;
 8003614:	e0f7      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003632:	b292      	uxth	r2, r2
 8003634:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003638:	e0e5      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00c      	beq.n	800365e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800364c:	b29a      	uxth	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003656:	b292      	uxth	r2, r2
 8003658:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800365c:	e0d3      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d034      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	b292      	uxth	r2, r2
 800367c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0208 	bic.w	r2, r2, #8
 8003692:	b292      	uxth	r2, r2
 8003694:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036aa:	2100      	movs	r1, #0
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f00a f9af 	bl	800da10 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f009 fff0 	bl	800d698 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036ca:	b292      	uxth	r2, r2
 80036cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036d0:	e099      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d027      	beq.n	800372c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0208 	orr.w	r2, r2, #8
 80036ee:	b292      	uxth	r2, r2
 80036f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003706:	b292      	uxth	r2, r2
 8003708:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0204 	orr.w	r2, r2, #4
 800371e:	b292      	uxth	r2, r2
 8003720:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f009 ff9d 	bl	800d664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800372a:	e06c      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d040      	beq.n	80037b8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003748:	b292      	uxth	r2, r2
 800374a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d12b      	bne.n	80037b0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0204 	orr.w	r2, r2, #4
 800376a:	b292      	uxth	r2, r2
 800376c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0208 	orr.w	r2, r2, #8
 8003782:	b292      	uxth	r2, r2
 8003784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8003798:	b29b      	uxth	r3, r3
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80037a6:	2101      	movs	r1, #1
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f00a f931 	bl	800da10 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80037ae:	e02a      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f009 ff57 	bl	800d664 <HAL_PCD_SuspendCallback>
    return;
 80037b6:	e026      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00f      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037d4:	b292      	uxth	r2, r2
 80037d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f009 ff15 	bl	800d60a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80037e0:	e011      	b.n	8003806 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00c      	beq.n	8003806 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037fe:	b292      	uxth	r2, r2
 8003800:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003804:	bf00      	nop
  }
}
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_PCD_SetAddress+0x1a>
 8003822:	2302      	movs	r3, #2
 8003824:	e012      	b.n	800384c <HAL_PCD_SetAddress+0x40>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f007 fc3c 	bl	800b0ba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	70fb      	strb	r3, [r7, #3]
 8003866:	460b      	mov	r3, r1
 8003868:	803b      	strh	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003876:	2b00      	cmp	r3, #0
 8003878:	da0e      	bge.n	8003898 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 0207 	and.w	r2, r3, #7
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3310      	adds	r3, #16
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	705a      	strb	r2, [r3, #1]
 8003896:	e00e      	b.n	80038b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80038c2:	883a      	ldrh	r2, [r7, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	78ba      	ldrb	r2, [r7, #2]
 80038cc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038ce:	78bb      	ldrb	r3, [r7, #2]
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d102      	bne.n	80038da <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <HAL_PCD_EP_Open+0x94>
 80038e4:	2302      	movs	r3, #2
 80038e6:	e00e      	b.n	8003906 <HAL_PCD_EP_Open+0xb2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f005 f97e 	bl	8008bf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003904:	7afb      	ldrb	r3, [r7, #11]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b084      	sub	sp, #16
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800391a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391e:	2b00      	cmp	r3, #0
 8003920:	da0e      	bge.n	8003940 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 0207 	and.w	r2, r3, #7
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3310      	adds	r3, #16
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2201      	movs	r2, #1
 800393c:	705a      	strb	r2, [r3, #1]
 800393e:	e00e      	b.n	800395e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 0207 	and.w	r2, r3, #7
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_PCD_EP_Close+0x6a>
 8003974:	2302      	movs	r3, #2
 8003976:	e00e      	b.n	8003996 <HAL_PCD_EP_Close+0x88>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68f9      	ldr	r1, [r7, #12]
 8003986:	4618      	mov	r0, r3
 8003988:	f005 fcfa 	bl	8009380 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b086      	sub	sp, #24
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	460b      	mov	r3, r1
 80039ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	f003 0207 	and.w	r2, r3, #7
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6979      	ldr	r1, [r7, #20]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f005 feb2 	bl	800975a <USB_EPStartXfer>

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a0c:	78fb      	ldrb	r3, [r7, #3]
 8003a0e:	f003 0207 	and.w	r2, r3, #7
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	3310      	adds	r3, #16
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6979      	ldr	r1, [r7, #20]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 fe63 	bl	800975a <USB_EPStartXfer>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	7912      	ldrb	r2, [r2, #4]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e03e      	b.n	8003b3a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	da0e      	bge.n	8003ae2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	f003 0207 	and.w	r2, r3, #7
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	705a      	strb	r2, [r3, #1]
 8003ae0:	e00c      	b.n	8003afc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b02:	78fb      	ldrb	r3, [r7, #3]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_PCD_EP_SetStall+0x7e>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e00e      	b.n	8003b3a <HAL_PCD_EP_SetStall+0x9c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f007 f9c6 	bl	800aebc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	7912      	ldrb	r2, [r2, #4]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d901      	bls.n	8003b60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e040      	b.n	8003be2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	da0e      	bge.n	8003b86 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	f003 0207 	and.w	r2, r3, #7
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	3310      	adds	r3, #16
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	705a      	strb	r2, [r3, #1]
 8003b84:	e00e      	b.n	8003ba4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 0207 	and.w	r2, r3, #7
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003baa:	78fb      	ldrb	r3, [r7, #3]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_PCD_EP_ClrStall+0x82>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e00e      	b.n	8003be2 <HAL_PCD_EP_ClrStall+0xa0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68f9      	ldr	r1, [r7, #12]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f007 f9c3 	bl	800af5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b096      	sub	sp, #88	@ 0x58
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003bf2:	e3ad      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003c0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f040 816f 	bne.w	8003ef6 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d14c      	bne.n	8003cbe <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c34:	81fb      	strh	r3, [r7, #14]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3310      	adds	r3, #16
 8003c4c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c74:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	441a      	add	r2, r3
 8003c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c82:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c84:	2100      	movs	r1, #0
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f009 fca5 	bl	800d5d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7b1b      	ldrb	r3, [r3, #12]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 835c 	beq.w	8004350 <PCD_EP_ISR_Handler+0x766>
 8003c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f040 8357 	bne.w	8004350 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7b1b      	ldrb	r3, [r3, #12]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	731a      	strb	r2, [r3, #12]
 8003cbc:	e348      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cc4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003cd0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d032      	beq.n	8003d42 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d02:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f007 fa4c 	bl	800b1b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d28:	4013      	ands	r3, r2
 8003d2a:	823b      	strh	r3, [r7, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	8a3a      	ldrh	r2, [r7, #16]
 8003d32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d36:	b292      	uxth	r2, r2
 8003d38:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f009 fc1e 	bl	800d57c <HAL_PCD_SetupStageCallback>
 8003d40:	e306      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d42:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f280 8302 	bge.w	8004350 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003d58:	4013      	ands	r3, r2
 8003d5a:	83fb      	strh	r3, [r7, #30]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	8bfa      	ldrh	r2, [r7, #30]
 8003d62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d66:	b292      	uxth	r2, r2
 8003d68:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4413      	add	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d90:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d019      	beq.n	8003dce <PCD_EP_ISR_Handler+0x1e4>
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d015      	beq.n	8003dce <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da8:	6959      	ldr	r1, [r3, #20]
 8003daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f007 f9fe 	bl	800b1b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f009 fbe9 	bl	800d5a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003dd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f040 82b5 	bne.w	8004350 <PCD_EP_ISR_Handler+0x766>
 8003de6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003dea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003dee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003df2:	f000 82ad 	beq.w	8004350 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	801a      	strh	r2, [r3, #0]
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e2c:	d91d      	bls.n	8003e6a <PCD_EP_ISR_Handler+0x280>
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d102      	bne.n	8003e48 <PCD_EP_ISR_Handler+0x25e>
 8003e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e44:	3b01      	subs	r3, #1
 8003e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4313      	orrs	r3, r2
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e026      	b.n	8003eb8 <PCD_EP_ISR_Handler+0x2ce>
 8003e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <PCD_EP_ISR_Handler+0x29e>
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	801a      	strh	r2, [r3, #0]
 8003e86:	e017      	b.n	8003eb8 <PCD_EP_ISR_Handler+0x2ce>
 8003e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <PCD_EP_ISR_Handler+0x2b8>
 8003e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	029b      	lsls	r3, r3, #10
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ec8:	827b      	strh	r3, [r7, #18]
 8003eca:	8a7b      	ldrh	r3, [r7, #18]
 8003ecc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ed0:	827b      	strh	r3, [r7, #18]
 8003ed2:	8a7b      	ldrh	r3, [r7, #18]
 8003ed4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003ed8:	827b      	strh	r3, [r7, #18]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	8a7b      	ldrh	r3, [r7, #18]
 8003ee0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
 8003ef4:	e22c      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f0a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f280 80f6 	bge.w	8004100 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003f42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f46:	b292      	uxth	r2, r2
 8003f48:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003f4a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f62:	7b1b      	ldrb	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d123      	bne.n	8003fb0 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	4413      	add	r3, r2
 8003f82:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003f90:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 808e 	beq.w	80040b6 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa0:	6959      	ldr	r1, [r3, #20]
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa4:	88da      	ldrh	r2, [r3, #6]
 8003fa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003faa:	f007 f903 	bl	800b1b4 <USB_ReadPMA>
 8003fae:	e082      	b.n	80040b6 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb2:	78db      	ldrb	r3, [r3, #3]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d10a      	bne.n	8003fce <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003fb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f9d3 	bl	800436c <HAL_PCD_EP_DB_Receive>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003fcc:	e073      	b.n	80040b6 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	441a      	add	r2, r3
 8003ffa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800400a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800400e:	b29b      	uxth	r3, r3
 8004010:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d022      	beq.n	8004072 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	4413      	add	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	4413      	add	r3, r2
 8004046:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004050:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004054:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02c      	beq.n	80040b6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004066:	891a      	ldrh	r2, [r3, #8]
 8004068:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800406c:	f007 f8a2 	bl	800b1b4 <USB_ReadPMA>
 8004070:	e021      	b.n	80040b6 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	4413      	add	r3, r2
 800408c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004096:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800409a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ac:	895a      	ldrh	r2, [r3, #10]
 80040ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040b2:	f007 f87f 	bl	800b1b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80040b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040be:	441a      	add	r2, r3
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80040c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80040cc:	441a      	add	r2, r3
 80040ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80040d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <PCD_EP_ISR_Handler+0x4fc>
 80040da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80040de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d206      	bcs.n	80040f4 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80040e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f009 fa57 	bl	800d5a0 <HAL_PCD_DataOutStageCallback>
 80040f2:	e005      	b.n	8004100 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040fa:	4618      	mov	r0, r3
 80040fc:	f005 fb2d 	bl	800975a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004100:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8121 	beq.w	8004350 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800410e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	3310      	adds	r3, #16
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800413c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800415e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	2b01      	cmp	r3, #1
 8004164:	f040 80a2 	bne.w	80042ac <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8004168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416a:	2200      	movs	r2, #0
 800416c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800416e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004170:	7b1b      	ldrb	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 8093 	beq.w	800429e <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800417c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d046      	beq.n	8004212 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d126      	bne.n	80041da <PCD_EP_ISR_Handler+0x5f0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	4413      	add	r3, r2
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	00da      	lsls	r2, r3, #3
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041be:	b29a      	uxth	r2, r3
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	801a      	strh	r2, [r3, #0]
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e061      	b.n	800429e <PCD_EP_ISR_Handler+0x6b4>
 80041da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d15d      	bne.n	800429e <PCD_EP_ISR_Handler+0x6b4>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	4413      	add	r3, r2
 80041f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	00da      	lsls	r2, r3, #3
 8004200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004202:	4413      	add	r3, r2
 8004204:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004208:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	2200      	movs	r2, #0
 800420e:	801a      	strh	r2, [r3, #0]
 8004210:	e045      	b.n	800429e <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d126      	bne.n	800426e <PCD_EP_ISR_Handler+0x684>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422e:	b29b      	uxth	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	4413      	add	r3, r2
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	00da      	lsls	r2, r3, #3
 800423e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004240:	4413      	add	r3, r2
 8004242:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004246:	633b      	str	r3, [r7, #48]	@ 0x30
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	b29a      	uxth	r2, r3
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	801a      	strh	r2, [r3, #0]
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	b29b      	uxth	r3, r3
 800425e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004266:	b29a      	uxth	r2, r3
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	e017      	b.n	800429e <PCD_EP_ISR_Handler+0x6b4>
 800426e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d113      	bne.n	800429e <PCD_EP_ISR_Handler+0x6b4>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004284:	4413      	add	r3, r2
 8004286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	00da      	lsls	r2, r3, #3
 800428e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004290:	4413      	add	r3, r2
 8004292:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	2200      	movs	r2, #0
 800429c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800429e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f009 f996 	bl	800d5d6 <HAL_PCD_DataInStageCallback>
 80042aa:	e051      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80042ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d144      	bne.n	8004342 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	4413      	add	r3, r2
 80042d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042dc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80042e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d907      	bls.n	80042fc <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042f4:	1ad2      	subs	r2, r2, r3
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	619a      	str	r2, [r3, #24]
 80042fa:	e002      	b.n	8004302 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	2200      	movs	r2, #0
 8004300:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f009 f960 	bl	800d5d6 <HAL_PCD_DataInStageCallback>
 8004316:	e01b      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004320:	441a      	add	r2, r3
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800432e:	441a      	add	r2, r3
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800433a:	4618      	mov	r0, r3
 800433c:	f005 fa0d 	bl	800975a <USB_EPStartXfer>
 8004340:	e006      	b.n	8004350 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004342:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004346:	461a      	mov	r2, r3
 8004348:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f917 	bl	800457e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004358:	b29b      	uxth	r3, r3
 800435a:	b21b      	sxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	f6ff ac49 	blt.w	8003bf4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3758      	adds	r7, #88	@ 0x58
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d07c      	beq.n	800447e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800438c:	b29b      	uxth	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4413      	add	r3, r2
 800439e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d306      	bcc.n	80043c2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	8b7b      	ldrh	r3, [r7, #26]
 80043ba:	1ad2      	subs	r2, r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	619a      	str	r2, [r3, #24]
 80043c0:	e002      	b.n	80043c8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d123      	bne.n	8004418 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	833b      	strh	r3, [r7, #24]
 80043ec:	8b3b      	ldrh	r3, [r7, #24]
 80043ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043f2:	833b      	strh	r3, [r7, #24]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	441a      	add	r2, r3
 8004402:	8b3b      	ldrh	r3, [r7, #24]
 8004404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800440c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004414:	b29b      	uxth	r3, r3
 8004416:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01f      	beq.n	8004462 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443c:	82fb      	strh	r3, [r7, #22]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	441a      	add	r2, r3
 800444c:	8afb      	ldrh	r3, [r7, #22]
 800444e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800445e:	b29b      	uxth	r3, r3
 8004460:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004462:	8b7b      	ldrh	r3, [r7, #26]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8085 	beq.w	8004574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6959      	ldr	r1, [r3, #20]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	891a      	ldrh	r2, [r3, #8]
 8004476:	8b7b      	ldrh	r3, [r7, #26]
 8004478:	f006 fe9c 	bl	800b1b4 <USB_ReadPMA>
 800447c:	e07a      	b.n	8004574 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004486:	b29b      	uxth	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	4413      	add	r3, r2
 8004498:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d306      	bcc.n	80044bc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	1ad2      	subs	r2, r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	619a      	str	r2, [r3, #24]
 80044ba:	e002      	b.n	80044c2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d123      	bne.n	8004512 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044e4:	83fb      	strh	r3, [r7, #30]
 80044e6:	8bfb      	ldrh	r3, [r7, #30]
 80044e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044ec:	83fb      	strh	r3, [r7, #30]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	441a      	add	r2, r3
 80044fc:	8bfb      	ldrh	r3, [r7, #30]
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d11f      	bne.n	800455c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	881b      	ldrh	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004536:	83bb      	strh	r3, [r7, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8bbb      	ldrh	r3, [r7, #28]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004554:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	6959      	ldr	r1, [r3, #20]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	895a      	ldrh	r2, [r3, #10]
 800456e:	8b7b      	ldrh	r3, [r7, #26]
 8004570:	f006 fe20 	bl	800b1b4 <USB_ReadPMA>
    }
  }

  return count;
 8004574:	8b7b      	ldrh	r3, [r7, #26]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b0a4      	sub	sp, #144	@ 0x90
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	4613      	mov	r3, r2
 800458a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 81db 	beq.w	800494e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d907      	bls.n	80045dc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	619a      	str	r2, [r3, #24]
 80045da:	e002      	b.n	80045e2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 80b9 	bne.w	800475e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d126      	bne.n	8004642 <HAL_PCD_EP_DB_Transmit+0xc4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	4413      	add	r3, r2
 800460a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	00da      	lsls	r2, r3, #3
 8004612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004614:	4413      	add	r3, r2
 8004616:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800461a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004626:	b29a      	uxth	r2, r3
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463a:	b29a      	uxth	r2, r3
 800463c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e01a      	b.n	8004678 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d116      	bne.n	8004678 <HAL_PCD_EP_DB_Transmit+0xfa>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800465e:	4413      	add	r3, r2
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	00da      	lsls	r2, r3, #3
 8004668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800466a:	4413      	add	r3, r2
 800466c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004670:	633b      	str	r3, [r7, #48]	@ 0x30
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	2200      	movs	r2, #0
 8004676:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	627b      	str	r3, [r7, #36]	@ 0x24
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d126      	bne.n	80046d4 <HAL_PCD_EP_DB_Transmit+0x156>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004694:	b29b      	uxth	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	00da      	lsls	r2, r3, #3
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e017      	b.n	8004704 <HAL_PCD_EP_DB_Transmit+0x186>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d113      	bne.n	8004704 <HAL_PCD_EP_DB_Transmit+0x186>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	4413      	add	r3, r2
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	00da      	lsls	r2, r3, #3
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	4413      	add	r3, r2
 80046f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f008 ff63 	bl	800d5d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 82fa 	beq.w	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	82fb      	strh	r3, [r7, #22]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	8afb      	ldrh	r3, [r7, #22]
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]
 800475c:	e2d8      	b.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800475e:	88fb      	ldrh	r3, [r7, #6]
 8004760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d021      	beq.n	80047ac <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	441a      	add	r2, r3
 8004794:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800479c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 82ac 	bne.w	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047c0:	441a      	add	r2, r3
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047ce:	441a      	add	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6a1a      	ldr	r2, [r3, #32]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d30b      	bcc.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6a1a      	ldr	r2, [r3, #32]
 80047ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	621a      	str	r2, [r3, #32]
 80047f6:	e017      	b.n	8004828 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d108      	bne.n	8004812 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004804:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004810:	e00a      	b.n	8004828 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2200      	movs	r2, #0
 8004826:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d165      	bne.n	80048fc <HAL_PCD_EP_DB_Transmit+0x37e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004844:	4413      	add	r3, r2
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	00da      	lsls	r2, r3, #3
 800484e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004850:	4413      	add	r3, r2
 8004852:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004862:	b29a      	uxth	r2, r3
 8004864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800486c:	2b3e      	cmp	r3, #62	@ 0x3e
 800486e:	d91d      	bls.n	80048ac <HAL_PCD_EP_DB_Transmit+0x32e>
 8004870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_PCD_EP_DB_Transmit+0x30c>
 8004884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004886:	3b01      	subs	r3, #1
 8004888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29a      	uxth	r2, r3
 8004890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29b      	uxth	r3, r3
 8004898:	4313      	orrs	r3, r2
 800489a:	b29b      	uxth	r3, r3
 800489c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	e044      	b.n	8004936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80048ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <HAL_PCD_EP_DB_Transmit+0x34c>
 80048b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c6:	801a      	strh	r2, [r3, #0]
 80048c8:	e035      	b.n	8004936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80048ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ce:	085b      	lsrs	r3, r3, #1
 80048d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x366>
 80048de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e0:	3301      	adds	r3, #1
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	029b      	lsls	r3, r3, #10
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	4313      	orrs	r3, r2
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	e01c      	b.n	8004936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d118      	bne.n	8004936 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	647b      	str	r3, [r7, #68]	@ 0x44
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004918:	4413      	add	r3, r2
 800491a:	647b      	str	r3, [r7, #68]	@ 0x44
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	00da      	lsls	r2, r3, #3
 8004922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004924:	4413      	add	r3, r2
 8004926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800492a:	643b      	str	r3, [r7, #64]	@ 0x40
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004930:	b29a      	uxth	r2, r3
 8004932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004934:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	6959      	ldr	r1, [r3, #20]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	891a      	ldrh	r2, [r3, #8]
 8004942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004946:	b29b      	uxth	r3, r3
 8004948:	f006 fbf2 	bl	800b130 <USB_WritePMA>
 800494c:	e1e0      	b.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004956:	b29b      	uxth	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	4413      	add	r3, r2
 8004968:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004972:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800497e:	429a      	cmp	r2, r3
 8004980:	d307      	bcc.n	8004992 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	619a      	str	r2, [r3, #24]
 8004990:	e002      	b.n	8004998 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 80c0 	bne.w	8004b22 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	785b      	ldrb	r3, [r3, #1]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d126      	bne.n	80049f8 <HAL_PCD_EP_DB_Transmit+0x47a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049be:	4413      	add	r3, r2
 80049c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	00da      	lsls	r2, r3, #3
 80049c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049ca:	4413      	add	r3, r2
 80049cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e01a      	b.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x4b0>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	785b      	ldrb	r3, [r3, #1]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d116      	bne.n	8004a2e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a14:	4413      	add	r3, r2
 8004a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	00da      	lsls	r2, r3, #3
 8004a1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a20:	4413      	add	r3, r2
 8004a22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004a26:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12b      	bne.n	8004a94 <HAL_PCD_EP_DB_Transmit+0x516>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a50:	4413      	add	r3, r2
 8004a52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	00da      	lsls	r2, r3, #3
 8004a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e017      	b.n	8004ac4 <HAL_PCD_EP_DB_Transmit+0x546>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d113      	bne.n	8004ac4 <HAL_PCD_EP_DB_Transmit+0x546>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aaa:	4413      	add	r3, r2
 8004aac:	677b      	str	r3, [r7, #116]	@ 0x74
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	00da      	lsls	r2, r3, #3
 8004ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004abe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f008 fd83 	bl	800d5d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f040 811a 	bne.w	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]
 8004b20:	e0f6      	b.n	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d121      	bne.n	8004b70 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	f040 80ca 	bne.w	8004d10 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b84:	441a      	add	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b92:	441a      	add	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d30b      	bcc.n	8004bbc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	621a      	str	r2, [r3, #32]
 8004bba:	e017      	b.n	8004bec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004bd4:	e00a      	b.n	8004bec <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d165      	bne.n	8004cc6 <HAL_PCD_EP_DB_Transmit+0x748>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c0e:	4413      	add	r3, r2
 8004c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	00da      	lsls	r2, r3, #3
 8004c18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8004c38:	d91d      	bls.n	8004c76 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004c4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c50:	3b01      	subs	r3, #1
 8004c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	029b      	lsls	r3, r3, #10
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e041      	b.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x716>
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	e032      	b.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_PCD_EP_DB_Transmit+0x730>
 8004ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004caa:	3301      	adds	r3, #1
 8004cac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	029b      	lsls	r3, r3, #10
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e019      	b.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x77c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d115      	bne.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x77c>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	4413      	add	r3, r2
 8004cde:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	00da      	lsls	r2, r3, #3
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce8:	4413      	add	r3, r2
 8004cea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cf8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	6959      	ldr	r1, [r3, #20]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	895a      	ldrh	r2, [r3, #10]
 8004d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f006 fa10 	bl	800b130 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d2a:	82bb      	strh	r3, [r7, #20]
 8004d2c:	8abb      	ldrh	r3, [r7, #20]
 8004d2e:	f083 0310 	eor.w	r3, r3, #16
 8004d32:	82bb      	strh	r3, [r7, #20]
 8004d34:	8abb      	ldrh	r3, [r7, #20]
 8004d36:	f083 0320 	eor.w	r3, r3, #32
 8004d3a:	82bb      	strh	r3, [r7, #20]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	8abb      	ldrh	r3, [r7, #20]
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3790      	adds	r7, #144	@ 0x90
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	607b      	str	r3, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	817b      	strh	r3, [r7, #10]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d7c:	897b      	ldrh	r3, [r7, #10]
 8004d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d88:	897b      	ldrh	r3, [r7, #10]
 8004d8a:	f003 0207 	and.w	r2, r3, #7
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	3310      	adds	r3, #16
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e009      	b.n	8004db4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004da0:	897a      	ldrh	r2, [r7, #10]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	80da      	strh	r2, [r3, #6]
 8004dc8:	e00b      	b.n	8004de2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0c1b      	lsrs	r3, r3, #16
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e48:	4b05      	ldr	r3, [pc, #20]	@ (8004e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	@ (8004e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	58000400 	.word	0x58000400

08004e64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	58000400 	.word	0x58000400

08004e80 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004e84:	4b05      	ldr	r3, [pc, #20]	@ (8004e9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a04      	ldr	r2, [pc, #16]	@ (8004e9c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e8e:	6053      	str	r3, [r2, #4]
}
 8004e90:	bf00      	nop
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	58000400 	.word	0x58000400

08004ea0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004eb2:	d101      	bne.n	8004eb8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f12:	d101      	bne.n	8004f18 <LL_RCC_HSE_IsReady+0x18>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <LL_RCC_HSE_IsReady+0x1a>
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f36:	6013      	str	r3, [r2, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004f42:	b480      	push	{r7}
 8004f44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d101      	bne.n	8004f78 <LL_RCC_HSI_IsReady+0x18>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <LL_RCC_HSI_IsReady+0x1a>
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004fc6:	bf00      	nop
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d101      	bne.n	800500a <LL_RCC_HSI48_IsReady+0x18>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_RCC_HSI48_IsReady+0x1a>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800505a:	b480      	push	{r7}
 800505c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005094:	bf00      	nop
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d101      	bne.n	80050b6 <LL_RCC_LSE_IsReady+0x18>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <LL_RCC_LSE_IsReady+0x1a>
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b02      	cmp	r3, #2
 8005118:	d101      	bne.n	800511e <LL_RCC_LSI1_IsReady+0x18>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <LL_RCC_LSI1_IsReady+0x1a>
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800513a:	f043 0304 	orr.w	r3, r3, #4
 800513e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005158:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b08      	cmp	r3, #8
 8005180:	d101      	bne.n	8005186 <LL_RCC_LSI2_IsReady+0x18>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_RCC_LSI2_IsReady+0x1a>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800519a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800519e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80051c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	6013      	str	r3, [r2, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	6013      	str	r3, [r2, #0]
}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d101      	bne.n	8005212 <LL_RCC_MSI_IsReady+0x16>
 800520e:	2301      	movs	r3, #1
 8005210:	e000      	b.n	8005214 <LL_RCC_MSI_IsReady+0x18>
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005256:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2bb0      	cmp	r3, #176	@ 0xb0
 800525c:	d901      	bls.n	8005262 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800525e:	23b0      	movs	r3, #176	@ 0xb0
 8005260:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8005262:	687b      	ldr	r3, [r7, #4]
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005278:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800528a:	4313      	orrs	r3, r2
 800528c:	604b      	str	r3, [r1, #4]
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 0203 	bic.w	r2, r3, #3
 80052ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	608b      	str	r3, [r1, #8]
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80052e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005312:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800533a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800533e:	f023 020f 	bic.w	r2, r3, #15
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800536e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4313      	orrs	r3, r2
 8005376:	608b      	str	r3, [r1, #8]
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800543c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800545e:	d101      	bne.n	8005464 <LL_RCC_PLL_IsReady+0x18>
 8005460:	2301      	movs	r3, #1
 8005462:	e000      	b.n	8005466 <LL_RCC_PLL_IsReady+0x1a>
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	0a1b      	lsrs	r3, r3, #8
 800547c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005480:	4618      	mov	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800548a:	b480      	push	{r7}
 800548c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800548e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0303 	and.w	r3, r3, #3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e4:	d101      	bne.n	80054ea <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550a:	d101      	bne.n	8005510 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005524:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005530:	d101      	bne.n	8005536 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005554:	d101      	bne.n	800555a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005566:	b480      	push	{r7}
 8005568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005574:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005578:	d101      	bne.n	800557e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b08d      	sub	sp, #52	@ 0x34
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e363      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 808d 	beq.w	80056c6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ac:	f7ff fe89 	bl	80052c2 <LL_RCC_GetSysClkSource>
 80055b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b2:	f7ff ff82 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 80055b6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_RCC_OscConfig+0x3e>
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d147      	bne.n	8005654 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d144      	bne.n	8005654 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e347      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80055da:	f7ff fe34 	bl	8005246 <LL_RCC_MSI_GetRange>
 80055de:	4603      	mov	r3, r0
 80055e0:	429c      	cmp	r4, r3
 80055e2:	d914      	bls.n	800560e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 fd2f 	bl	800604c <RCC_SetFlashLatencyFromMSIRange>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e336      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fe0e 	bl	800521e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fe32 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>
 800560c:	e013      	b.n	8005636 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff fe03 	bl	800521e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fe27 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fd10 	bl	800604c <RCC_SetFlashLatencyFromMSIRange>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e317      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005636:	f000 fcc9 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 800563a:	4603      	mov	r3, r0
 800563c:	4aa4      	ldr	r2, [pc, #656]	@ (80058d0 <HAL_RCC_OscConfig+0x344>)
 800563e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005640:	4ba4      	ldr	r3, [pc, #656]	@ (80058d4 <HAL_RCC_OscConfig+0x348>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f7fb fe75 	bl	8001334 <HAL_InitTick>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d039      	beq.n	80056c4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e308      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800565c:	f7ff fdb0 	bl	80051c0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005660:	f7fb feb6 	bl	80013d0 <HAL_GetTick>
 8005664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005668:	f7fb feb2 	bl	80013d0 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e2f5      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800567a:	f7ff fdbf 	bl	80051fc <LL_RCC_MSI_IsReady>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f1      	beq.n	8005668 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fdc8 	bl	800521e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff fdec 	bl	8005270 <LL_RCC_MSI_SetCalibTrimming>
 8005698:	e015      	b.n	80056c6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800569a:	f7ff fda0 	bl	80051de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800569e:	f7fb fe97 	bl	80013d0 <HAL_GetTick>
 80056a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056a6:	f7fb fe93 	bl	80013d0 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e2d6      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056b8:	f7ff fda0 	bl	80051fc <LL_RCC_MSI_IsReady>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f1      	bne.n	80056a6 <HAL_RCC_OscConfig+0x11a>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056c4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d047      	beq.n	8005762 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056d2:	f7ff fdf6 	bl	80052c2 <LL_RCC_GetSysClkSource>
 80056d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056d8:	f7ff feef 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 80056dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d005      	beq.n	80056f0 <HAL_RCC_OscConfig+0x164>
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	d108      	bne.n	80056fc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d105      	bne.n	80056fc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d134      	bne.n	8005762 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e2b4      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005704:	d102      	bne.n	800570c <HAL_RCC_OscConfig+0x180>
 8005706:	f7ff fbdd 	bl	8004ec4 <LL_RCC_HSE_Enable>
 800570a:	e001      	b.n	8005710 <HAL_RCC_OscConfig+0x184>
 800570c:	f7ff fbe9 	bl	8004ee2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fb fe5a 	bl	80013d0 <HAL_GetTick>
 800571c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005720:	f7fb fe56 	bl	80013d0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b64      	cmp	r3, #100	@ 0x64
 800572c:	d901      	bls.n	8005732 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e299      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005732:	f7ff fbe5 	bl	8004f00 <LL_RCC_HSE_IsReady>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f1      	beq.n	8005720 <HAL_RCC_OscConfig+0x194>
 800573c:	e011      	b.n	8005762 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fb fe47 	bl	80013d0 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005746:	f7fb fe43 	bl	80013d0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b64      	cmp	r3, #100	@ 0x64
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e286      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005758:	f7ff fbd2 	bl	8004f00 <LL_RCC_HSE_IsReady>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f1      	bne.n	8005746 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d04c      	beq.n	8005808 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576e:	f7ff fda8 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005772:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005774:	f7ff fea1 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 8005778:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d005      	beq.n	800578c <HAL_RCC_OscConfig+0x200>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d10e      	bne.n	80057a4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d10b      	bne.n	80057a4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e266      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fbf1 	bl	8004f84 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80057a2:	e031      	b.n	8005808 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d019      	beq.n	80057e0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	f7ff fbba 	bl	8004f24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fb fe0e 	bl	80013d0 <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b8:	f7fb fe0a 	bl	80013d0 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e24d      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80057ca:	f7ff fbc9 	bl	8004f60 <LL_RCC_HSI_IsReady>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d0f1      	beq.n	80057b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fbd3 	bl	8004f84 <LL_RCC_HSI_SetCalibTrimming>
 80057de:	e013      	b.n	8005808 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e0:	f7ff fbaf 	bl	8004f42 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e4:	f7fb fdf4 	bl	80013d0 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ec:	f7fb fdf0 	bl	80013d0 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e233      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80057fe:	f7ff fbaf 	bl	8004f60 <LL_RCC_HSI_IsReady>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1f1      	bne.n	80057ec <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 80a3 	beq.w	8005968 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d076      	beq.n	8005918 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2b00      	cmp	r3, #0
 8005834:	d046      	beq.n	80058c4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005836:	f7ff fc66 	bl	8005106 <LL_RCC_LSI1_IsReady>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005840:	f7ff fc3f 	bl	80050c2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005844:	f7fb fdc4 	bl	80013d0 <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800584c:	f7fb fdc0 	bl	80013d0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e203      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800585e:	f7ff fc52 	bl	8005106 <LL_RCC_LSI1_IsReady>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f1      	beq.n	800584c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005868:	f7ff fc5f 	bl	800512a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586c:	f7fb fdb0 	bl	80013d0 <HAL_GetTick>
 8005870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005874:	f7fb fdac 	bl	80013d0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b03      	cmp	r3, #3
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1ef      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005886:	f7ff fc72 	bl	800516e <LL_RCC_LSI2_IsReady>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f1      	beq.n	8005874 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fc7c 	bl	8005192 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800589a:	f7ff fc23 	bl	80050e4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fb fd97 	bl	80013d0 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058a6:	f7fb fd93 	bl	80013d0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e1d6      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058b8:	f7ff fc25 	bl	8005106 <LL_RCC_LSI1_IsReady>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <HAL_RCC_OscConfig+0x31a>
 80058c2:	e051      	b.n	8005968 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80058c4:	f7ff fbfd 	bl	80050c2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fb fd82 	bl	80013d0 <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058ce:	e00c      	b.n	80058ea <HAL_RCC_OscConfig+0x35e>
 80058d0:	20000008 	.word	0x20000008
 80058d4:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058d8:	f7fb fd7a 	bl	80013d0 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e1bd      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058ea:	f7ff fc0c 	bl	8005106 <LL_RCC_LSI1_IsReady>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f1      	beq.n	80058d8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80058f4:	f7ff fc2a 	bl	800514c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80058f8:	e008      	b.n	800590c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80058fa:	f7fb fd69 	bl	80013d0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d901      	bls.n	800590c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e1ac      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800590c:	f7ff fc2f 	bl	800516e <LL_RCC_LSI2_IsReady>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f1      	bne.n	80058fa <HAL_RCC_OscConfig+0x36e>
 8005916:	e027      	b.n	8005968 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005918:	f7ff fc18 	bl	800514c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fb fd58 	bl	80013d0 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005924:	f7fb fd54 	bl	80013d0 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e197      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005936:	f7ff fc1a 	bl	800516e <LL_RCC_LSI2_IsReady>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1f1      	bne.n	8005924 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005940:	f7ff fbd0 	bl	80050e4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f7fb fd44 	bl	80013d0 <HAL_GetTick>
 8005948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800594c:	f7fb fd40 	bl	80013d0 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e183      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800595e:	f7ff fbd2 	bl	8005106 <LL_RCC_LSI1_IsReady>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f1      	bne.n	800594c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d05b      	beq.n	8005a2c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005974:	4ba7      	ldr	r3, [pc, #668]	@ (8005c14 <HAL_RCC_OscConfig+0x688>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005980:	f7ff fa60 	bl	8004e44 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005984:	f7fb fd24 	bl	80013d0 <HAL_GetTick>
 8005988:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800598c:	f7fb fd20 	bl	80013d0 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e163      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800599e:	4b9d      	ldr	r3, [pc, #628]	@ (8005c14 <HAL_RCC_OscConfig+0x688>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_RCC_OscConfig+0x42c>
 80059b2:	f7ff fb30 	bl	8005016 <LL_RCC_LSE_Enable>
 80059b6:	e00c      	b.n	80059d2 <HAL_RCC_OscConfig+0x446>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d104      	bne.n	80059ca <HAL_RCC_OscConfig+0x43e>
 80059c0:	f7ff fb4b 	bl	800505a <LL_RCC_LSE_EnableBypass>
 80059c4:	f7ff fb27 	bl	8005016 <LL_RCC_LSE_Enable>
 80059c8:	e003      	b.n	80059d2 <HAL_RCC_OscConfig+0x446>
 80059ca:	f7ff fb35 	bl	8005038 <LL_RCC_LSE_Disable>
 80059ce:	f7ff fb55 	bl	800507c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d014      	beq.n	8005a04 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059da:	f7fb fcf9 	bl	80013d0 <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059e0:	e00a      	b.n	80059f8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fb fcf5 	bl	80013d0 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e136      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059f8:	f7ff fb51 	bl	800509e <LL_RCC_LSE_IsReady>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d0ef      	beq.n	80059e2 <HAL_RCC_OscConfig+0x456>
 8005a02:	e013      	b.n	8005a2c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a04:	f7fb fce4 	bl	80013d0 <HAL_GetTick>
 8005a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a0a:	e00a      	b.n	8005a22 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fb fce0 	bl	80013d0 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e121      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a22:	f7ff fb3c 	bl	800509e <LL_RCC_LSE_IsReady>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ef      	bne.n	8005a0c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02c      	beq.n	8005a92 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d014      	beq.n	8005a6a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a40:	f7ff fab5 	bl	8004fae <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a44:	f7fb fcc4 	bl	80013d0 <HAL_GetTick>
 8005a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005a4a:	e008      	b.n	8005a5e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a4c:	f7fb fcc0 	bl	80013d0 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d901      	bls.n	8005a5e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e103      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005a5e:	f7ff fac8 	bl	8004ff2 <LL_RCC_HSI48_IsReady>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0f1      	beq.n	8005a4c <HAL_RCC_OscConfig+0x4c0>
 8005a68:	e013      	b.n	8005a92 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a6a:	f7ff fab1 	bl	8004fd0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fb fcaf 	bl	80013d0 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a76:	f7fb fcab 	bl	80013d0 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e0ee      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005a88:	f7ff fab3 	bl	8004ff2 <LL_RCC_HSI48_IsReady>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f1      	bne.n	8005a76 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f000 80e4 	beq.w	8005c64 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a9c:	f7ff fc11 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005aa0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005aa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	f040 80b4 	bne.w	8005c1c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f003 0203 	and.w	r2, r3, #3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d123      	bne.n	8005b0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d11c      	bne.n	8005b0a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	0a1b      	lsrs	r3, r3, #8
 8005ad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d114      	bne.n	8005b0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d10d      	bne.n	8005b0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d05d      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d058      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0a1      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b22:	f7ff fc84 	bl	800542e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b26:	f7fb fc53 	bl	80013d0 <HAL_GetTick>
 8005b2a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fb fc4f 	bl	80013d0 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e092      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ef      	bne.n	8005b2e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b30      	ldr	r3, [pc, #192]	@ (8005c18 <HAL_RCC_OscConfig+0x68c>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b60:	4311      	orrs	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b66:	0212      	lsls	r2, r2, #8
 8005b68:	4311      	orrs	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b74:	4311      	orrs	r1, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b80:	4313      	orrs	r3, r2
 8005b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b84:	f7ff fc44 	bl	8005410 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b98:	f7fb fc1a 	bl	80013d0 <HAL_GetTick>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba0:	f7fb fc16 	bl	80013d0 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e059      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0ef      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc0:	e050      	b.n	8005c64 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e04f      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d147      	bne.n	8005c64 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bd4:	f7ff fc1c 	bl	8005410 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005be8:	f7fb fbf2 	bl	80013d0 <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fb fbee 	bl	80013d0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e031      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ef      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x664>
 8005c10:	e028      	b.n	8005c64 <HAL_RCC_OscConfig+0x6d8>
 8005c12:	bf00      	nop
 8005c14:	58000400 	.word	0x58000400
 8005c18:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d01e      	beq.n	8005c60 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	f7ff fc04 	bl	800542e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c26:	f7fb fbd3 	bl	80013d0 <HAL_GetTick>
 8005c2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fb fbcf 	bl	80013d0 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e012      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ef      	bne.n	8005c2e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_RCC_OscConfig+0x6e4>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	60cb      	str	r3, [r1, #12]
 8005c5e:	e001      	b.n	8005c64 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3734      	adds	r7, #52	@ 0x34
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	eefefffc 	.word	0xeefefffc

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e12d      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b98      	ldr	r3, [pc, #608]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d91b      	bls.n	8005cce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b95      	ldr	r3, [pc, #596]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0207 	bic.w	r2, r3, #7
 8005c9e:	4993      	ldr	r1, [pc, #588]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fb fb93 	bl	80013d0 <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cae:	f7fb fb8f 	bl	80013d0 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e111      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc0:	4b8a      	ldr	r3, [pc, #552]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1ef      	bne.n	8005cae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fafb 	bl	80052da <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ce4:	f7fb fb74 	bl	80013d0 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cec:	f7fb fb70 	bl	80013d0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e0f2      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cfe:	f7ff fbe8 	bl	80054d2 <LL_RCC_IsActiveFlag_HPRE>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f1      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d016      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff faf2 	bl	8005302 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fb57 	bl	80013d0 <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d26:	f7fb fb53 	bl	80013d0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e0d5      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005d38:	f7ff fbdd 	bl	80054f6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f1      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff faeb 	bl	800532e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d58:	f7fb fb3a 	bl	80013d0 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d60:	f7fb fb36 	bl	80013d0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0b8      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d72:	f7ff fbd3 	bl	800551c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f1      	beq.n	8005d60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d016      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fae5 	bl	800535c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d92:	f7fb fb1d 	bl	80013d0 <HAL_GetTick>
 8005d96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d9a:	f7fb fb19 	bl	80013d0 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e09b      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005dac:	f7ff fbc9 	bl	8005542 <LL_RCC_IsActiveFlag_PPRE1>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f1      	beq.n	8005d9a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d017      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fadb 	bl	8005384 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dce:	f7fb faff 	bl	80013d0 <HAL_GetTick>
 8005dd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dd6:	f7fb fafb 	bl	80013d0 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e07d      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005de8:	f7ff fbbd 	bl	8005566 <LL_RCC_IsActiveFlag_PPRE2>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f1      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d043      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005e06:	f7ff f87b 	bl	8004f00 <LL_RCC_HSE_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11e      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e067      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d106      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005e1c:	f7ff fb16 	bl	800544c <LL_RCC_PLL_IsReady>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d113      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e05c      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005e32:	f7ff f9e3 	bl	80051fc <LL_RCC_MSI_IsReady>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d108      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e051      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e40:	f7ff f88e 	bl	8004f60 <LL_RCC_HSI_IsReady>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e04a      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fa21 	bl	800529a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e58:	f7fb faba 	bl	80013d0 <HAL_GetTick>
 8005e5c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e60:	f7fb fab6 	bl	80013d0 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e036      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	f7ff fa24 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d1ec      	bne.n	8005e60 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e86:	4b19      	ldr	r3, [pc, #100]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d21b      	bcs.n	8005ecc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e94:	4b15      	ldr	r3, [pc, #84]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f023 0207 	bic.w	r2, r3, #7
 8005e9c:	4913      	ldr	r1, [pc, #76]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea4:	f7fb fa94 	bl	80013d0 <HAL_GetTick>
 8005ea8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005eac:	f7fb fa90 	bl	80013d0 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e012      	b.n	8005ee4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8005eec <HAL_RCC_ClockConfig+0x278>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d1ef      	bne.n	8005eac <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ecc:	f000 f87e 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4a07      	ldr	r2, [pc, #28]	@ (8005ef0 <HAL_RCC_ClockConfig+0x27c>)
 8005ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005ed6:	f7fb fa87 	bl	80013e8 <HAL_GetTickPrio>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fb fa29 	bl	8001334 <HAL_InitTick>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	58004000 	.word	0x58004000
 8005ef0:	20000008 	.word	0x20000008

08005ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005efa:	f7ff f9e2 	bl	80052c2 <LL_RCC_GetSysClkSource>
 8005efe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10a      	bne.n	8005f1c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f06:	f7ff f99e 	bl	8005246 <LL_RCC_MSI_GetRange>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	e04b      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d102      	bne.n	8005f28 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e045      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d10a      	bne.n	8005f44 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f2e:	f7fe ffb7 	bl	8004ea0 <LL_RCC_HSE_IsEnabledDiv2>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d102      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005f38:	4b22      	ldr	r3, [pc, #136]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e03a      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f3e:	4b22      	ldr	r3, [pc, #136]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e037      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f44:	f7ff fab9 	bl	80054ba <LL_RCC_PLL_GetMainSource>
 8005f48:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCC_GetSysClockFreq+0x64>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d003      	beq.n	8005f5e <HAL_RCC_GetSysClockFreq+0x6a>
 8005f56:	e00d      	b.n	8005f74 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005f58:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f5a:	60bb      	str	r3, [r7, #8]
        break;
 8005f5c:	e015      	b.n	8005f8a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f5e:	f7fe ff9f 	bl	8004ea0 <LL_RCC_HSE_IsEnabledDiv2>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d102      	bne.n	8005f6e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005f68:	4b16      	ldr	r3, [pc, #88]	@ (8005fc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f6a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005f6c:	e00d      	b.n	8005f8a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005f6e:	4b16      	ldr	r3, [pc, #88]	@ (8005fc8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f70:	60bb      	str	r3, [r7, #8]
        break;
 8005f72:	e00a      	b.n	8005f8a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f74:	f7ff f967 	bl	8005246 <LL_RCC_MSI_GetRange>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	4a0f      	ldr	r2, [pc, #60]	@ (8005fc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f86:	60bb      	str	r3, [r7, #8]
        break;
 8005f88:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005f8a:	f7ff fa71 	bl	8005470 <LL_RCC_PLL_GetN>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	fb03 f402 	mul.w	r4, r3, r2
 8005f96:	f7ff fa84 	bl	80054a2 <LL_RCC_PLL_GetDivider>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005fa4:	f7ff fa71 	bl	800548a <LL_RCC_PLL_GetR>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	0f5b      	lsrs	r3, r3, #29
 8005fac:	3301      	adds	r3, #1
 8005fae:	fbb4 f3f3 	udiv	r3, r4, r3
 8005fb2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	0800eb0c 	.word	0x0800eb0c
 8005fc4:	00f42400 	.word	0x00f42400
 8005fc8:	01e84800 	.word	0x01e84800

08005fcc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fcc:	b598      	push	{r3, r4, r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005fd0:	f7ff ff90 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	f7ff f9e9 	bl	80053ac <LL_RCC_GetAHBPrescaler>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	4a03      	ldr	r2, [pc, #12]	@ (8005ff0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd98      	pop	{r3, r4, r7, pc}
 8005ff0:	0800eaac 	.word	0x0800eaac

08005ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff4:	b598      	push	{r3, r4, r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ff8:	f7ff ffe8 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	f7ff f9ef 	bl	80053e0 <LL_RCC_GetAPB1Prescaler>
 8006002:	4603      	mov	r3, r0
 8006004:	0a1b      	lsrs	r3, r3, #8
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	4a04      	ldr	r2, [pc, #16]	@ (800601c <HAL_RCC_GetPCLK1Freq+0x28>)
 800600c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd98      	pop	{r3, r4, r7, pc}
 800601c:	0800eaec 	.word	0x0800eaec

08006020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006020:	b598      	push	{r3, r4, r7, lr}
 8006022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006024:	f7ff ffd2 	bl	8005fcc <HAL_RCC_GetHCLKFreq>
 8006028:	4604      	mov	r4, r0
 800602a:	f7ff f9e5 	bl	80053f8 <LL_RCC_GetAPB2Prescaler>
 800602e:	4603      	mov	r3, r0
 8006030:	0adb      	lsrs	r3, r3, #11
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	4a04      	ldr	r2, [pc, #16]	@ (8006048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	bd98      	pop	{r3, r4, r7, pc}
 8006048:	0800eaec 	.word	0x0800eaec

0800604c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2bb0      	cmp	r3, #176	@ 0xb0
 8006058:	d903      	bls.n	8006062 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800605a:	4b15      	ldr	r3, [pc, #84]	@ (80060b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e007      	b.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f003 030f 	and.w	r3, r3, #15
 800606a:	4a11      	ldr	r2, [pc, #68]	@ (80060b0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800606c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006070:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006072:	f7ff f9a7 	bl	80053c4 <LL_RCC_GetAHB4Prescaler>
 8006076:	4603      	mov	r3, r0
 8006078:	091b      	lsrs	r3, r3, #4
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	4a0d      	ldr	r2, [pc, #52]	@ (80060b4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	fbb2 f3f3 	udiv	r3, r2, r3
 800608a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a0a      	ldr	r2, [pc, #40]	@ (80060b8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	0c9c      	lsrs	r4, r3, #18
 8006096:	f7fe fee5 	bl	8004e64 <HAL_PWREx_GetVoltageRange>
 800609a:	4603      	mov	r3, r0
 800609c:	4619      	mov	r1, r3
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 f80c 	bl	80060bc <RCC_SetFlashLatency>
 80060a4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd90      	pop	{r4, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	0800eb0c 	.word	0x0800eb0c
 80060b4:	0800eaac 	.word	0x0800eaac
 80060b8:	431bde83 	.word	0x431bde83

080060bc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80060bc:	b590      	push	{r4, r7, lr}
 80060be:	b093      	sub	sp, #76	@ 0x4c
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80060c6:	4b37      	ldr	r3, [pc, #220]	@ (80061a4 <RCC_SetFlashLatency+0xe8>)
 80060c8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80060cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80060d2:	4a35      	ldr	r2, [pc, #212]	@ (80061a8 <RCC_SetFlashLatency+0xec>)
 80060d4:	f107 031c 	add.w	r3, r7, #28
 80060d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80060da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80060de:	4b33      	ldr	r3, [pc, #204]	@ (80061ac <RCC_SetFlashLatency+0xf0>)
 80060e0:	f107 040c 	add.w	r4, r7, #12
 80060e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80060e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80060ea:	2300      	movs	r3, #0
 80060ec:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060f4:	d11a      	bne.n	800612c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80060fa:	e013      	b.n	8006124 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80060fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	3348      	adds	r3, #72	@ 0x48
 8006102:	443b      	add	r3, r7
 8006104:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	429a      	cmp	r2, r3
 800610c:	d807      	bhi.n	800611e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800610e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	3348      	adds	r3, #72	@ 0x48
 8006114:	443b      	add	r3, r7
 8006116:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800611a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800611c:	e020      	b.n	8006160 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800611e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006120:	3301      	adds	r3, #1
 8006122:	643b      	str	r3, [r7, #64]	@ 0x40
 8006124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006126:	2b03      	cmp	r3, #3
 8006128:	d9e8      	bls.n	80060fc <RCC_SetFlashLatency+0x40>
 800612a:	e019      	b.n	8006160 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800612c:	2300      	movs	r3, #0
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006130:	e013      	b.n	800615a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	3348      	adds	r3, #72	@ 0x48
 8006138:	443b      	add	r3, r7
 800613a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d807      	bhi.n	8006154 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	3348      	adds	r3, #72	@ 0x48
 800614a:	443b      	add	r3, r7
 800614c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006150:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006152:	e005      	b.n	8006160 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006156:	3301      	adds	r3, #1
 8006158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800615a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615c:	2b02      	cmp	r3, #2
 800615e:	d9e8      	bls.n	8006132 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006160:	4b13      	ldr	r3, [pc, #76]	@ (80061b0 <RCC_SetFlashLatency+0xf4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f023 0207 	bic.w	r2, r3, #7
 8006168:	4911      	ldr	r1, [pc, #68]	@ (80061b0 <RCC_SetFlashLatency+0xf4>)
 800616a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800616c:	4313      	orrs	r3, r2
 800616e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006170:	f7fb f92e 	bl	80013d0 <HAL_GetTick>
 8006174:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006176:	e008      	b.n	800618a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006178:	f7fb f92a 	bl	80013d0 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e007      	b.n	800619a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800618a:	4b09      	ldr	r3, [pc, #36]	@ (80061b0 <RCC_SetFlashLatency+0xf4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006194:	429a      	cmp	r2, r3
 8006196:	d1ef      	bne.n	8006178 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	374c      	adds	r7, #76	@ 0x4c
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd90      	pop	{r4, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	0800ea00 	.word	0x0800ea00
 80061a8:	0800ea10 	.word	0x0800ea10
 80061ac:	0800ea1c 	.word	0x0800ea1c
 80061b0:	58004000 	.word	0x58004000

080061b4 <LL_RCC_LSE_IsEnabled>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <LL_RCC_LSE_IsEnabled+0x18>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <LL_RCC_LSE_IsEnabled+0x1a>
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <LL_RCC_LSE_IsReady>:
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d101      	bne.n	80061f0 <LL_RCC_LSE_IsReady+0x18>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <LL_RCC_LSE_IsReady+0x1a>
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <LL_RCC_SetRFWKPClockSource>:
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800620c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <LL_RCC_SetSMPSClockSource>:
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4313      	orrs	r3, r2
 8006242:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <LL_RCC_SetSMPSPrescaler>:
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006262:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4313      	orrs	r3, r2
 800626a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_RCC_SetUSARTClockSource>:
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006288:	f023 0203 	bic.w	r2, r3, #3
 800628c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <LL_RCC_SetLPUARTClockSource>:
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4313      	orrs	r3, r2
 80062c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <LL_RCC_SetI2CClockSource>:
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80062d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80062e8:	43db      	mvns	r3, r3
 80062ea:	401a      	ands	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80062f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <LL_RCC_SetLPTIMClockSource>:
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006316:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	43db      	mvns	r3, r3
 8006322:	401a      	ands	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <LL_RCC_SetSAIClockSource>:
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <LL_RCC_SetRNGClockSource>:
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800637e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <LL_RCC_SetCLK48ClockSource>:
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800639e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80063aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <LL_RCC_SetUSBClockSource>:
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b082      	sub	sp, #8
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ffe3 	bl	8006396 <LL_RCC_SetCLK48ClockSource>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <LL_RCC_SetADCClockSource>:
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80063ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_RCC_SetRTCClockSource>:
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800640c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006414:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006418:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_RCC_GetRTCClockSource>:
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <LL_RCC_ForceBackupDomainReset>:
{
 800644a:	b480      	push	{r7}
 800644c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800645a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800645e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_RCC_ReleaseBackupDomainReset>:
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800647c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006484:	bf00      	nop
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <LL_RCC_PLLSAI1_Enable>:
{
 800648e:	b480      	push	{r7}
 8006490:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800649c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064a0:	6013      	str	r3, [r2, #0]
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_RCC_PLLSAI1_Disable>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80064b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <LL_RCC_PLLSAI1_IsReady>:
{
 80064ca:	b480      	push	{r7}
 80064cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80064dc:	d101      	bne.n	80064e2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b088      	sub	sp, #32
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80064f6:	2300      	movs	r3, #0
 80064f8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80064fa:	2300      	movs	r3, #0
 80064fc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006506:	2b00      	cmp	r3, #0
 8006508:	d034      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006512:	d021      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006518:	d81b      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800651a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800651e:	d01d      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006524:	d815      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800652e:	d110      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800653a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800653e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006540:	e00d      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f947 	bl	80067da <RCCEx_PLLSAI1_ConfigNP>
 800654c:	4603      	mov	r3, r0
 800654e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006550:	e005      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	77fb      	strb	r3, [r7, #31]
        break;
 8006556:	e002      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006558:	bf00      	nop
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	7ffb      	ldrb	r3, [r7, #31]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fee8 	bl	800633e <LL_RCC_SetSAIClockSource>
 800656e:	e001      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006570:	7ffb      	ldrb	r3, [r7, #31]
 8006572:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800657c:	2b00      	cmp	r3, #0
 800657e:	d046      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006580:	f7ff ff56 	bl	8006430 <LL_RCC_GetRTCClockSource>
 8006584:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d03c      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006590:	f7fe fc58 	bl	8004e44 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d105      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff ff30 	bl	8006404 <LL_RCC_SetRTCClockSource>
 80065a4:	e02e      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80065a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80065b0:	f7ff ff4b 	bl	800644a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80065b4:	f7ff ff5a 	bl	800646c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80065c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80065d0:	f7ff fdf0 	bl	80061b4 <LL_RCC_LSE_IsEnabled>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d114      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065da:	f7fa fef9 	bl	80013d0 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80065e0:	e00b      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e2:	f7fa fef5 	bl	80013d0 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d902      	bls.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	77fb      	strb	r3, [r7, #31]
              break;
 80065f8:	e004      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80065fa:	f7ff fded 	bl	80061d8 <LL_RCC_LSE_IsReady>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d1ee      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006604:	7ffb      	ldrb	r3, [r7, #31]
 8006606:	77bb      	strb	r3, [r7, #30]
 8006608:	e001      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	7ffb      	ldrb	r3, [r7, #31]
 800660c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d004      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fe2a 	bl	8006278 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fe35 	bl	80062a4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fe5d 	bl	800630a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b00      	cmp	r3, #0
 800665a:	d004      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fe52 	bl	800630a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0304 	and.w	r3, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	d004      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fe2a 	bl	80062d0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0308 	and.w	r3, r3, #8
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fe1f 	bl	80062d0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d022      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fe8d 	bl	80063c2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b0:	d107      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066c0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066ca:	d10b      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f8dd 	bl	8006890 <RCCEx_PLLSAI1_ConfigNQ>
 80066d6:	4603      	mov	r3, r0
 80066d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80066e0:	7ffb      	ldrb	r3, [r7, #31]
 80066e2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02b      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f8:	d008      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006702:	d003      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006708:	2b00      	cmp	r3, #0
 800670a:	d105      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fe2a 	bl	800636a <LL_RCC_SetRNGClockSource>
 8006716:	e00a      	b.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	2000      	movs	r0, #0
 8006724:	f7ff fe21 	bl	800636a <LL_RCC_SetRNGClockSource>
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff fe34 	bl	8006396 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006732:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006736:	d107      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006746:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006750:	2b00      	cmp	r3, #0
 8006752:	d022      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff fe3d 	bl	80063d8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006766:	d107      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006776:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006780:	d10b      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f000 f8dd 	bl	8006946 <RCCEx_PLLSAI1_ConfigNR>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006796:	7ffb      	ldrb	r3, [r7, #31]
 8006798:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fd26 	bl	80061fc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d009      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7ff fd45 	bl	8006250 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fd2c 	bl	8006228 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80067d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3720      	adds	r7, #32
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80067e6:	f7ff fe61 	bl	80064ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80067ea:	f7fa fdf1 	bl	80013d0 <HAL_GetTick>
 80067ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067f0:	e009      	b.n	8006806 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067f2:	f7fa fded 	bl	80013d0 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d902      	bls.n	8006806 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	73fb      	strb	r3, [r7, #15]
      break;
 8006804:	e004      	b.n	8006810 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006806:	f7ff fe60 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1f0      	bne.n	80067f2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d137      	bne.n	8006886 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006840:	4313      	orrs	r3, r2
 8006842:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006844:	f7ff fe23 	bl	800648e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006848:	f7fa fdc2 	bl	80013d0 <HAL_GetTick>
 800684c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800684e:	e009      	b.n	8006864 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006850:	f7fa fdbe 	bl	80013d0 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d902      	bls.n	8006864 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	73fb      	strb	r3, [r7, #15]
        break;
 8006862:	e004      	b.n	800686e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006864:	f7ff fe31 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 8006868:	4603      	mov	r3, r0
 800686a:	2b01      	cmp	r3, #1
 800686c:	d1f0      	bne.n	8006850 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d108      	bne.n	8006886 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006874:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800689c:	f7ff fe06 	bl	80064ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068a0:	f7fa fd96 	bl	80013d0 <HAL_GetTick>
 80068a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068a6:	e009      	b.n	80068bc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a8:	f7fa fd92 	bl	80013d0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d902      	bls.n	80068bc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ba:	e004      	b.n	80068c6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068bc:	f7ff fe05 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d137      	bne.n	800693c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80068cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068e0:	4313      	orrs	r3, r2
 80068e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80068fa:	f7ff fdc8 	bl	800648e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fe:	f7fa fd67 	bl	80013d0 <HAL_GetTick>
 8006902:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006904:	e009      	b.n	800691a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006906:	f7fa fd63 	bl	80013d0 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d902      	bls.n	800691a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	73fb      	strb	r3, [r7, #15]
        break;
 8006918:	e004      	b.n	8006924 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800691a:	f7ff fdd6 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 800691e:	4603      	mov	r3, r0
 8006920:	2b01      	cmp	r3, #1
 8006922:	d1f0      	bne.n	8006906 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d108      	bne.n	800693c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800692a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006938:	4313      	orrs	r3, r2
 800693a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800693c:	7bfb      	ldrb	r3, [r7, #15]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006952:	f7ff fdab 	bl	80064ac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006956:	f7fa fd3b 	bl	80013d0 <HAL_GetTick>
 800695a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800695c:	e009      	b.n	8006972 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800695e:	f7fa fd37 	bl	80013d0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d902      	bls.n	8006972 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	73fb      	strb	r3, [r7, #15]
      break;
 8006970:	e004      	b.n	800697c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006972:	f7ff fdaa 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f0      	bne.n	800695e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d137      	bne.n	80069f2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	021b      	lsls	r3, r3, #8
 8006992:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006996:	4313      	orrs	r3, r2
 8006998:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ac:	4313      	orrs	r3, r2
 80069ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80069b0:	f7ff fd6d 	bl	800648e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069b4:	f7fa fd0c 	bl	80013d0 <HAL_GetTick>
 80069b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069ba:	e009      	b.n	80069d0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069bc:	f7fa fd08 	bl	80013d0 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d902      	bls.n	80069d0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
        break;
 80069ce:	e004      	b.n	80069da <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069d0:	f7ff fd7b 	bl	80064ca <LL_RCC_PLLSAI1_IsReady>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d1f0      	bne.n	80069bc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d108      	bne.n	80069f2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ee:	4313      	orrs	r3, r2
 80069f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e0aa      	b.n	8006b64 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fa f8a0 	bl	8000b64 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a46:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a56:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695a      	ldr	r2, [r3, #20]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006a66:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a70:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a80:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d012      	beq.n	8006ab0 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a9e:	609a      	str	r2, [r3, #8]
 8006aa0:	e006      	b.n	8006ab0 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006aae:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d104      	bne.n	8006ac2 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	6812      	ldr	r2, [r2, #0]
 8006acc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad4:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	695a      	ldr	r2, [r3, #20]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006afe:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8006b10:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8006b12:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b1c:	d110      	bne.n	8006b40 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8006b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b2e:	d107      	bne.n	8006b40 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8006b82:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b8c:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8006b8e:	2180      	movs	r1, #128	@ 0x80
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fca7 	bl	80074e4 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 0372 	and.w	r3, r3, #114	@ 0x72
 8006bbe:	2b72      	cmp	r3, #114	@ 0x72
 8006bc0:	d12d      	bne.n	8006c1e <HAL_SMBUS_EV_IRQHandler+0x7e>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d113      	bne.n	8006bf4 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d014      	beq.n	8006c1e <HAL_SMBUS_EV_IRQHandler+0x7e>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf8:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 8006bfc:	2b32      	cmp	r3, #50	@ 0x32
 8006bfe:	d104      	bne.n	8006c0a <HAL_SMBUS_EV_IRQHandler+0x6a>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8006c00:	68f9      	ldr	r1, [r7, #12]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa92 	bl	800712c <SMBUS_Slave_ISR>
 8006c08:	e009      	b.n	8006c1e <HAL_SMBUS_EV_IRQHandler+0x7e>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0e:	f003 0312 	and.w	r3, r3, #18
 8006c12:	2b12      	cmp	r3, #18
 8006c14:	d103      	bne.n	8006c1e <HAL_SMBUS_EV_IRQHandler+0x7e>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8006c16:	68f9      	ldr	r1, [r7, #12]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8b5 	bl	8006d88 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f003 0374 	and.w	r3, r3, #116	@ 0x74
 8006c24:	2b74      	cmp	r3, #116	@ 0x74
 8006c26:	d12d      	bne.n	8006c84 <HAL_SMBUS_EV_IRQHandler+0xe4>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d113      	bne.n	8006c5a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10e      	bne.n	8006c5a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <HAL_SMBUS_EV_IRQHandler+0xe4>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5e:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 8006c62:	2b42      	cmp	r3, #66	@ 0x42
 8006c64:	d104      	bne.n	8006c70 <HAL_SMBUS_EV_IRQHandler+0xd0>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa5f 	bl	800712c <SMBUS_Slave_ISR>
 8006c6e:	e009      	b.n	8006c84 <HAL_SMBUS_EV_IRQHandler+0xe4>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006c78:	2b22      	cmp	r3, #34	@ 0x22
 8006c7a:	d103      	bne.n	8006c84 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8006c7c:	68f9      	ldr	r1, [r7, #12]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f882 	bl	8006d88 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f003 0320 	and.w	r3, r3, #32
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d018      	beq.n	8006cd4 <HAL_SMBUS_EV_IRQHandler+0x134>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d109      	bne.n	8006cc0 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 0320 	and.w	r3, r3, #32
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <HAL_SMBUS_EV_IRQHandler+0x134>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d103      	bne.n	8006cd4 <HAL_SMBUS_EV_IRQHandler+0x134>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8006ccc:	68f9      	ldr	r1, [r7, #12]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa2c 	bl	800712c <SMBUS_Slave_ISR>
    }
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fcb3 	bl	8007650 <SMBUS_ITErrorHandler>
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 8006d22:	bf00      	nop
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 8006d36:	bf00      	nop
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_SMBUS_AddrCallback>:
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection,
                                   uint16_t AddrMatchCode)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	70fb      	strb	r3, [r7, #3]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 8006d66:	bf00      	nop
 8006d68:	370c      	adds	r7, #12
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <SMBUS_Master_ISR+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e1c1      	b.n	8007124 <SMBUS_Master_ISR+0x39c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f003 0310 	and.w	r3, r3, #16
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d014      	beq.n	8006ddc <SMBUS_Master_ISR+0x54>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2210      	movs	r2, #16
 8006db8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dbe:	f043 0204 	orr.w	r2, r3, #4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fcfb 	bl	80077c2 <SMBUS_Flush_TXDR>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ffcc 	bl	8006d72 <HAL_SMBUS_ErrorCallback>
 8006dda:	e19e      	b.n	800711a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d079      	beq.n	8006eda <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fc32 	bl	8007650 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df0:	2b12      	cmp	r3, #18
 8006df2:	d12d      	bne.n	8006e50 <SMBUS_Master_ISR+0xc8>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8006df4:	21f2      	movs	r1, #242	@ 0xf2
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fbad 	bl	8007556 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2220      	movs	r2, #32
 8006e02:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6859      	ldr	r1, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800704c <SMBUS_Master_ISR+0x2c4>)
 8006e10:	400b      	ands	r3, r1
 8006e12:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0201 	bic.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff ff52 	bl	8006cf2 <HAL_SMBUS_MasterTxCpltCallback>
 8006e4e:	e164      	b.n	800711a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e54:	2b22      	cmp	r3, #34	@ 0x22
 8006e56:	f040 8160 	bne.w	800711a <SMBUS_Master_ISR+0x392>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01c      	beq.n	8006e9e <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	635a      	str	r2, [r3, #52]	@ 0x34

        if ((hsmbus->XferSize > 0U))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00c      	beq.n	8006e9e <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8006e9e:	21d4      	movs	r1, #212	@ 0xd4
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fb58 	bl	8007556 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b64      	ldr	r3, [pc, #400]	@ (800704c <SMBUS_Master_ISR+0x2c4>)
 8006eba:	400b      	ands	r3, r1
 8006ebc:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff ff17 	bl	8006d06 <HAL_SMBUS_MasterRxCpltCallback>
 8006ed8:	e11f      	b.n	800711a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d019      	beq.n	8006f18 <SMBUS_Master_ISR+0x190>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006f00:	3b01      	subs	r3, #1
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	871a      	strh	r2, [r3, #56]	@ 0x38
    hsmbus->XferCount--;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8006f16:	e100      	b.n	800711a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d018      	beq.n	8006f54 <SMBUS_Master_ISR+0x1cc>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f26:	781a      	ldrb	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	871a      	strh	r2, [r3, #56]	@ 0x38
    hsmbus->XferCount--;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8006f52:	e0e2      	b.n	800711a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808f 	beq.w	800707e <SMBUS_Master_ISR+0x2f6>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d046      	beq.n	8006ff8 <SMBUS_Master_ISR+0x270>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d142      	bne.n	8006ff8 <SMBUS_Master_ISR+0x270>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7e:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2bff      	cmp	r3, #255	@ 0xff
 8006f88:	d910      	bls.n	8006fac <SMBUS_Master_ISR+0x224>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 8006f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f96:	89f9      	ldrh	r1, [r7, #14]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	9200      	str	r2, [sp, #0]
 8006f9c:	22ff      	movs	r2, #255	@ 0xff
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fc34 	bl	800780c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	22ff      	movs	r2, #255	@ 0xff
 8006fa8:	871a      	strh	r2, [r3, #56]	@ 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8006faa:	e0b5      	b.n	8007118 <SMBUS_Master_ISR+0x390>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	871a      	strh	r2, [r3, #56]	@ 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc0:	89f9      	ldrh	r1, [r7, #14]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	9000      	str	r0, [sp, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fc20 	bl	800780c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 809e 	beq.w	8007118 <SMBUS_Master_ISR+0x390>
        {
          hsmbus->XferSize--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	875a      	strh	r2, [r3, #58]	@ 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8006ff6:	e08f      	b.n	8007118 <SMBUS_Master_ISR+0x390>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 808b 	bne.w	800711a <SMBUS_Master_ISR+0x392>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	f040 8086 	bne.w	800711a <SMBUS_Master_ISR+0x392>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800701c:	d07d      	beq.n	800711a <SMBUS_Master_ISR+0x392>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007022:	2b12      	cmp	r3, #18
 8007024:	d114      	bne.n	8007050 <SMBUS_Master_ISR+0x2c8>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8007026:	21f2      	movs	r1, #242	@ 0xf2
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fa94 	bl	8007556 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff fe54 	bl	8006cf2 <HAL_SMBUS_MasterTxCpltCallback>
 800704a:	e066      	b.n	800711a <SMBUS_Master_ISR+0x392>
 800704c:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007054:	2b22      	cmp	r3, #34	@ 0x22
 8007056:	d160      	bne.n	800711a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8007058:	21d4      	movs	r1, #212	@ 0xd4
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa7b 	bl	8007556 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fe45 	bl	8006d06 <HAL_SMBUS_MasterRxCpltCallback>
 800707c:	e04d      	b.n	800711a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d048      	beq.n	800711a <SMBUS_Master_ISR+0x392>
  {
    if (hsmbus->XferCount == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d143      	bne.n	800711a <SMBUS_Master_ISR+0x392>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007096:	2b00      	cmp	r3, #0
 8007098:	d108      	bne.n	80070ac <SMBUS_Master_ISR+0x324>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	e036      	b.n	800711a <SMBUS_Master_ISR+0x392>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070ba:	d02e      	beq.n	800711a <SMBUS_Master_ISR+0x392>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c0:	2b12      	cmp	r3, #18
 80070c2:	d112      	bne.n	80070ea <SMBUS_Master_ISR+0x362>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80070c4:	21f2      	movs	r1, #242	@ 0xf2
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa45 	bl	8007556 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff fe05 	bl	8006cf2 <HAL_SMBUS_MasterTxCpltCallback>
 80070e8:	e017      	b.n	800711a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ee:	2b22      	cmp	r3, #34	@ 0x22
 80070f0:	d113      	bne.n	800711a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80070f2:	21d4      	movs	r1, #212	@ 0xd4
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa2e 	bl	8007556 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff fdf8 	bl	8006d06 <HAL_SMBUS_MasterRxCpltCallback>
 8007116:	e000      	b.n	800711a <SMBUS_Master_ISR+0x392>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8007118:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <SMBUS_Slave_ISR+0x18>
 8007140:	2302      	movs	r3, #2
 8007142:	e1c8      	b.n	80074d6 <SMBUS_Slave_ISR+0x3aa>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	d039      	beq.n	80071ca <SMBUS_Slave_ISR+0x9e>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <SMBUS_Slave_ISR+0x4c>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2210      	movs	r2, #16
 8007166:	61da      	str	r2, [r3, #28]

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb2a 	bl	80077c2 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007176:	e149      	b.n	800740c <SMBUS_Slave_ISR+0x2e0>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800718c:	f023 0232 	bic.w	r2, r3, #50	@ 0x32
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	649a      	str	r2, [r3, #72]	@ 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007198:	f023 0242 	bic.w	r2, r3, #66	@ 0x42
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 80071a0:	21f6      	movs	r1, #246	@ 0xf6
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f9d7 	bl	8007556 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071ac:	f043 0204 	orr.w	r2, r3, #4
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb04 	bl	80077c2 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fdd5 	bl	8006d72 <HAL_SMBUS_ErrorCallback>
 80071c8:	e120      	b.n	800740c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d022      	beq.n	800721a <SMBUS_Slave_ISR+0xee>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	0c5b      	lsrs	r3, r3, #17
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f2:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0208 	bic.w	r2, r2, #8
 8007202:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 800720c:	89ba      	ldrh	r2, [r7, #12]
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fd95 	bl	8006d42 <HAL_SMBUS_AddrCallback>
 8007218:	e0f8      	b.n	800740c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d105      	bne.n	8007230 <SMBUS_Slave_ISR+0x104>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 80b0 	beq.w	8007390 <SMBUS_Slave_ISR+0x264>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007234:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 8007238:	2b42      	cmp	r3, #66	@ 0x42
 800723a:	d15e      	bne.n	80072fa <SMBUS_Slave_ISR+0x1ce>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	635a      	str	r2, [r3, #52]	@ 0x34

      hsmbus->XferSize--;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	871a      	strh	r2, [r3, #56]	@ 0x38
      hsmbus->XferCount--;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	875a      	strh	r2, [r3, #58]	@ 0x3a

      if (hsmbus->XferCount == 1U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10f      	bne.n	8007298 <SMBUS_Slave_ISR+0x16c>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	63da      	str	r2, [r3, #60]	@ 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	2200      	movs	r2, #0
 800728a:	9200      	str	r2, [sp, #0]
 800728c:	2201      	movs	r2, #1
 800728e:	2100      	movs	r1, #0
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fabb 	bl	800780c <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8007296:	e0b8      	b.n	800740a <SMBUS_Slave_ISR+0x2de>
      }
      else if (hsmbus->XferCount == 0U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800729c:	b29b      	uxth	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d115      	bne.n	80072ce <SMBUS_Slave_ISR+0x1a2>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80072a2:	21d4      	movs	r1, #212	@ 0xd4
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f956 	bl	8007556 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072b6:	f023 0242 	bic.w	r2, r3, #66	@ 0x42
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	649a      	str	r2, [r3, #72]	@ 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fd31 	bl	8006d2e <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80072cc:	e09d      	b.n	800740a <SMBUS_Slave_ISR+0x2de>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 80072d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072da:	2200      	movs	r2, #0
 80072dc:	9200      	str	r2, [sp, #0]
 80072de:	2201      	movs	r2, #1
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa92 	bl	800780c <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072f6:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80072f8:	e087      	b.n	800740a <SMBUS_Slave_ISR+0x2de>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072fe:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 8007302:	2b32      	cmp	r3, #50	@ 0x32
 8007304:	f040 8081 	bne.w	800740a <SMBUS_Slave_ISR+0x2de>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d07b      	beq.n	800740a <SMBUS_Slave_ISR+0x2de>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007316:	2b00      	cmp	r3, #0
 8007318:	d177      	bne.n	800740a <SMBUS_Slave_ISR+0x2de>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800731e:	b29b      	uxth	r3, r3
 8007320:	2bff      	cmp	r3, #255	@ 0xff
 8007322:	d910      	bls.n	8007346 <SMBUS_Slave_ISR+0x21a>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 800732c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007330:	2200      	movs	r2, #0
 8007332:	9200      	str	r2, [sp, #0]
 8007334:	22ff      	movs	r2, #255	@ 0xff
 8007336:	2100      	movs	r1, #0
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fa67 	bl	800780c <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	22ff      	movs	r2, #255	@ 0xff
 8007342:	871a      	strh	r2, [r3, #56]	@ 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8007344:	e061      	b.n	800740a <SMBUS_Slave_ISR+0x2de>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800734a:	b29a      	uxth	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	871a      	strh	r2, [r3, #56]	@ 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007354:	b2da      	uxtb	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800735a:	2100      	movs	r1, #0
 800735c:	9100      	str	r1, [sp, #0]
 800735e:	2100      	movs	r1, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa53 	bl	800780c <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d04a      	beq.n	800740a <SMBUS_Slave_ISR+0x2de>
          {
            hsmbus->XferSize--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	871a      	strh	r2, [r3, #56]	@ 0x38
            hsmbus->XferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800738e:	e03c      	b.n	800740a <SMBUS_Slave_ISR+0x2de>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d038      	beq.n	800740c <SMBUS_Slave_ISR+0x2e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d017      	beq.n	80073d4 <SMBUS_Slave_ISR+0x2a8>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	635a      	str	r2, [r3, #52]	@ 0x34

      hsmbus->XferCount--;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	875a      	strh	r2, [r3, #58]	@ 0x3a
      hsmbus->XferSize--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	871a      	strh	r2, [r3, #56]	@ 0x38
    }

    if (hsmbus->XferCount == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <SMBUS_Slave_ISR+0x2e0>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80073de:	21f2      	movs	r1, #242	@ 0xf2
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8b8 	bl	8007556 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f2:	f023 0232 	bic.w	r2, r3, #50	@ 0x32
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fc89 	bl	8006d1a <HAL_SMBUS_SlaveTxCpltCallback>
 8007408:	e000      	b.n	800740c <SMBUS_Slave_ISR+0x2e0>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800740a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d05a      	beq.n	80074cc <SMBUS_Slave_ISR+0x3a0>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	2b08      	cmp	r3, #8
 8007420:	d154      	bne.n	80074cc <SMBUS_Slave_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b04      	cmp	r3, #4
 800742e:	d11c      	bne.n	800746a <SMBUS_Slave_ISR+0x33e>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	635a      	str	r2, [r3, #52]	@ 0x34

        if ((hsmbus->XferSize > 0U))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <SMBUS_Slave_ISR+0x33e>
        {
          hsmbus->XferSize--;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800746a:	21f6      	movs	r1, #246	@ 0xf6
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f872 	bl	8007556 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8007472:	2138      	movs	r1, #56	@ 0x38
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f86e 	bl	8007556 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007488:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b12      	ldr	r3, [pc, #72]	@ (80074e0 <SMBUS_Slave_ISR+0x3b4>)
 8007496:	400b      	ands	r3, r1
 8007498:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2220      	movs	r2, #32
 80074a0:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2208      	movs	r2, #8
 80074a8:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	63da      	str	r2, [r3, #60]	@ 0x3c
      hsmbus->PreviousState = hsmbus->State;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fc49 	bl	8006d5e <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	fe00e800 	.word	0xfe00e800

080074e4 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007502:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800750a:	2b38      	cmp	r3, #56	@ 0x38
 800750c:	d103      	bne.n	8007516 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007514:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800751c:	2bf2      	cmp	r3, #242	@ 0xf2
 800751e:	d103      	bne.n	8007528 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007526:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 800752e:	2bd4      	cmp	r3, #212	@ 0xd4
 8007530:	d103      	bne.n	800753a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007538:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007568:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <SMBUS_Disable_IRQ+0x2c>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007580:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8007588:	2bf2      	cmp	r3, #242	@ 0xf2
 800758a:	d11c      	bne.n	80075c6 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007592:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075b2:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80075c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 80075cc:	2bd4      	cmp	r3, #212	@ 0xd4
 80075ce:	d11c      	bne.n	800760a <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80075d6:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d108      	bne.n	80075f8 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f6:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8007608:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007610:	2b38      	cmp	r3, #56	@ 0x38
 8007612:	d10e      	bne.n	8007632 <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800761a:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007630:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6819      	ldr	r1, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	43da      	mvns	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	400a      	ands	r2, r1
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00f      	beq.n	8007692 <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007680:	f043 0201 	orr.w	r2, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007690:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00f      	beq.n	80076bc <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076aa:	f043 0208 	orr.w	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80076ba:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00f      	beq.n	80076e6 <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076d4:	f043 0202 	orr.w	r2, r3, #2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076e4:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00f      	beq.n	8007710 <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fe:	f043 0220 	orr.w	r2, r3, #32
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800770e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007728:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007738:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00f      	beq.n	8007764 <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00a      	beq.n	8007764 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007752:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007762:	61da      	str	r2, [r3, #28]
  }

  if (hsmbus->ErrorCode != HAL_SMBUS_ERROR_NONE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <SMBUS_ITErrorHandler+0x122>
  {
    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f828 	bl	80077c2 <SMBUS_Flush_TXDR>
  }

  /* Store current volatile hsmbus->ErrorCode, misra rule */
  tmperror = hsmbus->ErrorCode;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007776:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d01d      	beq.n	80077ba <SMBUS_ITErrorHandler+0x16a>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b04      	cmp	r3, #4
 8007782:	d01a      	beq.n	80077ba <SMBUS_ITErrorHandler+0x16a>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d112      	bne.n	80077b4 <SMBUS_ITErrorHandler+0x164>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007792:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 800779a:	2b32      	cmp	r3, #50	@ 0x32
 800779c:	d004      	beq.n	80077a8 <SMBUS_ITErrorHandler+0x158>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 80077a4:	2b42      	cmp	r3, #66	@ 0x42
 80077a6:	d105      	bne.n	80077b4 <SMBUS_ITErrorHandler+0x164>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2208      	movs	r2, #8
 80077b2:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fadc 	bl	8006d72 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <SMBUS_Flush_TXDR>:
  * @brief  SMBUS Tx data register flush process.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_Flush_TXDR(SMBUS_HandleTypeDef *hsmbus)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d103      	bne.n	80077e0 <SMBUS_Flush_TXDR+0x1e>
  {
    hsmbus->Instance->TXDR = 0x00U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2200      	movs	r2, #0
 80077de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXE) == RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d007      	beq.n	80077fe <SMBUS_Flush_TXDR+0x3c>
  {
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TXE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0201 	orr.w	r2, r2, #1
 80077fc:	619a      	str	r2, [r3, #24]
  }
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	817b      	strh	r3, [r7, #10]
 800781a:	4613      	mov	r3, r2
 800781c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	0d5b      	lsrs	r3, r3, #21
 8007828:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800782c:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <SMBUS_TransferConfig+0x58>)
 800782e:	430b      	orrs	r3, r1
 8007830:	43db      	mvns	r3, r3
 8007832:	ea02 0103 	and.w	r1, r2, r3
 8007836:	897b      	ldrh	r3, [r7, #10]
 8007838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800783c:	7a7b      	ldrb	r3, [r7, #9]
 800783e:	041b      	lsls	r3, r3, #16
 8007840:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	431a      	orrs	r2, r3
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8007856:	bf00      	nop
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	07ff63ff 	.word	0x07ff63ff

08007868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e049      	b.n	800790e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7f9 f9d4 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2202      	movs	r2, #2
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f000 fa7c 	bl	8007da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b01      	cmp	r3, #1
 800792a:	d001      	beq.n	8007930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e036      	b.n	800799e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <HAL_TIM_Base_Start_IT+0x94>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <HAL_TIM_Base_Start_IT+0x44>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800795a:	d115      	bne.n	8007988 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <HAL_TIM_Base_Start_IT+0x98>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b06      	cmp	r3, #6
 800796c:	d015      	beq.n	800799a <HAL_TIM_Base_Start_IT+0x82>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007974:	d011      	beq.n	800799a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007986:	e008      	b.n	800799a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	e000      	b.n	800799c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40012c00 	.word	0x40012c00
 80079b0:	00010007 	.word	0x00010007

080079b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d020      	beq.n	8007a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d01b      	beq.n	8007a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f06f 0202 	mvn.w	r2, #2
 80079e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2201      	movs	r2, #1
 80079ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f9b2 	bl	8007d68 <HAL_TIM_IC_CaptureCallback>
 8007a04:	e005      	b.n	8007a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f9a4 	bl	8007d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f9b5 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d020      	beq.n	8007a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01b      	beq.n	8007a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f06f 0204 	mvn.w	r2, #4
 8007a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f98c 	bl	8007d68 <HAL_TIM_IC_CaptureCallback>
 8007a50:	e005      	b.n	8007a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f97e 	bl	8007d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f98f 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d020      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01b      	beq.n	8007ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0208 	mvn.w	r2, #8
 8007a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2204      	movs	r2, #4
 8007a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f966 	bl	8007d68 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e005      	b.n	8007aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f958 	bl	8007d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f969 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f003 0310 	and.w	r3, r3, #16
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d020      	beq.n	8007afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01b      	beq.n	8007afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f06f 0210 	mvn.w	r2, #16
 8007acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d003      	beq.n	8007aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f940 	bl	8007d68 <HAL_TIM_IC_CaptureCallback>
 8007ae8:	e005      	b.n	8007af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f932 	bl	8007d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f943 	bl	8007d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0201 	mvn.w	r2, #1
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7f8 fd2a 	bl	8000574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d104      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00c      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 faa1 	bl	8008090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d007      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa99 	bl	80080a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00c      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f8fd 	bl	8007d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d007      	beq.n	8007bba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f06f 0220 	mvn.w	r2, #32
 8007bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa61 	bl	800807c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_ConfigClockSource+0x1c>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e0b6      	b.n	8007d4c <HAL_TIM_ConfigClockSource+0x18a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007bfc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c08:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c1a:	d03e      	beq.n	8007c9a <HAL_TIM_ConfigClockSource+0xd8>
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c20:	f200 8087 	bhi.w	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c28:	f000 8086 	beq.w	8007d38 <HAL_TIM_ConfigClockSource+0x176>
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c30:	d87f      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c32:	2b70      	cmp	r3, #112	@ 0x70
 8007c34:	d01a      	beq.n	8007c6c <HAL_TIM_ConfigClockSource+0xaa>
 8007c36:	2b70      	cmp	r3, #112	@ 0x70
 8007c38:	d87b      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c3a:	2b60      	cmp	r3, #96	@ 0x60
 8007c3c:	d050      	beq.n	8007ce0 <HAL_TIM_ConfigClockSource+0x11e>
 8007c3e:	2b60      	cmp	r3, #96	@ 0x60
 8007c40:	d877      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c42:	2b50      	cmp	r3, #80	@ 0x50
 8007c44:	d03c      	beq.n	8007cc0 <HAL_TIM_ConfigClockSource+0xfe>
 8007c46:	2b50      	cmp	r3, #80	@ 0x50
 8007c48:	d873      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c4a:	2b40      	cmp	r3, #64	@ 0x40
 8007c4c:	d058      	beq.n	8007d00 <HAL_TIM_ConfigClockSource+0x13e>
 8007c4e:	2b40      	cmp	r3, #64	@ 0x40
 8007c50:	d86f      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c52:	2b30      	cmp	r3, #48	@ 0x30
 8007c54:	d064      	beq.n	8007d20 <HAL_TIM_ConfigClockSource+0x15e>
 8007c56:	2b30      	cmp	r3, #48	@ 0x30
 8007c58:	d86b      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d060      	beq.n	8007d20 <HAL_TIM_ConfigClockSource+0x15e>
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	d867      	bhi.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d05c      	beq.n	8007d20 <HAL_TIM_ConfigClockSource+0x15e>
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d05a      	beq.n	8007d20 <HAL_TIM_ConfigClockSource+0x15e>
 8007c6a:	e062      	b.n	8007d32 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c7c:	f000 f97e 	bl	8007f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	609a      	str	r2, [r3, #8]
      break;
 8007c98:	e04f      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007caa:	f000 f967 	bl	8007f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cbc:	609a      	str	r2, [r3, #8]
      break;
 8007cbe:	e03c      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ccc:	461a      	mov	r2, r3
 8007cce:	f000 f8d9 	bl	8007e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2150      	movs	r1, #80	@ 0x50
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f932 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 8007cde:	e02c      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cec:	461a      	mov	r2, r3
 8007cee:	f000 f8f8 	bl	8007ee2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2160      	movs	r1, #96	@ 0x60
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f922 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 8007cfe:	e01c      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f000 f8b9 	bl	8007e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2140      	movs	r1, #64	@ 0x40
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f912 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 8007d1e:	e00c      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f000 f909 	bl	8007f42 <TIM_ITRx_SetConfig>
      break;
 8007d30:	e003      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]
      break;
 8007d36:	e000      	b.n	8007d3a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007d38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a30      	ldr	r2, [pc, #192]	@ (8007e78 <TIM_Base_SetConfig+0xd4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_Base_SetConfig+0x20>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc2:	d108      	bne.n	8007dd6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a27      	ldr	r2, [pc, #156]	@ (8007e78 <TIM_Base_SetConfig+0xd4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d00b      	beq.n	8007df6 <TIM_Base_SetConfig+0x52>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de4:	d007      	beq.n	8007df6 <TIM_Base_SetConfig+0x52>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a24      	ldr	r2, [pc, #144]	@ (8007e7c <TIM_Base_SetConfig+0xd8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d003      	beq.n	8007df6 <TIM_Base_SetConfig+0x52>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a23      	ldr	r2, [pc, #140]	@ (8007e80 <TIM_Base_SetConfig+0xdc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d108      	bne.n	8007e08 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a12      	ldr	r2, [pc, #72]	@ (8007e78 <TIM_Base_SetConfig+0xd4>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d007      	beq.n	8007e44 <TIM_Base_SetConfig+0xa0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a11      	ldr	r2, [pc, #68]	@ (8007e7c <TIM_Base_SetConfig+0xd8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_Base_SetConfig+0xa0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a10      	ldr	r2, [pc, #64]	@ (8007e80 <TIM_Base_SetConfig+0xdc>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d103      	bne.n	8007e4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d105      	bne.n	8007e6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	611a      	str	r2, [r3, #16]
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	40012c00 	.word	0x40012c00
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800

08007e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	f023 0201 	bic.w	r2, r3, #1
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f023 030a 	bic.w	r3, r3, #10
 8007ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	621a      	str	r2, [r3, #32]
}
 8007ed6:	bf00      	nop
 8007ed8:	371c      	adds	r7, #28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b087      	sub	sp, #28
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	60f8      	str	r0, [r7, #12]
 8007eea:	60b9      	str	r1, [r7, #8]
 8007eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f023 0210 	bic.w	r2, r3, #16
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	031b      	lsls	r3, r3, #12
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b085      	sub	sp, #20
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	f043 0307 	orr.w	r3, r3, #7
 8007f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	609a      	str	r2, [r3, #8]
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	021a      	lsls	r2, r3, #8
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	609a      	str	r2, [r3, #8]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e04a      	b.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008004:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a12      	ldr	r2, [pc, #72]	@ (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d004      	beq.n	800803e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803c:	d10c      	bne.n	8008058 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4313      	orrs	r3, r2
 800804e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40012c00 	.word	0x40012c00

0800807c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <LL_RCC_GetUSARTClockSource>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80080c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4013      	ands	r3, r2
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <LL_RCC_GetLPUARTClockSource>:
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80080e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4013      	ands	r3, r2
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e042      	b.n	8008190 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f83b 	bl	8008198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2224      	movs	r2, #36	@ 0x24
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 0201 	bic.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fae8 	bl	8008718 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f8bd 	bl	80082c8 <UART_SetConfig>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d101      	bne.n	8008158 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e01b      	b.n	8008190 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008166:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008176:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb67 	bl	800885c <UART_CheckIdleState>
 800818e:	4603      	mov	r3, r0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	@ 0x28
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	603b      	str	r3, [r7, #0]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d17b      	bne.n	80082be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <HAL_UART_Transmit+0x26>
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e074      	b.n	80082c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2221      	movs	r2, #33	@ 0x21
 80081e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081e6:	f7f9 f8f3 	bl	80013d0 <HAL_GetTick>
 80081ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	88fa      	ldrh	r2, [r7, #6]
 80081f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	88fa      	ldrh	r2, [r7, #6]
 80081f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008204:	d108      	bne.n	8008218 <HAL_UART_Transmit+0x6c>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d104      	bne.n	8008218 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	61bb      	str	r3, [r7, #24]
 8008216:	e003      	b.n	8008220 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800821c:	2300      	movs	r3, #0
 800821e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008220:	e030      	b.n	8008284 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	2200      	movs	r2, #0
 800822a:	2180      	movs	r1, #128	@ 0x80
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f000 fbbf 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2220      	movs	r2, #32
 800823c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e03d      	b.n	80082c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10b      	bne.n	8008262 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008258:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	3302      	adds	r3, #2
 800825e:	61bb      	str	r3, [r7, #24]
 8008260:	e007      	b.n	8008272 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	781a      	ldrb	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	3301      	adds	r3, #1
 8008270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1c8      	bne.n	8008222 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2200      	movs	r2, #0
 8008298:	2140      	movs	r1, #64	@ 0x40
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fb88 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e006      	b.n	80082c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e000      	b.n	80082c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80082be:	2302      	movs	r3, #2
  }
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082cc:	b08c      	sub	sp, #48	@ 0x30
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	689a      	ldr	r2, [r3, #8]
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	431a      	orrs	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4baf      	ldr	r3, [pc, #700]	@ (80085b4 <UART_SetConfig+0x2ec>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008300:	430b      	orrs	r3, r1
 8008302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4aa4      	ldr	r2, [pc, #656]	@ (80085b8 <UART_SetConfig+0x2f0>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d004      	beq.n	8008334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008330:	4313      	orrs	r3, r2
 8008332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800833e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008348:	430b      	orrs	r3, r1
 800834a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008352:	f023 010f 	bic.w	r1, r3, #15
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a95      	ldr	r2, [pc, #596]	@ (80085bc <UART_SetConfig+0x2f4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d125      	bne.n	80083b8 <UART_SetConfig+0xf0>
 800836c:	2003      	movs	r0, #3
 800836e:	f7ff fea3 	bl	80080b8 <LL_RCC_GetUSARTClockSource>
 8008372:	4603      	mov	r3, r0
 8008374:	2b03      	cmp	r3, #3
 8008376:	d81b      	bhi.n	80083b0 <UART_SetConfig+0xe8>
 8008378:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <UART_SetConfig+0xb8>)
 800837a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837e:	bf00      	nop
 8008380:	08008391 	.word	0x08008391
 8008384:	080083a1 	.word	0x080083a1
 8008388:	08008399 	.word	0x08008399
 800838c:	080083a9 	.word	0x080083a9
 8008390:	2301      	movs	r3, #1
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008396:	e042      	b.n	800841e <UART_SetConfig+0x156>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839e:	e03e      	b.n	800841e <UART_SetConfig+0x156>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a6:	e03a      	b.n	800841e <UART_SetConfig+0x156>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ae:	e036      	b.n	800841e <UART_SetConfig+0x156>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	e032      	b.n	800841e <UART_SetConfig+0x156>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a7e      	ldr	r2, [pc, #504]	@ (80085b8 <UART_SetConfig+0x2f0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d12a      	bne.n	8008418 <UART_SetConfig+0x150>
 80083c2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80083c6:	f7ff fe87 	bl	80080d8 <LL_RCC_GetLPUARTClockSource>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083d0:	d01a      	beq.n	8008408 <UART_SetConfig+0x140>
 80083d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083d6:	d81b      	bhi.n	8008410 <UART_SetConfig+0x148>
 80083d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083dc:	d00c      	beq.n	80083f8 <UART_SetConfig+0x130>
 80083de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083e2:	d815      	bhi.n	8008410 <UART_SetConfig+0x148>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <UART_SetConfig+0x128>
 80083e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ec:	d008      	beq.n	8008400 <UART_SetConfig+0x138>
 80083ee:	e00f      	b.n	8008410 <UART_SetConfig+0x148>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083f6:	e012      	b.n	800841e <UART_SetConfig+0x156>
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083fe:	e00e      	b.n	800841e <UART_SetConfig+0x156>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008406:	e00a      	b.n	800841e <UART_SetConfig+0x156>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800840e:	e006      	b.n	800841e <UART_SetConfig+0x156>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008416:	e002      	b.n	800841e <UART_SetConfig+0x156>
 8008418:	2310      	movs	r3, #16
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a65      	ldr	r2, [pc, #404]	@ (80085b8 <UART_SetConfig+0x2f0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	f040 8097 	bne.w	8008558 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800842a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800842e:	2b08      	cmp	r3, #8
 8008430:	d823      	bhi.n	800847a <UART_SetConfig+0x1b2>
 8008432:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <UART_SetConfig+0x170>)
 8008434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008438:	0800845d 	.word	0x0800845d
 800843c:	0800847b 	.word	0x0800847b
 8008440:	08008465 	.word	0x08008465
 8008444:	0800847b 	.word	0x0800847b
 8008448:	0800846b 	.word	0x0800846b
 800844c:	0800847b 	.word	0x0800847b
 8008450:	0800847b 	.word	0x0800847b
 8008454:	0800847b 	.word	0x0800847b
 8008458:	08008473 	.word	0x08008473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800845c:	f7fd fdca 	bl	8005ff4 <HAL_RCC_GetPCLK1Freq>
 8008460:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008462:	e010      	b.n	8008486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008464:	4b56      	ldr	r3, [pc, #344]	@ (80085c0 <UART_SetConfig+0x2f8>)
 8008466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008468:	e00d      	b.n	8008486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800846a:	f7fd fd43 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 800846e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008470:	e009      	b.n	8008486 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008478:	e005      	b.n	8008486 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 812b 	beq.w	80086e4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	4a4c      	ldr	r2, [pc, #304]	@ (80085c4 <UART_SetConfig+0x2fc>)
 8008494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008498:	461a      	mov	r2, r3
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d305      	bcc.n	80084be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d903      	bls.n	80084c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084c4:	e10e      	b.n	80086e4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	2200      	movs	r2, #0
 80084ca:	60bb      	str	r3, [r7, #8]
 80084cc:	60fa      	str	r2, [r7, #12]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	4a3c      	ldr	r2, [pc, #240]	@ (80085c4 <UART_SetConfig+0x2fc>)
 80084d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2200      	movs	r2, #0
 80084dc:	603b      	str	r3, [r7, #0]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084e8:	f7f7 fe9a 	bl	8000220 <__aeabi_uldivmod>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	020b      	lsls	r3, r1, #8
 80084fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008502:	0202      	lsls	r2, r0, #8
 8008504:	6979      	ldr	r1, [r7, #20]
 8008506:	6849      	ldr	r1, [r1, #4]
 8008508:	0849      	lsrs	r1, r1, #1
 800850a:	2000      	movs	r0, #0
 800850c:	460c      	mov	r4, r1
 800850e:	4605      	mov	r5, r0
 8008510:	eb12 0804 	adds.w	r8, r2, r4
 8008514:	eb43 0905 	adc.w	r9, r3, r5
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	469a      	mov	sl, r3
 8008520:	4693      	mov	fp, r2
 8008522:	4652      	mov	r2, sl
 8008524:	465b      	mov	r3, fp
 8008526:	4640      	mov	r0, r8
 8008528:	4649      	mov	r1, r9
 800852a:	f7f7 fe79 	bl	8000220 <__aeabi_uldivmod>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4613      	mov	r3, r2
 8008534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800853c:	d308      	bcc.n	8008550 <UART_SetConfig+0x288>
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008544:	d204      	bcs.n	8008550 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e0c9      	b.n	80086e4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008556:	e0c5      	b.n	80086e4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008560:	d16d      	bne.n	800863e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008562:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008566:	3b01      	subs	r3, #1
 8008568:	2b07      	cmp	r3, #7
 800856a:	d82d      	bhi.n	80085c8 <UART_SetConfig+0x300>
 800856c:	a201      	add	r2, pc, #4	@ (adr r2, 8008574 <UART_SetConfig+0x2ac>)
 800856e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008572:	bf00      	nop
 8008574:	08008595 	.word	0x08008595
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085c9 	.word	0x080085c9
 8008580:	080085a3 	.word	0x080085a3
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085c9 	.word	0x080085c9
 800858c:	080085c9 	.word	0x080085c9
 8008590:	080085ab 	.word	0x080085ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008594:	f7fd fd44 	bl	8006020 <HAL_RCC_GetPCLK2Freq>
 8008598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800859a:	e01b      	b.n	80085d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800859c:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <UART_SetConfig+0x2f8>)
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085a0:	e018      	b.n	80085d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085a2:	f7fd fca7 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 80085a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a8:	e014      	b.n	80085d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085b0:	e010      	b.n	80085d4 <UART_SetConfig+0x30c>
 80085b2:	bf00      	nop
 80085b4:	cfff69f3 	.word	0xcfff69f3
 80085b8:	40008000 	.word	0x40008000
 80085bc:	40013800 	.word	0x40013800
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	0800eb60 	.word	0x0800eb60
      default:
        pclk = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8084 	beq.w	80086e4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008710 <UART_SetConfig+0x448>)
 80085e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e6:	461a      	mov	r2, r3
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ee:	005a      	lsls	r2, r3, #1
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	441a      	add	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008602:	6a3b      	ldr	r3, [r7, #32]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d916      	bls.n	8008636 <UART_SetConfig+0x36e>
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800860e:	d212      	bcs.n	8008636 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f023 030f 	bic.w	r3, r3, #15
 8008618:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	085b      	lsrs	r3, r3, #1
 800861e:	b29b      	uxth	r3, r3
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	b29a      	uxth	r2, r3
 8008626:	8bfb      	ldrh	r3, [r7, #30]
 8008628:	4313      	orrs	r3, r2
 800862a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	8bfa      	ldrh	r2, [r7, #30]
 8008632:	60da      	str	r2, [r3, #12]
 8008634:	e056      	b.n	80086e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800863c:	e052      	b.n	80086e4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800863e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008642:	3b01      	subs	r3, #1
 8008644:	2b07      	cmp	r3, #7
 8008646:	d822      	bhi.n	800868e <UART_SetConfig+0x3c6>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0x388>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008671 	.word	0x08008671
 8008654:	08008679 	.word	0x08008679
 8008658:	0800868f 	.word	0x0800868f
 800865c:	0800867f 	.word	0x0800867f
 8008660:	0800868f 	.word	0x0800868f
 8008664:	0800868f 	.word	0x0800868f
 8008668:	0800868f 	.word	0x0800868f
 800866c:	08008687 	.word	0x08008687
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008670:	f7fd fcd6 	bl	8006020 <HAL_RCC_GetPCLK2Freq>
 8008674:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008676:	e010      	b.n	800869a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008678:	4b26      	ldr	r3, [pc, #152]	@ (8008714 <UART_SetConfig+0x44c>)
 800867a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800867c:	e00d      	b.n	800869a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800867e:	f7fd fc39 	bl	8005ef4 <HAL_RCC_GetSysClockFreq>
 8008682:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008684:	e009      	b.n	800869a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800868a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800868c:	e005      	b.n	800869a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008698:	bf00      	nop
    }

    if (pclk != 0U)
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	d021      	beq.n	80086e4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008710 <UART_SetConfig+0x448>)
 80086a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	085b      	lsrs	r3, r3, #1
 80086b8:	441a      	add	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	fbb2 f3f3 	udiv	r3, r2, r3
 80086c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d909      	bls.n	80086de <UART_SetConfig+0x416>
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d205      	bcs.n	80086de <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	60da      	str	r2, [r3, #12]
 80086dc:	e002      	b.n	80086e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2200      	movs	r2, #0
 80086fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008700:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008704:	4618      	mov	r0, r3
 8008706:	3730      	adds	r7, #48	@ 0x30
 8008708:	46bd      	mov	sp, r7
 800870a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800870e:	bf00      	nop
 8008710:	0800eb60 	.word	0x0800eb60
 8008714:	00f42400 	.word	0x00f42400

08008718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878a:	f003 0304 	and.w	r3, r3, #4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	f003 0310 	and.w	r3, r3, #16
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01a      	beq.n	800882e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008816:	d10a      	bne.n	800882e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b098      	sub	sp, #96	@ 0x60
 8008860:	af02      	add	r7, sp, #8
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800886c:	f7f8 fdb0 	bl	80013d0 <HAL_GetTick>
 8008870:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b08      	cmp	r3, #8
 800887e:	d12f      	bne.n	80088e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008880:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008888:	2200      	movs	r2, #0
 800888a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f88e 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d022      	beq.n	80088e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e6      	bne.n	800889a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2220      	movs	r2, #32
 80088d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e063      	b.n	80089a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d149      	bne.n	8008982 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088f6:	2200      	movs	r2, #0
 80088f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f857 	bl	80089b0 <UART_WaitOnFlagUntilTimeout>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d03c      	beq.n	8008982 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	623b      	str	r3, [r7, #32]
   return(result);
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800891c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008926:	633b      	str	r3, [r7, #48]	@ 0x30
 8008928:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800892c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e6      	bne.n	8008908 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	60fb      	str	r3, [r7, #12]
   return(result);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800895a:	61fa      	str	r2, [r7, #28]
 800895c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	69b9      	ldr	r1, [r7, #24]
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	617b      	str	r3, [r7, #20]
   return(result);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e5      	bne.n	800893a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e012      	b.n	80089a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3758      	adds	r7, #88	@ 0x58
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	4613      	mov	r3, r2
 80089be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c0:	e04f      	b.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d04b      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ca:	f7f8 fd01 	bl	80013d0 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d302      	bcc.n	80089e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e04e      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d037      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b80      	cmp	r3, #128	@ 0x80
 80089f6:	d034      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b40      	cmp	r3, #64	@ 0x40
 80089fc:	d031      	beq.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d110      	bne.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2208      	movs	r2, #8
 8008a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f838 	bl	8008a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2208      	movs	r2, #8
 8008a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e029      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69db      	ldr	r3, [r3, #28]
 8008a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a3c:	d111      	bne.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f81e 	bl	8008a8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2220      	movs	r2, #32
 8008a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e00f      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	bf0c      	ite	eq
 8008a72:	2301      	moveq	r3, #1
 8008a74:	2300      	movne	r3, #0
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d0a0      	beq.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b095      	sub	sp, #84	@ 0x54
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ab2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3308      	adds	r3, #8
 8008aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e3      	bne.n	8008ac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d118      	bne.n	8008b36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6979      	ldr	r1, [r7, #20]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b4a:	bf00      	nop
 8008b4c:	3754      	adds	r7, #84	@ 0x54
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b66:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008b6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b8c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008b90:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	1d3b      	adds	r3, r7, #4
 8008bc4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b09d      	sub	sp, #116	@ 0x74
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	78db      	ldrb	r3, [r3, #3]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d81f      	bhi.n	8008c6a <USB_ActivateEndpoint+0x72>
 8008c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c30 <USB_ActivateEndpoint+0x38>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c5d 	.word	0x08008c5d
 8008c38:	08008c73 	.word	0x08008c73
 8008c3c:	08008c4f 	.word	0x08008c4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008c40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c44:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008c48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c4c:	e012      	b.n	8008c74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008c4e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c52:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008c56:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c5a:	e00b      	b.n	8008c74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008c5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008c68:	e004      	b.n	8008c74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008c70:	e000      	b.n	8008c74 <USB_ActivateEndpoint+0x7c>
      break;
 8008c72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	441a      	add	r2, r3
 8008c7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	b21b      	sxth	r3, r3
 8008ca6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cae:	b21a      	sxth	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b21b      	sxth	r3, r3
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	b21b      	sxth	r3, r3
 8008cba:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	441a      	add	r2, r3
 8008cc8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	7b1b      	ldrb	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 8178 	bne.w	8008fda <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 8084 	beq.w	8008dfc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	461a      	mov	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	4413      	add	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	00da      	lsls	r2, r3, #3
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	085b      	lsrs	r3, r3, #1
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	827b      	strh	r3, [r7, #18]
 8008d36:	8a7b      	ldrh	r3, [r7, #18]
 8008d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01b      	beq.n	8008d78 <USB_ActivateEndpoint+0x180>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d56:	823b      	strh	r3, [r7, #16]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	8a3b      	ldrh	r3, [r7, #16]
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	78db      	ldrb	r3, [r3, #3]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d020      	beq.n	8008dc2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d96:	81bb      	strh	r3, [r7, #12]
 8008d98:	89bb      	ldrh	r3, [r7, #12]
 8008d9a:	f083 0320 	eor.w	r3, r3, #32
 8008d9e:	81bb      	strh	r3, [r7, #12]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	441a      	add	r2, r3
 8008daa:	89bb      	ldrh	r3, [r7, #12]
 8008dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	8013      	strh	r3, [r2, #0]
 8008dc0:	e2d5      	b.n	800936e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dd8:	81fb      	strh	r3, [r7, #14]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	441a      	add	r2, r3
 8008de4:	89fb      	ldrh	r3, [r7, #14]
 8008de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	8013      	strh	r3, [r2, #0]
 8008dfa:	e2b8      	b.n	800936e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e0c:	4413      	add	r3, r2
 8008e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	00da      	lsls	r2, r3, #3
 8008e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e18:	4413      	add	r3, r2
 8008e1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	88db      	ldrh	r3, [r3, #6]
 8008e24:	085b      	lsrs	r3, r3, #1
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	4413      	add	r3, r2
 8008e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	00da      	lsls	r2, r3, #3
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	801a      	strh	r2, [r3, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e6a:	d91d      	bls.n	8008ea8 <USB_ActivateEndpoint+0x2b0>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <USB_ActivateEndpoint+0x28e>
 8008e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e82:	3b01      	subs	r3, #1
 8008e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea4:	801a      	strh	r2, [r3, #0]
 8008ea6:	e026      	b.n	8008ef6 <USB_ActivateEndpoint+0x2fe>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <USB_ActivateEndpoint+0x2ce>
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec2:	801a      	strh	r2, [r3, #0]
 8008ec4:	e017      	b.n	8008ef6 <USB_ActivateEndpoint+0x2fe>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d002      	beq.n	8008ee0 <USB_ActivateEndpoint+0x2e8>
 8008eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008edc:	3301      	adds	r3, #1
 8008ede:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	029b      	lsls	r3, r3, #10
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008f04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <USB_ActivateEndpoint+0x34e>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f24:	843b      	strh	r3, [r7, #32]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	8c3b      	ldrh	r3, [r7, #32]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d124      	bne.n	8008f98 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f64:	83bb      	strh	r3, [r7, #28]
 8008f66:	8bbb      	ldrh	r3, [r7, #28]
 8008f68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f6c:	83bb      	strh	r3, [r7, #28]
 8008f6e:	8bbb      	ldrh	r3, [r7, #28]
 8008f70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f74:	83bb      	strh	r3, [r7, #28]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	441a      	add	r2, r3
 8008f80:	8bbb      	ldrh	r3, [r7, #28]
 8008f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	8013      	strh	r3, [r2, #0]
 8008f96:	e1ea      	b.n	800936e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fae:	83fb      	strh	r3, [r7, #30]
 8008fb0:	8bfb      	ldrh	r3, [r7, #30]
 8008fb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fb6:	83fb      	strh	r3, [r7, #30]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	441a      	add	r2, r3
 8008fc2:	8bfb      	ldrh	r3, [r7, #30]
 8008fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	8013      	strh	r3, [r2, #0]
 8008fd8:	e1c9      	b.n	800936e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	78db      	ldrb	r3, [r3, #3]
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	d11e      	bne.n	8009020 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	441a      	add	r2, r3
 8009006:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800900a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800900e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009012:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901a:	b29b      	uxth	r3, r3
 800901c:	8013      	strh	r3, [r2, #0]
 800901e:	e01d      	b.n	800905c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	881b      	ldrh	r3, [r3, #0]
 800902c:	b29b      	uxth	r3, r3
 800902e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800904c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009058:	b29b      	uxth	r3, r3
 800905a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009066:	b29b      	uxth	r3, r3
 8009068:	461a      	mov	r2, r3
 800906a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800906c:	4413      	add	r3, r2
 800906e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	00da      	lsls	r2, r3, #3
 8009076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009078:	4413      	add	r3, r2
 800907a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800907e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	891b      	ldrh	r3, [r3, #8]
 8009084:	085b      	lsrs	r3, r3, #1
 8009086:	b29b      	uxth	r3, r3
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800908e:	801a      	strh	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	657b      	str	r3, [r7, #84]	@ 0x54
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800909a:	b29b      	uxth	r3, r3
 800909c:	461a      	mov	r2, r3
 800909e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090a0:	4413      	add	r3, r2
 80090a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	00da      	lsls	r2, r3, #3
 80090aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ac:	4413      	add	r3, r2
 80090ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80090b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	895b      	ldrh	r3, [r3, #10]
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f040 8093 	bne.w	80091f4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80090de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80090e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d01b      	beq.n	8009122 <USB_ActivateEndpoint+0x52a>
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009100:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	441a      	add	r2, r3
 800910c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800910e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009116:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800911a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911e:	b29b      	uxth	r3, r3
 8009120:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009130:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01b      	beq.n	8009172 <USB_ActivateEndpoint+0x57a>
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	4413      	add	r3, r2
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29b      	uxth	r3, r3
 8009148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800914c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009150:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	441a      	add	r2, r3
 800915c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800915e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800916e:	b29b      	uxth	r3, r3
 8009170:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009188:	873b      	strh	r3, [r7, #56]	@ 0x38
 800918a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800918c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009190:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009192:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009194:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009198:	873b      	strh	r3, [r7, #56]	@ 0x38
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	441a      	add	r2, r3
 80091a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80091a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	441a      	add	r2, r3
 80091dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	8013      	strh	r3, [r2, #0]
 80091f2:	e0bc      	b.n	800936e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01d      	beq.n	800924c <USB_ActivateEndpoint+0x654>
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009226:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	441a      	add	r2, r3
 8009234:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800923c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009248:	b29b      	uxth	r3, r3
 800924a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800925c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01d      	beq.n	80092a4 <USB_ActivateEndpoint+0x6ac>
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800927a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800927e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	441a      	add	r2, r3
 800928c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800929c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	78db      	ldrb	r3, [r3, #3]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d024      	beq.n	80092f6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80092c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80092ca:	f083 0320 	eor.w	r3, r3, #32
 80092ce:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	441a      	add	r2, r3
 80092dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80092e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	8013      	strh	r3, [r2, #0]
 80092f4:	e01d      	b.n	8009332 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	b29b      	uxth	r3, r3
 8009304:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800930c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	441a      	add	r2, r3
 800931a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800931e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009322:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800932a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800932e:	b29b      	uxth	r3, r3
 8009330:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009344:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009348:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	441a      	add	r2, r3
 8009356:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800935a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800935e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	b29b      	uxth	r3, r3
 800936c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800936e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009372:	4618      	mov	r0, r3
 8009374:	3774      	adds	r7, #116	@ 0x74
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop

08009380 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009380:	b480      	push	{r7}
 8009382:	b08d      	sub	sp, #52	@ 0x34
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	7b1b      	ldrb	r3, [r3, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 808e 	bne.w	80094b0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d044      	beq.n	8009426 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	81bb      	strh	r3, [r7, #12]
 80093aa:	89bb      	ldrh	r3, [r7, #12]
 80093ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01b      	beq.n	80093ec <USB_DeactivateEndpoint+0x6c>
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	881b      	ldrh	r3, [r3, #0]
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ca:	817b      	strh	r3, [r7, #10]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	441a      	add	r2, r3
 80093d6:	897b      	ldrh	r3, [r7, #10]
 80093d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009402:	813b      	strh	r3, [r7, #8]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	441a      	add	r2, r3
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800941c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009420:	b29b      	uxth	r3, r3
 8009422:	8013      	strh	r3, [r2, #0]
 8009424:	e192      	b.n	800974c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	827b      	strh	r3, [r7, #18]
 8009434:	8a7b      	ldrh	r3, [r7, #18]
 8009436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d01b      	beq.n	8009476 <USB_DeactivateEndpoint+0xf6>
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29b      	uxth	r3, r3
 800944c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009454:	823b      	strh	r3, [r7, #16]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	441a      	add	r2, r3
 8009460:	8a3b      	ldrh	r3, [r7, #16]
 8009462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800946a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800946e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009472:	b29b      	uxth	r3, r3
 8009474:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	b29b      	uxth	r3, r3
 8009484:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948c:	81fb      	strh	r3, [r7, #14]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	441a      	add	r2, r3
 8009498:	89fb      	ldrh	r3, [r7, #14]
 800949a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800949e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	8013      	strh	r3, [r2, #0]
 80094ae:	e14d      	b.n	800974c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f040 80a5 	bne.w	8009604 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	881b      	ldrh	r3, [r3, #0]
 80094c6:	843b      	strh	r3, [r7, #32]
 80094c8:	8c3b      	ldrh	r3, [r7, #32]
 80094ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d01b      	beq.n	800950a <USB_DeactivateEndpoint+0x18a>
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e8:	83fb      	strh	r3, [r7, #30]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	8bfb      	ldrh	r3, [r7, #30]
 80094f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009506:	b29b      	uxth	r3, r3
 8009508:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	83bb      	strh	r3, [r7, #28]
 8009518:	8bbb      	ldrh	r3, [r7, #28]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d01b      	beq.n	800955a <USB_DeactivateEndpoint+0x1da>
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	881b      	ldrh	r3, [r3, #0]
 800952e:	b29b      	uxth	r3, r3
 8009530:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009538:	837b      	strh	r3, [r7, #26]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	441a      	add	r2, r3
 8009544:	8b7b      	ldrh	r3, [r7, #26]
 8009546:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800954a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800954e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009552:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009556:	b29b      	uxth	r3, r3
 8009558:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	881b      	ldrh	r3, [r3, #0]
 8009566:	b29b      	uxth	r3, r3
 8009568:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009570:	833b      	strh	r3, [r7, #24]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	441a      	add	r2, r3
 800957c:	8b3b      	ldrh	r3, [r7, #24]
 800957e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800958a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800958e:	b29b      	uxth	r3, r3
 8009590:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	b29b      	uxth	r3, r3
 80095a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a8:	82fb      	strh	r3, [r7, #22]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	441a      	add	r2, r3
 80095b4:	8afb      	ldrh	r3, [r7, #22]
 80095b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095e0:	82bb      	strh	r3, [r7, #20]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	441a      	add	r2, r3
 80095ec:	8abb      	ldrh	r3, [r7, #20]
 80095ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095fe:	b29b      	uxth	r3, r3
 8009600:	8013      	strh	r3, [r2, #0]
 8009602:	e0a3      	b.n	800974c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009612:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01b      	beq.n	8009654 <USB_DeactivateEndpoint+0x2d4>
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009632:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800964c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009650:	b29b      	uxth	r3, r3
 8009652:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009662:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d01b      	beq.n	80096a4 <USB_DeactivateEndpoint+0x324>
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800967e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009682:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	441a      	add	r2, r3
 800968e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009690:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009694:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800969c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	881b      	ldrh	r3, [r3, #0]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	441a      	add	r2, r3
 80096c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80096c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d8:	b29b      	uxth	r3, r3
 80096da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	441a      	add	r2, r3
 80096fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009700:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009704:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800970c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009710:	b29b      	uxth	r3, r3
 8009712:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800972a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	441a      	add	r2, r3
 8009736:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009738:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800973c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009748:	b29b      	uxth	r3, r3
 800974a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3734      	adds	r7, #52	@ 0x34
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b0c2      	sub	sp, #264	@ 0x108
 800975e:	af00      	add	r7, sp, #0
 8009760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009768:	6018      	str	r0, [r3, #0]
 800976a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800976e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009772:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	785b      	ldrb	r3, [r3, #1]
 8009780:	2b01      	cmp	r3, #1
 8009782:	f040 86b7 	bne.w	800a4f4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800978a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699a      	ldr	r2, [r3, #24]
 8009792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d908      	bls.n	80097b4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80097a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80097b2:	e007      	b.n	80097c4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80097b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80097c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	7b1b      	ldrb	r3, [r3, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d13a      	bne.n	800984a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80097d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6959      	ldr	r1, [r3, #20]
 80097e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	88da      	ldrh	r2, [r3, #6]
 80097ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097fa:	6800      	ldr	r0, [r0, #0]
 80097fc:	f001 fc98 	bl	800b130 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009804:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	613b      	str	r3, [r7, #16]
 800980c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800981a:	b29b      	uxth	r3, r3
 800981c:	461a      	mov	r2, r3
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	4413      	add	r3, r2
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	00da      	lsls	r2, r3, #3
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4413      	add	r3, r2
 8009836:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	801a      	strh	r2, [r3, #0]
 8009846:	f000 be1f 	b.w	800a488 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800984a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	78db      	ldrb	r3, [r3, #3]
 8009856:	2b02      	cmp	r3, #2
 8009858:	f040 8462 	bne.w	800a120 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800985c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6a1a      	ldr	r2, [r3, #32]
 8009868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	429a      	cmp	r2, r3
 8009876:	f240 83df 	bls.w	800a038 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800987a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800989c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098a0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80098a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	441a      	add	r2, r3
 80098be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80098c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80098ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80098d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6a1a      	ldr	r2, [r3, #32]
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	1ad2      	subs	r2, r2, r3
 80098e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	b29b      	uxth	r3, r3
 8009912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 81c7 	beq.w	8009caa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	633b      	str	r3, [r7, #48]	@ 0x30
 8009928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d177      	bne.n	8009a28 <USB_EPStartXfer+0x2ce>
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009952:	b29b      	uxth	r3, r3
 8009954:	461a      	mov	r2, r3
 8009956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009958:	4413      	add	r3, r2
 800995a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	00da      	lsls	r2, r3, #3
 800996a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800996c:	4413      	add	r3, r2
 800996e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009972:	627b      	str	r3, [r7, #36]	@ 0x24
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800997e:	b29a      	uxth	r2, r3
 8009980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009988:	2b3e      	cmp	r3, #62	@ 0x3e
 800998a:	d921      	bls.n	80099d0 <USB_EPStartXfer+0x276>
 800998c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009990:	095b      	lsrs	r3, r3, #5
 8009992:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800999a:	f003 031f 	and.w	r3, r3, #31
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <USB_EPStartXfer+0x252>
 80099a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099a6:	3b01      	subs	r3, #1
 80099a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	029b      	lsls	r3, r3, #10
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	4313      	orrs	r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e050      	b.n	8009a72 <USB_EPStartXfer+0x318>
 80099d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <USB_EPStartXfer+0x294>
 80099d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	b29b      	uxth	r3, r3
 80099de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ea:	801a      	strh	r2, [r3, #0]
 80099ec:	e041      	b.n	8009a72 <USB_EPStartXfer+0x318>
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	085b      	lsrs	r3, r3, #1
 80099f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d004      	beq.n	8009a0e <USB_EPStartXfer+0x2b4>
 8009a04:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009a08:	3301      	adds	r3, #1
 8009a0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	029b      	lsls	r3, r3, #10
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	e024      	b.n	8009a72 <USB_EPStartXfer+0x318>
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d11c      	bne.n	8009a72 <USB_EPStartXfer+0x318>
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	4413      	add	r3, r2
 8009a4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	00da      	lsls	r2, r3, #3
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	895b      	ldrh	r3, [r3, #10]
 8009a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6959      	ldr	r1, [r3, #20]
 8009a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009aa0:	6800      	ldr	r0, [r0, #0]
 8009aa2:	f001 fb45 	bl	800b130 <USB_WritePMA>
            ep->xfer_buff += len;
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	695a      	ldr	r2, [r3, #20]
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab6:	441a      	add	r2, r3
 8009ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a1a      	ldr	r2, [r3, #32]
 8009ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d90f      	bls.n	8009b00 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	621a      	str	r2, [r3, #32]
 8009afe:	e00e      	b.n	8009b1e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	785b      	ldrb	r3, [r3, #1]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d177      	bne.n	8009c1e <USB_EPStartXfer+0x4c4>
 8009b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	4413      	add	r3, r2
 8009b50:	61bb      	str	r3, [r7, #24]
 8009b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	00da      	lsls	r2, r3, #3
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	4413      	add	r3, r2
 8009b64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b80:	d921      	bls.n	8009bc6 <USB_EPStartXfer+0x46c>
 8009b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b86:	095b      	lsrs	r3, r3, #5
 8009b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <USB_EPStartXfer+0x448>
 8009b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	029b      	lsls	r3, r3, #10
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bbe:	b29a      	uxth	r2, r3
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	801a      	strh	r2, [r3, #0]
 8009bc4:	e056      	b.n	8009c74 <USB_EPStartXfer+0x51a>
 8009bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <USB_EPStartXfer+0x48a>
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	801a      	strh	r2, [r3, #0]
 8009be2:	e047      	b.n	8009c74 <USB_EPStartXfer+0x51a>
 8009be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be8:	085b      	lsrs	r3, r3, #1
 8009bea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <USB_EPStartXfer+0x4aa>
 8009bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bfe:	3301      	adds	r3, #1
 8009c00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	881b      	ldrh	r3, [r3, #0]
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	029b      	lsls	r3, r3, #10
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	4313      	orrs	r3, r2
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	e02a      	b.n	8009c74 <USB_EPStartXfer+0x51a>
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d122      	bne.n	8009c74 <USB_EPStartXfer+0x51a>
 8009c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	623b      	str	r3, [r7, #32]
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	4413      	add	r3, r2
 8009c50:	623b      	str	r3, [r7, #32]
 8009c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	00da      	lsls	r2, r3, #3
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	4413      	add	r3, r2
 8009c64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	891b      	ldrh	r3, [r3, #8]
 8009c80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6959      	ldr	r1, [r3, #20]
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ca2:	6800      	ldr	r0, [r0, #0]
 8009ca4:	f001 fa44 	bl	800b130 <USB_WritePMA>
 8009ca8:	e3ee      	b.n	800a488 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d177      	bne.n	8009daa <USB_EPStartXfer+0x650>
 8009cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cda:	4413      	add	r3, r2
 8009cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	00da      	lsls	r2, r3, #3
 8009cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cee:	4413      	add	r3, r2
 8009cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d0c:	d921      	bls.n	8009d52 <USB_EPStartXfer+0x5f8>
 8009d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d12:	095b      	lsrs	r3, r3, #5
 8009d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d1c:	f003 031f 	and.w	r3, r3, #31
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <USB_EPStartXfer+0x5d4>
 8009d24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d30:	881b      	ldrh	r3, [r3, #0]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d4e:	801a      	strh	r2, [r3, #0]
 8009d50:	e056      	b.n	8009e00 <USB_EPStartXfer+0x6a6>
 8009d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <USB_EPStartXfer+0x616>
 8009d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d5c:	881b      	ldrh	r3, [r3, #0]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	e047      	b.n	8009e00 <USB_EPStartXfer+0x6a6>
 8009d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d74:	085b      	lsrs	r3, r3, #1
 8009d76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <USB_EPStartXfer+0x636>
 8009d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	029b      	lsls	r3, r3, #10
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	e02a      	b.n	8009e00 <USB_EPStartXfer+0x6a6>
 8009daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	785b      	ldrb	r3, [r3, #1]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d122      	bne.n	8009e00 <USB_EPStartXfer+0x6a6>
 8009dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dda:	4413      	add	r3, r2
 8009ddc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	00da      	lsls	r2, r3, #3
 8009dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dee:	4413      	add	r3, r2
 8009df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dfe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	891b      	ldrh	r3, [r3, #8]
 8009e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6959      	ldr	r1, [r3, #20]
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e2e:	6800      	ldr	r0, [r0, #0]
 8009e30:	f001 f97e 	bl	800b130 <USB_WritePMA>
            ep->xfer_buff += len;
 8009e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	695a      	ldr	r2, [r3, #20]
 8009e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e44:	441a      	add	r2, r3
 8009e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009e52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6a1a      	ldr	r2, [r3, #32]
 8009e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d90f      	bls.n	8009e8e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6a1a      	ldr	r2, [r3, #32]
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7e:	1ad2      	subs	r2, r2, r3
 8009e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	621a      	str	r2, [r3, #32]
 8009e8c:	e00e      	b.n	8009eac <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009eb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	785b      	ldrb	r3, [r3, #1]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d177      	bne.n	8009fb8 <USB_EPStartXfer+0x85e>
 8009ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ecc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee8:	4413      	add	r3, r2
 8009eea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	00da      	lsls	r2, r3, #3
 8009efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efc:	4413      	add	r3, r2
 8009efe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f06:	881b      	ldrh	r3, [r3, #0]
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f12:	801a      	strh	r2, [r3, #0]
 8009f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f18:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f1a:	d921      	bls.n	8009f60 <USB_EPStartXfer+0x806>
 8009f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f20:	095b      	lsrs	r3, r3, #5
 8009f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2a:	f003 031f 	and.w	r3, r3, #31
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d104      	bne.n	8009f3c <USB_EPStartXfer+0x7e2>
 8009f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f36:	3b01      	subs	r3, #1
 8009f38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	029b      	lsls	r3, r3, #10
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e050      	b.n	800a002 <USB_EPStartXfer+0x8a8>
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d10a      	bne.n	8009f7e <USB_EPStartXfer+0x824>
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	881b      	ldrh	r3, [r3, #0]
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f7a:	801a      	strh	r2, [r3, #0]
 8009f7c:	e041      	b.n	800a002 <USB_EPStartXfer+0x8a8>
 8009f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <USB_EPStartXfer+0x844>
 8009f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f98:	3301      	adds	r3, #1
 8009f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa0:	881b      	ldrh	r3, [r3, #0]
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	029b      	lsls	r3, r3, #10
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e024      	b.n	800a002 <USB_EPStartXfer+0x8a8>
 8009fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d11c      	bne.n	800a002 <USB_EPStartXfer+0x8a8>
 8009fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fdc:	4413      	add	r3, r2
 8009fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	00da      	lsls	r2, r3, #3
 8009fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a000:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	895b      	ldrh	r3, [r3, #10]
 800a00e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6959      	ldr	r1, [r3, #20]
 800a01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a022:	b29b      	uxth	r3, r3
 800a024:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a028:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a02c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a030:	6800      	ldr	r0, [r0, #0]
 800a032:	f001 f87d 	bl	800b130 <USB_WritePMA>
 800a036:	e227      	b.n	800a488 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a04c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a06a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a06e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	441a      	add	r2, r3
 800a08c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0c4:	4413      	add	r3, r2
 800a0c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	00da      	lsls	r2, r3, #3
 800a0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0d8:	4413      	add	r3, r2
 800a0da:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a0e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	891b      	ldrh	r3, [r3, #8]
 800a0f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6959      	ldr	r1, [r3, #20]
 800a106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a110:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a114:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a118:	6800      	ldr	r0, [r0, #0]
 800a11a:	f001 f809 	bl	800b130 <USB_WritePMA>
 800a11e:	e1b3      	b.n	800a488 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a130:	1ad2      	subs	r2, r2, r3
 800a132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 80c6 	beq.w	800a2f2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	673b      	str	r3, [r7, #112]	@ 0x70
 800a172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	785b      	ldrb	r3, [r3, #1]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d177      	bne.n	800a272 <USB_EPStartXfer+0xb18>
 800a182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a18e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1a2:	4413      	add	r3, r2
 800a1a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	00da      	lsls	r2, r3, #3
 800a1b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1cc:	801a      	strh	r2, [r3, #0]
 800a1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1d4:	d921      	bls.n	800a21a <USB_EPStartXfer+0xac0>
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1da:	095b      	lsrs	r3, r3, #5
 800a1dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e4:	f003 031f 	and.w	r3, r3, #31
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d104      	bne.n	800a1f6 <USB_EPStartXfer+0xa9c>
 800a1ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a200:	b29b      	uxth	r3, r3
 800a202:	029b      	lsls	r3, r3, #10
 800a204:	b29b      	uxth	r3, r3
 800a206:	4313      	orrs	r3, r2
 800a208:	b29b      	uxth	r3, r3
 800a20a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a20e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a212:	b29a      	uxth	r2, r3
 800a214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a216:	801a      	strh	r2, [r3, #0]
 800a218:	e050      	b.n	800a2bc <USB_EPStartXfer+0xb62>
 800a21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10a      	bne.n	800a238 <USB_EPStartXfer+0xade>
 800a222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a22c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a230:	b29a      	uxth	r2, r3
 800a232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a234:	801a      	strh	r2, [r3, #0]
 800a236:	e041      	b.n	800a2bc <USB_EPStartXfer+0xb62>
 800a238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a23c:	085b      	lsrs	r3, r3, #1
 800a23e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a242:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <USB_EPStartXfer+0xafe>
 800a24e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a252:	3301      	adds	r3, #1
 800a254:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a258:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a262:	b29b      	uxth	r3, r3
 800a264:	029b      	lsls	r3, r3, #10
 800a266:	b29b      	uxth	r3, r3
 800a268:	4313      	orrs	r3, r2
 800a26a:	b29a      	uxth	r2, r3
 800a26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a26e:	801a      	strh	r2, [r3, #0]
 800a270:	e024      	b.n	800a2bc <USB_EPStartXfer+0xb62>
 800a272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d11c      	bne.n	800a2bc <USB_EPStartXfer+0xb62>
 800a282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a290:	b29b      	uxth	r3, r3
 800a292:	461a      	mov	r2, r3
 800a294:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a296:	4413      	add	r3, r2
 800a298:	673b      	str	r3, [r7, #112]	@ 0x70
 800a29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	00da      	lsls	r2, r3, #3
 800a2a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	895b      	ldrh	r3, [r3, #10]
 800a2c8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6959      	ldr	r1, [r3, #20]
 800a2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a2e2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a2e6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	f000 ff20 	bl	800b130 <USB_WritePMA>
 800a2f0:	e0ca      	b.n	800a488 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	785b      	ldrb	r3, [r3, #1]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d177      	bne.n	800a3f2 <USB_EPStartXfer+0xc98>
 800a302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a306:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a30e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a312:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	461a      	mov	r2, r3
 800a320:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a322:	4413      	add	r3, r2
 800a324:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	00da      	lsls	r2, r3, #3
 800a334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a336:	4413      	add	r3, r2
 800a338:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a33c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a33e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a348:	b29a      	uxth	r2, r3
 800a34a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a34c:	801a      	strh	r2, [r3, #0]
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a352:	2b3e      	cmp	r3, #62	@ 0x3e
 800a354:	d921      	bls.n	800a39a <USB_EPStartXfer+0xc40>
 800a356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35a:	095b      	lsrs	r3, r3, #5
 800a35c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a364:	f003 031f 	and.w	r3, r3, #31
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <USB_EPStartXfer+0xc1c>
 800a36c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a370:	3b01      	subs	r3, #1
 800a372:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a380:	b29b      	uxth	r3, r3
 800a382:	029b      	lsls	r3, r3, #10
 800a384:	b29b      	uxth	r3, r3
 800a386:	4313      	orrs	r3, r2
 800a388:	b29b      	uxth	r3, r3
 800a38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a392:	b29a      	uxth	r2, r3
 800a394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a396:	801a      	strh	r2, [r3, #0]
 800a398:	e05c      	b.n	800a454 <USB_EPStartXfer+0xcfa>
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <USB_EPStartXfer+0xc5e>
 800a3a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3a4:	881b      	ldrh	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e04d      	b.n	800a454 <USB_EPStartXfer+0xcfa>
 800a3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3bc:	085b      	lsrs	r3, r3, #1
 800a3be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	f003 0301 	and.w	r3, r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d004      	beq.n	800a3d8 <USB_EPStartXfer+0xc7e>
 800a3ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	029b      	lsls	r3, r3, #10
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	e030      	b.n	800a454 <USB_EPStartXfer+0xcfa>
 800a3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d128      	bne.n	800a454 <USB_EPStartXfer+0xcfa>
 800a402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a41e:	b29b      	uxth	r3, r3
 800a420:	461a      	mov	r2, r3
 800a422:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a426:	4413      	add	r3, r2
 800a428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	00da      	lsls	r2, r3, #3
 800a43a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a43e:	4413      	add	r3, r2
 800a440:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a452:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	891b      	ldrh	r3, [r3, #8]
 800a460:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6959      	ldr	r1, [r3, #20]
 800a470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a474:	b29b      	uxth	r3, r3
 800a476:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a47a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a47e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a482:	6800      	ldr	r0, [r0, #0]
 800a484:	f000 fe54 	bl	800b130 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ae:	817b      	strh	r3, [r7, #10]
 800a4b0:	897b      	ldrh	r3, [r7, #10]
 800a4b2:	f083 0310 	eor.w	r3, r3, #16
 800a4b6:	817b      	strh	r3, [r7, #10]
 800a4b8:	897b      	ldrh	r3, [r7, #10]
 800a4ba:	f083 0320 	eor.w	r3, r3, #32
 800a4be:	817b      	strh	r3, [r7, #10]
 800a4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	441a      	add	r2, r3
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	8013      	strh	r3, [r2, #0]
 800a4f0:	f000 bcde 	b.w	800aeb0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	7b1b      	ldrb	r3, [r3, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	f040 80bb 	bne.w	800a67c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d917      	bls.n	800a552 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699a      	ldr	r2, [r3, #24]
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a542:	1ad2      	subs	r2, r2, r3
 800a544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	619a      	str	r2, [r3, #24]
 800a550:	e00e      	b.n	800a570 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2200      	movs	r2, #0
 800a56e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	461a      	mov	r2, r3
 800a590:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a594:	4413      	add	r3, r2
 800a596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a59a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a59e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	00da      	lsls	r2, r3, #3
 800a5a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5c8:	801a      	strh	r2, [r3, #0]
 800a5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a5d0:	d924      	bls.n	800a61c <USB_EPStartXfer+0xec2>
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5e0:	f003 031f 	and.w	r3, r3, #31
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <USB_EPStartXfer+0xe98>
 800a5e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	029b      	lsls	r3, r3, #10
 800a602:	b29b      	uxth	r3, r3
 800a604:	4313      	orrs	r3, r2
 800a606:	b29b      	uxth	r3, r3
 800a608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a610:	b29a      	uxth	r2, r3
 800a612:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	f000 bc10 	b.w	800ae3c <USB_EPStartXfer+0x16e2>
 800a61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10c      	bne.n	800a63e <USB_EPStartXfer+0xee4>
 800a624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a634:	b29a      	uxth	r2, r3
 800a636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a63a:	801a      	strh	r2, [r3, #0]
 800a63c:	e3fe      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <USB_EPStartXfer+0xf04>
 800a654:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a658:	3301      	adds	r3, #1
 800a65a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a65e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a662:	881b      	ldrh	r3, [r3, #0]
 800a664:	b29a      	uxth	r2, r3
 800a666:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	029b      	lsls	r3, r3, #10
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4313      	orrs	r3, r2
 800a672:	b29a      	uxth	r2, r3
 800a674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a678:	801a      	strh	r2, [r3, #0]
 800a67a:	e3df      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a67c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	78db      	ldrb	r3, [r3, #3]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	f040 8218 	bne.w	800aabe <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f040 809d 	bne.w	800a7da <USB_EPStartXfer+0x1080>
 800a6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6c4:	4413      	add	r3, r2
 800a6c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	00da      	lsls	r2, r3, #3
 800a6d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a6dc:	4413      	add	r3, r2
 800a6de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a6e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	2b3e      	cmp	r3, #62	@ 0x3e
 800a708:	d92b      	bls.n	800a762 <USB_EPStartXfer+0x1008>
 800a70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	095b      	lsrs	r3, r3, #5
 800a718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a71c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f003 031f 	and.w	r3, r3, #31
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d104      	bne.n	800a73a <USB_EPStartXfer+0xfe0>
 800a730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a734:	3b01      	subs	r3, #1
 800a736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a73a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29a      	uxth	r2, r3
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a746:	b29b      	uxth	r3, r3
 800a748:	029b      	lsls	r3, r3, #10
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	4313      	orrs	r3, r2
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a758:	b29a      	uxth	r2, r3
 800a75a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e070      	b.n	800a844 <USB_EPStartXfer+0x10ea>
 800a762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10c      	bne.n	800a78c <USB_EPStartXfer+0x1032>
 800a772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a77e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a782:	b29a      	uxth	r2, r3
 800a784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a788:	801a      	strh	r2, [r3, #0]
 800a78a:	e05b      	b.n	800a844 <USB_EPStartXfer+0x10ea>
 800a78c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	085b      	lsrs	r3, r3, #1
 800a79a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d004      	beq.n	800a7bc <USB_EPStartXfer+0x1062>
 800a7b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a7bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	029b      	lsls	r3, r3, #10
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7d6:	801a      	strh	r2, [r3, #0]
 800a7d8:	e034      	b.n	800a844 <USB_EPStartXfer+0x10ea>
 800a7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	785b      	ldrb	r3, [r3, #1]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d12c      	bne.n	800a844 <USB_EPStartXfer+0x10ea>
 800a7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a806:	b29b      	uxth	r3, r3
 800a808:	461a      	mov	r2, r3
 800a80a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a80e:	4413      	add	r3, r2
 800a810:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	00da      	lsls	r2, r3, #3
 800a822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a826:	4413      	add	r3, r2
 800a828:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a82c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a848:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f040 809d 	bne.w	800a99e <USB_EPStartXfer+0x1244>
 800a864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a880:	b29b      	uxth	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a888:	4413      	add	r3, r2
 800a88a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	00da      	lsls	r2, r3, #3
 800a89c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8bc:	801a      	strh	r2, [r3, #0]
 800a8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8cc:	d92b      	bls.n	800a926 <USB_EPStartXfer+0x11cc>
 800a8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	095b      	lsrs	r3, r3, #5
 800a8dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 031f 	and.w	r3, r3, #31
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d104      	bne.n	800a8fe <USB_EPStartXfer+0x11a4>
 800a8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a902:	881b      	ldrh	r3, [r3, #0]
 800a904:	b29a      	uxth	r2, r3
 800a906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	029b      	lsls	r3, r3, #10
 800a90e:	b29b      	uxth	r3, r3
 800a910:	4313      	orrs	r3, r2
 800a912:	b29b      	uxth	r3, r3
 800a914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a922:	801a      	strh	r2, [r3, #0]
 800a924:	e069      	b.n	800a9fa <USB_EPStartXfer+0x12a0>
 800a926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10c      	bne.n	800a950 <USB_EPStartXfer+0x11f6>
 800a936:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a946:	b29a      	uxth	r2, r3
 800a948:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a94c:	801a      	strh	r2, [r3, #0]
 800a94e:	e054      	b.n	800a9fa <USB_EPStartXfer+0x12a0>
 800a950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	085b      	lsrs	r3, r3, #1
 800a95e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <USB_EPStartXfer+0x1226>
 800a976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a97a:	3301      	adds	r3, #1
 800a97c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a980:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	b29a      	uxth	r2, r3
 800a988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	029b      	lsls	r3, r3, #10
 800a990:	b29b      	uxth	r3, r3
 800a992:	4313      	orrs	r3, r2
 800a994:	b29a      	uxth	r2, r3
 800a996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	e02d      	b.n	800a9fa <USB_EPStartXfer+0x12a0>
 800a99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d125      	bne.n	800a9fa <USB_EPStartXfer+0x12a0>
 800a9ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	00da      	lsls	r2, r3, #3
 800a9d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a9dc:	4413      	add	r3, r2
 800a9de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	b29a      	uxth	r2, r3
 800a9f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a9f8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	69db      	ldr	r3, [r3, #28]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8218 	beq.w	800ae3c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aa0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa2c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d005      	beq.n	800aa44 <USB_EPStartXfer+0x12ea>
 800aa38:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10d      	bne.n	800aa60 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f040 81f5 	bne.w	800ae3c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f040 81ee 	bne.w	800ae3c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aa60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa86:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aa8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	441a      	add	r2, r3
 800aaa4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aaa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aab4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	8013      	strh	r3, [r2, #0]
 800aabc:	e1be      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	78db      	ldrb	r3, [r3, #3]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	f040 81b4 	bne.w	800ae38 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	699a      	ldr	r2, [r3, #24]
 800aadc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d917      	bls.n	800ab1c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800aaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800aafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	699a      	ldr	r2, [r3, #24]
 800ab08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab0c:	1ad2      	subs	r2, r2, r3
 800ab0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	619a      	str	r2, [r3, #24]
 800ab1a:	e00e      	b.n	800ab3a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ab1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800ab2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2200      	movs	r2, #0
 800ab38:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ab3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	785b      	ldrb	r3, [r3, #1]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f040 8085 	bne.w	800ac56 <USB_EPStartXfer+0x14fc>
 800ab4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab70:	4413      	add	r3, r2
 800ab72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	00da      	lsls	r2, r3, #3
 800ab84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab88:	4413      	add	r3, r2
 800ab8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aba4:	801a      	strh	r2, [r3, #0]
 800aba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800abac:	d923      	bls.n	800abf6 <USB_EPStartXfer+0x149c>
 800abae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb2:	095b      	lsrs	r3, r3, #5
 800abb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abbc:	f003 031f 	and.w	r3, r3, #31
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <USB_EPStartXfer+0x1474>
 800abc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abc8:	3b01      	subs	r3, #1
 800abca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800abce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abda:	b29b      	uxth	r3, r3
 800abdc:	029b      	lsls	r3, r3, #10
 800abde:	b29b      	uxth	r3, r3
 800abe0:	4313      	orrs	r3, r2
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abec:	b29a      	uxth	r2, r3
 800abee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e060      	b.n	800acb8 <USB_EPStartXfer+0x155e>
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10c      	bne.n	800ac18 <USB_EPStartXfer+0x14be>
 800abfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac14:	801a      	strh	r2, [r3, #0]
 800ac16:	e04f      	b.n	800acb8 <USB_EPStartXfer+0x155e>
 800ac18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1c:	085b      	lsrs	r3, r3, #1
 800ac1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <USB_EPStartXfer+0x14de>
 800ac2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac32:	3301      	adds	r3, #1
 800ac34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ac38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac3c:	881b      	ldrh	r3, [r3, #0]
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	029b      	lsls	r3, r3, #10
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ac52:	801a      	strh	r2, [r3, #0]
 800ac54:	e030      	b.n	800acb8 <USB_EPStartXfer+0x155e>
 800ac56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	785b      	ldrb	r3, [r3, #1]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d128      	bne.n	800acb8 <USB_EPStartXfer+0x155e>
 800ac66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	00da      	lsls	r2, r3, #3
 800ac9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aca2:	4413      	add	r3, r2
 800aca4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800acb6:	801a      	strh	r2, [r3, #0]
 800acb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800acc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f040 8085 	bne.w	800ade2 <USB_EPStartXfer+0x1688>
 800acd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ace6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800acfc:	4413      	add	r3, r2
 800acfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ad02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	00da      	lsls	r2, r3, #3
 800ad10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ad14:	4413      	add	r3, r2
 800ad16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad22:	881b      	ldrh	r3, [r3, #0]
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad30:	801a      	strh	r2, [r3, #0]
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad36:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad38:	d923      	bls.n	800ad82 <USB_EPStartXfer+0x1628>
 800ad3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad3e:	095b      	lsrs	r3, r3, #5
 800ad40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad48:	f003 031f 	and.w	r3, r3, #31
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <USB_EPStartXfer+0x1600>
 800ad50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad54:	3b01      	subs	r3, #1
 800ad56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad5e:	881b      	ldrh	r3, [r3, #0]
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	029b      	lsls	r3, r3, #10
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad7e:	801a      	strh	r2, [r3, #0]
 800ad80:	e05c      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10c      	bne.n	800ada4 <USB_EPStartXfer+0x164a>
 800ad8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad8e:	881b      	ldrh	r3, [r3, #0]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ada0:	801a      	strh	r2, [r3, #0]
 800ada2:	e04b      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada8:	085b      	lsrs	r3, r3, #1
 800adaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800adae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d004      	beq.n	800adc4 <USB_EPStartXfer+0x166a>
 800adba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800adbe:	3301      	adds	r3, #1
 800adc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800adc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	b29a      	uxth	r2, r3
 800adcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800add0:	b29b      	uxth	r3, r3
 800add2:	029b      	lsls	r3, r3, #10
 800add4:	b29b      	uxth	r3, r3
 800add6:	4313      	orrs	r3, r2
 800add8:	b29a      	uxth	r2, r3
 800adda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	e02c      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
 800ade2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ade6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d124      	bne.n	800ae3c <USB_EPStartXfer+0x16e2>
 800adf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	461a      	mov	r2, r3
 800ae04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae08:	4413      	add	r3, r2
 800ae0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	00da      	lsls	r2, r3, #3
 800ae1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae20:	4413      	add	r3, r2
 800ae22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae34:	801a      	strh	r2, [r3, #0]
 800ae36:	e001      	b.n	800ae3c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	e03a      	b.n	800aeb2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	4413      	add	r3, r2
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae62:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae6a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae7a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ae7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aea0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d020      	beq.n	800af10 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aee4:	81bb      	strh	r3, [r7, #12]
 800aee6:	89bb      	ldrh	r3, [r7, #12]
 800aee8:	f083 0310 	eor.w	r3, r3, #16
 800aeec:	81bb      	strh	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	441a      	add	r2, r3
 800aef8:	89bb      	ldrh	r3, [r7, #12]
 800aefa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aefe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	8013      	strh	r3, [r2, #0]
 800af0e:	e01f      	b.n	800af50 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	881b      	ldrh	r3, [r3, #0]
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af26:	81fb      	strh	r3, [r7, #14]
 800af28:	89fb      	ldrh	r3, [r7, #14]
 800af2a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af2e:	81fb      	strh	r3, [r7, #14]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	441a      	add	r2, r3
 800af3a:	89fb      	ldrh	r3, [r7, #14]
 800af3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800af5e:	b480      	push	{r7}
 800af60:	b087      	sub	sp, #28
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	7b1b      	ldrb	r3, [r3, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 809d 	bne.w	800b0ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d04c      	beq.n	800b014 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	823b      	strh	r3, [r7, #16]
 800af88:	8a3b      	ldrh	r3, [r7, #16]
 800af8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d01b      	beq.n	800afca <USB_EPClearStall+0x6c>
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afa8:	81fb      	strh	r3, [r7, #14]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	441a      	add	r2, r3
 800afb4:	89fb      	ldrh	r3, [r7, #14]
 800afb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	78db      	ldrb	r3, [r3, #3]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d06c      	beq.n	800b0ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afe8:	81bb      	strh	r3, [r7, #12]
 800afea:	89bb      	ldrh	r3, [r7, #12]
 800afec:	f083 0320 	eor.w	r3, r3, #32
 800aff0:	81bb      	strh	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	441a      	add	r2, r3
 800affc:	89bb      	ldrh	r3, [r7, #12]
 800affe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b00a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b00e:	b29b      	uxth	r3, r3
 800b010:	8013      	strh	r3, [r2, #0]
 800b012:	e04b      	b.n	800b0ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	82fb      	strh	r3, [r7, #22]
 800b022:	8afb      	ldrh	r3, [r7, #22]
 800b024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d01b      	beq.n	800b064 <USB_EPClearStall+0x106>
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b03e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b042:	82bb      	strh	r3, [r7, #20]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	441a      	add	r2, r3
 800b04e:	8abb      	ldrh	r3, [r7, #20]
 800b050:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b054:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b060:	b29b      	uxth	r3, r3
 800b062:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	b29b      	uxth	r3, r3
 800b072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b07a:	827b      	strh	r3, [r7, #18]
 800b07c:	8a7b      	ldrh	r3, [r7, #18]
 800b07e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b082:	827b      	strh	r3, [r7, #18]
 800b084:	8a7b      	ldrh	r3, [r7, #18]
 800b086:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b08a:	827b      	strh	r3, [r7, #18]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	441a      	add	r2, r3
 800b096:	8a7b      	ldrh	r3, [r7, #18]
 800b098:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b09c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d103      	bne.n	800b0d4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2280      	movs	r2, #128	@ 0x80
 800b0d0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b083      	sub	sp, #12
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b110:	b480      	push	{r7}
 800b112:	b085      	sub	sp, #20
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b11e:	b29b      	uxth	r3, r3
 800b120:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b130:	b480      	push	{r7}
 800b132:	b08b      	sub	sp, #44	@ 0x2c
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	4611      	mov	r1, r2
 800b13c:	461a      	mov	r2, r3
 800b13e:	460b      	mov	r3, r1
 800b140:	80fb      	strh	r3, [r7, #6]
 800b142:	4613      	mov	r3, r2
 800b144:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b146:	88bb      	ldrh	r3, [r7, #4]
 800b148:	3301      	adds	r3, #1
 800b14a:	085b      	lsrs	r3, r3, #1
 800b14c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b156:	88fa      	ldrh	r2, [r7, #6]
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b160:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24
 800b166:	e01b      	b.n	800b1a0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3301      	adds	r3, #1
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	021b      	lsls	r3, r3, #8
 800b176:	b21a      	sxth	r2, r3
 800b178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	b21b      	sxth	r3, r3
 800b180:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	8a7a      	ldrh	r2, [r7, #18]
 800b186:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	3302      	adds	r3, #2
 800b18c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	3301      	adds	r3, #1
 800b192:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	3301      	adds	r3, #1
 800b198:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	3b01      	subs	r3, #1
 800b19e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d1e0      	bne.n	800b168 <USB_WritePMA+0x38>
  }
}
 800b1a6:	bf00      	nop
 800b1a8:	bf00      	nop
 800b1aa:	372c      	adds	r7, #44	@ 0x2c
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b08b      	sub	sp, #44	@ 0x2c
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	80fb      	strh	r3, [r7, #6]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b1ca:	88bb      	ldrh	r3, [r7, #4]
 800b1cc:	085b      	lsrs	r3, r3, #1
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b1da:	88fa      	ldrh	r2, [r7, #6]
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1e4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1ea:	e018      	b.n	800b21e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	3301      	adds	r3, #1
 800b206:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	0a1b      	lsrs	r3, r3, #8
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21a:	3b01      	subs	r3, #1
 800b21c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1e3      	bne.n	800b1ec <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b224:	88bb      	ldrh	r3, [r7, #4]
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	b29b      	uxth	r3, r3
 800b236:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	701a      	strb	r2, [r3, #0]
  }
}
 800b240:	bf00      	nop
 800b242:	372c      	adds	r7, #44	@ 0x2c
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b258:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b25c:	f002 fc0e 	bl	800da7c <USBD_static_malloc>
 800b260:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	32b0      	adds	r2, #176	@ 0xb0
 800b272:	2100      	movs	r1, #0
 800b274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b278:	2302      	movs	r3, #2
 800b27a:	e0d4      	b.n	800b426 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b27c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b280:	2100      	movs	r1, #0
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f002 fd63 	bl	800dd4e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	32b0      	adds	r2, #176	@ 0xb0
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	32b0      	adds	r2, #176	@ 0xb0
 800b2a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	7c1b      	ldrb	r3, [r3, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d138      	bne.n	800b326 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b2b4:	4b5e      	ldr	r3, [pc, #376]	@ (800b430 <USBD_CDC_Init+0x1e4>)
 800b2b6:	7819      	ldrb	r1, [r3, #0]
 800b2b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2bc:	2202      	movs	r2, #2
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f002 fa83 	bl	800d7ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b2c4:	4b5a      	ldr	r3, [pc, #360]	@ (800b430 <USBD_CDC_Init+0x1e4>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	440b      	add	r3, r1
 800b2d8:	3324      	adds	r3, #36	@ 0x24
 800b2da:	2201      	movs	r2, #1
 800b2dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b2de:	4b55      	ldr	r3, [pc, #340]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b2e0:	7819      	ldrb	r1, [r3, #0]
 800b2e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2e6:	2202      	movs	r2, #2
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f002 fa6e 	bl	800d7ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b2ee:	4b51      	ldr	r3, [pc, #324]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	f003 020f 	and.w	r2, r3, #15
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4413      	add	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	440b      	add	r3, r1
 800b302:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b306:	2201      	movs	r2, #1
 800b308:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b30a:	4b4b      	ldr	r3, [pc, #300]	@ (800b438 <USBD_CDC_Init+0x1ec>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	f003 020f 	and.w	r2, r3, #15
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	440b      	add	r3, r1
 800b31e:	3326      	adds	r3, #38	@ 0x26
 800b320:	2210      	movs	r2, #16
 800b322:	801a      	strh	r2, [r3, #0]
 800b324:	e035      	b.n	800b392 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b326:	4b42      	ldr	r3, [pc, #264]	@ (800b430 <USBD_CDC_Init+0x1e4>)
 800b328:	7819      	ldrb	r1, [r3, #0]
 800b32a:	2340      	movs	r3, #64	@ 0x40
 800b32c:	2202      	movs	r2, #2
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f002 fa4b 	bl	800d7ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b334:	4b3e      	ldr	r3, [pc, #248]	@ (800b430 <USBD_CDC_Init+0x1e4>)
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	f003 020f 	and.w	r2, r3, #15
 800b33c:	6879      	ldr	r1, [r7, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	440b      	add	r3, r1
 800b348:	3324      	adds	r3, #36	@ 0x24
 800b34a:	2201      	movs	r2, #1
 800b34c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b34e:	4b39      	ldr	r3, [pc, #228]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b350:	7819      	ldrb	r1, [r3, #0]
 800b352:	2340      	movs	r3, #64	@ 0x40
 800b354:	2202      	movs	r2, #2
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f002 fa37 	bl	800d7ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b35c:	4b35      	ldr	r3, [pc, #212]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 020f 	and.w	r2, r3, #15
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4613      	mov	r3, r2
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	4413      	add	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	440b      	add	r3, r1
 800b370:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b374:	2201      	movs	r2, #1
 800b376:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b378:	4b2f      	ldr	r3, [pc, #188]	@ (800b438 <USBD_CDC_Init+0x1ec>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	f003 020f 	and.w	r2, r3, #15
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	4613      	mov	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	440b      	add	r3, r1
 800b38c:	3326      	adds	r3, #38	@ 0x26
 800b38e:	2210      	movs	r2, #16
 800b390:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b392:	4b29      	ldr	r3, [pc, #164]	@ (800b438 <USBD_CDC_Init+0x1ec>)
 800b394:	7819      	ldrb	r1, [r3, #0]
 800b396:	2308      	movs	r3, #8
 800b398:	2203      	movs	r2, #3
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f002 fa15 	bl	800d7ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b3a0:	4b25      	ldr	r3, [pc, #148]	@ (800b438 <USBD_CDC_Init+0x1ec>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	f003 020f 	and.w	r2, r3, #15
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	3324      	adds	r3, #36	@ 0x24
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	33b0      	adds	r3, #176	@ 0xb0
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e018      	b.n	800b426 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	7c1b      	ldrb	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b3fe:	7819      	ldrb	r1, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f002 facc 	bl	800d9a8 <USBD_LL_PrepareReceive>
 800b410:	e008      	b.n	800b424 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b412:	4b08      	ldr	r3, [pc, #32]	@ (800b434 <USBD_CDC_Init+0x1e8>)
 800b414:	7819      	ldrb	r1, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b41c:	2340      	movs	r3, #64	@ 0x40
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f002 fac2 	bl	800d9a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	200000b7 	.word	0x200000b7
 800b434:	200000b8 	.word	0x200000b8
 800b438:	200000b9 	.word	0x200000b9

0800b43c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b448:	4b3a      	ldr	r3, [pc, #232]	@ (800b534 <USBD_CDC_DeInit+0xf8>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f002 f9e1 	bl	800d816 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b454:	4b37      	ldr	r3, [pc, #220]	@ (800b534 <USBD_CDC_DeInit+0xf8>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 020f 	and.w	r2, r3, #15
 800b45c:	6879      	ldr	r1, [r7, #4]
 800b45e:	4613      	mov	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4413      	add	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	440b      	add	r3, r1
 800b468:	3324      	adds	r3, #36	@ 0x24
 800b46a:	2200      	movs	r2, #0
 800b46c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b46e:	4b32      	ldr	r3, [pc, #200]	@ (800b538 <USBD_CDC_DeInit+0xfc>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f002 f9ce 	bl	800d816 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b47a:	4b2f      	ldr	r3, [pc, #188]	@ (800b538 <USBD_CDC_DeInit+0xfc>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f003 020f 	and.w	r2, r3, #15
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b492:	2200      	movs	r2, #0
 800b494:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b496:	4b29      	ldr	r3, [pc, #164]	@ (800b53c <USBD_CDC_DeInit+0x100>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f002 f9ba 	bl	800d816 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b4a2:	4b26      	ldr	r3, [pc, #152]	@ (800b53c <USBD_CDC_DeInit+0x100>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f003 020f 	and.w	r2, r3, #15
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	3324      	adds	r3, #36	@ 0x24
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b4bc:	4b1f      	ldr	r3, [pc, #124]	@ (800b53c <USBD_CDC_DeInit+0x100>)
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	f003 020f 	and.w	r2, r3, #15
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	440b      	add	r3, r1
 800b4d0:	3326      	adds	r3, #38	@ 0x26
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	32b0      	adds	r2, #176	@ 0xb0
 800b4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01f      	beq.n	800b528 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	33b0      	adds	r3, #176	@ 0xb0
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	32b0      	adds	r2, #176	@ 0xb0
 800b506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f002 fac4 	bl	800da98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	32b0      	adds	r2, #176	@ 0xb0
 800b51a:	2100      	movs	r1, #0
 800b51c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	200000b7 	.word	0x200000b7
 800b538:	200000b8 	.word	0x200000b8
 800b53c:	200000b9 	.word	0x200000b9

0800b540 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	32b0      	adds	r2, #176	@ 0xb0
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b56c:	2303      	movs	r3, #3
 800b56e:	e0bf      	b.n	800b6f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d050      	beq.n	800b61e <USBD_CDC_Setup+0xde>
 800b57c:	2b20      	cmp	r3, #32
 800b57e:	f040 80af 	bne.w	800b6e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	88db      	ldrh	r3, [r3, #6]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d03a      	beq.n	800b600 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	da1b      	bge.n	800b5cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	33b0      	adds	r3, #176	@ 0xb0
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4413      	add	r3, r2
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b5aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	88d2      	ldrh	r2, [r2, #6]
 800b5b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	88db      	ldrh	r3, [r3, #6]
 800b5b6:	2b07      	cmp	r3, #7
 800b5b8:	bf28      	it	cs
 800b5ba:	2307      	movcs	r3, #7
 800b5bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	89fa      	ldrh	r2, [r7, #14]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 fd07 	bl	800cfd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b5ca:	e090      	b.n	800b6ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	785a      	ldrb	r2, [r3, #1]
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	88db      	ldrh	r3, [r3, #6]
 800b5da:	2b3f      	cmp	r3, #63	@ 0x3f
 800b5dc:	d803      	bhi.n	800b5e6 <USBD_CDC_Setup+0xa6>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	88db      	ldrh	r3, [r3, #6]
 800b5e2:	b2da      	uxtb	r2, r3
 800b5e4:	e000      	b.n	800b5e8 <USBD_CDC_Setup+0xa8>
 800b5e6:	2240      	movs	r2, #64	@ 0x40
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b5ee:	6939      	ldr	r1, [r7, #16]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 fd19 	bl	800d030 <USBD_CtlPrepareRx>
      break;
 800b5fe:	e076      	b.n	800b6ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	33b0      	adds	r3, #176	@ 0xb0
 800b60a:	009b      	lsls	r3, r3, #2
 800b60c:	4413      	add	r3, r2
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	7850      	ldrb	r0, [r2, #1]
 800b616:	2200      	movs	r2, #0
 800b618:	6839      	ldr	r1, [r7, #0]
 800b61a:	4798      	blx	r3
      break;
 800b61c:	e067      	b.n	800b6ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	785b      	ldrb	r3, [r3, #1]
 800b622:	2b0b      	cmp	r3, #11
 800b624:	d851      	bhi.n	800b6ca <USBD_CDC_Setup+0x18a>
 800b626:	a201      	add	r2, pc, #4	@ (adr r2, 800b62c <USBD_CDC_Setup+0xec>)
 800b628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62c:	0800b65d 	.word	0x0800b65d
 800b630:	0800b6d9 	.word	0x0800b6d9
 800b634:	0800b6cb 	.word	0x0800b6cb
 800b638:	0800b6cb 	.word	0x0800b6cb
 800b63c:	0800b6cb 	.word	0x0800b6cb
 800b640:	0800b6cb 	.word	0x0800b6cb
 800b644:	0800b6cb 	.word	0x0800b6cb
 800b648:	0800b6cb 	.word	0x0800b6cb
 800b64c:	0800b6cb 	.word	0x0800b6cb
 800b650:	0800b6cb 	.word	0x0800b6cb
 800b654:	0800b687 	.word	0x0800b687
 800b658:	0800b6b1 	.word	0x0800b6b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b03      	cmp	r3, #3
 800b666:	d107      	bne.n	800b678 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b668:	f107 030a 	add.w	r3, r7, #10
 800b66c:	2202      	movs	r2, #2
 800b66e:	4619      	mov	r1, r3
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f001 fcb1 	bl	800cfd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b676:	e032      	b.n	800b6de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f001 fc2f 	bl	800cede <USBD_CtlError>
            ret = USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	75fb      	strb	r3, [r7, #23]
          break;
 800b684:	e02b      	b.n	800b6de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d107      	bne.n	800b6a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b692:	f107 030d 	add.w	r3, r7, #13
 800b696:	2201      	movs	r2, #1
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f001 fc9c 	bl	800cfd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b6a0:	e01d      	b.n	800b6de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 fc1a 	bl	800cede <USBD_CtlError>
            ret = USBD_FAIL;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b6ae:	e016      	b.n	800b6de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d00f      	beq.n	800b6dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 fc0d 	bl	800cede <USBD_CtlError>
            ret = USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b6c8:	e008      	b.n	800b6dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 fc06 	bl	800cede <USBD_CtlError>
          ret = USBD_FAIL;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800b6d6:	e002      	b.n	800b6de <USBD_CDC_Setup+0x19e>
          break;
 800b6d8:	bf00      	nop
 800b6da:	e008      	b.n	800b6ee <USBD_CDC_Setup+0x1ae>
          break;
 800b6dc:	bf00      	nop
      }
      break;
 800b6de:	e006      	b.n	800b6ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b6e0:	6839      	ldr	r1, [r7, #0]
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 fbfb 	bl	800cede <USBD_CtlError>
      ret = USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b6ec:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b70a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	32b0      	adds	r2, #176	@ 0xb0
 800b716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d101      	bne.n	800b722 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b71e:	2303      	movs	r3, #3
 800b720:	e065      	b.n	800b7ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	32b0      	adds	r2, #176	@ 0xb0
 800b72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	f003 020f 	and.w	r2, r3, #15
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	440b      	add	r3, r1
 800b744:	3318      	adds	r3, #24
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d02f      	beq.n	800b7ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b74c:	78fb      	ldrb	r3, [r7, #3]
 800b74e:	f003 020f 	and.w	r2, r3, #15
 800b752:	6879      	ldr	r1, [r7, #4]
 800b754:	4613      	mov	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	440b      	add	r3, r1
 800b75e:	3318      	adds	r3, #24
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	78fb      	ldrb	r3, [r7, #3]
 800b764:	f003 010f 	and.w	r1, r3, #15
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	460b      	mov	r3, r1
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	440b      	add	r3, r1
 800b770:	00db      	lsls	r3, r3, #3
 800b772:	4403      	add	r3, r0
 800b774:	3320      	adds	r3, #32
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	fbb2 f1f3 	udiv	r1, r2, r3
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
 800b780:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b782:	2b00      	cmp	r3, #0
 800b784:	d112      	bne.n	800b7ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	f003 020f 	and.w	r2, r3, #15
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	4613      	mov	r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4413      	add	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	440b      	add	r3, r1
 800b798:	3318      	adds	r3, #24
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b79e:	78f9      	ldrb	r1, [r7, #3]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f002 f8de 	bl	800d966 <USBD_LL_Transmit>
 800b7aa:	e01f      	b.n	800b7ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	33b0      	adds	r3, #176	@ 0xb0
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d010      	beq.n	800b7ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	33b0      	adds	r3, #176	@ 0xb0
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b7e8:	78fa      	ldrb	r2, [r7, #3]
 800b7ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b084      	sub	sp, #16
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	32b0      	adds	r2, #176	@ 0xb0
 800b80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b810:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	32b0      	adds	r2, #176	@ 0xb0
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	e01a      	b.n	800b85e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f002 f8dc 	bl	800d9ea <USBD_LL_GetRxDataSize>
 800b832:	4602      	mov	r2, r0
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	33b0      	adds	r3, #176	@ 0xb0
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b858:	4611      	mov	r1, r2
 800b85a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	32b0      	adds	r2, #176	@ 0xb0
 800b878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b884:	2303      	movs	r3, #3
 800b886:	e024      	b.n	800b8d2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	33b0      	adds	r3, #176	@ 0xb0
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	4413      	add	r3, r2
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d019      	beq.n	800b8d0 <USBD_CDC_EP0_RxReady+0x6a>
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b8a2:	2bff      	cmp	r3, #255	@ 0xff
 800b8a4:	d014      	beq.n	800b8d0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	33b0      	adds	r3, #176	@ 0xb0
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b8be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b8c6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	22ff      	movs	r2, #255	@ 0xff
 800b8cc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
	...

0800b8dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8e4:	2182      	movs	r1, #130	@ 0x82
 800b8e6:	4818      	ldr	r0, [pc, #96]	@ (800b948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8e8:	f000 fc99 	bl	800c21e <USBD_GetEpDesc>
 800b8ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	4815      	ldr	r0, [pc, #84]	@ (800b948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8f2:	f000 fc94 	bl	800c21e <USBD_GetEpDesc>
 800b8f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b8f8:	2181      	movs	r1, #129	@ 0x81
 800b8fa:	4813      	ldr	r0, [pc, #76]	@ (800b948 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b8fc:	f000 fc8f 	bl	800c21e <USBD_GetEpDesc>
 800b900:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	2210      	movs	r2, #16
 800b90c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d006      	beq.n	800b922 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	2200      	movs	r2, #0
 800b918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b91c:	711a      	strb	r2, [r3, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d006      	beq.n	800b936 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b930:	711a      	strb	r2, [r3, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2243      	movs	r2, #67	@ 0x43
 800b93a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b93c:	4b02      	ldr	r3, [pc, #8]	@ (800b948 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20000074 	.word	0x20000074

0800b94c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b954:	2182      	movs	r1, #130	@ 0x82
 800b956:	4818      	ldr	r0, [pc, #96]	@ (800b9b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b958:	f000 fc61 	bl	800c21e <USBD_GetEpDesc>
 800b95c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b95e:	2101      	movs	r1, #1
 800b960:	4815      	ldr	r0, [pc, #84]	@ (800b9b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b962:	f000 fc5c 	bl	800c21e <USBD_GetEpDesc>
 800b966:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b968:	2181      	movs	r1, #129	@ 0x81
 800b96a:	4813      	ldr	r0, [pc, #76]	@ (800b9b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b96c:	f000 fc57 	bl	800c21e <USBD_GetEpDesc>
 800b970:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d002      	beq.n	800b97e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2210      	movs	r2, #16
 800b97c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d006      	beq.n	800b992 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2200      	movs	r2, #0
 800b988:	711a      	strb	r2, [r3, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f042 0202 	orr.w	r2, r2, #2
 800b990:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d006      	beq.n	800b9a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	711a      	strb	r2, [r3, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f042 0202 	orr.w	r2, r2, #2
 800b9a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2243      	movs	r2, #67	@ 0x43
 800b9aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b9ac:	4b02      	ldr	r3, [pc, #8]	@ (800b9b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000074 	.word	0x20000074

0800b9bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9c4:	2182      	movs	r1, #130	@ 0x82
 800b9c6:	4818      	ldr	r0, [pc, #96]	@ (800ba28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9c8:	f000 fc29 	bl	800c21e <USBD_GetEpDesc>
 800b9cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	4815      	ldr	r0, [pc, #84]	@ (800ba28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9d2:	f000 fc24 	bl	800c21e <USBD_GetEpDesc>
 800b9d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9d8:	2181      	movs	r1, #129	@ 0x81
 800b9da:	4813      	ldr	r0, [pc, #76]	@ (800ba28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b9dc:	f000 fc1f 	bl	800c21e <USBD_GetEpDesc>
 800b9e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2210      	movs	r2, #16
 800b9ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d006      	beq.n	800ba02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b9fc:	711a      	strb	r2, [r3, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ba10:	711a      	strb	r2, [r3, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2243      	movs	r2, #67	@ 0x43
 800ba1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba1c:	4b02      	ldr	r3, [pc, #8]	@ (800ba28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3718      	adds	r7, #24
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20000074 	.word	0x20000074

0800ba2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	220a      	movs	r2, #10
 800ba38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ba3a:	4b03      	ldr	r3, [pc, #12]	@ (800ba48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr
 800ba48:	20000030 	.word	0x20000030

0800ba4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e009      	b.n	800ba74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	33b0      	adds	r3, #176	@ 0xb0
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b087      	sub	sp, #28
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	32b0      	adds	r2, #176	@ 0xb0
 800ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e008      	b.n	800bab8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	32b0      	adds	r2, #176	@ 0xb0
 800bad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800badc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bae4:	2303      	movs	r3, #3
 800bae6:	e004      	b.n	800baf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
	...

0800bb00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	32b0      	adds	r2, #176	@ 0xb0
 800bb12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	32b0      	adds	r2, #176	@ 0xb0
 800bb22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d101      	bne.n	800bb2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e018      	b.n	800bb60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	7c1b      	ldrb	r3, [r3, #16]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb36:	4b0c      	ldr	r3, [pc, #48]	@ (800bb68 <USBD_CDC_ReceivePacket+0x68>)
 800bb38:	7819      	ldrb	r1, [r3, #0]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f001 ff2f 	bl	800d9a8 <USBD_LL_PrepareReceive>
 800bb4a:	e008      	b.n	800bb5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb4c:	4b06      	ldr	r3, [pc, #24]	@ (800bb68 <USBD_CDC_ReceivePacket+0x68>)
 800bb4e:	7819      	ldrb	r1, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb56:	2340      	movs	r3, #64	@ 0x40
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f001 ff25 	bl	800d9a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	200000b8 	.word	0x200000b8

0800bb6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	4613      	mov	r3, r2
 800bb78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800bb80:	4817      	ldr	r0, [pc, #92]	@ (800bbe0 <USBD_Init+0x74>)
 800bb82:	f002 f887 	bl	800dc94 <iprintf>
 800bb86:	4817      	ldr	r0, [pc, #92]	@ (800bbe4 <USBD_Init+0x78>)
 800bb88:	f002 f884 	bl	800dc94 <iprintf>
 800bb8c:	200a      	movs	r0, #10
 800bb8e:	f002 f893 	bl	800dcb8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb92:	2303      	movs	r3, #3
 800bb94:	e01f      	b.n	800bbd6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d003      	beq.n	800bbbc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	79fa      	ldrb	r2, [r7, #7]
 800bbc8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f001 fd80 	bl	800d6d0 <USBD_LL_Init>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	0800ea2c 	.word	0x0800ea2c
 800bbe4:	0800ea34 	.word	0x0800ea34

0800bbe8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10a      	bne.n	800bc12 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800bbfc:	481a      	ldr	r0, [pc, #104]	@ (800bc68 <USBD_RegisterClass+0x80>)
 800bbfe:	f002 f849 	bl	800dc94 <iprintf>
 800bc02:	481a      	ldr	r0, [pc, #104]	@ (800bc6c <USBD_RegisterClass+0x84>)
 800bc04:	f002 f846 	bl	800dc94 <iprintf>
 800bc08:	200a      	movs	r0, #10
 800bc0a:	f002 f855 	bl	800dcb8 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e025      	b.n	800bc5e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	32ae      	adds	r2, #174	@ 0xae
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00f      	beq.n	800bc4e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	32ae      	adds	r2, #174	@ 0xae
 800bc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3e:	f107 020e 	add.w	r2, r7, #14
 800bc42:	4610      	mov	r0, r2
 800bc44:	4798      	blx	r3
 800bc46:	4602      	mov	r2, r0
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	0800ea2c 	.word	0x0800ea2c
 800bc6c:	0800ea4c 	.word	0x0800ea4c

0800bc70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f001 fd8b 	bl	800d794 <USBD_LL_Start>
 800bc7e:	4603      	mov	r3, r0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d009      	beq.n	800bccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	4798      	blx	r3
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	460b      	mov	r3, r1
 800bce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	4798      	blx	r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b084      	sub	sp, #16
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f001 f8a4 	bl	800ce6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bd30:	461a      	mov	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd3e:	f003 031f 	and.w	r3, r3, #31
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d01a      	beq.n	800bd7c <USBD_LL_SetupStage+0x72>
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d822      	bhi.n	800bd90 <USBD_LL_SetupStage+0x86>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <USBD_LL_SetupStage+0x4a>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d00a      	beq.n	800bd68 <USBD_LL_SetupStage+0x5e>
 800bd52:	e01d      	b.n	800bd90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fad1 	bl	800c304 <USBD_StdDevReq>
 800bd62:	4603      	mov	r3, r0
 800bd64:	73fb      	strb	r3, [r7, #15]
      break;
 800bd66:	e020      	b.n	800bdaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd6e:	4619      	mov	r1, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 fb39 	bl	800c3e8 <USBD_StdItfReq>
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7a:	e016      	b.n	800bdaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fb9b 	bl	800c4c0 <USBD_StdEPReq>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd8e:	e00c      	b.n	800bdaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f001 fd58 	bl	800d854 <USBD_LL_StallEP>
 800bda4:	4603      	mov	r3, r0
 800bda6:	73fb      	strb	r3, [r7, #15]
      break;
 800bda8:	bf00      	nop
  }

  return ret;
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	607a      	str	r2, [r7, #4]
 800bdc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bdc6:	7afb      	ldrb	r3, [r7, #11]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d16e      	bne.n	800beaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bdd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	f040 8098 	bne.w	800bf10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	689a      	ldr	r2, [r3, #8]
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d913      	bls.n	800be14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	68db      	ldr	r3, [r3, #12]
 800bdf4:	1ad2      	subs	r2, r2, r3
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	4293      	cmp	r3, r2
 800be04:	bf28      	it	cs
 800be06:	4613      	movcs	r3, r2
 800be08:	461a      	mov	r2, r3
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f001 f92c 	bl	800d06a <USBD_CtlContinueRx>
 800be12:	e07d      	b.n	800bf10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800be1a:	f003 031f 	and.w	r3, r3, #31
 800be1e:	2b02      	cmp	r3, #2
 800be20:	d014      	beq.n	800be4c <USBD_LL_DataOutStage+0x98>
 800be22:	2b02      	cmp	r3, #2
 800be24:	d81d      	bhi.n	800be62 <USBD_LL_DataOutStage+0xae>
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <USBD_LL_DataOutStage+0x7c>
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d003      	beq.n	800be36 <USBD_LL_DataOutStage+0x82>
 800be2e:	e018      	b.n	800be62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800be30:	2300      	movs	r3, #0
 800be32:	75bb      	strb	r3, [r7, #22]
            break;
 800be34:	e018      	b.n	800be68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	4619      	mov	r1, r3
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 f9d2 	bl	800c1ea <USBD_CoreFindIF>
 800be46:	4603      	mov	r3, r0
 800be48:	75bb      	strb	r3, [r7, #22]
            break;
 800be4a:	e00d      	b.n	800be68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800be52:	b2db      	uxtb	r3, r3
 800be54:	4619      	mov	r1, r3
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	f000 f9d4 	bl	800c204 <USBD_CoreFindEP>
 800be5c:	4603      	mov	r3, r0
 800be5e:	75bb      	strb	r3, [r7, #22]
            break;
 800be60:	e002      	b.n	800be68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800be62:	2300      	movs	r3, #0
 800be64:	75bb      	strb	r3, [r7, #22]
            break;
 800be66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800be68:	7dbb      	ldrb	r3, [r7, #22]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d119      	bne.n	800bea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d113      	bne.n	800bea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800be7a:	7dba      	ldrb	r2, [r7, #22]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	32ae      	adds	r2, #174	@ 0xae
 800be80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be84:	691b      	ldr	r3, [r3, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00b      	beq.n	800bea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800be8a:	7dba      	ldrb	r2, [r7, #22]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be92:	7dba      	ldrb	r2, [r7, #22]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	32ae      	adds	r2, #174	@ 0xae
 800be98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f001 f8f2 	bl	800d08c <USBD_CtlSendStatus>
 800bea8:	e032      	b.n	800bf10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800beaa:	7afb      	ldrb	r3, [r7, #11]
 800beac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb0:	b2db      	uxtb	r3, r3
 800beb2:	4619      	mov	r1, r3
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f9a5 	bl	800c204 <USBD_CoreFindEP>
 800beba:	4603      	mov	r3, r0
 800bebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bebe:	7dbb      	ldrb	r3, [r7, #22]
 800bec0:	2bff      	cmp	r3, #255	@ 0xff
 800bec2:	d025      	beq.n	800bf10 <USBD_LL_DataOutStage+0x15c>
 800bec4:	7dbb      	ldrb	r3, [r7, #22]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d122      	bne.n	800bf10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d117      	bne.n	800bf06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bed6:	7dba      	ldrb	r2, [r7, #22]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	32ae      	adds	r2, #174	@ 0xae
 800bedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00f      	beq.n	800bf06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bee6:	7dba      	ldrb	r2, [r7, #22]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800beee:	7dba      	ldrb	r2, [r7, #22]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	32ae      	adds	r2, #174	@ 0xae
 800bef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef8:	699b      	ldr	r3, [r3, #24]
 800befa:	7afa      	ldrb	r2, [r7, #11]
 800befc:	4611      	mov	r1, r2
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	4798      	blx	r3
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	e000      	b.n	800bf12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bf10:	2300      	movs	r3, #0
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3718      	adds	r7, #24
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	460b      	mov	r3, r1
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bf28:	7afb      	ldrb	r3, [r7, #11]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d16f      	bne.n	800c00e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3314      	adds	r3, #20
 800bf32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	d15a      	bne.n	800bff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	689a      	ldr	r2, [r3, #8]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d914      	bls.n	800bf74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	689a      	ldr	r2, [r3, #8]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	1ad2      	subs	r2, r2, r3
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f001 f854 	bl	800d00e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf66:	2300      	movs	r3, #0
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f001 fd1b 	bl	800d9a8 <USBD_LL_PrepareReceive>
 800bf72:	e03f      	b.n	800bff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	68da      	ldr	r2, [r3, #12]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d11c      	bne.n	800bfba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d316      	bcc.n	800bfba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	685a      	ldr	r2, [r3, #4]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d20f      	bcs.n	800bfba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f001 f835 	bl	800d00e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bfac:	2300      	movs	r3, #0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	2100      	movs	r1, #0
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f001 fcf8 	bl	800d9a8 <USBD_LL_PrepareReceive>
 800bfb8:	e01c      	b.n	800bff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	2b03      	cmp	r3, #3
 800bfc4:	d10f      	bne.n	800bfe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfe6:	2180      	movs	r1, #128	@ 0x80
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f001 fc33 	bl	800d854 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f001 f85f 	bl	800d0b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d03a      	beq.n	800c074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f7ff fe42 	bl	800bc88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c00c:	e032      	b.n	800c074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c00e:	7afb      	ldrb	r3, [r7, #11]
 800c010:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c014:	b2db      	uxtb	r3, r3
 800c016:	4619      	mov	r1, r3
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f000 f8f3 	bl	800c204 <USBD_CoreFindEP>
 800c01e:	4603      	mov	r3, r0
 800c020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c022:	7dfb      	ldrb	r3, [r7, #23]
 800c024:	2bff      	cmp	r3, #255	@ 0xff
 800c026:	d025      	beq.n	800c074 <USBD_LL_DataInStage+0x15a>
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d122      	bne.n	800c074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c034:	b2db      	uxtb	r3, r3
 800c036:	2b03      	cmp	r3, #3
 800c038:	d11c      	bne.n	800c074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c03a:	7dfa      	ldrb	r2, [r7, #23]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	32ae      	adds	r2, #174	@ 0xae
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d014      	beq.n	800c074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c04a:	7dfa      	ldrb	r2, [r7, #23]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c052:	7dfa      	ldrb	r2, [r7, #23]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	32ae      	adds	r2, #174	@ 0xae
 800c058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	7afa      	ldrb	r2, [r7, #11]
 800c060:	4611      	mov	r1, r2
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	4798      	blx	r3
 800c066:	4603      	mov	r3, r0
 800c068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c06a:	7dbb      	ldrb	r3, [r7, #22]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d001      	beq.n	800c074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c070:	7dbb      	ldrb	r3, [r7, #22]
 800c072:	e000      	b.n	800c076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c074:	2300      	movs	r3, #0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3718      	adds	r7, #24
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c07e:	b580      	push	{r7, lr}
 800c080:	b084      	sub	sp, #16
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2201      	movs	r2, #1
 800c08e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2200      	movs	r2, #0
 800c096:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d014      	beq.n	800c0e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00e      	beq.n	800c0e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6852      	ldr	r2, [r2, #4]
 800c0d2:	b2d2      	uxtb	r2, r2
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	4798      	blx	r3
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0e4:	2340      	movs	r3, #64	@ 0x40
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f001 fb6d 	bl	800d7ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2240      	movs	r2, #64	@ 0x40
 800c0fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c100:	2340      	movs	r3, #64	@ 0x40
 800c102:	2200      	movs	r2, #0
 800c104:	2180      	movs	r1, #128	@ 0x80
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f001 fb5f 	bl	800d7ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2240      	movs	r2, #64	@ 0x40
 800c116:	621a      	str	r2, [r3, #32]

  return ret;
 800c118:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c122:	b480      	push	{r7}
 800c124:	b083      	sub	sp, #12
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
 800c12a:	460b      	mov	r3, r1
 800c12c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	78fa      	ldrb	r2, [r7, #3]
 800c132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr

0800c142 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c142:	b480      	push	{r7}
 800c144:	b083      	sub	sp, #12
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b04      	cmp	r3, #4
 800c154:	d006      	beq.n	800c164 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2204      	movs	r2, #4
 800c168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d106      	bne.n	800c19c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c194:	b2da      	uxtb	r2, r3
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d110      	bne.n	800c1e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00b      	beq.n	800c1e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ce:	69db      	ldr	r3, [r3, #28]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1da:	69db      	ldr	r3, [r3, #28]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c1f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	460b      	mov	r3, r1
 800c20e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c210:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c212:	4618      	mov	r0, r3
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b086      	sub	sp, #24
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
 800c226:	460b      	mov	r3, r1
 800c228:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	885b      	ldrh	r3, [r3, #2]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	7812      	ldrb	r2, [r2, #0]
 800c240:	4293      	cmp	r3, r2
 800c242:	d91f      	bls.n	800c284 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c24a:	e013      	b.n	800c274 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c24c:	f107 030a 	add.w	r3, r7, #10
 800c250:	4619      	mov	r1, r3
 800c252:	6978      	ldr	r0, [r7, #20]
 800c254:	f000 f81b 	bl	800c28e <USBD_GetNextDesc>
 800c258:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b05      	cmp	r3, #5
 800c260:	d108      	bne.n	800c274 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	789b      	ldrb	r3, [r3, #2]
 800c26a:	78fa      	ldrb	r2, [r7, #3]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d008      	beq.n	800c282 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c270:	2300      	movs	r3, #0
 800c272:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	b29a      	uxth	r2, r3
 800c27a:	897b      	ldrh	r3, [r7, #10]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d8e5      	bhi.n	800c24c <USBD_GetEpDesc+0x2e>
 800c280:	e000      	b.n	800c284 <USBD_GetEpDesc+0x66>
          break;
 800c282:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c284:	693b      	ldr	r3, [r7, #16]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3718      	adds	r7, #24
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c28e:	b480      	push	{r7}
 800c290:	b085      	sub	sp, #20
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	881b      	ldrh	r3, [r3, #0]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	7812      	ldrb	r2, [r2, #0]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	b29a      	uxth	r2, r3
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b087      	sub	sp, #28
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c2e4:	8a3b      	ldrh	r3, [r7, #16]
 800c2e6:	021b      	lsls	r3, r3, #8
 800c2e8:	b21a      	sxth	r2, r3
 800c2ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	b21b      	sxth	r3, r3
 800c2f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c2f4:	89fb      	ldrh	r3, [r7, #14]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	371c      	adds	r7, #28
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
	...

0800c304 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c31a:	2b40      	cmp	r3, #64	@ 0x40
 800c31c:	d005      	beq.n	800c32a <USBD_StdDevReq+0x26>
 800c31e:	2b40      	cmp	r3, #64	@ 0x40
 800c320:	d857      	bhi.n	800c3d2 <USBD_StdDevReq+0xce>
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00f      	beq.n	800c346 <USBD_StdDevReq+0x42>
 800c326:	2b20      	cmp	r3, #32
 800c328:	d153      	bne.n	800c3d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	32ae      	adds	r2, #174	@ 0xae
 800c334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	4798      	blx	r3
 800c340:	4603      	mov	r3, r0
 800c342:	73fb      	strb	r3, [r7, #15]
      break;
 800c344:	e04a      	b.n	800c3dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b09      	cmp	r3, #9
 800c34c:	d83b      	bhi.n	800c3c6 <USBD_StdDevReq+0xc2>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <USBD_StdDevReq+0x50>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c3a9 	.word	0x0800c3a9
 800c358:	0800c3bd 	.word	0x0800c3bd
 800c35c:	0800c3c7 	.word	0x0800c3c7
 800c360:	0800c3b3 	.word	0x0800c3b3
 800c364:	0800c3c7 	.word	0x0800c3c7
 800c368:	0800c387 	.word	0x0800c387
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c3c7 	.word	0x0800c3c7
 800c374:	0800c39f 	.word	0x0800c39f
 800c378:	0800c391 	.word	0x0800c391
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 fa3c 	bl	800c7fc <USBD_GetDescriptor>
          break;
 800c384:	e024      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fbcb 	bl	800cb24 <USBD_SetAddress>
          break;
 800c38e:	e01f      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 fc0a 	bl	800cbac <USBD_SetConfig>
 800c398:	4603      	mov	r3, r0
 800c39a:	73fb      	strb	r3, [r7, #15]
          break;
 800c39c:	e018      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c39e:	6839      	ldr	r1, [r7, #0]
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fcad 	bl	800cd00 <USBD_GetConfig>
          break;
 800c3a6:	e013      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fcde 	bl	800cd6c <USBD_GetStatus>
          break;
 800c3b0:	e00e      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fd0d 	bl	800cdd4 <USBD_SetFeature>
          break;
 800c3ba:	e009      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fd31 	bl	800ce26 <USBD_ClrFeature>
          break;
 800c3c4:	e004      	b.n	800c3d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fd88 	bl	800cede <USBD_CtlError>
          break;
 800c3ce:	bf00      	nop
      }
      break;
 800c3d0:	e004      	b.n	800c3dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fd82 	bl	800cede <USBD_CtlError>
      break;
 800c3da:	bf00      	nop
  }

  return ret;
 800c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop

0800c3e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3fe:	2b40      	cmp	r3, #64	@ 0x40
 800c400:	d005      	beq.n	800c40e <USBD_StdItfReq+0x26>
 800c402:	2b40      	cmp	r3, #64	@ 0x40
 800c404:	d852      	bhi.n	800c4ac <USBD_StdItfReq+0xc4>
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <USBD_StdItfReq+0x26>
 800c40a:	2b20      	cmp	r3, #32
 800c40c:	d14e      	bne.n	800c4ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c414:	b2db      	uxtb	r3, r3
 800c416:	3b01      	subs	r3, #1
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d840      	bhi.n	800c49e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	889b      	ldrh	r3, [r3, #4]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b01      	cmp	r3, #1
 800c424:	d836      	bhi.n	800c494 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	889b      	ldrh	r3, [r3, #4]
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff fedb 	bl	800c1ea <USBD_CoreFindIF>
 800c434:	4603      	mov	r3, r0
 800c436:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c438:	7bbb      	ldrb	r3, [r7, #14]
 800c43a:	2bff      	cmp	r3, #255	@ 0xff
 800c43c:	d01d      	beq.n	800c47a <USBD_StdItfReq+0x92>
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11a      	bne.n	800c47a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c444:	7bba      	ldrb	r2, [r7, #14]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	32ae      	adds	r2, #174	@ 0xae
 800c44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d00f      	beq.n	800c474 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c454:	7bba      	ldrb	r2, [r7, #14]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c45c:	7bba      	ldrb	r2, [r7, #14]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	32ae      	adds	r2, #174	@ 0xae
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	4798      	blx	r3
 800c46e:	4603      	mov	r3, r0
 800c470:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c472:	e004      	b.n	800c47e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c474:	2303      	movs	r3, #3
 800c476:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c478:	e001      	b.n	800c47e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c47a:	2303      	movs	r3, #3
 800c47c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	88db      	ldrh	r3, [r3, #6]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d110      	bne.n	800c4a8 <USBD_StdItfReq+0xc0>
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10d      	bne.n	800c4a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f000 fdfd 	bl	800d08c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c492:	e009      	b.n	800c4a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fd21 	bl	800cede <USBD_CtlError>
          break;
 800c49c:	e004      	b.n	800c4a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c49e:	6839      	ldr	r1, [r7, #0]
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fd1c 	bl	800cede <USBD_CtlError>
          break;
 800c4a6:	e000      	b.n	800c4aa <USBD_StdItfReq+0xc2>
          break;
 800c4a8:	bf00      	nop
      }
      break;
 800c4aa:	e004      	b.n	800c4b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c4ac:	6839      	ldr	r1, [r7, #0]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fd15 	bl	800cede <USBD_CtlError>
      break;
 800c4b4:	bf00      	nop
  }

  return ret;
 800c4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	889b      	ldrh	r3, [r3, #4]
 800c4d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4dc:	2b40      	cmp	r3, #64	@ 0x40
 800c4de:	d007      	beq.n	800c4f0 <USBD_StdEPReq+0x30>
 800c4e0:	2b40      	cmp	r3, #64	@ 0x40
 800c4e2:	f200 817f 	bhi.w	800c7e4 <USBD_StdEPReq+0x324>
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d02a      	beq.n	800c540 <USBD_StdEPReq+0x80>
 800c4ea:	2b20      	cmp	r3, #32
 800c4ec:	f040 817a 	bne.w	800c7e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7ff fe85 	bl	800c204 <USBD_CoreFindEP>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4fe:	7b7b      	ldrb	r3, [r7, #13]
 800c500:	2bff      	cmp	r3, #255	@ 0xff
 800c502:	f000 8174 	beq.w	800c7ee <USBD_StdEPReq+0x32e>
 800c506:	7b7b      	ldrb	r3, [r7, #13]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f040 8170 	bne.w	800c7ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c50e:	7b7a      	ldrb	r2, [r7, #13]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c516:	7b7a      	ldrb	r2, [r7, #13]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	32ae      	adds	r2, #174	@ 0xae
 800c51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 8163 	beq.w	800c7ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c528:	7b7a      	ldrb	r2, [r7, #13]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	32ae      	adds	r2, #174	@ 0xae
 800c52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	4798      	blx	r3
 800c53a:	4603      	mov	r3, r0
 800c53c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c53e:	e156      	b.n	800c7ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	785b      	ldrb	r3, [r3, #1]
 800c544:	2b03      	cmp	r3, #3
 800c546:	d008      	beq.n	800c55a <USBD_StdEPReq+0x9a>
 800c548:	2b03      	cmp	r3, #3
 800c54a:	f300 8145 	bgt.w	800c7d8 <USBD_StdEPReq+0x318>
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f000 809b 	beq.w	800c68a <USBD_StdEPReq+0x1ca>
 800c554:	2b01      	cmp	r3, #1
 800c556:	d03c      	beq.n	800c5d2 <USBD_StdEPReq+0x112>
 800c558:	e13e      	b.n	800c7d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b02      	cmp	r3, #2
 800c564:	d002      	beq.n	800c56c <USBD_StdEPReq+0xac>
 800c566:	2b03      	cmp	r3, #3
 800c568:	d016      	beq.n	800c598 <USBD_StdEPReq+0xd8>
 800c56a:	e02c      	b.n	800c5c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00d      	beq.n	800c58e <USBD_StdEPReq+0xce>
 800c572:	7bbb      	ldrb	r3, [r7, #14]
 800c574:	2b80      	cmp	r3, #128	@ 0x80
 800c576:	d00a      	beq.n	800c58e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c578:	7bbb      	ldrb	r3, [r7, #14]
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f001 f969 	bl	800d854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c582:	2180      	movs	r1, #128	@ 0x80
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f001 f965 	bl	800d854 <USBD_LL_StallEP>
 800c58a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c58c:	e020      	b.n	800c5d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fca4 	bl	800cede <USBD_CtlError>
              break;
 800c596:	e01b      	b.n	800c5d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	885b      	ldrh	r3, [r3, #2]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10e      	bne.n	800c5be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5a0:	7bbb      	ldrb	r3, [r7, #14]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00b      	beq.n	800c5be <USBD_StdEPReq+0xfe>
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	2b80      	cmp	r3, #128	@ 0x80
 800c5aa:	d008      	beq.n	800c5be <USBD_StdEPReq+0xfe>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	88db      	ldrh	r3, [r3, #6]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d104      	bne.n	800c5be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5b4:	7bbb      	ldrb	r3, [r7, #14]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f001 f94b 	bl	800d854 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fd64 	bl	800d08c <USBD_CtlSendStatus>

              break;
 800c5c4:	e004      	b.n	800c5d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c5c6:	6839      	ldr	r1, [r7, #0]
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 fc88 	bl	800cede <USBD_CtlError>
              break;
 800c5ce:	bf00      	nop
          }
          break;
 800c5d0:	e107      	b.n	800c7e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d002      	beq.n	800c5e4 <USBD_StdEPReq+0x124>
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d016      	beq.n	800c610 <USBD_StdEPReq+0x150>
 800c5e2:	e04b      	b.n	800c67c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5e4:	7bbb      	ldrb	r3, [r7, #14]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00d      	beq.n	800c606 <USBD_StdEPReq+0x146>
 800c5ea:	7bbb      	ldrb	r3, [r7, #14]
 800c5ec:	2b80      	cmp	r3, #128	@ 0x80
 800c5ee:	d00a      	beq.n	800c606 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 f92d 	bl	800d854 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5fa:	2180      	movs	r1, #128	@ 0x80
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 f929 	bl	800d854 <USBD_LL_StallEP>
 800c602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c604:	e040      	b.n	800c688 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fc68 	bl	800cede <USBD_CtlError>
              break;
 800c60e:	e03b      	b.n	800c688 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	885b      	ldrh	r3, [r3, #2]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d136      	bne.n	800c686 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d004      	beq.n	800c62c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c622:	7bbb      	ldrb	r3, [r7, #14]
 800c624:	4619      	mov	r1, r3
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f001 f933 	bl	800d892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 fd2d 	bl	800d08c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c632:	7bbb      	ldrb	r3, [r7, #14]
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fde4 	bl	800c204 <USBD_CoreFindEP>
 800c63c:	4603      	mov	r3, r0
 800c63e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c640:	7b7b      	ldrb	r3, [r7, #13]
 800c642:	2bff      	cmp	r3, #255	@ 0xff
 800c644:	d01f      	beq.n	800c686 <USBD_StdEPReq+0x1c6>
 800c646:	7b7b      	ldrb	r3, [r7, #13]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d11c      	bne.n	800c686 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c64c:	7b7a      	ldrb	r2, [r7, #13]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c654:	7b7a      	ldrb	r2, [r7, #13]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	32ae      	adds	r2, #174	@ 0xae
 800c65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d010      	beq.n	800c686 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c664:	7b7a      	ldrb	r2, [r7, #13]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	32ae      	adds	r2, #174	@ 0xae
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
 800c676:	4603      	mov	r3, r0
 800c678:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c67a:	e004      	b.n	800c686 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fc2d 	bl	800cede <USBD_CtlError>
              break;
 800c684:	e000      	b.n	800c688 <USBD_StdEPReq+0x1c8>
              break;
 800c686:	bf00      	nop
          }
          break;
 800c688:	e0ab      	b.n	800c7e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b02      	cmp	r3, #2
 800c694:	d002      	beq.n	800c69c <USBD_StdEPReq+0x1dc>
 800c696:	2b03      	cmp	r3, #3
 800c698:	d032      	beq.n	800c700 <USBD_StdEPReq+0x240>
 800c69a:	e097      	b.n	800c7cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c69c:	7bbb      	ldrb	r3, [r7, #14]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d007      	beq.n	800c6b2 <USBD_StdEPReq+0x1f2>
 800c6a2:	7bbb      	ldrb	r3, [r7, #14]
 800c6a4:	2b80      	cmp	r3, #128	@ 0x80
 800c6a6:	d004      	beq.n	800c6b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c6a8:	6839      	ldr	r1, [r7, #0]
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fc17 	bl	800cede <USBD_CtlError>
                break;
 800c6b0:	e091      	b.n	800c7d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	da0b      	bge.n	800c6d2 <USBD_StdEPReq+0x212>
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6c0:	4613      	mov	r3, r2
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	009b      	lsls	r3, r3, #2
 800c6c8:	3310      	adds	r3, #16
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	e00b      	b.n	800c6ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d8:	4613      	mov	r3, r2
 800c6da:	009b      	lsls	r3, r3, #2
 800c6dc:	4413      	add	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fc6d 	bl	800cfd8 <USBD_CtlSendData>
              break;
 800c6fe:	e06a      	b.n	800c7d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c704:	2b00      	cmp	r3, #0
 800c706:	da11      	bge.n	800c72c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c708:	7bbb      	ldrb	r3, [r7, #14]
 800c70a:	f003 020f 	and.w	r2, r3, #15
 800c70e:	6879      	ldr	r1, [r7, #4]
 800c710:	4613      	mov	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4413      	add	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	440b      	add	r3, r1
 800c71a:	3324      	adds	r3, #36	@ 0x24
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d117      	bne.n	800c752 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c722:	6839      	ldr	r1, [r7, #0]
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fbda 	bl	800cede <USBD_CtlError>
                  break;
 800c72a:	e054      	b.n	800c7d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c72c:	7bbb      	ldrb	r3, [r7, #14]
 800c72e:	f003 020f 	and.w	r2, r3, #15
 800c732:	6879      	ldr	r1, [r7, #4]
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	440b      	add	r3, r1
 800c73e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d104      	bne.n	800c752 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c748:	6839      	ldr	r1, [r7, #0]
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fbc7 	bl	800cede <USBD_CtlError>
                  break;
 800c750:	e041      	b.n	800c7d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c756:	2b00      	cmp	r3, #0
 800c758:	da0b      	bge.n	800c772 <USBD_StdEPReq+0x2b2>
 800c75a:	7bbb      	ldrb	r3, [r7, #14]
 800c75c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c760:	4613      	mov	r3, r2
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	3310      	adds	r3, #16
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	3304      	adds	r3, #4
 800c770:	e00b      	b.n	800c78a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c778:	4613      	mov	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	4413      	add	r3, r2
 800c788:	3304      	adds	r3, #4
 800c78a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c78c:	7bbb      	ldrb	r3, [r7, #14]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <USBD_StdEPReq+0x2d8>
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	2b80      	cmp	r3, #128	@ 0x80
 800c796:	d103      	bne.n	800c7a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	2200      	movs	r2, #0
 800c79c:	601a      	str	r2, [r3, #0]
 800c79e:	e00e      	b.n	800c7be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7a0:	7bbb      	ldrb	r3, [r7, #14]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 f893 	bl	800d8d0 <USBD_LL_IsStallEP>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	e002      	b.n	800c7be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	2202      	movs	r2, #2
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 fc07 	bl	800cfd8 <USBD_CtlSendData>
              break;
 800c7ca:	e004      	b.n	800c7d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 fb85 	bl	800cede <USBD_CtlError>
              break;
 800c7d4:	bf00      	nop
          }
          break;
 800c7d6:	e004      	b.n	800c7e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fb7f 	bl	800cede <USBD_CtlError>
          break;
 800c7e0:	bf00      	nop
      }
      break;
 800c7e2:	e005      	b.n	800c7f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fb79 	bl	800cede <USBD_CtlError>
      break;
 800c7ec:	e000      	b.n	800c7f0 <USBD_StdEPReq+0x330>
      break;
 800c7ee:	bf00      	nop
  }

  return ret;
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c80e:	2300      	movs	r3, #0
 800c810:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	885b      	ldrh	r3, [r3, #2]
 800c816:	0a1b      	lsrs	r3, r3, #8
 800c818:	b29b      	uxth	r3, r3
 800c81a:	3b01      	subs	r3, #1
 800c81c:	2b0e      	cmp	r3, #14
 800c81e:	f200 8152 	bhi.w	800cac6 <USBD_GetDescriptor+0x2ca>
 800c822:	a201      	add	r2, pc, #4	@ (adr r2, 800c828 <USBD_GetDescriptor+0x2c>)
 800c824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c828:	0800c899 	.word	0x0800c899
 800c82c:	0800c8b1 	.word	0x0800c8b1
 800c830:	0800c8f1 	.word	0x0800c8f1
 800c834:	0800cac7 	.word	0x0800cac7
 800c838:	0800cac7 	.word	0x0800cac7
 800c83c:	0800ca67 	.word	0x0800ca67
 800c840:	0800ca93 	.word	0x0800ca93
 800c844:	0800cac7 	.word	0x0800cac7
 800c848:	0800cac7 	.word	0x0800cac7
 800c84c:	0800cac7 	.word	0x0800cac7
 800c850:	0800cac7 	.word	0x0800cac7
 800c854:	0800cac7 	.word	0x0800cac7
 800c858:	0800cac7 	.word	0x0800cac7
 800c85c:	0800cac7 	.word	0x0800cac7
 800c860:	0800c865 	.word	0x0800c865
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86a:	69db      	ldr	r3, [r3, #28]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	7c12      	ldrb	r2, [r2, #16]
 800c87c:	f107 0108 	add.w	r1, r7, #8
 800c880:	4610      	mov	r0, r2
 800c882:	4798      	blx	r3
 800c884:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c886:	e126      	b.n	800cad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fb27 	bl	800cede <USBD_CtlError>
        err++;
 800c890:	7afb      	ldrb	r3, [r7, #11]
 800c892:	3301      	adds	r3, #1
 800c894:	72fb      	strb	r3, [r7, #11]
      break;
 800c896:	e11e      	b.n	800cad6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	7c12      	ldrb	r2, [r2, #16]
 800c8a4:	f107 0108 	add.w	r1, r7, #8
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	60f8      	str	r0, [r7, #12]
      break;
 800c8ae:	e112      	b.n	800cad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	7c1b      	ldrb	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10d      	bne.n	800c8d4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c0:	f107 0208 	add.w	r2, r7, #8
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
 800c8c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	2202      	movs	r2, #2
 800c8d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8d2:	e100      	b.n	800cad6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8dc:	f107 0208 	add.w	r2, r7, #8
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
 800c8e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	701a      	strb	r2, [r3, #0]
      break;
 800c8ee:	e0f2      	b.n	800cad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	885b      	ldrh	r3, [r3, #2]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b05      	cmp	r3, #5
 800c8f8:	f200 80ac 	bhi.w	800ca54 <USBD_GetDescriptor+0x258>
 800c8fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c904 <USBD_GetDescriptor+0x108>)
 800c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c902:	bf00      	nop
 800c904:	0800c91d 	.word	0x0800c91d
 800c908:	0800c951 	.word	0x0800c951
 800c90c:	0800c985 	.word	0x0800c985
 800c910:	0800c9b9 	.word	0x0800c9b9
 800c914:	0800c9ed 	.word	0x0800c9ed
 800c918:	0800ca21 	.word	0x0800ca21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00b      	beq.n	800c940 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	7c12      	ldrb	r2, [r2, #16]
 800c934:	f107 0108 	add.w	r1, r7, #8
 800c938:	4610      	mov	r0, r2
 800c93a:	4798      	blx	r3
 800c93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c93e:	e091      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 facb 	bl	800cede <USBD_CtlError>
            err++;
 800c948:	7afb      	ldrb	r3, [r7, #11]
 800c94a:	3301      	adds	r3, #1
 800c94c:	72fb      	strb	r3, [r7, #11]
          break;
 800c94e:	e089      	b.n	800ca64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00b      	beq.n	800c974 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	7c12      	ldrb	r2, [r2, #16]
 800c968:	f107 0108 	add.w	r1, r7, #8
 800c96c:	4610      	mov	r0, r2
 800c96e:	4798      	blx	r3
 800c970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c972:	e077      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fab1 	bl	800cede <USBD_CtlError>
            err++;
 800c97c:	7afb      	ldrb	r3, [r7, #11]
 800c97e:	3301      	adds	r3, #1
 800c980:	72fb      	strb	r3, [r7, #11]
          break;
 800c982:	e06f      	b.n	800ca64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00b      	beq.n	800c9a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	7c12      	ldrb	r2, [r2, #16]
 800c99c:	f107 0108 	add.w	r1, r7, #8
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	4798      	blx	r3
 800c9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9a6:	e05d      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fa97 	bl	800cede <USBD_CtlError>
            err++;
 800c9b0:	7afb      	ldrb	r3, [r7, #11]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9b6:	e055      	b.n	800ca64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	7c12      	ldrb	r2, [r2, #16]
 800c9d0:	f107 0108 	add.w	r1, r7, #8
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
 800c9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9da:	e043      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fa7d 	bl	800cede <USBD_CtlError>
            err++;
 800c9e4:	7afb      	ldrb	r3, [r7, #11]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c9ea:	e03b      	b.n	800ca64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7c12      	ldrb	r2, [r2, #16]
 800ca04:	f107 0108 	add.w	r1, r7, #8
 800ca08:	4610      	mov	r0, r2
 800ca0a:	4798      	blx	r3
 800ca0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca0e:	e029      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca10:	6839      	ldr	r1, [r7, #0]
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fa63 	bl	800cede <USBD_CtlError>
            err++;
 800ca18:	7afb      	ldrb	r3, [r7, #11]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca1e:	e021      	b.n	800ca64 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d00b      	beq.n	800ca44 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	7c12      	ldrb	r2, [r2, #16]
 800ca38:	f107 0108 	add.w	r1, r7, #8
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	4798      	blx	r3
 800ca40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca42:	e00f      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fa49 	bl	800cede <USBD_CtlError>
            err++;
 800ca4c:	7afb      	ldrb	r3, [r7, #11]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	72fb      	strb	r3, [r7, #11]
          break;
 800ca52:	e007      	b.n	800ca64 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 fa41 	bl	800cede <USBD_CtlError>
          err++;
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca62:	bf00      	nop
      }
      break;
 800ca64:	e037      	b.n	800cad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7c1b      	ldrb	r3, [r3, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d109      	bne.n	800ca82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca76:	f107 0208 	add.w	r2, r7, #8
 800ca7a:	4610      	mov	r0, r2
 800ca7c:	4798      	blx	r3
 800ca7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ca80:	e029      	b.n	800cad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fa2a 	bl	800cede <USBD_CtlError>
        err++;
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca90:	e021      	b.n	800cad6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	7c1b      	ldrb	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10d      	bne.n	800cab6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa2:	f107 0208 	add.w	r2, r7, #8
 800caa6:	4610      	mov	r0, r2
 800caa8:	4798      	blx	r3
 800caaa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	3301      	adds	r3, #1
 800cab0:	2207      	movs	r2, #7
 800cab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cab4:	e00f      	b.n	800cad6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 fa10 	bl	800cede <USBD_CtlError>
        err++;
 800cabe:	7afb      	ldrb	r3, [r7, #11]
 800cac0:	3301      	adds	r3, #1
 800cac2:	72fb      	strb	r3, [r7, #11]
      break;
 800cac4:	e007      	b.n	800cad6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cac6:	6839      	ldr	r1, [r7, #0]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 fa08 	bl	800cede <USBD_CtlError>
      err++;
 800cace:	7afb      	ldrb	r3, [r7, #11]
 800cad0:	3301      	adds	r3, #1
 800cad2:	72fb      	strb	r3, [r7, #11]
      break;
 800cad4:	bf00      	nop
  }

  if (err != 0U)
 800cad6:	7afb      	ldrb	r3, [r7, #11]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d11e      	bne.n	800cb1a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	88db      	ldrh	r3, [r3, #6]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d016      	beq.n	800cb12 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cae4:	893b      	ldrh	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d00e      	beq.n	800cb08 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	88da      	ldrh	r2, [r3, #6]
 800caee:	893b      	ldrh	r3, [r7, #8]
 800caf0:	4293      	cmp	r3, r2
 800caf2:	bf28      	it	cs
 800caf4:	4613      	movcs	r3, r2
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cafa:	893b      	ldrh	r3, [r7, #8]
 800cafc:	461a      	mov	r2, r3
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fa69 	bl	800cfd8 <USBD_CtlSendData>
 800cb06:	e009      	b.n	800cb1c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f9e7 	bl	800cede <USBD_CtlError>
 800cb10:	e004      	b.n	800cb1c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 faba 	bl	800d08c <USBD_CtlSendStatus>
 800cb18:	e000      	b.n	800cb1c <USBD_GetDescriptor+0x320>
    return;
 800cb1a:	bf00      	nop
  }
}
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop

0800cb24 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	889b      	ldrh	r3, [r3, #4]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d131      	bne.n	800cb9a <USBD_SetAddress+0x76>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	88db      	ldrh	r3, [r3, #6]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d12d      	bne.n	800cb9a <USBD_SetAddress+0x76>
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	885b      	ldrh	r3, [r3, #2]
 800cb42:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb44:	d829      	bhi.n	800cb9a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	885b      	ldrh	r3, [r3, #2]
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb50:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d104      	bne.n	800cb68 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb5e:	6839      	ldr	r1, [r7, #0]
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 f9bc 	bl	800cede <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb66:	e01d      	b.n	800cba4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	7bfa      	ldrb	r2, [r7, #15]
 800cb6c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fed7 	bl	800d928 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fa86 	bl	800d08c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d004      	beq.n	800cb90 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2202      	movs	r2, #2
 800cb8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb8e:	e009      	b.n	800cba4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb98:	e004      	b.n	800cba4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f99e 	bl	800cede <USBD_CtlError>
  }
}
 800cba2:	bf00      	nop
 800cba4:	bf00      	nop
 800cba6:	3710      	adds	r7, #16
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	885b      	ldrh	r3, [r3, #2]
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	4b4e      	ldr	r3, [pc, #312]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cbc2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cbc4:	4b4d      	ldr	r3, [pc, #308]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d905      	bls.n	800cbd8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f985 	bl	800cede <USBD_CtlError>
    return USBD_FAIL;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e08c      	b.n	800ccf2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d002      	beq.n	800cbea <USBD_SetConfig+0x3e>
 800cbe4:	2b03      	cmp	r3, #3
 800cbe6:	d029      	beq.n	800cc3c <USBD_SetConfig+0x90>
 800cbe8:	e075      	b.n	800ccd6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cbea:	4b44      	ldr	r3, [pc, #272]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d020      	beq.n	800cc34 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cbf2:	4b42      	ldr	r3, [pc, #264]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbfc:	4b3f      	ldr	r3, [pc, #252]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff f84b 	bl	800bc9e <USBD_SetClassConfig>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d008      	beq.n	800cc24 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f962 	bl	800cede <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc22:	e065      	b.n	800ccf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fa31 	bl	800d08c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc32:	e05d      	b.n	800ccf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fa29 	bl	800d08c <USBD_CtlSendStatus>
      break;
 800cc3a:	e059      	b.n	800ccf0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc3c:	4b2f      	ldr	r3, [pc, #188]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d112      	bne.n	800cc6a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2202      	movs	r2, #2
 800cc48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cc4c:	4b2b      	ldr	r3, [pc, #172]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	461a      	mov	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc56:	4b29      	ldr	r3, [pc, #164]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7ff f83a 	bl	800bcd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fa12 	bl	800d08c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc68:	e042      	b.n	800ccf0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc6a:	4b24      	ldr	r3, [pc, #144]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d02a      	beq.n	800ccce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff f828 	bl	800bcd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cc86:	4b1d      	ldr	r3, [pc, #116]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc90:	4b1a      	ldr	r3, [pc, #104]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	4619      	mov	r1, r3
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7ff f801 	bl	800bc9e <USBD_SetClassConfig>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00f      	beq.n	800ccc6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 f918 	bl	800cede <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff f80d 	bl	800bcd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ccc4:	e014      	b.n	800ccf0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f9e0 	bl	800d08c <USBD_CtlSendStatus>
      break;
 800cccc:	e010      	b.n	800ccf0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f9dc 	bl	800d08c <USBD_CtlSendStatus>
      break;
 800ccd4:	e00c      	b.n	800ccf0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f900 	bl	800cede <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccde:	4b07      	ldr	r3, [pc, #28]	@ (800ccfc <USBD_SetConfig+0x150>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7fe fff6 	bl	800bcd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ccea:	2303      	movs	r3, #3
 800ccec:	73fb      	strb	r3, [r7, #15]
      break;
 800ccee:	bf00      	nop
  }

  return ret;
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	200003b4 	.word	0x200003b4

0800cd00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	88db      	ldrh	r3, [r3, #6]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d004      	beq.n	800cd1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd12:	6839      	ldr	r1, [r7, #0]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 f8e2 	bl	800cede <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd1a:	e023      	b.n	800cd64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	dc02      	bgt.n	800cd2e <USBD_GetConfig+0x2e>
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dc03      	bgt.n	800cd34 <USBD_GetConfig+0x34>
 800cd2c:	e015      	b.n	800cd5a <USBD_GetConfig+0x5a>
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d00b      	beq.n	800cd4a <USBD_GetConfig+0x4a>
 800cd32:	e012      	b.n	800cd5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	2201      	movs	r2, #1
 800cd40:	4619      	mov	r1, r3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f948 	bl	800cfd8 <USBD_CtlSendData>
        break;
 800cd48:	e00c      	b.n	800cd64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	2201      	movs	r2, #1
 800cd50:	4619      	mov	r1, r3
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f000 f940 	bl	800cfd8 <USBD_CtlSendData>
        break;
 800cd58:	e004      	b.n	800cd64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f8be 	bl	800cede <USBD_CtlError>
        break;
 800cd62:	bf00      	nop
}
 800cd64:	bf00      	nop
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d81e      	bhi.n	800cdc2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	88db      	ldrh	r3, [r3, #6]
 800cd88:	2b02      	cmp	r3, #2
 800cd8a:	d004      	beq.n	800cd96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f8a5 	bl	800cede <USBD_CtlError>
        break;
 800cd94:	e01a      	b.n	800cdcc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d005      	beq.n	800cdb2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	f043 0202 	orr.w	r2, r3, #2
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	330c      	adds	r3, #12
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f90c 	bl	800cfd8 <USBD_CtlSendData>
      break;
 800cdc0:	e004      	b.n	800cdcc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f88a 	bl	800cede <USBD_CtlError>
      break;
 800cdca:	bf00      	nop
  }
}
 800cdcc:	bf00      	nop
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	885b      	ldrh	r3, [r3, #2]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d107      	bne.n	800cdf6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 f94c 	bl	800d08c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cdf4:	e013      	b.n	800ce1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	885b      	ldrh	r3, [r3, #2]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d10b      	bne.n	800ce16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	889b      	ldrh	r3, [r3, #4]
 800ce02:	0a1b      	lsrs	r3, r3, #8
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	b2da      	uxtb	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f93c 	bl	800d08c <USBD_CtlSendStatus>
}
 800ce14:	e003      	b.n	800ce1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f860 	bl	800cede <USBD_CtlError>
}
 800ce1e:	bf00      	nop
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d80b      	bhi.n	800ce56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	885b      	ldrh	r3, [r3, #2]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d10c      	bne.n	800ce60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f91c 	bl	800d08c <USBD_CtlSendStatus>
      }
      break;
 800ce54:	e004      	b.n	800ce60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 f840 	bl	800cede <USBD_CtlError>
      break;
 800ce5e:	e000      	b.n	800ce62 <USBD_ClrFeature+0x3c>
      break;
 800ce60:	bf00      	nop
  }
}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	781a      	ldrb	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	3301      	adds	r3, #1
 800ce84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	781a      	ldrb	r2, [r3, #0]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	3301      	adds	r3, #1
 800ce92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f7ff fa16 	bl	800c2c6 <SWAPBYTE>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7ff fa09 	bl	800c2c6 <SWAPBYTE>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	461a      	mov	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7ff f9fc 	bl	800c2c6 <SWAPBYTE>
 800cece:	4603      	mov	r3, r0
 800ced0:	461a      	mov	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	80da      	strh	r2, [r3, #6]
}
 800ced6:	bf00      	nop
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cee8:	2180      	movs	r1, #128	@ 0x80
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fcb2 	bl	800d854 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cef0:	2100      	movs	r1, #0
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 fcae 	bl	800d854 <USBD_LL_StallEP>
}
 800cef8:	bf00      	nop
 800cefa:	3708      	adds	r7, #8
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d042      	beq.n	800cf9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cf1a:	6938      	ldr	r0, [r7, #16]
 800cf1c:	f000 f842 	bl	800cfa4 <USBD_GetLen>
 800cf20:	4603      	mov	r3, r0
 800cf22:	3301      	adds	r3, #1
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf2a:	d808      	bhi.n	800cf3e <USBD_GetString+0x3e>
 800cf2c:	6938      	ldr	r0, [r7, #16]
 800cf2e:	f000 f839 	bl	800cfa4 <USBD_GetLen>
 800cf32:	4603      	mov	r3, r0
 800cf34:	3301      	adds	r3, #1
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	005b      	lsls	r3, r3, #1
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	e001      	b.n	800cf42 <USBD_GetString+0x42>
 800cf3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	7812      	ldrb	r2, [r2, #0]
 800cf50:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	3301      	adds	r3, #1
 800cf56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf58:	7dfb      	ldrb	r3, [r7, #23]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	2203      	movs	r2, #3
 800cf60:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	3301      	adds	r3, #1
 800cf66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf68:	e013      	b.n	800cf92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cf6a:	7dfb      	ldrb	r3, [r7, #23]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	4413      	add	r3, r2
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	7812      	ldrb	r2, [r2, #0]
 800cf74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	613b      	str	r3, [r7, #16]
    idx++;
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	4413      	add	r3, r2
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
    idx++;
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1e7      	bne.n	800cf6a <USBD_GetString+0x6a>
 800cf9a:	e000      	b.n	800cf9e <USBD_GetString+0x9e>
    return;
 800cf9c:	bf00      	nop
  }
}
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b085      	sub	sp, #20
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cfb4:	e005      	b.n	800cfc2 <USBD_GetLen+0x1e>
  {
    len++;
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	3301      	adds	r3, #1
 800cfba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1f5      	bne.n	800cfb6 <USBD_GetLen+0x12>
  }

  return len;
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3714      	adds	r7, #20
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2202      	movs	r2, #2
 800cfe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	2100      	movs	r1, #0
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 fcb1 	bl	800d966 <USBD_LL_Transmit>

  return USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b084      	sub	sp, #16
 800d012:	af00      	add	r7, sp, #0
 800d014:	60f8      	str	r0, [r7, #12]
 800d016:	60b9      	str	r1, [r7, #8]
 800d018:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	2100      	movs	r1, #0
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f000 fca0 	bl	800d966 <USBD_LL_Transmit>

  return USBD_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3710      	adds	r7, #16
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2203      	movs	r2, #3
 800d040:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	68ba      	ldr	r2, [r7, #8]
 800d058:	2100      	movs	r1, #0
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f000 fca4 	bl	800d9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60f8      	str	r0, [r7, #12]
 800d072:	60b9      	str	r1, [r7, #8]
 800d074:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68ba      	ldr	r2, [r7, #8]
 800d07a:	2100      	movs	r1, #0
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	f000 fc93 	bl	800d9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2204      	movs	r2, #4
 800d098:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d09c:	2300      	movs	r3, #0
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f000 fc5f 	bl	800d966 <USBD_LL_Transmit>

  return USBD_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b082      	sub	sp, #8
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2205      	movs	r2, #5
 800d0be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fc6d 	bl	800d9a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d0dc:	2200      	movs	r2, #0
 800d0de:	4912      	ldr	r1, [pc, #72]	@ (800d128 <MX_USB_Device_Init+0x50>)
 800d0e0:	4812      	ldr	r0, [pc, #72]	@ (800d12c <MX_USB_Device_Init+0x54>)
 800d0e2:	f7fe fd43 	bl	800bb6c <USBD_Init>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d0ec:	f7f3 fc96 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d0f0:	490f      	ldr	r1, [pc, #60]	@ (800d130 <MX_USB_Device_Init+0x58>)
 800d0f2:	480e      	ldr	r0, [pc, #56]	@ (800d12c <MX_USB_Device_Init+0x54>)
 800d0f4:	f7fe fd78 	bl	800bbe8 <USBD_RegisterClass>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d0fe:	f7f3 fc8d 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d102:	490c      	ldr	r1, [pc, #48]	@ (800d134 <MX_USB_Device_Init+0x5c>)
 800d104:	4809      	ldr	r0, [pc, #36]	@ (800d12c <MX_USB_Device_Init+0x54>)
 800d106:	f7fe fca1 	bl	800ba4c <USBD_CDC_RegisterInterface>
 800d10a:	4603      	mov	r3, r0
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d001      	beq.n	800d114 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d110:	f7f3 fc84 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d114:	4805      	ldr	r0, [pc, #20]	@ (800d12c <MX_USB_Device_Init+0x54>)
 800d116:	f7fe fdab 	bl	800bc70 <USBD_Start>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d001      	beq.n	800d124 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d120:	f7f3 fc7c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d124:	bf00      	nop
 800d126:	bd80      	pop	{r7, pc}
 800d128:	200000d0 	.word	0x200000d0
 800d12c:	200003b8 	.word	0x200003b8
 800d130:	2000003c 	.word	0x2000003c
 800d134:	200000bc 	.word	0x200000bc

0800d138 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d13c:	2200      	movs	r2, #0
 800d13e:	4905      	ldr	r1, [pc, #20]	@ (800d154 <CDC_Init_FS+0x1c>)
 800d140:	4805      	ldr	r0, [pc, #20]	@ (800d158 <CDC_Init_FS+0x20>)
 800d142:	f7fe fc9d 	bl	800ba80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d146:	4905      	ldr	r1, [pc, #20]	@ (800d15c <CDC_Init_FS+0x24>)
 800d148:	4803      	ldr	r0, [pc, #12]	@ (800d158 <CDC_Init_FS+0x20>)
 800d14a:	f7fe fcbb 	bl	800bac4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d14e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d150:	4618      	mov	r0, r3
 800d152:	bd80      	pop	{r7, pc}
 800d154:	20000e94 	.word	0x20000e94
 800d158:	200003b8 	.word	0x200003b8
 800d15c:	20000694 	.word	0x20000694

0800d160 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d160:	b480      	push	{r7}
 800d162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d164:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d166:	4618      	mov	r0, r3
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	4603      	mov	r3, r0
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	71fb      	strb	r3, [r7, #7]
 800d17c:	4613      	mov	r3, r2
 800d17e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d180:	79fb      	ldrb	r3, [r7, #7]
 800d182:	2b23      	cmp	r3, #35	@ 0x23
 800d184:	d84a      	bhi.n	800d21c <CDC_Control_FS+0xac>
 800d186:	a201      	add	r2, pc, #4	@ (adr r2, 800d18c <CDC_Control_FS+0x1c>)
 800d188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d18c:	0800d21d 	.word	0x0800d21d
 800d190:	0800d21d 	.word	0x0800d21d
 800d194:	0800d21d 	.word	0x0800d21d
 800d198:	0800d21d 	.word	0x0800d21d
 800d19c:	0800d21d 	.word	0x0800d21d
 800d1a0:	0800d21d 	.word	0x0800d21d
 800d1a4:	0800d21d 	.word	0x0800d21d
 800d1a8:	0800d21d 	.word	0x0800d21d
 800d1ac:	0800d21d 	.word	0x0800d21d
 800d1b0:	0800d21d 	.word	0x0800d21d
 800d1b4:	0800d21d 	.word	0x0800d21d
 800d1b8:	0800d21d 	.word	0x0800d21d
 800d1bc:	0800d21d 	.word	0x0800d21d
 800d1c0:	0800d21d 	.word	0x0800d21d
 800d1c4:	0800d21d 	.word	0x0800d21d
 800d1c8:	0800d21d 	.word	0x0800d21d
 800d1cc:	0800d21d 	.word	0x0800d21d
 800d1d0:	0800d21d 	.word	0x0800d21d
 800d1d4:	0800d21d 	.word	0x0800d21d
 800d1d8:	0800d21d 	.word	0x0800d21d
 800d1dc:	0800d21d 	.word	0x0800d21d
 800d1e0:	0800d21d 	.word	0x0800d21d
 800d1e4:	0800d21d 	.word	0x0800d21d
 800d1e8:	0800d21d 	.word	0x0800d21d
 800d1ec:	0800d21d 	.word	0x0800d21d
 800d1f0:	0800d21d 	.word	0x0800d21d
 800d1f4:	0800d21d 	.word	0x0800d21d
 800d1f8:	0800d21d 	.word	0x0800d21d
 800d1fc:	0800d21d 	.word	0x0800d21d
 800d200:	0800d21d 	.word	0x0800d21d
 800d204:	0800d21d 	.word	0x0800d21d
 800d208:	0800d21d 	.word	0x0800d21d
 800d20c:	0800d21d 	.word	0x0800d21d
 800d210:	0800d21d 	.word	0x0800d21d
 800d214:	0800d21d 	.word	0x0800d21d
 800d218:	0800d21d 	.word	0x0800d21d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d21c:	bf00      	nop
  }

  return (USBD_OK);
 800d21e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	4805      	ldr	r0, [pc, #20]	@ (800d250 <CDC_Receive_FS+0x24>)
 800d23a:	f7fe fc43 	bl	800bac4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d23e:	4804      	ldr	r0, [pc, #16]	@ (800d250 <CDC_Receive_FS+0x24>)
 800d240:	f7fe fc5e 	bl	800bb00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d244:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d246:	4618      	mov	r0, r3
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	200003b8 	.word	0x200003b8

0800d254 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	4613      	mov	r3, r2
 800d260:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	371c      	adds	r7, #28
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr
	...

0800d278 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	2212      	movs	r2, #18
 800d288:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d28a:	4b03      	ldr	r3, [pc, #12]	@ (800d298 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	200000f0 	.word	0x200000f0

0800d29c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	6039      	str	r1, [r7, #0]
 800d2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2204      	movs	r2, #4
 800d2ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2ae:	4b03      	ldr	r3, [pc, #12]	@ (800d2bc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	20000104 	.word	0x20000104

0800d2c0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	6039      	str	r1, [r7, #0]
 800d2ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2cc:	79fb      	ldrb	r3, [r7, #7]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d105      	bne.n	800d2de <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d2d2:	683a      	ldr	r2, [r7, #0]
 800d2d4:	4907      	ldr	r1, [pc, #28]	@ (800d2f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d2d6:	4808      	ldr	r0, [pc, #32]	@ (800d2f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d2d8:	f7ff fe12 	bl	800cf00 <USBD_GetString>
 800d2dc:	e004      	b.n	800d2e8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	4904      	ldr	r1, [pc, #16]	@ (800d2f4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d2e2:	4805      	ldr	r0, [pc, #20]	@ (800d2f8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d2e4:	f7ff fe0c 	bl	800cf00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2e8:	4b02      	ldr	r3, [pc, #8]	@ (800d2f4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	20001694 	.word	0x20001694
 800d2f8:	0800ea64 	.word	0x0800ea64

0800d2fc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	6039      	str	r1, [r7, #0]
 800d306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	4904      	ldr	r1, [pc, #16]	@ (800d31c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d30c:	4804      	ldr	r0, [pc, #16]	@ (800d320 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d30e:	f7ff fdf7 	bl	800cf00 <USBD_GetString>
  return USBD_StrDesc;
 800d312:	4b02      	ldr	r3, [pc, #8]	@ (800d31c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	20001694 	.word	0x20001694
 800d320:	0800ea7c 	.word	0x0800ea7c

0800d324 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	6039      	str	r1, [r7, #0]
 800d32e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	221a      	movs	r2, #26
 800d334:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d336:	f000 f843 	bl	800d3c0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d33a:	4b02      	ldr	r3, [pc, #8]	@ (800d344 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20000108 	.word	0x20000108

0800d348 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d354:	79fb      	ldrb	r3, [r7, #7]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d105      	bne.n	800d366 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	4907      	ldr	r1, [pc, #28]	@ (800d37c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d35e:	4808      	ldr	r0, [pc, #32]	@ (800d380 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d360:	f7ff fdce 	bl	800cf00 <USBD_GetString>
 800d364:	e004      	b.n	800d370 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	4904      	ldr	r1, [pc, #16]	@ (800d37c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d36a:	4805      	ldr	r0, [pc, #20]	@ (800d380 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d36c:	f7ff fdc8 	bl	800cf00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d370:	4b02      	ldr	r3, [pc, #8]	@ (800d37c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20001694 	.word	0x20001694
 800d380:	0800ea90 	.word	0x0800ea90

0800d384 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	6039      	str	r1, [r7, #0]
 800d38e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d105      	bne.n	800d3a2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	4907      	ldr	r1, [pc, #28]	@ (800d3b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d39a:	4808      	ldr	r0, [pc, #32]	@ (800d3bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d39c:	f7ff fdb0 	bl	800cf00 <USBD_GetString>
 800d3a0:	e004      	b.n	800d3ac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	4904      	ldr	r1, [pc, #16]	@ (800d3b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d3a6:	4805      	ldr	r0, [pc, #20]	@ (800d3bc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d3a8:	f7ff fdaa 	bl	800cf00 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3ac:	4b02      	ldr	r3, [pc, #8]	@ (800d3b8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20001694 	.word	0x20001694
 800d3bc:	0800ea9c 	.word	0x0800ea9c

0800d3c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d404 <Get_SerialNum+0x44>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d408 <Get_SerialNum+0x48>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d40c <Get_SerialNum+0x4c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	4413      	add	r3, r2
 800d3de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d009      	beq.n	800d3fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3e6:	2208      	movs	r2, #8
 800d3e8:	4909      	ldr	r1, [pc, #36]	@ (800d410 <Get_SerialNum+0x50>)
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	f000 f814 	bl	800d418 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3f0:	2204      	movs	r2, #4
 800d3f2:	4908      	ldr	r1, [pc, #32]	@ (800d414 <Get_SerialNum+0x54>)
 800d3f4:	68b8      	ldr	r0, [r7, #8]
 800d3f6:	f000 f80f 	bl	800d418 <IntToUnicode>
  }
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	1fff7590 	.word	0x1fff7590
 800d408:	1fff7594 	.word	0x1fff7594
 800d40c:	1fff7598 	.word	0x1fff7598
 800d410:	2000010a 	.word	0x2000010a
 800d414:	2000011a 	.word	0x2000011a

0800d418 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	4613      	mov	r3, r2
 800d424:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d426:	2300      	movs	r3, #0
 800d428:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d42a:	2300      	movs	r3, #0
 800d42c:	75fb      	strb	r3, [r7, #23]
 800d42e:	e027      	b.n	800d480 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	0f1b      	lsrs	r3, r3, #28
 800d434:	2b09      	cmp	r3, #9
 800d436:	d80b      	bhi.n	800d450 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	0f1b      	lsrs	r3, r3, #28
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	4619      	mov	r1, r3
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	440b      	add	r3, r1
 800d448:	3230      	adds	r2, #48	@ 0x30
 800d44a:	b2d2      	uxtb	r2, r2
 800d44c:	701a      	strb	r2, [r3, #0]
 800d44e:	e00a      	b.n	800d466 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	0f1b      	lsrs	r3, r3, #28
 800d454:	b2da      	uxtb	r2, r3
 800d456:	7dfb      	ldrb	r3, [r7, #23]
 800d458:	005b      	lsls	r3, r3, #1
 800d45a:	4619      	mov	r1, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	440b      	add	r3, r1
 800d460:	3237      	adds	r2, #55	@ 0x37
 800d462:	b2d2      	uxtb	r2, r2
 800d464:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	011b      	lsls	r3, r3, #4
 800d46a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	3301      	adds	r3, #1
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	4413      	add	r3, r2
 800d476:	2200      	movs	r2, #0
 800d478:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	3301      	adds	r3, #1
 800d47e:	75fb      	strb	r3, [r7, #23]
 800d480:	7dfa      	ldrb	r2, [r7, #23]
 800d482:	79fb      	ldrb	r3, [r7, #7]
 800d484:	429a      	cmp	r2, r3
 800d486:	d3d3      	bcc.n	800d430 <IntToUnicode+0x18>
  }
}
 800d488:	bf00      	nop
 800d48a:	bf00      	nop
 800d48c:	371c      	adds	r7, #28
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <LL_AHB2_GRP1_EnableClock>:
{
 800d496:	b480      	push	{r7}
 800d498:	b085      	sub	sp, #20
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800d49e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800d4ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
}
 800d4bc:	bf00      	nop
 800d4be:	3714      	adds	r7, #20
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr

0800d4c8 <LL_APB1_GRP1_EnableClock>:
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800d4d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d4d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800d4e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4013      	ands	r3, r2
 800d4ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
}
 800d4ee:	bf00      	nop
 800d4f0:	3714      	adds	r7, #20
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
	...

0800d4fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b088      	sub	sp, #32
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d504:	f107 030c 	add.w	r3, r7, #12
 800d508:	2200      	movs	r2, #0
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	605a      	str	r2, [r3, #4]
 800d50e:	609a      	str	r2, [r3, #8]
 800d510:	60da      	str	r2, [r3, #12]
 800d512:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a17      	ldr	r2, [pc, #92]	@ (800d578 <HAL_PCD_MspInit+0x7c>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d128      	bne.n	800d570 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d51e:	2001      	movs	r0, #1
 800d520:	f7ff ffb9 	bl	800d496 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800d524:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d528:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d52a:	2302      	movs	r3, #2
 800d52c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d52e:	2300      	movs	r3, #0
 800d530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d532:	2300      	movs	r3, #0
 800d534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800d536:	230a      	movs	r3, #10
 800d538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d53a:	f107 030c 	add.w	r3, r7, #12
 800d53e:	4619      	mov	r1, r3
 800d540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d544:	f7f5 fda0 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d548:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800d54c:	f7ff ffbc 	bl	800d4c8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800d550:	2200      	movs	r2, #0
 800d552:	2100      	movs	r1, #0
 800d554:	2013      	movs	r0, #19
 800d556:	f7f5 faee 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800d55a:	2013      	movs	r0, #19
 800d55c:	f7f5 fb05 	bl	8002b6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d560:	2200      	movs	r2, #0
 800d562:	2100      	movs	r1, #0
 800d564:	2014      	movs	r0, #20
 800d566:	f7f5 fae6 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d56a:	2014      	movs	r0, #20
 800d56c:	f7f5 fafd 	bl	8002b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d570:	bf00      	nop
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	40006800 	.word	0x40006800

0800d57c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe fbb9 	bl	800bd0a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d598:	bf00      	nop
 800d59a:	3708      	adds	r7, #8
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d5b2:	78fa      	ldrb	r2, [r7, #3]
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4413      	add	r3, r2
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	440b      	add	r3, r1
 800d5c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	78fb      	ldrb	r3, [r7, #3]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	f7fe fbf3 	bl	800bdb4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d5ce:	bf00      	nop
 800d5d0:	3708      	adds	r7, #8
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b082      	sub	sp, #8
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	460b      	mov	r3, r1
 800d5e0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800d5e8:	78fa      	ldrb	r2, [r7, #3]
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4413      	add	r3, r2
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	440b      	add	r3, r1
 800d5f6:	3324      	adds	r3, #36	@ 0x24
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	78fb      	ldrb	r3, [r7, #3]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	f7fe fc8c 	bl	800bf1a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d602:	bf00      	nop
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b082      	sub	sp, #8
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fdc6 	bl	800c1aa <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d61e:	bf00      	nop
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b084      	sub	sp, #16
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d62e:	2301      	movs	r3, #1
 800d630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	795b      	ldrb	r3, [r3, #5]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d001      	beq.n	800d63e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d63a:	f7f3 f9ef 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d644:	7bfa      	ldrb	r2, [r7, #15]
 800d646:	4611      	mov	r1, r2
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fd6a 	bl	800c122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d654:	4618      	mov	r0, r3
 800d656:	f7fe fd12 	bl	800c07e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe fd65 	bl	800c142 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7a5b      	ldrb	r3, [r3, #9]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d680:	4b04      	ldr	r3, [pc, #16]	@ (800d694 <HAL_PCD_SuspendCallback+0x30>)
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	4a03      	ldr	r2, [pc, #12]	@ (800d694 <HAL_PCD_SuspendCallback+0x30>)
 800d686:	f043 0306 	orr.w	r3, r3, #6
 800d68a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	e000ed00 	.word	0xe000ed00

0800d698 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	7a5b      	ldrb	r3, [r3, #9]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d007      	beq.n	800d6b8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a8:	4b08      	ldr	r3, [pc, #32]	@ (800d6cc <HAL_PCD_ResumeCallback+0x34>)
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	4a07      	ldr	r2, [pc, #28]	@ (800d6cc <HAL_PCD_ResumeCallback+0x34>)
 800d6ae:	f023 0306 	bic.w	r3, r3, #6
 800d6b2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d6b4:	f000 f9fa 	bl	800daac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fd5b 	bl	800c17a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d6c4:	bf00      	nop
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	e000ed00 	.word	0xe000ed00

0800d6d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d6d8:	4a2c      	ldr	r2, [pc, #176]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a2a      	ldr	r2, [pc, #168]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d6e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800d6e8:	f7f7 fbca 	bl	8004e80 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800d6ec:	4b27      	ldr	r3, [pc, #156]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d6ee:	4a28      	ldr	r2, [pc, #160]	@ (800d790 <USBD_LL_Init+0xc0>)
 800d6f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d6f2:	4b26      	ldr	r3, [pc, #152]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d6f4:	2208      	movs	r2, #8
 800d6f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d6f8:	4b24      	ldr	r3, [pc, #144]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6fe:	4b23      	ldr	r3, [pc, #140]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d700:	2202      	movs	r2, #2
 800d702:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d704:	4b21      	ldr	r3, [pc, #132]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d706:	2200      	movs	r2, #0
 800d708:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d70a:	4b20      	ldr	r3, [pc, #128]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d710:	4b1e      	ldr	r3, [pc, #120]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d712:	2200      	movs	r2, #0
 800d714:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d716:	4b1d      	ldr	r3, [pc, #116]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d718:	2200      	movs	r2, #0
 800d71a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d71c:	481b      	ldr	r0, [pc, #108]	@ (800d78c <USBD_LL_Init+0xbc>)
 800d71e:	f7f5 fe5e 	bl	80033de <HAL_PCD_Init>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800d728:	f7f3 f978 	bl	8000a1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d732:	2318      	movs	r3, #24
 800d734:	2200      	movs	r2, #0
 800d736:	2100      	movs	r1, #0
 800d738:	f7f7 fb17 	bl	8004d6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d742:	2358      	movs	r3, #88	@ 0x58
 800d744:	2200      	movs	r2, #0
 800d746:	2180      	movs	r1, #128	@ 0x80
 800d748:	f7f7 fb0f 	bl	8004d6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d752:	23c0      	movs	r3, #192	@ 0xc0
 800d754:	2200      	movs	r2, #0
 800d756:	2181      	movs	r1, #129	@ 0x81
 800d758:	f7f7 fb07 	bl	8004d6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d762:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d766:	2200      	movs	r2, #0
 800d768:	2101      	movs	r1, #1
 800d76a:	f7f7 fafe 	bl	8004d6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d778:	2200      	movs	r2, #0
 800d77a:	2182      	movs	r1, #130	@ 0x82
 800d77c:	f7f7 faf5 	bl	8004d6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20001894 	.word	0x20001894
 800d790:	40006800 	.word	0x40006800

0800d794 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7f5 fee5 	bl	800357a <HAL_PCD_Start>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 f97e 	bl	800dab8 <USBD_Get_USB_Status>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b084      	sub	sp, #16
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	4608      	mov	r0, r1
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4603      	mov	r3, r0
 800d7da:	70fb      	strb	r3, [r7, #3]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	70bb      	strb	r3, [r7, #2]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7f2:	78bb      	ldrb	r3, [r7, #2]
 800d7f4:	883a      	ldrh	r2, [r7, #0]
 800d7f6:	78f9      	ldrb	r1, [r7, #3]
 800d7f8:	f7f6 f82c 	bl	8003854 <HAL_PCD_EP_Open>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f958 	bl	800dab8 <USBD_Get_USB_Status>
 800d808:	4603      	mov	r3, r0
 800d80a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d80c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d830:	78fa      	ldrb	r2, [r7, #3]
 800d832:	4611      	mov	r1, r2
 800d834:	4618      	mov	r0, r3
 800d836:	f7f6 f86a 	bl	800390e <HAL_PCD_EP_Close>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	4618      	mov	r0, r3
 800d842:	f000 f939 	bl	800dab8 <USBD_Get_USB_Status>
 800d846:	4603      	mov	r3, r0
 800d848:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d86e:	78fa      	ldrb	r2, [r7, #3]
 800d870:	4611      	mov	r1, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f7f6 f913 	bl	8003a9e <HAL_PCD_EP_SetStall>
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 f91a 	bl	800dab8 <USBD_Get_USB_Status>
 800d884:	4603      	mov	r3, r0
 800d886:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d888:	7bbb      	ldrb	r3, [r7, #14]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8ac:	78fa      	ldrb	r2, [r7, #3]
 800d8ae:	4611      	mov	r1, r2
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7f6 f946 	bl	8003b42 <HAL_PCD_EP_ClrStall>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ba:	7bfb      	ldrb	r3, [r7, #15]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f000 f8fb 	bl	800dab8 <USBD_Get_USB_Status>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d8e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	da0b      	bge.n	800d904 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d8ec:	78fb      	ldrb	r3, [r7, #3]
 800d8ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8f2:	68f9      	ldr	r1, [r7, #12]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	00db      	lsls	r3, r3, #3
 800d8fc:	440b      	add	r3, r1
 800d8fe:	3312      	adds	r3, #18
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	e00b      	b.n	800d91c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d904:	78fb      	ldrb	r3, [r7, #3]
 800d906:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d90a:	68f9      	ldr	r1, [r7, #12]
 800d90c:	4613      	mov	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4413      	add	r3, r2
 800d912:	00db      	lsls	r3, r3, #3
 800d914:	440b      	add	r3, r1
 800d916:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d91a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d934:	2300      	movs	r3, #0
 800d936:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d938:	2300      	movs	r3, #0
 800d93a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d942:	78fa      	ldrb	r2, [r7, #3]
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7f5 ff60 	bl	800380c <HAL_PCD_SetAddress>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d950:	7bfb      	ldrb	r3, [r7, #15]
 800d952:	4618      	mov	r0, r3
 800d954:	f000 f8b0 	bl	800dab8 <USBD_Get_USB_Status>
 800d958:	4603      	mov	r3, r0
 800d95a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b086      	sub	sp, #24
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	60f8      	str	r0, [r7, #12]
 800d96e:	607a      	str	r2, [r7, #4]
 800d970:	603b      	str	r3, [r7, #0]
 800d972:	460b      	mov	r3, r1
 800d974:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d984:	7af9      	ldrb	r1, [r7, #11]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	f7f6 f851 	bl	8003a30 <HAL_PCD_EP_Transmit>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f88f 	bl	800dab8 <USBD_Get_USB_Status>
 800d99a:	4603      	mov	r3, r0
 800d99c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d99e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3718      	adds	r7, #24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	607a      	str	r2, [r7, #4]
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9c6:	7af9      	ldrb	r1, [r7, #11]
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	f7f5 ffe7 	bl	800399e <HAL_PCD_EP_Receive>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9d4:	7dfb      	ldrb	r3, [r7, #23]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 f86e 	bl	800dab8 <USBD_Get_USB_Status>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b082      	sub	sp, #8
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9fc:	78fa      	ldrb	r2, [r7, #3]
 800d9fe:	4611      	mov	r1, r2
 800da00:	4618      	mov	r0, r3
 800da02:	f7f5 fffd 	bl	8003a00 <HAL_PCD_EP_GetRxCount>
 800da06:	4603      	mov	r3, r0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	460b      	mov	r3, r1
 800da1a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d002      	beq.n	800da28 <HAL_PCDEx_LPM_Callback+0x18>
 800da22:	2b01      	cmp	r3, #1
 800da24:	d013      	beq.n	800da4e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800da26:	e023      	b.n	800da70 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7a5b      	ldrb	r3, [r3, #9]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d007      	beq.n	800da40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800da30:	f000 f83c 	bl	800daac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da34:	4b10      	ldr	r3, [pc, #64]	@ (800da78 <HAL_PCDEx_LPM_Callback+0x68>)
 800da36:	691b      	ldr	r3, [r3, #16]
 800da38:	4a0f      	ldr	r2, [pc, #60]	@ (800da78 <HAL_PCDEx_LPM_Callback+0x68>)
 800da3a:	f023 0306 	bic.w	r3, r3, #6
 800da3e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fb97 	bl	800c17a <USBD_LL_Resume>
    break;
 800da4c:	e010      	b.n	800da70 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe fb74 	bl	800c142 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7a5b      	ldrb	r3, [r3, #9]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da62:	4b05      	ldr	r3, [pc, #20]	@ (800da78 <HAL_PCDEx_LPM_Callback+0x68>)
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	4a04      	ldr	r2, [pc, #16]	@ (800da78 <HAL_PCDEx_LPM_Callback+0x68>)
 800da68:	f043 0306 	orr.w	r3, r3, #6
 800da6c:	6113      	str	r3, [r2, #16]
    break;
 800da6e:	bf00      	nop
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	e000ed00 	.word	0xe000ed00

0800da7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da84:	4b03      	ldr	r3, [pc, #12]	@ (800da94 <USBD_static_malloc+0x18>)
}
 800da86:	4618      	mov	r0, r3
 800da88:	370c      	adds	r7, #12
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	20001b70 	.word	0x20001b70

0800da98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dab0:	f7f2 fddc 	bl	800066c <SystemClock_Config>
}
 800dab4:	bf00      	nop
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	4603      	mov	r3, r0
 800dac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	2b03      	cmp	r3, #3
 800daca:	d817      	bhi.n	800dafc <USBD_Get_USB_Status+0x44>
 800dacc:	a201      	add	r2, pc, #4	@ (adr r2, 800dad4 <USBD_Get_USB_Status+0x1c>)
 800dace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad2:	bf00      	nop
 800dad4:	0800dae5 	.word	0x0800dae5
 800dad8:	0800daeb 	.word	0x0800daeb
 800dadc:	0800daf1 	.word	0x0800daf1
 800dae0:	0800daf7 	.word	0x0800daf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
    break;
 800dae8:	e00b      	b.n	800db02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daea:	2303      	movs	r3, #3
 800daec:	73fb      	strb	r3, [r7, #15]
    break;
 800daee:	e008      	b.n	800db02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800daf0:	2301      	movs	r3, #1
 800daf2:	73fb      	strb	r3, [r7, #15]
    break;
 800daf4:	e005      	b.n	800db02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daf6:	2303      	movs	r3, #3
 800daf8:	73fb      	strb	r3, [r7, #15]
    break;
 800dafa:	e002      	b.n	800db02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dafc:	2303      	movs	r3, #3
 800dafe:	73fb      	strb	r3, [r7, #15]
    break;
 800db00:	bf00      	nop
  }
  return usb_status;
 800db02:	7bfb      	ldrb	r3, [r7, #15]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3714      	adds	r7, #20
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <std>:
 800db10:	2300      	movs	r3, #0
 800db12:	b510      	push	{r4, lr}
 800db14:	4604      	mov	r4, r0
 800db16:	e9c0 3300 	strd	r3, r3, [r0]
 800db1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800db1e:	6083      	str	r3, [r0, #8]
 800db20:	8181      	strh	r1, [r0, #12]
 800db22:	6643      	str	r3, [r0, #100]	@ 0x64
 800db24:	81c2      	strh	r2, [r0, #14]
 800db26:	6183      	str	r3, [r0, #24]
 800db28:	4619      	mov	r1, r3
 800db2a:	2208      	movs	r2, #8
 800db2c:	305c      	adds	r0, #92	@ 0x5c
 800db2e:	f000 f90e 	bl	800dd4e <memset>
 800db32:	4b0d      	ldr	r3, [pc, #52]	@ (800db68 <std+0x58>)
 800db34:	6263      	str	r3, [r4, #36]	@ 0x24
 800db36:	4b0d      	ldr	r3, [pc, #52]	@ (800db6c <std+0x5c>)
 800db38:	62a3      	str	r3, [r4, #40]	@ 0x28
 800db3a:	4b0d      	ldr	r3, [pc, #52]	@ (800db70 <std+0x60>)
 800db3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800db3e:	4b0d      	ldr	r3, [pc, #52]	@ (800db74 <std+0x64>)
 800db40:	6323      	str	r3, [r4, #48]	@ 0x30
 800db42:	4b0d      	ldr	r3, [pc, #52]	@ (800db78 <std+0x68>)
 800db44:	6224      	str	r4, [r4, #32]
 800db46:	429c      	cmp	r4, r3
 800db48:	d006      	beq.n	800db58 <std+0x48>
 800db4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db4e:	4294      	cmp	r4, r2
 800db50:	d002      	beq.n	800db58 <std+0x48>
 800db52:	33d0      	adds	r3, #208	@ 0xd0
 800db54:	429c      	cmp	r4, r3
 800db56:	d105      	bne.n	800db64 <std+0x54>
 800db58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db60:	f000 b96e 	b.w	800de40 <__retarget_lock_init_recursive>
 800db64:	bd10      	pop	{r4, pc}
 800db66:	bf00      	nop
 800db68:	0800dcc9 	.word	0x0800dcc9
 800db6c:	0800dceb 	.word	0x0800dceb
 800db70:	0800dd23 	.word	0x0800dd23
 800db74:	0800dd47 	.word	0x0800dd47
 800db78:	20001d90 	.word	0x20001d90

0800db7c <stdio_exit_handler>:
 800db7c:	4a02      	ldr	r2, [pc, #8]	@ (800db88 <stdio_exit_handler+0xc>)
 800db7e:	4903      	ldr	r1, [pc, #12]	@ (800db8c <stdio_exit_handler+0x10>)
 800db80:	4803      	ldr	r0, [pc, #12]	@ (800db90 <stdio_exit_handler+0x14>)
 800db82:	f000 b869 	b.w	800dc58 <_fwalk_sglue>
 800db86:	bf00      	nop
 800db88:	20000124 	.word	0x20000124
 800db8c:	0800e6e1 	.word	0x0800e6e1
 800db90:	20000134 	.word	0x20000134

0800db94 <cleanup_stdio>:
 800db94:	6841      	ldr	r1, [r0, #4]
 800db96:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <cleanup_stdio+0x34>)
 800db98:	4299      	cmp	r1, r3
 800db9a:	b510      	push	{r4, lr}
 800db9c:	4604      	mov	r4, r0
 800db9e:	d001      	beq.n	800dba4 <cleanup_stdio+0x10>
 800dba0:	f000 fd9e 	bl	800e6e0 <_fflush_r>
 800dba4:	68a1      	ldr	r1, [r4, #8]
 800dba6:	4b09      	ldr	r3, [pc, #36]	@ (800dbcc <cleanup_stdio+0x38>)
 800dba8:	4299      	cmp	r1, r3
 800dbaa:	d002      	beq.n	800dbb2 <cleanup_stdio+0x1e>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 fd97 	bl	800e6e0 <_fflush_r>
 800dbb2:	68e1      	ldr	r1, [r4, #12]
 800dbb4:	4b06      	ldr	r3, [pc, #24]	@ (800dbd0 <cleanup_stdio+0x3c>)
 800dbb6:	4299      	cmp	r1, r3
 800dbb8:	d004      	beq.n	800dbc4 <cleanup_stdio+0x30>
 800dbba:	4620      	mov	r0, r4
 800dbbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbc0:	f000 bd8e 	b.w	800e6e0 <_fflush_r>
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20001d90 	.word	0x20001d90
 800dbcc:	20001df8 	.word	0x20001df8
 800dbd0:	20001e60 	.word	0x20001e60

0800dbd4 <global_stdio_init.part.0>:
 800dbd4:	b510      	push	{r4, lr}
 800dbd6:	4b0b      	ldr	r3, [pc, #44]	@ (800dc04 <global_stdio_init.part.0+0x30>)
 800dbd8:	4c0b      	ldr	r4, [pc, #44]	@ (800dc08 <global_stdio_init.part.0+0x34>)
 800dbda:	4a0c      	ldr	r2, [pc, #48]	@ (800dc0c <global_stdio_init.part.0+0x38>)
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	4620      	mov	r0, r4
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	2104      	movs	r1, #4
 800dbe4:	f7ff ff94 	bl	800db10 <std>
 800dbe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dbec:	2201      	movs	r2, #1
 800dbee:	2109      	movs	r1, #9
 800dbf0:	f7ff ff8e 	bl	800db10 <std>
 800dbf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbf8:	2202      	movs	r2, #2
 800dbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbfe:	2112      	movs	r1, #18
 800dc00:	f7ff bf86 	b.w	800db10 <std>
 800dc04:	20001ec8 	.word	0x20001ec8
 800dc08:	20001d90 	.word	0x20001d90
 800dc0c:	0800db7d 	.word	0x0800db7d

0800dc10 <__sfp_lock_acquire>:
 800dc10:	4801      	ldr	r0, [pc, #4]	@ (800dc18 <__sfp_lock_acquire+0x8>)
 800dc12:	f000 b916 	b.w	800de42 <__retarget_lock_acquire_recursive>
 800dc16:	bf00      	nop
 800dc18:	20001ed1 	.word	0x20001ed1

0800dc1c <__sfp_lock_release>:
 800dc1c:	4801      	ldr	r0, [pc, #4]	@ (800dc24 <__sfp_lock_release+0x8>)
 800dc1e:	f000 b911 	b.w	800de44 <__retarget_lock_release_recursive>
 800dc22:	bf00      	nop
 800dc24:	20001ed1 	.word	0x20001ed1

0800dc28 <__sinit>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	f7ff fff0 	bl	800dc10 <__sfp_lock_acquire>
 800dc30:	6a23      	ldr	r3, [r4, #32]
 800dc32:	b11b      	cbz	r3, 800dc3c <__sinit+0x14>
 800dc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc38:	f7ff bff0 	b.w	800dc1c <__sfp_lock_release>
 800dc3c:	4b04      	ldr	r3, [pc, #16]	@ (800dc50 <__sinit+0x28>)
 800dc3e:	6223      	str	r3, [r4, #32]
 800dc40:	4b04      	ldr	r3, [pc, #16]	@ (800dc54 <__sinit+0x2c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1f5      	bne.n	800dc34 <__sinit+0xc>
 800dc48:	f7ff ffc4 	bl	800dbd4 <global_stdio_init.part.0>
 800dc4c:	e7f2      	b.n	800dc34 <__sinit+0xc>
 800dc4e:	bf00      	nop
 800dc50:	0800db95 	.word	0x0800db95
 800dc54:	20001ec8 	.word	0x20001ec8

0800dc58 <_fwalk_sglue>:
 800dc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	4688      	mov	r8, r1
 800dc60:	4614      	mov	r4, r2
 800dc62:	2600      	movs	r6, #0
 800dc64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc68:	f1b9 0901 	subs.w	r9, r9, #1
 800dc6c:	d505      	bpl.n	800dc7a <_fwalk_sglue+0x22>
 800dc6e:	6824      	ldr	r4, [r4, #0]
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	d1f7      	bne.n	800dc64 <_fwalk_sglue+0xc>
 800dc74:	4630      	mov	r0, r6
 800dc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc7a:	89ab      	ldrh	r3, [r5, #12]
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d907      	bls.n	800dc90 <_fwalk_sglue+0x38>
 800dc80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc84:	3301      	adds	r3, #1
 800dc86:	d003      	beq.n	800dc90 <_fwalk_sglue+0x38>
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	47c0      	blx	r8
 800dc8e:	4306      	orrs	r6, r0
 800dc90:	3568      	adds	r5, #104	@ 0x68
 800dc92:	e7e9      	b.n	800dc68 <_fwalk_sglue+0x10>

0800dc94 <iprintf>:
 800dc94:	b40f      	push	{r0, r1, r2, r3}
 800dc96:	b507      	push	{r0, r1, r2, lr}
 800dc98:	4906      	ldr	r1, [pc, #24]	@ (800dcb4 <iprintf+0x20>)
 800dc9a:	ab04      	add	r3, sp, #16
 800dc9c:	6808      	ldr	r0, [r1, #0]
 800dc9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dca2:	6881      	ldr	r1, [r0, #8]
 800dca4:	9301      	str	r3, [sp, #4]
 800dca6:	f000 f9f1 	bl	800e08c <_vfiprintf_r>
 800dcaa:	b003      	add	sp, #12
 800dcac:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcb0:	b004      	add	sp, #16
 800dcb2:	4770      	bx	lr
 800dcb4:	20000130 	.word	0x20000130

0800dcb8 <putchar>:
 800dcb8:	4b02      	ldr	r3, [pc, #8]	@ (800dcc4 <putchar+0xc>)
 800dcba:	4601      	mov	r1, r0
 800dcbc:	6818      	ldr	r0, [r3, #0]
 800dcbe:	6882      	ldr	r2, [r0, #8]
 800dcc0:	f000 bd36 	b.w	800e730 <_putc_r>
 800dcc4:	20000130 	.word	0x20000130

0800dcc8 <__sread>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	460c      	mov	r4, r1
 800dccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd0:	f000 f868 	bl	800dda4 <_read_r>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	bfab      	itete	ge
 800dcd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dcda:	89a3      	ldrhlt	r3, [r4, #12]
 800dcdc:	181b      	addge	r3, r3, r0
 800dcde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dce2:	bfac      	ite	ge
 800dce4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dce6:	81a3      	strhlt	r3, [r4, #12]
 800dce8:	bd10      	pop	{r4, pc}

0800dcea <__swrite>:
 800dcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcee:	461f      	mov	r7, r3
 800dcf0:	898b      	ldrh	r3, [r1, #12]
 800dcf2:	05db      	lsls	r3, r3, #23
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	4616      	mov	r6, r2
 800dcfa:	d505      	bpl.n	800dd08 <__swrite+0x1e>
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	2302      	movs	r3, #2
 800dd02:	2200      	movs	r2, #0
 800dd04:	f000 f83c 	bl	800dd80 <_lseek_r>
 800dd08:	89a3      	ldrh	r3, [r4, #12]
 800dd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd12:	81a3      	strh	r3, [r4, #12]
 800dd14:	4632      	mov	r2, r6
 800dd16:	463b      	mov	r3, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	f000 b853 	b.w	800ddc8 <_write_r>

0800dd22 <__sseek>:
 800dd22:	b510      	push	{r4, lr}
 800dd24:	460c      	mov	r4, r1
 800dd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2a:	f000 f829 	bl	800dd80 <_lseek_r>
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	bf15      	itete	ne
 800dd34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd3e:	81a3      	strheq	r3, [r4, #12]
 800dd40:	bf18      	it	ne
 800dd42:	81a3      	strhne	r3, [r4, #12]
 800dd44:	bd10      	pop	{r4, pc}

0800dd46 <__sclose>:
 800dd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd4a:	f000 b809 	b.w	800dd60 <_close_r>

0800dd4e <memset>:
 800dd4e:	4402      	add	r2, r0
 800dd50:	4603      	mov	r3, r0
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d100      	bne.n	800dd58 <memset+0xa>
 800dd56:	4770      	bx	lr
 800dd58:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5c:	e7f9      	b.n	800dd52 <memset+0x4>
	...

0800dd60 <_close_r>:
 800dd60:	b538      	push	{r3, r4, r5, lr}
 800dd62:	4d06      	ldr	r5, [pc, #24]	@ (800dd7c <_close_r+0x1c>)
 800dd64:	2300      	movs	r3, #0
 800dd66:	4604      	mov	r4, r0
 800dd68:	4608      	mov	r0, r1
 800dd6a:	602b      	str	r3, [r5, #0]
 800dd6c:	f7f3 f841 	bl	8000df2 <_close>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_close_r+0x1a>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_close_r+0x1a>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20001ecc 	.word	0x20001ecc

0800dd80 <_lseek_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4d07      	ldr	r5, [pc, #28]	@ (800dda0 <_lseek_r+0x20>)
 800dd84:	4604      	mov	r4, r0
 800dd86:	4608      	mov	r0, r1
 800dd88:	4611      	mov	r1, r2
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	602a      	str	r2, [r5, #0]
 800dd8e:	461a      	mov	r2, r3
 800dd90:	f7f3 f856 	bl	8000e40 <_lseek>
 800dd94:	1c43      	adds	r3, r0, #1
 800dd96:	d102      	bne.n	800dd9e <_lseek_r+0x1e>
 800dd98:	682b      	ldr	r3, [r5, #0]
 800dd9a:	b103      	cbz	r3, 800dd9e <_lseek_r+0x1e>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	bd38      	pop	{r3, r4, r5, pc}
 800dda0:	20001ecc 	.word	0x20001ecc

0800dda4 <_read_r>:
 800dda4:	b538      	push	{r3, r4, r5, lr}
 800dda6:	4d07      	ldr	r5, [pc, #28]	@ (800ddc4 <_read_r+0x20>)
 800dda8:	4604      	mov	r4, r0
 800ddaa:	4608      	mov	r0, r1
 800ddac:	4611      	mov	r1, r2
 800ddae:	2200      	movs	r2, #0
 800ddb0:	602a      	str	r2, [r5, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	f7f2 ffe4 	bl	8000d80 <_read>
 800ddb8:	1c43      	adds	r3, r0, #1
 800ddba:	d102      	bne.n	800ddc2 <_read_r+0x1e>
 800ddbc:	682b      	ldr	r3, [r5, #0]
 800ddbe:	b103      	cbz	r3, 800ddc2 <_read_r+0x1e>
 800ddc0:	6023      	str	r3, [r4, #0]
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	20001ecc 	.word	0x20001ecc

0800ddc8 <_write_r>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4d07      	ldr	r5, [pc, #28]	@ (800dde8 <_write_r+0x20>)
 800ddcc:	4604      	mov	r4, r0
 800ddce:	4608      	mov	r0, r1
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	602a      	str	r2, [r5, #0]
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	f7f2 ffef 	bl	8000dba <_write>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_write_r+0x1e>
 800dde0:	682b      	ldr	r3, [r5, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_write_r+0x1e>
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20001ecc 	.word	0x20001ecc

0800ddec <__errno>:
 800ddec:	4b01      	ldr	r3, [pc, #4]	@ (800ddf4 <__errno+0x8>)
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20000130 	.word	0x20000130

0800ddf8 <__libc_init_array>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	4d0d      	ldr	r5, [pc, #52]	@ (800de30 <__libc_init_array+0x38>)
 800ddfc:	4c0d      	ldr	r4, [pc, #52]	@ (800de34 <__libc_init_array+0x3c>)
 800ddfe:	1b64      	subs	r4, r4, r5
 800de00:	10a4      	asrs	r4, r4, #2
 800de02:	2600      	movs	r6, #0
 800de04:	42a6      	cmp	r6, r4
 800de06:	d109      	bne.n	800de1c <__libc_init_array+0x24>
 800de08:	4d0b      	ldr	r5, [pc, #44]	@ (800de38 <__libc_init_array+0x40>)
 800de0a:	4c0c      	ldr	r4, [pc, #48]	@ (800de3c <__libc_init_array+0x44>)
 800de0c:	f000 fdec 	bl	800e9e8 <_init>
 800de10:	1b64      	subs	r4, r4, r5
 800de12:	10a4      	asrs	r4, r4, #2
 800de14:	2600      	movs	r6, #0
 800de16:	42a6      	cmp	r6, r4
 800de18:	d105      	bne.n	800de26 <__libc_init_array+0x2e>
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de20:	4798      	blx	r3
 800de22:	3601      	adds	r6, #1
 800de24:	e7ee      	b.n	800de04 <__libc_init_array+0xc>
 800de26:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2a:	4798      	blx	r3
 800de2c:	3601      	adds	r6, #1
 800de2e:	e7f2      	b.n	800de16 <__libc_init_array+0x1e>
 800de30:	0800ebb4 	.word	0x0800ebb4
 800de34:	0800ebb4 	.word	0x0800ebb4
 800de38:	0800ebb4 	.word	0x0800ebb4
 800de3c:	0800ebb8 	.word	0x0800ebb8

0800de40 <__retarget_lock_init_recursive>:
 800de40:	4770      	bx	lr

0800de42 <__retarget_lock_acquire_recursive>:
 800de42:	4770      	bx	lr

0800de44 <__retarget_lock_release_recursive>:
 800de44:	4770      	bx	lr
	...

0800de48 <_free_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	4605      	mov	r5, r0
 800de4c:	2900      	cmp	r1, #0
 800de4e:	d041      	beq.n	800ded4 <_free_r+0x8c>
 800de50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de54:	1f0c      	subs	r4, r1, #4
 800de56:	2b00      	cmp	r3, #0
 800de58:	bfb8      	it	lt
 800de5a:	18e4      	addlt	r4, r4, r3
 800de5c:	f000 f8e0 	bl	800e020 <__malloc_lock>
 800de60:	4a1d      	ldr	r2, [pc, #116]	@ (800ded8 <_free_r+0x90>)
 800de62:	6813      	ldr	r3, [r2, #0]
 800de64:	b933      	cbnz	r3, 800de74 <_free_r+0x2c>
 800de66:	6063      	str	r3, [r4, #4]
 800de68:	6014      	str	r4, [r2, #0]
 800de6a:	4628      	mov	r0, r5
 800de6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de70:	f000 b8dc 	b.w	800e02c <__malloc_unlock>
 800de74:	42a3      	cmp	r3, r4
 800de76:	d908      	bls.n	800de8a <_free_r+0x42>
 800de78:	6820      	ldr	r0, [r4, #0]
 800de7a:	1821      	adds	r1, r4, r0
 800de7c:	428b      	cmp	r3, r1
 800de7e:	bf01      	itttt	eq
 800de80:	6819      	ldreq	r1, [r3, #0]
 800de82:	685b      	ldreq	r3, [r3, #4]
 800de84:	1809      	addeq	r1, r1, r0
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	e7ed      	b.n	800de66 <_free_r+0x1e>
 800de8a:	461a      	mov	r2, r3
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	b10b      	cbz	r3, 800de94 <_free_r+0x4c>
 800de90:	42a3      	cmp	r3, r4
 800de92:	d9fa      	bls.n	800de8a <_free_r+0x42>
 800de94:	6811      	ldr	r1, [r2, #0]
 800de96:	1850      	adds	r0, r2, r1
 800de98:	42a0      	cmp	r0, r4
 800de9a:	d10b      	bne.n	800deb4 <_free_r+0x6c>
 800de9c:	6820      	ldr	r0, [r4, #0]
 800de9e:	4401      	add	r1, r0
 800dea0:	1850      	adds	r0, r2, r1
 800dea2:	4283      	cmp	r3, r0
 800dea4:	6011      	str	r1, [r2, #0]
 800dea6:	d1e0      	bne.n	800de6a <_free_r+0x22>
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	6053      	str	r3, [r2, #4]
 800deae:	4408      	add	r0, r1
 800deb0:	6010      	str	r0, [r2, #0]
 800deb2:	e7da      	b.n	800de6a <_free_r+0x22>
 800deb4:	d902      	bls.n	800debc <_free_r+0x74>
 800deb6:	230c      	movs	r3, #12
 800deb8:	602b      	str	r3, [r5, #0]
 800deba:	e7d6      	b.n	800de6a <_free_r+0x22>
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	1821      	adds	r1, r4, r0
 800dec0:	428b      	cmp	r3, r1
 800dec2:	bf04      	itt	eq
 800dec4:	6819      	ldreq	r1, [r3, #0]
 800dec6:	685b      	ldreq	r3, [r3, #4]
 800dec8:	6063      	str	r3, [r4, #4]
 800deca:	bf04      	itt	eq
 800decc:	1809      	addeq	r1, r1, r0
 800dece:	6021      	streq	r1, [r4, #0]
 800ded0:	6054      	str	r4, [r2, #4]
 800ded2:	e7ca      	b.n	800de6a <_free_r+0x22>
 800ded4:	bd38      	pop	{r3, r4, r5, pc}
 800ded6:	bf00      	nop
 800ded8:	20001ed8 	.word	0x20001ed8

0800dedc <sbrk_aligned>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	4e0f      	ldr	r6, [pc, #60]	@ (800df1c <sbrk_aligned+0x40>)
 800dee0:	460c      	mov	r4, r1
 800dee2:	6831      	ldr	r1, [r6, #0]
 800dee4:	4605      	mov	r5, r0
 800dee6:	b911      	cbnz	r1, 800deee <sbrk_aligned+0x12>
 800dee8:	f000 fcea 	bl	800e8c0 <_sbrk_r>
 800deec:	6030      	str	r0, [r6, #0]
 800deee:	4621      	mov	r1, r4
 800def0:	4628      	mov	r0, r5
 800def2:	f000 fce5 	bl	800e8c0 <_sbrk_r>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	d103      	bne.n	800df02 <sbrk_aligned+0x26>
 800defa:	f04f 34ff 	mov.w	r4, #4294967295
 800defe:	4620      	mov	r0, r4
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	1cc4      	adds	r4, r0, #3
 800df04:	f024 0403 	bic.w	r4, r4, #3
 800df08:	42a0      	cmp	r0, r4
 800df0a:	d0f8      	beq.n	800defe <sbrk_aligned+0x22>
 800df0c:	1a21      	subs	r1, r4, r0
 800df0e:	4628      	mov	r0, r5
 800df10:	f000 fcd6 	bl	800e8c0 <_sbrk_r>
 800df14:	3001      	adds	r0, #1
 800df16:	d1f2      	bne.n	800defe <sbrk_aligned+0x22>
 800df18:	e7ef      	b.n	800defa <sbrk_aligned+0x1e>
 800df1a:	bf00      	nop
 800df1c:	20001ed4 	.word	0x20001ed4

0800df20 <_malloc_r>:
 800df20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df24:	1ccd      	adds	r5, r1, #3
 800df26:	f025 0503 	bic.w	r5, r5, #3
 800df2a:	3508      	adds	r5, #8
 800df2c:	2d0c      	cmp	r5, #12
 800df2e:	bf38      	it	cc
 800df30:	250c      	movcc	r5, #12
 800df32:	2d00      	cmp	r5, #0
 800df34:	4606      	mov	r6, r0
 800df36:	db01      	blt.n	800df3c <_malloc_r+0x1c>
 800df38:	42a9      	cmp	r1, r5
 800df3a:	d904      	bls.n	800df46 <_malloc_r+0x26>
 800df3c:	230c      	movs	r3, #12
 800df3e:	6033      	str	r3, [r6, #0]
 800df40:	2000      	movs	r0, #0
 800df42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e01c <_malloc_r+0xfc>
 800df4a:	f000 f869 	bl	800e020 <__malloc_lock>
 800df4e:	f8d8 3000 	ldr.w	r3, [r8]
 800df52:	461c      	mov	r4, r3
 800df54:	bb44      	cbnz	r4, 800dfa8 <_malloc_r+0x88>
 800df56:	4629      	mov	r1, r5
 800df58:	4630      	mov	r0, r6
 800df5a:	f7ff ffbf 	bl	800dedc <sbrk_aligned>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	4604      	mov	r4, r0
 800df62:	d158      	bne.n	800e016 <_malloc_r+0xf6>
 800df64:	f8d8 4000 	ldr.w	r4, [r8]
 800df68:	4627      	mov	r7, r4
 800df6a:	2f00      	cmp	r7, #0
 800df6c:	d143      	bne.n	800dff6 <_malloc_r+0xd6>
 800df6e:	2c00      	cmp	r4, #0
 800df70:	d04b      	beq.n	800e00a <_malloc_r+0xea>
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	4639      	mov	r1, r7
 800df76:	4630      	mov	r0, r6
 800df78:	eb04 0903 	add.w	r9, r4, r3
 800df7c:	f000 fca0 	bl	800e8c0 <_sbrk_r>
 800df80:	4581      	cmp	r9, r0
 800df82:	d142      	bne.n	800e00a <_malloc_r+0xea>
 800df84:	6821      	ldr	r1, [r4, #0]
 800df86:	1a6d      	subs	r5, r5, r1
 800df88:	4629      	mov	r1, r5
 800df8a:	4630      	mov	r0, r6
 800df8c:	f7ff ffa6 	bl	800dedc <sbrk_aligned>
 800df90:	3001      	adds	r0, #1
 800df92:	d03a      	beq.n	800e00a <_malloc_r+0xea>
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	442b      	add	r3, r5
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	f8d8 3000 	ldr.w	r3, [r8]
 800df9e:	685a      	ldr	r2, [r3, #4]
 800dfa0:	bb62      	cbnz	r2, 800dffc <_malloc_r+0xdc>
 800dfa2:	f8c8 7000 	str.w	r7, [r8]
 800dfa6:	e00f      	b.n	800dfc8 <_malloc_r+0xa8>
 800dfa8:	6822      	ldr	r2, [r4, #0]
 800dfaa:	1b52      	subs	r2, r2, r5
 800dfac:	d420      	bmi.n	800dff0 <_malloc_r+0xd0>
 800dfae:	2a0b      	cmp	r2, #11
 800dfb0:	d917      	bls.n	800dfe2 <_malloc_r+0xc2>
 800dfb2:	1961      	adds	r1, r4, r5
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	6025      	str	r5, [r4, #0]
 800dfb8:	bf18      	it	ne
 800dfba:	6059      	strne	r1, [r3, #4]
 800dfbc:	6863      	ldr	r3, [r4, #4]
 800dfbe:	bf08      	it	eq
 800dfc0:	f8c8 1000 	streq.w	r1, [r8]
 800dfc4:	5162      	str	r2, [r4, r5]
 800dfc6:	604b      	str	r3, [r1, #4]
 800dfc8:	4630      	mov	r0, r6
 800dfca:	f000 f82f 	bl	800e02c <__malloc_unlock>
 800dfce:	f104 000b 	add.w	r0, r4, #11
 800dfd2:	1d23      	adds	r3, r4, #4
 800dfd4:	f020 0007 	bic.w	r0, r0, #7
 800dfd8:	1ac2      	subs	r2, r0, r3
 800dfda:	bf1c      	itt	ne
 800dfdc:	1a1b      	subne	r3, r3, r0
 800dfde:	50a3      	strne	r3, [r4, r2]
 800dfe0:	e7af      	b.n	800df42 <_malloc_r+0x22>
 800dfe2:	6862      	ldr	r2, [r4, #4]
 800dfe4:	42a3      	cmp	r3, r4
 800dfe6:	bf0c      	ite	eq
 800dfe8:	f8c8 2000 	streq.w	r2, [r8]
 800dfec:	605a      	strne	r2, [r3, #4]
 800dfee:	e7eb      	b.n	800dfc8 <_malloc_r+0xa8>
 800dff0:	4623      	mov	r3, r4
 800dff2:	6864      	ldr	r4, [r4, #4]
 800dff4:	e7ae      	b.n	800df54 <_malloc_r+0x34>
 800dff6:	463c      	mov	r4, r7
 800dff8:	687f      	ldr	r7, [r7, #4]
 800dffa:	e7b6      	b.n	800df6a <_malloc_r+0x4a>
 800dffc:	461a      	mov	r2, r3
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	42a3      	cmp	r3, r4
 800e002:	d1fb      	bne.n	800dffc <_malloc_r+0xdc>
 800e004:	2300      	movs	r3, #0
 800e006:	6053      	str	r3, [r2, #4]
 800e008:	e7de      	b.n	800dfc8 <_malloc_r+0xa8>
 800e00a:	230c      	movs	r3, #12
 800e00c:	6033      	str	r3, [r6, #0]
 800e00e:	4630      	mov	r0, r6
 800e010:	f000 f80c 	bl	800e02c <__malloc_unlock>
 800e014:	e794      	b.n	800df40 <_malloc_r+0x20>
 800e016:	6005      	str	r5, [r0, #0]
 800e018:	e7d6      	b.n	800dfc8 <_malloc_r+0xa8>
 800e01a:	bf00      	nop
 800e01c:	20001ed8 	.word	0x20001ed8

0800e020 <__malloc_lock>:
 800e020:	4801      	ldr	r0, [pc, #4]	@ (800e028 <__malloc_lock+0x8>)
 800e022:	f7ff bf0e 	b.w	800de42 <__retarget_lock_acquire_recursive>
 800e026:	bf00      	nop
 800e028:	20001ed0 	.word	0x20001ed0

0800e02c <__malloc_unlock>:
 800e02c:	4801      	ldr	r0, [pc, #4]	@ (800e034 <__malloc_unlock+0x8>)
 800e02e:	f7ff bf09 	b.w	800de44 <__retarget_lock_release_recursive>
 800e032:	bf00      	nop
 800e034:	20001ed0 	.word	0x20001ed0

0800e038 <__sfputc_r>:
 800e038:	6893      	ldr	r3, [r2, #8]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	b410      	push	{r4}
 800e040:	6093      	str	r3, [r2, #8]
 800e042:	da08      	bge.n	800e056 <__sfputc_r+0x1e>
 800e044:	6994      	ldr	r4, [r2, #24]
 800e046:	42a3      	cmp	r3, r4
 800e048:	db01      	blt.n	800e04e <__sfputc_r+0x16>
 800e04a:	290a      	cmp	r1, #10
 800e04c:	d103      	bne.n	800e056 <__sfputc_r+0x1e>
 800e04e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e052:	f000 bba1 	b.w	800e798 <__swbuf_r>
 800e056:	6813      	ldr	r3, [r2, #0]
 800e058:	1c58      	adds	r0, r3, #1
 800e05a:	6010      	str	r0, [r2, #0]
 800e05c:	7019      	strb	r1, [r3, #0]
 800e05e:	4608      	mov	r0, r1
 800e060:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e064:	4770      	bx	lr

0800e066 <__sfputs_r>:
 800e066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e068:	4606      	mov	r6, r0
 800e06a:	460f      	mov	r7, r1
 800e06c:	4614      	mov	r4, r2
 800e06e:	18d5      	adds	r5, r2, r3
 800e070:	42ac      	cmp	r4, r5
 800e072:	d101      	bne.n	800e078 <__sfputs_r+0x12>
 800e074:	2000      	movs	r0, #0
 800e076:	e007      	b.n	800e088 <__sfputs_r+0x22>
 800e078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07c:	463a      	mov	r2, r7
 800e07e:	4630      	mov	r0, r6
 800e080:	f7ff ffda 	bl	800e038 <__sfputc_r>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d1f3      	bne.n	800e070 <__sfputs_r+0xa>
 800e088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e08c <_vfiprintf_r>:
 800e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	460d      	mov	r5, r1
 800e092:	b09d      	sub	sp, #116	@ 0x74
 800e094:	4614      	mov	r4, r2
 800e096:	4698      	mov	r8, r3
 800e098:	4606      	mov	r6, r0
 800e09a:	b118      	cbz	r0, 800e0a4 <_vfiprintf_r+0x18>
 800e09c:	6a03      	ldr	r3, [r0, #32]
 800e09e:	b90b      	cbnz	r3, 800e0a4 <_vfiprintf_r+0x18>
 800e0a0:	f7ff fdc2 	bl	800dc28 <__sinit>
 800e0a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0a6:	07d9      	lsls	r1, r3, #31
 800e0a8:	d405      	bmi.n	800e0b6 <_vfiprintf_r+0x2a>
 800e0aa:	89ab      	ldrh	r3, [r5, #12]
 800e0ac:	059a      	lsls	r2, r3, #22
 800e0ae:	d402      	bmi.n	800e0b6 <_vfiprintf_r+0x2a>
 800e0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0b2:	f7ff fec6 	bl	800de42 <__retarget_lock_acquire_recursive>
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	071b      	lsls	r3, r3, #28
 800e0ba:	d501      	bpl.n	800e0c0 <_vfiprintf_r+0x34>
 800e0bc:	692b      	ldr	r3, [r5, #16]
 800e0be:	b99b      	cbnz	r3, 800e0e8 <_vfiprintf_r+0x5c>
 800e0c0:	4629      	mov	r1, r5
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f000 fba6 	bl	800e814 <__swsetup_r>
 800e0c8:	b170      	cbz	r0, 800e0e8 <_vfiprintf_r+0x5c>
 800e0ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0cc:	07dc      	lsls	r4, r3, #31
 800e0ce:	d504      	bpl.n	800e0da <_vfiprintf_r+0x4e>
 800e0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d4:	b01d      	add	sp, #116	@ 0x74
 800e0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0da:	89ab      	ldrh	r3, [r5, #12]
 800e0dc:	0598      	lsls	r0, r3, #22
 800e0de:	d4f7      	bmi.n	800e0d0 <_vfiprintf_r+0x44>
 800e0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e2:	f7ff feaf 	bl	800de44 <__retarget_lock_release_recursive>
 800e0e6:	e7f3      	b.n	800e0d0 <_vfiprintf_r+0x44>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ec:	2320      	movs	r3, #32
 800e0ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0f6:	2330      	movs	r3, #48	@ 0x30
 800e0f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2a8 <_vfiprintf_r+0x21c>
 800e0fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e100:	f04f 0901 	mov.w	r9, #1
 800e104:	4623      	mov	r3, r4
 800e106:	469a      	mov	sl, r3
 800e108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e10c:	b10a      	cbz	r2, 800e112 <_vfiprintf_r+0x86>
 800e10e:	2a25      	cmp	r2, #37	@ 0x25
 800e110:	d1f9      	bne.n	800e106 <_vfiprintf_r+0x7a>
 800e112:	ebba 0b04 	subs.w	fp, sl, r4
 800e116:	d00b      	beq.n	800e130 <_vfiprintf_r+0xa4>
 800e118:	465b      	mov	r3, fp
 800e11a:	4622      	mov	r2, r4
 800e11c:	4629      	mov	r1, r5
 800e11e:	4630      	mov	r0, r6
 800e120:	f7ff ffa1 	bl	800e066 <__sfputs_r>
 800e124:	3001      	adds	r0, #1
 800e126:	f000 80a7 	beq.w	800e278 <_vfiprintf_r+0x1ec>
 800e12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e12c:	445a      	add	r2, fp
 800e12e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e130:	f89a 3000 	ldrb.w	r3, [sl]
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 809f 	beq.w	800e278 <_vfiprintf_r+0x1ec>
 800e13a:	2300      	movs	r3, #0
 800e13c:	f04f 32ff 	mov.w	r2, #4294967295
 800e140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e144:	f10a 0a01 	add.w	sl, sl, #1
 800e148:	9304      	str	r3, [sp, #16]
 800e14a:	9307      	str	r3, [sp, #28]
 800e14c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e150:	931a      	str	r3, [sp, #104]	@ 0x68
 800e152:	4654      	mov	r4, sl
 800e154:	2205      	movs	r2, #5
 800e156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e15a:	4853      	ldr	r0, [pc, #332]	@ (800e2a8 <_vfiprintf_r+0x21c>)
 800e15c:	f7f2 f810 	bl	8000180 <memchr>
 800e160:	9a04      	ldr	r2, [sp, #16]
 800e162:	b9d8      	cbnz	r0, 800e19c <_vfiprintf_r+0x110>
 800e164:	06d1      	lsls	r1, r2, #27
 800e166:	bf44      	itt	mi
 800e168:	2320      	movmi	r3, #32
 800e16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e16e:	0713      	lsls	r3, r2, #28
 800e170:	bf44      	itt	mi
 800e172:	232b      	movmi	r3, #43	@ 0x2b
 800e174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e178:	f89a 3000 	ldrb.w	r3, [sl]
 800e17c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e17e:	d015      	beq.n	800e1ac <_vfiprintf_r+0x120>
 800e180:	9a07      	ldr	r2, [sp, #28]
 800e182:	4654      	mov	r4, sl
 800e184:	2000      	movs	r0, #0
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	4621      	mov	r1, r4
 800e18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e190:	3b30      	subs	r3, #48	@ 0x30
 800e192:	2b09      	cmp	r3, #9
 800e194:	d94b      	bls.n	800e22e <_vfiprintf_r+0x1a2>
 800e196:	b1b0      	cbz	r0, 800e1c6 <_vfiprintf_r+0x13a>
 800e198:	9207      	str	r2, [sp, #28]
 800e19a:	e014      	b.n	800e1c6 <_vfiprintf_r+0x13a>
 800e19c:	eba0 0308 	sub.w	r3, r0, r8
 800e1a0:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	9304      	str	r3, [sp, #16]
 800e1a8:	46a2      	mov	sl, r4
 800e1aa:	e7d2      	b.n	800e152 <_vfiprintf_r+0xc6>
 800e1ac:	9b03      	ldr	r3, [sp, #12]
 800e1ae:	1d19      	adds	r1, r3, #4
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	9103      	str	r1, [sp, #12]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	bfbb      	ittet	lt
 800e1b8:	425b      	neglt	r3, r3
 800e1ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e1be:	9307      	strge	r3, [sp, #28]
 800e1c0:	9307      	strlt	r3, [sp, #28]
 800e1c2:	bfb8      	it	lt
 800e1c4:	9204      	strlt	r2, [sp, #16]
 800e1c6:	7823      	ldrb	r3, [r4, #0]
 800e1c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1ca:	d10a      	bne.n	800e1e2 <_vfiprintf_r+0x156>
 800e1cc:	7863      	ldrb	r3, [r4, #1]
 800e1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d0:	d132      	bne.n	800e238 <_vfiprintf_r+0x1ac>
 800e1d2:	9b03      	ldr	r3, [sp, #12]
 800e1d4:	1d1a      	adds	r2, r3, #4
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	9203      	str	r2, [sp, #12]
 800e1da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1de:	3402      	adds	r4, #2
 800e1e0:	9305      	str	r3, [sp, #20]
 800e1e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2b8 <_vfiprintf_r+0x22c>
 800e1e6:	7821      	ldrb	r1, [r4, #0]
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	f7f1 ffc8 	bl	8000180 <memchr>
 800e1f0:	b138      	cbz	r0, 800e202 <_vfiprintf_r+0x176>
 800e1f2:	9b04      	ldr	r3, [sp, #16]
 800e1f4:	eba0 000a 	sub.w	r0, r0, sl
 800e1f8:	2240      	movs	r2, #64	@ 0x40
 800e1fa:	4082      	lsls	r2, r0
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	3401      	adds	r4, #1
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e206:	4829      	ldr	r0, [pc, #164]	@ (800e2ac <_vfiprintf_r+0x220>)
 800e208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e20c:	2206      	movs	r2, #6
 800e20e:	f7f1 ffb7 	bl	8000180 <memchr>
 800e212:	2800      	cmp	r0, #0
 800e214:	d03f      	beq.n	800e296 <_vfiprintf_r+0x20a>
 800e216:	4b26      	ldr	r3, [pc, #152]	@ (800e2b0 <_vfiprintf_r+0x224>)
 800e218:	bb1b      	cbnz	r3, 800e262 <_vfiprintf_r+0x1d6>
 800e21a:	9b03      	ldr	r3, [sp, #12]
 800e21c:	3307      	adds	r3, #7
 800e21e:	f023 0307 	bic.w	r3, r3, #7
 800e222:	3308      	adds	r3, #8
 800e224:	9303      	str	r3, [sp, #12]
 800e226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e228:	443b      	add	r3, r7
 800e22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e22c:	e76a      	b.n	800e104 <_vfiprintf_r+0x78>
 800e22e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e232:	460c      	mov	r4, r1
 800e234:	2001      	movs	r0, #1
 800e236:	e7a8      	b.n	800e18a <_vfiprintf_r+0xfe>
 800e238:	2300      	movs	r3, #0
 800e23a:	3401      	adds	r4, #1
 800e23c:	9305      	str	r3, [sp, #20]
 800e23e:	4619      	mov	r1, r3
 800e240:	f04f 0c0a 	mov.w	ip, #10
 800e244:	4620      	mov	r0, r4
 800e246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e24a:	3a30      	subs	r2, #48	@ 0x30
 800e24c:	2a09      	cmp	r2, #9
 800e24e:	d903      	bls.n	800e258 <_vfiprintf_r+0x1cc>
 800e250:	2b00      	cmp	r3, #0
 800e252:	d0c6      	beq.n	800e1e2 <_vfiprintf_r+0x156>
 800e254:	9105      	str	r1, [sp, #20]
 800e256:	e7c4      	b.n	800e1e2 <_vfiprintf_r+0x156>
 800e258:	fb0c 2101 	mla	r1, ip, r1, r2
 800e25c:	4604      	mov	r4, r0
 800e25e:	2301      	movs	r3, #1
 800e260:	e7f0      	b.n	800e244 <_vfiprintf_r+0x1b8>
 800e262:	ab03      	add	r3, sp, #12
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	462a      	mov	r2, r5
 800e268:	4b12      	ldr	r3, [pc, #72]	@ (800e2b4 <_vfiprintf_r+0x228>)
 800e26a:	a904      	add	r1, sp, #16
 800e26c:	4630      	mov	r0, r6
 800e26e:	f3af 8000 	nop.w
 800e272:	4607      	mov	r7, r0
 800e274:	1c78      	adds	r0, r7, #1
 800e276:	d1d6      	bne.n	800e226 <_vfiprintf_r+0x19a>
 800e278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e27a:	07d9      	lsls	r1, r3, #31
 800e27c:	d405      	bmi.n	800e28a <_vfiprintf_r+0x1fe>
 800e27e:	89ab      	ldrh	r3, [r5, #12]
 800e280:	059a      	lsls	r2, r3, #22
 800e282:	d402      	bmi.n	800e28a <_vfiprintf_r+0x1fe>
 800e284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e286:	f7ff fddd 	bl	800de44 <__retarget_lock_release_recursive>
 800e28a:	89ab      	ldrh	r3, [r5, #12]
 800e28c:	065b      	lsls	r3, r3, #25
 800e28e:	f53f af1f 	bmi.w	800e0d0 <_vfiprintf_r+0x44>
 800e292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e294:	e71e      	b.n	800e0d4 <_vfiprintf_r+0x48>
 800e296:	ab03      	add	r3, sp, #12
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	462a      	mov	r2, r5
 800e29c:	4b05      	ldr	r3, [pc, #20]	@ (800e2b4 <_vfiprintf_r+0x228>)
 800e29e:	a904      	add	r1, sp, #16
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f000 f879 	bl	800e398 <_printf_i>
 800e2a6:	e7e4      	b.n	800e272 <_vfiprintf_r+0x1e6>
 800e2a8:	0800eb78 	.word	0x0800eb78
 800e2ac:	0800eb82 	.word	0x0800eb82
 800e2b0:	00000000 	.word	0x00000000
 800e2b4:	0800e067 	.word	0x0800e067
 800e2b8:	0800eb7e 	.word	0x0800eb7e

0800e2bc <_printf_common>:
 800e2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c0:	4616      	mov	r6, r2
 800e2c2:	4698      	mov	r8, r3
 800e2c4:	688a      	ldr	r2, [r1, #8]
 800e2c6:	690b      	ldr	r3, [r1, #16]
 800e2c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	bfb8      	it	lt
 800e2d0:	4613      	movlt	r3, r2
 800e2d2:	6033      	str	r3, [r6, #0]
 800e2d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2d8:	4607      	mov	r7, r0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	b10a      	cbz	r2, 800e2e2 <_printf_common+0x26>
 800e2de:	3301      	adds	r3, #1
 800e2e0:	6033      	str	r3, [r6, #0]
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	0699      	lsls	r1, r3, #26
 800e2e6:	bf42      	ittt	mi
 800e2e8:	6833      	ldrmi	r3, [r6, #0]
 800e2ea:	3302      	addmi	r3, #2
 800e2ec:	6033      	strmi	r3, [r6, #0]
 800e2ee:	6825      	ldr	r5, [r4, #0]
 800e2f0:	f015 0506 	ands.w	r5, r5, #6
 800e2f4:	d106      	bne.n	800e304 <_printf_common+0x48>
 800e2f6:	f104 0a19 	add.w	sl, r4, #25
 800e2fa:	68e3      	ldr	r3, [r4, #12]
 800e2fc:	6832      	ldr	r2, [r6, #0]
 800e2fe:	1a9b      	subs	r3, r3, r2
 800e300:	42ab      	cmp	r3, r5
 800e302:	dc26      	bgt.n	800e352 <_printf_common+0x96>
 800e304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e308:	6822      	ldr	r2, [r4, #0]
 800e30a:	3b00      	subs	r3, #0
 800e30c:	bf18      	it	ne
 800e30e:	2301      	movne	r3, #1
 800e310:	0692      	lsls	r2, r2, #26
 800e312:	d42b      	bmi.n	800e36c <_printf_common+0xb0>
 800e314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e318:	4641      	mov	r1, r8
 800e31a:	4638      	mov	r0, r7
 800e31c:	47c8      	blx	r9
 800e31e:	3001      	adds	r0, #1
 800e320:	d01e      	beq.n	800e360 <_printf_common+0xa4>
 800e322:	6823      	ldr	r3, [r4, #0]
 800e324:	6922      	ldr	r2, [r4, #16]
 800e326:	f003 0306 	and.w	r3, r3, #6
 800e32a:	2b04      	cmp	r3, #4
 800e32c:	bf02      	ittt	eq
 800e32e:	68e5      	ldreq	r5, [r4, #12]
 800e330:	6833      	ldreq	r3, [r6, #0]
 800e332:	1aed      	subeq	r5, r5, r3
 800e334:	68a3      	ldr	r3, [r4, #8]
 800e336:	bf0c      	ite	eq
 800e338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e33c:	2500      	movne	r5, #0
 800e33e:	4293      	cmp	r3, r2
 800e340:	bfc4      	itt	gt
 800e342:	1a9b      	subgt	r3, r3, r2
 800e344:	18ed      	addgt	r5, r5, r3
 800e346:	2600      	movs	r6, #0
 800e348:	341a      	adds	r4, #26
 800e34a:	42b5      	cmp	r5, r6
 800e34c:	d11a      	bne.n	800e384 <_printf_common+0xc8>
 800e34e:	2000      	movs	r0, #0
 800e350:	e008      	b.n	800e364 <_printf_common+0xa8>
 800e352:	2301      	movs	r3, #1
 800e354:	4652      	mov	r2, sl
 800e356:	4641      	mov	r1, r8
 800e358:	4638      	mov	r0, r7
 800e35a:	47c8      	blx	r9
 800e35c:	3001      	adds	r0, #1
 800e35e:	d103      	bne.n	800e368 <_printf_common+0xac>
 800e360:	f04f 30ff 	mov.w	r0, #4294967295
 800e364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e368:	3501      	adds	r5, #1
 800e36a:	e7c6      	b.n	800e2fa <_printf_common+0x3e>
 800e36c:	18e1      	adds	r1, r4, r3
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	2030      	movs	r0, #48	@ 0x30
 800e372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e376:	4422      	add	r2, r4
 800e378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e37c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e380:	3302      	adds	r3, #2
 800e382:	e7c7      	b.n	800e314 <_printf_common+0x58>
 800e384:	2301      	movs	r3, #1
 800e386:	4622      	mov	r2, r4
 800e388:	4641      	mov	r1, r8
 800e38a:	4638      	mov	r0, r7
 800e38c:	47c8      	blx	r9
 800e38e:	3001      	adds	r0, #1
 800e390:	d0e6      	beq.n	800e360 <_printf_common+0xa4>
 800e392:	3601      	adds	r6, #1
 800e394:	e7d9      	b.n	800e34a <_printf_common+0x8e>
	...

0800e398 <_printf_i>:
 800e398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e39c:	7e0f      	ldrb	r7, [r1, #24]
 800e39e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3a0:	2f78      	cmp	r7, #120	@ 0x78
 800e3a2:	4691      	mov	r9, r2
 800e3a4:	4680      	mov	r8, r0
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	469a      	mov	sl, r3
 800e3aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3ae:	d807      	bhi.n	800e3c0 <_printf_i+0x28>
 800e3b0:	2f62      	cmp	r7, #98	@ 0x62
 800e3b2:	d80a      	bhi.n	800e3ca <_printf_i+0x32>
 800e3b4:	2f00      	cmp	r7, #0
 800e3b6:	f000 80d2 	beq.w	800e55e <_printf_i+0x1c6>
 800e3ba:	2f58      	cmp	r7, #88	@ 0x58
 800e3bc:	f000 80b9 	beq.w	800e532 <_printf_i+0x19a>
 800e3c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3c8:	e03a      	b.n	800e440 <_printf_i+0xa8>
 800e3ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3ce:	2b15      	cmp	r3, #21
 800e3d0:	d8f6      	bhi.n	800e3c0 <_printf_i+0x28>
 800e3d2:	a101      	add	r1, pc, #4	@ (adr r1, 800e3d8 <_printf_i+0x40>)
 800e3d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3d8:	0800e431 	.word	0x0800e431
 800e3dc:	0800e445 	.word	0x0800e445
 800e3e0:	0800e3c1 	.word	0x0800e3c1
 800e3e4:	0800e3c1 	.word	0x0800e3c1
 800e3e8:	0800e3c1 	.word	0x0800e3c1
 800e3ec:	0800e3c1 	.word	0x0800e3c1
 800e3f0:	0800e445 	.word	0x0800e445
 800e3f4:	0800e3c1 	.word	0x0800e3c1
 800e3f8:	0800e3c1 	.word	0x0800e3c1
 800e3fc:	0800e3c1 	.word	0x0800e3c1
 800e400:	0800e3c1 	.word	0x0800e3c1
 800e404:	0800e545 	.word	0x0800e545
 800e408:	0800e46f 	.word	0x0800e46f
 800e40c:	0800e4ff 	.word	0x0800e4ff
 800e410:	0800e3c1 	.word	0x0800e3c1
 800e414:	0800e3c1 	.word	0x0800e3c1
 800e418:	0800e567 	.word	0x0800e567
 800e41c:	0800e3c1 	.word	0x0800e3c1
 800e420:	0800e46f 	.word	0x0800e46f
 800e424:	0800e3c1 	.word	0x0800e3c1
 800e428:	0800e3c1 	.word	0x0800e3c1
 800e42c:	0800e507 	.word	0x0800e507
 800e430:	6833      	ldr	r3, [r6, #0]
 800e432:	1d1a      	adds	r2, r3, #4
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6032      	str	r2, [r6, #0]
 800e438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e43c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e440:	2301      	movs	r3, #1
 800e442:	e09d      	b.n	800e580 <_printf_i+0x1e8>
 800e444:	6833      	ldr	r3, [r6, #0]
 800e446:	6820      	ldr	r0, [r4, #0]
 800e448:	1d19      	adds	r1, r3, #4
 800e44a:	6031      	str	r1, [r6, #0]
 800e44c:	0606      	lsls	r6, r0, #24
 800e44e:	d501      	bpl.n	800e454 <_printf_i+0xbc>
 800e450:	681d      	ldr	r5, [r3, #0]
 800e452:	e003      	b.n	800e45c <_printf_i+0xc4>
 800e454:	0645      	lsls	r5, r0, #25
 800e456:	d5fb      	bpl.n	800e450 <_printf_i+0xb8>
 800e458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e45c:	2d00      	cmp	r5, #0
 800e45e:	da03      	bge.n	800e468 <_printf_i+0xd0>
 800e460:	232d      	movs	r3, #45	@ 0x2d
 800e462:	426d      	negs	r5, r5
 800e464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e468:	4859      	ldr	r0, [pc, #356]	@ (800e5d0 <_printf_i+0x238>)
 800e46a:	230a      	movs	r3, #10
 800e46c:	e011      	b.n	800e492 <_printf_i+0xfa>
 800e46e:	6821      	ldr	r1, [r4, #0]
 800e470:	6833      	ldr	r3, [r6, #0]
 800e472:	0608      	lsls	r0, r1, #24
 800e474:	f853 5b04 	ldr.w	r5, [r3], #4
 800e478:	d402      	bmi.n	800e480 <_printf_i+0xe8>
 800e47a:	0649      	lsls	r1, r1, #25
 800e47c:	bf48      	it	mi
 800e47e:	b2ad      	uxthmi	r5, r5
 800e480:	2f6f      	cmp	r7, #111	@ 0x6f
 800e482:	4853      	ldr	r0, [pc, #332]	@ (800e5d0 <_printf_i+0x238>)
 800e484:	6033      	str	r3, [r6, #0]
 800e486:	bf14      	ite	ne
 800e488:	230a      	movne	r3, #10
 800e48a:	2308      	moveq	r3, #8
 800e48c:	2100      	movs	r1, #0
 800e48e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e492:	6866      	ldr	r6, [r4, #4]
 800e494:	60a6      	str	r6, [r4, #8]
 800e496:	2e00      	cmp	r6, #0
 800e498:	bfa2      	ittt	ge
 800e49a:	6821      	ldrge	r1, [r4, #0]
 800e49c:	f021 0104 	bicge.w	r1, r1, #4
 800e4a0:	6021      	strge	r1, [r4, #0]
 800e4a2:	b90d      	cbnz	r5, 800e4a8 <_printf_i+0x110>
 800e4a4:	2e00      	cmp	r6, #0
 800e4a6:	d04b      	beq.n	800e540 <_printf_i+0x1a8>
 800e4a8:	4616      	mov	r6, r2
 800e4aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4ae:	fb03 5711 	mls	r7, r3, r1, r5
 800e4b2:	5dc7      	ldrb	r7, [r0, r7]
 800e4b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4b8:	462f      	mov	r7, r5
 800e4ba:	42bb      	cmp	r3, r7
 800e4bc:	460d      	mov	r5, r1
 800e4be:	d9f4      	bls.n	800e4aa <_printf_i+0x112>
 800e4c0:	2b08      	cmp	r3, #8
 800e4c2:	d10b      	bne.n	800e4dc <_printf_i+0x144>
 800e4c4:	6823      	ldr	r3, [r4, #0]
 800e4c6:	07df      	lsls	r7, r3, #31
 800e4c8:	d508      	bpl.n	800e4dc <_printf_i+0x144>
 800e4ca:	6923      	ldr	r3, [r4, #16]
 800e4cc:	6861      	ldr	r1, [r4, #4]
 800e4ce:	4299      	cmp	r1, r3
 800e4d0:	bfde      	ittt	le
 800e4d2:	2330      	movle	r3, #48	@ 0x30
 800e4d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4dc:	1b92      	subs	r2, r2, r6
 800e4de:	6122      	str	r2, [r4, #16]
 800e4e0:	f8cd a000 	str.w	sl, [sp]
 800e4e4:	464b      	mov	r3, r9
 800e4e6:	aa03      	add	r2, sp, #12
 800e4e8:	4621      	mov	r1, r4
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	f7ff fee6 	bl	800e2bc <_printf_common>
 800e4f0:	3001      	adds	r0, #1
 800e4f2:	d14a      	bne.n	800e58a <_printf_i+0x1f2>
 800e4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f8:	b004      	add	sp, #16
 800e4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	f043 0320 	orr.w	r3, r3, #32
 800e504:	6023      	str	r3, [r4, #0]
 800e506:	4833      	ldr	r0, [pc, #204]	@ (800e5d4 <_printf_i+0x23c>)
 800e508:	2778      	movs	r7, #120	@ 0x78
 800e50a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	6831      	ldr	r1, [r6, #0]
 800e512:	061f      	lsls	r7, r3, #24
 800e514:	f851 5b04 	ldr.w	r5, [r1], #4
 800e518:	d402      	bmi.n	800e520 <_printf_i+0x188>
 800e51a:	065f      	lsls	r7, r3, #25
 800e51c:	bf48      	it	mi
 800e51e:	b2ad      	uxthmi	r5, r5
 800e520:	6031      	str	r1, [r6, #0]
 800e522:	07d9      	lsls	r1, r3, #31
 800e524:	bf44      	itt	mi
 800e526:	f043 0320 	orrmi.w	r3, r3, #32
 800e52a:	6023      	strmi	r3, [r4, #0]
 800e52c:	b11d      	cbz	r5, 800e536 <_printf_i+0x19e>
 800e52e:	2310      	movs	r3, #16
 800e530:	e7ac      	b.n	800e48c <_printf_i+0xf4>
 800e532:	4827      	ldr	r0, [pc, #156]	@ (800e5d0 <_printf_i+0x238>)
 800e534:	e7e9      	b.n	800e50a <_printf_i+0x172>
 800e536:	6823      	ldr	r3, [r4, #0]
 800e538:	f023 0320 	bic.w	r3, r3, #32
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	e7f6      	b.n	800e52e <_printf_i+0x196>
 800e540:	4616      	mov	r6, r2
 800e542:	e7bd      	b.n	800e4c0 <_printf_i+0x128>
 800e544:	6833      	ldr	r3, [r6, #0]
 800e546:	6825      	ldr	r5, [r4, #0]
 800e548:	6961      	ldr	r1, [r4, #20]
 800e54a:	1d18      	adds	r0, r3, #4
 800e54c:	6030      	str	r0, [r6, #0]
 800e54e:	062e      	lsls	r6, r5, #24
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	d501      	bpl.n	800e558 <_printf_i+0x1c0>
 800e554:	6019      	str	r1, [r3, #0]
 800e556:	e002      	b.n	800e55e <_printf_i+0x1c6>
 800e558:	0668      	lsls	r0, r5, #25
 800e55a:	d5fb      	bpl.n	800e554 <_printf_i+0x1bc>
 800e55c:	8019      	strh	r1, [r3, #0]
 800e55e:	2300      	movs	r3, #0
 800e560:	6123      	str	r3, [r4, #16]
 800e562:	4616      	mov	r6, r2
 800e564:	e7bc      	b.n	800e4e0 <_printf_i+0x148>
 800e566:	6833      	ldr	r3, [r6, #0]
 800e568:	1d1a      	adds	r2, r3, #4
 800e56a:	6032      	str	r2, [r6, #0]
 800e56c:	681e      	ldr	r6, [r3, #0]
 800e56e:	6862      	ldr	r2, [r4, #4]
 800e570:	2100      	movs	r1, #0
 800e572:	4630      	mov	r0, r6
 800e574:	f7f1 fe04 	bl	8000180 <memchr>
 800e578:	b108      	cbz	r0, 800e57e <_printf_i+0x1e6>
 800e57a:	1b80      	subs	r0, r0, r6
 800e57c:	6060      	str	r0, [r4, #4]
 800e57e:	6863      	ldr	r3, [r4, #4]
 800e580:	6123      	str	r3, [r4, #16]
 800e582:	2300      	movs	r3, #0
 800e584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e588:	e7aa      	b.n	800e4e0 <_printf_i+0x148>
 800e58a:	6923      	ldr	r3, [r4, #16]
 800e58c:	4632      	mov	r2, r6
 800e58e:	4649      	mov	r1, r9
 800e590:	4640      	mov	r0, r8
 800e592:	47d0      	blx	sl
 800e594:	3001      	adds	r0, #1
 800e596:	d0ad      	beq.n	800e4f4 <_printf_i+0x15c>
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	079b      	lsls	r3, r3, #30
 800e59c:	d413      	bmi.n	800e5c6 <_printf_i+0x22e>
 800e59e:	68e0      	ldr	r0, [r4, #12]
 800e5a0:	9b03      	ldr	r3, [sp, #12]
 800e5a2:	4298      	cmp	r0, r3
 800e5a4:	bfb8      	it	lt
 800e5a6:	4618      	movlt	r0, r3
 800e5a8:	e7a6      	b.n	800e4f8 <_printf_i+0x160>
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4632      	mov	r2, r6
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	4640      	mov	r0, r8
 800e5b2:	47d0      	blx	sl
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	d09d      	beq.n	800e4f4 <_printf_i+0x15c>
 800e5b8:	3501      	adds	r5, #1
 800e5ba:	68e3      	ldr	r3, [r4, #12]
 800e5bc:	9903      	ldr	r1, [sp, #12]
 800e5be:	1a5b      	subs	r3, r3, r1
 800e5c0:	42ab      	cmp	r3, r5
 800e5c2:	dcf2      	bgt.n	800e5aa <_printf_i+0x212>
 800e5c4:	e7eb      	b.n	800e59e <_printf_i+0x206>
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	f104 0619 	add.w	r6, r4, #25
 800e5cc:	e7f5      	b.n	800e5ba <_printf_i+0x222>
 800e5ce:	bf00      	nop
 800e5d0:	0800eb89 	.word	0x0800eb89
 800e5d4:	0800eb9a 	.word	0x0800eb9a

0800e5d8 <__sflush_r>:
 800e5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e0:	0716      	lsls	r6, r2, #28
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	460c      	mov	r4, r1
 800e5e6:	d454      	bmi.n	800e692 <__sflush_r+0xba>
 800e5e8:	684b      	ldr	r3, [r1, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	dc02      	bgt.n	800e5f4 <__sflush_r+0x1c>
 800e5ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dd48      	ble.n	800e686 <__sflush_r+0xae>
 800e5f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5f6:	2e00      	cmp	r6, #0
 800e5f8:	d045      	beq.n	800e686 <__sflush_r+0xae>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e600:	682f      	ldr	r7, [r5, #0]
 800e602:	6a21      	ldr	r1, [r4, #32]
 800e604:	602b      	str	r3, [r5, #0]
 800e606:	d030      	beq.n	800e66a <__sflush_r+0x92>
 800e608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e60a:	89a3      	ldrh	r3, [r4, #12]
 800e60c:	0759      	lsls	r1, r3, #29
 800e60e:	d505      	bpl.n	800e61c <__sflush_r+0x44>
 800e610:	6863      	ldr	r3, [r4, #4]
 800e612:	1ad2      	subs	r2, r2, r3
 800e614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e616:	b10b      	cbz	r3, 800e61c <__sflush_r+0x44>
 800e618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e61a:	1ad2      	subs	r2, r2, r3
 800e61c:	2300      	movs	r3, #0
 800e61e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e620:	6a21      	ldr	r1, [r4, #32]
 800e622:	4628      	mov	r0, r5
 800e624:	47b0      	blx	r6
 800e626:	1c43      	adds	r3, r0, #1
 800e628:	89a3      	ldrh	r3, [r4, #12]
 800e62a:	d106      	bne.n	800e63a <__sflush_r+0x62>
 800e62c:	6829      	ldr	r1, [r5, #0]
 800e62e:	291d      	cmp	r1, #29
 800e630:	d82b      	bhi.n	800e68a <__sflush_r+0xb2>
 800e632:	4a2a      	ldr	r2, [pc, #168]	@ (800e6dc <__sflush_r+0x104>)
 800e634:	410a      	asrs	r2, r1
 800e636:	07d6      	lsls	r6, r2, #31
 800e638:	d427      	bmi.n	800e68a <__sflush_r+0xb2>
 800e63a:	2200      	movs	r2, #0
 800e63c:	6062      	str	r2, [r4, #4]
 800e63e:	04d9      	lsls	r1, r3, #19
 800e640:	6922      	ldr	r2, [r4, #16]
 800e642:	6022      	str	r2, [r4, #0]
 800e644:	d504      	bpl.n	800e650 <__sflush_r+0x78>
 800e646:	1c42      	adds	r2, r0, #1
 800e648:	d101      	bne.n	800e64e <__sflush_r+0x76>
 800e64a:	682b      	ldr	r3, [r5, #0]
 800e64c:	b903      	cbnz	r3, 800e650 <__sflush_r+0x78>
 800e64e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e652:	602f      	str	r7, [r5, #0]
 800e654:	b1b9      	cbz	r1, 800e686 <__sflush_r+0xae>
 800e656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e65a:	4299      	cmp	r1, r3
 800e65c:	d002      	beq.n	800e664 <__sflush_r+0x8c>
 800e65e:	4628      	mov	r0, r5
 800e660:	f7ff fbf2 	bl	800de48 <_free_r>
 800e664:	2300      	movs	r3, #0
 800e666:	6363      	str	r3, [r4, #52]	@ 0x34
 800e668:	e00d      	b.n	800e686 <__sflush_r+0xae>
 800e66a:	2301      	movs	r3, #1
 800e66c:	4628      	mov	r0, r5
 800e66e:	47b0      	blx	r6
 800e670:	4602      	mov	r2, r0
 800e672:	1c50      	adds	r0, r2, #1
 800e674:	d1c9      	bne.n	800e60a <__sflush_r+0x32>
 800e676:	682b      	ldr	r3, [r5, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d0c6      	beq.n	800e60a <__sflush_r+0x32>
 800e67c:	2b1d      	cmp	r3, #29
 800e67e:	d001      	beq.n	800e684 <__sflush_r+0xac>
 800e680:	2b16      	cmp	r3, #22
 800e682:	d11e      	bne.n	800e6c2 <__sflush_r+0xea>
 800e684:	602f      	str	r7, [r5, #0]
 800e686:	2000      	movs	r0, #0
 800e688:	e022      	b.n	800e6d0 <__sflush_r+0xf8>
 800e68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e68e:	b21b      	sxth	r3, r3
 800e690:	e01b      	b.n	800e6ca <__sflush_r+0xf2>
 800e692:	690f      	ldr	r7, [r1, #16]
 800e694:	2f00      	cmp	r7, #0
 800e696:	d0f6      	beq.n	800e686 <__sflush_r+0xae>
 800e698:	0793      	lsls	r3, r2, #30
 800e69a:	680e      	ldr	r6, [r1, #0]
 800e69c:	bf08      	it	eq
 800e69e:	694b      	ldreq	r3, [r1, #20]
 800e6a0:	600f      	str	r7, [r1, #0]
 800e6a2:	bf18      	it	ne
 800e6a4:	2300      	movne	r3, #0
 800e6a6:	eba6 0807 	sub.w	r8, r6, r7
 800e6aa:	608b      	str	r3, [r1, #8]
 800e6ac:	f1b8 0f00 	cmp.w	r8, #0
 800e6b0:	dde9      	ble.n	800e686 <__sflush_r+0xae>
 800e6b2:	6a21      	ldr	r1, [r4, #32]
 800e6b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e6b6:	4643      	mov	r3, r8
 800e6b8:	463a      	mov	r2, r7
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b0      	blx	r6
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	dc08      	bgt.n	800e6d4 <__sflush_r+0xfc>
 800e6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6ca:	81a3      	strh	r3, [r4, #12]
 800e6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d4:	4407      	add	r7, r0
 800e6d6:	eba8 0800 	sub.w	r8, r8, r0
 800e6da:	e7e7      	b.n	800e6ac <__sflush_r+0xd4>
 800e6dc:	dfbffffe 	.word	0xdfbffffe

0800e6e0 <_fflush_r>:
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	690b      	ldr	r3, [r1, #16]
 800e6e4:	4605      	mov	r5, r0
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	b913      	cbnz	r3, 800e6f0 <_fflush_r+0x10>
 800e6ea:	2500      	movs	r5, #0
 800e6ec:	4628      	mov	r0, r5
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	b118      	cbz	r0, 800e6fa <_fflush_r+0x1a>
 800e6f2:	6a03      	ldr	r3, [r0, #32]
 800e6f4:	b90b      	cbnz	r3, 800e6fa <_fflush_r+0x1a>
 800e6f6:	f7ff fa97 	bl	800dc28 <__sinit>
 800e6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d0f3      	beq.n	800e6ea <_fflush_r+0xa>
 800e702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e704:	07d0      	lsls	r0, r2, #31
 800e706:	d404      	bmi.n	800e712 <_fflush_r+0x32>
 800e708:	0599      	lsls	r1, r3, #22
 800e70a:	d402      	bmi.n	800e712 <_fflush_r+0x32>
 800e70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e70e:	f7ff fb98 	bl	800de42 <__retarget_lock_acquire_recursive>
 800e712:	4628      	mov	r0, r5
 800e714:	4621      	mov	r1, r4
 800e716:	f7ff ff5f 	bl	800e5d8 <__sflush_r>
 800e71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e71c:	07da      	lsls	r2, r3, #31
 800e71e:	4605      	mov	r5, r0
 800e720:	d4e4      	bmi.n	800e6ec <_fflush_r+0xc>
 800e722:	89a3      	ldrh	r3, [r4, #12]
 800e724:	059b      	lsls	r3, r3, #22
 800e726:	d4e1      	bmi.n	800e6ec <_fflush_r+0xc>
 800e728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e72a:	f7ff fb8b 	bl	800de44 <__retarget_lock_release_recursive>
 800e72e:	e7dd      	b.n	800e6ec <_fflush_r+0xc>

0800e730 <_putc_r>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	460d      	mov	r5, r1
 800e734:	4614      	mov	r4, r2
 800e736:	4606      	mov	r6, r0
 800e738:	b118      	cbz	r0, 800e742 <_putc_r+0x12>
 800e73a:	6a03      	ldr	r3, [r0, #32]
 800e73c:	b90b      	cbnz	r3, 800e742 <_putc_r+0x12>
 800e73e:	f7ff fa73 	bl	800dc28 <__sinit>
 800e742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e744:	07d8      	lsls	r0, r3, #31
 800e746:	d405      	bmi.n	800e754 <_putc_r+0x24>
 800e748:	89a3      	ldrh	r3, [r4, #12]
 800e74a:	0599      	lsls	r1, r3, #22
 800e74c:	d402      	bmi.n	800e754 <_putc_r+0x24>
 800e74e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e750:	f7ff fb77 	bl	800de42 <__retarget_lock_acquire_recursive>
 800e754:	68a3      	ldr	r3, [r4, #8]
 800e756:	3b01      	subs	r3, #1
 800e758:	2b00      	cmp	r3, #0
 800e75a:	60a3      	str	r3, [r4, #8]
 800e75c:	da05      	bge.n	800e76a <_putc_r+0x3a>
 800e75e:	69a2      	ldr	r2, [r4, #24]
 800e760:	4293      	cmp	r3, r2
 800e762:	db12      	blt.n	800e78a <_putc_r+0x5a>
 800e764:	b2eb      	uxtb	r3, r5
 800e766:	2b0a      	cmp	r3, #10
 800e768:	d00f      	beq.n	800e78a <_putc_r+0x5a>
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	6022      	str	r2, [r4, #0]
 800e770:	701d      	strb	r5, [r3, #0]
 800e772:	b2ed      	uxtb	r5, r5
 800e774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e776:	07da      	lsls	r2, r3, #31
 800e778:	d405      	bmi.n	800e786 <_putc_r+0x56>
 800e77a:	89a3      	ldrh	r3, [r4, #12]
 800e77c:	059b      	lsls	r3, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_putc_r+0x56>
 800e780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e782:	f7ff fb5f 	bl	800de44 <__retarget_lock_release_recursive>
 800e786:	4628      	mov	r0, r5
 800e788:	bd70      	pop	{r4, r5, r6, pc}
 800e78a:	4629      	mov	r1, r5
 800e78c:	4622      	mov	r2, r4
 800e78e:	4630      	mov	r0, r6
 800e790:	f000 f802 	bl	800e798 <__swbuf_r>
 800e794:	4605      	mov	r5, r0
 800e796:	e7ed      	b.n	800e774 <_putc_r+0x44>

0800e798 <__swbuf_r>:
 800e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79a:	460e      	mov	r6, r1
 800e79c:	4614      	mov	r4, r2
 800e79e:	4605      	mov	r5, r0
 800e7a0:	b118      	cbz	r0, 800e7aa <__swbuf_r+0x12>
 800e7a2:	6a03      	ldr	r3, [r0, #32]
 800e7a4:	b90b      	cbnz	r3, 800e7aa <__swbuf_r+0x12>
 800e7a6:	f7ff fa3f 	bl	800dc28 <__sinit>
 800e7aa:	69a3      	ldr	r3, [r4, #24]
 800e7ac:	60a3      	str	r3, [r4, #8]
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	071a      	lsls	r2, r3, #28
 800e7b2:	d501      	bpl.n	800e7b8 <__swbuf_r+0x20>
 800e7b4:	6923      	ldr	r3, [r4, #16]
 800e7b6:	b943      	cbnz	r3, 800e7ca <__swbuf_r+0x32>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f000 f82a 	bl	800e814 <__swsetup_r>
 800e7c0:	b118      	cbz	r0, 800e7ca <__swbuf_r+0x32>
 800e7c2:	f04f 37ff 	mov.w	r7, #4294967295
 800e7c6:	4638      	mov	r0, r7
 800e7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	1a98      	subs	r0, r3, r2
 800e7d0:	6963      	ldr	r3, [r4, #20]
 800e7d2:	b2f6      	uxtb	r6, r6
 800e7d4:	4283      	cmp	r3, r0
 800e7d6:	4637      	mov	r7, r6
 800e7d8:	dc05      	bgt.n	800e7e6 <__swbuf_r+0x4e>
 800e7da:	4621      	mov	r1, r4
 800e7dc:	4628      	mov	r0, r5
 800e7de:	f7ff ff7f 	bl	800e6e0 <_fflush_r>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	d1ed      	bne.n	800e7c2 <__swbuf_r+0x2a>
 800e7e6:	68a3      	ldr	r3, [r4, #8]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	60a3      	str	r3, [r4, #8]
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	1c5a      	adds	r2, r3, #1
 800e7f0:	6022      	str	r2, [r4, #0]
 800e7f2:	701e      	strb	r6, [r3, #0]
 800e7f4:	6962      	ldr	r2, [r4, #20]
 800e7f6:	1c43      	adds	r3, r0, #1
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d004      	beq.n	800e806 <__swbuf_r+0x6e>
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	07db      	lsls	r3, r3, #31
 800e800:	d5e1      	bpl.n	800e7c6 <__swbuf_r+0x2e>
 800e802:	2e0a      	cmp	r6, #10
 800e804:	d1df      	bne.n	800e7c6 <__swbuf_r+0x2e>
 800e806:	4621      	mov	r1, r4
 800e808:	4628      	mov	r0, r5
 800e80a:	f7ff ff69 	bl	800e6e0 <_fflush_r>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d0d9      	beq.n	800e7c6 <__swbuf_r+0x2e>
 800e812:	e7d6      	b.n	800e7c2 <__swbuf_r+0x2a>

0800e814 <__swsetup_r>:
 800e814:	b538      	push	{r3, r4, r5, lr}
 800e816:	4b29      	ldr	r3, [pc, #164]	@ (800e8bc <__swsetup_r+0xa8>)
 800e818:	4605      	mov	r5, r0
 800e81a:	6818      	ldr	r0, [r3, #0]
 800e81c:	460c      	mov	r4, r1
 800e81e:	b118      	cbz	r0, 800e828 <__swsetup_r+0x14>
 800e820:	6a03      	ldr	r3, [r0, #32]
 800e822:	b90b      	cbnz	r3, 800e828 <__swsetup_r+0x14>
 800e824:	f7ff fa00 	bl	800dc28 <__sinit>
 800e828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82c:	0719      	lsls	r1, r3, #28
 800e82e:	d422      	bmi.n	800e876 <__swsetup_r+0x62>
 800e830:	06da      	lsls	r2, r3, #27
 800e832:	d407      	bmi.n	800e844 <__swsetup_r+0x30>
 800e834:	2209      	movs	r2, #9
 800e836:	602a      	str	r2, [r5, #0]
 800e838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
 800e842:	e033      	b.n	800e8ac <__swsetup_r+0x98>
 800e844:	0758      	lsls	r0, r3, #29
 800e846:	d512      	bpl.n	800e86e <__swsetup_r+0x5a>
 800e848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e84a:	b141      	cbz	r1, 800e85e <__swsetup_r+0x4a>
 800e84c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e850:	4299      	cmp	r1, r3
 800e852:	d002      	beq.n	800e85a <__swsetup_r+0x46>
 800e854:	4628      	mov	r0, r5
 800e856:	f7ff faf7 	bl	800de48 <_free_r>
 800e85a:	2300      	movs	r3, #0
 800e85c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e85e:	89a3      	ldrh	r3, [r4, #12]
 800e860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e864:	81a3      	strh	r3, [r4, #12]
 800e866:	2300      	movs	r3, #0
 800e868:	6063      	str	r3, [r4, #4]
 800e86a:	6923      	ldr	r3, [r4, #16]
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	89a3      	ldrh	r3, [r4, #12]
 800e870:	f043 0308 	orr.w	r3, r3, #8
 800e874:	81a3      	strh	r3, [r4, #12]
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	b94b      	cbnz	r3, 800e88e <__swsetup_r+0x7a>
 800e87a:	89a3      	ldrh	r3, [r4, #12]
 800e87c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e884:	d003      	beq.n	800e88e <__swsetup_r+0x7a>
 800e886:	4621      	mov	r1, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	f000 f84f 	bl	800e92c <__smakebuf_r>
 800e88e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e892:	f013 0201 	ands.w	r2, r3, #1
 800e896:	d00a      	beq.n	800e8ae <__swsetup_r+0x9a>
 800e898:	2200      	movs	r2, #0
 800e89a:	60a2      	str	r2, [r4, #8]
 800e89c:	6962      	ldr	r2, [r4, #20]
 800e89e:	4252      	negs	r2, r2
 800e8a0:	61a2      	str	r2, [r4, #24]
 800e8a2:	6922      	ldr	r2, [r4, #16]
 800e8a4:	b942      	cbnz	r2, 800e8b8 <__swsetup_r+0xa4>
 800e8a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8aa:	d1c5      	bne.n	800e838 <__swsetup_r+0x24>
 800e8ac:	bd38      	pop	{r3, r4, r5, pc}
 800e8ae:	0799      	lsls	r1, r3, #30
 800e8b0:	bf58      	it	pl
 800e8b2:	6962      	ldrpl	r2, [r4, #20]
 800e8b4:	60a2      	str	r2, [r4, #8]
 800e8b6:	e7f4      	b.n	800e8a2 <__swsetup_r+0x8e>
 800e8b8:	2000      	movs	r0, #0
 800e8ba:	e7f7      	b.n	800e8ac <__swsetup_r+0x98>
 800e8bc:	20000130 	.word	0x20000130

0800e8c0 <_sbrk_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4d06      	ldr	r5, [pc, #24]	@ (800e8dc <_sbrk_r+0x1c>)
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	4608      	mov	r0, r1
 800e8ca:	602b      	str	r3, [r5, #0]
 800e8cc:	f7f2 fac6 	bl	8000e5c <_sbrk>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_sbrk_r+0x1a>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_sbrk_r+0x1a>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	20001ecc 	.word	0x20001ecc

0800e8e0 <__swhatbuf_r>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e8:	2900      	cmp	r1, #0
 800e8ea:	b096      	sub	sp, #88	@ 0x58
 800e8ec:	4615      	mov	r5, r2
 800e8ee:	461e      	mov	r6, r3
 800e8f0:	da0d      	bge.n	800e90e <__swhatbuf_r+0x2e>
 800e8f2:	89a3      	ldrh	r3, [r4, #12]
 800e8f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e8f8:	f04f 0100 	mov.w	r1, #0
 800e8fc:	bf14      	ite	ne
 800e8fe:	2340      	movne	r3, #64	@ 0x40
 800e900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e904:	2000      	movs	r0, #0
 800e906:	6031      	str	r1, [r6, #0]
 800e908:	602b      	str	r3, [r5, #0]
 800e90a:	b016      	add	sp, #88	@ 0x58
 800e90c:	bd70      	pop	{r4, r5, r6, pc}
 800e90e:	466a      	mov	r2, sp
 800e910:	f000 f848 	bl	800e9a4 <_fstat_r>
 800e914:	2800      	cmp	r0, #0
 800e916:	dbec      	blt.n	800e8f2 <__swhatbuf_r+0x12>
 800e918:	9901      	ldr	r1, [sp, #4]
 800e91a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e91e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e922:	4259      	negs	r1, r3
 800e924:	4159      	adcs	r1, r3
 800e926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e92a:	e7eb      	b.n	800e904 <__swhatbuf_r+0x24>

0800e92c <__smakebuf_r>:
 800e92c:	898b      	ldrh	r3, [r1, #12]
 800e92e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e930:	079d      	lsls	r5, r3, #30
 800e932:	4606      	mov	r6, r0
 800e934:	460c      	mov	r4, r1
 800e936:	d507      	bpl.n	800e948 <__smakebuf_r+0x1c>
 800e938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e93c:	6023      	str	r3, [r4, #0]
 800e93e:	6123      	str	r3, [r4, #16]
 800e940:	2301      	movs	r3, #1
 800e942:	6163      	str	r3, [r4, #20]
 800e944:	b003      	add	sp, #12
 800e946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e948:	ab01      	add	r3, sp, #4
 800e94a:	466a      	mov	r2, sp
 800e94c:	f7ff ffc8 	bl	800e8e0 <__swhatbuf_r>
 800e950:	9f00      	ldr	r7, [sp, #0]
 800e952:	4605      	mov	r5, r0
 800e954:	4639      	mov	r1, r7
 800e956:	4630      	mov	r0, r6
 800e958:	f7ff fae2 	bl	800df20 <_malloc_r>
 800e95c:	b948      	cbnz	r0, 800e972 <__smakebuf_r+0x46>
 800e95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e962:	059a      	lsls	r2, r3, #22
 800e964:	d4ee      	bmi.n	800e944 <__smakebuf_r+0x18>
 800e966:	f023 0303 	bic.w	r3, r3, #3
 800e96a:	f043 0302 	orr.w	r3, r3, #2
 800e96e:	81a3      	strh	r3, [r4, #12]
 800e970:	e7e2      	b.n	800e938 <__smakebuf_r+0xc>
 800e972:	89a3      	ldrh	r3, [r4, #12]
 800e974:	6020      	str	r0, [r4, #0]
 800e976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e97a:	81a3      	strh	r3, [r4, #12]
 800e97c:	9b01      	ldr	r3, [sp, #4]
 800e97e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e982:	b15b      	cbz	r3, 800e99c <__smakebuf_r+0x70>
 800e984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e988:	4630      	mov	r0, r6
 800e98a:	f000 f81d 	bl	800e9c8 <_isatty_r>
 800e98e:	b128      	cbz	r0, 800e99c <__smakebuf_r+0x70>
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	f023 0303 	bic.w	r3, r3, #3
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	81a3      	strh	r3, [r4, #12]
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	431d      	orrs	r5, r3
 800e9a0:	81a5      	strh	r5, [r4, #12]
 800e9a2:	e7cf      	b.n	800e944 <__smakebuf_r+0x18>

0800e9a4 <_fstat_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4d07      	ldr	r5, [pc, #28]	@ (800e9c4 <_fstat_r+0x20>)
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	602b      	str	r3, [r5, #0]
 800e9b2:	f7f2 fa2a 	bl	8000e0a <_fstat>
 800e9b6:	1c43      	adds	r3, r0, #1
 800e9b8:	d102      	bne.n	800e9c0 <_fstat_r+0x1c>
 800e9ba:	682b      	ldr	r3, [r5, #0]
 800e9bc:	b103      	cbz	r3, 800e9c0 <_fstat_r+0x1c>
 800e9be:	6023      	str	r3, [r4, #0]
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	bf00      	nop
 800e9c4:	20001ecc 	.word	0x20001ecc

0800e9c8 <_isatty_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d06      	ldr	r5, [pc, #24]	@ (800e9e4 <_isatty_r+0x1c>)
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	4608      	mov	r0, r1
 800e9d2:	602b      	str	r3, [r5, #0]
 800e9d4:	f7f2 fa29 	bl	8000e2a <_isatty>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d102      	bne.n	800e9e2 <_isatty_r+0x1a>
 800e9dc:	682b      	ldr	r3, [r5, #0]
 800e9de:	b103      	cbz	r3, 800e9e2 <_isatty_r+0x1a>
 800e9e0:	6023      	str	r3, [r4, #0]
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	20001ecc 	.word	0x20001ecc

0800e9e8 <_init>:
 800e9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ea:	bf00      	nop
 800e9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ee:	bc08      	pop	{r3}
 800e9f0:	469e      	mov	lr, r3
 800e9f2:	4770      	bx	lr

0800e9f4 <_fini>:
 800e9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f6:	bf00      	nop
 800e9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fa:	bc08      	pop	{r3}
 800e9fc:	469e      	mov	lr, r3
 800e9fe:	4770      	bx	lr
